Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-56 -63 -56 -56] -63] [[20 43 20 20] 20] [[-70 99 99 99] -70] [[-87 -87 -87 68] -87] [[62 62 62 -28] -28] [[60 60 20 60] 20] [[100 100 100 73] 73] [[-1 76 -1 -1] -1] [[33 69 33 33] 33] [[-29 -29 31 -29] -29] [(69 69 69 69) 69] [(-93 -93 -93 -93) -93] [(-73 -73 -73 -73) -73] [(-11 -11 -11 -11) -11] [(38 38 38 38) 38] [(53 42 63 14) 14] [(77 14 58 87) 14] [(49 49 96 8) 8] [(57 66 60 32) 32] [(22 83 25 96) 22] [(17 76 43 32) 17] [(82 21 72 13) 13] [(57 83 77 71) 57] [(95 12 84 54) 12] [(35 57 62 95) 35] [(64 60 65 61) 60] [(31 85 59 59) 31] [(91 53 24 62) 24] [(80 59 92 3) 3] [(46 49 69 48) 46] [(98 58 56 81) 56] [(29 82 97 95) 29] [(53 0 93 2) 0] [(17 39 100 61) 17] [(3 61 74 59) 3] [(1 81 58 -39) -39] [(40 2 5 -44) -44] [(-44 -12 -64 -97) -97] [(-47 11 -13 -76) -76] [(-11 74 -3 66) -11] [(-95 91 -15 -84) -95] [(74 31 -78 -56) -78] [(-24 -97 -75 69) -97] [(-40 26 6 -8) -40] [(-92 67 43 -49) -92] [(55 12 48 7) 7] [(-1 8 46 9) -1] [(40 -71 26 87) -71] [(21 -27 69 91) -27] [(-82 29 -19 -51) -82] [(46 13 9 -73) -73] [(-9 76 -88 58) -88] [(-52 88 66 41) -52] [(-59 -79 82 -14) -79] [(-71 70 -17 82) -71] [(-53 96 51 43) -53] [(-64 -40 16 25) -64] [(-68 -10 68 60) -68] [(-65 14 28 39) -65] [(1 12 44 -76) -76] [(-13 -55 10 9) -55] [(-50 22 -87 -84) -87] [(6 -39 -40 -4) -40] [(-95 -27 19 65) -95] [(-55 -66 -68 28) -68] [(-28 74 -13 -7) -28] [(-80 -84 100 -83) -84] [(-40 -2 -92 -55) -92] [(-27 -18 73 -67) -67] [(-61 -67 -56 88) -67] [(-47 -65 -9 -16) -65] [(10 -76 -28 66) -76] [(-41 57 -87 -15) -87] [(18 3 -64 41) -64] [(70 73 73 -24) -24] [(98 -35 -6 66) -35] [(-33 7 79 63) -33] [(22 -17 -4 24) -17] [(16 -91 -27 -58) -91] [(-74 42 4 84) -74] [(-31 -40 -43 42) -43] [(-90 -35 -18 35) -90] [(83 -40 -33 -89) -89] [(60 74 23 6) 6] [(-49 -5 -22 94) -49] [(-8 25 -91 -66) -91] [(-61 -82 -34 27) -82] [(22 -36 -39 49) -39] [(-4 90 -83 -58) -83] [(47 -37 76 89) -37] [(30 -76 -70 68) -76] [(8 -11 36 -19) -19] [(-6 78 39 -73) -73] [(-87 -87 48 18) -87] [(-39 91 11 -13) -39])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-56 -63 -56 -56] -63]
Train Case:   6 | Input/Output: [[20 43 20 20] 20]
Train Case:   7 | Input/Output: [[-70 99 99 99] -70]
Train Case:   8 | Input/Output: [[-87 -87 -87 68] -87]
Train Case:   9 | Input/Output: [[62 62 62 -28] -28]
Train Case:  10 | Input/Output: [[60 60 20 60] 20]
Train Case:  11 | Input/Output: [[100 100 100 73] 73]
Train Case:  12 | Input/Output: [[-1 76 -1 -1] -1]
Train Case:  13 | Input/Output: [[33 69 33 33] 33]
Train Case:  14 | Input/Output: [[-29 -29 31 -29] -29]
Train Case:  15 | Input/Output: [(69 69 69 69) 69]
Train Case:  16 | Input/Output: [(-93 -93 -93 -93) -93]
Train Case:  17 | Input/Output: [(-73 -73 -73 -73) -73]
Train Case:  18 | Input/Output: [(-11 -11 -11 -11) -11]
Train Case:  19 | Input/Output: [(38 38 38 38) 38]
Train Case:  20 | Input/Output: [(53 42 63 14) 14]
Train Case:  21 | Input/Output: [(77 14 58 87) 14]
Train Case:  22 | Input/Output: [(49 49 96 8) 8]
Train Case:  23 | Input/Output: [(57 66 60 32) 32]
Train Case:  24 | Input/Output: [(22 83 25 96) 22]
Train Case:  25 | Input/Output: [(17 76 43 32) 17]
Train Case:  26 | Input/Output: [(82 21 72 13) 13]
Train Case:  27 | Input/Output: [(57 83 77 71) 57]
Train Case:  28 | Input/Output: [(95 12 84 54) 12]
Train Case:  29 | Input/Output: [(35 57 62 95) 35]
Train Case:  30 | Input/Output: [(64 60 65 61) 60]
Train Case:  31 | Input/Output: [(31 85 59 59) 31]
Train Case:  32 | Input/Output: [(91 53 24 62) 24]
Train Case:  33 | Input/Output: [(80 59 92 3) 3]
Train Case:  34 | Input/Output: [(46 49 69 48) 46]
Train Case:  35 | Input/Output: [(98 58 56 81) 56]
Train Case:  36 | Input/Output: [(29 82 97 95) 29]
Train Case:  37 | Input/Output: [(53 0 93 2) 0]
Train Case:  38 | Input/Output: [(17 39 100 61) 17]
Train Case:  39 | Input/Output: [(3 61 74 59) 3]
Train Case:  40 | Input/Output: [(1 81 58 -39) -39]
Train Case:  41 | Input/Output: [(40 2 5 -44) -44]
Train Case:  42 | Input/Output: [(-44 -12 -64 -97) -97]
Train Case:  43 | Input/Output: [(-47 11 -13 -76) -76]
Train Case:  44 | Input/Output: [(-11 74 -3 66) -11]
Train Case:  45 | Input/Output: [(-95 91 -15 -84) -95]
Train Case:  46 | Input/Output: [(74 31 -78 -56) -78]
Train Case:  47 | Input/Output: [(-24 -97 -75 69) -97]
Train Case:  48 | Input/Output: [(-40 26 6 -8) -40]
Train Case:  49 | Input/Output: [(-92 67 43 -49) -92]
Train Case:  50 | Input/Output: [(55 12 48 7) 7]
Train Case:  51 | Input/Output: [(-1 8 46 9) -1]
Train Case:  52 | Input/Output: [(40 -71 26 87) -71]
Train Case:  53 | Input/Output: [(21 -27 69 91) -27]
Train Case:  54 | Input/Output: [(-82 29 -19 -51) -82]
Train Case:  55 | Input/Output: [(46 13 9 -73) -73]
Train Case:  56 | Input/Output: [(-9 76 -88 58) -88]
Train Case:  57 | Input/Output: [(-52 88 66 41) -52]
Train Case:  58 | Input/Output: [(-59 -79 82 -14) -79]
Train Case:  59 | Input/Output: [(-71 70 -17 82) -71]
Train Case:  60 | Input/Output: [(-53 96 51 43) -53]
Train Case:  61 | Input/Output: [(-64 -40 16 25) -64]
Train Case:  62 | Input/Output: [(-68 -10 68 60) -68]
Train Case:  63 | Input/Output: [(-65 14 28 39) -65]
Train Case:  64 | Input/Output: [(1 12 44 -76) -76]
Train Case:  65 | Input/Output: [(-13 -55 10 9) -55]
Train Case:  66 | Input/Output: [(-50 22 -87 -84) -87]
Train Case:  67 | Input/Output: [(6 -39 -40 -4) -40]
Train Case:  68 | Input/Output: [(-95 -27 19 65) -95]
Train Case:  69 | Input/Output: [(-55 -66 -68 28) -68]
Train Case:  70 | Input/Output: [(-28 74 -13 -7) -28]
Train Case:  71 | Input/Output: [(-80 -84 100 -83) -84]
Train Case:  72 | Input/Output: [(-40 -2 -92 -55) -92]
Train Case:  73 | Input/Output: [(-27 -18 73 -67) -67]
Train Case:  74 | Input/Output: [(-61 -67 -56 88) -67]
Train Case:  75 | Input/Output: [(-47 -65 -9 -16) -65]
Train Case:  76 | Input/Output: [(10 -76 -28 66) -76]
Train Case:  77 | Input/Output: [(-41 57 -87 -15) -87]
Train Case:  78 | Input/Output: [(18 3 -64 41) -64]
Train Case:  79 | Input/Output: [(70 73 73 -24) -24]
Train Case:  80 | Input/Output: [(98 -35 -6 66) -35]
Train Case:  81 | Input/Output: [(-33 7 79 63) -33]
Train Case:  82 | Input/Output: [(22 -17 -4 24) -17]
Train Case:  83 | Input/Output: [(16 -91 -27 -58) -91]
Train Case:  84 | Input/Output: [(-74 42 4 84) -74]
Train Case:  85 | Input/Output: [(-31 -40 -43 42) -43]
Train Case:  86 | Input/Output: [(-90 -35 -18 35) -90]
Train Case:  87 | Input/Output: [(83 -40 -33 -89) -89]
Train Case:  88 | Input/Output: [(60 74 23 6) 6]
Train Case:  89 | Input/Output: [(-49 -5 -22 94) -49]
Train Case:  90 | Input/Output: [(-8 25 -91 -66) -91]
Train Case:  91 | Input/Output: [(-61 -82 -34 27) -82]
Train Case:  92 | Input/Output: [(22 -36 -39 49) -39]
Train Case:  93 | Input/Output: [(-4 90 -83 -58) -83]
Train Case:  94 | Input/Output: [(47 -37 76 89) -37]
Train Case:  95 | Input/Output: [(30 -76 -70 68) -76]
Train Case:  96 | Input/Output: [(8 -11 36 -19) -19]
Train Case:  97 | Input/Output: [(-6 78 39 -73) -73]
Train Case:  98 | Input/Output: [(-87 -87 48 18) -87]
Train Case:  99 | Input/Output: [(-39 91 11 -13) -39]
Test Case:   0 | Input/Output: [[30 30 30 -20] -20]
Test Case:   1 | Input/Output: [[-35 -83 -35 -35] -83]
Test Case:   2 | Input/Output: [[-17 -17 62 -17] -17]
Test Case:   3 | Input/Output: [[75 75 75 -36] -36]
Test Case:   4 | Input/Output: [[-26 -26 77 -26] -26]
Test Case:   5 | Input/Output: [[-59 -59 -59 100] -59]
Test Case:   6 | Input/Output: [[99 91 99 99] 91]
Test Case:   7 | Input/Output: [[-27 -23 -23 -23] -27]
Test Case:   8 | Input/Output: [[-70 -78 -78 -78] -78]
Test Case:   9 | Input/Output: [[-2 -61 -2 -2] -61]
Test Case:  10 | Input/Output: [[-57 -57 -57 49] -57]
Test Case:  11 | Input/Output: [[21 90 90 90] 21]
Test Case:  12 | Input/Output: [[-62 -62 58 -62] -62]
Test Case:  13 | Input/Output: [[-92 -92 -23 -92] -92]
Test Case:  14 | Input/Output: [[67 -43 67 67] -43]
Test Case:  15 | Input/Output: [[11 -20 -20 -20] -20]
Test Case:  16 | Input/Output: [[-67 -67 -20 -67] -67]
Test Case:  17 | Input/Output: [[57 58 58 58] 57]
Test Case:  18 | Input/Output: [[63 63 -2 63] -2]
Test Case:  19 | Input/Output: [[62 30 62 62] 30]
Test Case:  20 | Input/Output: [[56 -57 56 56] -57]
Test Case:  21 | Input/Output: [[-20 -73 -73 -73] -73]
Test Case:  22 | Input/Output: [[95 95 83 95] 83]
Test Case:  23 | Input/Output: [[-81 -81 31 -81] -81]
Test Case:  24 | Input/Output: [[-76 27 -76 -76] -76]
Test Case:  25 | Input/Output: [[82 82 82 51] 51]
Test Case:  26 | Input/Output: [[46 82 82 82] 46]
Test Case:  27 | Input/Output: [[-3 -3 -14 -3] -14]
Test Case:  28 | Input/Output: [[43 43 -43 43] -43]
Test Case:  29 | Input/Output: [[-36 -36 53 -36] -36]
Test Case:  30 | Input/Output: [[56 56 -58 56] -58]
Test Case:  31 | Input/Output: [[-5 41 41 41] -5]
Test Case:  32 | Input/Output: [[-43 43 43 43] -43]
Test Case:  33 | Input/Output: [[31 -39 -39 -39] -39]
Test Case:  34 | Input/Output: [[-9 -100 -100 -100] -100]
Test Case:  35 | Input/Output: [[37 -79 37 37] -79]
Test Case:  36 | Input/Output: [[53 -84 -84 -84] -84]
Test Case:  37 | Input/Output: [[-59 17 -59 -59] -59]
Test Case:  38 | Input/Output: [[-3 -3 4 -3] -3]
Test Case:  39 | Input/Output: [[23 23 23 -60] -60]
Test Case:  40 | Input/Output: [[39 -36 39 39] -36]
Test Case:  41 | Input/Output: [[-72 -72 32 -72] -72]
Test Case:  42 | Input/Output: [[-11 -11 8 -11] -11]
Test Case:  43 | Input/Output: [[7 7 97 7] 7]
Test Case:  44 | Input/Output: [[-70 34 -70 -70] -70]
Test Case:  45 | Input/Output: [[8 38 38 38] 8]
Test Case:  46 | Input/Output: [[-17 -17 26 -17] -17]
Test Case:  47 | Input/Output: [[85 53 85 85] 53]
Test Case:  48 | Input/Output: [[-25 -85 -25 -25] -85]
Test Case:  49 | Input/Output: [[55 55 -81 55] -81]
Test Case:  50 | Input/Output: [[-60 -75 -75 -75] -75]
Test Case:  51 | Input/Output: [[-17 -65 -65 -65] -65]
Test Case:  52 | Input/Output: [[-5 -47 -47 -47] -47]
Test Case:  53 | Input/Output: [[-66 -66 -66 -83] -83]
Test Case:  54 | Input/Output: [[90 90 90 73] 73]
Test Case:  55 | Input/Output: [[-16 -16 -16 -60] -60]
Test Case:  56 | Input/Output: [[16 -1 -1 -1] -1]
Test Case:  57 | Input/Output: [[1 1 1 1] 1]
Test Case:  58 | Input/Output: [[32 7 32 32] 7]
Test Case:  59 | Input/Output: [[-96 -96 -89 -96] -96]
Test Case:  60 | Input/Output: [[20 20 1 20] 1]
Test Case:  61 | Input/Output: [[46 -21 46 46] -21]
Test Case:  62 | Input/Output: [[7 93 7 7] 7]
Test Case:  63 | Input/Output: [[-59 -59 -59 27] -59]
Test Case:  64 | Input/Output: [[60 60 60 -30] -30]
Test Case:  65 | Input/Output: [[-26 79 -26 -26] -26]
Test Case:  66 | Input/Output: [[45 -13 45 45] -13]
Test Case:  67 | Input/Output: [[66 66 66 -93] -93]
Test Case:  68 | Input/Output: [[50 50 68 50] 50]
Test Case:  69 | Input/Output: [[49 49 9 49] 9]
Test Case:  70 | Input/Output: [[-86 40 40 40] -86]
Test Case:  71 | Input/Output: [[23 -48 -48 -48] -48]
Test Case:  72 | Input/Output: [[-49 15 -49 -49] -49]
Test Case:  73 | Input/Output: [[-96 -96 23 -96] -96]
Test Case:  74 | Input/Output: [[-39 -39 83 -39] -39]
Test Case:  75 | Input/Output: [[53 53 53 25] 25]
Test Case:  76 | Input/Output: [[73 22 22 22] 22]
Test Case:  77 | Input/Output: [[78 78 67 78] 67]
Test Case:  78 | Input/Output: [[54 58 58 58] 54]
Test Case:  79 | Input/Output: [[-26 -26 -26 66] -26]
Test Case:  80 | Input/Output: [[-4 25 -4 -4] -4]
Test Case:  81 | Input/Output: [[41 -81 41 41] -81]
Test Case:  82 | Input/Output: [[1 1 40 1] 1]
Test Case:  83 | Input/Output: [[-96 18 18 18] -96]
Test Case:  84 | Input/Output: [[40 68 40 40] 40]
Test Case:  85 | Input/Output: [[-9 90 90 90] -9]
Test Case:  86 | Input/Output: [[29 29 29 -97] -97]
Test Case:  87 | Input/Output: [[49 49 2 49] 2]
Test Case:  88 | Input/Output: [[-86 -5 -86 -86] -86]
Test Case:  89 | Input/Output: [[-73 -73 -66 -73] -73]
Test Case:  90 | Input/Output: [[-77 -77 26 -77] -77]
Test Case:  91 | Input/Output: [[24 24 56 24] 24]
Test Case:  92 | Input/Output: [[-55 50 -55 -55] -55]
Test Case:  93 | Input/Output: [[52 35 52 52] 35]
Test Case:  94 | Input/Output: [[-41 -51 -41 -41] -51]
Test Case:  95 | Input/Output: [[-85 76 -85 -85] -85]
Test Case:  96 | Input/Output: [[-47 10 10 10] -47]
Test Case:  97 | Input/Output: [[38 24 24 24] 24]
Test Case:  98 | Input/Output: [[-91 -91 -45 -91] -91]
Test Case:  99 | Input/Output: [[36 -81 -81 -81] -81]
Test Case: 100 | Input/Output: [(8 8 8 8) 8]
Test Case: 101 | Input/Output: [(9 9 9 9) 9]
Test Case: 102 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 103 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 104 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 105 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 106 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 107 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 108 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 109 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 110 | Input/Output: [(20 20 20 20) 20]
Test Case: 111 | Input/Output: [(51 51 51 51) 51]
Test Case: 112 | Input/Output: [(86 86 86 86) 86]
Test Case: 113 | Input/Output: [(20 20 20 20) 20]
Test Case: 114 | Input/Output: [(71 71 71 71) 71]
Test Case: 115 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 116 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 117 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 118 | Input/Output: [(68 68 68 68) 68]
Test Case: 119 | Input/Output: [(29 29 29 29) 29]
Test Case: 120 | Input/Output: [(35 35 35 35) 35]
Test Case: 121 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 122 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 123 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 124 | Input/Output: [(45 45 45 45) 45]
Test Case: 125 | Input/Output: [(46 46 46 46) 46]
Test Case: 126 | Input/Output: [(10 10 10 10) 10]
Test Case: 127 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 128 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 129 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 130 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 131 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 132 | Input/Output: [(53 53 53 53) 53]
Test Case: 133 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 134 | Input/Output: [(63 63 63 63) 63]
Test Case: 135 | Input/Output: [(31 31 31 31) 31]
Test Case: 136 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 137 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 138 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 139 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 140 | Input/Output: [(55 55 55 55) 55]
Test Case: 141 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 142 | Input/Output: [(27 27 27 27) 27]
Test Case: 143 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 144 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 145 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 146 | Input/Output: [(75 75 75 75) 75]
Test Case: 147 | Input/Output: [(53 53 53 53) 53]
Test Case: 148 | Input/Output: [(5 5 5 5) 5]
Test Case: 149 | Input/Output: [(77 77 77 77) 77]
Test Case: 150 | Input/Output: [(99 99 99 99) 99]
Test Case: 151 | Input/Output: [(0 0 0 0) 0]
Test Case: 152 | Input/Output: [(100 100 100 100) 100]
Test Case: 153 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 154 | Input/Output: [(13 13 13 13) 13]
Test Case: 155 | Input/Output: [(67 67 67 67) 67]
Test Case: 156 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 157 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 158 | Input/Output: [(1 1 1 1) 1]
Test Case: 159 | Input/Output: [(96 96 96 96) 96]
Test Case: 160 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 161 | Input/Output: [(73 73 73 73) 73]
Test Case: 162 | Input/Output: [(55 55 55 55) 55]
Test Case: 163 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 164 | Input/Output: [(39 39 39 39) 39]
Test Case: 165 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 166 | Input/Output: [(18 18 18 18) 18]
Test Case: 167 | Input/Output: [(65 65 65 65) 65]
Test Case: 168 | Input/Output: [(2 2 2 2) 2]
Test Case: 169 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 170 | Input/Output: [(23 23 23 23) 23]
Test Case: 171 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 172 | Input/Output: [(20 20 20 20) 20]
Test Case: 173 | Input/Output: [(36 36 36 36) 36]
Test Case: 174 | Input/Output: [(30 30 30 30) 30]
Test Case: 175 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 176 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 177 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 178 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 179 | Input/Output: [(49 49 49 49) 49]
Test Case: 180 | Input/Output: [(21 21 21 21) 21]
Test Case: 181 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 182 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 183 | Input/Output: [(33 33 33 33) 33]
Test Case: 184 | Input/Output: [(74 74 74 74) 74]
Test Case: 185 | Input/Output: [(65 65 65 65) 65]
Test Case: 186 | Input/Output: [(74 74 74 74) 74]
Test Case: 187 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 188 | Input/Output: [(55 55 55 55) 55]
Test Case: 189 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 190 | Input/Output: [(80 80 80 80) 80]
Test Case: 191 | Input/Output: [(53 53 53 53) 53]
Test Case: 192 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 193 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 194 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 195 | Input/Output: [(10 10 10 10) 10]
Test Case: 196 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 197 | Input/Output: [(37 37 37 37) 37]
Test Case: 198 | Input/Output: [(11 11 11 11) 11]
Test Case: 199 | Input/Output: [(3 3 3 3) 3]
Test Case: 200 | Input/Output: [(35 15 38 100) 15]
Test Case: 201 | Input/Output: [(53 7 78 22) 7]
Test Case: 202 | Input/Output: [(36 48 41 1) 1]
Test Case: 203 | Input/Output: [(13 20 75 27) 13]
Test Case: 204 | Input/Output: [(97 85 23 96) 23]
Test Case: 205 | Input/Output: [(100 29 52 82) 29]
Test Case: 206 | Input/Output: [(55 6 39 90) 6]
Test Case: 207 | Input/Output: [(52 52 25 80) 25]
Test Case: 208 | Input/Output: [(2 27 10 91) 2]
Test Case: 209 | Input/Output: [(71 15 85 77) 15]
Test Case: 210 | Input/Output: [(17 37 48 73) 17]
Test Case: 211 | Input/Output: [(37 60 13 54) 13]
Test Case: 212 | Input/Output: [(49 43 58 73) 43]
Test Case: 213 | Input/Output: [(21 92 65 57) 21]
Test Case: 214 | Input/Output: [(31 30 28 100) 28]
Test Case: 215 | Input/Output: [(18 56 78 85) 18]
Test Case: 216 | Input/Output: [(58 92 56 57) 56]
Test Case: 217 | Input/Output: [(10 80 37 80) 10]
Test Case: 218 | Input/Output: [(34 0 64 54) 0]
Test Case: 219 | Input/Output: [(47 3 84 28) 3]
Test Case: 220 | Input/Output: [(72 43 92 47) 43]
Test Case: 221 | Input/Output: [(51 30 81 30) 30]
Test Case: 222 | Input/Output: [(94 8 5 52) 5]
Test Case: 223 | Input/Output: [(19 93 27 85) 19]
Test Case: 224 | Input/Output: [(60 81 53 18) 18]
Test Case: 225 | Input/Output: [(13 87 84 94) 13]
Test Case: 226 | Input/Output: [(71 35 92 54) 35]
Test Case: 227 | Input/Output: [(92 58 17 23) 17]
Test Case: 228 | Input/Output: [(47 93 5 24) 5]
Test Case: 229 | Input/Output: [(33 51 13 51) 13]
Test Case: 230 | Input/Output: [(5 46 98 11) 5]
Test Case: 231 | Input/Output: [(18 70 42 20) 18]
Test Case: 232 | Input/Output: [(52 36 97 97) 36]
Test Case: 233 | Input/Output: [(12 78 52 75) 12]
Test Case: 234 | Input/Output: [(30 92 64 39) 30]
Test Case: 235 | Input/Output: [(61 32 48 45) 32]
Test Case: 236 | Input/Output: [(79 9 4 14) 4]
Test Case: 237 | Input/Output: [(76 92 99 16) 16]
Test Case: 238 | Input/Output: [(85 51 78 7) 7]
Test Case: 239 | Input/Output: [(15 99 45 72) 15]
Test Case: 240 | Input/Output: [(8 11 38 73) 8]
Test Case: 241 | Input/Output: [(86 74 51 52) 51]
Test Case: 242 | Input/Output: [(58 89 44 12) 12]
Test Case: 243 | Input/Output: [(78 8 71 84) 8]
Test Case: 244 | Input/Output: [(7 42 52 12) 7]
Test Case: 245 | Input/Output: [(39 12 61 77) 12]
Test Case: 246 | Input/Output: [(15 99 17 62) 15]
Test Case: 247 | Input/Output: [(60 70 34 80) 34]
Test Case: 248 | Input/Output: [(66 85 97 4) 4]
Test Case: 249 | Input/Output: [(14 57 62 47) 14]
Test Case: 250 | Input/Output: [(89 81 19 62) 19]
Test Case: 251 | Input/Output: [(72 18 36 5) 5]
Test Case: 252 | Input/Output: [(35 99 21 56) 21]
Test Case: 253 | Input/Output: [(25 19 62 93) 19]
Test Case: 254 | Input/Output: [(50 55 77 19) 19]
Test Case: 255 | Input/Output: [(59 83 1 100) 1]
Test Case: 256 | Input/Output: [(83 94 19 58) 19]
Test Case: 257 | Input/Output: [(26 58 47 83) 26]
Test Case: 258 | Input/Output: [(61 16 56 58) 16]
Test Case: 259 | Input/Output: [(35 22 73 78) 22]
Test Case: 260 | Input/Output: [(10 91 59 45) 10]
Test Case: 261 | Input/Output: [(54 0 40 69) 0]
Test Case: 262 | Input/Output: [(3 13 83 100) 3]
Test Case: 263 | Input/Output: [(94 100 16 46) 16]
Test Case: 264 | Input/Output: [(61 74 28 63) 28]
Test Case: 265 | Input/Output: [(71 33 98 67) 33]
Test Case: 266 | Input/Output: [(2 36 63 85) 2]
Test Case: 267 | Input/Output: [(5 86 63 38) 5]
Test Case: 268 | Input/Output: [(84 50 15 41) 15]
Test Case: 269 | Input/Output: [(80 67 56 56) 56]
Test Case: 270 | Input/Output: [(43 6 17 15) 6]
Test Case: 271 | Input/Output: [(21 1 13 86) 1]
Test Case: 272 | Input/Output: [(8 64 58 8) 8]
Test Case: 273 | Input/Output: [(27 60 22 7) 7]
Test Case: 274 | Input/Output: [(78 16 89 53) 16]
Test Case: 275 | Input/Output: [(93 82 90 23) 23]
Test Case: 276 | Input/Output: [(7 41 58 33) 7]
Test Case: 277 | Input/Output: [(66 76 5 24) 5]
Test Case: 278 | Input/Output: [(22 78 6 9) 6]
Test Case: 279 | Input/Output: [(38 60 39 23) 23]
Test Case: 280 | Input/Output: [(1 94 92 94) 1]
Test Case: 281 | Input/Output: [(46 61 61 32) 32]
Test Case: 282 | Input/Output: [(99 12 82 32) 12]
Test Case: 283 | Input/Output: [(7 42 68 59) 7]
Test Case: 284 | Input/Output: [(63 47 75 46) 46]
Test Case: 285 | Input/Output: [(82 37 10 33) 10]
Test Case: 286 | Input/Output: [(63 41 19 29) 19]
Test Case: 287 | Input/Output: [(0 96 65 68) 0]
Test Case: 288 | Input/Output: [(43 56 9 57) 9]
Test Case: 289 | Input/Output: [(23 60 53 41) 23]
Test Case: 290 | Input/Output: [(15 94 33 36) 15]
Test Case: 291 | Input/Output: [(100 42 39 72) 39]
Test Case: 292 | Input/Output: [(65 36 58 46) 36]
Test Case: 293 | Input/Output: [(1 25 5 72) 1]
Test Case: 294 | Input/Output: [(55 83 93 14) 14]
Test Case: 295 | Input/Output: [(65 96 50 15) 15]
Test Case: 296 | Input/Output: [(62 4 47 89) 4]
Test Case: 297 | Input/Output: [(84 26 75 56) 26]
Test Case: 298 | Input/Output: [(89 27 44 16) 16]
Test Case: 299 | Input/Output: [(55 74 13 77) 13]
Test Case: 300 | Input/Output: [(31 8 20 59) 8]
Test Case: 301 | Input/Output: [(79 88 63 37) 37]
Test Case: 302 | Input/Output: [(30 24 80 78) 24]
Test Case: 303 | Input/Output: [(23 41 19 41) 19]
Test Case: 304 | Input/Output: [(23 44 4 82) 4]
Test Case: 305 | Input/Output: [(76 24 86 14) 14]
Test Case: 306 | Input/Output: [(18 9 46 12) 9]
Test Case: 307 | Input/Output: [(75 37 60 56) 37]
Test Case: 308 | Input/Output: [(7 0 98 33) 0]
Test Case: 309 | Input/Output: [(20 92 22 97) 20]
Test Case: 310 | Input/Output: [(36 61 76 82) 36]
Test Case: 311 | Input/Output: [(43 79 14 59) 14]
Test Case: 312 | Input/Output: [(2 17 31 58) 2]
Test Case: 313 | Input/Output: [(24 49 62 31) 24]
Test Case: 314 | Input/Output: [(37 82 20 81) 20]
Test Case: 315 | Input/Output: [(72 74 97 45) 45]
Test Case: 316 | Input/Output: [(97 67 19 3) 3]
Test Case: 317 | Input/Output: [(66 12 85 22) 12]
Test Case: 318 | Input/Output: [(91 69 34 28) 28]
Test Case: 319 | Input/Output: [(26 17 19 84) 17]
Test Case: 320 | Input/Output: [(63 48 0 11) 0]
Test Case: 321 | Input/Output: [(10 12 34 6) 6]
Test Case: 322 | Input/Output: [(26 56 55 59) 26]
Test Case: 323 | Input/Output: [(84 72 86 35) 35]
Test Case: 324 | Input/Output: [(19 13 13 0) 0]
Test Case: 325 | Input/Output: [(40 9 3 43) 3]
Test Case: 326 | Input/Output: [(80 40 17 62) 17]
Test Case: 327 | Input/Output: [(98 17 27 83) 17]
Test Case: 328 | Input/Output: [(42 97 79 61) 42]
Test Case: 329 | Input/Output: [(37 74 31 98) 31]
Test Case: 330 | Input/Output: [(87 98 41 4) 4]
Test Case: 331 | Input/Output: [(59 94 77 50) 50]
Test Case: 332 | Input/Output: [(70 72 23 80) 23]
Test Case: 333 | Input/Output: [(20 85 24 68) 20]
Test Case: 334 | Input/Output: [(96 57 50 85) 50]
Test Case: 335 | Input/Output: [(9 19 60 46) 9]
Test Case: 336 | Input/Output: [(59 60 13 29) 13]
Test Case: 337 | Input/Output: [(43 33 90 76) 33]
Test Case: 338 | Input/Output: [(91 68 95 28) 28]
Test Case: 339 | Input/Output: [(28 15 35 43) 15]
Test Case: 340 | Input/Output: [(45 19 13 17) 13]
Test Case: 341 | Input/Output: [(42 9 76 56) 9]
Test Case: 342 | Input/Output: [(13 27 79 62) 13]
Test Case: 343 | Input/Output: [(11 34 99 9) 9]
Test Case: 344 | Input/Output: [(9 100 14 77) 9]
Test Case: 345 | Input/Output: [(52 50 68 6) 6]
Test Case: 346 | Input/Output: [(40 44 9 70) 9]
Test Case: 347 | Input/Output: [(15 51 16 45) 15]
Test Case: 348 | Input/Output: [(65 4 96 58) 4]
Test Case: 349 | Input/Output: [(35 90 78 22) 22]
Test Case: 350 | Input/Output: [(94 49 0 16) 0]
Test Case: 351 | Input/Output: [(23 36 95 7) 7]
Test Case: 352 | Input/Output: [(78 16 24 29) 16]
Test Case: 353 | Input/Output: [(93 2 37 84) 2]
Test Case: 354 | Input/Output: [(64 33 6 12) 6]
Test Case: 355 | Input/Output: [(94 53 55 13) 13]
Test Case: 356 | Input/Output: [(88 13 46 63) 13]
Test Case: 357 | Input/Output: [(80 90 74 39) 39]
Test Case: 358 | Input/Output: [(49 58 36 16) 16]
Test Case: 359 | Input/Output: [(31 18 88 9) 9]
Test Case: 360 | Input/Output: [(97 91 12 84) 12]
Test Case: 361 | Input/Output: [(26 19 83 14) 14]
Test Case: 362 | Input/Output: [(55 32 55 71) 32]
Test Case: 363 | Input/Output: [(54 25 39 89) 25]
Test Case: 364 | Input/Output: [(47 24 48 7) 7]
Test Case: 365 | Input/Output: [(61 95 35 60) 35]
Test Case: 366 | Input/Output: [(50 34 19 8) 8]
Test Case: 367 | Input/Output: [(76 31 6 97) 6]
Test Case: 368 | Input/Output: [(5 18 40 93) 5]
Test Case: 369 | Input/Output: [(21 21 32 50) 21]
Test Case: 370 | Input/Output: [(39 82 97 41) 39]
Test Case: 371 | Input/Output: [(8 88 74 73) 8]
Test Case: 372 | Input/Output: [(52 71 77 49) 49]
Test Case: 373 | Input/Output: [(97 67 97 27) 27]
Test Case: 374 | Input/Output: [(14 22 25 73) 14]
Test Case: 375 | Input/Output: [(4 41 96 87) 4]
Test Case: 376 | Input/Output: [(30 85 55 24) 24]
Test Case: 377 | Input/Output: [(43 76 25 79) 25]
Test Case: 378 | Input/Output: [(21 40 43 46) 21]
Test Case: 379 | Input/Output: [(38 72 69 27) 27]
Test Case: 380 | Input/Output: [(68 39 63 89) 39]
Test Case: 381 | Input/Output: [(18 37 80 63) 18]
Test Case: 382 | Input/Output: [(55 58 69 95) 55]
Test Case: 383 | Input/Output: [(18 20 40 25) 18]
Test Case: 384 | Input/Output: [(74 12 56 95) 12]
Test Case: 385 | Input/Output: [(12 24 10 85) 10]
Test Case: 386 | Input/Output: [(69 86 1 53) 1]
Test Case: 387 | Input/Output: [(72 61 77 60) 60]
Test Case: 388 | Input/Output: [(70 84 62 92) 62]
Test Case: 389 | Input/Output: [(28 0 74 74) 0]
Test Case: 390 | Input/Output: [(38 90 25 32) 25]
Test Case: 391 | Input/Output: [(97 24 0 31) 0]
Test Case: 392 | Input/Output: [(95 26 97 80) 26]
Test Case: 393 | Input/Output: [(7 40 9 80) 7]
Test Case: 394 | Input/Output: [(3 89 93 27) 3]
Test Case: 395 | Input/Output: [(95 98 66 22) 22]
Test Case: 396 | Input/Output: [(14 36 90 42) 14]
Test Case: 397 | Input/Output: [(46 45 45 28) 28]
Test Case: 398 | Input/Output: [(99 7 11 86) 7]
Test Case: 399 | Input/Output: [(93 95 70 0) 0]
Test Case: 400 | Input/Output: [(-55 62 -22 15) -55]
Test Case: 401 | Input/Output: [(44 -17 -4 -58) -58]
Test Case: 402 | Input/Output: [(-91 -57 7 -76) -91]
Test Case: 403 | Input/Output: [(-92 -76 -11 87) -92]
Test Case: 404 | Input/Output: [(-38 46 74 -55) -55]
Test Case: 405 | Input/Output: [(98 -48 -12 -84) -84]
Test Case: 406 | Input/Output: [(31 -21 -36 24) -36]
Test Case: 407 | Input/Output: [(42 -7 -47 76) -47]
Test Case: 408 | Input/Output: [(20 61 -33 44) -33]
Test Case: 409 | Input/Output: [(-6 64 -37 -46) -46]
Test Case: 410 | Input/Output: [(-50 88 98 87) -50]
Test Case: 411 | Input/Output: [(80 -5 43 57) -5]
Test Case: 412 | Input/Output: [(13 -3 54 -75) -75]
Test Case: 413 | Input/Output: [(25 41 31 100) 25]
Test Case: 414 | Input/Output: [(-77 -9 -15 -6) -77]
Test Case: 415 | Input/Output: [(-99 -60 7 78) -99]
Test Case: 416 | Input/Output: [(-99 -86 88 -28) -99]
Test Case: 417 | Input/Output: [(-55 60 -34 89) -55]
Test Case: 418 | Input/Output: [(66 72 64 44) 44]
Test Case: 419 | Input/Output: [(-95 79 22 75) -95]
Test Case: 420 | Input/Output: [(79 35 -12 81) -12]
Test Case: 421 | Input/Output: [(69 10 12 65) 10]
Test Case: 422 | Input/Output: [(19 -94 -63 71) -94]
Test Case: 423 | Input/Output: [(31 35 -8 -81) -81]
Test Case: 424 | Input/Output: [(1 -7 -6 18) -7]
Test Case: 425 | Input/Output: [(1 -82 -10 -89) -89]
Test Case: 426 | Input/Output: [(-85 41 -85 43) -85]
Test Case: 427 | Input/Output: [(-4 17 -72 14) -72]
Test Case: 428 | Input/Output: [(74 -36 -60 -96) -96]
Test Case: 429 | Input/Output: [(75 96 -49 -42) -49]
Test Case: 430 | Input/Output: [(75 -10 59 0) -10]
Test Case: 431 | Input/Output: [(96 -79 -99 -42) -99]
Test Case: 432 | Input/Output: [(98 60 66 -37) -37]
Test Case: 433 | Input/Output: [(49 94 -96 -60) -96]
Test Case: 434 | Input/Output: [(88 10 -84 86) -84]
Test Case: 435 | Input/Output: [(-33 -43 17 -87) -87]
Test Case: 436 | Input/Output: [(64 88 1 -10) -10]
Test Case: 437 | Input/Output: [(51 27 13 -2) -2]
Test Case: 438 | Input/Output: [(100 31 -24 -66) -66]
Test Case: 439 | Input/Output: [(-6 -27 46 53) -27]
Test Case: 440 | Input/Output: [(65 93 37 93) 37]
Test Case: 441 | Input/Output: [(-65 17 35 91) -65]
Test Case: 442 | Input/Output: [(57 -5 32 22) -5]
Test Case: 443 | Input/Output: [(-2 -29 64 75) -29]
Test Case: 444 | Input/Output: [(11 -53 34 -69) -69]
Test Case: 445 | Input/Output: [(34 22 46 93) 22]
Test Case: 446 | Input/Output: [(-78 24 42 30) -78]
Test Case: 447 | Input/Output: [(-13 -77 -7 72) -77]
Test Case: 448 | Input/Output: [(-51 -17 84 74) -51]
Test Case: 449 | Input/Output: [(50 -85 17 1) -85]
Test Case: 450 | Input/Output: [(30 27 -48 91) -48]
Test Case: 451 | Input/Output: [(-94 -38 -35 -39) -94]
Test Case: 452 | Input/Output: [(33 -4 70 -43) -43]
Test Case: 453 | Input/Output: [(5 24 -97 -53) -97]
Test Case: 454 | Input/Output: [(-97 47 -42 -55) -97]
Test Case: 455 | Input/Output: [(-73 47 20 84) -73]
Test Case: 456 | Input/Output: [(66 51 46 83) 46]
Test Case: 457 | Input/Output: [(74 -89 56 -76) -89]
Test Case: 458 | Input/Output: [(-84 -82 -1 -68) -84]
Test Case: 459 | Input/Output: [(24 -46 26 -64) -64]
Test Case: 460 | Input/Output: [(-79 71 -89 30) -89]
Test Case: 461 | Input/Output: [(-43 99 83 -30) -43]
Test Case: 462 | Input/Output: [(38 86 -23 -35) -35]
Test Case: 463 | Input/Output: [(-83 -85 63 86) -85]
Test Case: 464 | Input/Output: [(-47 28 -69 39) -69]
Test Case: 465 | Input/Output: [(82 -55 -59 25) -59]
Test Case: 466 | Input/Output: [(-100 -61 -9 -26) -100]
Test Case: 467 | Input/Output: [(-53 -96 -42 -42) -96]
Test Case: 468 | Input/Output: [(54 -93 86 83) -93]
Test Case: 469 | Input/Output: [(-36 34 3 42) -36]
Test Case: 470 | Input/Output: [(98 -51 72 9) -51]
Test Case: 471 | Input/Output: [(97 -42 -91 0) -91]
Test Case: 472 | Input/Output: [(-57 98 -21 -69) -69]
Test Case: 473 | Input/Output: [(-8 -35 -71 -70) -71]
Test Case: 474 | Input/Output: [(20 -98 39 -58) -98]
Test Case: 475 | Input/Output: [(79 -16 -30 77) -30]
Test Case: 476 | Input/Output: [(-96 -87 79 65) -96]
Test Case: 477 | Input/Output: [(-78 74 -96 -20) -96]
Test Case: 478 | Input/Output: [(-4 -48 -87 28) -87]
Test Case: 479 | Input/Output: [(59 -19 -90 -62) -90]
Test Case: 480 | Input/Output: [(46 79 -82 -27) -82]
Test Case: 481 | Input/Output: [(7 -67 -97 28) -97]
Test Case: 482 | Input/Output: [(14 -96 32 -58) -96]
Test Case: 483 | Input/Output: [(-62 38 -73 -78) -78]
Test Case: 484 | Input/Output: [(-61 4 -66 -22) -66]
Test Case: 485 | Input/Output: [(2 61 33 -40) -40]
Test Case: 486 | Input/Output: [(33 -83 2 -74) -83]
Test Case: 487 | Input/Output: [(-37 -26 46 -80) -80]
Test Case: 488 | Input/Output: [(-63 17 -80 -79) -80]
Test Case: 489 | Input/Output: [(-47 98 7 -59) -59]
Test Case: 490 | Input/Output: [(52 82 -28 -28) -28]
Test Case: 491 | Input/Output: [(11 30 -65 -1) -65]
Test Case: 492 | Input/Output: [(-84 -22 54 -96) -96]
Test Case: 493 | Input/Output: [(7 89 75 31) 7]
Test Case: 494 | Input/Output: [(52 76 82 86) 52]
Test Case: 495 | Input/Output: [(24 -8 -36 96) -36]
Test Case: 496 | Input/Output: [(91 81 41 -39) -39]
Test Case: 497 | Input/Output: [(-24 43 -33 -72) -72]
Test Case: 498 | Input/Output: [(-92 -24 48 97) -92]
Test Case: 499 | Input/Output: [(15 96 -42 82) -42]
Test Case: 500 | Input/Output: [(-87 71 -13 -64) -87]
Test Case: 501 | Input/Output: [(-38 95 83 -31) -38]
Test Case: 502 | Input/Output: [(-47 63 -93 -16) -93]
Test Case: 503 | Input/Output: [(94 -37 -54 -17) -54]
Test Case: 504 | Input/Output: [(-46 40 -49 -54) -54]
Test Case: 505 | Input/Output: [(89 -86 -90 -67) -90]
Test Case: 506 | Input/Output: [(-64 90 -64 21) -64]
Test Case: 507 | Input/Output: [(-21 78 30 -44) -44]
Test Case: 508 | Input/Output: [(34 19 -61 85) -61]
Test Case: 509 | Input/Output: [(71 -70 11 100) -70]
Test Case: 510 | Input/Output: [(53 -98 -11 89) -98]
Test Case: 511 | Input/Output: [(13 75 27 2) 2]
Test Case: 512 | Input/Output: [(-16 18 54 32) -16]
Test Case: 513 | Input/Output: [(82 -22 19 -76) -76]
Test Case: 514 | Input/Output: [(41 98 98 46) 41]
Test Case: 515 | Input/Output: [(50 54 -82 11) -82]
Test Case: 516 | Input/Output: [(-10 67 52 -82) -82]
Test Case: 517 | Input/Output: [(-35 -7 85 49) -35]
Test Case: 518 | Input/Output: [(-12 41 3 -1) -12]
Test Case: 519 | Input/Output: [(57 -25 36 -51) -51]
Test Case: 520 | Input/Output: [(-46 53 -84 -97) -97]
Test Case: 521 | Input/Output: [(-25 81 56 -71) -71]
Test Case: 522 | Input/Output: [(-48 80 -14 69) -48]
Test Case: 523 | Input/Output: [(33 -32 67 -39) -39]
Test Case: 524 | Input/Output: [(-54 -30 -47 -77) -77]
Test Case: 525 | Input/Output: [(-70 -98 -26 -16) -98]
Test Case: 526 | Input/Output: [(-64 84 -68 90) -68]
Test Case: 527 | Input/Output: [(98 95 88 28) 28]
Test Case: 528 | Input/Output: [(-57 7 -22 39) -57]
Test Case: 529 | Input/Output: [(-96 92 20 81) -96]
Test Case: 530 | Input/Output: [(41 -63 -96 -10) -96]
Test Case: 531 | Input/Output: [(48 72 -34 42) -34]
Test Case: 532 | Input/Output: [(-43 -27 88 -48) -48]
Test Case: 533 | Input/Output: [(-85 63 59 89) -85]
Test Case: 534 | Input/Output: [(6 -44 -4 55) -44]
Test Case: 535 | Input/Output: [(42 14 -89 12) -89]
Test Case: 536 | Input/Output: [(99 87 -28 61) -28]
Test Case: 537 | Input/Output: [(-59 92 13 37) -59]
Test Case: 538 | Input/Output: [(-21 32 96 -47) -47]
Test Case: 539 | Input/Output: [(64 -83 -93 67) -93]
Test Case: 540 | Input/Output: [(73 1 49 -75) -75]
Test Case: 541 | Input/Output: [(-88 -62 97 65) -88]
Test Case: 542 | Input/Output: [(14 -61 17 -37) -61]
Test Case: 543 | Input/Output: [(-3 -59 6 -64) -64]
Test Case: 544 | Input/Output: [(-86 -76 54 -34) -86]
Test Case: 545 | Input/Output: [(-49 48 36 25) -49]
Test Case: 546 | Input/Output: [(-55 11 -48 28) -55]
Test Case: 547 | Input/Output: [(-37 -28 75 60) -37]
Test Case: 548 | Input/Output: [(-63 26 -14 -60) -63]
Test Case: 549 | Input/Output: [(8 57 88 -53) -53]
Test Case: 550 | Input/Output: [(-26 71 -51 91) -51]
Test Case: 551 | Input/Output: [(-87 -43 -37 -14) -87]
Test Case: 552 | Input/Output: [(90 45 -30 -90) -90]
Test Case: 553 | Input/Output: [(-71 -56 59 -46) -71]
Test Case: 554 | Input/Output: [(88 60 75 34) 34]
Test Case: 555 | Input/Output: [(42 -96 20 -16) -96]
Test Case: 556 | Input/Output: [(-11 76 0 -82) -82]
Test Case: 557 | Input/Output: [(-62 80 70 -72) -72]
Test Case: 558 | Input/Output: [(-23 -57 -94 -68) -94]
Test Case: 559 | Input/Output: [(49 73 -95 69) -95]
Test Case: 560 | Input/Output: [(-72 -15 49 -30) -72]
Test Case: 561 | Input/Output: [(-2 -27 -18 96) -27]
Test Case: 562 | Input/Output: [(-24 80 62 -64) -64]
Test Case: 563 | Input/Output: [(-13 -4 -32 34) -32]
Test Case: 564 | Input/Output: [(38 64 -73 -10) -73]
Test Case: 565 | Input/Output: [(79 -70 -63 -18) -70]
Test Case: 566 | Input/Output: [(-1 -17 -57 -80) -80]
Test Case: 567 | Input/Output: [(3 -9 -47 77) -47]
Test Case: 568 | Input/Output: [(89 93 77 26) 26]
Test Case: 569 | Input/Output: [(-89 10 -56 -86) -89]
Test Case: 570 | Input/Output: [(-44 14 19 -22) -44]
Test Case: 571 | Input/Output: [(75 -81 -72 -59) -81]
Test Case: 572 | Input/Output: [(18 -18 54 70) -18]
Test Case: 573 | Input/Output: [(25 -54 28 -77) -77]
Test Case: 574 | Input/Output: [(24 -73 -84 45) -84]
Test Case: 575 | Input/Output: [(80 91 13 36) 13]
Test Case: 576 | Input/Output: [(0 18 100 47) 0]
Test Case: 577 | Input/Output: [(50 65 85 4) 4]
Test Case: 578 | Input/Output: [(-67 95 -58 70) -67]
Test Case: 579 | Input/Output: [(-53 -88 50 60) -88]
Test Case: 580 | Input/Output: [(-11 26 20 -55) -55]
Test Case: 581 | Input/Output: [(-12 19 21 -35) -35]
Test Case: 582 | Input/Output: [(-12 92 -59 -21) -59]
Test Case: 583 | Input/Output: [(-55 -93 36 -26) -93]
Test Case: 584 | Input/Output: [(-41 -71 3 -45) -71]
Test Case: 585 | Input/Output: [(-89 47 -48 -83) -89]
Test Case: 586 | Input/Output: [(5 40 -13 -23) -23]
Test Case: 587 | Input/Output: [(-12 26 -76 82) -76]
Test Case: 588 | Input/Output: [(47 82 -37 13) -37]
Test Case: 589 | Input/Output: [(11 86 100 -60) -60]
Test Case: 590 | Input/Output: [(34 -21 -90 -62) -90]
Test Case: 591 | Input/Output: [(79 78 6 94) 6]
Test Case: 592 | Input/Output: [(29 -45 73 77) -45]
Test Case: 593 | Input/Output: [(-40 18 87 86) -40]
Test Case: 594 | Input/Output: [(-76 -59 30 -87) -87]
Test Case: 595 | Input/Output: [(-43 91 46 -14) -43]
Test Case: 596 | Input/Output: [(58 60 -32 -33) -33]
Test Case: 597 | Input/Output: [(53 12 -52 84) -52]
Test Case: 598 | Input/Output: [(-80 -6 87 -51) -80]
Test Case: 599 | Input/Output: [(-2 23 -31 18) -31]
Test Case: 600 | Input/Output: [(-90 17 23 58) -90]
Test Case: 601 | Input/Output: [(87 31 -69 66) -69]
Test Case: 602 | Input/Output: [(-55 -78 -66 -33) -78]
Test Case: 603 | Input/Output: [(65 10 -72 -100) -100]
Test Case: 604 | Input/Output: [(-24 34 -68 -48) -68]
Test Case: 605 | Input/Output: [(21 75 84 43) 21]
Test Case: 606 | Input/Output: [(29 -18 -84 42) -84]
Test Case: 607 | Input/Output: [(-80 81 -71 -99) -99]
Test Case: 608 | Input/Output: [(-51 24 10 -47) -51]
Test Case: 609 | Input/Output: [(-61 -45 -92 36) -92]
Test Case: 610 | Input/Output: [(-84 -86 92 89) -86]
Test Case: 611 | Input/Output: [(90 86 -43 53) -43]
Test Case: 612 | Input/Output: [(-62 -87 8 -85) -87]
Test Case: 613 | Input/Output: [(95 30 39 -91) -91]
Test Case: 614 | Input/Output: [(-52 -2 -31 19) -52]
Test Case: 615 | Input/Output: [(-3 17 -36 9) -36]
Test Case: 616 | Input/Output: [(41 8 51 20) 8]
Test Case: 617 | Input/Output: [(89 -85 36 -82) -85]
Test Case: 618 | Input/Output: [(-46 29 11 63) -46]
Test Case: 619 | Input/Output: [(0 -23 -63 32) -63]
Test Case: 620 | Input/Output: [(-29 -37 -36 -21) -37]
Test Case: 621 | Input/Output: [(-38 -81 81 67) -81]
Test Case: 622 | Input/Output: [(89 87 49 46) 46]
Test Case: 623 | Input/Output: [(-16 59 -60 -45) -60]
Test Case: 624 | Input/Output: [(100 -98 29 -95) -98]
Test Case: 625 | Input/Output: [(-41 94 76 -22) -41]
Test Case: 626 | Input/Output: [(10 -10 57 -47) -47]
Test Case: 627 | Input/Output: [(71 -41 70 -22) -41]
Test Case: 628 | Input/Output: [(33 -50 16 -56) -56]
Test Case: 629 | Input/Output: [(-3 100 52 11) -3]
Test Case: 630 | Input/Output: [(24 57 80 9) 9]
Test Case: 631 | Input/Output: [(-74 8 9 56) -74]
Test Case: 632 | Input/Output: [(-35 -53 -51 -38) -53]
Test Case: 633 | Input/Output: [(42 32 -59 -59) -59]
Test Case: 634 | Input/Output: [(50 1 -97 -44) -97]
Test Case: 635 | Input/Output: [(-78 95 -80 60) -80]
Test Case: 636 | Input/Output: [(-36 -52 -66 39) -66]
Test Case: 637 | Input/Output: [(67 3 38 98) 3]
Test Case: 638 | Input/Output: [(81 -6 -51 93) -51]
Test Case: 639 | Input/Output: [(93 49 71 -96) -96]
Test Case: 640 | Input/Output: [(-69 -40 26 -54) -69]
Test Case: 641 | Input/Output: [(-53 29 -31 -68) -68]
Test Case: 642 | Input/Output: [(91 -94 57 44) -94]
Test Case: 643 | Input/Output: [(-3 98 -74 79) -74]
Test Case: 644 | Input/Output: [(-34 -55 36 31) -55]
Test Case: 645 | Input/Output: [(-72 1 -66 -77) -77]
Test Case: 646 | Input/Output: [(40 72 76 24) 24]
Test Case: 647 | Input/Output: [(16 -22 -54 10) -54]
Test Case: 648 | Input/Output: [(33 -42 5 -5) -42]
Test Case: 649 | Input/Output: [(72 38 -69 6) -69]
Test Case: 650 | Input/Output: [(-63 17 -72 72) -72]
Test Case: 651 | Input/Output: [(82 -84 97 64) -84]
Test Case: 652 | Input/Output: [(-13 -94 -88 -69) -94]
Test Case: 653 | Input/Output: [(-81 53 -6 59) -81]
Test Case: 654 | Input/Output: [(-49 49 -66 -85) -85]
Test Case: 655 | Input/Output: [(-3 -47 -86 60) -86]
Test Case: 656 | Input/Output: [(90 -71 91 -31) -71]
Test Case: 657 | Input/Output: [(91 34 -7 -58) -58]
Test Case: 658 | Input/Output: [(73 87 -79 22) -79]
Test Case: 659 | Input/Output: [(-5 -37 -36 33) -37]
Test Case: 660 | Input/Output: [(86 56 10 55) 10]
Test Case: 661 | Input/Output: [(-55 54 -83 -25) -83]
Test Case: 662 | Input/Output: [(23 16 52 -57) -57]
Test Case: 663 | Input/Output: [(-7 62 12 46) -7]
Test Case: 664 | Input/Output: [(34 68 41 -55) -55]
Test Case: 665 | Input/Output: [(-7 -98 64 -28) -98]
Test Case: 666 | Input/Output: [(6 29 -94 -46) -94]
Test Case: 667 | Input/Output: [(-82 -95 -90 10) -95]
Test Case: 668 | Input/Output: [(-33 -25 -84 -64) -84]
Test Case: 669 | Input/Output: [(-25 70 -45 37) -45]
Test Case: 670 | Input/Output: [(56 82 13 -80) -80]
Test Case: 671 | Input/Output: [(-10 2 44 86) -10]
Test Case: 672 | Input/Output: [(-33 -43 76 -35) -43]
Test Case: 673 | Input/Output: [(16 -47 -22 -12) -47]
Test Case: 674 | Input/Output: [(40 -7 82 48) -7]
Test Case: 675 | Input/Output: [(82 -42 -22 -18) -42]
Test Case: 676 | Input/Output: [(-92 -8 -47 82) -92]
Test Case: 677 | Input/Output: [(99 -17 -61 -62) -62]
Test Case: 678 | Input/Output: [(72 -34 44 67) -34]
Test Case: 679 | Input/Output: [(-66 93 3 7) -66]
Test Case: 680 | Input/Output: [(33 8 -33 53) -33]
Test Case: 681 | Input/Output: [(-78 22 61 94) -78]
Test Case: 682 | Input/Output: [(64 -85 90 59) -85]
Test Case: 683 | Input/Output: [(52 87 -39 25) -39]
Test Case: 684 | Input/Output: [(67 -82 -48 87) -82]
Test Case: 685 | Input/Output: [(-8 -14 70 48) -14]
Test Case: 686 | Input/Output: [(10 12 -42 49) -42]
Test Case: 687 | Input/Output: [(28 -82 -72 74) -82]
Test Case: 688 | Input/Output: [(20 77 42 -32) -32]
Test Case: 689 | Input/Output: [(97 -11 31 -17) -17]
Test Case: 690 | Input/Output: [(-81 -87 -30 36) -87]
Test Case: 691 | Input/Output: [(-91 -45 -85 -96) -96]
Test Case: 692 | Input/Output: [(-15 -25 98 -95) -95]
Test Case: 693 | Input/Output: [(-66 -27 5 -82) -82]
Test Case: 694 | Input/Output: [(-55 -91 76 -100) -100]
Test Case: 695 | Input/Output: [(76 15 -3 -12) -12]
Test Case: 696 | Input/Output: [(-33 -86 -89 92) -89]
Test Case: 697 | Input/Output: [(13 -30 -98 84) -98]
Test Case: 698 | Input/Output: [(90 91 -48 -11) -48]
Test Case: 699 | Input/Output: [(-69 15 -84 -35) -84]
Test Case: 700 | Input/Output: [(-37 -37 81 75) -37]
Test Case: 701 | Input/Output: [(-21 16 -52 41) -52]
Test Case: 702 | Input/Output: [(-87 -99 -76 32) -99]
Test Case: 703 | Input/Output: [(-37 91 -76 -1) -76]
Test Case: 704 | Input/Output: [(1 -48 -62 -54) -62]
Test Case: 705 | Input/Output: [(-98 52 57 -39) -98]
Test Case: 706 | Input/Output: [(58 -69 -86 -87) -87]
Test Case: 707 | Input/Output: [(24 -4 90 -42) -42]
Test Case: 708 | Input/Output: [(13 89 -44 -34) -44]
Test Case: 709 | Input/Output: [(23 18 41 25) 18]
Test Case: 710 | Input/Output: [(-5 66 -71 57) -71]
Test Case: 711 | Input/Output: [(16 -8 70 -33) -33]
Test Case: 712 | Input/Output: [(11 93 75 -52) -52]
Test Case: 713 | Input/Output: [(71 -99 -75 18) -99]
Test Case: 714 | Input/Output: [(-10 -82 5 -44) -82]
Test Case: 715 | Input/Output: [(-80 53 16 14) -80]
Test Case: 716 | Input/Output: [(-94 57 76 8) -94]
Test Case: 717 | Input/Output: [(-22 -28 84 -52) -52]
Test Case: 718 | Input/Output: [(43 5 -56 82) -56]
Test Case: 719 | Input/Output: [(-67 -99 -82 59) -99]
Test Case: 720 | Input/Output: [(22 -81 -47 -9) -81]
Test Case: 721 | Input/Output: [(43 -62 -84 -27) -84]
Test Case: 722 | Input/Output: [(-75 -31 -78 -38) -78]
Test Case: 723 | Input/Output: [(68 -84 18 -14) -84]
Test Case: 724 | Input/Output: [(-16 -31 -48 11) -48]
Test Case: 725 | Input/Output: [(-76 -77 -69 -97) -97]
Test Case: 726 | Input/Output: [(22 -68 74 -6) -68]
Test Case: 727 | Input/Output: [(77 -79 6 3) -79]
Test Case: 728 | Input/Output: [(-41 33 75 46) -41]
Test Case: 729 | Input/Output: [(-68 94 49 83) -68]
Test Case: 730 | Input/Output: [(-88 29 13 -75) -88]
Test Case: 731 | Input/Output: [(-49 -99 -38 51) -99]
Test Case: 732 | Input/Output: [(16 92 -69 -7) -69]
Test Case: 733 | Input/Output: [(22 84 47 -8) -8]
Test Case: 734 | Input/Output: [(25 -68 76 60) -68]
Test Case: 735 | Input/Output: [(63 27 -69 60) -69]
Test Case: 736 | Input/Output: [(-86 -14 18 -44) -86]
Test Case: 737 | Input/Output: [(1 -33 7 91) -33]
Test Case: 738 | Input/Output: [(-40 94 35 41) -40]
Test Case: 739 | Input/Output: [(-11 67 -57 -94) -94]
Test Case: 740 | Input/Output: [(-93 -9 -89 5) -93]
Test Case: 741 | Input/Output: [(-44 -45 32 53) -45]
Test Case: 742 | Input/Output: [(-87 28 8 -81) -87]
Test Case: 743 | Input/Output: [(-72 54 -23 -76) -76]
Test Case: 744 | Input/Output: [(20 99 45 -26) -26]
Test Case: 745 | Input/Output: [(45 48 -82 -25) -82]
Test Case: 746 | Input/Output: [(7 -92 1 -45) -92]
Test Case: 747 | Input/Output: [(-9 -24 92 -28) -28]
Test Case: 748 | Input/Output: [(-84 7 37 55) -84]
Test Case: 749 | Input/Output: [(-37 -85 -29 -4) -85]
Test Case: 750 | Input/Output: [(-71 -29 98 -13) -71]
Test Case: 751 | Input/Output: [(45 13 8 29) 8]
Test Case: 752 | Input/Output: [(59 42 45 54) 42]
Test Case: 753 | Input/Output: [(-66 -10 43 -89) -89]
Test Case: 754 | Input/Output: [(40 64 -29 -30) -30]
Test Case: 755 | Input/Output: [(-21 53 50 -77) -77]
Test Case: 756 | Input/Output: [(69 -99 -13 -78) -99]
Test Case: 757 | Input/Output: [(-68 47 49 -98) -98]
Test Case: 758 | Input/Output: [(36 -76 -76 -66) -76]
Test Case: 759 | Input/Output: [(77 -93 52 62) -93]
Test Case: 760 | Input/Output: [(-95 -53 -38 91) -95]
Test Case: 761 | Input/Output: [(-11 -95 -99 60) -99]
Test Case: 762 | Input/Output: [(-65 3 42 -11) -65]
Test Case: 763 | Input/Output: [(-98 38 39 -64) -98]
Test Case: 764 | Input/Output: [(-4 -26 -46 -2) -46]
Test Case: 765 | Input/Output: [(66 21 76 85) 21]
Test Case: 766 | Input/Output: [(-66 42 5 50) -66]
Test Case: 767 | Input/Output: [(39 -10 -61 62) -61]
Test Case: 768 | Input/Output: [(18 -68 93 41) -68]
Test Case: 769 | Input/Output: [(99 -79 14 12) -79]
Test Case: 770 | Input/Output: [(-97 35 -72 66) -97]
Test Case: 771 | Input/Output: [(-65 23 -79 -7) -79]
Test Case: 772 | Input/Output: [(-58 -45 38 29) -58]
Test Case: 773 | Input/Output: [(-98 85 -46 40) -98]
Test Case: 774 | Input/Output: [(-50 16 94 37) -50]
Test Case: 775 | Input/Output: [(94 -26 -3 -60) -60]
Test Case: 776 | Input/Output: [(-84 -22 33 -35) -84]
Test Case: 777 | Input/Output: [(-71 54 -1 -55) -71]
Test Case: 778 | Input/Output: [(-4 19 39 24) -4]
Test Case: 779 | Input/Output: [(-97 91 81 89) -97]
Test Case: 780 | Input/Output: [(-50 54 49 49) -50]
Test Case: 781 | Input/Output: [(-19 54 37 93) -19]
Test Case: 782 | Input/Output: [(-2 56 -61 -99) -99]
Test Case: 783 | Input/Output: [(97 -55 57 -71) -71]
Test Case: 784 | Input/Output: [(82 -67 55 67) -67]
Test Case: 785 | Input/Output: [(38 -74 80 -84) -84]
Test Case: 786 | Input/Output: [(-7 65 -50 -69) -69]
Test Case: 787 | Input/Output: [(-52 36 -81 -80) -81]
Test Case: 788 | Input/Output: [(80 20 -34 38) -34]
Test Case: 789 | Input/Output: [(-41 39 -73 -4) -73]
Test Case: 790 | Input/Output: [(-68 19 95 16) -68]
Test Case: 791 | Input/Output: [(-21 57 -13 -9) -21]
Test Case: 792 | Input/Output: [(84 97 -51 10) -51]
Test Case: 793 | Input/Output: [(-50 15 -74 17) -74]
Test Case: 794 | Input/Output: [(87 -87 -25 77) -87]
Test Case: 795 | Input/Output: [(-6 -89 60 13) -89]
Test Case: 796 | Input/Output: [(37 43 -41 49) -41]
Test Case: 797 | Input/Output: [(89 -78 52 -99) -99]
Test Case: 798 | Input/Output: [(93 -79 65 -72) -79]
Test Case: 799 | Input/Output: [(55 -98 19 92) -98]
Test Case: 800 | Input/Output: [(-86 43 91 35) -86]
Test Case: 801 | Input/Output: [(71 66 56 26) 26]
Test Case: 802 | Input/Output: [(-8 56 -31 92) -31]
Test Case: 803 | Input/Output: [(-95 29 -79 -64) -95]
Test Case: 804 | Input/Output: [(-28 -40 50 19) -40]
Test Case: 805 | Input/Output: [(69 -17 90 69) -17]
Test Case: 806 | Input/Output: [(-98 -57 74 -22) -98]
Test Case: 807 | Input/Output: [(-68 -6 -50 -47) -68]
Test Case: 808 | Input/Output: [(-83 58 81 -81) -83]
Test Case: 809 | Input/Output: [(-71 -54 16 -65) -71]
Test Case: 810 | Input/Output: [(44 58 -21 96) -21]
Test Case: 811 | Input/Output: [(-11 -4 78 -7) -11]
Test Case: 812 | Input/Output: [(-82 -18 -27 31) -82]
Test Case: 813 | Input/Output: [(-29 -88 39 90) -88]
Test Case: 814 | Input/Output: [(-57 79 30 29) -57]
Test Case: 815 | Input/Output: [(37 78 -99 -13) -99]
Test Case: 816 | Input/Output: [(-10 -24 46 -40) -40]
Test Case: 817 | Input/Output: [(10 -37 32 18) -37]
Test Case: 818 | Input/Output: [(69 76 78 7) 7]
Test Case: 819 | Input/Output: [(50 31 -49 24) -49]
Test Case: 820 | Input/Output: [(37 74 75 -22) -22]
Test Case: 821 | Input/Output: [(5 -41 -20 0) -41]
Test Case: 822 | Input/Output: [(16 -27 -92 -17) -92]
Test Case: 823 | Input/Output: [(37 90 -86 70) -86]
Test Case: 824 | Input/Output: [(-54 -10 -66 31) -66]
Test Case: 825 | Input/Output: [(-68 62 -63 -36) -68]
Test Case: 826 | Input/Output: [(67 16 77 -36) -36]
Test Case: 827 | Input/Output: [(-25 -56 -2 83) -56]
Test Case: 828 | Input/Output: [(-66 61 6 19) -66]
Test Case: 829 | Input/Output: [(24 66 27 80) 24]
Test Case: 830 | Input/Output: [(-8 10 82 -29) -29]
Test Case: 831 | Input/Output: [(77 -35 -4 -61) -61]
Test Case: 832 | Input/Output: [(-49 29 -69 29) -69]
Test Case: 833 | Input/Output: [(27 15 -80 45) -80]
Test Case: 834 | Input/Output: [(-100 8 -40 -98) -100]
Test Case: 835 | Input/Output: [(-86 -25 99 -14) -86]
Test Case: 836 | Input/Output: [(-22 -44 78 5) -44]
Test Case: 837 | Input/Output: [(-72 38 90 56) -72]
Test Case: 838 | Input/Output: [(-87 82 2 98) -87]
Test Case: 839 | Input/Output: [(-18 57 63 71) -18]
Test Case: 840 | Input/Output: [(-41 -88 -23 -47) -88]
Test Case: 841 | Input/Output: [(64 -74 39 31) -74]
Test Case: 842 | Input/Output: [(75 3 -47 -71) -71]
Test Case: 843 | Input/Output: [(35 -51 52 -95) -95]
Test Case: 844 | Input/Output: [(-87 28 38 49) -87]
Test Case: 845 | Input/Output: [(2 -12 -45 29) -45]
Test Case: 846 | Input/Output: [(33 -48 -5 13) -48]
Test Case: 847 | Input/Output: [(-12 -11 -80 77) -80]
Test Case: 848 | Input/Output: [(51 87 98 -82) -82]
Test Case: 849 | Input/Output: [(33 -20 71 -40) -40]
Test Case: 850 | Input/Output: [(-38 55 99 -91) -91]
Test Case: 851 | Input/Output: [(-73 -50 16 60) -73]
Test Case: 852 | Input/Output: [(82 34 -6 70) -6]
Test Case: 853 | Input/Output: [(-99 0 -94 55) -99]
Test Case: 854 | Input/Output: [(-60 9 -87 34) -87]
Test Case: 855 | Input/Output: [(25 90 -33 88) -33]
Test Case: 856 | Input/Output: [(43 -86 3 70) -86]
Test Case: 857 | Input/Output: [(-15 55 11 31) -15]
Test Case: 858 | Input/Output: [(64 56 -68 51) -68]
Test Case: 859 | Input/Output: [(90 90 -79 -94) -94]
Test Case: 860 | Input/Output: [(55 -32 66 -59) -59]
Test Case: 861 | Input/Output: [(61 -16 -84 44) -84]
Test Case: 862 | Input/Output: [(-25 -5 53 28) -25]
Test Case: 863 | Input/Output: [(-99 -75 38 -7) -99]
Test Case: 864 | Input/Output: [(70 -2 -39 -79) -79]
Test Case: 865 | Input/Output: [(-13 82 62 -91) -91]
Test Case: 866 | Input/Output: [(91 -3 48 100) -3]
Test Case: 867 | Input/Output: [(84 -64 -81 39) -81]
Test Case: 868 | Input/Output: [(30 -44 11 -45) -45]
Test Case: 869 | Input/Output: [(-69 -100 54 -91) -100]
Test Case: 870 | Input/Output: [(-84 93 98 45) -84]
Test Case: 871 | Input/Output: [(-73 46 38 99) -73]
Test Case: 872 | Input/Output: [(-98 -2 -59 42) -98]
Test Case: 873 | Input/Output: [(53 44 -19 32) -19]
Test Case: 874 | Input/Output: [(-65 -5 88 33) -65]
Test Case: 875 | Input/Output: [(-22 59 58 90) -22]
Test Case: 876 | Input/Output: [(-92 -36 -64 -55) -92]
Test Case: 877 | Input/Output: [(22 -56 10 36) -56]
Test Case: 878 | Input/Output: [(8 -39 81 43) -39]
Test Case: 879 | Input/Output: [(-65 -4 -53 3) -65]
Test Case: 880 | Input/Output: [(25 -14 -15 -45) -45]
Test Case: 881 | Input/Output: [(82 86 -54 -79) -79]
Test Case: 882 | Input/Output: [(38 71 67 7) 7]
Test Case: 883 | Input/Output: [(55 -24 -6 50) -24]
Test Case: 884 | Input/Output: [(46 93 -54 50) -54]
Test Case: 885 | Input/Output: [(64 47 -59 -4) -59]
Test Case: 886 | Input/Output: [(-77 -98 34 -1) -98]
Test Case: 887 | Input/Output: [(-60 -52 53 -51) -60]
Test Case: 888 | Input/Output: [(-94 61 -21 -2) -94]
Test Case: 889 | Input/Output: [(-26 81 48 -32) -32]
Test Case: 890 | Input/Output: [(22 -100 68 94) -100]
Test Case: 891 | Input/Output: [(4 36 -81 -71) -81]
Test Case: 892 | Input/Output: [(82 -16 99 48) -16]
Test Case: 893 | Input/Output: [(-64 56 -75 -5) -75]
Test Case: 894 | Input/Output: [(51 75 5 57) 5]
Test Case: 895 | Input/Output: [(31 -97 53 29) -97]
Test Case: 896 | Input/Output: [(28 -10 -68 24) -68]
Test Case: 897 | Input/Output: [(73 -17 -39 93) -39]
Test Case: 898 | Input/Output: [(55 36 -80 93) -80]
Test Case: 899 | Input/Output: [(-5 -30 -95 -29) -95]
Test Case: 900 | Input/Output: [(-36 14 -60 -62) -62]
Test Case: 901 | Input/Output: [(28 46 -95 33) -95]
Test Case: 902 | Input/Output: [(50 -91 -91 49) -91]
Test Case: 903 | Input/Output: [(-19 -9 -14 -60) -60]
Test Case: 904 | Input/Output: [(-14 68 88 -13) -14]
Test Case: 905 | Input/Output: [(28 55 -58 19) -58]
Test Case: 906 | Input/Output: [(-27 64 38 -35) -35]
Test Case: 907 | Input/Output: [(-54 -71 -18 47) -71]
Test Case: 908 | Input/Output: [(100 -95 63 26) -95]
Test Case: 909 | Input/Output: [(5 -25 49 -75) -75]
Test Case: 910 | Input/Output: [(98 -26 -93 84) -93]
Test Case: 911 | Input/Output: [(-92 -27 37 90) -92]
Test Case: 912 | Input/Output: [(21 -88 63 25) -88]
Test Case: 913 | Input/Output: [(44 -27 -19 -87) -87]
Test Case: 914 | Input/Output: [(49 85 100 73) 49]
Test Case: 915 | Input/Output: [(23 -70 75 -87) -87]
Test Case: 916 | Input/Output: [(3 -82 -89 65) -89]
Test Case: 917 | Input/Output: [(-57 17 -94 -23) -94]
Test Case: 918 | Input/Output: [(93 -1 -72 17) -72]
Test Case: 919 | Input/Output: [(20 -73 0 -38) -73]
Test Case: 920 | Input/Output: [(-79 40 38 52) -79]
Test Case: 921 | Input/Output: [(-4 61 7 -23) -23]
Test Case: 922 | Input/Output: [(30 -53 60 -61) -61]
Test Case: 923 | Input/Output: [(9 -78 -82 -83) -83]
Test Case: 924 | Input/Output: [(-49 -98 -65 9) -98]
Test Case: 925 | Input/Output: [(-86 77 77 -61) -86]
Test Case: 926 | Input/Output: [(72 23 16 64) 16]
Test Case: 927 | Input/Output: [(-95 -3 15 99) -95]
Test Case: 928 | Input/Output: [(-83 68 5 -60) -83]
Test Case: 929 | Input/Output: [(19 -15 -19 -17) -19]
Test Case: 930 | Input/Output: [(79 14 -75 88) -75]
Test Case: 931 | Input/Output: [(14 -34 -50 -77) -77]
Test Case: 932 | Input/Output: [(27 -60 -93 -85) -93]
Test Case: 933 | Input/Output: [(75 16 -9 -86) -86]
Test Case: 934 | Input/Output: [(0 84 52 33) 0]
Test Case: 935 | Input/Output: [(4 0 57 9) 0]
Test Case: 936 | Input/Output: [(31 -37 41 94) -37]
Test Case: 937 | Input/Output: [(-31 -75 58 -64) -75]
Test Case: 938 | Input/Output: [(40 -27 58 -58) -58]
Test Case: 939 | Input/Output: [(-72 -2 97 -17) -72]
Test Case: 940 | Input/Output: [(-38 -46 -6 -100) -100]
Test Case: 941 | Input/Output: [(61 -27 -18 -94) -94]
Test Case: 942 | Input/Output: [(58 11 -29 -63) -63]
Test Case: 943 | Input/Output: [(-51 25 -26 -98) -98]
Test Case: 944 | Input/Output: [(-21 10 3 15) -21]
Test Case: 945 | Input/Output: [(-98 41 77 -19) -98]
Test Case: 946 | Input/Output: [(63 -7 -42 -75) -75]
Test Case: 947 | Input/Output: [(-47 -83 57 -84) -84]
Test Case: 948 | Input/Output: [(-61 -65 40 -23) -65]
Test Case: 949 | Input/Output: [(49 42 25 3) 3]
Test Case: 950 | Input/Output: [(-88 -9 80 98) -88]
Test Case: 951 | Input/Output: [(42 -62 -76 5) -76]
Test Case: 952 | Input/Output: [(-20 -56 62 21) -56]
Test Case: 953 | Input/Output: [(17 -14 35 76) -14]
Test Case: 954 | Input/Output: [(-22 -54 -48 52) -54]
Test Case: 955 | Input/Output: [(-69 93 -3 37) -69]
Test Case: 956 | Input/Output: [(55 -66 -56 -79) -79]
Test Case: 957 | Input/Output: [(5 23 14 -95) -95]
Test Case: 958 | Input/Output: [(47 -10 53 56) -10]
Test Case: 959 | Input/Output: [(-94 0 23 -53) -94]
Test Case: 960 | Input/Output: [(37 33 -87 64) -87]
Test Case: 961 | Input/Output: [(60 95 -64 79) -64]
Test Case: 962 | Input/Output: [(42 52 27 64) 27]
Test Case: 963 | Input/Output: [(-90 69 -47 -55) -90]
Test Case: 964 | Input/Output: [(51 94 -95 94) -95]
Test Case: 965 | Input/Output: [(-20 86 -95 0) -95]
Test Case: 966 | Input/Output: [(18 65 -20 -92) -92]
Test Case: 967 | Input/Output: [(14 80 -84 -88) -88]
Test Case: 968 | Input/Output: [(12 -61 95 -37) -61]
Test Case: 969 | Input/Output: [(-73 -73 55 27) -73]
Test Case: 970 | Input/Output: [(-23 -100 -83 -10) -100]
Test Case: 971 | Input/Output: [(76 88 -42 -8) -42]
Test Case: 972 | Input/Output: [(24 -35 -61 -21) -61]
Test Case: 973 | Input/Output: [(-13 -23 -8 -28) -28]
Test Case: 974 | Input/Output: [(65 -39 12 -17) -39]
Test Case: 975 | Input/Output: [(-60 -83 -6 84) -83]
Test Case: 976 | Input/Output: [(-15 -74 -56 -3) -74]
Test Case: 977 | Input/Output: [(72 96 -100 94) -100]
Test Case: 978 | Input/Output: [(-72 1 -51 65) -72]
Test Case: 979 | Input/Output: [(24 80 -34 51) -34]
Test Case: 980 | Input/Output: [(-39 -79 -13 46) -79]
Test Case: 981 | Input/Output: [(52 -18 56 -44) -44]
Test Case: 982 | Input/Output: [(77 71 -15 96) -15]
Test Case: 983 | Input/Output: [(-78 -68 21 98) -78]
Test Case: 984 | Input/Output: [(87 -69 1 73) -69]
Test Case: 985 | Input/Output: [(68 -46 -71 28) -71]
Test Case: 986 | Input/Output: [(-3 66 -29 97) -29]
Test Case: 987 | Input/Output: [(-79 85 91 96) -79]
Test Case: 988 | Input/Output: [(-69 -88 -65 -87) -88]
Test Case: 989 | Input/Output: [(29 2 -25 -67) -67]
Test Case: 990 | Input/Output: [(-80 -37 17 58) -80]
Test Case: 991 | Input/Output: [(36 93 -93 -60) -93]
Test Case: 992 | Input/Output: [(95 6 -52 39) -52]
Test Case: 993 | Input/Output: [(65 -2 -23 22) -23]
Test Case: 994 | Input/Output: [(11 -89 -75 -82) -89]
Test Case: 995 | Input/Output: [(42 -37 7 10) -37]
Test Case: 996 | Input/Output: [(53 60 -38 47) -38]
Test Case: 997 | Input/Output: [(-43 -28 6 51) -43]
Test Case: 998 | Input/Output: [(74 11 -85 -1) -85]
Test Case: 999 | Input/Output: [(-56 -96 -48 -92) -96]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 70 -72 -41 39 12 -55 -74 -3 -39 27 -41 -99 55 54 96 -29
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-56 -63 -56 -56] -63] [[20 43 20 20] 20] [[-70 99 99 99] -70] [[-87 -87 -87 68] -87] [[62 62 62 -28] -28] [[60 60 20 60] 20] [[100 100 100 73] 73] [[-1 76 -1 -1] -1] [[33 69 33 33] 33] [[-29 -29 31 -29] -29] [(69 69 69 69) 69] [(-93 -93 -93 -93) -93] [(-73 -73 -73 -73) -73] [(-11 -11 -11 -11) -11] [(38 38 38 38) 38] [(53 42 63 14) 14] [(77 14 58 87) 14] [(49 49 96 8) 8] [(57 66 60 32) 32] [(22 83 25 96) 22] [(17 76 43 32) 17] [(82 21 72 13) 13] [(57 83 77 71) 57] [(95 12 84 54) 12] [(35 57 62 95) 35] [(64 60 65 61) 60] [(31 85 59 59) 31] [(91 53 24 62) 24] [(80 59 92 3) 3] [(46 49 69 48) 46] [(98 58 56 81) 56] [(29 82 97 95) 29] [(53 0 93 2) 0] [(17 39 100 61) 17] [(3 61 74 59) 3] [(1 81 58 -39) -39] [(40 2 5 -44) -44] [(-44 -12 -64 -97) -97] [(-47 11 -13 -76) -76] [(-11 74 -3 66) -11] [(-95 91 -15 -84) -95] [(74 31 -78 -56) -78] [(-24 -97 -75 69) -97] [(-40 26 6 -8) -40] [(-92 67 43 -49) -92] [(55 12 48 7) 7] [(-1 8 46 9) -1] [(40 -71 26 87) -71] [(21 -27 69 91) -27] [(-82 29 -19 -51) -82] [(46 13 9 -73) -73] [(-9 76 -88 58) -88] [(-52 88 66 41) -52] [(-59 -79 82 -14) -79] [(-71 70 -17 82) -71] [(-53 96 51 43) -53] [(-64 -40 16 25) -64] [(-68 -10 68 60) -68] [(-65 14 28 39) -65] [(1 12 44 -76) -76] [(-13 -55 10 9) -55] [(-50 22 -87 -84) -87] [(6 -39 -40 -4) -40] [(-95 -27 19 65) -95] [(-55 -66 -68 28) -68] [(-28 74 -13 -7) -28] [(-80 -84 100 -83) -84] [(-40 -2 -92 -55) -92] [(-27 -18 73 -67) -67] [(-61 -67 -56 88) -67] [(-47 -65 -9 -16) -65] [(10 -76 -28 66) -76] [(-41 57 -87 -15) -87] [(18 3 -64 41) -64] [(70 73 73 -24) -24] [(98 -35 -6 66) -35] [(-33 7 79 63) -33] [(22 -17 -4 24) -17] [(16 -91 -27 -58) -91] [(-74 42 4 84) -74] [(-31 -40 -43 42) -43] [(-90 -35 -18 35) -90] [(83 -40 -33 -89) -89] [(60 74 23 6) 6] [(-49 -5 -22 94) -49] [(-8 25 -91 -66) -91] [(-61 -82 -34 27) -82] [(22 -36 -39 49) -39] [(-4 90 -83 -58) -83] [(47 -37 76 89) -37] [(30 -76 -70 68) -76] [(8 -11 36 -19) -19] [(-6 78 39 -73) -73] [(-87 -87 48 18) -87] [(-39 91 11 -13) -39])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 20                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -28                 | Program output: 62                 
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 100                
Correct output: -1                  | Program output: -1                 
Correct output: 33                  | Program output: 33                 
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 53                 
Correct output: 14                  | Program output: 77                 
Correct output: 8                   | Program output: 49                 
Correct output: 32                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 82                 
Correct output: 57                  | Program output: 57                 
Correct output: 12                  | Program output: 95                 
Correct output: 35                  | Program output: 35                 
Correct output: 60                  | Program output: 64                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 91                 
Correct output: 3                   | Program output: 80                 
Correct output: 46                  | Program output: 46                 
Correct output: 56                  | Program output: 98                 
Correct output: 29                  | Program output: 29                 
Correct output: 0                   | Program output: 53                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: -39                 | Program output: 1                  
Correct output: -44                 | Program output: 40                 
Correct output: -97                 | Program output: -44                
Correct output: -76                 | Program output: -47                
Correct output: -11                 | Program output: -11                
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: 74                 
Correct output: -97                 | Program output: -24                
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 55                 
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: 40                 
Correct output: -27                 | Program output: 21                 
Correct output: -82                 | Program output: -82                
Correct output: -73                 | Program output: 46                 
Correct output: -88                 | Program output: -9                 
Correct output: -52                 | Program output: -52                
Correct output: -79                 | Program output: -59                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -53                
Correct output: -64                 | Program output: -64                
Correct output: -68                 | Program output: -68                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: 1                  
Correct output: -55                 | Program output: -13                
Correct output: -87                 | Program output: -50                
Correct output: -40                 | Program output: 6                  
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: -55                
Correct output: -28                 | Program output: -28                
Correct output: -84                 | Program output: -80                
Correct output: -92                 | Program output: -40                
Correct output: -67                 | Program output: -27                
Correct output: -67                 | Program output: -61                
Correct output: -65                 | Program output: -47                
Correct output: -76                 | Program output: 10                 
Correct output: -87                 | Program output: -41                
Correct output: -64                 | Program output: 18                 
Correct output: -24                 | Program output: 70                 
Correct output: -35                 | Program output: 98                 
Correct output: -33                 | Program output: -33                
Correct output: -17                 | Program output: 22                 
Correct output: -91                 | Program output: 16                 
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -31                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: 83                 
Correct output: 6                   | Program output: 60                 
Correct output: -49                 | Program output: -49                
Correct output: -91                 | Program output: -8                 
Correct output: -82                 | Program output: -61                
Correct output: -39                 | Program output: 22                 
Correct output: -83                 | Program output: -4                 
Correct output: -37                 | Program output: 47                 
Correct output: -76                 | Program output: 30                 
Correct output: -19                 | Program output: 8                  
Correct output: -73                 | Program output: -6                 
Correct output: -87                 | Program output: -87                
Correct output: -39                 | Program output: -39                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div})
Lexicase best program: (in1 exec_dup (integer_fromboolean boolean_shove print_integer integer_dup) integer_sub boolean_eq exec_dup (integer_empty exec_pop (boolean_xor integer_div)))
Lexicase best errors: [1 0 0 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 17
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div})
Zero cases best program: (in1 exec_dup (integer_fromboolean boolean_shove print_integer integer_dup) integer_sub boolean_eq exec_dup (integer_empty exec_pop (boolean_xor integer_div)))
Zero cases best errors: [1 0 0 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 17
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 4 5 1 1000 1 4 5 5 4)
Population mean number of elite cases: 1.03
Count of perfect (error zero) individuals by case: (3 4 5 1 0 1 4 5 5 4)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_gt} {:close 0, :instruction tagged_346} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 2, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_min} {:close 2, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Best program: (integer_gt tagged_346 boolean_yankdup exec_eq in2 exec_do*count (boolean_rot boolean_not) exec_do*while (integer_mod exec_yank integer_dec integer_mod boolean_not in1) print_integer integer_dup boolean_dup integer_sub boolean_and boolean_xor exec_shove (boolean_swap exec_pop (print_integer exec_pop (integer_fromboolean exec_eq) boolean_shove integer_gt exec_when () boolean_dup exec_flush exec_yank integer_add boolean_eq boolean_dup integer_dec exec_when (exec_pop (boolean_shove) exec_stackdepth integer_min integer_min)) integer_inc exec_while (integer_dup integer_min in1 boolean_empty integer_dup_items)))
Errors: [1 0 0 1 1 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 51
Size: 61
Percent parens: 0.164
--- Population Statistics ---
Average total errors in population: 9.968
Median total errors in population: 10
Error averages by case: (0.997 0.996 0.995 0.999 1.0 0.999 0.996 0.995 0.995 0.996)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 51.725
Average program size in population (points): 71.258
Average percent parens in population: 0.283
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.998
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.267
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 475513
--- Timings ---
Current time: 1559314330465 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.8%
Reproduction:         0.8 seconds, 29.2%
Fitness Testing:      1.7 seconds, 67.0%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 20                 
Correct output: -70                 | Program output: 99                 
Correct output: -87                 | Program output: 68                 
Correct output: -28                 | Program output: -28                
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 73                 
Correct output: -1                  | Program output: -1                 
Correct output: 33                  | Program output: 33                 
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 14                 
Correct output: 14                  | Program output: 87                 
Correct output: 8                   | Program output: 8                  
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 96                 
Correct output: 17                  | Program output: 32                 
Correct output: 13                  | Program output: 13                 
Correct output: 57                  | Program output: 71                 
Correct output: 12                  | Program output: 54                 
Correct output: 35                  | Program output: 95                 
Correct output: 60                  | Program output: 61                 
Correct output: 31                  | Program output: 59                 
Correct output: 24                  | Program output: 62                 
Correct output: 3                   | Program output: 3                  
Correct output: 46                  | Program output: 48                 
Correct output: 56                  | Program output: 81                 
Correct output: 29                  | Program output: 95                 
Correct output: 0                   | Program output: 2                  
Correct output: 17                  | Program output: 61                 
Correct output: 3                   | Program output: 59                 
Correct output: -39                 | Program output: -39                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -76                 | Program output: -76                
Correct output: -11                 | Program output: 66                 
Correct output: -95                 | Program output: -84                
Correct output: -78                 | Program output: -56                
Correct output: -97                 | Program output: 69                 
Correct output: -40                 | Program output: -8                 
Correct output: -92                 | Program output: -49                
Correct output: 7                   | Program output: 7                  
Correct output: -1                  | Program output: 9                  
Correct output: -71                 | Program output: 87                 
Correct output: -27                 | Program output: 91                 
Correct output: -82                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: 58                 
Correct output: -52                 | Program output: 41                 
Correct output: -79                 | Program output: -14                
Correct output: -71                 | Program output: 82                 
Correct output: -53                 | Program output: 43                 
Correct output: -64                 | Program output: 25                 
Correct output: -68                 | Program output: 60                 
Correct output: -65                 | Program output: 39                 
Correct output: -76                 | Program output: -76                
Correct output: -55                 | Program output: 9                  
Correct output: -87                 | Program output: -84                
Correct output: -40                 | Program output: -4                 
Correct output: -95                 | Program output: 65                 
Correct output: -68                 | Program output: 28                 
Correct output: -28                 | Program output: -7                 
Correct output: -84                 | Program output: -83                
Correct output: -92                 | Program output: -55                
Correct output: -67                 | Program output: -67                
Correct output: -67                 | Program output: 88                 
Correct output: -65                 | Program output: -16                
Correct output: -76                 | Program output: 66                 
Correct output: -87                 | Program output: -15                
Correct output: -64                 | Program output: 41                 
Correct output: -24                 | Program output: -24                
Correct output: -35                 | Program output: 66                 
Correct output: -33                 | Program output: 63                 
Correct output: -17                 | Program output: 24                 
Correct output: -91                 | Program output: -58                
Correct output: -74                 | Program output: 84                 
Correct output: -43                 | Program output: 42                 
Correct output: -90                 | Program output: 35                 
Correct output: -89                 | Program output: -89                
Correct output: 6                   | Program output: 6                  
Correct output: -49                 | Program output: 94                 
Correct output: -91                 | Program output: -66                
Correct output: -82                 | Program output: 27                 
Correct output: -39                 | Program output: 49                 
Correct output: -83                 | Program output: -58                
Correct output: -37                 | Program output: 89                 
Correct output: -76                 | Program output: 68                 
Correct output: -19                 | Program output: -19                
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: 18                 
Correct output: -39                 | Program output: -13                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (integer_gt integer_inc in4 boolean_dup exec_noop integer_mult integer_swap exec_empty exec_noop print_integer exec_rot (boolean_swap integer_yank integer_lt exec_rot (in3 in3 integer_add boolean_swap) (integer_lte integer_flush) (integer_gte boolean_empty boolean_frominteger in1 boolean_dup_items)) () ())
Lexicase best errors: [0 0 0 1 0 1 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 33
Percent parens: 0.212
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (integer_gt integer_inc in4 boolean_dup exec_noop integer_mult integer_swap exec_empty exec_noop print_integer exec_rot (boolean_swap integer_yank integer_lt exec_rot (in3 in3 integer_add boolean_swap) (integer_lte integer_flush) (integer_gte boolean_empty boolean_frominteger in1 boolean_dup_items)) () ())
Zero cases best errors: [0 0 0 1 0 1 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 33
Percent parens: 0.212
--- Lexicase Population Statistics ---
Count of elite individuals by case: (92 868 92 81 92 83 92 601 92 600)
Population mean number of elite cases: 2.69
Count of perfect (error zero) individuals by case: (92 868 92 81 92 83 92 601 92 600)
Population mean number of perfect (error zero) cases: 2.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_rot} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_items})
Best program: (integer_gt integer_inc in4 boolean_dup exec_noop integer_mult integer_swap exec_empty exec_noop print_integer exec_rot (boolean_swap integer_yank integer_lt exec_rot (in3 integer_dup integer_add boolean_swap) (integer_lte integer_flush) (integer_gte boolean_empty boolean_frominteger in1 boolean_dup_items)) () ())
Errors: [0 0 0 1 0 1 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 26
Size: 33
Percent parens: 0.212
--- Population Statistics ---
Average total errors in population: 7.307
Median total errors in population: 7
Error averages by case: (0.908 0.132 0.908 0.919 0.908 0.917 0.908 0.399 0.908 0.4)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.058
Average program size in population (points): 71.348
Average percent parens in population: 0.256
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.482
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 141
Genome diversity (% unique genomes):	 0.525
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 142
Syntactic diversity (% unique Push programs):	 0.518
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 809694
--- Timings ---
Current time: 1559314332893 milliseconds
Total Time:           5.2 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.4 seconds, 45.7%
Fitness Testing:      2.3 seconds, 44.6%
Report:               0.4 seconds,  7.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 20                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -28                 | Program output: 62                 
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 100                
Correct output: -1                  | Program output: -1                 
Correct output: 33                  | Program output: 33                 
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 53                 
Correct output: 14                  | Program output: 77                 
Correct output: 8                   | Program output: 49                 
Correct output: 32                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 82                 
Correct output: 57                  | Program output: 57                 
Correct output: 12                  | Program output: 95                 
Correct output: 35                  | Program output: 35                 
Correct output: 60                  | Program output: 64                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 91                 
Correct output: 3                   | Program output: 80                 
Correct output: 46                  | Program output: 46                 
Correct output: 56                  | Program output: 98                 
Correct output: 29                  | Program output: 29                 
Correct output: 0                   | Program output: 53                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: -39                 | Program output: 1                  
Correct output: -44                 | Program output: 40                 
Correct output: -97                 | Program output: -44                
Correct output: -76                 | Program output: -47                
Correct output: -11                 | Program output: -11                
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: 74                 
Correct output: -97                 | Program output: -24                
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 55                 
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: 40                 
Correct output: -27                 | Program output: 21                 
Correct output: -82                 | Program output: -82                
Correct output: -73                 | Program output: 46                 
Correct output: -88                 | Program output: -9                 
Correct output: -52                 | Program output: -52                
Correct output: -79                 | Program output: -59                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -53                
Correct output: -64                 | Program output: -64                
Correct output: -68                 | Program output: -68                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: 1                  
Correct output: -55                 | Program output: -13                
Correct output: -87                 | Program output: -50                
Correct output: -40                 | Program output: 6                  
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: -55                
Correct output: -28                 | Program output: -28                
Correct output: -84                 | Program output: -80                
Correct output: -92                 | Program output: -40                
Correct output: -67                 | Program output: -27                
Correct output: -67                 | Program output: -61                
Correct output: -65                 | Program output: -47                
Correct output: -76                 | Program output: 10                 
Correct output: -87                 | Program output: -41                
Correct output: -64                 | Program output: 18                 
Correct output: -24                 | Program output: 70                 
Correct output: -35                 | Program output: 98                 
Correct output: -33                 | Program output: -33                
Correct output: -17                 | Program output: 22                 
Correct output: -91                 | Program output: 16                 
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -31                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: 83                 
Correct output: 6                   | Program output: 60                 
Correct output: -49                 | Program output: -49                
Correct output: -91                 | Program output: -8                 
Correct output: -82                 | Program output: -61                
Correct output: -39                 | Program output: 22                 
Correct output: -83                 | Program output: -4                 
Correct output: -37                 | Program output: 47                 
Correct output: -76                 | Program output: 30                 
Correct output: -19                 | Program output: 8                  
Correct output: -73                 | Program output: -6                 
Correct output: -87                 | Program output: -87                
Correct output: -39                 | Program output: -39                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tagged_702} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction print_integer} {:close 0, :instruction tag_integer_807} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 1, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction in3} {:close 0, :instruction 46} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_pop} {:close 0, :instruction tag_integer_811} {:close 0, :instruction print_exec} {:close 2, :instruction integer_empty})
Lexicase best program: (tagged_702 integer_pop exec_when (exec_do*while (exec_do*times (boolean_stackdepth in1 in2 in2 integer_gte boolean_and exec_while (integer_flush integer_dec print_integer)) tag_integer_807 boolean_eq in1 integer_sub exec_do*while (exec_k_when_autoconstructing (print_integer boolean_dup_times integer_max print_integer exec_while ()) (in2) exec_k () (exec_do*count (exec_do*times (boolean_dup_items exec_dup (exec_y (exec_do*while (integer_dup integer_yank exec_if (integer_swap boolean_xor in3 boolean_stackdepth integer_empty integer_add exec_if () (integer_min print_integer boolean_shove integer_dup_items boolean_swap exec_dup_times (boolean_dup_items integer_yankdup) exec_when (integer_dup_times exec_dup_items) in1 exec_s_when_autoconstructing (boolean_yankdup exec_noop integer_dec exec_yank boolean_or in3 46 integer_shove exec_pop () tag_integer_811 print_exec (integer_empty)) () ())) ()))))))))))
Lexicase best errors: [0 1 1 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 96
Percent parens: 0.281
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tagged_702} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction print_integer} {:close 0, :instruction tag_integer_807} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 1, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction in3} {:close 0, :instruction 46} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_pop} {:close 0, :instruction tag_integer_811} {:close 0, :instruction print_exec} {:close 2, :instruction integer_empty})
Zero cases best program: (tagged_702 integer_pop exec_when (exec_do*while (exec_do*times (boolean_stackdepth in1 in2 in2 integer_gte boolean_and exec_while (integer_flush integer_dec print_integer)) tag_integer_807 boolean_eq in1 integer_sub exec_do*while (exec_k_when_autoconstructing (print_integer boolean_dup_times integer_max print_integer exec_while ()) (in2) exec_k () (exec_do*count (exec_do*times (boolean_dup_items exec_dup (exec_y (exec_do*while (integer_dup integer_yank exec_if (integer_swap boolean_xor in3 boolean_stackdepth integer_empty integer_add exec_if () (integer_min print_integer boolean_shove integer_dup_items boolean_swap exec_dup_times (boolean_dup_items integer_yankdup) exec_when (integer_dup_times exec_dup_items) in1 exec_s_when_autoconstructing (boolean_yankdup exec_noop integer_dec exec_yank boolean_or in3 46 integer_shove exec_pop () tag_integer_811 print_exec (integer_empty)) () ())) ()))))))))))
Zero cases best errors: [0 1 1 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 96
Percent parens: 0.281
--- Lexicase Population Statistics ---
Count of elite individuals by case: (192 385 385 191 106 146 193 192 106 832)
Population mean number of elite cases: 2.73
Count of perfect (error zero) individuals by case: (192 385 385 191 106 146 193 192 106 832)
Population mean number of perfect (error zero) cases: 2.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_gt} {:close 0, :instruction tagged_346} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 2, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_min} {:close 2, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Best program: (integer_gt tagged_346 boolean_yankdup exec_eq in2 exec_do*count (boolean_rot boolean_not) exec_do*while (integer_mod exec_yank integer_dec integer_mod boolean_not in1) print_integer integer_dup boolean_dup integer_sub boolean_and boolean_xor exec_shove (boolean_swap exec_pop (print_integer exec_pop (integer_fromboolean exec_eq) boolean_shove integer_gt exec_when () boolean_dup exec_flush exec_yank integer_add boolean_eq boolean_dup integer_dec exec_when (exec_pop (boolean_shove) exec_stackdepth integer_min integer_min)) integer_inc exec_while (boolean_frominteger integer_min in1 boolean_empty integer_dup_items)))
Errors: [0 1 1 0 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 51
Size: 61
Percent parens: 0.164
--- Population Statistics ---
Average total errors in population: 7.272
Median total errors in population: 7
Error averages by case: (0.808 0.615 0.615 0.809 0.894 0.854 0.807 0.808 0.894 0.168)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.905
Average program size in population (points): 59.385
Average percent parens in population: 0.245
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.968
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 214
Genome diversity (% unique genomes):	 0.6
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 228
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1217509
--- Timings ---
Current time: 1559314335612 milliseconds
Total Time:           7.9 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         4.3 seconds, 54.9%
Fitness Testing:      2.8 seconds, 35.4%
Report:               0.7 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 20                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -28                 | Program output: 62                 
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 100                
Correct output: -1                  | Program output: -1                 
Correct output: 33                  | Program output: 33                 
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 53                 
Correct output: 14                  | Program output: 77                 
Correct output: 8                   | Program output: 49                 
Correct output: 32                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 82                 
Correct output: 57                  | Program output: 57                 
Correct output: 12                  | Program output: 95                 
Correct output: 35                  | Program output: 35                 
Correct output: 60                  | Program output: 64                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 91                 
Correct output: 3                   | Program output: 80                 
Correct output: 46                  | Program output: 46                 
Correct output: 56                  | Program output: 98                 
Correct output: 29                  | Program output: 29                 
Correct output: 0                   | Program output: 53                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: -39                 | Program output: 1                  
Correct output: -44                 | Program output: 40                 
Correct output: -97                 | Program output: -44                
Correct output: -76                 | Program output: -47                
Correct output: -11                 | Program output: -11                
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: 74                 
Correct output: -97                 | Program output: -24                
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 55                 
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: 40                 
Correct output: -27                 | Program output: 21                 
Correct output: -82                 | Program output: -82                
Correct output: -73                 | Program output: 46                 
Correct output: -88                 | Program output: -9                 
Correct output: -52                 | Program output: -52                
Correct output: -79                 | Program output: -59                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -53                
Correct output: -64                 | Program output: -64                
Correct output: -68                 | Program output: -68                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: 1                  
Correct output: -55                 | Program output: -13                
Correct output: -87                 | Program output: -50                
Correct output: -40                 | Program output: 6                  
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: -55                
Correct output: -28                 | Program output: -28                
Correct output: -84                 | Program output: -80                
Correct output: -92                 | Program output: -40                
Correct output: -67                 | Program output: -27                
Correct output: -67                 | Program output: -61                
Correct output: -65                 | Program output: -47                
Correct output: -76                 | Program output: 10                 
Correct output: -87                 | Program output: -41                
Correct output: -64                 | Program output: 18                 
Correct output: -24                 | Program output: 70                 
Correct output: -35                 | Program output: 98                 
Correct output: -33                 | Program output: -33                
Correct output: -17                 | Program output: 22                 
Correct output: -91                 | Program output: 16                 
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -31                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: 83                 
Correct output: 6                   | Program output: 60                 
Correct output: -49                 | Program output: -49                
Correct output: -91                 | Program output: -8                 
Correct output: -82                 | Program output: -61                
Correct output: -39                 | Program output: 22                 
Correct output: -83                 | Program output: -4                 
Correct output: -37                 | Program output: 47                 
Correct output: -76                 | Program output: 30                 
Correct output: -19                 | Program output: 8                  
Correct output: -73                 | Program output: -6                 
Correct output: -87                 | Program output: -87                
Correct output: -39                 | Program output: -39                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tagged_702} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction print_integer} {:close 0, :instruction tag_integer_807} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 1, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_dup_times})
Lexicase best program: (tagged_702 integer_pop exec_when (exec_do*while (exec_do*times (boolean_stackdepth in1 in2 in2 integer_gte boolean_and exec_while (integer_flush integer_dec print_integer)) tag_integer_807 boolean_eq in1 integer_sub exec_do*while (exec_k_when_autoconstructing (print_integer boolean_dup_times integer_max print_integer exec_while ()) (in2) exec_k () (exec_do*count (exec_do*times (boolean_dup_items exec_dup (exec_y (exec_do*while (integer_dup integer_yank exec_if (integer_swap boolean_xor in3 boolean_stackdepth integer_empty integer_add exec_if () (integer_min print_integer boolean_shove integer_dup_items boolean_swap exec_dup_times (integer_empty integer_yankdup exec_when (integer_dup_times exec_dup_items) in1 exec_s_when_autoconstructing (boolean_yankdup exec_noop boolean_frominteger boolean_pop) (exec_dup_times ()) ()))) ()))))))))))
Lexicase best errors: [0 0 1 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 88
Percent parens: 0.295
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tagged_702} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction print_integer} {:close 0, :instruction tag_integer_807} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 1, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_dup_times})
Zero cases best program: (tagged_702 integer_pop exec_when (exec_do*while (exec_do*times (boolean_stackdepth in1 in2 in2 integer_gte boolean_and exec_while (integer_flush integer_dec print_integer)) tag_integer_807 boolean_eq in1 integer_sub exec_do*while (exec_k_when_autoconstructing (print_integer boolean_dup_times integer_max print_integer exec_while ()) (in2) exec_k () (exec_do*count (exec_do*times (boolean_dup_items exec_dup (exec_y (exec_do*while (integer_dup integer_yank exec_if (integer_swap boolean_xor in3 boolean_stackdepth integer_empty integer_add exec_if () (integer_min print_integer boolean_shove integer_dup_items boolean_swap exec_dup_times (integer_empty integer_yankdup exec_when (integer_dup_times exec_dup_items) in1 exec_s_when_autoconstructing (boolean_yankdup exec_noop boolean_frominteger boolean_pop) (exec_dup_times ()) ()))) ()))))))))))
Zero cases best errors: [0 0 1 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 88
Percent parens: 0.295
--- Lexicase Population Statistics ---
Count of elite individuals by case: (380 378 185 865 377 382 186 871 82 786)
Population mean number of elite cases: 4.49
Count of perfect (error zero) individuals by case: (380 378 185 865 377 382 186 871 82 786)
Population mean number of perfect (error zero) cases: 4.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_gt} {:close 0, :instruction tagged_346} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 2, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_s} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction -50} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_boolean_456} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_shove} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (integer_gt tagged_346 boolean_yankdup exec_eq in2 exec_do*count (boolean_rot boolean_not) exec_do*while (integer_mod exec_yank integer_dec integer_mod boolean_not in1) print_integer integer_dup boolean_dup integer_sub boolean_and boolean_xor exec_shove (boolean_swap exec_pop (print_integer exec_pop (integer_fromboolean exec_eq) boolean_shove exec_pop (integer_dup_items) exec_rot (boolean_not) (integer_gte exec_s_when_autoconstructing (exec_y_when_autoconstructing () exec_s (exec_stackdepth exec_k_when_autoconstructing () (integer_empty) print_integer in2 exec_k (integer_dup exec_pop () exec_yank integer_yankdup boolean_dup_times exec_s_when_autoconstructing (exec_do*while (boolean_invert_second_then_and boolean_rot integer_mult exec_dup (exec_y_when_autoconstructing (-50 integer_lte exec_s_when_autoconstructing (tag_boolean_456 in2) (exec_swap (integer_mult integer_shove) (integer_yank) boolean_swap integer_yankdup boolean_shove integer_fromboolean exec_k_when_autoconstructing () ()) ())))) () ()) ()) () ()) () ()) ())))
Errors: [0 0 1 0 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 69
Size: 104
Percent parens: 0.337
--- Population Statistics ---
Average total errors in population: 5.508
Median total errors in population: 5
Error averages by case: (0.62 0.622 0.815 0.135 0.623 0.618 0.814 0.129 0.918 0.214)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.683
Average program size in population (points): 62.402
Average percent parens in population: 0.254
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.43025
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 95
Genome diversity (% unique genomes):	 0.703
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 105
Syntactic diversity (% unique Push programs):	 0.689
Total error diversity:				 0.008
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1540502
--- Timings ---
Current time: 1559314338587 milliseconds
Total Time:          10.9 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.7 seconds, 61.4%
Fitness Testing:      3.2 seconds, 29.3%
Report:               0.9 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 20                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -28                 | Program output: 62                 
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 100                
Correct output: -1                  | Program output: -1                 
Correct output: 33                  | Program output: 33                 
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 53                 
Correct output: 14                  | Program output: 77                 
Correct output: 8                   | Program output: 49                 
Correct output: 32                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 82                 
Correct output: 57                  | Program output: 57                 
Correct output: 12                  | Program output: 95                 
Correct output: 35                  | Program output: 35                 
Correct output: 60                  | Program output: 64                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 91                 
Correct output: 3                   | Program output: 80                 
Correct output: 46                  | Program output: 46                 
Correct output: 56                  | Program output: 98                 
Correct output: 29                  | Program output: 29                 
Correct output: 0                   | Program output: 53                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: -39                 | Program output: 1                  
Correct output: -44                 | Program output: 40                 
Correct output: -97                 | Program output: -44                
Correct output: -76                 | Program output: -47                
Correct output: -11                 | Program output: -11                
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: 74                 
Correct output: -97                 | Program output: -24                
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 55                 
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: 40                 
Correct output: -27                 | Program output: 21                 
Correct output: -82                 | Program output: -82                
Correct output: -73                 | Program output: 46                 
Correct output: -88                 | Program output: -9                 
Correct output: -52                 | Program output: -52                
Correct output: -79                 | Program output: -59                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -53                
Correct output: -64                 | Program output: -64                
Correct output: -68                 | Program output: -68                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: 1                  
Correct output: -55                 | Program output: -13                
Correct output: -87                 | Program output: -50                
Correct output: -40                 | Program output: 6                  
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: -55                
Correct output: -28                 | Program output: -28                
Correct output: -84                 | Program output: -80                
Correct output: -92                 | Program output: -40                
Correct output: -67                 | Program output: -27                
Correct output: -67                 | Program output: -61                
Correct output: -65                 | Program output: -47                
Correct output: -76                 | Program output: 10                 
Correct output: -87                 | Program output: -41                
Correct output: -64                 | Program output: 18                 
Correct output: -24                 | Program output: 70                 
Correct output: -35                 | Program output: 98                 
Correct output: -33                 | Program output: -33                
Correct output: -17                 | Program output: 22                 
Correct output: -91                 | Program output: 16                 
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -31                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: 83                 
Correct output: 6                   | Program output: 60                 
Correct output: -49                 | Program output: -49                
Correct output: -91                 | Program output: -8                 
Correct output: -82                 | Program output: -61                
Correct output: -39                 | Program output: 22                 
Correct output: -83                 | Program output: -4                 
Correct output: -37                 | Program output: 47                 
Correct output: -76                 | Program output: 30                 
Correct output: -19                 | Program output: 8                  
Correct output: -73                 | Program output: -6                 
Correct output: -87                 | Program output: -87                
Correct output: -39                 | Program output: -39                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction print_integer} {:close 0, :instruction tag_integer_807} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 1, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction 46} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction tag_integer_811} {:close 0, :instruction print_exec} {:close 1, :instruction integer_empty})
Lexicase best program: (integer_gt in1 in2 in2 integer_gte boolean_and exec_while (integer_flush integer_dec print_integer) tag_integer_807 boolean_eq in1 integer_sub exec_do*while (exec_k_when_autoconstructing (print_integer boolean_dup_items integer_max print_integer exec_while ()) (in2) exec_k () (exec_do*count (exec_do*times (boolean_dup_items exec_dup (exec_y (exec_do*while (integer_dup integer_yank exec_if (boolean_shove boolean_xor in3 boolean_stackdepth integer_empty integer_add exec_if () (integer_min print_integer boolean_shove integer_dup_items boolean_swap exec_dup_times (integer_empty integer_yankdup exec_when (integer_dup_times exec_dup_items) in1 exec_s_when_autoconstructing (boolean_yankdup exec_noop integer_dec exec_yank integer_pop in3 46 integer_shove boolean_stackdepth) (tag_integer_811 print_exec (integer_empty)) ()))) ()))))))))
Lexicase best errors: [0 0 1 0 1 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 87
Percent parens: 0.264
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction print_integer} {:close 0, :instruction tag_integer_807} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 1, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction in3} {:close 0, :instruction 46} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction tag_integer_811} {:close 0, :instruction print_exec} {:close 1, :instruction integer_empty})
Zero cases best program: (integer_gt in1 in2 in2 integer_gte boolean_and exec_while (integer_flush integer_dec print_integer) tag_integer_807 boolean_eq in1 integer_sub exec_do*while (exec_k_when_autoconstructing (print_integer boolean_dup_items integer_max print_integer exec_while ()) (in2) exec_k () (exec_do*count (exec_do*times (boolean_dup_items exec_dup (exec_y (exec_do*while (integer_dup integer_yank exec_if (boolean_shove boolean_xor in3 boolean_stackdepth integer_empty integer_add exec_if () (integer_min print_integer boolean_shove integer_dup_items boolean_swap exec_dup_times (integer_empty integer_yankdup exec_when (integer_dup_times exec_dup_items) in1 exec_s_when_autoconstructing (boolean_yankdup exec_noop integer_dec exec_yank integer_pop in3 46 integer_shove boolean_stackdepth) (tag_integer_811 print_exec (integer_empty)) ()))) ()))))))))
Zero cases best errors: [0 0 1 0 1 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 87
Percent parens: 0.264
--- Lexicase Population Statistics ---
Count of elite individuals by case: (500 499 1 500 272 498 272 496 1 272)
Population mean number of elite cases: 3.31
Count of perfect (error zero) individuals by case: (500 499 1 500 272 498 272 496 1 272)
Population mean number of perfect (error zero) cases: 3.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup} {:close 1, :instruction integer_sub} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div})
Best program: (in1 exec_dup (integer_fromboolean boolean_shove print_integer integer_dup) integer_sub boolean_eq exec_dup (integer_empty exec_pop (boolean_xor integer_div)))
Errors: [0 0 1 0 1 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 13
Size: 17
Percent parens: 0.235
--- Population Statistics ---
Average total errors in population: 6.689
Median total errors in population: 7
Error averages by case: (0.5 0.501 0.999 0.5 0.728 0.502 0.728 0.504 0.999 0.728)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.707
Average program size in population (points): 60.306
Average percent parens in population: 0.265
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.839875
Median age in population: 5.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 64
Genome diversity (% unique genomes):	 0.682
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.67
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1774911
--- Timings ---
Current time: 1559314341048 milliseconds
Total Time:          13.4 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.7 seconds, 64.8%
Fitness Testing:      3.5 seconds, 26.0%
Report:               1.1 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 20                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -28                 | Program output: 62                 
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 100                
Correct output: -1                  | Program output: -1                 
Correct output: 33                  | Program output: 33                 
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 53                 
Correct output: 14                  | Program output: 77                 
Correct output: 8                   | Program output: 49                 
Correct output: 32                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 82                 
Correct output: 57                  | Program output: 57                 
Correct output: 12                  | Program output: 95                 
Correct output: 35                  | Program output: 35                 
Correct output: 60                  | Program output: 64                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 91                 
Correct output: 3                   | Program output: 80                 
Correct output: 46                  | Program output: 46                 
Correct output: 56                  | Program output: 98                 
Correct output: 29                  | Program output: 29                 
Correct output: 0                   | Program output: 53                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: -39                 | Program output: 1                  
Correct output: -44                 | Program output: 40                 
Correct output: -97                 | Program output: -44                
Correct output: -76                 | Program output: -47                
Correct output: -11                 | Program output: -11                
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: 74                 
Correct output: -97                 | Program output: -24                
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 55                 
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: 40                 
Correct output: -27                 | Program output: 21                 
Correct output: -82                 | Program output: -82                
Correct output: -73                 | Program output: 46                 
Correct output: -88                 | Program output: -9                 
Correct output: -52                 | Program output: -52                
Correct output: -79                 | Program output: -59                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -53                
Correct output: -64                 | Program output: -64                
Correct output: -68                 | Program output: -68                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: 1                  
Correct output: -55                 | Program output: -13                
Correct output: -87                 | Program output: -50                
Correct output: -40                 | Program output: 6                  
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: -55                
Correct output: -28                 | Program output: -28                
Correct output: -84                 | Program output: -80                
Correct output: -92                 | Program output: -40                
Correct output: -67                 | Program output: -27                
Correct output: -67                 | Program output: -61                
Correct output: -65                 | Program output: -47                
Correct output: -76                 | Program output: 10                 
Correct output: -87                 | Program output: -41                
Correct output: -64                 | Program output: 18                 
Correct output: -24                 | Program output: 70                 
Correct output: -35                 | Program output: 98                 
Correct output: -33                 | Program output: -33                
Correct output: -17                 | Program output: 22                 
Correct output: -91                 | Program output: 16                 
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -31                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: 83                 
Correct output: 6                   | Program output: 60                 
Correct output: -49                 | Program output: -49                
Correct output: -91                 | Program output: -8                 
Correct output: -82                 | Program output: -61                
Correct output: -39                 | Program output: 22                 
Correct output: -83                 | Program output: -4                 
Correct output: -37                 | Program output: 47                 
Correct output: -76                 | Program output: 30                 
Correct output: -19                 | Program output: 8                  
Correct output: -73                 | Program output: -6                 
Correct output: -87                 | Program output: -87                
Correct output: -39                 | Program output: -39                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction in3} {:close 0, :instruction 46} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_pop} {:close 0, :instruction tag_integer_811} {:close 0, :instruction print_exec} {:close 1, :instruction integer_empty})
Lexicase best program: (in1 in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing () (boolean_rot exec_if (exec_stackdepth exec_flush print_integer boolean_pop boolean_invert_first_then_and) () in3) exec_shove (exec_k_when_autoconstructing (integer_max print_integer integer_flush print_integer integer_eq boolean_frominteger boolean_and exec_pop (integer_fromboolean exec_y (integer_add exec_y (integer_div in4 exec_while (exec_s_when_autoconstructing (integer_mult boolean_pop in3 integer_pop integer_dup_items integer_pop boolean_stackdepth boolean_rot integer_swap) (boolean_swap) (in4 boolean_flush exec_pop () integer_dup_items boolean_swap exec_dup_times (integer_empty integer_yankdup exec_when (integer_dup_times exec_dup_items) in1 exec_s_when_autoconstructing (boolean_yankdup exec_noop integer_dec exec_yank boolean_or in3 46 integer_shove exec_pop () tag_integer_811 print_exec (integer_empty)) () ()))))))) ())))
Lexicase best errors: [0 0 1 0 0 1 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 92
Percent parens: 0.261
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction in3} {:close 0, :instruction 46} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_pop} {:close 0, :instruction tag_integer_811} {:close 0, :instruction print_exec} {:close 1, :instruction integer_empty})
Zero cases best program: (in1 in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing () (boolean_rot exec_if (exec_stackdepth exec_flush print_integer boolean_pop boolean_invert_first_then_and) () in3) exec_shove (exec_k_when_autoconstructing (integer_max print_integer integer_flush print_integer integer_eq boolean_frominteger boolean_and exec_pop (integer_fromboolean exec_y (integer_add exec_y (integer_div in4 exec_while (exec_s_when_autoconstructing (integer_mult boolean_pop in3 integer_pop integer_dup_items integer_pop boolean_stackdepth boolean_rot integer_swap) (boolean_swap) (in4 boolean_flush exec_pop () integer_dup_items boolean_swap exec_dup_times (integer_empty integer_yankdup exec_when (integer_dup_times exec_dup_items) in1 exec_s_when_autoconstructing (boolean_yankdup exec_noop integer_dec exec_yank boolean_or in3 46 integer_shove exec_pop () tag_integer_811 print_exec (integer_empty)) () ()))))))) ())))
Zero cases best errors: [0 0 1 0 0 1 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 92
Percent parens: 0.261
--- Lexicase Population Statistics ---
Count of elite individuals by case: (440 440 1 441 898 294 1 294 1 158)
Population mean number of elite cases: 2.97
Count of perfect (error zero) individuals by case: (440 440 1 441 898 294 1 294 1 158)
Population mean number of perfect (error zero) cases: 2.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tagged_702} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction print_integer} {:close 0, :instruction tag_integer_807} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 1, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction in3} {:close 0, :instruction 46} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_y} {:close 0, :instruction tag_integer_811} {:close 0, :instruction print_exec} {:close 1, :instruction integer_empty})
Best program: (tagged_702 integer_pop exec_when (exec_do*while (exec_do*times (boolean_stackdepth in1 in2 in2 integer_gte boolean_and exec_while (integer_flush integer_dec print_integer)) tag_integer_807 boolean_eq in1 integer_sub exec_do*while (exec_k_when_autoconstructing (print_integer boolean_dup_times integer_max print_integer exec_while ()) (in2) exec_k () (exec_do*count (exec_do*times (boolean_dup_items exec_dup (exec_y (exec_do*while (integer_dup integer_yank exec_if (integer_swap boolean_xor in3 boolean_stackdepth integer_empty integer_add exec_if () (integer_min print_integer boolean_shove integer_dup_items boolean_swap exec_dup_times (integer_empty integer_yankdup exec_when (integer_dup_times exec_dup_items) in1 exec_s_when_autoconstructing (boolean_yankdup exec_noop integer_dec exec_yank boolean_or in3 46 integer_shove exec_y () tag_integer_811 print_exec (integer_empty)) () ()))) ()))))))))))
Errors: [0 0 1 0 0 1 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 69
Size: 96
Percent parens: 0.281
--- Population Statistics ---
Average total errors in population: 7.032
Median total errors in population: 7
Error averages by case: (0.56 0.56 0.999 0.559 0.102 0.706 0.999 0.706 0.999 0.842)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.051
Average program size in population (points): 65.164
Average percent parens in population: 0.269
Minimum age in population: 5.0
Maximum age in population: 9.25
Average age in population: 7.5360625
Median age in population: 7.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 74
Genome diversity (% unique genomes):	 0.734
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.722
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2031306
--- Timings ---
Current time: 1559314343464 milliseconds
Total Time:          15.7 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.5 seconds, 66.9%
Fitness Testing:      3.8 seconds, 24.0%
Report:               1.3 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 20                 
Correct output: -70                 | Program output: 99                 
Correct output: -87                 | Program output: -87                
Correct output: -28                 | Program output: 62                 
Correct output: 20                  | Program output: 20                 
Correct output: 73                  | Program output: 100                
Correct output: -1                  | Program output: -1                 
Correct output: 33                  | Program output: 33                 
Correct output: -29                 | Program output: 31                 
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 63                 
Correct output: 14                  | Program output: 58                 
Correct output: 8                   | Program output: 96                 
Correct output: 32                  | Program output: 60                 
Correct output: 22                  | Program output: 25                 
Correct output: 17                  | Program output: 43                 
Correct output: 13                  | Program output: 72                 
Correct output: 57                  | Program output: 77                 
Correct output: 12                  | Program output: 84                 
Correct output: 35                  | Program output: 62                 
Correct output: 60                  | Program output: 65                 
Correct output: 31                  | Program output: 59                 
Correct output: 24                  | Program output: 24                 
Correct output: 3                   | Program output: 92                 
Correct output: 46                  | Program output: 69                 
Correct output: 56                  | Program output: 56                 
Correct output: 29                  | Program output: 97                 
Correct output: 0                   | Program output: 93                 
Correct output: 17                  | Program output: 100                
Correct output: 3                   | Program output: 74                 
Correct output: -39                 | Program output: 58                 
Correct output: -44                 | Program output: 5                  
Correct output: -97                 | Program output: -64                
Correct output: -76                 | Program output: -13                
Correct output: -11                 | Program output: -3                 
Correct output: -95                 | Program output: -15                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -75                
Correct output: -40                 | Program output: 6                  
Correct output: -92                 | Program output: 43                 
Correct output: 7                   | Program output: 48                 
Correct output: -1                  | Program output: 46                 
Correct output: -71                 | Program output: 26                 
Correct output: -27                 | Program output: 69                 
Correct output: -82                 | Program output: -19                
Correct output: -73                 | Program output: 9                  
Correct output: -88                 | Program output: -88                
Correct output: -52                 | Program output: 66                 
Correct output: -79                 | Program output: 82                 
Correct output: -71                 | Program output: -17                
Correct output: -53                 | Program output: 51                 
Correct output: -64                 | Program output: 16                 
Correct output: -68                 | Program output: 68                 
Correct output: -65                 | Program output: 28                 
Correct output: -76                 | Program output: 44                 
Correct output: -55                 | Program output: 10                 
Correct output: -87                 | Program output: -87                
Correct output: -40                 | Program output: -40                
Correct output: -95                 | Program output: 19                 
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -13                
Correct output: -84                 | Program output: 100                
Correct output: -92                 | Program output: -92                
Correct output: -67                 | Program output: 73                 
Correct output: -67                 | Program output: -56                
Correct output: -65                 | Program output: -9                 
Correct output: -76                 | Program output: -28                
Correct output: -87                 | Program output: -87                
Correct output: -64                 | Program output: -64                
Correct output: -24                 | Program output: 73                 
Correct output: -35                 | Program output: -6                 
Correct output: -33                 | Program output: 79                 
Correct output: -17                 | Program output: -4                 
Correct output: -91                 | Program output: -27                
Correct output: -74                 | Program output: 4                  
Correct output: -43                 | Program output: -43                
Correct output: -90                 | Program output: -18                
Correct output: -89                 | Program output: -33                
Correct output: 6                   | Program output: 23                 
Correct output: -49                 | Program output: -22                
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -34                
Correct output: -39                 | Program output: -39                
Correct output: -83                 | Program output: -83                
Correct output: -37                 | Program output: 76                 
Correct output: -76                 | Program output: -70                
Correct output: -19                 | Program output: 36                 
Correct output: -73                 | Program output: 39                 
Correct output: -87                 | Program output: 48                 
Correct output: -39                 | Program output: 11                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_k} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction 16} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction tag_exec_201} {:close 1, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mult})
Lexicase best program: (in3 integer_eq boolean_invert_first_then_and integer_swap boolean_dup_times integer_lte integer_fromboolean print_integer integer_mult exec_pop (exec_eq exec_do*range (integer_lte integer_div boolean_invert_first_then_and integer_yankdup integer_min integer_gt integer_dec) boolean_frominteger boolean_eq) exec_flush boolean_or boolean_invert_first_then_and integer_min exec_when (boolean_swap exec_k () (integer_rot) boolean_frominteger exec_yankdup integer_dup in4 integer_gte integer_gt integer_lte boolean_rot boolean_yankdup exec_yankdup exec_y (boolean_or exec_swap (print_integer boolean_swap boolean_pop in3 exec_s_when_autoconstructing (exec_y () integer_yankdup exec_y (exec_k_when_autoconstructing () (in4 integer_div boolean_stackdepth integer_yank boolean_stackdepth integer_gte boolean_not)) integer_stackdepth integer_empty) () (integer_gt 16 exec_swap (exec_k (exec_yank boolean_frominteger) () integer_fromboolean integer_stackdepth) (integer_empty integer_stackdepth boolean_flush tag_exec_201 () integer_dup) in1 integer_mult)) ())))
Lexicase best errors: [1 0 0 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 96
Percent parens: 0.219
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_k} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_y} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_y} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_stackdepth} {:close 2, :instruction integer_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction 16} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_yank} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 1, :instruction tag_exec_201} {:close 1, :instruction integer_dup} {:close 0, :instruction in1} {:close 0, :instruction integer_mult})
Zero cases best program: (in3 integer_eq boolean_invert_first_then_and integer_swap boolean_dup_times integer_lte integer_fromboolean print_integer integer_mult exec_pop (exec_eq exec_do*range (integer_lte integer_div boolean_invert_first_then_and integer_yankdup integer_min integer_gt integer_dec) boolean_frominteger boolean_eq) exec_flush boolean_or boolean_invert_first_then_and integer_min exec_when (boolean_swap exec_k () (integer_rot) boolean_frominteger exec_yankdup integer_dup in4 integer_gte integer_gt integer_lte boolean_rot boolean_yankdup exec_yankdup exec_y (boolean_or exec_swap (print_integer boolean_swap boolean_pop in3 exec_s_when_autoconstructing (exec_y () integer_yankdup exec_y (exec_k_when_autoconstructing () (in4 integer_div boolean_stackdepth integer_yank boolean_stackdepth integer_gte boolean_not)) integer_stackdepth integer_empty) () (integer_gt 16 exec_swap (exec_k (exec_yank boolean_frominteger) () integer_fromboolean integer_stackdepth) (integer_empty integer_stackdepth boolean_flush tag_exec_201 () integer_dup) in1 integer_mult)) ())))
Zero cases best errors: [1 0 0 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 96
Percent parens: 0.219
--- Lexicase Population Statistics ---
Count of elite individuals by case: (299 892 206 684 100 589 284 207 283 206)
Population mean number of elite cases: 3.75
Count of perfect (error zero) individuals by case: (299 892 206 684 100 589 284 207 283 206)
Population mean number of perfect (error zero) cases: 3.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*range} {:close 0, :instruction 57} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_k})
Best program: (integer_empty in3 integer_rot print_integer integer_lt integer_dup integer_div integer_empty boolean_xor exec_do*range () 57 integer_dup integer_div integer_empty exec_k () ())
Errors: [1 0 0 1 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 15
Size: 19
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 6.25
Median total errors in population: 6
Error averages by case: (0.701 0.108 0.794 0.316 0.9 0.411 0.716 0.793 0.717 0.794)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.152
Average program size in population (points): 70.816
Average percent parens in population: 0.271
Minimum age in population: 6.25
Maximum age in population: 10.84375
Average age in population: 9.023375
Median age in population: 9.0625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 130
Genome diversity (% unique genomes):	 0.752
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 130
Syntactic diversity (% unique Push programs):	 0.743
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2324109
--- Timings ---
Current time: 1559314346064 milliseconds
Total Time:          18.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.6 seconds, 68.6%
Fitness Testing:      4.1 seconds, 22.2%
Report:               1.6 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -63                 | Program output: -63                
Correct output: 20                  | Program output: 43                 
Correct output: -70                 | Program output: 99                 
Correct output: -87                 | Program output: -87                
Correct output: -28                 | Program output: 62                 
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 100                
Correct output: -1                  | Program output: 76                 
Correct output: 33                  | Program output: 69                 
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 42                 
Correct output: 14                  | Program output: 14                 
Correct output: 8                   | Program output: 49                 
Correct output: 32                  | Program output: 66                 
Correct output: 22                  | Program output: 83                 
Correct output: 17                  | Program output: 76                 
Correct output: 13                  | Program output: 21                 
Correct output: 57                  | Program output: 83                 
Correct output: 12                  | Program output: 12                 
Correct output: 35                  | Program output: 57                 
Correct output: 60                  | Program output: 60                 
Correct output: 31                  | Program output: 85                 
Correct output: 24                  | Program output: 53                 
Correct output: 3                   | Program output: 59                 
Correct output: 46                  | Program output: 49                 
Correct output: 56                  | Program output: 58                 
Correct output: 29                  | Program output: 82                 
Correct output: 0                   | Program output: 0                  
Correct output: 17                  | Program output: 39                 
Correct output: 3                   | Program output: 61                 
Correct output: -39                 | Program output: 81                 
Correct output: -44                 | Program output: 2                  
Correct output: -97                 | Program output: -12                
Correct output: -76                 | Program output: 11                 
Correct output: -11                 | Program output: 74                 
Correct output: -95                 | Program output: 91                 
Correct output: -78                 | Program output: 31                 
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: 26                 
Correct output: -92                 | Program output: 67                 
Correct output: 7                   | Program output: 12                 
Correct output: -1                  | Program output: 8                  
Correct output: -71                 | Program output: -71                
Correct output: -27                 | Program output: -27                
Correct output: -82                 | Program output: 29                 
Correct output: -73                 | Program output: 13                 
Correct output: -88                 | Program output: 76                 
Correct output: -52                 | Program output: 88                 
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: 70                 
Correct output: -53                 | Program output: 96                 
Correct output: -64                 | Program output: -40                
Correct output: -68                 | Program output: -10                
Correct output: -65                 | Program output: 14                 
Correct output: -76                 | Program output: 12                 
Correct output: -55                 | Program output: -55                
Correct output: -87                 | Program output: 22                 
Correct output: -40                 | Program output: -39                
Correct output: -95                 | Program output: -27                
Correct output: -68                 | Program output: -66                
Correct output: -28                 | Program output: 74                 
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -2                 
Correct output: -67                 | Program output: -18                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: 57                 
Correct output: -64                 | Program output: 3                  
Correct output: -24                 | Program output: 73                 
Correct output: -35                 | Program output: -35                
Correct output: -33                 | Program output: 7                  
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: 42                 
Correct output: -43                 | Program output: -40                
Correct output: -90                 | Program output: -35                
Correct output: -89                 | Program output: -40                
Correct output: 6                   | Program output: 74                 
Correct output: -49                 | Program output: -5                 
Correct output: -91                 | Program output: 25                 
Correct output: -82                 | Program output: -82                
Correct output: -39                 | Program output: -36                
Correct output: -83                 | Program output: 90                 
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -76                
Correct output: -19                 | Program output: -11                
Correct output: -73                 | Program output: 78                 
Correct output: -87                 | Program output: -87                
Correct output: -39                 | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tagged_702} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 2, :instruction print_integer} {:close 0, :instruction tag_integer_807} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 1, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_dup_times})
Lexicase best program: (tagged_702 integer_pop exec_when (exec_do*while (exec_do*times (integer_pop exec_when (exec_do*while (exec_do*times (boolean_stackdepth in1 in2 in2 integer_gte boolean_and exec_while (integer_flush boolean_shove print_integer)) tag_integer_807 boolean_eq boolean_dup integer_sub exec_do*while (in2 print_integer boolean_dup_times integer_max print_integer exec_while ()) in2) exec_k () (exec_do*count (exec_do*times (boolean_dup_items exec_dup (exec_y (exec_do*while (integer_dup integer_yank exec_if (integer_swap boolean_xor in3 boolean_stackdepth integer_empty integer_add exec_if () (integer_min print_integer boolean_shove integer_dup_items boolean_swap exec_dup_times (integer_empty integer_yankdup exec_when (integer_dup_times exec_dup_items) in1 exec_s_when_autoconstructing (boolean_yankdup exec_noop boolean_frominteger boolean_pop) (exec_dup_times ()) ()))) ())))))))))))
Lexicase best errors: [0 0 1 0 1 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 93
Percent parens: 0.290
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tagged_702} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 2, :instruction print_integer} {:close 0, :instruction tag_integer_807} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 1, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_dup_times})
Zero cases best program: (tagged_702 integer_pop exec_when (exec_do*while (exec_do*times (integer_pop exec_when (exec_do*while (exec_do*times (boolean_stackdepth in1 in2 in2 integer_gte boolean_and exec_while (integer_flush boolean_shove print_integer)) tag_integer_807 boolean_eq boolean_dup integer_sub exec_do*while (in2 print_integer boolean_dup_times integer_max print_integer exec_while ()) in2) exec_k () (exec_do*count (exec_do*times (boolean_dup_items exec_dup (exec_y (exec_do*while (integer_dup integer_yank exec_if (integer_swap boolean_xor in3 boolean_stackdepth integer_empty integer_add exec_if () (integer_min print_integer boolean_shove integer_dup_items boolean_swap exec_dup_times (integer_empty integer_yankdup exec_when (integer_dup_times exec_dup_items) in1 exec_s_when_autoconstructing (boolean_yankdup exec_noop boolean_frominteger boolean_pop) (exec_dup_times ()) ()))) ())))))))))))
Zero cases best errors: [0 0 1 0 1 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 93
Percent parens: 0.290
--- Lexicase Population Statistics ---
Count of elite individuals by case: (114 114 132 114 361 114 270 270 132 114)
Population mean number of elite cases: 1.74
Count of perfect (error zero) individuals by case: (114 114 132 114 361 114 270 270 132 114)
Population mean number of perfect (error zero) cases: 1.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tagged_702} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction print_integer} {:close 0, :instruction tag_integer_807} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 1, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_dup_times})
Best program: (tagged_702 integer_pop exec_when (exec_do*while (exec_do*times (boolean_stackdepth in1 in2 in2 integer_gte boolean_and exec_while (integer_flush integer_dec print_integer)) tag_integer_807 boolean_eq boolean_dup integer_sub exec_do*while (in2 print_integer boolean_dup_times integer_max print_integer exec_while () in2) exec_k () (exec_do*count (exec_do*times (boolean_dup_items exec_dup (exec_y (exec_do*while (integer_dup integer_yank exec_if (integer_swap boolean_xor in3 boolean_stackdepth integer_empty integer_add exec_if () (integer_min print_integer boolean_shove integer_dup_items boolean_swap exec_dup_times (integer_empty integer_yankdup) exec_when (integer_dup_times exec_dup_items) in1 exec_s_when_autoconstructing (boolean_yankdup exec_noop boolean_frominteger boolean_pop) (exec_dup_times ()) ())) ())))))))))
Errors: [0 0 1 0 1 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 62
Size: 86
Percent parens: 0.279
--- Population Statistics ---
Average total errors in population: 8.265
Median total errors in population: 8
Error averages by case: (0.886 0.886 0.868 0.886 0.639 0.886 0.73 0.73 0.868 0.886)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.253
Average program size in population (points): 65.616
Average percent parens in population: 0.273
Minimum age in population: 7.375
Maximum age in population: 12.34375
Average age in population: 10.498640625
Median age in population: 10.578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 29
Genome diversity (% unique genomes):	 0.798
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.789
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 2575632
--- Timings ---
Current time: 1559314348686 milliseconds
Total Time:          21.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        14.7 seconds, 70.0%
Fitness Testing:      4.4 seconds, 21.0%
Report:               1.8 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 20                 
Correct output: -70                 | Program output: 99                 
Correct output: -87                 | Program output: 68                 
Correct output: -28                 | Program output: -28                
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 73                 
Correct output: -1                  | Program output: -1                 
Correct output: 33                  | Program output: 33                 
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 14                 
Correct output: 14                  | Program output: 87                 
Correct output: 8                   | Program output: 8                  
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 96                 
Correct output: 17                  | Program output: 32                 
Correct output: 13                  | Program output: 13                 
Correct output: 57                  | Program output: 71                 
Correct output: 12                  | Program output: 54                 
Correct output: 35                  | Program output: 95                 
Correct output: 60                  | Program output: 61                 
Correct output: 31                  | Program output: 59                 
Correct output: 24                  | Program output: 62                 
Correct output: 3                   | Program output: 3                  
Correct output: 46                  | Program output: 48                 
Correct output: 56                  | Program output: 81                 
Correct output: 29                  | Program output: 95                 
Correct output: 0                   | Program output: 2                  
Correct output: 17                  | Program output: 61                 
Correct output: 3                   | Program output: 59                 
Correct output: -39                 | Program output: -39                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -76                 | Program output: -76                
Correct output: -11                 | Program output: 66                 
Correct output: -95                 | Program output: -84                
Correct output: -78                 | Program output: -56                
Correct output: -97                 | Program output: 69                 
Correct output: -40                 | Program output: -8                 
Correct output: -92                 | Program output: -49                
Correct output: 7                   | Program output: 7                  
Correct output: -1                  | Program output: 9                  
Correct output: -71                 | Program output: 87                 
Correct output: -27                 | Program output: 91                 
Correct output: -82                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: 58                 
Correct output: -52                 | Program output: 41                 
Correct output: -79                 | Program output: -14                
Correct output: -71                 | Program output: 82                 
Correct output: -53                 | Program output: 43                 
Correct output: -64                 | Program output: 25                 
Correct output: -68                 | Program output: 60                 
Correct output: -65                 | Program output: 39                 
Correct output: -76                 | Program output: -76                
Correct output: -55                 | Program output: 9                  
Correct output: -87                 | Program output: -84                
Correct output: -40                 | Program output: -4                 
Correct output: -95                 | Program output: 65                 
Correct output: -68                 | Program output: 28                 
Correct output: -28                 | Program output: -7                 
Correct output: -84                 | Program output: -83                
Correct output: -92                 | Program output: -55                
Correct output: -67                 | Program output: -67                
Correct output: -67                 | Program output: 88                 
Correct output: -65                 | Program output: -16                
Correct output: -76                 | Program output: 66                 
Correct output: -87                 | Program output: -15                
Correct output: -64                 | Program output: 41                 
Correct output: -24                 | Program output: -24                
Correct output: -35                 | Program output: 66                 
Correct output: -33                 | Program output: 63                 
Correct output: -17                 | Program output: 24                 
Correct output: -91                 | Program output: -58                
Correct output: -74                 | Program output: 84                 
Correct output: -43                 | Program output: 42                 
Correct output: -90                 | Program output: 35                 
Correct output: -89                 | Program output: -89                
Correct output: 6                   | Program output: 6                  
Correct output: -49                 | Program output: 94                 
Correct output: -91                 | Program output: -66                
Correct output: -82                 | Program output: 27                 
Correct output: -39                 | Program output: 49                 
Correct output: -83                 | Program output: -58                
Correct output: -37                 | Program output: 89                 
Correct output: -76                 | Program output: 68                 
Correct output: -19                 | Program output: -19                
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: 18                 
Correct output: -39                 | Program output: -13                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 1, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_dup_times})
Lexicase best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing () (boolean_rot exec_if (exec_stackdepth exec_flush print_integer boolean_pop) (boolean_invert_first_then_and)) in3) exec_shove (exec_k_when_autoconstructing (boolean_yank print_integer integer_flush print_integer integer_eq) (boolean_frominteger boolean_and exec_pop (integer_fromboolean exec_y (integer_add exec_while ()) in2) exec_k () (exec_do*count (exec_do*times (boolean_dup_items exec_dup (exec_y (exec_do*while (integer_dup integer_yank exec_if (integer_swap boolean_xor in3 boolean_stackdepth integer_empty integer_add exec_if () (integer_min print_integer boolean_shove integer_dup_items boolean_swap exec_dup_times (integer_empty integer_yankdup exec_when (integer_dup_times exec_dup_items) integer_dup_times exec_s_when_autoconstructing (boolean_yankdup integer_gt boolean_frominteger boolean_pop) (exec_dup_times ()) ()))) ())))))))))
Lexicase best errors: [0 1 1 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 93
Percent parens: 0.312
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 1, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_dup_times})
Zero cases best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing () (boolean_rot exec_if (exec_stackdepth exec_flush print_integer boolean_pop) (boolean_invert_first_then_and)) in3) exec_shove (exec_k_when_autoconstructing (boolean_yank print_integer integer_flush print_integer integer_eq) (boolean_frominteger boolean_and exec_pop (integer_fromboolean exec_y (integer_add exec_while ()) in2) exec_k () (exec_do*count (exec_do*times (boolean_dup_items exec_dup (exec_y (exec_do*while (integer_dup integer_yank exec_if (integer_swap boolean_xor in3 boolean_stackdepth integer_empty integer_add exec_if () (integer_min print_integer boolean_shove integer_dup_items boolean_swap exec_dup_times (integer_empty integer_yankdup exec_when (integer_dup_times exec_dup_items) integer_dup_times exec_s_when_autoconstructing (boolean_yankdup integer_gt boolean_frominteger boolean_pop) (exec_dup_times ()) ()))) ())))))))))
Zero cases best errors: [0 1 1 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 93
Percent parens: 0.312
--- Lexicase Population Statistics ---
Count of elite individuals by case: (184 158 464 160 184 182 886 158 159 649)
Population mean number of elite cases: 3.18
Count of perfect (error zero) individuals by case: (184 158 464 160 184 182 886 158 159 649)
Population mean number of perfect (error zero) cases: 3.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tagged_702} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction print_integer} {:close 0, :instruction tag_integer_807} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 1, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_dup_times})
Best program: (tagged_702 integer_pop exec_when (exec_do*while (exec_do*times (boolean_stackdepth in1 in2 boolean_swap integer_gte boolean_and exec_while (integer_flush integer_dec print_integer)) tag_integer_807 boolean_eq boolean_dup integer_sub exec_do*while (in4 print_integer boolean_dup_times integer_max print_integer exec_while ()) in2) exec_k () (exec_do*count (exec_do*times (boolean_dup_items exec_do*count (exec_do*times (boolean_dup_items exec_dup (exec_y (boolean_xor integer_dup integer_yank exec_if (integer_swap boolean_xor in3 boolean_stackdepth integer_empty integer_add exec_if () (integer_min print_integer boolean_shove integer_dup_items boolean_swap exec_dup_times (integer_yankdup boolean_frominteger boolean_pop) exec_dup_times ())) ())))))))))
Errors: [1 0 1 0 1 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 57
Size: 78
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 6.816
Median total errors in population: 7
Error averages by case: (0.816 0.842 0.536 0.84 0.816 0.818 0.114 0.842 0.841 0.351)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.397
Average program size in population (points): 72.412
Average percent parens in population: 0.271
Minimum age in population: 9.5
Maximum age in population: 13.8125
Average age in population: 12.002953125
Median age in population: 12.0625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 33
Genome diversity (% unique genomes):	 0.793
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.791
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 2901254
--- Timings ---
Current time: 1559314351550 milliseconds
Total Time:          23.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.9 seconds, 71.1%
Fitness Testing:      4.7 seconds, 19.8%
Report:               2.1 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -63                 | Program output: -63                
Correct output: 20                  | Program output: 43                 
Correct output: -70                 | Program output: 99                 
Correct output: -87                 | Program output: -87                
Correct output: -28                 | Program output: 62                 
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 100                
Correct output: -1                  | Program output: 76                 
Correct output: 33                  | Program output: 69                 
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 42                 
Correct output: 14                  | Program output: 14                 
Correct output: 8                   | Program output: 49                 
Correct output: 32                  | Program output: 66                 
Correct output: 22                  | Program output: 83                 
Correct output: 17                  | Program output: 76                 
Correct output: 13                  | Program output: 21                 
Correct output: 57                  | Program output: 83                 
Correct output: 12                  | Program output: 12                 
Correct output: 35                  | Program output: 57                 
Correct output: 60                  | Program output: 60                 
Correct output: 31                  | Program output: 85                 
Correct output: 24                  | Program output: 53                 
Correct output: 3                   | Program output: 59                 
Correct output: 46                  | Program output: 49                 
Correct output: 56                  | Program output: 58                 
Correct output: 29                  | Program output: 82                 
Correct output: 0                   | Program output: 0                  
Correct output: 17                  | Program output: 39                 
Correct output: 3                   | Program output: 61                 
Correct output: -39                 | Program output: 81                 
Correct output: -44                 | Program output: 2                  
Correct output: -97                 | Program output: -12                
Correct output: -76                 | Program output: 11                 
Correct output: -11                 | Program output: 74                 
Correct output: -95                 | Program output: 91                 
Correct output: -78                 | Program output: 31                 
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: 26                 
Correct output: -92                 | Program output: 67                 
Correct output: 7                   | Program output: 12                 
Correct output: -1                  | Program output: 8                  
Correct output: -71                 | Program output: -71                
Correct output: -27                 | Program output: -27                
Correct output: -82                 | Program output: 29                 
Correct output: -73                 | Program output: 13                 
Correct output: -88                 | Program output: 76                 
Correct output: -52                 | Program output: 88                 
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: 70                 
Correct output: -53                 | Program output: 96                 
Correct output: -64                 | Program output: -40                
Correct output: -68                 | Program output: -10                
Correct output: -65                 | Program output: 14                 
Correct output: -76                 | Program output: 12                 
Correct output: -55                 | Program output: -55                
Correct output: -87                 | Program output: 22                 
Correct output: -40                 | Program output: -39                
Correct output: -95                 | Program output: -27                
Correct output: -68                 | Program output: -66                
Correct output: -28                 | Program output: 74                 
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -2                 
Correct output: -67                 | Program output: -18                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: 57                 
Correct output: -64                 | Program output: 3                  
Correct output: -24                 | Program output: 73                 
Correct output: -35                 | Program output: -35                
Correct output: -33                 | Program output: 7                  
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: 42                 
Correct output: -43                 | Program output: -40                
Correct output: -90                 | Program output: -35                
Correct output: -89                 | Program output: -40                
Correct output: 6                   | Program output: 74                 
Correct output: -49                 | Program output: -5                 
Correct output: -91                 | Program output: 25                 
Correct output: -82                 | Program output: -82                
Correct output: -39                 | Program output: -36                
Correct output: -83                 | Program output: 90                 
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -76                
Correct output: -19                 | Program output: -11                
Correct output: -73                 | Program output: 78                 
Correct output: -87                 | Program output: -87                
Correct output: -39                 | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tagged_702} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction print_integer} {:close 0, :instruction tag_integer_807} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 1, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing})
Lexicase best program: (tagged_702 integer_pop exec_when (exec_do*while (exec_do*times (boolean_stackdepth in1 in2 in2 integer_gte boolean_and exec_while (integer_flush integer_dec print_integer)) tag_integer_807 exec_when (boolean_dup integer_sub exec_do*while (in2 print_integer boolean_dup_times integer_max print_integer exec_while ()) in2) exec_k () (exec_do*count (exec_do*times (boolean_dup_items integer_dup integer_yank exec_if (integer_swap boolean_xor in3 boolean_stackdepth integer_empty integer_add exec_if () (integer_min print_integer boolean_shove integer_dup_items boolean_swap exec_dup_times (integer_empty integer_yankdup exec_when (integer_dup_times exec_dup_items) in1 exec_s_when_autoconstructing () () ()))) ()))))))
Lexicase best errors: [1 1 0 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 75
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tagged_702} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction print_integer} {:close 0, :instruction tag_integer_807} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 1, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing})
Zero cases best program: (tagged_702 integer_pop exec_when (exec_do*while (exec_do*times (boolean_stackdepth in1 in2 in2 integer_gte boolean_and exec_while (integer_flush integer_dec print_integer)) tag_integer_807 exec_when (boolean_dup integer_sub exec_do*while (in2 print_integer boolean_dup_times integer_max print_integer exec_while ()) in2) exec_k () (exec_do*count (exec_do*times (boolean_dup_items integer_dup integer_yank exec_if (integer_swap boolean_xor in3 boolean_stackdepth integer_empty integer_add exec_if () (integer_min print_integer boolean_shove integer_dup_items boolean_swap exec_dup_times (integer_empty integer_yankdup exec_when (integer_dup_times exec_dup_items) in1 exec_s_when_autoconstructing () () ()))) ()))))))
Zero cases best errors: [1 1 0 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 75
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (373 1000 135 376 373 893 136 1000 136 1000)
Population mean number of elite cases: 5.42
Count of perfect (error zero) individuals by case: (373 0 135 376 373 893 136 0 136 0)
Population mean number of perfect (error zero) cases: 2.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tagged_702} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction print_integer} {:close 0, :instruction tag_integer_812} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 1, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap})
Best program: (tagged_702 integer_pop exec_when (exec_do*while (exec_do*times (boolean_stackdepth in1 in2 in2 integer_gte boolean_and exec_while (integer_flush integer_dec print_integer)) tag_integer_812 boolean_eq boolean_dup integer_sub exec_do*while (in2 boolean_dup boolean_dup_times integer_max print_integer exec_while ()) in2) exec_k () (exec_do*count (exec_do*times (boolean_dup_items exec_dup (exec_y (exec_do*while (integer_dup integer_yank exec_if (integer_swap boolean_xor in3 boolean_stackdepth integer_empty integer_add exec_if () (integer_min print_integer boolean_shove integer_dup_items boolean_swap)) ()))))))))
Errors: [1 1 0 1 1 0 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 49
Size: 67
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 7.578
Median total errors in population: 7
Error averages by case: (0.627 1.0 0.865 0.624 0.627 0.107 0.864 1.0 0.864 1.0)
Error minima by case: (0 1 0 0 0 0 0 1 0 1)
Average genome size in population (length): 49.178
Average program size in population (points): 67.452
Average percent parens in population: 0.262
Minimum age in population: 11.0078125
Maximum age in population: 15.36328125
Average age in population: 13.46339453125
Median age in population: 13.53125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 37
Genome diversity (% unique genomes):	 0.776
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.766
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 3224586
--- Timings ---
Current time: 1559314354004 milliseconds
Total Time:          26.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.8 seconds, 71.5%
Fitness Testing:      5.1 seconds, 19.2%
Report:               2.3 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 20                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -28                 | Program output: 62                 
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 100                
Correct output: -1                  | Program output: -1                 
Correct output: 33                  | Program output: 33                 
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 53                 
Correct output: 14                  | Program output: 77                 
Correct output: 8                   | Program output: 49                 
Correct output: 32                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 82                 
Correct output: 57                  | Program output: 57                 
Correct output: 12                  | Program output: 95                 
Correct output: 35                  | Program output: 35                 
Correct output: 60                  | Program output: 64                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 91                 
Correct output: 3                   | Program output: 80                 
Correct output: 46                  | Program output: 46                 
Correct output: 56                  | Program output: 98                 
Correct output: 29                  | Program output: 29                 
Correct output: 0                   | Program output: 53                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: -39                 | Program output: 1                  
Correct output: -44                 | Program output: 40                 
Correct output: -97                 | Program output: -44                
Correct output: -76                 | Program output: -47                
Correct output: -11                 | Program output: -11                
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: 74                 
Correct output: -97                 | Program output: -24                
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 55                 
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: 40                 
Correct output: -27                 | Program output: 21                 
Correct output: -82                 | Program output: -82                
Correct output: -73                 | Program output: 46                 
Correct output: -88                 | Program output: -9                 
Correct output: -52                 | Program output: -52                
Correct output: -79                 | Program output: -59                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -53                
Correct output: -64                 | Program output: -64                
Correct output: -68                 | Program output: -68                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: 1                  
Correct output: -55                 | Program output: -13                
Correct output: -87                 | Program output: -50                
Correct output: -40                 | Program output: 6                  
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: -55                
Correct output: -28                 | Program output: -28                
Correct output: -84                 | Program output: -80                
Correct output: -92                 | Program output: -40                
Correct output: -67                 | Program output: -27                
Correct output: -67                 | Program output: -61                
Correct output: -65                 | Program output: -47                
Correct output: -76                 | Program output: 10                 
Correct output: -87                 | Program output: -41                
Correct output: -64                 | Program output: 18                 
Correct output: -24                 | Program output: 70                 
Correct output: -35                 | Program output: 98                 
Correct output: -33                 | Program output: -33                
Correct output: -17                 | Program output: 22                 
Correct output: -91                 | Program output: 16                 
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -31                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: 83                 
Correct output: 6                   | Program output: 60                 
Correct output: -49                 | Program output: -49                
Correct output: -91                 | Program output: -8                 
Correct output: -82                 | Program output: -61                
Correct output: -39                 | Program output: 22                 
Correct output: -83                 | Program output: -4                 
Correct output: -37                 | Program output: 47                 
Correct output: -76                 | Program output: 30                 
Correct output: -19                 | Program output: 8                  
Correct output: -73                 | Program output: -6                 
Correct output: -87                 | Program output: -87                
Correct output: -39                 | Program output: -39                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop})
Lexicase best program: (in1 in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing () (boolean_rot exec_if (exec_stackdepth exec_flush print_integer boolean_pop boolean_invert_first_then_and) () in3) exec_shove (exec_k_when_autoconstructing (integer_max print_integer integer_flush print_integer integer_eq boolean_frominteger boolean_and exec_pop (integer_fromboolean exec_y (integer_add exec_y (integer_div in4 exec_while (exec_s_when_autoconstructing (integer_mult boolean_pop in3 integer_pop integer_dup_items integer_pop) () ()))))) ())))
Lexicase best errors: [0 1 1 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 55
Percent parens: 0.291
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction integer_div} {:close 0, :instruction in4} {:close 0, :instruction exec_while} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop})
Zero cases best program: (in1 in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing () (boolean_rot exec_if (exec_stackdepth exec_flush print_integer boolean_pop boolean_invert_first_then_and) () in3) exec_shove (exec_k_when_autoconstructing (integer_max print_integer integer_flush print_integer integer_eq boolean_frominteger boolean_and exec_pop (integer_fromboolean exec_y (integer_add exec_y (integer_div in4 exec_while (exec_s_when_autoconstructing (integer_mult boolean_pop in3 integer_pop integer_dup_items integer_pop) () ()))))) ())))
Zero cases best errors: [0 1 1 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 55
Percent parens: 0.291
--- Lexicase Population Statistics ---
Count of elite individuals by case: (289 1000 1000 1000 885 289 290 161 161 288)
Population mean number of elite cases: 5.36
Count of perfect (error zero) individuals by case: (289 0 0 0 885 289 290 161 161 288)
Population mean number of perfect (error zero) cases: 2.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tagged_702} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction in2} {:close 0, :instruction tag_integer_807} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 1, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_dup_times})
Best program: (tagged_702 integer_pop exec_yank exec_do*while (integer_eq boolean_stackdepth in1 in2 in2 integer_gte boolean_and exec_while (integer_flush integer_dec in2)) tag_integer_807 boolean_eq in1 integer_sub exec_do*while (exec_k_when_autoconstructing (print_integer boolean_dup_times integer_max print_integer exec_while ()) (exec_while ()) in2) exec_k () (exec_do*count (exec_do*times (boolean_dup_items exec_do*count (exec_do*times (boolean_dup_items exec_dup (exec_y (exec_do*while (integer_dup integer_yank exec_if (integer_swap boolean_xor boolean_dup boolean_stackdepth integer_empty integer_add exec_if () (integer_min print_integer boolean_shove integer_dup_items boolean_swap exec_dup_times (integer_empty integer_yankdup exec_when (integer_dup_times exec_dup_items) in1 exec_s_when_autoconstructing (boolean_yankdup exec_noop boolean_frominteger boolean_pop) (exec_dup_times ()) ()))) ())))))))))
Errors: [0 1 1 1 0 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 66
Size: 93
Percent parens: 0.290
--- Population Statistics ---
Average total errors in population: 7.637
Median total errors in population: 9
Error averages by case: (0.711 1.0 1.0 1.0 0.115 0.711 0.71 0.839 0.839 0.712)
Error minima by case: (0 1 1 1 0 0 0 0 0 0)
Average genome size in population (length): 50.309
Average program size in population (points): 69.185
Average percent parens in population: 0.264
Minimum age in population: 12.25
Maximum age in population: 16.962890625
Average age in population: 14.94019921875
Median age in population: 14.998046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 28
Genome diversity (% unique genomes):	 0.79
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.781
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 3553385
--- Timings ---
Current time: 1559314356777 milliseconds
Total Time:          29.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.0 seconds, 72.2%
Fitness Testing:      5.4 seconds, 18.5%
Report:               2.6 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 20                 
Correct output: -70                 | Program output: 99                 
Correct output: -87                 | Program output: 68                 
Correct output: -28                 | Program output: -28                
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 73                 
Correct output: -1                  | Program output: -1                 
Correct output: 33                  | Program output: 33                 
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 14                 
Correct output: 14                  | Program output: 87                 
Correct output: 8                   | Program output: 8                  
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 96                 
Correct output: 17                  | Program output: 32                 
Correct output: 13                  | Program output: 13                 
Correct output: 57                  | Program output: 71                 
Correct output: 12                  | Program output: 54                 
Correct output: 35                  | Program output: 95                 
Correct output: 60                  | Program output: 61                 
Correct output: 31                  | Program output: 59                 
Correct output: 24                  | Program output: 62                 
Correct output: 3                   | Program output: 3                  
Correct output: 46                  | Program output: 48                 
Correct output: 56                  | Program output: 81                 
Correct output: 29                  | Program output: 95                 
Correct output: 0                   | Program output: 2                  
Correct output: 17                  | Program output: 61                 
Correct output: 3                   | Program output: 59                 
Correct output: -39                 | Program output: -39                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -76                 | Program output: -76                
Correct output: -11                 | Program output: 66                 
Correct output: -95                 | Program output: -84                
Correct output: -78                 | Program output: -56                
Correct output: -97                 | Program output: 69                 
Correct output: -40                 | Program output: -8                 
Correct output: -92                 | Program output: -49                
Correct output: 7                   | Program output: 7                  
Correct output: -1                  | Program output: 9                  
Correct output: -71                 | Program output: 87                 
Correct output: -27                 | Program output: 91                 
Correct output: -82                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: 58                 
Correct output: -52                 | Program output: 41                 
Correct output: -79                 | Program output: -14                
Correct output: -71                 | Program output: 82                 
Correct output: -53                 | Program output: 43                 
Correct output: -64                 | Program output: 25                 
Correct output: -68                 | Program output: 60                 
Correct output: -65                 | Program output: 39                 
Correct output: -76                 | Program output: -76                
Correct output: -55                 | Program output: 9                  
Correct output: -87                 | Program output: -84                
Correct output: -40                 | Program output: -4                 
Correct output: -95                 | Program output: 65                 
Correct output: -68                 | Program output: 28                 
Correct output: -28                 | Program output: -7                 
Correct output: -84                 | Program output: -83                
Correct output: -92                 | Program output: -55                
Correct output: -67                 | Program output: -67                
Correct output: -67                 | Program output: 88                 
Correct output: -65                 | Program output: -16                
Correct output: -76                 | Program output: 66                 
Correct output: -87                 | Program output: -15                
Correct output: -64                 | Program output: 41                 
Correct output: -24                 | Program output: -24                
Correct output: -35                 | Program output: 66                 
Correct output: -33                 | Program output: 63                 
Correct output: -17                 | Program output: 24                 
Correct output: -91                 | Program output: -58                
Correct output: -74                 | Program output: 84                 
Correct output: -43                 | Program output: 42                 
Correct output: -90                 | Program output: 35                 
Correct output: -89                 | Program output: -89                
Correct output: 6                   | Program output: 6                  
Correct output: -49                 | Program output: 94                 
Correct output: -91                 | Program output: -66                
Correct output: -82                 | Program output: 27                 
Correct output: -39                 | Program output: 49                 
Correct output: -83                 | Program output: -58                
Correct output: -37                 | Program output: 89                 
Correct output: -76                 | Program output: 68                 
Correct output: -19                 | Program output: -19                
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: 18                 
Correct output: -39                 | Program output: -13                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tagged_702} {:close 0, :instruction tagged_508} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction print_integer} {:close 0, :instruction tag_integer_807} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 1, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_dup_times})
Lexicase best program: (tagged_702 tagged_508 exec_when (exec_do*while (exec_do*times (boolean_stackdepth integer_gte in2 in2 integer_gte boolean_and exec_while (integer_flush integer_dec print_integer)) tag_integer_807 boolean_eq boolean_dup integer_sub exec_do*while (in4 boolean_eq boolean_dup_times integer_max print_integer exec_while ()) in2) exec_k () (exec_do*count (exec_do*times (boolean_dup_items exec_dup (exec_y (exec_do*while (integer_dup integer_yank exec_s_when_autoconstructing (integer_swap boolean_xor in3 boolean_stackdepth integer_empty integer_add exec_if () (integer_min print_integer boolean_shove integer_dup_items integer_eq exec_dup_times (integer_empty integer_yankdup exec_when (integer_dup_times exec_dup_items) in1 exec_s_when_autoconstructing (boolean_not exec_noop boolean_frominteger boolean_pop) (exec_dup_times ()) ()))) () ()))))))))
Lexicase best errors: [1 0 1 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 87
Percent parens: 0.287
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tagged_702} {:close 0, :instruction tagged_508} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction print_integer} {:close 0, :instruction tag_integer_807} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 1, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_dup_times})
Zero cases best program: (tagged_702 tagged_508 exec_when (exec_do*while (exec_do*times (boolean_stackdepth integer_gte in2 in2 integer_gte boolean_and exec_while (integer_flush integer_dec print_integer)) tag_integer_807 boolean_eq boolean_dup integer_sub exec_do*while (in4 boolean_eq boolean_dup_times integer_max print_integer exec_while ()) in2) exec_k () (exec_do*count (exec_do*times (boolean_dup_items exec_dup (exec_y (exec_do*while (integer_dup integer_yank exec_s_when_autoconstructing (integer_swap boolean_xor in3 boolean_stackdepth integer_empty integer_add exec_if () (integer_min print_integer boolean_shove integer_dup_items integer_eq exec_dup_times (integer_empty integer_yankdup exec_when (integer_dup_times exec_dup_items) in1 exec_s_when_autoconstructing (boolean_not exec_noop boolean_frominteger boolean_pop) (exec_dup_times ()) ()))) () ()))))))))
Zero cases best errors: [1 0 1 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 87
Percent parens: 0.287
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 298 594 298 593 298 593 300 298 1)
Population mean number of elite cases: 4.27
Count of perfect (error zero) individuals by case: (0 298 594 298 593 298 593 300 298 1)
Population mean number of perfect (error zero) cases: 3.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tagged_702} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction print_integer} {:close 0, :instruction tag_integer_807} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 1, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_when})
Best program: (tagged_702 integer_pop exec_when (exec_do*while (exec_do*times (boolean_stackdepth in1 in2 in2 integer_gte boolean_and exec_while (integer_flush integer_dec print_integer)) tag_integer_807 boolean_eq boolean_dup integer_sub exec_do*while (in4 print_integer boolean_dup_times integer_max print_integer exec_while ()) in2) exec_k () (exec_do*count (exec_do*times (boolean_dup_items exec_dup (exec_y (exec_do*while (integer_dup integer_yank exec_if (boolean_rot boolean_xor in3 boolean_stackdepth integer_empty integer_add exec_if () (integer_min print_integer boolean_shove integer_dup_items boolean_swap boolean_yankdup integer_empty integer_yankdup) exec_when ()) ()))))))))
Errors: [1 0 1 0 1 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 53
Size: 72
Percent parens: 0.264
--- Population Statistics ---
Average total errors in population: 6.727
Median total errors in population: 7
Error averages by case: (1.0 0.702 0.406 0.702 0.407 0.702 0.407 0.7 0.702 0.999)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.63
Average program size in population (points): 57.943
Average percent parens in population: 0.253
Minimum age in population: 13.25
Maximum age in population: 18.509765625
Average age in population: 16.5572529296875
Median age in population: 16.6328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 54
Genome diversity (% unique genomes):	 0.686
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.677
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 3874486
--- Timings ---
Current time: 1559314359604 milliseconds
Total Time:          31.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.2 seconds, 72.8%
Fitness Testing:      5.7 seconds, 17.9%
Report:               2.9 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 539
Test mean error for best: 0.53900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 43                 
Correct output: -70                 | Program output: 99                 
Correct output: -87                 | Program output: -87                
Correct output: -28                 | Program output: 62                 
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 100                
Correct output: -1                  | Program output: -1                 
Correct output: 33                  | Program output: 69                 
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 42                 
Correct output: 14                  | Program output: 14                 
Correct output: 8                   | Program output: 49                 
Correct output: 32                  | Program output: 66                 
Correct output: 22                  | Program output: 83                 
Correct output: 17                  | Program output: 76                 
Correct output: 13                  | Program output: 21                 
Correct output: 57                  | Program output: 83                 
Correct output: 12                  | Program output: 12                 
Correct output: 35                  | Program output: 57                 
Correct output: 60                  | Program output: 60                 
Correct output: 31                  | Program output: 85                 
Correct output: 24                  | Program output: 53                 
Correct output: 3                   | Program output: 59                 
Correct output: 46                  | Program output: 49                 
Correct output: 56                  | Program output: 58                 
Correct output: 29                  | Program output: 82                 
Correct output: 0                   | Program output: 0                  
Correct output: 17                  | Program output: 39                 
Correct output: 3                   | Program output: 61                 
Correct output: -39                 | Program output: 81                 
Correct output: -44                 | Program output: 2                  
Correct output: -97                 | Program output: -64                
Correct output: -76                 | Program output: -13                
Correct output: -11                 | Program output: -3                 
Correct output: -95                 | Program output: -15                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -75                
Correct output: -40                 | Program output: 26                 
Correct output: -92                 | Program output: 67                 
Correct output: 7                   | Program output: 12                 
Correct output: -1                  | Program output: 8                  
Correct output: -71                 | Program output: -71                
Correct output: -27                 | Program output: -27                
Correct output: -82                 | Program output: -19                
Correct output: -73                 | Program output: 13                 
Correct output: -88                 | Program output: -88                
Correct output: -52                 | Program output: 88                 
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: -17                
Correct output: -53                 | Program output: 96                 
Correct output: -64                 | Program output: -40                
Correct output: -68                 | Program output: -10                
Correct output: -65                 | Program output: 14                 
Correct output: -76                 | Program output: 12                 
Correct output: -55                 | Program output: -55                
Correct output: -87                 | Program output: -87                
Correct output: -40                 | Program output: -40                
Correct output: -95                 | Program output: -27                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -13                
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -92                
Correct output: -67                 | Program output: -18                
Correct output: -67                 | Program output: -56                
Correct output: -65                 | Program output: -9                 
Correct output: -76                 | Program output: -28                
Correct output: -87                 | Program output: -87                
Correct output: -64                 | Program output: -64                
Correct output: -24                 | Program output: 73                 
Correct output: -35                 | Program output: -6                 
Correct output: -33                 | Program output: 7                  
Correct output: -17                 | Program output: -4                 
Correct output: -91                 | Program output: -27                
Correct output: -74                 | Program output: 42                 
Correct output: -43                 | Program output: -43                
Correct output: -90                 | Program output: -18                
Correct output: -89                 | Program output: -33                
Correct output: 6                   | Program output: 74                 
Correct output: -49                 | Program output: -22                
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -34                
Correct output: -39                 | Program output: -39                
Correct output: -83                 | Program output: -83                
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -70                
Correct output: -19                 | Program output: -11                
Correct output: -73                 | Program output: 78                 
Correct output: -87                 | Program output: -87                
Correct output: -39                 | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction tagged_346} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 2, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Lexicase best program: (in3 boolean_yankdup integer_gt tagged_346 boolean_yankdup exec_eq in2 exec_do*count (boolean_rot integer_gte boolean_and exec_while (integer_flush print_integer) boolean_pop) boolean_invert_first_then_and in3 exec_shove (print_integer boolean_dup_times exec_flush print_integer exec_while ()) in2 exec_k () (exec_do*count (exec_do*times (boolean_dup_items exec_dup (exec_y (exec_do*while (in2) exec_k () (exec_do*while (in2) exec_k () (exec_do*count (exec_do*times (print_integer) in2 exec_k (integer_dup integer_min integer_min) () integer_inc exec_while (integer_dup integer_dup_times in1 boolean_empty integer_dup_items))))))))))
Lexicase best errors: [1 0 0 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 73
Percent parens: 0.301
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction tagged_346} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 2, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Zero cases best program: (in3 boolean_yankdup integer_gt tagged_346 boolean_yankdup exec_eq in2 exec_do*count (boolean_rot integer_gte boolean_and exec_while (integer_flush print_integer) boolean_pop) boolean_invert_first_then_and in3 exec_shove (print_integer boolean_dup_times exec_flush print_integer exec_while ()) in2 exec_k () (exec_do*count (exec_do*times (boolean_dup_items exec_dup (exec_y (exec_do*while (in2) exec_k () (exec_do*while (in2) exec_k () (exec_do*count (exec_do*times (print_integer) in2 exec_k (integer_dup integer_min integer_min) () integer_inc exec_while (integer_dup integer_dup_times in1 boolean_empty integer_dup_items))))))))))
Zero cases best errors: [1 0 0 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 73
Percent parens: 0.301
--- Lexicase Population Statistics ---
Count of elite individuals by case: (495 889 102 290 496 287 100 1 1 100)
Population mean number of elite cases: 2.76
Count of perfect (error zero) individuals by case: (495 889 102 290 496 287 100 1 1 100)
Population mean number of perfect (error zero) cases: 2.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction tagged_346} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 2, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Best program: (in3 boolean_yankdup integer_gt tagged_346 boolean_yankdup exec_eq in2 exec_do*count (boolean_rot integer_gte boolean_and exec_while (integer_flush print_integer) boolean_pop) boolean_invert_first_then_and in3 exec_shove (print_integer boolean_dup_times exec_flush print_integer exec_while ()) in2 exec_k () (exec_do*count (exec_do*times (boolean_dup_items exec_dup (exec_y (exec_do*while (in2) exec_k () (exec_do*while (in2) exec_k () (exec_do*count (exec_do*times (print_integer) in2 exec_k (integer_dup integer_min integer_min) () integer_inc exec_while (integer_dup integer_dup_times in1 boolean_empty integer_dup_items))))))))))
Errors: [1 0 0 1 1 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 51
Size: 73
Percent parens: 0.301
--- Population Statistics ---
Average total errors in population: 7.239
Median total errors in population: 7
Error averages by case: (0.505 0.111 0.898 0.71 0.504 0.713 0.9 0.999 0.999 0.9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.636
Average program size in population (points): 63.574
Average percent parens in population: 0.259
Minimum age in population: 15.2578125
Maximum age in population: 19.80517578125
Average age in population: 17.97258544921875
Median age in population: 18.041259765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 58
Genome diversity (% unique genomes):	 0.766
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.753
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 4205772
--- Timings ---
Current time: 1559314361954 milliseconds
Total Time:          34.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.0 seconds, 72.9%
Fitness Testing:      6.1 seconds, 17.7%
Report:               3.1 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 20                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -28                 | Program output: 62                 
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 100                
Correct output: -1                  | Program output: -1                 
Correct output: 33                  | Program output: 33                 
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 53                 
Correct output: 14                  | Program output: 77                 
Correct output: 8                   | Program output: 49                 
Correct output: 32                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 82                 
Correct output: 57                  | Program output: 57                 
Correct output: 12                  | Program output: 95                 
Correct output: 35                  | Program output: 35                 
Correct output: 60                  | Program output: 64                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 91                 
Correct output: 3                   | Program output: 80                 
Correct output: 46                  | Program output: 46                 
Correct output: 56                  | Program output: 98                 
Correct output: 29                  | Program output: 29                 
Correct output: 0                   | Program output: 53                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: -39                 | Program output: 1                  
Correct output: -44                 | Program output: 40                 
Correct output: -97                 | Program output: -44                
Correct output: -76                 | Program output: -47                
Correct output: -11                 | Program output: -11                
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: 74                 
Correct output: -97                 | Program output: -24                
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 55                 
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: 40                 
Correct output: -27                 | Program output: 21                 
Correct output: -82                 | Program output: -82                
Correct output: -73                 | Program output: 46                 
Correct output: -88                 | Program output: -9                 
Correct output: -52                 | Program output: -52                
Correct output: -79                 | Program output: -59                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -53                
Correct output: -64                 | Program output: -64                
Correct output: -68                 | Program output: -68                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: 1                  
Correct output: -55                 | Program output: -13                
Correct output: -87                 | Program output: -50                
Correct output: -40                 | Program output: 6                  
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: -55                
Correct output: -28                 | Program output: -28                
Correct output: -84                 | Program output: -80                
Correct output: -92                 | Program output: -40                
Correct output: -67                 | Program output: -27                
Correct output: -67                 | Program output: -61                
Correct output: -65                 | Program output: -47                
Correct output: -76                 | Program output: 10                 
Correct output: -87                 | Program output: -41                
Correct output: -64                 | Program output: 18                 
Correct output: -24                 | Program output: 70                 
Correct output: -35                 | Program output: 98                 
Correct output: -33                 | Program output: -33                
Correct output: -17                 | Program output: 22                 
Correct output: -91                 | Program output: 16                 
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -31                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: 83                 
Correct output: 6                   | Program output: 60                 
Correct output: -49                 | Program output: -49                
Correct output: -91                 | Program output: -8                 
Correct output: -82                 | Program output: -61                
Correct output: -39                 | Program output: 22                 
Correct output: -83                 | Program output: -4                 
Correct output: -37                 | Program output: 47                 
Correct output: -76                 | Program output: 30                 
Correct output: -19                 | Program output: 8                  
Correct output: -73                 | Program output: -6                 
Correct output: -87                 | Program output: -87                
Correct output: -39                 | Program output: -39                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 1, :instruction print_integer} {:close 0, :instruction tag_integer_807} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 2, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 2, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Lexicase best program: (integer_pop exec_when (exec_do*while (exec_do*times (boolean_stackdepth in1 in2 in4 integer_gte boolean_and exec_while (integer_flush integer_dec print_integer) tag_integer_807 boolean_eq boolean_dup integer_sub exec_do*while (in4 print_integer boolean_dup_times integer_max print_integer exec_while ()) in2) exec_k () (exec_do*count (exec_do*times (integer_fromboolean exec_y (integer_add in2) in2) exec_k () (exec_do*count (exec_do*times (print_integer) in2 exec_k (integer_dup integer_min integer_min) () exec_dup (integer_dup in4 integer_gte integer_gt integer_lte) boolean_rot boolean_yankdup exec_do*times (print_integer) in2 exec_k (integer_dup integer_min integer_min) () integer_inc exec_while (integer_dup integer_dup_times in1 boolean_empty integer_dup_items))))))))
Lexicase best errors: [0 1 0 0 0 1 1 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 88
Percent parens: 0.261
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 1, :instruction print_integer} {:close 0, :instruction tag_integer_807} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 1, :instruction in2} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 2, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 2, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Zero cases best program: (integer_pop exec_when (exec_do*while (exec_do*times (boolean_stackdepth in1 in2 in4 integer_gte boolean_and exec_while (integer_flush integer_dec print_integer) tag_integer_807 boolean_eq boolean_dup integer_sub exec_do*while (in4 print_integer boolean_dup_times integer_max print_integer exec_while ()) in2) exec_k () (exec_do*count (exec_do*times (integer_fromboolean exec_y (integer_add in2) in2) exec_k () (exec_do*count (exec_do*times (print_integer) in2 exec_k (integer_dup integer_min integer_min) () exec_dup (integer_dup in4 integer_gte integer_gt integer_lte) boolean_rot boolean_yankdup exec_do*times (print_integer) in2 exec_k (integer_dup integer_min integer_min) () integer_inc exec_while (integer_dup integer_dup_times in1 boolean_empty integer_dup_items))))))))
Zero cases best errors: [0 1 0 0 0 1 1 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 88
Percent parens: 0.261
--- Lexicase Population Statistics ---
Count of elite individuals by case: (265 193 265 265 265 196 192 1 196 429)
Population mean number of elite cases: 2.27
Count of perfect (error zero) individuals by case: (265 193 265 265 265 196 192 1 196 429)
Population mean number of perfect (error zero) cases: 2.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 1, :instruction integer_gt} {:close 0, :instruction tagged_346} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 2, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction print_integer})
Best program: (integer_empty in3 integer_gt tagged_346 boolean_yankdup exec_eq in2 exec_do*count (boolean_rot boolean_not) exec_do*while (integer_mod exec_yank integer_dec) integer_mod boolean_not in1 print_integer)
Errors: [1 0 1 1 1 0 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 18
Size: 21
Percent parens: 0.143
--- Population Statistics ---
Average total errors in population: 7.733
Median total errors in population: 9
Error averages by case: (0.735 0.807 0.735 0.735 0.735 0.804 0.808 0.999 0.804 0.571)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.49
Average program size in population (points): 78.742
Average percent parens in population: 0.288
Minimum age in population: 16.2578125
Maximum age in population: 21.26708984375
Average age in population: 19.79299243164062
Median age in population: 19.72900390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 197
Genome diversity (% unique genomes):	 0.663
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 200
Syntactic diversity (% unique Push programs):	 0.654
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 4471590
--- Timings ---
Current time: 1559314364333 milliseconds
Total Time:          36.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        26.8 seconds, 73.3%
Fitness Testing:      6.4 seconds, 17.4%
Report:               3.3 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 20                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -28                 | Program output: 62                 
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 100                
Correct output: -1                  | Program output: -1                 
Correct output: 33                  | Program output: 33                 
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 53                 
Correct output: 14                  | Program output: 77                 
Correct output: 8                   | Program output: 49                 
Correct output: 32                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 82                 
Correct output: 57                  | Program output: 57                 
Correct output: 12                  | Program output: 95                 
Correct output: 35                  | Program output: 35                 
Correct output: 60                  | Program output: 64                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 91                 
Correct output: 3                   | Program output: 80                 
Correct output: 46                  | Program output: 46                 
Correct output: 56                  | Program output: 98                 
Correct output: 29                  | Program output: 29                 
Correct output: 0                   | Program output: 53                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: -39                 | Program output: 1                  
Correct output: -44                 | Program output: 40                 
Correct output: -97                 | Program output: -44                
Correct output: -76                 | Program output: -47                
Correct output: -11                 | Program output: -11                
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: 74                 
Correct output: -97                 | Program output: -24                
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 55                 
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: 40                 
Correct output: -27                 | Program output: 21                 
Correct output: -82                 | Program output: -82                
Correct output: -73                 | Program output: 46                 
Correct output: -88                 | Program output: -9                 
Correct output: -52                 | Program output: -52                
Correct output: -79                 | Program output: -59                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -53                
Correct output: -64                 | Program output: -64                
Correct output: -68                 | Program output: -68                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: 1                  
Correct output: -55                 | Program output: -13                
Correct output: -87                 | Program output: -50                
Correct output: -40                 | Program output: 6                  
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: -55                
Correct output: -28                 | Program output: -28                
Correct output: -84                 | Program output: -80                
Correct output: -92                 | Program output: -40                
Correct output: -67                 | Program output: -27                
Correct output: -67                 | Program output: -61                
Correct output: -65                 | Program output: -47                
Correct output: -76                 | Program output: 10                 
Correct output: -87                 | Program output: -41                
Correct output: -64                 | Program output: 18                 
Correct output: -24                 | Program output: 70                 
Correct output: -35                 | Program output: 98                 
Correct output: -33                 | Program output: -33                
Correct output: -17                 | Program output: 22                 
Correct output: -91                 | Program output: 16                 
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -31                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: 83                 
Correct output: 6                   | Program output: 60                 
Correct output: -49                 | Program output: -49                
Correct output: -91                 | Program output: -8                 
Correct output: -82                 | Program output: -61                
Correct output: -39                 | Program output: 22                 
Correct output: -83                 | Program output: -4                 
Correct output: -37                 | Program output: 47                 
Correct output: -76                 | Program output: 30                 
Correct output: -19                 | Program output: 8                  
Correct output: -73                 | Program output: -6                 
Correct output: -87                 | Program output: -87                
Correct output: -39                 | Program output: -39                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_gt} {:close 0, :instruction tagged_346} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 3, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction 50} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction tag_exec_87} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k})
Lexicase best program: (integer_gt tagged_346 in4 exec_eq in2 exec_do*count (boolean_rot boolean_not) exec_do*while (integer_mod exec_yank integer_dec integer_mod boolean_not in1) print_integer integer_dup boolean_dup integer_dec boolean_and boolean_xor exec_shove (boolean_swap exec_pop (print_integer exec_pop (in2) exec_k () (exec_do*count (exec_do*times (integer_fromboolean exec_y (integer_add in2) exec_k () (exec_do*count (exec_do*times (boolean_dup_items exec_dup (integer_dup in4 integer_gte integer_gt integer_lte) boolean_rot boolean_yankdup exec_yankdup integer_div boolean_xor boolean_swap exec_s_when_autoconstructing (integer_mult boolean_pop in3 integer_pop integer_dup_items integer_pop boolean_stackdepth boolean_rot integer_swap) (boolean_swap) (in4 boolean_flush exec_pop () exec_do*range (boolean_yankdup boolean_shove) exec_k (print_integer exec_shove (boolean_dup exec_yank exec_s (exec_s_when_autoconstructing (50 integer_min exec_dup (tag_exec_87 (boolean_empty boolean_xor exec_yankdup exec_yankdup integer_yank exec_k () ()))) () ()) () ())) ()))))))))))
Lexicase best errors: [1 0 0 1 1 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 118
Percent parens: 0.288
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_gt} {:close 0, :instruction tagged_346} {:close 0, :instruction in4} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 3, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction in4} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_lte} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction integer_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction 50} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction tag_exec_87} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_k})
Zero cases best program: (integer_gt tagged_346 in4 exec_eq in2 exec_do*count (boolean_rot boolean_not) exec_do*while (integer_mod exec_yank integer_dec integer_mod boolean_not in1) print_integer integer_dup boolean_dup integer_dec boolean_and boolean_xor exec_shove (boolean_swap exec_pop (print_integer exec_pop (in2) exec_k () (exec_do*count (exec_do*times (integer_fromboolean exec_y (integer_add in2) exec_k () (exec_do*count (exec_do*times (boolean_dup_items exec_dup (integer_dup in4 integer_gte integer_gt integer_lte) boolean_rot boolean_yankdup exec_yankdup integer_div boolean_xor boolean_swap exec_s_when_autoconstructing (integer_mult boolean_pop in3 integer_pop integer_dup_items integer_pop boolean_stackdepth boolean_rot integer_swap) (boolean_swap) (in4 boolean_flush exec_pop () exec_do*range (boolean_yankdup boolean_shove) exec_k (print_integer exec_shove (boolean_dup exec_yank exec_s (exec_s_when_autoconstructing (50 integer_min exec_dup (tag_exec_87 (boolean_empty boolean_xor exec_yankdup exec_yankdup integer_yank exec_k () ()))) () ()) () ())) ()))))))))))
Zero cases best errors: [1 0 0 1 1 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 118
Percent parens: 0.288
--- Lexicase Population Statistics ---
Count of elite individuals by case: (331 321 321 335 332 234 123 321 321 775)
Population mean number of elite cases: 3.41
Count of perfect (error zero) individuals by case: (331 321 321 335 332 234 123 321 321 775)
Population mean number of perfect (error zero) cases: 3.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction tagged_346} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_swap})
Best program: (integer_gt tagged_346 boolean_yankdup exec_eq in2 exec_do*count (boolean_rot boolean_not) integer_fromboolean integer_mod exec_yank integer_dec integer_mod boolean_not in1 print_integer integer_dup boolean_dup integer_sub boolean_and boolean_xor exec_shove (boolean_swap))
Errors: [1 0 0 1 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 23
Size: 26
Percent parens: 0.115
--- Population Statistics ---
Average total errors in population: 6.586
Median total errors in population: 6
Error averages by case: (0.669 0.679 0.679 0.665 0.668 0.766 0.877 0.679 0.679 0.225)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.492
Average program size in population (points): 75.78
Average percent parens in population: 0.284
Minimum age in population: 17.2578125
Maximum age in population: 22.90478515625
Average age in population: 21.2130693359375
Median age in population: 21.25048828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 73
Genome diversity (% unique genomes):	 0.705
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 73
Syntactic diversity (% unique Push programs):	 0.698
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 4749980
--- Timings ---
Current time: 1559314366949 milliseconds
Total Time:          39.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        28.9 seconds, 73.7%
Fitness Testing:      6.7 seconds, 17.0%
Report:               3.6 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 20                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -28                 | Program output: 62                 
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 100                
Correct output: -1                  | Program output: -1                 
Correct output: 33                  | Program output: 33                 
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 53                 
Correct output: 14                  | Program output: 77                 
Correct output: 8                   | Program output: 49                 
Correct output: 32                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 82                 
Correct output: 57                  | Program output: 57                 
Correct output: 12                  | Program output: 95                 
Correct output: 35                  | Program output: 35                 
Correct output: 60                  | Program output: 64                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 91                 
Correct output: 3                   | Program output: 80                 
Correct output: 46                  | Program output: 46                 
Correct output: 56                  | Program output: 98                 
Correct output: 29                  | Program output: 29                 
Correct output: 0                   | Program output: 53                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: -39                 | Program output: 1                  
Correct output: -44                 | Program output: 40                 
Correct output: -97                 | Program output: -44                
Correct output: -76                 | Program output: -47                
Correct output: -11                 | Program output: -11                
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: 74                 
Correct output: -97                 | Program output: -24                
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 55                 
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: 40                 
Correct output: -27                 | Program output: 21                 
Correct output: -82                 | Program output: -82                
Correct output: -73                 | Program output: 46                 
Correct output: -88                 | Program output: -9                 
Correct output: -52                 | Program output: -52                
Correct output: -79                 | Program output: -59                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -53                
Correct output: -64                 | Program output: -64                
Correct output: -68                 | Program output: -68                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: 1                  
Correct output: -55                 | Program output: -13                
Correct output: -87                 | Program output: -50                
Correct output: -40                 | Program output: 6                  
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: -55                
Correct output: -28                 | Program output: -28                
Correct output: -84                 | Program output: -80                
Correct output: -92                 | Program output: -40                
Correct output: -67                 | Program output: -27                
Correct output: -67                 | Program output: -61                
Correct output: -65                 | Program output: -47                
Correct output: -76                 | Program output: 10                 
Correct output: -87                 | Program output: -41                
Correct output: -64                 | Program output: 18                 
Correct output: -24                 | Program output: 70                 
Correct output: -35                 | Program output: 98                 
Correct output: -33                 | Program output: -33                
Correct output: -17                 | Program output: 22                 
Correct output: -91                 | Program output: 16                 
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -31                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: 83                 
Correct output: 6                   | Program output: 60                 
Correct output: -49                 | Program output: -49                
Correct output: -91                 | Program output: -8                 
Correct output: -82                 | Program output: -61                
Correct output: -39                 | Program output: 22                 
Correct output: -83                 | Program output: -4                 
Correct output: -37                 | Program output: 47                 
Correct output: -76                 | Program output: 30                 
Correct output: -19                 | Program output: 8                  
Correct output: -73                 | Program output: -6                 
Correct output: -87                 | Program output: -87                
Correct output: -39                 | Program output: -39                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div})
Lexicase best program: (in1 exec_dup (integer_fromboolean boolean_shove print_integer integer_dup) integer_sub boolean_eq exec_dup (integer_empty exec_pop () boolean_xor integer_div))
Lexicase best errors: [0 1 1 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 17
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div})
Zero cases best program: (in1 exec_dup (integer_fromboolean boolean_shove print_integer integer_dup) integer_sub boolean_eq exec_dup (integer_empty exec_pop () boolean_xor integer_div))
Zero cases best errors: [0 1 1 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 17
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (629 185 1 438 893 138 277 438 910 434)
Population mean number of elite cases: 4.34
Count of perfect (error zero) individuals by case: (629 185 1 438 893 138 277 438 910 434)
Population mean number of perfect (error zero) cases: 4.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tagged_702} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dec} {:close 2, :instruction in2} {:close 0, :instruction tag_integer_807} {:close 0, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tagged_588} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 1, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_when})
Best program: (tagged_702 integer_pop exec_yank exec_do*while (integer_eq boolean_stackdepth in1 in2 in2 integer_gte boolean_and exec_while (integer_flush integer_dec in2)) tag_integer_807 boolean_eq in1 integer_sub exec_do*while (exec_k_when_autoconstructing (print_integer boolean_dup_times integer_max print_integer exec_while ()) (exec_while ()) in2) exec_k () (exec_do*count (exec_do*times (boolean_dup_items tagged_588 exec_do*times (boolean_dup_items exec_dup (exec_y (exec_do*while (integer_dup boolean_or exec_if (integer_swap boolean_xor boolean_dup boolean_stackdepth integer_empty integer_add exec_if () (integer_min print_integer boolean_shove integer_dup_items boolean_swap exec_dup_times (integer_empty integer_yankdup exec_when ()))) ()))))))))
Errors: [0 1 1 0 0 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 57
Size: 79
Percent parens: 0.278
--- Population Statistics ---
Average total errors in population: 5.657
Median total errors in population: 5
Error averages by case: (0.371 0.815 0.999 0.562 0.107 0.862 0.723 0.562 0.09 0.566)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.523
Average program size in population (points): 69.26
Average percent parens in population: 0.273
Minimum age in population: 19.1484375
Maximum age in population: 24.53961181640625
Average age in population: 22.64335809326172
Median age in population: 22.69390869140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 38
Genome diversity (% unique genomes):	 0.773
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.762
Total error diversity:				 0.007
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.072
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 5036221
--- Timings ---
Current time: 1559314369447 milliseconds
Total Time:          41.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.8 seconds, 73.9%
Fitness Testing:      7.0 seconds, 16.7%
Report:               3.8 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 20                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -28                 | Program output: 62                 
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 100                
Correct output: -1                  | Program output: -1                 
Correct output: 33                  | Program output: 33                 
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 53                 
Correct output: 14                  | Program output: 77                 
Correct output: 8                   | Program output: 49                 
Correct output: 32                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 82                 
Correct output: 57                  | Program output: 57                 
Correct output: 12                  | Program output: 95                 
Correct output: 35                  | Program output: 35                 
Correct output: 60                  | Program output: 64                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 91                 
Correct output: 3                   | Program output: 80                 
Correct output: 46                  | Program output: 46                 
Correct output: 56                  | Program output: 98                 
Correct output: 29                  | Program output: 29                 
Correct output: 0                   | Program output: 53                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: -39                 | Program output: 1                  
Correct output: -44                 | Program output: 40                 
Correct output: -97                 | Program output: -44                
Correct output: -76                 | Program output: -47                
Correct output: -11                 | Program output: -11                
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: 74                 
Correct output: -97                 | Program output: -24                
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 55                 
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: 40                 
Correct output: -27                 | Program output: 21                 
Correct output: -82                 | Program output: -82                
Correct output: -73                 | Program output: 46                 
Correct output: -88                 | Program output: -9                 
Correct output: -52                 | Program output: -52                
Correct output: -79                 | Program output: -59                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -53                
Correct output: -64                 | Program output: -64                
Correct output: -68                 | Program output: -68                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: 1                  
Correct output: -55                 | Program output: -13                
Correct output: -87                 | Program output: -50                
Correct output: -40                 | Program output: 6                  
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: -55                
Correct output: -28                 | Program output: -28                
Correct output: -84                 | Program output: -80                
Correct output: -92                 | Program output: -40                
Correct output: -67                 | Program output: -27                
Correct output: -67                 | Program output: -61                
Correct output: -65                 | Program output: -47                
Correct output: -76                 | Program output: 10                 
Correct output: -87                 | Program output: -41                
Correct output: -64                 | Program output: 18                 
Correct output: -24                 | Program output: 70                 
Correct output: -35                 | Program output: 98                 
Correct output: -33                 | Program output: -33                
Correct output: -17                 | Program output: 22                 
Correct output: -91                 | Program output: 16                 
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -31                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: 83                 
Correct output: 6                   | Program output: 60                 
Correct output: -49                 | Program output: -49                
Correct output: -91                 | Program output: -8                 
Correct output: -82                 | Program output: -61                
Correct output: -39                 | Program output: 22                 
Correct output: -83                 | Program output: -4                 
Correct output: -37                 | Program output: 47                 
Correct output: -76                 | Program output: 30                 
Correct output: -19                 | Program output: 8                  
Correct output: -73                 | Program output: -6                 
Correct output: -87                 | Program output: -87                
Correct output: -39                 | Program output: -39                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup})
Lexicase best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing () (boolean_rot exec_if (exec_stackdepth exec_flush print_integer) (boolean_pop) boolean_invert_first_then_and) in3) exec_shove (exec_k_when_autoconstructing (integer_max print_integer integer_flush print_integer integer_eq) (boolean_frominteger boolean_and exec_pop (integer_fromboolean integer_sub exec_do*while (in4 print_integer boolean_dup_times integer_max print_integer exec_while ()) in2) exec_k () (exec_do*count (exec_do*times (boolean_eq exec_dup (exec_y (integer_dup))))))))
Lexicase best errors: [1 1 0 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 59
Percent parens: 0.305
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_dup})
Zero cases best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing () (boolean_rot exec_if (exec_stackdepth exec_flush print_integer) (boolean_pop) boolean_invert_first_then_and) in3) exec_shove (exec_k_when_autoconstructing (integer_max print_integer integer_flush print_integer integer_eq) (boolean_frominteger boolean_and exec_pop (integer_fromboolean integer_sub exec_do*while (in4 print_integer boolean_dup_times integer_max print_integer exec_while ()) in2) exec_k () (exec_do*count (exec_do*times (boolean_eq exec_dup (exec_y (integer_dup))))))))
Zero cases best errors: [1 1 0 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 59
Percent parens: 0.305
--- Lexicase Population Statistics ---
Count of elite individuals by case: (205 152 310 206 311 308 147 208 127 312)
Population mean number of elite cases: 2.29
Count of perfect (error zero) individuals by case: (205 152 310 206 311 308 147 208 127 312)
Population mean number of perfect (error zero) cases: 2.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction tagged_346} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 1, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction in3})
Best program: (in3 boolean_yankdup integer_gt tagged_346 boolean_yankdup exec_eq in2 exec_do*count (boolean_rot integer_gte boolean_and exec_while (integer_flush print_integer) boolean_pop) boolean_invert_first_then_and in1 print_integer integer_dup boolean_dup boolean_dup_times boolean_and boolean_xor exec_shove (boolean_swap exec_pop (print_integer) exec_pop (integer_fromboolean exec_eq) boolean_shove integer_gt exec_k () (exec_do*count (exec_do*times (boolean_dup_items exec_dup (exec_y (exec_do*while (integer_dup integer_yank exec_if (boolean_empty boolean_xor in3) ()))))))))
Errors: [1 1 0 1 0 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 45
Size: 60
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.714
Median total errors in population: 7
Error averages by case: (0.795 0.848 0.69 0.794 0.689 0.692 0.853 0.792 0.873 0.688)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.604
Average program size in population (points): 61.663
Average percent parens in population: 0.263
Minimum age in population: 21.498291015625
Maximum age in population: 26.2789306640625
Average age in population: 24.56053805541992
Median age in population: 24.71000671386719
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 91
Genome diversity (% unique genomes):	 0.711
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.697
Total error diversity:				 0.005
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 5374057
--- Timings ---
Current time: 1559314371840 milliseconds
Total Time:          44.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.7 seconds, 74.0%
Fitness Testing:      7.3 seconds, 16.5%
Report:               4.1 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 20                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -28                 | Program output: 62                 
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 100                
Correct output: -1                  | Program output: -1                 
Correct output: 33                  | Program output: 33                 
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 53                 
Correct output: 14                  | Program output: 77                 
Correct output: 8                   | Program output: 49                 
Correct output: 32                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 82                 
Correct output: 57                  | Program output: 57                 
Correct output: 12                  | Program output: 95                 
Correct output: 35                  | Program output: 35                 
Correct output: 60                  | Program output: 64                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 91                 
Correct output: 3                   | Program output: 80                 
Correct output: 46                  | Program output: 46                 
Correct output: 56                  | Program output: 98                 
Correct output: 29                  | Program output: 29                 
Correct output: 0                   | Program output: 53                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: -39                 | Program output: 1                  
Correct output: -44                 | Program output: 40                 
Correct output: -97                 | Program output: -44                
Correct output: -76                 | Program output: -47                
Correct output: -11                 | Program output: -11                
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: 74                 
Correct output: -97                 | Program output: -24                
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 55                 
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: 40                 
Correct output: -27                 | Program output: 21                 
Correct output: -82                 | Program output: -82                
Correct output: -73                 | Program output: 46                 
Correct output: -88                 | Program output: -9                 
Correct output: -52                 | Program output: -52                
Correct output: -79                 | Program output: -59                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -53                
Correct output: -64                 | Program output: -64                
Correct output: -68                 | Program output: -68                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: 1                  
Correct output: -55                 | Program output: -13                
Correct output: -87                 | Program output: -50                
Correct output: -40                 | Program output: 6                  
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: -55                
Correct output: -28                 | Program output: -28                
Correct output: -84                 | Program output: -80                
Correct output: -92                 | Program output: -40                
Correct output: -67                 | Program output: -27                
Correct output: -67                 | Program output: -61                
Correct output: -65                 | Program output: -47                
Correct output: -76                 | Program output: 10                 
Correct output: -87                 | Program output: -41                
Correct output: -64                 | Program output: 18                 
Correct output: -24                 | Program output: 70                 
Correct output: -35                 | Program output: 98                 
Correct output: -33                 | Program output: -33                
Correct output: -17                 | Program output: 22                 
Correct output: -91                 | Program output: 16                 
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -31                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: 83                 
Correct output: 6                   | Program output: 60                 
Correct output: -49                 | Program output: -49                
Correct output: -91                 | Program output: -8                 
Correct output: -82                 | Program output: -61                
Correct output: -39                 | Program output: 22                 
Correct output: -83                 | Program output: -4                 
Correct output: -37                 | Program output: 47                 
Correct output: -76                 | Program output: 30                 
Correct output: -19                 | Program output: 8                  
Correct output: -73                 | Program output: -6                 
Correct output: -87                 | Program output: -87                
Correct output: -39                 | Program output: -39                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tagged_702} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_gt} {:close 0, :instruction tagged_346} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dec} {:close 2, :instruction print_integer} {:close 0, :instruction tag_integer_807} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap})
Lexicase best program: (tagged_702 integer_pop exec_when (integer_gt) tagged_346 boolean_yankdup exec_eq boolean_stackdepth in1 in2 in2 integer_gte boolean_and exec_while (integer_flush integer_dec) print_integer tag_integer_807 boolean_eq in1 integer_sub exec_do*while (exec_k_when_autoconstructing (print_integer boolean_dup_times exec_when (print_integer boolean_and boolean_xor exec_shove (boolean_swap))) ()))
Lexicase best errors: [1 0 1 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 39
Percent parens: 0.205
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tagged_702} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 1, :instruction integer_gt} {:close 0, :instruction tagged_346} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_dec} {:close 2, :instruction print_integer} {:close 0, :instruction tag_integer_807} {:close 0, :instruction boolean_eq} {:close 1, :instruction in1} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap})
Zero cases best program: (tagged_702 integer_pop exec_when (integer_gt) tagged_346 boolean_yankdup exec_eq boolean_stackdepth in1 in2 in2 integer_gte boolean_and exec_while (integer_flush integer_dec) print_integer tag_integer_807 boolean_eq in1 integer_sub exec_do*while (exec_k_when_autoconstructing (print_integer boolean_dup_times exec_when (print_integer boolean_and boolean_xor exec_shove (boolean_swap))) ()))
Zero cases best errors: [1 0 1 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 39
Percent parens: 0.205
--- Lexicase Population Statistics ---
Count of elite individuals by case: (12 495 447 355 447 581 914 916 366 365)
Population mean number of elite cases: 4.90
Count of perfect (error zero) individuals by case: (12 495 447 355 447 581 914 916 366 365)
Population mean number of perfect (error zero) cases: 4.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction tagged_702} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 2, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_swap})
Best program: (in3 integer_eq boolean_invert_first_then_and integer_swap boolean_dup_times integer_dec boolean_and tagged_702 integer_pop integer_rot exec_do*while (exec_do*times (boolean_stackdepth exec_do*count () boolean_rot boolean_not)) exec_do*while (integer_mod) exec_yank integer_dec integer_mod boolean_not in1 print_integer integer_dup boolean_dup integer_sub boolean_and boolean_xor exec_shove (boolean_swap))
Errors: [1 0 1 0 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 31
Size: 37
Percent parens: 0.162
--- Population Statistics ---
Average total errors in population: 5.102
Median total errors in population: 6
Error averages by case: (0.988 0.505 0.553 0.645 0.553 0.419 0.086 0.084 0.634 0.635)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.507
Average program size in population (points): 63.98
Average percent parens in population: 0.277
Minimum age in population: 22.498291015625
Maximum age in population: 27.77470397949219
Average age in population: 26.01057521057129
Median age in population: 26.12539672851562
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 30
Genome diversity (% unique genomes):	 0.711
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.696
Total error diversity:				 0.007
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 5622351
--- Timings ---
Current time: 1559314374219 milliseconds
Total Time:          46.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.5 seconds, 74.2%
Fitness Testing:      7.6 seconds, 16.3%
Report:               4.3 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -63                 | Program output: -63                
Correct output: 20                  | Program output: 43                 
Correct output: -70                 | Program output: 99                 
Correct output: -87                 | Program output: -87                
Correct output: -28                 | Program output: 62                 
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 100                
Correct output: -1                  | Program output: 76                 
Correct output: 33                  | Program output: 69                 
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 42                 
Correct output: 14                  | Program output: 14                 
Correct output: 8                   | Program output: 49                 
Correct output: 32                  | Program output: 66                 
Correct output: 22                  | Program output: 83                 
Correct output: 17                  | Program output: 76                 
Correct output: 13                  | Program output: 21                 
Correct output: 57                  | Program output: 83                 
Correct output: 12                  | Program output: 12                 
Correct output: 35                  | Program output: 57                 
Correct output: 60                  | Program output: 60                 
Correct output: 31                  | Program output: 85                 
Correct output: 24                  | Program output: 53                 
Correct output: 3                   | Program output: 59                 
Correct output: 46                  | Program output: 49                 
Correct output: 56                  | Program output: 58                 
Correct output: 29                  | Program output: 82                 
Correct output: 0                   | Program output: 0                  
Correct output: 17                  | Program output: 39                 
Correct output: 3                   | Program output: 61                 
Correct output: -39                 | Program output: 81                 
Correct output: -44                 | Program output: 2                  
Correct output: -97                 | Program output: -12                
Correct output: -76                 | Program output: 11                 
Correct output: -11                 | Program output: 74                 
Correct output: -95                 | Program output: 91                 
Correct output: -78                 | Program output: 31                 
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: 26                 
Correct output: -92                 | Program output: 67                 
Correct output: 7                   | Program output: 12                 
Correct output: -1                  | Program output: 8                  
Correct output: -71                 | Program output: -71                
Correct output: -27                 | Program output: -27                
Correct output: -82                 | Program output: 29                 
Correct output: -73                 | Program output: 13                 
Correct output: -88                 | Program output: 76                 
Correct output: -52                 | Program output: 88                 
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: 70                 
Correct output: -53                 | Program output: 96                 
Correct output: -64                 | Program output: -40                
Correct output: -68                 | Program output: -10                
Correct output: -65                 | Program output: 14                 
Correct output: -76                 | Program output: 12                 
Correct output: -55                 | Program output: -55                
Correct output: -87                 | Program output: 22                 
Correct output: -40                 | Program output: -39                
Correct output: -95                 | Program output: -27                
Correct output: -68                 | Program output: -66                
Correct output: -28                 | Program output: 74                 
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -2                 
Correct output: -67                 | Program output: -18                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: 57                 
Correct output: -64                 | Program output: 3                  
Correct output: -24                 | Program output: 73                 
Correct output: -35                 | Program output: -35                
Correct output: -33                 | Program output: 7                  
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: 42                 
Correct output: -43                 | Program output: -40                
Correct output: -90                 | Program output: -35                
Correct output: -89                 | Program output: -40                
Correct output: 6                   | Program output: 74                 
Correct output: -49                 | Program output: -5                 
Correct output: -91                 | Program output: 25                 
Correct output: -82                 | Program output: -82                
Correct output: -39                 | Program output: -36                
Correct output: -83                 | Program output: 90                 
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -76                
Correct output: -19                 | Program output: -11                
Correct output: -73                 | Program output: 78                 
Correct output: -87                 | Program output: -87                
Correct output: -39                 | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction tagged_346} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction boolean_pop} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 2, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Lexicase best program: (in3 boolean_yankdup integer_gt tagged_346 boolean_yankdup exec_eq in2 exec_do*count (boolean_rot exec_k_when_autoconstructing (boolean_and exec_while (integer_flush exec_if () (boolean_pop) in2) in3) (boolean_pop) in2) in3 exec_shove (print_integer boolean_dup_times exec_flush print_integer exec_while ()) in2 exec_k () (exec_do*count (exec_do*times (boolean_dup_items exec_dup (integer_rot exec_do*while (in2) exec_k () (exec_do*while (in2) exec_k () (exec_do*count (exec_do*times (print_integer) in2 exec_k (integer_dup integer_min integer_min) () integer_inc exec_while (integer_dup exec_stackdepth in1 boolean_empty integer_dup_items)))))))))
Lexicase best errors: [0 1 1 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 79
Percent parens: 0.316
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction tagged_346} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction boolean_pop} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 2, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Zero cases best program: (in3 boolean_yankdup integer_gt tagged_346 boolean_yankdup exec_eq in2 exec_do*count (boolean_rot exec_k_when_autoconstructing (boolean_and exec_while (integer_flush exec_if () (boolean_pop) in2) in3) (boolean_pop) in2) in3 exec_shove (print_integer boolean_dup_times exec_flush print_integer exec_while ()) in2 exec_k () (exec_do*count (exec_do*times (boolean_dup_items exec_dup (integer_rot exec_do*while (in2) exec_k () (exec_do*while (in2) exec_k () (exec_do*count (exec_do*times (print_integer) in2 exec_k (integer_dup integer_min integer_min) () integer_inc exec_while (integer_dup exec_stackdepth in1 boolean_empty integer_dup_items)))))))))
Zero cases best errors: [0 1 1 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 79
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (546 1000 1000 109 903 435 109 436 1000 109)
Population mean number of elite cases: 5.65
Count of perfect (error zero) individuals by case: (546 0 0 109 903 435 109 436 0 109)
Population mean number of perfect (error zero) cases: 2.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction tagged_346} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 1, :instruction in2} {:close 1, :instruction exec_when} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 2, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Best program: (in3 boolean_yankdup integer_gt tagged_346 boolean_yankdup exec_eq in2 exec_do*count (boolean_rot integer_gte boolean_and exec_while (integer_flush print_integer) boolean_pop) in2 exec_when () exec_y_when_autoconstructing (print_integer boolean_dup_times exec_flush print_integer exec_while ()) integer_dup_items exec_k () (exec_do*count (exec_do*times (boolean_dup_items exec_dup (integer_rot exec_do*while (in2) exec_k () (exec_do*while (in2) exec_do*while () exec_do*count (exec_do*times (print_integer) in2 exec_k (integer_dup integer_min integer_min) () integer_inc exec_while (integer_dup exec_do*while (in1 boolean_empty integer_dup_items)))))))))
Errors: [0 1 1 0 0 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 51
Size: 73
Percent parens: 0.301
--- Population Statistics ---
Average total errors in population: 7.353
Median total errors in population: 6
Error averages by case: (0.454 1.0 1.0 0.891 0.097 0.565 0.891 0.564 1.0 0.891)
Error minima by case: (0 1 1 0 0 0 0 0 1 0)
Average genome size in population (length): 43.228
Average program size in population (points): 59.945
Average percent parens in population: 0.267
Minimum age in population: 23.498291015625
Maximum age in population: 29.38333892822266
Average age in population: 27.61834976959229
Median age in population: 27.70988464355469
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 27
Genome diversity (% unique genomes):	 0.712
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.701
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 5867406
--- Timings ---
Current time: 1559314376515 milliseconds
Total Time:          48.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.4 seconds, 74.4%
Fitness Testing:      7.8 seconds, 16.0%
Report:               4.6 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -63                 | Program output: -63                
Correct output: 20                  | Program output: 43                 
Correct output: -70                 | Program output: 99                 
Correct output: -87                 | Program output: -87                
Correct output: -28                 | Program output: 62                 
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 100                
Correct output: -1                  | Program output: 76                 
Correct output: 33                  | Program output: 69                 
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 42                 
Correct output: 14                  | Program output: 14                 
Correct output: 8                   | Program output: 49                 
Correct output: 32                  | Program output: 66                 
Correct output: 22                  | Program output: 83                 
Correct output: 17                  | Program output: 76                 
Correct output: 13                  | Program output: 21                 
Correct output: 57                  | Program output: 83                 
Correct output: 12                  | Program output: 12                 
Correct output: 35                  | Program output: 57                 
Correct output: 60                  | Program output: 60                 
Correct output: 31                  | Program output: 85                 
Correct output: 24                  | Program output: 53                 
Correct output: 3                   | Program output: 59                 
Correct output: 46                  | Program output: 49                 
Correct output: 56                  | Program output: 58                 
Correct output: 29                  | Program output: 82                 
Correct output: 0                   | Program output: 0                  
Correct output: 17                  | Program output: 39                 
Correct output: 3                   | Program output: 61                 
Correct output: -39                 | Program output: 81                 
Correct output: -44                 | Program output: 2                  
Correct output: -97                 | Program output: -12                
Correct output: -76                 | Program output: 11                 
Correct output: -11                 | Program output: 74                 
Correct output: -95                 | Program output: 91                 
Correct output: -78                 | Program output: 31                 
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: 26                 
Correct output: -92                 | Program output: 67                 
Correct output: 7                   | Program output: 12                 
Correct output: -1                  | Program output: 8                  
Correct output: -71                 | Program output: -71                
Correct output: -27                 | Program output: -27                
Correct output: -82                 | Program output: 29                 
Correct output: -73                 | Program output: 13                 
Correct output: -88                 | Program output: 76                 
Correct output: -52                 | Program output: 88                 
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: 70                 
Correct output: -53                 | Program output: 96                 
Correct output: -64                 | Program output: -40                
Correct output: -68                 | Program output: -10                
Correct output: -65                 | Program output: 14                 
Correct output: -76                 | Program output: 12                 
Correct output: -55                 | Program output: -55                
Correct output: -87                 | Program output: 22                 
Correct output: -40                 | Program output: -39                
Correct output: -95                 | Program output: -27                
Correct output: -68                 | Program output: -66                
Correct output: -28                 | Program output: 74                 
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -2                 
Correct output: -67                 | Program output: -18                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: 57                 
Correct output: -64                 | Program output: 3                  
Correct output: -24                 | Program output: 73                 
Correct output: -35                 | Program output: -35                
Correct output: -33                 | Program output: 7                  
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: 42                 
Correct output: -43                 | Program output: -40                
Correct output: -90                 | Program output: -35                
Correct output: -89                 | Program output: -40                
Correct output: 6                   | Program output: 74                 
Correct output: -49                 | Program output: -5                 
Correct output: -91                 | Program output: 25                 
Correct output: -82                 | Program output: -82                
Correct output: -39                 | Program output: -36                
Correct output: -83                 | Program output: 90                 
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -76                
Correct output: -19                 | Program output: -11                
Correct output: -73                 | Program output: 78                 
Correct output: -87                 | Program output: -87                
Correct output: -39                 | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 2, :instruction integer_min})
Lexicase best program: (in3 boolean_yankdup integer_gt exec_swap (boolean_yankdup exec_eq in2 exec_y_when_autoconstructing (boolean_rot integer_gte boolean_and exec_while (integer_flush print_integer) boolean_pop) in2) (in3) exec_y_when_autoconstructing (print_integer boolean_dup_times exec_flush print_integer exec_while ()) in2 in1 exec_do*count (exec_do*times (boolean_dup_items in3) exec_shove (print_integer boolean_dup_times exec_flush print_integer exec_while ()) exec_yankdup) exec_k () (exec_do*count (exec_do*times (boolean_dup_items exec_dup (integer_rot integer_min integer_min)))))
Lexicase best errors: [1 1 1 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 60
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction in1} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 2, :instruction integer_min})
Zero cases best program: (in3 boolean_yankdup integer_gt exec_swap (boolean_yankdup exec_eq in2 exec_y_when_autoconstructing (boolean_rot integer_gte boolean_and exec_while (integer_flush print_integer) boolean_pop) in2) (in3) exec_y_when_autoconstructing (print_integer boolean_dup_times exec_flush print_integer exec_while ()) in2 in1 exec_do*count (exec_do*times (boolean_dup_items in3) exec_shove (print_integer boolean_dup_times exec_flush print_integer exec_while ()) exec_yankdup) exec_k () (exec_do*count (exec_do*times (boolean_dup_items exec_dup (integer_rot integer_min integer_min)))))
Zero cases best errors: [1 1 1 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 60
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (355 1 358 539 24 538 537 928 538 359)
Population mean number of elite cases: 4.18
Count of perfect (error zero) individuals by case: (355 1 358 539 24 538 537 928 538 359)
Population mean number of perfect (error zero) cases: 4.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction in2} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_gt} {:close 0, :instruction tagged_346} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 2, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Best program: (in2 boolean_yankdup integer_gt tagged_346 boolean_yankdup exec_eq in2 exec_do*count (boolean_rot exec_k_when_autoconstructing (boolean_and exec_while (integer_flush exec_if () (boolean_pop) in2) in3) (exec_shove (print_integer boolean_dup_times exec_flush print_integer exec_while ()) in2) exec_k () (exec_do*count (exec_do*times (boolean_dup_items exec_dup (integer_rot exec_do*while (in2) exec_k () (exec_do*while (in2) exec_k () (exec_do*count (exec_do*times (print_integer) in2 integer_max integer_dup integer_min integer_min)) integer_inc exec_while (integer_dup exec_stackdepth in1 boolean_empty integer_dup_items))))))))
Errors: [1 1 1 0 1 0 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 51
Size: 74
Percent parens: 0.311
--- Population Statistics ---
Average total errors in population: 5.823
Median total errors in population: 5
Error averages by case: (0.645 0.999 0.642 0.461 0.976 0.462 0.463 0.072 0.462 0.641)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.971
Average program size in population (points): 62.542
Average percent parens in population: 0.272
Minimum age in population: 24.498291015625
Maximum age in population: 31.31910705566406
Average age in population: 29.13651229476929
Median age in population: 29.21972465515137
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 21
Genome diversity (% unique genomes):	 0.69
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.678
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 6120290
--- Timings ---
Current time: 1559314379249 milliseconds
Total Time:          51.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.6 seconds, 74.9%
Fitness Testing:      8.1 seconds, 15.7%
Report:               4.8 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 20                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -28                 | Program output: 62                 
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 100                
Correct output: -1                  | Program output: -1                 
Correct output: 33                  | Program output: 33                 
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 53                 
Correct output: 14                  | Program output: 77                 
Correct output: 8                   | Program output: 49                 
Correct output: 32                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 82                 
Correct output: 57                  | Program output: 57                 
Correct output: 12                  | Program output: 95                 
Correct output: 35                  | Program output: 35                 
Correct output: 60                  | Program output: 64                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 91                 
Correct output: 3                   | Program output: 80                 
Correct output: 46                  | Program output: 46                 
Correct output: 56                  | Program output: 98                 
Correct output: 29                  | Program output: 29                 
Correct output: 0                   | Program output: 53                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: -39                 | Program output: 1                  
Correct output: -44                 | Program output: 40                 
Correct output: -97                 | Program output: -44                
Correct output: -76                 | Program output: -47                
Correct output: -11                 | Program output: -11                
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: 74                 
Correct output: -97                 | Program output: -24                
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 55                 
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: 40                 
Correct output: -27                 | Program output: 21                 
Correct output: -82                 | Program output: -82                
Correct output: -73                 | Program output: 46                 
Correct output: -88                 | Program output: -9                 
Correct output: -52                 | Program output: -52                
Correct output: -79                 | Program output: -59                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -53                
Correct output: -64                 | Program output: -64                
Correct output: -68                 | Program output: -68                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: 1                  
Correct output: -55                 | Program output: -13                
Correct output: -87                 | Program output: -50                
Correct output: -40                 | Program output: 6                  
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: -55                
Correct output: -28                 | Program output: -28                
Correct output: -84                 | Program output: -80                
Correct output: -92                 | Program output: -40                
Correct output: -67                 | Program output: -27                
Correct output: -67                 | Program output: -61                
Correct output: -65                 | Program output: -47                
Correct output: -76                 | Program output: 10                 
Correct output: -87                 | Program output: -41                
Correct output: -64                 | Program output: 18                 
Correct output: -24                 | Program output: 70                 
Correct output: -35                 | Program output: 98                 
Correct output: -33                 | Program output: -33                
Correct output: -17                 | Program output: 22                 
Correct output: -91                 | Program output: 16                 
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -31                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: 83                 
Correct output: 6                   | Program output: 60                 
Correct output: -49                 | Program output: -49                
Correct output: -91                 | Program output: -8                 
Correct output: -82                 | Program output: -61                
Correct output: -39                 | Program output: 22                 
Correct output: -83                 | Program output: -4                 
Correct output: -37                 | Program output: 47                 
Correct output: -76                 | Program output: 30                 
Correct output: -19                 | Program output: 8                  
Correct output: -73                 | Program output: -6                 
Correct output: -87                 | Program output: -87                
Correct output: -39                 | Program output: -39                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div})
Lexicase best program: (in1 integer_dup_times integer_fromboolean boolean_shove print_integer exec_dup () integer_sub boolean_eq exec_dup (integer_empty exec_pop (boolean_xor integer_div)))
Lexicase best errors: [1 1 1 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 17
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_sub} {:close 2, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div})
Zero cases best program: (in1 integer_dup_times integer_fromboolean boolean_shove print_integer exec_dup () integer_sub boolean_eq exec_dup (integer_empty exec_pop (boolean_xor integer_div)))
Zero cases best errors: [1 1 1 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 17
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (187 79 79 288 288 387 20 347 285 283)
Population mean number of elite cases: 2.24
Count of perfect (error zero) individuals by case: (187 79 79 288 288 387 20 347 285 283)
Population mean number of perfect (error zero) cases: 2.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_gt} {:close 0, :instruction tagged_346} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_not} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction 62} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*while} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer})
Best program: (integer_gt tagged_346 boolean_yankdup exec_eq in2 exec_do*count (exec_k_when_autoconstructing (boolean_not) () exec_do*while (integer_mod exec_yank) integer_dec integer_mod boolean_not in1) print_integer integer_dup boolean_dup integer_sub boolean_and boolean_xor exec_shove (boolean_swap exec_pop () print_integer exec_pop (integer_fromboolean 62) boolean_shove integer_gt exec_when () boolean_dup exec_flush exec_yank integer_add) boolean_eq boolean_dup integer_dec exec_when (exec_pop (integer_fromboolean boolean_dup integer_sub exec_do*while (in4 print_integer boolean_dup_times integer_max print_integer exec_do*while (exec_k_when_autoconstructing () (print_integer boolean_dup_times integer_max print_integer))))))
Errors: [1 1 1 0 0 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 55
Size: 70
Percent parens: 0.214
--- Population Statistics ---
Average total errors in population: 7.757
Median total errors in population: 9
Error averages by case: (0.813 0.921 0.921 0.712 0.712 0.613 0.98 0.653 0.715 0.717)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.12
Average program size in population (points): 64.239
Average percent parens in population: 0.275
Minimum age in population: 25.498291015625
Maximum age in population: 32.52190399169922
Average age in population: 30.80607335090637
Median age in population: 30.91260147094727
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 44
Genome diversity (% unique genomes):	 0.694
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.688
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 6369318
--- Timings ---
Current time: 1559314381552 milliseconds
Total Time:          53.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.4 seconds, 75.0%
Fitness Testing:      8.4 seconds, 15.6%
Report:               5.0 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 20                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -28                 | Program output: 62                 
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 100                
Correct output: -1                  | Program output: -1                 
Correct output: 33                  | Program output: 33                 
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 53                 
Correct output: 14                  | Program output: 77                 
Correct output: 8                   | Program output: 49                 
Correct output: 32                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 82                 
Correct output: 57                  | Program output: 57                 
Correct output: 12                  | Program output: 95                 
Correct output: 35                  | Program output: 35                 
Correct output: 60                  | Program output: 64                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 91                 
Correct output: 3                   | Program output: 80                 
Correct output: 46                  | Program output: 46                 
Correct output: 56                  | Program output: 98                 
Correct output: 29                  | Program output: 29                 
Correct output: 0                   | Program output: 53                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: -39                 | Program output: 1                  
Correct output: -44                 | Program output: 40                 
Correct output: -97                 | Program output: -44                
Correct output: -76                 | Program output: -47                
Correct output: -11                 | Program output: -11                
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: 74                 
Correct output: -97                 | Program output: -24                
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 55                 
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: 40                 
Correct output: -27                 | Program output: 21                 
Correct output: -82                 | Program output: -82                
Correct output: -73                 | Program output: 46                 
Correct output: -88                 | Program output: -9                 
Correct output: -52                 | Program output: -52                
Correct output: -79                 | Program output: -59                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -53                
Correct output: -64                 | Program output: -64                
Correct output: -68                 | Program output: -68                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: 1                  
Correct output: -55                 | Program output: -13                
Correct output: -87                 | Program output: -50                
Correct output: -40                 | Program output: 6                  
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: -55                
Correct output: -28                 | Program output: -28                
Correct output: -84                 | Program output: -80                
Correct output: -92                 | Program output: -40                
Correct output: -67                 | Program output: -27                
Correct output: -67                 | Program output: -61                
Correct output: -65                 | Program output: -47                
Correct output: -76                 | Program output: 10                 
Correct output: -87                 | Program output: -41                
Correct output: -64                 | Program output: 18                 
Correct output: -24                 | Program output: 70                 
Correct output: -35                 | Program output: 98                 
Correct output: -33                 | Program output: -33                
Correct output: -17                 | Program output: 22                 
Correct output: -91                 | Program output: 16                 
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -31                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: 83                 
Correct output: 6                   | Program output: 60                 
Correct output: -49                 | Program output: -49                
Correct output: -91                 | Program output: -8                 
Correct output: -82                 | Program output: -61                
Correct output: -39                 | Program output: 22                 
Correct output: -83                 | Program output: -4                 
Correct output: -37                 | Program output: 47                 
Correct output: -76                 | Program output: 30                 
Correct output: -19                 | Program output: 8                  
Correct output: -73                 | Program output: -6                 
Correct output: -87                 | Program output: -87                
Correct output: -39                 | Program output: -39                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction in3} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup})
Lexicase best program: (in3 integer_gt boolean_dup_items boolean_yankdup exec_eq exec_yankdup exec_do*count (boolean_rot integer_gte boolean_and integer_dec integer_mod boolean_not in1) print_integer integer_dup exec_k () (exec_do*count (exec_do*times (boolean_dup_items exec_dup (exec_dup (integer_rot exec_do*while (in2) exec_k () (exec_do*while (in2) exec_k () (exec_do*count (exec_do*times (print_integer) in2 exec_k (integer_dup) ())))))))))
Lexicase best errors: [0 1 0 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 53
Percent parens: 0.340
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction in3} {:close 1, :instruction integer_gt} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup})
Zero cases best program: (in3 integer_gt boolean_dup_items boolean_yankdup exec_eq exec_yankdup exec_do*count (boolean_rot integer_gte boolean_and integer_dec integer_mod boolean_not in1) print_integer integer_dup exec_k () (exec_do*count (exec_do*times (boolean_dup_items exec_dup (exec_dup (integer_rot exec_do*while (in2) exec_k () (exec_do*while (in2) exec_k () (exec_do*count (exec_do*times (print_integer) in2 exec_k (integer_dup) ())))))))))
Zero cases best errors: [0 1 0 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 53
Percent parens: 0.340
--- Lexicase Population Statistics ---
Count of elite individuals by case: (518 88 426 895 426 88 425 192 182 182)
Population mean number of elite cases: 3.42
Count of perfect (error zero) individuals by case: (518 88 426 895 426 88 425 192 182 182)
Population mean number of perfect (error zero) cases: 3.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_fromboolean} {:close 1, :instruction in2} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_dup} {:close 1, :instruction integer_sub} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_pop})
Best program: (integer_fromboolean in2 integer_dec integer_mod boolean_not in1 print_integer integer_dup boolean_dup integer_sub boolean_swap boolean_xor exec_shove (boolean_swap boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing () (boolean_rot boolean_dup_items exec_stackdepth exec_flush print_integer) boolean_pop)))
Errors: [0 1 0 0 0 1 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 23
Size: 28
Percent parens: 0.179
--- Population Statistics ---
Average total errors in population: 6.578
Median total errors in population: 6
Error averages by case: (0.482 0.912 0.574 0.105 0.574 0.912 0.575 0.808 0.818 0.818)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.256
Average program size in population (points): 60.367
Average percent parens in population: 0.258
Minimum age in population: 29.29939270019531
Maximum age in population: 34.08434963226318
Average age in population: 32.10679164600372
Median age in population: 32.20936489105225
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 45
Genome diversity (% unique genomes):	 0.712
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.702
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 6636919
--- Timings ---
Current time: 1559314384035 milliseconds
Total Time:          56.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        42.4 seconds, 75.2%
Fitness Testing:      8.7 seconds, 15.4%
Report:               5.2 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 642
Test mean error for best: 0.64200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 20                 
Correct output: -70                 | Program output: 99                 
Correct output: -87                 | Program output: 68                 
Correct output: -28                 | Program output: -28                
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 73                 
Correct output: -1                  | Program output: -1                 
Correct output: 33                  | Program output: 33                 
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 14                 
Correct output: 14                  | Program output: 87                 
Correct output: 8                   | Program output: 8                  
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 96                 
Correct output: 17                  | Program output: 32                 
Correct output: 13                  | Program output: 13                 
Correct output: 57                  | Program output: 71                 
Correct output: 12                  | Program output: 54                 
Correct output: 35                  | Program output: 95                 
Correct output: 60                  | Program output: 61                 
Correct output: 31                  | Program output: 59                 
Correct output: 24                  | Program output: 62                 
Correct output: 3                   | Program output: 3                  
Correct output: 46                  | Program output: 48                 
Correct output: 56                  | Program output: 81                 
Correct output: 29                  | Program output: 95                 
Correct output: 0                   | Program output: 2                  
Correct output: 17                  | Program output: 61                 
Correct output: 3                   | Program output: 59                 
Correct output: -39                 | Program output: -39                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -76                 | Program output: -76                
Correct output: -11                 | Program output: 66                 
Correct output: -95                 | Program output: -84                
Correct output: -78                 | Program output: -56                
Correct output: -97                 | Program output: 69                 
Correct output: -40                 | Program output: -8                 
Correct output: -92                 | Program output: -49                
Correct output: 7                   | Program output: 7                  
Correct output: -1                  | Program output: 9                  
Correct output: -71                 | Program output: 87                 
Correct output: -27                 | Program output: 91                 
Correct output: -82                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: 58                 
Correct output: -52                 | Program output: 41                 
Correct output: -79                 | Program output: -14                
Correct output: -71                 | Program output: 82                 
Correct output: -53                 | Program output: 43                 
Correct output: -64                 | Program output: 25                 
Correct output: -68                 | Program output: 60                 
Correct output: -65                 | Program output: 39                 
Correct output: -76                 | Program output: -76                
Correct output: -55                 | Program output: 9                  
Correct output: -87                 | Program output: -84                
Correct output: -40                 | Program output: -4                 
Correct output: -95                 | Program output: 65                 
Correct output: -68                 | Program output: 28                 
Correct output: -28                 | Program output: -7                 
Correct output: -84                 | Program output: -83                
Correct output: -92                 | Program output: -55                
Correct output: -67                 | Program output: -67                
Correct output: -67                 | Program output: 88                 
Correct output: -65                 | Program output: -16                
Correct output: -76                 | Program output: 66                 
Correct output: -87                 | Program output: -15                
Correct output: -64                 | Program output: 41                 
Correct output: -24                 | Program output: -24                
Correct output: -35                 | Program output: 66                 
Correct output: -33                 | Program output: 63                 
Correct output: -17                 | Program output: 24                 
Correct output: -91                 | Program output: -58                
Correct output: -74                 | Program output: 84                 
Correct output: -43                 | Program output: 42                 
Correct output: -90                 | Program output: 35                 
Correct output: -89                 | Program output: -89                
Correct output: 6                   | Program output: 6                  
Correct output: -49                 | Program output: 94                 
Correct output: -91                 | Program output: -66                
Correct output: -82                 | Program output: 27                 
Correct output: -39                 | Program output: 49                 
Correct output: -83                 | Program output: -58                
Correct output: -37                 | Program output: 89                 
Correct output: -76                 | Program output: 68                 
Correct output: -19                 | Program output: -19                
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: 18                 
Correct output: -39                 | Program output: -13                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction tag_integer_671} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Lexicase best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing () (boolean_rot exec_if (tag_integer_671 exec_flush print_integer boolean_pop boolean_invert_first_then_and) () exec_stackdepth exec_shove (exec_k_when_autoconstructing (integer_max integer_dec integer_mod boolean_not in4) (print_integer integer_dup) boolean_dup integer_dec boolean_and boolean_xor exec_shove (boolean_swap exec_pop (print_integer exec_pop (integer_fromboolean boolean_stackdepth) boolean_shove integer_gt exec_do*while (in2 print_integer in2) exec_k () (integer_dup_times in1) boolean_empty integer_dup_items))))))
Lexicase best errors: [1 1 0 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 60
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction tag_integer_671} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Zero cases best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing () (boolean_rot exec_if (tag_integer_671 exec_flush print_integer boolean_pop boolean_invert_first_then_and) () exec_stackdepth exec_shove (exec_k_when_autoconstructing (integer_max integer_dec integer_mod boolean_not in4) (print_integer integer_dup) boolean_dup integer_dec boolean_and boolean_xor exec_shove (boolean_swap exec_pop (print_integer exec_pop (integer_fromboolean boolean_stackdepth) boolean_shove integer_gt exec_do*while (in2 print_integer in2) exec_k () (integer_dup_times in1) boolean_empty integer_dup_items))))))
Zero cases best errors: [1 1 0 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 60
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (199 199 99 374 98 94 375 98 234 910)
Population mean number of elite cases: 2.68
Count of perfect (error zero) individuals by case: (199 199 99 374 98 94 375 98 234 910)
Population mean number of perfect (error zero) cases: 2.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction tag_integer_671} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction tag_boolean_691} {:close 0, :instruction integer_min} {:close 2, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing () (boolean_rot exec_if (tag_integer_671 exec_flush print_integer boolean_pop boolean_invert_first_then_and) () exec_stackdepth exec_shove (exec_k_when_autoconstructing (integer_max integer_dec integer_mod boolean_not in4) (print_integer integer_dup) boolean_dup integer_dec boolean_and boolean_xor exec_shove (boolean_swap exec_pop (print_integer exec_pop (integer_fromboolean boolean_stackdepth) boolean_shove in2 exec_k (tag_boolean_691 integer_min integer_min) () integer_inc exec_while (integer_dup exec_do*while (in1 boolean_empty integer_dup_items))))))))
Errors: [1 1 0 1 0 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 47
Size: 63
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 7.32
Median total errors in population: 7
Error averages by case: (0.801 0.801 0.901 0.626 0.902 0.906 0.625 0.902 0.766 0.09)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.781
Average program size in population (points): 60.206
Average percent parens in population: 0.263
Minimum age in population: 30.69943237304688
Maximum age in population: 35.6800708770752
Average age in population: 33.62294668769836
Median age in population: 33.67137098312378
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 14
Genome diversity (% unique genomes):	 0.766
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.758
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 6910958
--- Timings ---
Current time: 1559314386806 milliseconds
Total Time:          59.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        44.6 seconds, 75.5%
Fitness Testing:      9.0 seconds, 15.2%
Report:               5.4 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 662
Test mean error for best: 0.66200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 0                  
Correct output: -63                 | Program output: -63                
Correct output: 20                  | Program output: 0                  
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -28                 | Program output: 0                  
Correct output: 20                  | Program output: 0                  
Correct output: 73                  | Program output: 0                  
Correct output: -1                  | Program output: -1                 
Correct output: 33                  | Program output: 0                  
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 0                  
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 0                  
Correct output: 14                  | Program output: 0                  
Correct output: 14                  | Program output: 0                  
Correct output: 8                   | Program output: 0                  
Correct output: 32                  | Program output: 0                  
Correct output: 22                  | Program output: 0                  
Correct output: 17                  | Program output: 0                  
Correct output: 13                  | Program output: 0                  
Correct output: 57                  | Program output: 0                  
Correct output: 12                  | Program output: 0                  
Correct output: 35                  | Program output: 0                  
Correct output: 60                  | Program output: 0                  
Correct output: 31                  | Program output: 0                  
Correct output: 24                  | Program output: 0                  
Correct output: 3                   | Program output: 0                  
Correct output: 46                  | Program output: 0                  
Correct output: 56                  | Program output: 0                  
Correct output: 29                  | Program output: 0                  
Correct output: 0                   | Program output: 0                  
Correct output: 17                  | Program output: 0                  
Correct output: 3                   | Program output: 0                  
Correct output: -39                 | Program output: 0                  
Correct output: -44                 | Program output: 0                  
Correct output: -97                 | Program output: -12                
Correct output: -76                 | Program output: -47                
Correct output: -11                 | Program output: -11                
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: 0                  
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 0                  
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -27                 | Program output: -27                
Correct output: -82                 | Program output: -82                
Correct output: -73                 | Program output: 0                  
Correct output: -88                 | Program output: -9                 
Correct output: -52                 | Program output: -52                
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -53                
Correct output: -64                 | Program output: -40                
Correct output: -68                 | Program output: -10                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: 0                  
Correct output: -55                 | Program output: -55                
Correct output: -87                 | Program output: -50                
Correct output: -40                 | Program output: -39                
Correct output: -95                 | Program output: -27                
Correct output: -68                 | Program output: -66                
Correct output: -28                 | Program output: -28                
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -2                 
Correct output: -67                 | Program output: -18                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: -41                
Correct output: -64                 | Program output: 0                  
Correct output: -24                 | Program output: 0                  
Correct output: -35                 | Program output: -35                
Correct output: -33                 | Program output: -33                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -40                
Correct output: -90                 | Program output: -35                
Correct output: -89                 | Program output: -40                
Correct output: 6                   | Program output: 0                  
Correct output: -49                 | Program output: -5                 
Correct output: -91                 | Program output: -8                 
Correct output: -82                 | Program output: -82                
Correct output: -39                 | Program output: -36                
Correct output: -83                 | Program output: -4                 
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -76                
Correct output: -19                 | Program output: -11                
Correct output: -73                 | Program output: -6                 
Correct output: -87                 | Program output: -87                
Correct output: -39                 | Program output: -39                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 1, :instruction in2} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 2, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Lexicase best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing () (exec_do*count (boolean_rot exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) integer_gte boolean_and exec_while (integer_flush print_integer) boolean_pop) (in2) tag_exec_634 () exec_do*times (print_integer boolean_dup_times exec_flush print_integer exec_while ()) in2) exec_k () (exec_do*count (exec_do*times (boolean_xor exec_dup (integer_rot exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (integer_rot exec_do*while (in2) exec_k () (exec_do*while (in2) exec_k () (exec_do*count (exec_do*times (print_integer) in2 exec_k (integer_dup exec_s (integer_min) () (integer_inc exec_while (integer_dup exec_stackdepth in1 boolean_empty integer_dup_items))) ()))))))))))))))
Lexicase best errors: [0 0 0 1 1 1 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 96
Percent parens: 0.365
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 1, :instruction in2} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 2, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Zero cases best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing () (exec_do*count (boolean_rot exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) integer_gte boolean_and exec_while (integer_flush print_integer) boolean_pop) (in2) tag_exec_634 () exec_do*times (print_integer boolean_dup_times exec_flush print_integer exec_while ()) in2) exec_k () (exec_do*count (exec_do*times (boolean_xor exec_dup (integer_rot exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (integer_rot exec_do*while (in2) exec_k () (exec_do*while (in2) exec_k () (exec_do*count (exec_do*times (print_integer) in2 exec_k (integer_dup exec_s (integer_min) () (integer_inc exec_while (integer_dup exec_stackdepth in1 boolean_empty integer_dup_items))) ()))))))))))))))
Zero cases best errors: [0 0 0 1 1 1 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 96
Percent parens: 0.365
--- Lexicase Population Statistics ---
Count of elite individuals by case: (24 235 235 226 362 11 364 226 23 234)
Population mean number of elite cases: 1.94
Count of perfect (error zero) individuals by case: (24 235 235 226 362 11 364 226 23 234)
Population mean number of perfect (error zero) cases: 1.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 1, :instruction in2} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 2, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing () (exec_do*count (boolean_rot exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) integer_gte boolean_and exec_while (integer_flush print_integer) boolean_pop) (in2) tag_exec_634 () exec_do*times (print_integer boolean_dup_times exec_flush print_integer exec_while ()) in2) exec_k () (exec_do*count (exec_do*times (boolean_xor exec_dup (integer_rot exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (integer_rot exec_do*while (in2) exec_k () (exec_do*while (in2) exec_k () (exec_do*count (exec_do*times (print_integer) in2 exec_k (integer_dup exec_s (integer_min) () (integer_inc exec_while (integer_dup exec_stackdepth in1 boolean_empty integer_dup_items))) ()))))))))))))))
Errors: [0 0 0 1 1 1 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 61
Size: 96
Percent parens: 0.365
--- Population Statistics ---
Average total errors in population: 8.06
Median total errors in population: 8
Error averages by case: (0.976 0.765 0.765 0.774 0.638 0.989 0.636 0.774 0.977 0.766)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.222
Average program size in population (points): 90.843
Average percent parens in population: 0.308
Minimum age in population: 32.71738052368164
Maximum age in population: 36.80542683601379
Average age in population: 35.02148192000389
Median age in population: 34.98166966438293
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 95
Genome diversity (% unique genomes):	 0.681
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 96
Syntactic diversity (% unique Push programs):	 0.678
Total error diversity:				 0.005
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 7182013
--- Timings ---
Current time: 1559314389480 milliseconds
Total Time:          61.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        46.7 seconds, 75.7%
Fitness Testing:      9.3 seconds, 15.0%
Report:               5.7 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -63                 | Program output: -63                
Correct output: 20                  | Program output: 20                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -28                 | Program output: 62                 
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 100                
Correct output: -1                  | Program output: -1                 
Correct output: 33                  | Program output: 33                 
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 53                 
Correct output: 14                  | Program output: 77                 
Correct output: 8                   | Program output: 49                 
Correct output: 32                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 82                 
Correct output: 57                  | Program output: 57                 
Correct output: 12                  | Program output: 95                 
Correct output: 35                  | Program output: 35                 
Correct output: 60                  | Program output: 64                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 91                 
Correct output: 3                   | Program output: 80                 
Correct output: 46                  | Program output: 46                 
Correct output: 56                  | Program output: 98                 
Correct output: 29                  | Program output: 29                 
Correct output: 0                   | Program output: 0                  
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: -39                 | Program output: 1                  
Correct output: -44                 | Program output: 40                 
Correct output: -97                 | Program output: -12                
Correct output: -76                 | Program output: -47                
Correct output: -11                 | Program output: -11                
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: 74                 
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 55                 
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -27                 | Program output: -27                
Correct output: -82                 | Program output: -82                
Correct output: -73                 | Program output: 46                 
Correct output: -88                 | Program output: -9                 
Correct output: -52                 | Program output: -52                
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -53                
Correct output: -64                 | Program output: -40                
Correct output: -68                 | Program output: -10                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: 1                  
Correct output: -55                 | Program output: -55                
Correct output: -87                 | Program output: -50                
Correct output: -40                 | Program output: -39                
Correct output: -95                 | Program output: -27                
Correct output: -68                 | Program output: -66                
Correct output: -28                 | Program output: -28                
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -2                 
Correct output: -67                 | Program output: -18                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: -41                
Correct output: -64                 | Program output: 18                 
Correct output: -24                 | Program output: 70                 
Correct output: -35                 | Program output: -35                
Correct output: -33                 | Program output: -33                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -40                
Correct output: -90                 | Program output: -35                
Correct output: -89                 | Program output: -40                
Correct output: 6                   | Program output: 60                 
Correct output: -49                 | Program output: -5                 
Correct output: -91                 | Program output: -8                 
Correct output: -82                 | Program output: -82                
Correct output: -39                 | Program output: -36                
Correct output: -83                 | Program output: -4                 
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -76                
Correct output: -19                 | Program output: -11                
Correct output: -73                 | Program output: -6                 
Correct output: -87                 | Program output: -87                
Correct output: -39                 | Program output: -39                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction tag_integer_671} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 1, :instruction in2} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 2, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Lexicase best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing () (boolean_rot exec_if (tag_integer_671 exec_flush print_integer boolean_pop boolean_invert_first_then_and) () boolean_and exec_while (integer_flush integer_min) integer_gte boolean_and exec_while (integer_flush print_integer) boolean_pop) in2) tag_exec_634 () exec_do*times (print_integer boolean_dup_times exec_flush print_integer exec_while ()) in2 exec_k () (exec_do*count (exec_do*times (boolean_xor exec_dup (integer_rot exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (integer_rot exec_do*while (in2) exec_k () (exec_do*while (in2) exec_k () (exec_do*count (exec_do*times (print_integer) in2 exec_k (integer_dup exec_s (integer_min) () (integer_inc exec_while (integer_dup exec_stackdepth in1 boolean_empty integer_dup_items))) ()))))))))))))
Lexicase best errors: [0 0 1 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 99
Percent parens: 0.343
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction tag_integer_671} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 1, :instruction in2} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 2, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Zero cases best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing () (boolean_rot exec_if (tag_integer_671 exec_flush print_integer boolean_pop boolean_invert_first_then_and) () boolean_and exec_while (integer_flush integer_min) integer_gte boolean_and exec_while (integer_flush print_integer) boolean_pop) in2) tag_exec_634 () exec_do*times (print_integer boolean_dup_times exec_flush print_integer exec_while ()) in2 exec_k () (exec_do*count (exec_do*times (boolean_xor exec_dup (integer_rot exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (integer_rot exec_do*while (in2) exec_k () (exec_do*while (in2) exec_k () (exec_do*count (exec_do*times (print_integer) in2 exec_k (integer_dup exec_s (integer_min) () (integer_inc exec_while (integer_dup exec_stackdepth in1 boolean_empty integer_dup_items))) ()))))))))))))
Zero cases best errors: [0 0 1 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 99
Percent parens: 0.343
--- Lexicase Population Statistics ---
Count of elite individuals by case: (359 614 119 165 611 597 303 104 196 675)
Population mean number of elite cases: 3.74
Count of perfect (error zero) individuals by case: (359 614 119 165 611 597 303 104 196 675)
Population mean number of perfect (error zero) cases: 3.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 1, :instruction in2} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 2, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Best program: (in1 exec_eq integer_lte exec_do*count (boolean_rot exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) integer_gte boolean_and exec_while (integer_flush print_integer) boolean_pop) (in2) tag_exec_634 () exec_do*times (print_integer boolean_dup_times exec_flush print_integer exec_while ()) in2) exec_k () (exec_do*count (exec_do*times (boolean_xor exec_dup (integer_rot exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (integer_rot exec_do*while (in2) exec_k () (exec_do*while (in2) exec_y_when_autoconstructing () exec_do*count (exec_do*times (print_integer) in2 exec_k (integer_dup exec_s (integer_min) () (integer_inc exec_while (integer_dup exec_stackdepth in1 boolean_empty integer_dup_items))) ())))))))))))
Errors: [0 0 1 1 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 58
Size: 89
Percent parens: 0.348
--- Population Statistics ---
Average total errors in population: 6.257
Median total errors in population: 5
Error averages by case: (0.641 0.386 0.881 0.835 0.389 0.403 0.697 0.896 0.804 0.325)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.783
Average program size in population (points): 94.996
Average percent parens in population: 0.325
Minimum age in population: 34.09114074707031
Maximum age in population: 38.62486290931702
Average age in population: 36.6947396042347
Median age in population: 36.76396644115448
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 98
Genome diversity (% unique genomes):	 0.747
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 98
Syntactic diversity (% unique Push programs):	 0.746
Total error diversity:				 0.008
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.102
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 7451501
--- Timings ---
Current time: 1559314391933 milliseconds
Total Time:          64.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        48.6 seconds, 75.7%
Fitness Testing:      9.5 seconds, 14.9%
Report:               6.0 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -63                 | Program output: -63                
Correct output: 20                  | Program output: 20                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -28                 | Program output: 62                 
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 100                
Correct output: -1                  | Program output: -1                 
Correct output: 33                  | Program output: 33                 
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 53                 
Correct output: 14                  | Program output: 77                 
Correct output: 8                   | Program output: 49                 
Correct output: 32                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 82                 
Correct output: 57                  | Program output: 57                 
Correct output: 12                  | Program output: 95                 
Correct output: 35                  | Program output: 35                 
Correct output: 60                  | Program output: 64                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 91                 
Correct output: 3                   | Program output: 80                 
Correct output: 46                  | Program output: 46                 
Correct output: 56                  | Program output: 98                 
Correct output: 29                  | Program output: 29                 
Correct output: 0                   | Program output: 0                  
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: -39                 | Program output: 1                  
Correct output: -44                 | Program output: 40                 
Correct output: -97                 | Program output: -12                
Correct output: -76                 | Program output: -47                
Correct output: -11                 | Program output: -11                
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: 74                 
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 55                 
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -27                 | Program output: -27                
Correct output: -82                 | Program output: -82                
Correct output: -73                 | Program output: 46                 
Correct output: -88                 | Program output: -9                 
Correct output: -52                 | Program output: -52                
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -53                
Correct output: -64                 | Program output: -40                
Correct output: -68                 | Program output: -10                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: 1                  
Correct output: -55                 | Program output: -55                
Correct output: -87                 | Program output: -50                
Correct output: -40                 | Program output: -39                
Correct output: -95                 | Program output: -27                
Correct output: -68                 | Program output: -66                
Correct output: -28                 | Program output: -28                
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -2                 
Correct output: -67                 | Program output: -18                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: -41                
Correct output: -64                 | Program output: 18                 
Correct output: -24                 | Program output: 70                 
Correct output: -35                 | Program output: -35                
Correct output: -33                 | Program output: -33                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -40                
Correct output: -90                 | Program output: -35                
Correct output: -89                 | Program output: -40                
Correct output: 6                   | Program output: 60                 
Correct output: -49                 | Program output: -5                 
Correct output: -91                 | Program output: -8                 
Correct output: -82                 | Program output: -82                
Correct output: -39                 | Program output: -36                
Correct output: -83                 | Program output: -4                 
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -76                
Correct output: -19                 | Program output: -11                
Correct output: -73                 | Program output: -6                 
Correct output: -87                 | Program output: -87                
Correct output: -39                 | Program output: -39                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction tag_integer_671} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 2, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Lexicase best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing () (boolean_rot exec_if (tag_integer_671 exec_flush print_integer boolean_pop boolean_invert_first_then_and) () exec_stackdepth exec_shove (exec_k_when_autoconstructing (integer_max exec_y_when_autoconstructing (print_integer boolean_dup_times exec_flush print_integer exec_while ()) in2 exec_k (exec_do*count (exec_do*times (boolean_xor exec_dup (integer_rot exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (integer_rot exec_do*while (in2) exec_k () (exec_do*while (in2) exec_k () (exec_do*count (exec_do*times (print_integer) in2 exec_k (integer_dup exec_s (integer_min) () (integer_inc exec_while (integer_dup exec_stackdepth in1 boolean_empty integer_dup_items))) ()))))))))))) ()) ()))))
Lexicase best errors: [0 1 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 91
Percent parens: 0.374
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction tag_integer_671} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 2, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Zero cases best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing () (boolean_rot exec_if (tag_integer_671 exec_flush print_integer boolean_pop boolean_invert_first_then_and) () exec_stackdepth exec_shove (exec_k_when_autoconstructing (integer_max exec_y_when_autoconstructing (print_integer boolean_dup_times exec_flush print_integer exec_while ()) in2 exec_k (exec_do*count (exec_do*times (boolean_xor exec_dup (integer_rot exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (integer_rot exec_do*while (in2) exec_k () (exec_do*while (in2) exec_k () (exec_do*count (exec_do*times (print_integer) in2 exec_k (integer_dup exec_s (integer_min) () (integer_inc exec_while (integer_dup exec_stackdepth in1 boolean_empty integer_dup_items))) ()))))))))))) ()) ()))))
Zero cases best errors: [0 1 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 91
Percent parens: 0.374
--- Lexicase Population Statistics ---
Count of elite individuals by case: (830 711 426 426 792 777 224 67 36 451)
Population mean number of elite cases: 4.74
Count of perfect (error zero) individuals by case: (830 711 426 426 792 777 224 67 36 451)
Population mean number of perfect (error zero) cases: 4.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 1, :instruction in2} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 1, :instruction exec_if} {:close 1, :instruction boolean_pop} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 2, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) integer_gte boolean_and exec_while (integer_flush print_integer) boolean_pop) (in2) tag_exec_634 () exec_do*times (print_integer boolean_dup_times exec_flush in3) exec_shove (print_integer boolean_dup_times exec_flush print_integer exec_if () (boolean_pop) in2) in3) exec_shove (print_integer boolean_dup_times exec_flush print_integer exec_while ()) in2 exec_k () (exec_do*count (exec_do*times (boolean_dup_items exec_dup (integer_rot exec_do*while (in2) exec_k () (exec_do*while (in2) exec_k () (exec_do*count (exec_do*times (exec_do*while (in2) exec_k () (exec_do*while (in2) exec_k () (exec_do*count (exec_do*count (print_integer) in2 integer_max integer_dup integer_min integer_min)) integer_inc exec_while (integer_dup exec_stackdepth in1 boolean_empty integer_dup_items)))))))))))
Errors: [0 0 0 0 0 0 1 1 1 0]
Total: 3
Mean: 0.3
Genome size: 74
Size: 109
Percent parens: 0.321
--- Population Statistics ---
Average total errors in population: 5.26
Median total errors in population: 5
Error averages by case: (0.17 0.289 0.574 0.574 0.208 0.223 0.776 0.933 0.964 0.549)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.921
Average program size in population (points): 92.784
Average percent parens in population: 0.329
Minimum age in population: 35.81716227531433
Maximum age in population: 39.96049273014069
Average age in population: 38.32378733378649
Median age in population: 38.4363762140274
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 50
Genome diversity (% unique genomes):	 0.732
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.73
Total error diversity:				 0.008
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.091
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 7683429
--- Timings ---
Current time: 1559314394279 milliseconds
Total Time:          66.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        50.4 seconds, 75.7%
Fitness Testing:      9.8 seconds, 14.7%
Report:               6.3 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -63                 | Program output: -63                
Correct output: 20                  | Program output: 20                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -28                 | Program output: 62                 
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 100                
Correct output: -1                  | Program output: -1                 
Correct output: 33                  | Program output: 33                 
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 53                 
Correct output: 14                  | Program output: 77                 
Correct output: 8                   | Program output: 49                 
Correct output: 32                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 82                 
Correct output: 57                  | Program output: 57                 
Correct output: 12                  | Program output: 95                 
Correct output: 35                  | Program output: 35                 
Correct output: 60                  | Program output: 64                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 91                 
Correct output: 3                   | Program output: 80                 
Correct output: 46                  | Program output: 46                 
Correct output: 56                  | Program output: 98                 
Correct output: 29                  | Program output: 29                 
Correct output: 0                   | Program output: 0                  
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: -39                 | Program output: 1                  
Correct output: -44                 | Program output: 40                 
Correct output: -97                 | Program output: -12                
Correct output: -76                 | Program output: -47                
Correct output: -11                 | Program output: -11                
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: 74                 
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 55                 
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -27                 | Program output: -27                
Correct output: -82                 | Program output: -82                
Correct output: -73                 | Program output: 46                 
Correct output: -88                 | Program output: -9                 
Correct output: -52                 | Program output: -52                
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -53                
Correct output: -64                 | Program output: -40                
Correct output: -68                 | Program output: -10                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: 1                  
Correct output: -55                 | Program output: -55                
Correct output: -87                 | Program output: -50                
Correct output: -40                 | Program output: -39                
Correct output: -95                 | Program output: -27                
Correct output: -68                 | Program output: -66                
Correct output: -28                 | Program output: -28                
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -2                 
Correct output: -67                 | Program output: -18                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: -41                
Correct output: -64                 | Program output: 18                 
Correct output: -24                 | Program output: 70                 
Correct output: -35                 | Program output: -35                
Correct output: -33                 | Program output: -33                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -40                
Correct output: -90                 | Program output: -35                
Correct output: -89                 | Program output: -40                
Correct output: 6                   | Program output: 60                 
Correct output: -49                 | Program output: -5                 
Correct output: -91                 | Program output: -8                 
Correct output: -82                 | Program output: -82                
Correct output: -39                 | Program output: -36                
Correct output: -83                 | Program output: -4                 
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -76                
Correct output: -19                 | Program output: -11                
Correct output: -73                 | Program output: -6                 
Correct output: -87                 | Program output: -87                
Correct output: -39                 | Program output: -39                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 1, :instruction in2} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 2, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Lexicase best program: (in1 exec_eq integer_lte exec_do*count (boolean_rot exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) integer_gte boolean_and exec_while (integer_flush print_integer) boolean_pop) (in2) tag_exec_634 () exec_do*times (print_integer boolean_dup_times exec_flush print_integer exec_while ()) in2) exec_k () (exec_do*count (exec_do*times (in2) exec_k () (exec_do*count (exec_do*times (boolean_xor exec_dup (integer_rot exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (integer_rot exec_do*while (in2) exec_k () (exec_do*while (in2) exec_k () (exec_do*count (exec_do*times (print_integer) in2 exec_k (integer_dup exec_s (integer_min) () (integer_inc exec_while (integer_dup exec_stackdepth in1 boolean_empty integer_dup_items))) ()))))))))))))))
Lexicase best errors: [1 1 0 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 98
Percent parens: 0.367
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 1, :instruction in2} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 2, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Zero cases best program: (in1 exec_eq integer_lte exec_do*count (boolean_rot exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) integer_gte boolean_and exec_while (integer_flush print_integer) boolean_pop) (in2) tag_exec_634 () exec_do*times (print_integer boolean_dup_times exec_flush print_integer exec_while ()) in2) exec_k () (exec_do*count (exec_do*times (in2) exec_k () (exec_do*count (exec_do*times (boolean_xor exec_dup (integer_rot exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (integer_rot exec_do*while (in2) exec_k () (exec_do*while (in2) exec_k () (exec_do*count (exec_do*times (print_integer) in2 exec_k (integer_dup exec_s (integer_min) () (integer_inc exec_while (integer_dup exec_stackdepth in1 boolean_empty integer_dup_items))) ()))))))))))))))
Zero cases best errors: [1 1 0 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 98
Percent parens: 0.367
--- Lexicase Population Statistics ---
Count of elite individuals by case: (96 14 376 143 574 876 655 255 96 876)
Population mean number of elite cases: 3.96
Count of perfect (error zero) individuals by case: (96 14 376 143 574 876 655 255 96 876)
Population mean number of perfect (error zero) cases: 3.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction tag_integer_671} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 1, :instruction in2} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing () (boolean_rot exec_if (tag_integer_671 exec_flush print_integer boolean_pop boolean_invert_first_then_and) () boolean_and exec_while (exec_dup_items integer_min) integer_gte boolean_and exec_while (integer_flush print_integer) boolean_pop) in2) tag_exec_634 () exec_do*times (print_integer boolean_dup_times exec_flush print_integer exec_while ()) in2 exec_k () (exec_do*count (exec_do*times (boolean_xor exec_dup (integer_rot exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (integer_rot exec_do*while (in2) exec_k () (exec_do*while (in2) exec_k () (exec_do*count (exec_do*times (print_integer) in2 exec_k (integer_dup exec_s (in1) (boolean_empty integer_dup_items) ()) ()))))))))))))
Errors: [1 1 0 1 0 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 60
Size: 93
Percent parens: 0.355
--- Population Statistics ---
Average total errors in population: 6.039
Median total errors in population: 6
Error averages by case: (0.904 0.986 0.624 0.857 0.426 0.124 0.345 0.745 0.904 0.124)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 62.319
Average program size in population (points): 91.795
Average percent parens in population: 0.316
Minimum age in population: 37.34897923469543
Maximum age in population: 41.66692197322845
Average age in population: 39.84311568251252
Median age in population: 39.9102817773819
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 31
Genome diversity (% unique genomes):	 0.767
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.766
Total error diversity:				 0.007
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.087
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 7944502
--- Timings ---
Current time: 1559314396717 milliseconds
Total Time:          69.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.2 seconds, 75.7%
Fitness Testing:     10.1 seconds, 14.7%
Report:               6.5 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -63                 | Program output: -63                
Correct output: 20                  | Program output: 20                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -28                 | Program output: 62                 
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 100                
Correct output: -1                  | Program output: -1                 
Correct output: 33                  | Program output: 33                 
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 53                 
Correct output: 14                  | Program output: 77                 
Correct output: 8                   | Program output: 49                 
Correct output: 32                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 82                 
Correct output: 57                  | Program output: 57                 
Correct output: 12                  | Program output: 95                 
Correct output: 35                  | Program output: 35                 
Correct output: 60                  | Program output: 64                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 91                 
Correct output: 3                   | Program output: 80                 
Correct output: 46                  | Program output: 46                 
Correct output: 56                  | Program output: 98                 
Correct output: 29                  | Program output: 29                 
Correct output: 0                   | Program output: 0                  
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: -39                 | Program output: 1                  
Correct output: -44                 | Program output: 40                 
Correct output: -97                 | Program output: -12                
Correct output: -76                 | Program output: -47                
Correct output: -11                 | Program output: -11                
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: 74                 
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 55                 
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -27                 | Program output: -27                
Correct output: -82                 | Program output: -82                
Correct output: -73                 | Program output: 46                 
Correct output: -88                 | Program output: -9                 
Correct output: -52                 | Program output: -52                
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -53                
Correct output: -64                 | Program output: -40                
Correct output: -68                 | Program output: -10                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: 1                  
Correct output: -55                 | Program output: -55                
Correct output: -87                 | Program output: -50                
Correct output: -40                 | Program output: -39                
Correct output: -95                 | Program output: -27                
Correct output: -68                 | Program output: -66                
Correct output: -28                 | Program output: -28                
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -2                 
Correct output: -67                 | Program output: -18                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: -41                
Correct output: -64                 | Program output: 18                 
Correct output: -24                 | Program output: 70                 
Correct output: -35                 | Program output: -35                
Correct output: -33                 | Program output: -33                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -40                
Correct output: -90                 | Program output: -35                
Correct output: -89                 | Program output: -40                
Correct output: 6                   | Program output: 60                 
Correct output: -49                 | Program output: -5                 
Correct output: -91                 | Program output: -8                 
Correct output: -82                 | Program output: -82                
Correct output: -39                 | Program output: -36                
Correct output: -83                 | Program output: -4                 
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -76                
Correct output: -19                 | Program output: -11                
Correct output: -73                 | Program output: -6                 
Correct output: -87                 | Program output: -87                
Correct output: -39                 | Program output: -39                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 1, :instruction in2} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_flush} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 1, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items})
Lexicase best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing () (boolean_and exec_while (integer_flush integer_min) integer_gte boolean_and) exec_while (integer_flush print_integer) boolean_pop) in2 tag_exec_634 () exec_do*times (print_integer boolean_dup_times exec_flush print_integer exec_while ()) boolean_swap exec_pop (print_integer exec_pop (integer_fromboolean boolean_stackdepth) exec_swap (integer_gt exec_do*while (in2 print_integer boolean_dup_times integer_max print_integer boolean_flush)) (in2) exec_k () (exec_do*count (exec_noop boolean_dup_items exec_dup (exec_y (integer_min) integer_inc boolean_xor integer_dup integer_dup_items)))))
Lexicase best errors: [1 0 0 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 70
Percent parens: 0.271
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 1, :instruction in2} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_flush} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 1, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items})
Zero cases best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing () (boolean_and exec_while (integer_flush integer_min) integer_gte boolean_and) exec_while (integer_flush print_integer) boolean_pop) in2 tag_exec_634 () exec_do*times (print_integer boolean_dup_times exec_flush print_integer exec_while ()) boolean_swap exec_pop (print_integer exec_pop (integer_fromboolean boolean_stackdepth) exec_swap (integer_gt exec_do*while (in2 print_integer boolean_dup_times integer_max print_integer boolean_flush)) (in2) exec_k () (exec_do*count (exec_noop boolean_dup_items exec_dup (exec_y (integer_min) integer_inc boolean_xor integer_dup integer_dup_items)))))
Zero cases best errors: [1 0 0 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 70
Percent parens: 0.271
--- Lexicase Population Statistics ---
Count of elite individuals by case: (169 852 182 813 306 460 237 182 240 499)
Population mean number of elite cases: 3.94
Count of perfect (error zero) individuals by case: (169 852 182 813 306 460 237 182 240 499)
Population mean number of perfect (error zero) cases: 3.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 1, :instruction in2} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 1, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) integer_gte boolean_and exec_while (integer_flush print_integer) boolean_pop) (in2) tag_exec_634 () exec_do*times (print_integer boolean_invert_first_then_and exec_flush print_integer exec_while ()) boolean_swap exec_pop (print_integer exec_pop (integer_fromboolean boolean_stackdepth) exec_swap (integer_gt exec_do*while (integer_rot exec_do*while (exec_do*count (exec_do*times (boolean_dup_items boolean_swap exec_pop (print_integer exec_pop (integer_fromboolean boolean_stackdepth) boolean_shove integer_gt exec_do*while (exec_yankdup print_integer boolean_dup_times integer_max print_integer exec_while ()) in2) exec_k (exec_do*count (exec_noop) boolean_dup_items exec_dup (exec_y (integer_min) integer_inc exec_while (integer_dup integer_dup_times in1) boolean_empty integer_dup_items)) ()))))) ())))
Errors: [1 0 0 0 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 68
Size: 95
Percent parens: 0.284
--- Population Statistics ---
Average total errors in population: 6.06
Median total errors in population: 6
Error averages by case: (0.831 0.148 0.818 0.187 0.694 0.54 0.763 0.818 0.76 0.501)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.707
Average program size in population (points): 88.533
Average percent parens in population: 0.309
Minimum age in population: 39.17895364761353
Maximum age in population: 43.24777881801128
Average age in population: 41.41780004759133
Median age in population: 41.49252405762672
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 42
Genome diversity (% unique genomes):	 0.742
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.74
Total error diversity:				 0.008
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.091
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 8230931
--- Timings ---
Current time: 1559314399095 milliseconds
Total Time:          71.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.1 seconds, 75.7%
Fitness Testing:     10.4 seconds, 14.6%
Report:               6.8 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -63                 | Program output: -63                
Correct output: 20                  | Program output: 20                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -28                 | Program output: 62                 
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 100                
Correct output: -1                  | Program output: -1                 
Correct output: 33                  | Program output: 33                 
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 53                 
Correct output: 14                  | Program output: 77                 
Correct output: 8                   | Program output: 49                 
Correct output: 32                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 82                 
Correct output: 57                  | Program output: 57                 
Correct output: 12                  | Program output: 95                 
Correct output: 35                  | Program output: 35                 
Correct output: 60                  | Program output: 64                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 91                 
Correct output: 3                   | Program output: 80                 
Correct output: 46                  | Program output: 46                 
Correct output: 56                  | Program output: 98                 
Correct output: 29                  | Program output: 29                 
Correct output: 0                   | Program output: 0                  
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: -39                 | Program output: 1                  
Correct output: -44                 | Program output: 40                 
Correct output: -97                 | Program output: -12                
Correct output: -76                 | Program output: -47                
Correct output: -11                 | Program output: -11                
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: 74                 
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 55                 
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -27                 | Program output: -27                
Correct output: -82                 | Program output: -82                
Correct output: -73                 | Program output: 46                 
Correct output: -88                 | Program output: -9                 
Correct output: -52                 | Program output: -52                
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -53                
Correct output: -64                 | Program output: -40                
Correct output: -68                 | Program output: -10                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: 1                  
Correct output: -55                 | Program output: -55                
Correct output: -87                 | Program output: -50                
Correct output: -40                 | Program output: -39                
Correct output: -95                 | Program output: -27                
Correct output: -68                 | Program output: -66                
Correct output: -28                 | Program output: -28                
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -2                 
Correct output: -67                 | Program output: -18                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: -41                
Correct output: -64                 | Program output: 18                 
Correct output: -24                 | Program output: 70                 
Correct output: -35                 | Program output: -35                
Correct output: -33                 | Program output: -33                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -40                
Correct output: -90                 | Program output: -35                
Correct output: -89                 | Program output: -40                
Correct output: 6                   | Program output: 60                 
Correct output: -49                 | Program output: -5                 
Correct output: -91                 | Program output: -8                 
Correct output: -82                 | Program output: -82                
Correct output: -39                 | Program output: -36                
Correct output: -83                 | Program output: -4                 
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -76                
Correct output: -19                 | Program output: -11                
Correct output: -73                 | Program output: -6                 
Correct output: -87                 | Program output: -87                
Correct output: -39                 | Program output: -39                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 1, :instruction in2} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_flush} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 1, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items})
Lexicase best program: (in1 exec_eq integer_lte boolean_invert_first_then_and boolean_pop exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) integer_gte boolean_and exec_while (integer_flush print_integer) boolean_pop) (in2) tag_exec_634 () exec_do*times (print_integer boolean_dup_times exec_flush print_integer exec_while ()) boolean_swap exec_pop (print_integer exec_pop (integer_fromboolean boolean_stackdepth) exec_swap (integer_gt exec_do*while (in2 print_integer boolean_dup_times integer_max print_integer boolean_flush)) (in2) exec_k () (exec_do*count (exec_noop) boolean_dup_items exec_dup (exec_y (integer_min) integer_inc boolean_xor integer_dup integer_dup_items))))
Lexicase best errors: [0 0 1 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 69
Percent parens: 0.261
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 1, :instruction in2} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 2, :instruction boolean_flush} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 1, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_items})
Zero cases best program: (in1 exec_eq integer_lte boolean_invert_first_then_and boolean_pop exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) integer_gte boolean_and exec_while (integer_flush print_integer) boolean_pop) (in2) tag_exec_634 () exec_do*times (print_integer boolean_dup_times exec_flush print_integer exec_while ()) boolean_swap exec_pop (print_integer exec_pop (integer_fromboolean boolean_stackdepth) exec_swap (integer_gt exec_do*while (in2 print_integer boolean_dup_times integer_max print_integer boolean_flush)) (in2) exec_k () (exec_do*count (exec_noop) boolean_dup_items exec_dup (exec_y (integer_min) integer_inc boolean_xor integer_dup integer_dup_items))))
Zero cases best errors: [0 0 1 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 69
Percent parens: 0.261
--- Lexicase Population Statistics ---
Count of elite individuals by case: (750 464 17 750 184 680 464 204 464 203)
Population mean number of elite cases: 4.18
Count of perfect (error zero) individuals by case: (750 464 17 750 184 680 464 204 464 203)
Population mean number of perfect (error zero) cases: 4.18
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 1, :instruction in2} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing})
Best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing () (exec_do*while (boolean_rot exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) integer_gte boolean_and exec_while (integer_flush print_integer) boolean_pop) (in2) tag_exec_634 () exec_do*times (print_integer boolean_dup_times exec_flush print_integer exec_while ()) in2) exec_k () (exec_do*count (exec_do*times (boolean_xor exec_dup (exec_do*times (boolean_xor exec_dup (integer_rot exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (integer_rot exec_do*while (in2) exec_k () (exec_do*while (in2) exec_k () (exec_do*count (exec_do*times (print_integer) in2 exec_k (integer_dup exec_s (integer_min) () (boolean_invert_second_then_and exec_while (integer_dup exec_stackdepth in1 exec_flush exec_y_when_autoconstructing ()))) ()))))))))))))))))
Errors: [0 0 1 0 1 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 64
Size: 102
Percent parens: 0.373
--- Population Statistics ---
Average total errors in population: 5.82
Median total errors in population: 6
Error averages by case: (0.25 0.536 0.983 0.25 0.816 0.32 0.536 0.796 0.536 0.797)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.335
Average program size in population (points): 87.961
Average percent parens in population: 0.321
Minimum age in population: 40.17895364761353
Maximum age in population: 44.73140503466129
Average age in population: 42.8847634935081
Median age in population: 42.98790267854929
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 37
Genome diversity (% unique genomes):	 0.808
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.805
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 8500500
--- Timings ---
Current time: 1559314401501 milliseconds
Total Time:          73.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.9 seconds, 75.8%
Fitness Testing:     10.7 seconds, 14.5%
Report:               7.1 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -63                 | Program output: -63                
Correct output: 20                  | Program output: 20                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -28                 | Program output: 62                 
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 100                
Correct output: -1                  | Program output: -1                 
Correct output: 33                  | Program output: 33                 
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 53                 
Correct output: 14                  | Program output: 77                 
Correct output: 8                   | Program output: 49                 
Correct output: 32                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 82                 
Correct output: 57                  | Program output: 57                 
Correct output: 12                  | Program output: 95                 
Correct output: 35                  | Program output: 35                 
Correct output: 60                  | Program output: 64                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 91                 
Correct output: 3                   | Program output: 80                 
Correct output: 46                  | Program output: 46                 
Correct output: 56                  | Program output: 98                 
Correct output: 29                  | Program output: 29                 
Correct output: 0                   | Program output: 0                  
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: -39                 | Program output: 1                  
Correct output: -44                 | Program output: 40                 
Correct output: -97                 | Program output: -12                
Correct output: -76                 | Program output: -47                
Correct output: -11                 | Program output: -11                
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: 74                 
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 55                 
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -27                 | Program output: -27                
Correct output: -82                 | Program output: -82                
Correct output: -73                 | Program output: 46                 
Correct output: -88                 | Program output: -9                 
Correct output: -52                 | Program output: -52                
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -53                
Correct output: -64                 | Program output: -40                
Correct output: -68                 | Program output: -10                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: 1                  
Correct output: -55                 | Program output: -55                
Correct output: -87                 | Program output: -50                
Correct output: -40                 | Program output: -39                
Correct output: -95                 | Program output: -27                
Correct output: -68                 | Program output: -66                
Correct output: -28                 | Program output: -28                
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -2                 
Correct output: -67                 | Program output: -18                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: -41                
Correct output: -64                 | Program output: 18                 
Correct output: -24                 | Program output: 70                 
Correct output: -35                 | Program output: -35                
Correct output: -33                 | Program output: -33                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -40                
Correct output: -90                 | Program output: -35                
Correct output: -89                 | Program output: -40                
Correct output: 6                   | Program output: 60                 
Correct output: -49                 | Program output: -5                 
Correct output: -91                 | Program output: -8                 
Correct output: -82                 | Program output: -82                
Correct output: -39                 | Program output: -36                
Correct output: -83                 | Program output: -4                 
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -76                
Correct output: -19                 | Program output: -11                
Correct output: -73                 | Program output: -6                 
Correct output: -87                 | Program output: -87                
Correct output: -39                 | Program output: -39                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction tag_integer_671} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 1, :instruction in2} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 1, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Lexicase best program: (in1 exec_eq boolean_yankdup boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing () (boolean_rot exec_if (tag_integer_671 boolean_and exec_while (integer_flush integer_min) integer_gte boolean_and exec_while (integer_flush print_integer) boolean_pop) (in2) tag_exec_634 () exec_do*times (print_integer boolean_invert_first_then_and exec_flush print_integer exec_while ()) boolean_swap exec_pop (print_integer exec_pop (integer_fromboolean boolean_stackdepth) exec_swap (integer_gt exec_do*while (integer_rot exec_do*while (exec_do*count (exec_do*times (boolean_dup_items boolean_swap exec_pop (print_integer exec_pop (integer_fromboolean boolean_stackdepth) boolean_shove integer_gt exec_do*while (integer_gte print_integer boolean_dup_times integer_max print_integer exec_while ()) in2) exec_k (exec_dup_times (exec_noop) boolean_dup_items exec_dup (exec_y (integer_min) integer_inc exec_while (integer_dup integer_dup_times in1) boolean_empty integer_dup_items)) ()))))) ()))))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 100
Percent parens: 0.290
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction tag_integer_671} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 1, :instruction in2} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 1, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Zero cases best program: (in1 exec_eq boolean_yankdup boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing () (boolean_rot exec_if (tag_integer_671 boolean_and exec_while (integer_flush integer_min) integer_gte boolean_and exec_while (integer_flush print_integer) boolean_pop) (in2) tag_exec_634 () exec_do*times (print_integer boolean_invert_first_then_and exec_flush print_integer exec_while ()) boolean_swap exec_pop (print_integer exec_pop (integer_fromboolean boolean_stackdepth) exec_swap (integer_gt exec_do*while (integer_rot exec_do*while (exec_do*count (exec_do*times (boolean_dup_items boolean_swap exec_pop (print_integer exec_pop (integer_fromboolean boolean_stackdepth) boolean_shove integer_gt exec_do*while (integer_gte print_integer boolean_dup_times integer_max print_integer exec_while ()) in2) exec_k (exec_dup_times (exec_noop) boolean_dup_items exec_dup (exec_y (integer_min) integer_inc exec_while (integer_dup integer_dup_times in1) boolean_empty integer_dup_items)) ()))))) ()))))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 100
Percent parens: 0.290
--- Lexicase Population Statistics ---
Count of elite individuals by case: (829 417 703 829 677 70 703 406 418 903)
Population mean number of elite cases: 5.95
Count of perfect (error zero) individuals by case: (829 417 703 829 677 70 703 406 418 903)
Population mean number of perfect (error zero) cases: 5.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 1, :instruction in2} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 2, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Best program: (in1 exec_eq integer_lte exec_do*count (boolean_rot exec_k_when_autoconstructing (boolean_and exec_while (integer_flush print_integer) boolean_pop) (in2) tag_exec_634 () exec_do*times (print_integer boolean_dup_times exec_flush print_integer exec_while ()) boolean_swap exec_pop (print_integer exec_pop (integer_fromboolean boolean_stackdepth) integer_rot boolean_dup exec_do*count (exec_do*times (boolean_dup_items exec_dup (integer_rot exec_do*while (in2) exec_k () (exec_do*while (in2) exec_y_when_autoconstructing (exec_do*count (exec_do*times (print_integer) in2 exec_k (integer_dup exec_s (integer_min) () (integer_inc exec_while (integer_dup exec_stackdepth in1 boolean_empty integer_dup_items))) ())))))))))
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 53
Size: 79
Percent parens: 0.329
--- Population Statistics ---
Average total errors in population: 4.045
Median total errors in population: 5
Error averages by case: (0.171 0.583 0.297 0.171 0.323 0.93 0.297 0.594 0.582 0.097)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.713
Average program size in population (points): 86.638
Average percent parens in population: 0.331
Minimum age in population: 41.17895364761353
Maximum age in population: 46.44972471147776
Average age in population: 44.59111261702329
Median age in population: 44.64620605111122
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 72
Genome diversity (% unique genomes):	 0.801
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 72
Syntactic diversity (% unique Push programs):	 0.799
Total error diversity:				 0.01
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 8723414
--- Timings ---
Current time: 1559314403815 milliseconds
Total Time:          76.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.7 seconds, 75.8%
Fitness Testing:     11.0 seconds, 14.4%
Report:               7.3 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -63                 | Program output: -63                
Correct output: 20                  | Program output: 20                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -28                 | Program output: 62                 
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 100                
Correct output: -1                  | Program output: -1                 
Correct output: 33                  | Program output: 33                 
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 53                 
Correct output: 14                  | Program output: 77                 
Correct output: 8                   | Program output: 49                 
Correct output: 32                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 82                 
Correct output: 57                  | Program output: 57                 
Correct output: 12                  | Program output: 95                 
Correct output: 35                  | Program output: 35                 
Correct output: 60                  | Program output: 64                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 91                 
Correct output: 3                   | Program output: 80                 
Correct output: 46                  | Program output: 46                 
Correct output: 56                  | Program output: 98                 
Correct output: 29                  | Program output: 29                 
Correct output: 0                   | Program output: 0                  
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: -39                 | Program output: 1                  
Correct output: -44                 | Program output: 40                 
Correct output: -97                 | Program output: -12                
Correct output: -76                 | Program output: -47                
Correct output: -11                 | Program output: -11                
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: 74                 
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 55                 
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -27                 | Program output: -27                
Correct output: -82                 | Program output: -82                
Correct output: -73                 | Program output: 46                 
Correct output: -88                 | Program output: -9                 
Correct output: -52                 | Program output: -52                
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -53                
Correct output: -64                 | Program output: -40                
Correct output: -68                 | Program output: -10                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: 1                  
Correct output: -55                 | Program output: -55                
Correct output: -87                 | Program output: -50                
Correct output: -40                 | Program output: -39                
Correct output: -95                 | Program output: -27                
Correct output: -68                 | Program output: -66                
Correct output: -28                 | Program output: -28                
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -2                 
Correct output: -67                 | Program output: -18                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: -41                
Correct output: -64                 | Program output: 18                 
Correct output: -24                 | Program output: 70                 
Correct output: -35                 | Program output: -35                
Correct output: -33                 | Program output: -33                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -40                
Correct output: -90                 | Program output: -35                
Correct output: -89                 | Program output: -40                
Correct output: 6                   | Program output: 60                 
Correct output: -49                 | Program output: -5                 
Correct output: -91                 | Program output: -8                 
Correct output: -82                 | Program output: -82                
Correct output: -39                 | Program output: -36                
Correct output: -83                 | Program output: -4                 
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -76                
Correct output: -19                 | Program output: -11                
Correct output: -73                 | Program output: -6                 
Correct output: -87                 | Program output: -87                
Correct output: -39                 | Program output: -39                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 1, :instruction in2} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction -76} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 2, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Lexicase best program: (in1 boolean_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing () (exec_do*while (boolean_rot exec_k_when_autoconstructing (boolean_and exec_while (integer_flush) integer_min) (integer_gte boolean_and exec_while (integer_flush print_integer) boolean_pop) in2) tag_exec_634 () exec_do*times (print_integer boolean_dup_times exec_flush print_integer exec_while ()) in2) exec_k () (exec_do*count (exec_do*times (boolean_xor exec_dup (integer_rot exec_do*while (exec_do*count (integer_rot exec_do*while (in2) exec_k () (-76 in2) exec_k () (exec_do*count (exec_do*times (print_integer) in2 exec_k (integer_dup boolean_or integer_min) () integer_inc exec_while (integer_dup exec_stackdepth in1 boolean_empty integer_dup_items)))))))))))
Lexicase best errors: [0 0 0 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 87
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 1, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 1, :instruction in2} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction -76} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 2, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Zero cases best program: (in1 boolean_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing () (exec_do*while (boolean_rot exec_k_when_autoconstructing (boolean_and exec_while (integer_flush) integer_min) (integer_gte boolean_and exec_while (integer_flush print_integer) boolean_pop) in2) tag_exec_634 () exec_do*times (print_integer boolean_dup_times exec_flush print_integer exec_while ()) in2) exec_k () (exec_do*count (exec_do*times (boolean_xor exec_dup (integer_rot exec_do*while (exec_do*count (integer_rot exec_do*while (in2) exec_k () (-76 in2) exec_k () (exec_do*count (exec_do*times (print_integer) in2 exec_k (integer_dup boolean_or integer_min) () integer_inc exec_while (integer_dup exec_stackdepth in1 boolean_empty integer_dup_items)))))))))))
Zero cases best errors: [0 0 0 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 87
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (838 751 712 1 1000 144 712 724 724 746)
Population mean number of elite cases: 6.35
Count of perfect (error zero) individuals by case: (838 751 712 1 0 144 712 724 724 746)
Population mean number of perfect (error zero) cases: 5.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 1, :instruction in2} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 2, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) integer_gte boolean_and exec_while (integer_flush print_integer) boolean_pop) (in2) tag_exec_634 () exec_do*times (print_integer boolean_dup_times exec_flush print_integer exec_while ()) boolean_swap exec_pop (print_integer exec_k (exec_do*count (exec_do*times (boolean_xor exec_dup (integer_rot exec_do*while (exec_do*times (boolean_xor exec_dup (integer_rot exec_do*while (exec_do*count (exec_do*times (boolean_dup_items integer_stackdepth integer_rot exec_do*while (in2) exec_k () (exec_do*while (in2) exec_k () (exec_do*count (exec_do*times (print_integer) in2 exec_k (integer_dup exec_s (integer_min) () (integer_inc exec_while (integer_dup exec_stackdepth in1 boolean_empty integer_dup_items))) ()))))))))))))) ())))
Errors: [0 0 0 1 1 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 65
Size: 100
Percent parens: 0.350
--- Population Statistics ---
Average total errors in population: 4.648
Median total errors in population: 3
Error averages by case: (0.162 0.249 0.288 0.999 1.0 0.856 0.288 0.276 0.276 0.254)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 58.075
Average program size in population (points): 87.253
Average percent parens in population: 0.331
Minimum age in population: 42.17895364761353
Maximum age in population: 47.70544494129717
Average age in population: 45.87571224761941
Median age in population: 45.98709636740386
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 16
Genome diversity (% unique genomes):	 0.83
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.828
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 8988941
--- Timings ---
Current time: 1559314406171 milliseconds
Total Time:          78.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.5 seconds, 75.9%
Fitness Testing:     11.3 seconds, 14.3%
Report:               7.6 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 513
Test mean error for best: 0.51300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 20                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -28                 | Program output: 62                 
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 100                
Correct output: -1                  | Program output: -1                 
Correct output: 33                  | Program output: 33                 
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 53                 
Correct output: 14                  | Program output: 77                 
Correct output: 8                   | Program output: 49                 
Correct output: 32                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 82                 
Correct output: 57                  | Program output: 57                 
Correct output: 12                  | Program output: 95                 
Correct output: 35                  | Program output: 35                 
Correct output: 60                  | Program output: 64                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 91                 
Correct output: 3                   | Program output: 80                 
Correct output: 46                  | Program output: 46                 
Correct output: 56                  | Program output: 98                 
Correct output: 29                  | Program output: 29                 
Correct output: 0                   | Program output: 53                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: -39                 | Program output: 1                  
Correct output: -44                 | Program output: 40                 
Correct output: -97                 | Program output: -64                
Correct output: -76                 | Program output: -13                
Correct output: -11                 | Program output: -3                 
Correct output: -95                 | Program output: -15                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -75                
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 55                 
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: 40                 
Correct output: -27                 | Program output: 21                 
Correct output: -82                 | Program output: -19                
Correct output: -73                 | Program output: 46                 
Correct output: -88                 | Program output: -88                
Correct output: -52                 | Program output: -52                
Correct output: -79                 | Program output: -59                
Correct output: -71                 | Program output: -17                
Correct output: -53                 | Program output: -53                
Correct output: -64                 | Program output: -64                
Correct output: -68                 | Program output: -68                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: 1                  
Correct output: -55                 | Program output: -13                
Correct output: -87                 | Program output: -87                
Correct output: -40                 | Program output: -40                
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: -68                
Correct output: -28                 | Program output: -13                
Correct output: -84                 | Program output: -80                
Correct output: -92                 | Program output: -92                
Correct output: -67                 | Program output: -27                
Correct output: -67                 | Program output: -56                
Correct output: -65                 | Program output: -9                 
Correct output: -76                 | Program output: -28                
Correct output: -87                 | Program output: -87                
Correct output: -64                 | Program output: -64                
Correct output: -24                 | Program output: 70                 
Correct output: -35                 | Program output: -6                 
Correct output: -33                 | Program output: -33                
Correct output: -17                 | Program output: -4                 
Correct output: -91                 | Program output: -27                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -43                
Correct output: -90                 | Program output: -18                
Correct output: -89                 | Program output: -33                
Correct output: 6                   | Program output: 60                 
Correct output: -49                 | Program output: -22                
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -34                
Correct output: -39                 | Program output: -39                
Correct output: -83                 | Program output: -83                
Correct output: -37                 | Program output: 47                 
Correct output: -76                 | Program output: -70                
Correct output: -19                 | Program output: 8                  
Correct output: -73                 | Program output: -6                 
Correct output: -87                 | Program output: -87                
Correct output: -39                 | Program output: -39                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_if} {:close 1, :instruction integer_eq} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*times} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Lexicase best program: (in1 exec_eq boolean_yankdup boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing () (exec_while (integer_flush integer_flush exec_if () (integer_eq) in2) in3) exec_do*times (print_integer boolean_dup_times exec_flush print_integer exec_while () in2) exec_k (exec_do*count (exec_do*times (boolean_xor exec_dup (integer_rot exec_do*while (exec_do*count (exec_do*times () boolean_dup_items) exec_dup (integer_rot exec_do*while (in2 integer_add) exec_do*while (in2) exec_k () (exec_do*while (in2) exec_k () (exec_do*count (exec_do*times (exec_do*while (in2) exec_k () (exec_do*while (in2) exec_k (exec_do*count (exec_do*count (print_integer) in2 integer_max integer_dup integer_dup_times in1) boolean_empty integer_dup_items) ()))))))))))) ()))
Lexicase best errors: [1 1 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 94
Percent parens: 0.372
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_if} {:close 1, :instruction integer_eq} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*times} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 1, :instruction integer_add} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*count} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Zero cases best program: (in1 exec_eq boolean_yankdup boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing () (exec_while (integer_flush integer_flush exec_if () (integer_eq) in2) in3) exec_do*times (print_integer boolean_dup_times exec_flush print_integer exec_while () in2) exec_k (exec_do*count (exec_do*times (boolean_xor exec_dup (integer_rot exec_do*while (exec_do*count (exec_do*times () boolean_dup_items) exec_dup (integer_rot exec_do*while (in2 integer_add) exec_do*while (in2) exec_k () (exec_do*while (in2) exec_k () (exec_do*count (exec_do*times (exec_do*while (in2) exec_k () (exec_do*while (in2) exec_k (exec_do*count (exec_do*count (print_integer) in2 integer_max integer_dup integer_dup_times in1) boolean_empty integer_dup_items) ()))))))))))) ()))
Zero cases best errors: [1 1 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 94
Percent parens: 0.372
--- Lexicase Population Statistics ---
Count of elite individuals by case: (507 30 743 94 890 285 744 744 900 285)
Population mean number of elite cases: 5.22
Count of perfect (error zero) individuals by case: (507 30 743 94 890 285 744 744 900 285)
Population mean number of perfect (error zero) cases: 5.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction -76} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_k})
Best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) integer_gte boolean_and exec_while (integer_flush boolean_pop) in3) (tag_exec_634 () exec_do*times (print_integer boolean_dup_times exec_flush print_integer exec_while ()) in2) exec_k () (exec_do*count (exec_do*times (boolean_xor exec_dup (integer_rot boolean_or exec_do*count (exec_do*times (boolean_dup_items exec_dup (integer_rot exec_do*while (in2) exec_k () (-76 in2) exec_k () (exec_do*count (exec_do*times (print_integer) in2 exec_k () ())))))))))))
Errors: [1 1 0 1 0 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 47
Size: 73
Percent parens: 0.356
--- Population Statistics ---
Average total errors in population: 4.778
Median total errors in population: 4
Error averages by case: (0.493 0.97 0.257 0.906 0.11 0.715 0.256 0.256 0.1 0.715)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.357
Average program size in population (points): 86.676
Average percent parens in population: 0.335
Minimum age in population: 43.91403093934059
Maximum age in population: 49.22721666377038
Average age in population: 47.40889321231283
Median age in population: 47.52921103779227
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 62
Genome diversity (% unique genomes):	 0.762
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.758
Total error diversity:				 0.007
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 9237393
--- Timings ---
Current time: 1559314408530 milliseconds
Total Time:          80.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.4 seconds, 76.0%
Fitness Testing:     11.5 seconds, 14.2%
Report:               7.8 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -63                 | Program output: -63                
Correct output: 20                  | Program output: 20                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -28                 | Program output: 62                 
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 100                
Correct output: -1                  | Program output: -1                 
Correct output: 33                  | Program output: 33                 
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 53                 
Correct output: 14                  | Program output: 77                 
Correct output: 8                   | Program output: 49                 
Correct output: 32                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 82                 
Correct output: 57                  | Program output: 57                 
Correct output: 12                  | Program output: 95                 
Correct output: 35                  | Program output: 35                 
Correct output: 60                  | Program output: 64                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 91                 
Correct output: 3                   | Program output: 80                 
Correct output: 46                  | Program output: 46                 
Correct output: 56                  | Program output: 98                 
Correct output: 29                  | Program output: 29                 
Correct output: 0                   | Program output: 0                  
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: -39                 | Program output: 1                  
Correct output: -44                 | Program output: 40                 
Correct output: -97                 | Program output: -12                
Correct output: -76                 | Program output: -47                
Correct output: -11                 | Program output: -11                
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: 74                 
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 55                 
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -27                 | Program output: -27                
Correct output: -82                 | Program output: -82                
Correct output: -73                 | Program output: 46                 
Correct output: -88                 | Program output: -9                 
Correct output: -52                 | Program output: -52                
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -53                
Correct output: -64                 | Program output: -40                
Correct output: -68                 | Program output: -10                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: 1                  
Correct output: -55                 | Program output: -55                
Correct output: -87                 | Program output: -50                
Correct output: -40                 | Program output: -39                
Correct output: -95                 | Program output: -27                
Correct output: -68                 | Program output: -66                
Correct output: -28                 | Program output: -28                
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -2                 
Correct output: -67                 | Program output: -18                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: -41                
Correct output: -64                 | Program output: 18                 
Correct output: -24                 | Program output: 70                 
Correct output: -35                 | Program output: -35                
Correct output: -33                 | Program output: -33                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -40                
Correct output: -90                 | Program output: -35                
Correct output: -89                 | Program output: -40                
Correct output: 6                   | Program output: 60                 
Correct output: -49                 | Program output: -5                 
Correct output: -91                 | Program output: -8                 
Correct output: -82                 | Program output: -82                
Correct output: -39                 | Program output: -36                
Correct output: -83                 | Program output: -4                 
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -76                
Correct output: -19                 | Program output: -11                
Correct output: -73                 | Program output: -6                 
Correct output: -87                 | Program output: -87                
Correct output: -39                 | Program output: -39                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction tag_integer_671} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 2, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction -76} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 2, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Lexicase best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing () (boolean_rot exec_if (tag_integer_671 print_boolean boolean_dup_times boolean_pop boolean_invert_first_then_and) () exec_stackdepth exec_shove (exec_k_when_autoconstructing (in2) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush print_integer print_integer exec_while ()) in2) exec_k () (exec_do*count (exec_do*times (boolean_xor exec_dup (integer_rot boolean_or exec_do*count (exec_do*times (boolean_dup_items exec_dup (integer_rot exec_do*while (in2) exec_k () (-76 in2) exec_k () (exec_do*count (exec_do*times (print_integer) in2 exec_k (integer_dup boolean_or integer_min) () integer_inc exec_while (integer_dup exec_stackdepth in1 boolean_empty exec_y_when_autoconstructing ())))))))))))))
Lexicase best errors: [0 0 0 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 90
Percent parens: 0.344
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction tag_integer_671} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 2, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction -76} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_or} {:close 2, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing})
Zero cases best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing () (boolean_rot exec_if (tag_integer_671 print_boolean boolean_dup_times boolean_pop boolean_invert_first_then_and) () exec_stackdepth exec_shove (exec_k_when_autoconstructing (in2) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush print_integer print_integer exec_while ()) in2) exec_k () (exec_do*count (exec_do*times (boolean_xor exec_dup (integer_rot boolean_or exec_do*count (exec_do*times (boolean_dup_items exec_dup (integer_rot exec_do*while (in2) exec_k () (-76 in2) exec_k () (exec_do*count (exec_do*times (print_integer) in2 exec_k (integer_dup boolean_or integer_min) () integer_inc exec_while (integer_dup exec_stackdepth in1 boolean_empty exec_y_when_autoconstructing ())))))))))))))
Zero cases best errors: [0 0 0 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 90
Percent parens: 0.344
--- Lexicase Population Statistics ---
Count of elite individuals by case: (779 866 130 10 511 399 138 763 763 779)
Population mean number of elite cases: 5.14
Count of perfect (error zero) individuals by case: (779 866 130 10 511 399 138 763 763 779)
Population mean number of perfect (error zero) cases: 5.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction tag_integer_671} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 2, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 1, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing () (boolean_rot exec_if (tag_integer_671 print_boolean boolean_dup_times boolean_pop boolean_invert_first_then_and) () exec_stackdepth exec_shove (exec_k_when_autoconstructing (in2 tag_exec_634 ()) (exec_do*times (print_integer boolean_dup_times exec_flush print_integer exec_while ()) in2) exec_k () (exec_do*count (in2) in3) exec_shove (print_integer boolean_dup_times integer_empty print_integer exec_while ()) in4) exec_k () (exec_do*count (integer_yank) exec_k (exec_dup (exec_y (integer_min) integer_inc exec_while (integer_dup integer_dup_times in1 boolean_empty integer_dup_items))) ()))))
Errors: [0 0 0 1 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 50
Size: 75
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 4.862
Median total errors in population: 4
Error averages by case: (0.221 0.134 0.87 0.99 0.489 0.601 0.862 0.237 0.237 0.221)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.837
Average program size in population (points): 83.008
Average percent parens in population: 0.335
Minimum age in population: 47.15157472714782
Maximum age in population: 50.63490171125159
Average age in population: 49.05139731541509
Median age in population: 49.20267694466747
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.671
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.667
Total error diversity:				 0.008
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 9535965
--- Timings ---
Current time: 1559314410944 milliseconds
Total Time:          83.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.2 seconds, 76.0%
Fitness Testing:     11.8 seconds, 14.2%
Report:               8.1 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -63                 | Program output: -63                
Correct output: 20                  | Program output: 20                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -28                 | Program output: 62                 
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 100                
Correct output: -1                  | Program output: -1                 
Correct output: 33                  | Program output: 33                 
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 53                 
Correct output: 14                  | Program output: 77                 
Correct output: 8                   | Program output: 49                 
Correct output: 32                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 82                 
Correct output: 57                  | Program output: 57                 
Correct output: 12                  | Program output: 95                 
Correct output: 35                  | Program output: 35                 
Correct output: 60                  | Program output: 64                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 91                 
Correct output: 3                   | Program output: 80                 
Correct output: 46                  | Program output: 46                 
Correct output: 56                  | Program output: 98                 
Correct output: 29                  | Program output: 29                 
Correct output: 0                   | Program output: 0                  
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: -39                 | Program output: 1                  
Correct output: -44                 | Program output: 40                 
Correct output: -97                 | Program output: -12                
Correct output: -76                 | Program output: -47                
Correct output: -11                 | Program output: -11                
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: 74                 
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 55                 
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -27                 | Program output: -27                
Correct output: -82                 | Program output: -82                
Correct output: -73                 | Program output: 46                 
Correct output: -88                 | Program output: -9                 
Correct output: -52                 | Program output: -52                
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -53                
Correct output: -64                 | Program output: -40                
Correct output: -68                 | Program output: -10                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: 1                  
Correct output: -55                 | Program output: -55                
Correct output: -87                 | Program output: -50                
Correct output: -40                 | Program output: -39                
Correct output: -95                 | Program output: -27                
Correct output: -68                 | Program output: -66                
Correct output: -28                 | Program output: -28                
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -2                 
Correct output: -67                 | Program output: -18                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: -41                
Correct output: -64                 | Program output: 18                 
Correct output: -24                 | Program output: 70                 
Correct output: -35                 | Program output: -35                
Correct output: -33                 | Program output: -33                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -40                
Correct output: -90                 | Program output: -35                
Correct output: -89                 | Program output: -40                
Correct output: 6                   | Program output: 60                 
Correct output: -49                 | Program output: -5                 
Correct output: -91                 | Program output: -8                 
Correct output: -82                 | Program output: -82                
Correct output: -39                 | Program output: -36                
Correct output: -83                 | Program output: -4                 
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -76                
Correct output: -19                 | Program output: -11                
Correct output: -73                 | Program output: -6                 
Correct output: -87                 | Program output: -87                
Correct output: -39                 | Program output: -39                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction tag_integer_671} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 2, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 1, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Lexicase best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing () (boolean_rot exec_if (tag_integer_671 print_boolean boolean_dup_times boolean_pop boolean_invert_first_then_and) () exec_stackdepth exec_shove (exec_k_when_autoconstructing (in2) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush print_integer exec_while ()) in2) exec_k () (exec_do*count (in2) exec_if () (exec_shove (print_integer boolean_dup_times integer_empty print_integer exec_while ()) in4) exec_k () (exec_do*count (integer_yank) exec_k (exec_dup (exec_y (integer_min) integer_inc exec_while (integer_dup integer_dup_times in1) boolean_empty integer_dup_items)) ())))))
Lexicase best errors: [0 0 0 0 0 0 1 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 77
Percent parens: 0.351
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction tag_integer_671} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 2, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 1, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Zero cases best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing () (boolean_rot exec_if (tag_integer_671 print_boolean boolean_dup_times boolean_pop boolean_invert_first_then_and) () exec_stackdepth exec_shove (exec_k_when_autoconstructing (in2) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush print_integer exec_while ()) in2) exec_k () (exec_do*count (in2) exec_if () (exec_shove (print_integer boolean_dup_times integer_empty print_integer exec_while ()) in4) exec_k () (exec_do*count (integer_yank) exec_k (exec_dup (exec_y (integer_min) integer_inc exec_while (integer_dup integer_dup_times in1) boolean_empty integer_dup_items)) ())))))
Zero cases best errors: [0 0 0 0 0 0 1 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 77
Percent parens: 0.351
--- Lexicase Population Statistics ---
Count of elite individuals by case: (635 722 689 916 720 639 11 13 689 5)
Population mean number of elite cases: 5.04
Count of perfect (error zero) individuals by case: (635 722 689 916 720 639 11 13 689 5)
Population mean number of perfect (error zero) cases: 5.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction tag_integer_671} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 2, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 1, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 1, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing () (boolean_rot exec_if (tag_integer_671 print_boolean boolean_dup_times boolean_pop boolean_invert_first_then_and) () exec_stackdepth exec_shove (exec_k_when_autoconstructing (in2) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush print_integer exec_while () in2) exec_k () (exec_do*count (in2) in3) exec_shove (print_integer boolean_dup_times integer_empty print_integer exec_while ()) in4) exec_k () (exec_do*count (integer_yank) exec_k (exec_dup (exec_y (integer_min) integer_inc exec_while (integer_dup integer_dup_times in1) boolean_empty integer_dup_items)) ()))))
Errors: [0 0 0 0 0 0 1 1 0 1]
Total: 3
Mean: 0.3
Genome size: 50
Size: 75
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 4.961
Median total errors in population: 3
Error averages by case: (0.365 0.278 0.311 0.084 0.28 0.361 0.989 0.987 0.311 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.284
Average program size in population (points): 81.359
Average percent parens in population: 0.343
Minimum age in population: 48.39443700946867
Maximum age in population: 52.48432352766395
Average age in population: 50.67734343133797
Median age in population: 50.7197144406382
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 22
Genome diversity (% unique genomes):	 0.637
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.637
Total error diversity:				 0.008
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 9762151
--- Timings ---
Current time: 1559314413378 milliseconds
Total Time:          85.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.1 seconds, 76.0%
Fitness Testing:     12.1 seconds, 14.1%
Report:               8.3 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 459
Test mean error for best: 0.45900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -63                 | Program output: -63                
Correct output: 20                  | Program output: 20                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -28                 | Program output: 62                 
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 100                
Correct output: -1                  | Program output: -1                 
Correct output: 33                  | Program output: 33                 
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 53                 
Correct output: 14                  | Program output: 77                 
Correct output: 8                   | Program output: 49                 
Correct output: 32                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 82                 
Correct output: 57                  | Program output: 57                 
Correct output: 12                  | Program output: 95                 
Correct output: 35                  | Program output: 35                 
Correct output: 60                  | Program output: 64                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 91                 
Correct output: 3                   | Program output: 80                 
Correct output: 46                  | Program output: 46                 
Correct output: 56                  | Program output: 98                 
Correct output: 29                  | Program output: 29                 
Correct output: 0                   | Program output: 0                  
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: -39                 | Program output: 1                  
Correct output: -44                 | Program output: 40                 
Correct output: -97                 | Program output: -12                
Correct output: -76                 | Program output: -13                
Correct output: -11                 | Program output: -3                 
Correct output: -95                 | Program output: -15                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 55                 
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -27                 | Program output: -27                
Correct output: -82                 | Program output: -19                
Correct output: -73                 | Program output: 46                 
Correct output: -88                 | Program output: -88                
Correct output: -52                 | Program output: -52                
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: -17                
Correct output: -53                 | Program output: -53                
Correct output: -64                 | Program output: -40                
Correct output: -68                 | Program output: -10                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: 1                  
Correct output: -55                 | Program output: -55                
Correct output: -87                 | Program output: -87                
Correct output: -40                 | Program output: -39                
Correct output: -95                 | Program output: -27                
Correct output: -68                 | Program output: -66                
Correct output: -28                 | Program output: -13                
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -2                 
Correct output: -67                 | Program output: -18                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: -87                
Correct output: -64                 | Program output: -64                
Correct output: -24                 | Program output: 70                 
Correct output: -35                 | Program output: -35                
Correct output: -33                 | Program output: -33                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -40                
Correct output: -90                 | Program output: -35                
Correct output: -89                 | Program output: -40                
Correct output: 6                   | Program output: 60                 
Correct output: -49                 | Program output: -5                 
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -82                
Correct output: -39                 | Program output: -36                
Correct output: -83                 | Program output: -83                
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -76                
Correct output: -19                 | Program output: -11                
Correct output: -73                 | Program output: -6                 
Correct output: -87                 | Program output: -87                
Correct output: -39                 | Program output: -39                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 2, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 2, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items})
Lexicase best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) integer_gte boolean_and exec_while (integer_flush boolean_pop) in3) (tag_exec_634 () exec_do*times (exec_k_when_autoconstructing (in2) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush exec_dup_items exec_while ()) in2) exec_k () (exec_do*count (in2) in3) integer_rot exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (integer_rot exec_do*while (in2) exec_k () (exec_do*while (in2) exec_y_when_autoconstructing () exec_do*count (exec_do*times (print_integer) in2 exec_k (integer_dup exec_s (integer_min) () (integer_inc exec_while (integer_dup exec_stackdepth integer_inc exec_while (integer_dup exec_stackdepth in1 boolean_not integer_dup_items)))) ())))))))))
Lexicase best errors: [0 1 0 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 98
Percent parens: 0.347
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 2, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 2, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items})
Zero cases best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) integer_gte boolean_and exec_while (integer_flush boolean_pop) in3) (tag_exec_634 () exec_do*times (exec_k_when_autoconstructing (in2) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush exec_dup_items exec_while ()) in2) exec_k () (exec_do*count (in2) in3) integer_rot exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (integer_rot exec_do*while (in2) exec_k () (exec_do*while (in2) exec_y_when_autoconstructing () exec_do*count (exec_do*times (print_integer) in2 exec_k (integer_dup exec_s (integer_min) () (integer_inc exec_while (integer_dup exec_stackdepth integer_inc exec_while (integer_dup exec_stackdepth in1 boolean_not integer_dup_items)))) ())))))))))
Zero cases best errors: [0 1 0 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 98
Percent parens: 0.347
--- Lexicase Population Statistics ---
Count of elite individuals by case: (156 1 349 871 24 869 347 365 156 364)
Population mean number of elite cases: 3.50
Count of perfect (error zero) individuals by case: (156 1 349 871 24 869 347 365 156 364)
Population mean number of perfect (error zero) cases: 3.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 2, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_items})
Best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) integer_gte boolean_and exec_while (integer_flush boolean_pop) in3) (tag_exec_634 () exec_do*times (exec_k_when_autoconstructing (in2) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush) exec_dup_items exec_while ()) in2) exec_k () (exec_do*count (in2) in3) integer_rot) exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (integer_rot) exec_do*while (in2) exec_k () (exec_do*while (in2) exec_y_when_autoconstructing () exec_do*count (exec_do*times (print_integer) in2 exec_k () (integer_dup exec_s (integer_min) (integer_inc exec_while (integer_dup) exec_stackdepth integer_inc exec_while (integer_dup exec_stackdepth in1 boolean_not integer_dup_items)) ())))))))
Errors: [0 1 0 0 1 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 64
Size: 98
Percent parens: 0.347
--- Population Statistics ---
Average total errors in population: 6.498
Median total errors in population: 7
Error averages by case: (0.844 0.999 0.651 0.129 0.976 0.131 0.653 0.635 0.844 0.636)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.751
Average program size in population (points): 77.421
Average percent parens in population: 0.331
Minimum age in population: 49.73513141274452
Maximum age in population: 54.13162828865461
Average age in population: 51.98211449037783
Median age in population: 51.9324986259453
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 83
Genome diversity (% unique genomes):	 0.643
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 84
Syntactic diversity (% unique Push programs):	 0.635
Total error diversity:				 0.007
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.082
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 10020428
--- Timings ---
Current time: 1559314415789 milliseconds
Total Time:          88.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.0 seconds, 76.0%
Fitness Testing:     12.4 seconds, 14.1%
Report:               8.6 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 541
Test mean error for best: 0.54100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 20                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -28                 | Program output: -28                
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 100                
Correct output: -1                  | Program output: -1                 
Correct output: 33                  | Program output: 33                 
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 53                 
Correct output: 14                  | Program output: 77                 
Correct output: 8                   | Program output: 49                 
Correct output: 32                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 82                 
Correct output: 57                  | Program output: 57                 
Correct output: 12                  | Program output: 95                 
Correct output: 35                  | Program output: 35                 
Correct output: 60                  | Program output: 64                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 91                 
Correct output: 3                   | Program output: 80                 
Correct output: 46                  | Program output: 46                 
Correct output: 56                  | Program output: 98                 
Correct output: 29                  | Program output: 29                 
Correct output: 0                   | Program output: 53                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: -39                 | Program output: -39                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -76                 | Program output: -76                
Correct output: -11                 | Program output: -11                
Correct output: -95                 | Program output: -84                
Correct output: -78                 | Program output: -56                
Correct output: -97                 | Program output: -24                
Correct output: -40                 | Program output: -8                 
Correct output: -92                 | Program output: -49                
Correct output: 7                   | Program output: 55                 
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: 40                 
Correct output: -27                 | Program output: 21                 
Correct output: -82                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: -9                 
Correct output: -52                 | Program output: -52                
Correct output: -79                 | Program output: -14                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -53                
Correct output: -64                 | Program output: -64                
Correct output: -68                 | Program output: -68                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -55                 | Program output: -13                
Correct output: -87                 | Program output: -84                
Correct output: -40                 | Program output: -4                 
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: -55                
Correct output: -28                 | Program output: -7                 
Correct output: -84                 | Program output: -83                
Correct output: -92                 | Program output: -55                
Correct output: -67                 | Program output: -67                
Correct output: -67                 | Program output: -61                
Correct output: -65                 | Program output: -16                
Correct output: -76                 | Program output: 10                 
Correct output: -87                 | Program output: -15                
Correct output: -64                 | Program output: 18                 
Correct output: -24                 | Program output: -24                
Correct output: -35                 | Program output: 98                 
Correct output: -33                 | Program output: -33                
Correct output: -17                 | Program output: 22                 
Correct output: -91                 | Program output: -58                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -31                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: 6                   | Program output: 60                 
Correct output: -49                 | Program output: -49                
Correct output: -91                 | Program output: -66                
Correct output: -82                 | Program output: -61                
Correct output: -39                 | Program output: 22                 
Correct output: -83                 | Program output: -58                
Correct output: -37                 | Program output: 47                 
Correct output: -76                 | Program output: 30                 
Correct output: -19                 | Program output: -19                
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: -87                
Correct output: -39                 | Program output: -13                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction tag_integer_671} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 2, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Lexicase best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (boolean_rot exec_if (tag_integer_671 print_boolean boolean_dup_times boolean_pop boolean_invert_first_then_and) (exec_stackdepth exec_shove (exec_k_when_autoconstructing (boolean_yankdup) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush print_integer exec_while ()) exec_k () (exec_do*count (in2) in3) print_integer exec_while ()) in4) exec_k () (exec_do*count (integer_yank) exec_k (exec_dup (exec_y (integer_min integer_inc exec_while (integer_dup integer_dup_times in1 boolean_empty integer_dup_items)))) ())))
Lexicase best errors: [1 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 66
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction tag_integer_671} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 2, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Zero cases best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (boolean_rot exec_if (tag_integer_671 print_boolean boolean_dup_times boolean_pop boolean_invert_first_then_and) (exec_stackdepth exec_shove (exec_k_when_autoconstructing (boolean_yankdup) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush print_integer exec_while ()) exec_k () (exec_do*count (in2) in3) print_integer exec_while ()) in4) exec_k () (exec_do*count (integer_yank) exec_k (exec_dup (exec_y (integer_min integer_inc exec_while (integer_dup integer_dup_times in1 boolean_empty integer_dup_items)))) ())))
Zero cases best errors: [1 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 66
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (614 156 99 582 583 583 339 582 156 581)
Population mean number of elite cases: 4.28
Count of perfect (error zero) individuals by case: (614 156 99 582 583 583 339 582 156 581)
Population mean number of perfect (error zero) cases: 4.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction tag_integer_671} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 2, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (boolean_rot exec_if (tag_integer_671 print_boolean boolean_dup_times boolean_pop boolean_invert_first_then_and) (exec_stackdepth exec_shove (exec_k_when_autoconstructing (boolean_yankdup) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush print_integer exec_while ()) exec_k () (exec_do*count (in2) in3) print_integer exec_while ()) in4) exec_k () (exec_do*count (integer_yank) exec_k (exec_dup (exec_y (integer_min integer_inc exec_while (integer_dup integer_dup_times in1 boolean_empty integer_dup_items)))) ())))
Errors: [1 0 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 44
Size: 66
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 5.725
Median total errors in population: 4
Error averages by case: (0.386 0.844 0.901 0.418 0.417 0.417 0.661 0.418 0.844 0.419)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.124
Average program size in population (points): 85.388
Average percent parens in population: 0.342
Minimum age in population: 50.73513141274452
Maximum age in population: 55.04375230066944
Average age in population: 53.40826991671952
Median age in population: 53.50576097122394
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 83
Genome diversity (% unique genomes):	 0.629
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 84
Syntactic diversity (% unique Push programs):	 0.626
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.088
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 10335228
--- Timings ---
Current time: 1559314418241 milliseconds
Total Time:          90.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.8 seconds, 76.0%
Fitness Testing:     12.7 seconds, 14.0%
Report:               8.9 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 541
Test mean error for best: 0.54100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 20                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -28                 | Program output: -28                
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 100                
Correct output: -1                  | Program output: -1                 
Correct output: 33                  | Program output: 33                 
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 53                 
Correct output: 14                  | Program output: 77                 
Correct output: 8                   | Program output: 49                 
Correct output: 32                  | Program output: 57                 
Correct output: 22                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 82                 
Correct output: 57                  | Program output: 57                 
Correct output: 12                  | Program output: 95                 
Correct output: 35                  | Program output: 35                 
Correct output: 60                  | Program output: 64                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 91                 
Correct output: 3                   | Program output: 80                 
Correct output: 46                  | Program output: 46                 
Correct output: 56                  | Program output: 98                 
Correct output: 29                  | Program output: 29                 
Correct output: 0                   | Program output: 53                 
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: -39                 | Program output: -39                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -76                 | Program output: -76                
Correct output: -11                 | Program output: -11                
Correct output: -95                 | Program output: -84                
Correct output: -78                 | Program output: -56                
Correct output: -97                 | Program output: -24                
Correct output: -40                 | Program output: -8                 
Correct output: -92                 | Program output: -49                
Correct output: 7                   | Program output: 55                 
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: 40                 
Correct output: -27                 | Program output: 21                 
Correct output: -82                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: -9                 
Correct output: -52                 | Program output: -52                
Correct output: -79                 | Program output: -14                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -53                
Correct output: -64                 | Program output: -64                
Correct output: -68                 | Program output: -68                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -55                 | Program output: -13                
Correct output: -87                 | Program output: -84                
Correct output: -40                 | Program output: -4                 
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: -55                
Correct output: -28                 | Program output: -7                 
Correct output: -84                 | Program output: -83                
Correct output: -92                 | Program output: -55                
Correct output: -67                 | Program output: -67                
Correct output: -67                 | Program output: -61                
Correct output: -65                 | Program output: -16                
Correct output: -76                 | Program output: 10                 
Correct output: -87                 | Program output: -15                
Correct output: -64                 | Program output: 18                 
Correct output: -24                 | Program output: -24                
Correct output: -35                 | Program output: 98                 
Correct output: -33                 | Program output: -33                
Correct output: -17                 | Program output: 22                 
Correct output: -91                 | Program output: -58                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -31                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -89                
Correct output: 6                   | Program output: 60                 
Correct output: -49                 | Program output: -49                
Correct output: -91                 | Program output: -66                
Correct output: -82                 | Program output: -61                
Correct output: -39                 | Program output: 22                 
Correct output: -83                 | Program output: -58                
Correct output: -37                 | Program output: 47                 
Correct output: -76                 | Program output: 30                 
Correct output: -19                 | Program output: -19                
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: -87                
Correct output: -39                 | Program output: -13                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction tag_integer_671} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 2, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Lexicase best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (boolean_rot exec_if (tag_integer_671 print_boolean boolean_dup_times boolean_pop boolean_invert_first_then_and) (exec_stackdepth exec_shove (exec_k_when_autoconstructing (boolean_yankdup) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush print_integer exec_while ()) exec_k () (exec_do*count (in2) in3) print_integer exec_while ()) in4) exec_k () (exec_do*count (integer_yank) exec_k (exec_dup (exec_y (integer_min integer_inc exec_while (integer_dup integer_dup_times in1 boolean_empty integer_dup_items)))) ())))
Lexicase best errors: [1 0 1 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 66
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction tag_integer_671} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 2, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Zero cases best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (boolean_rot exec_if (tag_integer_671 print_boolean boolean_dup_times boolean_pop boolean_invert_first_then_and) (exec_stackdepth exec_shove (exec_k_when_autoconstructing (boolean_yankdup) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush print_integer exec_while ()) exec_k () (exec_do*count (in2) in3) print_integer exec_while ()) in4) exec_k () (exec_do*count (integer_yank) exec_k (exec_dup (exec_y (integer_min integer_inc exec_while (integer_dup integer_dup_times in1 boolean_empty integer_dup_items)))) ())))
Zero cases best errors: [1 0 1 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 66
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (346 833 349 883 438 442 441 745 351 524)
Population mean number of elite cases: 5.35
Count of perfect (error zero) individuals by case: (346 833 349 883 438 442 441 745 351 524)
Population mean number of perfect (error zero) cases: 5.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction tag_integer_671} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_yankdup} {:close 2, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_flush} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction print_integer} {:close 2, :instruction exec_while} {:close 1, :instruction in4} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_k} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup_items})
Best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (boolean_rot exec_if (tag_integer_671 print_boolean boolean_dup_times boolean_pop boolean_invert_first_then_and) (exec_stackdepth exec_shove (exec_k_when_autoconstructing (boolean_yankdup) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush print_integer exec_while ()) exec_k () (exec_do*count (in2) in3) print_integer exec_while ()) in4) exec_k () (exec_do*count (integer_yank) exec_k (exec_dup (exec_y (integer_min integer_inc exec_while (integer_dup integer_dup_times in1 boolean_empty integer_dup_items)))) ())))
Errors: [1 0 1 0 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 44
Size: 66
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 4.648
Median total errors in population: 4
Error averages by case: (0.654 0.167 0.651 0.117 0.562 0.558 0.559 0.255 0.649 0.476)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.98
Average program size in population (points): 77.213
Average percent parens in population: 0.338
Minimum age in population: 53.50453696586192
Maximum age in population: 56.59823259955738
Average age in population: 54.91254451547164
Median age in population: 54.98654816288035
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 308
Genome diversity (% unique genomes):	 0.607
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 311
Syntactic diversity (% unique Push programs):	 0.604
Total error diversity:				 0.008
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 10584073
--- Timings ---
Current time: 1559314420647 milliseconds
Total Time:          92.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.7 seconds, 76.0%
Fitness Testing:     13.0 seconds, 14.0%
Report:               9.2 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 485
Test mean error for best: 0.48500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -63                 | Program output: -63                
Correct output: 20                  | Program output: 20                 
Correct output: -70                 | Program output: 99                 
Correct output: -87                 | Program output: -87                
Correct output: -28                 | Program output: -28                
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 73                 
Correct output: -1                  | Program output: -1                 
Correct output: 33                  | Program output: 33                 
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 14                 
Correct output: 14                  | Program output: 87                 
Correct output: 8                   | Program output: 8                  
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 96                 
Correct output: 17                  | Program output: 32                 
Correct output: 13                  | Program output: 13                 
Correct output: 57                  | Program output: 71                 
Correct output: 12                  | Program output: 54                 
Correct output: 35                  | Program output: 95                 
Correct output: 60                  | Program output: 61                 
Correct output: 31                  | Program output: 59                 
Correct output: 24                  | Program output: 62                 
Correct output: 3                   | Program output: 3                  
Correct output: 46                  | Program output: 48                 
Correct output: 56                  | Program output: 81                 
Correct output: 29                  | Program output: 95                 
Correct output: 0                   | Program output: 0                  
Correct output: 17                  | Program output: 61                 
Correct output: 3                   | Program output: 59                 
Correct output: -39                 | Program output: -39                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -12                
Correct output: -76                 | Program output: -13                
Correct output: -11                 | Program output: -3                 
Correct output: -95                 | Program output: -15                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -8                 
Correct output: -92                 | Program output: -49                
Correct output: 7                   | Program output: 7                  
Correct output: -1                  | Program output: 9                  
Correct output: -71                 | Program output: -71                
Correct output: -27                 | Program output: -27                
Correct output: -82                 | Program output: -19                
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: -88                
Correct output: -52                 | Program output: 41                 
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: -17                
Correct output: -53                 | Program output: 43                 
Correct output: -64                 | Program output: -40                
Correct output: -68                 | Program output: -10                
Correct output: -65                 | Program output: 39                 
Correct output: -76                 | Program output: -76                
Correct output: -55                 | Program output: -55                
Correct output: -87                 | Program output: -87                
Correct output: -40                 | Program output: -39                
Correct output: -95                 | Program output: -27                
Correct output: -68                 | Program output: -66                
Correct output: -28                 | Program output: -13                
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -2                 
Correct output: -67                 | Program output: -18                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: -87                
Correct output: -64                 | Program output: -64                
Correct output: -24                 | Program output: -24                
Correct output: -35                 | Program output: -35                
Correct output: -33                 | Program output: 63                 
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: 84                 
Correct output: -43                 | Program output: -40                
Correct output: -90                 | Program output: -35                
Correct output: -89                 | Program output: -40                
Correct output: 6                   | Program output: 6                  
Correct output: -49                 | Program output: -5                 
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -82                
Correct output: -39                 | Program output: -36                
Correct output: -83                 | Program output: -83                
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -76                
Correct output: -19                 | Program output: -11                
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: -87                
Correct output: -39                 | Program output: -13                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 2, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) in4 boolean_and exec_while (integer_flush boolean_pop) in3) (tag_exec_634 () exec_do*times (exec_k_when_autoconstructing (in2) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush) exec_dup_items exec_while ()) in2) exec_k () (exec_do*count (in2) in3) integer_rot) exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (integer_rot) exec_do*while (in2) exec_k () (exec_do*while (in2) exec_y_when_autoconstructing () exec_do*count (exec_do*times (print_integer) in2 exec_k () (integer_dup exec_s (integer_min) (integer_inc exec_while (integer_dup) exec_stackdepth integer_inc exec_while (integer_dup exec_stackdepth in1 boolean_not integer_dup_items)) ())))))))
Lexicase best errors: [0 0 0 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 98
Percent parens: 0.347
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 2, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) in4 boolean_and exec_while (integer_flush boolean_pop) in3) (tag_exec_634 () exec_do*times (exec_k_when_autoconstructing (in2) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush) exec_dup_items exec_while ()) in2) exec_k () (exec_do*count (in2) in3) integer_rot) exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (integer_rot) exec_do*while (in2) exec_k () (exec_do*while (in2) exec_y_when_autoconstructing () exec_do*count (exec_do*times (print_integer) in2 exec_k () (integer_dup exec_s (integer_min) (integer_inc exec_while (integer_dup) exec_stackdepth integer_inc exec_while (integer_dup exec_stackdepth in1 boolean_not integer_dup_items)) ())))))))
Zero cases best errors: [0 0 0 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 98
Percent parens: 0.347
--- Lexicase Population Statistics ---
Count of elite individuals by case: (883 105 886 373 493 436 460 2 450 356)
Population mean number of elite cases: 4.44
Count of perfect (error zero) individuals by case: (883 105 886 373 493 436 460 2 450 356)
Population mean number of perfect (error zero) cases: 4.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 2, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_items})
Best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) in4 boolean_and exec_while (integer_flush boolean_pop) in3) (tag_exec_634 () exec_do*times (exec_k_when_autoconstructing (in2) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush) exec_dup_items exec_while ()) in2) exec_k () (exec_do*count (in2) in3) integer_rot) boolean_and exec_do*count (exec_do*times (boolean_dup_items exec_dup (integer_rot) exec_do*while (in2) exec_k () (exec_do*while (in2) exec_y_when_autoconstructing () exec_do*count (exec_do*times (print_integer) in2 exec_k () (integer_dup exec_s (integer_min) (integer_inc exec_while (integer_dup) exec_stackdepth integer_inc exec_while (integer_dup exec_stackdepth in1 boolean_not integer_dup_items)) ()))))))
Errors: [0 0 0 0 1 0 0 1 0 1]
Total: 3
Mean: 0.3
Genome size: 64
Size: 97
Percent parens: 0.340
--- Population Statistics ---
Average total errors in population: 5.556
Median total errors in population: 5
Error averages by case: (0.117 0.895 0.114 0.627 0.507 0.564 0.54 0.998 0.55 0.644)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.595
Average program size in population (points): 79.828
Average percent parens in population: 0.340
Minimum age in population: 54.50453696586192
Maximum age in population: 57.9801326818415
Average age in population: 56.30068044148228
Median age in population: 56.35772630610154
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 163
Genome diversity (% unique genomes):	 0.709
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 165
Syntactic diversity (% unique Push programs):	 0.706
Total error diversity:				 0.008
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 10838159
--- Timings ---
Current time: 1559314423020 milliseconds
Total Time:          95.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.5 seconds, 76.1%
Fitness Testing:     13.3 seconds, 13.9%
Report:               9.4 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 473
Test mean error for best: 0.47300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 20                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -28                 | Program output: -28                
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 73                 
Correct output: -1                  | Program output: -1                 
Correct output: 33                  | Program output: 33                 
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 14                 
Correct output: 14                  | Program output: 87                 
Correct output: 8                   | Program output: 8                  
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 96                 
Correct output: 17                  | Program output: 32                 
Correct output: 13                  | Program output: 13                 
Correct output: 57                  | Program output: 71                 
Correct output: 12                  | Program output: 54                 
Correct output: 35                  | Program output: 95                 
Correct output: 60                  | Program output: 61                 
Correct output: 31                  | Program output: 59                 
Correct output: 24                  | Program output: 62                 
Correct output: 3                   | Program output: 3                  
Correct output: 46                  | Program output: 48                 
Correct output: 56                  | Program output: 81                 
Correct output: 29                  | Program output: 95                 
Correct output: 0                   | Program output: 2                  
Correct output: 17                  | Program output: 61                 
Correct output: 3                   | Program output: 59                 
Correct output: -39                 | Program output: -39                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -44                
Correct output: -76                 | Program output: -47                
Correct output: -11                 | Program output: -11                
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -24                
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 7                  
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: 87                 
Correct output: -27                 | Program output: 91                 
Correct output: -82                 | Program output: -82                
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: -9                 
Correct output: -52                 | Program output: -52                
Correct output: -79                 | Program output: -59                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -53                
Correct output: -64                 | Program output: -64                
Correct output: -68                 | Program output: -68                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -55                 | Program output: -13                
Correct output: -87                 | Program output: -50                
Correct output: -40                 | Program output: -40                
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: -55                
Correct output: -28                 | Program output: -28                
Correct output: -84                 | Program output: -80                
Correct output: -92                 | Program output: -40                
Correct output: -67                 | Program output: -27                
Correct output: -67                 | Program output: -61                
Correct output: -65                 | Program output: -47                
Correct output: -76                 | Program output: -28                
Correct output: -87                 | Program output: -41                
Correct output: -64                 | Program output: -64                
Correct output: -24                 | Program output: -24                
Correct output: -35                 | Program output: -6                 
Correct output: -33                 | Program output: -33                
Correct output: -17                 | Program output: -4                 
Correct output: -91                 | Program output: -27                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -31                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -33                
Correct output: 6                   | Program output: 6                  
Correct output: -49                 | Program output: -49                
Correct output: -91                 | Program output: -8                 
Correct output: -82                 | Program output: -61                
Correct output: -39                 | Program output: -39                
Correct output: -83                 | Program output: -4                 
Correct output: -37                 | Program output: 89                 
Correct output: -76                 | Program output: -70                
Correct output: -19                 | Program output: -19                
Correct output: -73                 | Program output: -6                 
Correct output: -87                 | Program output: -87                
Correct output: -39                 | Program output: -39                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 2, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) in4 boolean_and exec_while (integer_flush boolean_pop) in3) (tag_exec_634 () exec_do*times (exec_k_when_autoconstructing (in1) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush) exec_dup_items exec_while ()) in2) exec_k () (exec_do*count (in2) in3) integer_rot) exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (integer_rot) exec_do*while (in2) exec_k () (exec_do*while (in2) exec_y_when_autoconstructing () exec_do*count (exec_do*times (print_integer) in2 exec_k () (integer_dup exec_s (integer_min) (integer_inc exec_while (integer_dup) exec_stackdepth exec_s_when_autoconstructing (exec_while (integer_flush exec_stackdepth in1 boolean_not integer_dup_items)) () ()) ())))))))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 101
Percent parens: 0.366
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 2, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) in4 boolean_and exec_while (integer_flush boolean_pop) in3) (tag_exec_634 () exec_do*times (exec_k_when_autoconstructing (in1) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush) exec_dup_items exec_while ()) in2) exec_k () (exec_do*count (in2) in3) integer_rot) exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (integer_rot) exec_do*while (in2) exec_k () (exec_do*while (in2) exec_y_when_autoconstructing () exec_do*count (exec_do*times (print_integer) in2 exec_k () (integer_dup exec_s (integer_min) (integer_inc exec_while (integer_dup) exec_stackdepth exec_s_when_autoconstructing (exec_while (integer_flush exec_stackdepth in1 boolean_not integer_dup_items)) () ()) ())))))))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 101
Percent parens: 0.366
--- Lexicase Population Statistics ---
Count of elite individuals by case: (67 906 682 450 452 70 452 268 668 205)
Population mean number of elite cases: 4.22
Count of perfect (error zero) individuals by case: (67 906 682 450 452 70 452 268 668 205)
Population mean number of perfect (error zero) cases: 4.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 2, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_items})
Best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) in4 boolean_and exec_while (integer_flush boolean_pop) in3) (tag_exec_634 () exec_do*times (exec_k_when_autoconstructing (in1) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush) exec_dup_items exec_while ()) in2) exec_k () (exec_do*count (in2) in3) integer_rot) exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (integer_rot) exec_do*while (in2) exec_k () (exec_do*while (in2) exec_y_when_autoconstructing () exec_do*count (exec_do*times (print_integer) in2 exec_k () (integer_dup exec_s (integer_min) (integer_inc exec_while (integer_dup) exec_stackdepth exec_s_when_autoconstructing (exec_while (integer_flush exec_stackdepth in1 boolean_not integer_dup_items)) () ()) ())))))))
Errors: [0 0 0 0 1 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 64
Size: 101
Percent parens: 0.366
--- Population Statistics ---
Average total errors in population: 5.78
Median total errors in population: 5
Error averages by case: (0.933 0.094 0.318 0.55 0.548 0.93 0.548 0.732 0.332 0.795)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.74
Average program size in population (points): 90.102
Average percent parens in population: 0.347
Minimum age in population: 56.29514245386235
Maximum age in population: 59.4883433287614
Average age in population: 57.97323444994018
Median age in population: 58.00545496988343
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 71
Genome diversity (% unique genomes):	 0.682
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 72
Syntactic diversity (% unique Push programs):	 0.679
Total error diversity:				 0.008
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.095
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 11122766
--- Timings ---
Current time: 1559314425491 milliseconds
Total Time:          97.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.3 seconds, 76.1%
Fitness Testing:     13.6 seconds, 13.9%
Report:               9.7 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 449
Test mean error for best: 0.44900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 20                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -28                 | Program output: -28                
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 73                 
Correct output: -1                  | Program output: -1                 
Correct output: 33                  | Program output: 33                 
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 14                 
Correct output: 14                  | Program output: 87                 
Correct output: 8                   | Program output: 8                  
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 96                 
Correct output: 17                  | Program output: 32                 
Correct output: 13                  | Program output: 13                 
Correct output: 57                  | Program output: 71                 
Correct output: 12                  | Program output: 54                 
Correct output: 35                  | Program output: 95                 
Correct output: 60                  | Program output: 61                 
Correct output: 31                  | Program output: 59                 
Correct output: 24                  | Program output: 62                 
Correct output: 3                   | Program output: 3                  
Correct output: 46                  | Program output: 48                 
Correct output: 56                  | Program output: 81                 
Correct output: 29                  | Program output: 95                 
Correct output: 0                   | Program output: 0                  
Correct output: 17                  | Program output: 61                 
Correct output: 3                   | Program output: 59                 
Correct output: -39                 | Program output: -39                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -44                
Correct output: -76                 | Program output: -47                
Correct output: -11                 | Program output: -11                
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -24                
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 7                  
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -27                 | Program output: -27                
Correct output: -82                 | Program output: -82                
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: -9                 
Correct output: -52                 | Program output: -52                
Correct output: -79                 | Program output: -59                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -53                
Correct output: -64                 | Program output: -64                
Correct output: -68                 | Program output: -68                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -55                 | Program output: -13                
Correct output: -87                 | Program output: -50                
Correct output: -40                 | Program output: -39                
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: -55                
Correct output: -28                 | Program output: -28                
Correct output: -84                 | Program output: -80                
Correct output: -92                 | Program output: -40                
Correct output: -67                 | Program output: -27                
Correct output: -67                 | Program output: -61                
Correct output: -65                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: -41                
Correct output: -64                 | Program output: -64                
Correct output: -24                 | Program output: -24                
Correct output: -35                 | Program output: -35                
Correct output: -33                 | Program output: -33                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -31                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -40                
Correct output: 6                   | Program output: 6                  
Correct output: -49                 | Program output: -49                
Correct output: -91                 | Program output: -8                 
Correct output: -82                 | Program output: -61                
Correct output: -39                 | Program output: -36                
Correct output: -83                 | Program output: -4                 
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -76                
Correct output: -19                 | Program output: -11                
Correct output: -73                 | Program output: -6                 
Correct output: -87                 | Program output: -87                
Correct output: -39                 | Program output: -39                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 2, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 2, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) in4 boolean_and exec_while (integer_flush boolean_pop) in3) (tag_exec_634 () exec_do*times (exec_k_when_autoconstructing (in2) (tag_exec_634 ()) exec_do*times (exec_k_when_autoconstructing (in1) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush) exec_dup_items exec_while ()) in2) exec_k () (exec_do*count (in2) in3) integer_rot) exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (boolean_stackdepth) exec_do*while (in2) exec_k () (exec_do*while (exec_do*while (in2) exec_y_when_autoconstructing () exec_do*count (exec_do*times (print_integer) in2 exec_k () (integer_dup exec_s (integer_min) (boolean_stackdepth exec_while (integer_dup) exec_stackdepth integer_inc exec_while (integer_gt exec_stackdepth in1 boolean_not integer_dup_items)) ())))))))))
Lexicase best errors: [0 0 1 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 108
Percent parens: 0.361
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 2, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 2, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) in4 boolean_and exec_while (integer_flush boolean_pop) in3) (tag_exec_634 () exec_do*times (exec_k_when_autoconstructing (in2) (tag_exec_634 ()) exec_do*times (exec_k_when_autoconstructing (in1) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush) exec_dup_items exec_while ()) in2) exec_k () (exec_do*count (in2) in3) integer_rot) exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (boolean_stackdepth) exec_do*while (in2) exec_k () (exec_do*while (exec_do*while (in2) exec_y_when_autoconstructing () exec_do*count (exec_do*times (print_integer) in2 exec_k () (integer_dup exec_s (integer_min) (boolean_stackdepth exec_while (integer_dup) exec_stackdepth integer_inc exec_while (integer_gt exec_stackdepth in1 boolean_not integer_dup_items)) ())))))))))
Zero cases best errors: [0 0 1 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 108
Percent parens: 0.361
--- Lexicase Population Statistics ---
Count of elite individuals by case: (754 516 310 121 299 310 754 634 516 588)
Population mean number of elite cases: 4.80
Count of perfect (error zero) individuals by case: (754 516 310 121 299 310 754 634 516 588)
Population mean number of perfect (error zero) cases: 4.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 2, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 2, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s} {:close 1, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_items})
Best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) in4 boolean_and exec_while (integer_flush boolean_pop) in3) (tag_exec_634 () exec_do*times (exec_k_when_autoconstructing (in2) (tag_exec_634 ()) exec_do*times (exec_k_when_autoconstructing (in1) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush) exec_dup_items exec_while ()) in2) exec_k () (exec_do*count (in2) exec_k_when_autoconstructing () (integer_rot) exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (integer_rot) exec_do*while (in2) exec_k () (exec_do*while (in2) exec_y_when_autoconstructing () exec_do*count (exec_do*times (print_integer) in2 exec_k () (integer_max exec_s (integer_min) (integer_inc exec_while (integer_dup) exec_stackdepth exec_s_when_autoconstructing (exec_while (integer_flush exec_stackdepth in1 boolean_not integer_dup_items)) () ()) ()))))))))))
Errors: [0 0 1 1 0 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 68
Size: 111
Percent parens: 0.387
--- Population Statistics ---
Average total errors in population: 5.198
Median total errors in population: 4
Error averages by case: (0.246 0.484 0.69 0.879 0.701 0.69 0.246 0.366 0.484 0.412)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.395
Average program size in population (points): 92.017
Average percent parens in population: 0.352
Minimum age in population: 57.29514245386235
Maximum age in population: 61.24224894790677
Average age in population: 60.02394628963668
Median age in population: 60.24224894790677
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 182
Genome diversity (% unique genomes):	 0.676
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 183
Syntactic diversity (% unique Push programs):	 0.675
Total error diversity:				 0.008
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.082
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 11437997
--- Timings ---
Current time: 1559314427999 milliseconds
Total Time:         100.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.2 seconds, 76.1%
Fitness Testing:     13.9 seconds, 13.9%
Report:              10.0 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 365
Test mean error for best: 0.36500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -63                 | Program output: -63                
Correct output: 20                  | Program output: 20                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -28                 | Program output: -28                
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 73                 
Correct output: -1                  | Program output: -1                 
Correct output: 33                  | Program output: 33                 
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 14                 
Correct output: 14                  | Program output: 77                 
Correct output: 8                   | Program output: 8                  
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 57                  | Program output: 57                 
Correct output: 12                  | Program output: 54                 
Correct output: 35                  | Program output: 35                 
Correct output: 60                  | Program output: 61                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 62                 
Correct output: 3                   | Program output: 3                  
Correct output: 46                  | Program output: 46                 
Correct output: 56                  | Program output: 81                 
Correct output: 29                  | Program output: 29                 
Correct output: 0                   | Program output: 0                  
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: -39                 | Program output: -39                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -12                
Correct output: -76                 | Program output: -13                
Correct output: -11                 | Program output: -3                 
Correct output: -95                 | Program output: -15                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -8                 
Correct output: -92                 | Program output: -49                
Correct output: 7                   | Program output: 7                  
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -27                 | Program output: -27                
Correct output: -82                 | Program output: -19                
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: -88                
Correct output: -52                 | Program output: -52                
Correct output: -79                 | Program output: -79                
Correct output: -71                 | Program output: -17                
Correct output: -53                 | Program output: -53                
Correct output: -64                 | Program output: -40                
Correct output: -68                 | Program output: -10                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -55                 | Program output: -55                
Correct output: -87                 | Program output: -87                
Correct output: -40                 | Program output: -39                
Correct output: -95                 | Program output: -27                
Correct output: -68                 | Program output: -66                
Correct output: -28                 | Program output: -13                
Correct output: -84                 | Program output: -84                
Correct output: -92                 | Program output: -2                 
Correct output: -67                 | Program output: -18                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: -87                
Correct output: -64                 | Program output: -64                
Correct output: -24                 | Program output: -24                
Correct output: -35                 | Program output: -35                
Correct output: -33                 | Program output: -33                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -40                
Correct output: -90                 | Program output: -35                
Correct output: -89                 | Program output: -40                
Correct output: 6                   | Program output: 6                  
Correct output: -49                 | Program output: -5                 
Correct output: -91                 | Program output: -91                
Correct output: -82                 | Program output: -82                
Correct output: -39                 | Program output: -36                
Correct output: -83                 | Program output: -83                
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -76                
Correct output: -19                 | Program output: -11                
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: -87                
Correct output: -39                 | Program output: -13                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 2, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in1 exec_eq integer_lte boolean_invert_first_then_and integer_min in4 boolean_and exec_while (integer_flush boolean_pop) in1 tag_exec_634 () exec_do*times (exec_k_when_autoconstructing (in2) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush) exec_dup_items exec_while ()) in2 exec_k () (exec_do*count (in2) in3) integer_rot exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (integer_rot) exec_do*while (in2) exec_k () (exec_do*while (in2) exec_y_when_autoconstructing () exec_do*count (exec_do*times (print_integer) in2 exec_k () (integer_dup exec_s (integer_min) (integer_inc exec_while (integer_dup) exec_stackdepth integer_inc exec_while (integer_dup exec_stackdepth in1 boolean_not integer_dup_items)) ())))))))
Lexicase best errors: [0 1 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 89
Percent parens: 0.337
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction in1} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 2, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in1 exec_eq integer_lte boolean_invert_first_then_and integer_min in4 boolean_and exec_while (integer_flush boolean_pop) in1 tag_exec_634 () exec_do*times (exec_k_when_autoconstructing (in2) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush) exec_dup_items exec_while ()) in2 exec_k () (exec_do*count (in2) in3) integer_rot exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (integer_rot) exec_do*while (in2) exec_k () (exec_do*while (in2) exec_y_when_autoconstructing () exec_do*count (exec_do*times (print_integer) in2 exec_k () (integer_dup exec_s (integer_min) (integer_inc exec_while (integer_dup) exec_stackdepth integer_inc exec_while (integer_dup exec_stackdepth in1 boolean_not integer_dup_items)) ())))))))
Zero cases best errors: [0 1 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 89
Percent parens: 0.337
--- Lexicase Population Statistics ---
Count of elite individuals by case: (396 414 935 935 392 415 772 507 489 415)
Population mean number of elite cases: 5.67
Count of perfect (error zero) individuals by case: (396 414 935 935 392 415 772 507 489 415)
Population mean number of perfect (error zero) cases: 5.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 2, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 0, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_items})
Best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) in4 boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) integer_min) (in4 boolean_and exec_while (integer_flush boolean_pop) in3) tag_exec_634 () exec_do*times (exec_k_when_autoconstructing (exec_pop () exec_do*times (exec_k_when_autoconstructing (in2) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush) exec_dup_items exec_while () in2) exec_k () (exec_do*count (in2 in3) integer_rot) exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (integer_rot) exec_do*while (in2) exec_k () (exec_do*while (in2 exec_y_when_autoconstructing () exec_do*count (exec_do*times (print_integer) in2 exec_k () (integer_dup exec_s (integer_min) (integer_inc exec_while (integer_dup) exec_stackdepth integer_inc exec_while (integer_dup exec_stackdepth in1 boolean_not integer_dup_items)) ())))))))) ()))) ()))
Errors: [0 0 0 0 0 0 0 1 1 0]
Total: 2
Mean: 0.2
Genome size: 76
Size: 118
Percent parens: 0.356
--- Population Statistics ---
Average total errors in population: 4.33
Median total errors in population: 4
Error averages by case: (0.604 0.586 0.065 0.065 0.608 0.585 0.228 0.493 0.511 0.585)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.31
Average program size in population (points): 104.011
Average percent parens in population: 0.362
Minimum age in population: 59.05586099885113
Maximum age in population: 62.80812695373606
Average age in population: 61.41702626512905
Median age in population: 61.37400495956535
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 123
Genome diversity (% unique genomes):	 0.684
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 123
Syntactic diversity (% unique Push programs):	 0.683
Total error diversity:				 0.009
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.074
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 11741108
--- Timings ---
Current time: 1559314430553 milliseconds
Total Time:         102.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        78.1 seconds, 76.0%
Fitness Testing:     14.2 seconds, 13.8%
Report:              10.3 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 385
Test mean error for best: 0.38500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 20                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -28                 | Program output: -28                
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 73                 
Correct output: -1                  | Program output: -1                 
Correct output: 33                  | Program output: 33                 
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 14                 
Correct output: 14                  | Program output: 77                 
Correct output: 8                   | Program output: 8                  
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 57                  | Program output: 57                 
Correct output: 12                  | Program output: 54                 
Correct output: 35                  | Program output: 35                 
Correct output: 60                  | Program output: 61                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 62                 
Correct output: 3                   | Program output: 3                  
Correct output: 46                  | Program output: 46                 
Correct output: 56                  | Program output: 81                 
Correct output: 29                  | Program output: 29                 
Correct output: 0                   | Program output: 0                  
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: -39                 | Program output: -39                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -44                
Correct output: -76                 | Program output: -47                
Correct output: -11                 | Program output: -11                
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: -78                
Correct output: -97                 | Program output: -24                
Correct output: -40                 | Program output: -40                
Correct output: -92                 | Program output: -92                
Correct output: 7                   | Program output: 7                  
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -27                 | Program output: -27                
Correct output: -82                 | Program output: -82                
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: -9                 
Correct output: -52                 | Program output: -52                
Correct output: -79                 | Program output: -59                
Correct output: -71                 | Program output: -71                
Correct output: -53                 | Program output: -53                
Correct output: -64                 | Program output: -64                
Correct output: -68                 | Program output: -68                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -55                 | Program output: -13                
Correct output: -87                 | Program output: -50                
Correct output: -40                 | Program output: -39                
Correct output: -95                 | Program output: -95                
Correct output: -68                 | Program output: -55                
Correct output: -28                 | Program output: -28                
Correct output: -84                 | Program output: -80                
Correct output: -92                 | Program output: -40                
Correct output: -67                 | Program output: -27                
Correct output: -67                 | Program output: -61                
Correct output: -65                 | Program output: -47                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: -41                
Correct output: -64                 | Program output: -64                
Correct output: -24                 | Program output: -24                
Correct output: -35                 | Program output: -35                
Correct output: -33                 | Program output: -33                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -31                
Correct output: -90                 | Program output: -90                
Correct output: -89                 | Program output: -40                
Correct output: 6                   | Program output: 6                  
Correct output: -49                 | Program output: -49                
Correct output: -91                 | Program output: -8                 
Correct output: -82                 | Program output: -61                
Correct output: -39                 | Program output: -36                
Correct output: -83                 | Program output: -4                 
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -76                
Correct output: -19                 | Program output: -11                
Correct output: -73                 | Program output: -6                 
Correct output: -87                 | Program output: -87                
Correct output: -39                 | Program output: -39                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 2, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 2, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) in4 boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) integer_min) (exec_while (integer_flush boolean_pop) in3) tag_exec_634 () exec_do*times (exec_k_when_autoconstructing (in2) (tag_exec_634 ()) exec_do*times (exec_k_when_autoconstructing (in1) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush) exec_dup_items exec_while ()) in2) exec_k () (exec_do*count (in2) in3) integer_rot) exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (boolean_stackdepth) exec_do*while (in2) exec_k () (exec_do*while (exec_do*while (in2) exec_y_when_autoconstructing () exec_do*count (exec_do*times (exec_while (integer_dup exec_stackdepth in1 boolean_not integer_dup_items))))))))) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 102
Percent parens: 0.363
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 2, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 2, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) in4 boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) integer_min) (exec_while (integer_flush boolean_pop) in3) tag_exec_634 () exec_do*times (exec_k_when_autoconstructing (in2) (tag_exec_634 ()) exec_do*times (exec_k_when_autoconstructing (in1) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush) exec_dup_items exec_while ()) in2) exec_k () (exec_do*count (in2) in3) integer_rot) exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (boolean_stackdepth) exec_do*while (in2) exec_k () (exec_do*while (exec_do*while (in2) exec_y_when_autoconstructing () exec_do*count (exec_do*times (exec_while (integer_dup exec_stackdepth in1 boolean_not integer_dup_items))))))))) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 102
Percent parens: 0.363
--- Lexicase Population Statistics ---
Count of elite individuals by case: (731 260 503 776 503 768 298 491 3 828)
Population mean number of elite cases: 5.16
Count of perfect (error zero) individuals by case: (731 260 503 776 503 768 298 491 3 828)
Population mean number of perfect (error zero) cases: 5.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 2, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 2, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_items})
Best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) in4 boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) integer_min) (exec_while (integer_flush boolean_pop) in3) tag_exec_634 () exec_do*times (exec_k_when_autoconstructing (in2) (tag_exec_634 ()) exec_do*times (exec_k_when_autoconstructing (in1) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush) exec_dup_items exec_while ()) in2) exec_k () (exec_do*count (in2) in3) integer_rot) exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (boolean_stackdepth) exec_do*while (in2) exec_k () (exec_do*while (exec_do*while (in2) exec_y_when_autoconstructing () exec_do*count (exec_do*times (exec_while (integer_dup exec_stackdepth in1 boolean_not integer_dup_items))))))))) ()))
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 65
Size: 102
Percent parens: 0.363
--- Population Statistics ---
Average total errors in population: 4.839
Median total errors in population: 5
Error averages by case: (0.269 0.74 0.497 0.224 0.497 0.232 0.702 0.509 0.997 0.172)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 67.627
Average program size in population (points): 104.773
Average percent parens in population: 0.353
Minimum age in population: 61.85875315242811
Maximum age in population: 64.49115422063187
Average age in population: 63.40691959385026
Median age in population: 63.39905497337895
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 121
Genome diversity (% unique genomes):	 0.722
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 125
Syntactic diversity (% unique Push programs):	 0.717
Total error diversity:				 0.01
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.094
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 12121435
--- Timings ---
Current time: 1559314433184 milliseconds
Total Time:         105.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        80.0 seconds, 75.9%
Fitness Testing:     14.6 seconds, 13.8%
Report:              10.7 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 353
Test mean error for best: 0.35300
Test Case    0 | Error: 0
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 1
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 1
Test Case  416 | Error: 1
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 1
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 1
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 1
Test Case  476 | Error: 1
Test Case  477 | Error: 1
Test Case  478 | Error: 1
Test Case  479 | Error: 1
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 1
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 1
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 1
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 1
Test Case  723 | Error: 1
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 1
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 1
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 1
Test Case  772 | Error: 1
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 1
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 1
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 1
Test Case  918 | Error: 1
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 1
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 1
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 1
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 20                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -28                 | Program output: -28                
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 73                 
Correct output: -1                  | Program output: -1                 
Correct output: 33                  | Program output: 33                 
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 14                 
Correct output: 14                  | Program output: 77                 
Correct output: 8                   | Program output: 8                  
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 57                  | Program output: 57                 
Correct output: 12                  | Program output: 54                 
Correct output: 35                  | Program output: 35                 
Correct output: 60                  | Program output: 61                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 62                 
Correct output: 3                   | Program output: 3                  
Correct output: 46                  | Program output: 46                 
Correct output: 56                  | Program output: 81                 
Correct output: 29                  | Program output: 29                 
Correct output: 0                   | Program output: 0                  
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: -39                 | Program output: -39                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -76                 | Program output: -76                
Correct output: -11                 | Program output: -3                 
Correct output: -95                 | Program output: -84                
Correct output: -78                 | Program output: -56                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -8                 
Correct output: -92                 | Program output: -49                
Correct output: 7                   | Program output: 7                  
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -27                 | Program output: -27                
Correct output: -82                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: -88                
Correct output: -52                 | Program output: -52                
Correct output: -79                 | Program output: -14                
Correct output: -71                 | Program output: -17                
Correct output: -53                 | Program output: -53                
Correct output: -64                 | Program output: -40                
Correct output: -68                 | Program output: -10                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -55                 | Program output: -55                
Correct output: -87                 | Program output: -84                
Correct output: -40                 | Program output: -4                 
Correct output: -95                 | Program output: -27                
Correct output: -68                 | Program output: -66                
Correct output: -28                 | Program output: -7                 
Correct output: -84                 | Program output: -83                
Correct output: -92                 | Program output: -55                
Correct output: -67                 | Program output: -67                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -16                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: -15                
Correct output: -64                 | Program output: -64                
Correct output: -24                 | Program output: -24                
Correct output: -35                 | Program output: -35                
Correct output: -33                 | Program output: -33                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -58                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -40                
Correct output: -90                 | Program output: -35                
Correct output: -89                 | Program output: -89                
Correct output: 6                   | Program output: 6                  
Correct output: -49                 | Program output: -5                 
Correct output: -91                 | Program output: -66                
Correct output: -82                 | Program output: -82                
Correct output: -39                 | Program output: -36                
Correct output: -83                 | Program output: -58                
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -76                
Correct output: -19                 | Program output: -19                
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: -87                
Correct output: -39                 | Program output: -13                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 2, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in4} {:close 2, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) in4 boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) integer_min) (exec_while (integer_flush boolean_pop) in3) tag_exec_634 () exec_do*times (exec_k_when_autoconstructing (in2) (tag_exec_634 ()) exec_do*times (exec_k_when_autoconstructing (in4) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush) exec_dup_items exec_while ()) in2) exec_k () (exec_do*count (in2) in3) integer_rot) exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (boolean_stackdepth) exec_do*while (in2) exec_k () (exec_do*while (exec_do*while (in2) exec_y_when_autoconstructing () exec_do*count (exec_do*times (exec_while (integer_dup exec_stackdepth in1 boolean_not integer_dup_items))))))))) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 102
Percent parens: 0.363
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 2, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in4} {:close 2, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) in4 boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) integer_min) (exec_while (integer_flush boolean_pop) in3) tag_exec_634 () exec_do*times (exec_k_when_autoconstructing (in2) (tag_exec_634 ()) exec_do*times (exec_k_when_autoconstructing (in4) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush) exec_dup_items exec_while ()) in2) exec_k () (exec_do*count (in2) in3) integer_rot) exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (boolean_stackdepth) exec_do*while (in2) exec_k () (exec_do*while (exec_do*while (in2) exec_y_when_autoconstructing () exec_do*count (exec_do*times (exec_while (integer_dup exec_stackdepth in1 boolean_not integer_dup_items))))))))) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 102
Percent parens: 0.363
--- Lexicase Population Statistics ---
Count of elite individuals by case: (92 6 871 721 807 8 12 710 754 811)
Population mean number of elite cases: 4.79
Count of perfect (error zero) individuals by case: (92 6 871 721 807 8 12 710 754 811)
Population mean number of perfect (error zero) cases: 4.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction in1} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 1, :instruction boolean_pop} {:close 1, :instruction in3} {:close 1, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 2, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in4} {:close 2, :instruction tag_exec_634} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 2, :instruction exec_while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 1, :instruction in2} {:close 1, :instruction in3} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_dup_items})
Best program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) in4 boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) integer_min) (exec_while (integer_flush boolean_pop) in3) tag_exec_634 () exec_do*times (exec_k_when_autoconstructing (in2) (tag_exec_634 ()) exec_do*times (exec_k_when_autoconstructing (in4) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush) exec_dup_items exec_while ()) in2) exec_k () (exec_do*count (in2) in3) integer_rot) exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (boolean_stackdepth) exec_do*while (in2) exec_k () (exec_do*while (exec_do*while (in2) exec_y_when_autoconstructing () exec_do*count (exec_do*times (exec_while (integer_dup exec_stackdepth in1 boolean_not integer_dup_items))))))))) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 65
Size: 102
Percent parens: 0.363
--- Population Statistics ---
Average total errors in population: 5.208
Median total errors in population: 4
Error averages by case: (0.908 0.994 0.129 0.279 0.193 0.992 0.988 0.29 0.246 0.189)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.15
Average program size in population (points): 101.768
Average percent parens in population: 0.360
Minimum age in population: 63.80910335852241
Maximum age in population: 65.90037289077372
Average age in population: 65.07697380962263
Median age in population: 64.75850765689938
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 346
Genome diversity (% unique genomes):	 0.61
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 346
Syntactic diversity (% unique Push programs):	 0.609
Total error diversity:				 0.01
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.077
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 12512607
--- Timings ---
Current time: 1559314435791 milliseconds
Total Time:         107.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.8 seconds, 75.8%
Fitness Testing:     15.0 seconds, 13.9%
Report:              11.1 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 42
Successful program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) in4 boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) integer_min) (exec_while (integer_flush boolean_pop) in3) tag_exec_634 () exec_do*times (exec_k_when_autoconstructing (in2) (tag_exec_634 ()) exec_do*times (exec_k_when_autoconstructing (in4) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush) exec_dup_items exec_while ()) in2) exec_k () (exec_do*count (in2) in3) integer_rot) exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (boolean_stackdepth) exec_do*while (in2) exec_k () (exec_do*while (exec_do*while (in2) exec_y_when_autoconstructing () exec_do*count (exec_do*times (exec_while (integer_dup exec_stackdepth in1 boolean_not integer_dup_items))))))))) ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 102


Auto-simplifying with starting size: 102
step: 0
program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) in4 boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) integer_min) (exec_while (integer_flush boolean_pop) in3) tag_exec_634 () exec_do*times (exec_k_when_autoconstructing (in2) (tag_exec_634 ()) exec_do*times (exec_k_when_autoconstructing (in4) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush) exec_dup_items exec_while ()) in2) exec_k () (exec_do*count (in2) in3) integer_rot) exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (boolean_stackdepth) exec_do*while (in2) exec_k () (exec_do*while (exec_do*while (in2) exec_y_when_autoconstructing () exec_do*count (exec_do*times (exec_while (integer_dup exec_stackdepth in1 boolean_not integer_dup_items))))))))) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 102

step: 500
program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) in4 boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) integer_min) (exec_while (integer_flush boolean_pop) in3) tag_exec_634 () exec_do*times (exec_k_when_autoconstructing (in2) (tag_exec_634 ()) exec_do*times (exec_k_when_autoconstructing (in4) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush) exec_dup_items exec_while ()) in2) exec_k () (exec_do*count (in2) in3) integer_rot) exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (boolean_stackdepth) exec_do*while (in2) exec_k () (exec_do*while (exec_do*while (in2) exec_y_when_autoconstructing () exec_do*count (exec_do*times (exec_while (integer_dup exec_stackdepth in1 boolean_not integer_dup_items))))))))) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 102

step: 1000
program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) in4 boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) integer_min) (exec_while (integer_flush boolean_pop) in3) tag_exec_634 () exec_do*times (exec_k_when_autoconstructing (in2) (tag_exec_634 ()) exec_do*times (exec_k_when_autoconstructing (in4) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush) exec_dup_items exec_while ()) in2) exec_k () (exec_do*count (in2) in3) integer_rot) exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (boolean_stackdepth) exec_do*while (in2) exec_k () (exec_do*while (exec_do*while (in2) exec_y_when_autoconstructing () exec_do*count (exec_do*times (exec_while (integer_dup exec_stackdepth in1 boolean_not integer_dup_items))))))))) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 102

step: 1500
program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) in4 boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) integer_min) (exec_while (integer_flush boolean_pop) in3) tag_exec_634 () exec_do*times (exec_k_when_autoconstructing (in2) (tag_exec_634 ()) exec_do*times (exec_k_when_autoconstructing (in4) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush) exec_dup_items exec_while ()) in2) exec_k () (exec_do*count (in2) in3) integer_rot) exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (boolean_stackdepth) exec_do*while (in2) exec_k () (exec_do*while (exec_do*while (in2) exec_y_when_autoconstructing () exec_do*count (exec_do*times (exec_while (integer_dup exec_stackdepth in1 boolean_not integer_dup_items))))))))) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 102

step: 2000
program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) in4 boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) integer_min) (exec_while (integer_flush boolean_pop) in3) tag_exec_634 () exec_do*times (exec_k_when_autoconstructing (in2) (tag_exec_634 ()) exec_do*times (exec_k_when_autoconstructing (in4) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush) exec_dup_items exec_while ()) in2) exec_k () (exec_do*count (in2) in3) integer_rot) exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (boolean_stackdepth) exec_do*while (in2) exec_k () (exec_do*while (exec_do*while (in2) exec_y_when_autoconstructing () exec_do*count (exec_do*times (exec_while (integer_dup exec_stackdepth in1 boolean_not integer_dup_items))))))))) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 102

step: 2500
program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) in4 boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) integer_min) (exec_while (integer_flush boolean_pop) in3) tag_exec_634 () exec_do*times (exec_k_when_autoconstructing (in2) (tag_exec_634 ()) exec_do*times (exec_k_when_autoconstructing (in4) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush) exec_dup_items exec_while ()) in2) exec_k () (exec_do*count (in2) in3) integer_rot) exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (boolean_stackdepth) exec_do*while (in2) exec_k () (exec_do*while (exec_do*while (in2) exec_y_when_autoconstructing () exec_do*count (exec_do*times (exec_while (integer_dup exec_stackdepth in1 boolean_not integer_dup_items))))))))) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 102

step: 3000
program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) in4 boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) integer_min) (exec_while (integer_flush boolean_pop) in3) tag_exec_634 () exec_do*times (exec_k_when_autoconstructing (in2) (tag_exec_634 ()) exec_do*times (exec_k_when_autoconstructing (in4) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush) exec_dup_items exec_while ()) in2) exec_k () (exec_do*count (in2) in3) integer_rot) exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (boolean_stackdepth) exec_do*while (in2) exec_k () (exec_do*while (exec_do*while (in2) exec_y_when_autoconstructing () exec_do*count (exec_do*times (exec_while (integer_dup exec_stackdepth in1 boolean_not integer_dup_items))))))))) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 102

step: 3500
program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) in4 boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) integer_min) (exec_while (integer_flush boolean_pop) in3) tag_exec_634 () exec_do*times (exec_k_when_autoconstructing (in2) (tag_exec_634 ()) exec_do*times (exec_k_when_autoconstructing (in4) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush) exec_dup_items exec_while ()) in2) exec_k () (exec_do*count (in2) in3) integer_rot) exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (boolean_stackdepth) exec_do*while (in2) exec_k () (exec_do*while (exec_do*while (in2) exec_y_when_autoconstructing () exec_do*count (exec_do*times (exec_while (integer_dup exec_stackdepth in1 boolean_not integer_dup_items))))))))) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 102

step: 4000
program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) in4 boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) integer_min) (exec_while (integer_flush boolean_pop) in3) tag_exec_634 () exec_do*times (exec_k_when_autoconstructing (in2) (tag_exec_634 ()) exec_do*times (exec_k_when_autoconstructing (in4) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush) exec_dup_items exec_while ()) in2) exec_k () (exec_do*count (in2) in3) integer_rot) exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (boolean_stackdepth) exec_do*while (in2) exec_k () (exec_do*while (exec_do*while (in2) exec_y_when_autoconstructing () exec_do*count (exec_do*times (exec_while (integer_dup exec_stackdepth in1 boolean_not integer_dup_items))))))))) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 102

step: 4500
program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) in4 boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) integer_min) (exec_while (integer_flush boolean_pop) in3) tag_exec_634 () exec_do*times (exec_k_when_autoconstructing (in2) (tag_exec_634 ()) exec_do*times (exec_k_when_autoconstructing (in4) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush) exec_dup_items exec_while ()) in2) exec_k () (exec_do*count (in2) in3) integer_rot) exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (boolean_stackdepth) exec_do*while (in2) exec_k () (exec_do*while (exec_do*while (in2) exec_y_when_autoconstructing () exec_do*count (exec_do*times (exec_while (integer_dup exec_stackdepth in1 boolean_not integer_dup_items))))))))) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 102

step: 5000
program: (in1 exec_eq integer_lte boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) in4 boolean_invert_first_then_and exec_do*while (exec_k_when_autoconstructing (boolean_and exec_while (integer_flush integer_min) integer_min) (exec_while (integer_flush boolean_pop) in3) tag_exec_634 () exec_do*times (exec_k_when_autoconstructing (in2) (tag_exec_634 ()) exec_do*times (exec_k_when_autoconstructing (in4) (tag_exec_634 ()) exec_do*times (print_integer boolean_dup_times exec_flush) exec_dup_items exec_while ()) in2) exec_k () (exec_do*count (in2) in3) integer_rot) exec_do*while (exec_do*count (exec_do*times (boolean_dup_items exec_dup (boolean_stackdepth) exec_do*while (in2) exec_k () (exec_do*while (exec_do*while (in2) exec_y_when_autoconstructing () exec_do*count (exec_do*times (exec_while (integer_dup exec_stackdepth in1 boolean_not integer_dup_items))))))))) ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 102

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 353
Test mean error for best: 0.35300
Test Case    0 | Error: 0
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 1
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 1
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 1
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 1
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 1
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 1
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 1
Test Case  415 | Error: 1
Test Case  416 | Error: 1
Test Case  417 | Error: 1
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 1
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 1
Test Case  467 | Error: 1
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 1
Test Case  476 | Error: 1
Test Case  477 | Error: 1
Test Case  478 | Error: 1
Test Case  479 | Error: 1
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 1
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 1
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 1
Test Case  571 | Error: 1
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 1
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 1
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 1
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 1
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 1
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 1
Test Case  723 | Error: 1
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 1
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 1
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 1
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 1
Test Case  763 | Error: 1
Test Case  764 | Error: 1
Test Case  765 | Error: 1
Test Case  766 | Error: 0
Test Case  767 | Error: 1
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 1
Test Case  772 | Error: 1
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 1
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 1
Test Case  835 | Error: 1
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 1
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 1
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 1
Test Case  918 | Error: 1
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 1
Test Case  927 | Error: 1
Test Case  928 | Error: 1
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 1
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 1
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 1
Test Case  999 | Error: 1
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -63                 | Program output: -56                
Correct output: 20                  | Program output: 20                 
Correct output: -70                 | Program output: -70                
Correct output: -87                 | Program output: -87                
Correct output: -28                 | Program output: -28                
Correct output: 20                  | Program output: 60                 
Correct output: 73                  | Program output: 73                 
Correct output: -1                  | Program output: -1                 
Correct output: 33                  | Program output: 33                 
Correct output: -29                 | Program output: -29                
Correct output: 69                  | Program output: 69                 
Correct output: -93                 | Program output: -93                
Correct output: -73                 | Program output: -73                
Correct output: -11                 | Program output: -11                
Correct output: 38                  | Program output: 38                 
Correct output: 14                  | Program output: 14                 
Correct output: 14                  | Program output: 77                 
Correct output: 8                   | Program output: 8                  
Correct output: 32                  | Program output: 32                 
Correct output: 22                  | Program output: 22                 
Correct output: 17                  | Program output: 17                 
Correct output: 13                  | Program output: 13                 
Correct output: 57                  | Program output: 57                 
Correct output: 12                  | Program output: 54                 
Correct output: 35                  | Program output: 35                 
Correct output: 60                  | Program output: 61                 
Correct output: 31                  | Program output: 31                 
Correct output: 24                  | Program output: 62                 
Correct output: 3                   | Program output: 3                  
Correct output: 46                  | Program output: 46                 
Correct output: 56                  | Program output: 81                 
Correct output: 29                  | Program output: 29                 
Correct output: 0                   | Program output: 0                  
Correct output: 17                  | Program output: 17                 
Correct output: 3                   | Program output: 3                  
Correct output: -39                 | Program output: -39                
Correct output: -44                 | Program output: -44                
Correct output: -97                 | Program output: -97                
Correct output: -76                 | Program output: -76                
Correct output: -11                 | Program output: -3                 
Correct output: -95                 | Program output: -84                
Correct output: -78                 | Program output: -56                
Correct output: -97                 | Program output: -97                
Correct output: -40                 | Program output: -8                 
Correct output: -92                 | Program output: -49                
Correct output: 7                   | Program output: 7                  
Correct output: -1                  | Program output: -1                 
Correct output: -71                 | Program output: -71                
Correct output: -27                 | Program output: -27                
Correct output: -82                 | Program output: -51                
Correct output: -73                 | Program output: -73                
Correct output: -88                 | Program output: -88                
Correct output: -52                 | Program output: -52                
Correct output: -79                 | Program output: -14                
Correct output: -71                 | Program output: -17                
Correct output: -53                 | Program output: -53                
Correct output: -64                 | Program output: -40                
Correct output: -68                 | Program output: -10                
Correct output: -65                 | Program output: -65                
Correct output: -76                 | Program output: -76                
Correct output: -55                 | Program output: -55                
Correct output: -87                 | Program output: -84                
Correct output: -40                 | Program output: -4                 
Correct output: -95                 | Program output: -27                
Correct output: -68                 | Program output: -66                
Correct output: -28                 | Program output: -7                 
Correct output: -84                 | Program output: -83                
Correct output: -92                 | Program output: -55                
Correct output: -67                 | Program output: -67                
Correct output: -67                 | Program output: -67                
Correct output: -65                 | Program output: -16                
Correct output: -76                 | Program output: -76                
Correct output: -87                 | Program output: -15                
Correct output: -64                 | Program output: -64                
Correct output: -24                 | Program output: -24                
Correct output: -35                 | Program output: -35                
Correct output: -33                 | Program output: -33                
Correct output: -17                 | Program output: -17                
Correct output: -91                 | Program output: -58                
Correct output: -74                 | Program output: -74                
Correct output: -43                 | Program output: -40                
Correct output: -90                 | Program output: -35                
Correct output: -89                 | Program output: -89                
Correct output: 6                   | Program output: 6                  
Correct output: -49                 | Program output: -5                 
Correct output: -91                 | Program output: -66                
Correct output: -82                 | Program output: -82                
Correct output: -39                 | Program output: -36                
Correct output: -83                 | Program output: -58                
Correct output: -37                 | Program output: -37                
Correct output: -76                 | Program output: -76                
Correct output: -19                 | Program output: -19                
Correct output: -73                 | Program output: -73                
Correct output: -87                 | Program output: -87                
Correct output: -39                 | Program output: -13                
;;******************************
