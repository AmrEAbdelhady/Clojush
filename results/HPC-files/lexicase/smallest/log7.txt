Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[83 83 -60 83] -60] [[65 65 65 45] 45] [[-51 -51 81 -51] -51] [[26 26 92 26] 26] [[-26 -26 -1 -26] -26] [[-91 -91 -91 -26] -91] [[49 49 -15 49] -15] [[-43 -26 -43 -43] -43] [[-2 -2 84 -2] -2] [[17 17 17 43] 17] [(-85 -85 -85 -85) -85] [(-36 -36 -36 -36) -36] [(-4 -4 -4 -4) -4] [(37 37 37 37) 37] [(13 13 13 13) 13] [(92 65 80 66) 65] [(5 37 34 16) 5] [(1 7 95 38) 1] [(30 55 53 81) 30] [(57 1 15 2) 1] [(23 94 22 63) 22] [(60 90 0 62) 0] [(46 1 99 39) 1] [(78 15 18 58) 15] [(11 73 44 67) 11] [(97 47 81 6) 6] [(42 97 51 90) 42] [(50 98 3 49) 3] [(0 91 73 88) 0] [(2 99 25 39) 2] [(98 64 64 59) 59] [(43 43 7 61) 7] [(93 62 40 73) 40] [(34 73 20 93) 20] [(57 36 26 32) 26] [(-43 3 36 7) -43] [(-15 -30 2 89) -30] [(92 -41 -93 46) -93] [(-59 91 -82 14) -82] [(-35 -100 -6 -96) -100] [(-3 -43 72 -13) -43] [(-91 -61 53 -87) -91] [(5 90 -53 55) -53] [(-27 -25 -18 80) -27] [(-61 -76 17 -28) -76] [(-70 -61 -31 95) -70] [(-98 -94 38 57) -98] [(21 -68 -88 -33) -88] [(1 -59 53 17) -59] [(-50 -97 -29 -100) -100] [(69 34 71 -67) -67] [(-62 19 -11 -89) -89] [(19 -9 32 -1) -9] [(63 77 -67 -17) -67] [(10 -82 97 68) -82] [(66 -86 93 94) -86] [(33 -60 84 -76) -76] [(-7 -98 100 -82) -98] [(-85 -80 89 -50) -85] [(46 42 -20 -28) -28] [(63 41 -46 4) -46] [(76 27 -46 -87) -87] [(76 -76 -63 -37) -76] [(9 74 -34 65) -34] [(-70 -43 3 -65) -70] [(30 38 49 -2) -2] [(23 53 78 -76) -76] [(2 43 54 99) 2] [(-54 43 -97 -42) -97] [(-57 58 -6 6) -57] [(83 65 94 8) 8] [(-69 73 82 59) -69] [(100 -7 -19 73) -19] [(-40 -31 -8 17) -40] [(-18 8 -24 -9) -24] [(-71 -4 72 97) -71] [(-92 65 -87 0) -92] [(23 25 5 -58) -58] [(18 42 -4 -32) -32] [(40 -100 -37 -84) -100] [(40 -34 -98 96) -98] [(-97 -81 -100 6) -100] [(10 -18 21 48) -18] [(-77 -32 -53 -49) -77] [(76 -11 -90 -49) -90] [(81 65 45 65) 45] [(71 -14 -43 -2) -43] [(-21 -57 74 -9) -57] [(-27 -44 95 -23) -44] [(70 -14 -93 69) -93] [(-64 18 37 -4) -64] [(27 -11 93 -59) -59] [(-92 78 -22 53) -92] [(11 -72 -21 -1) -72] [(-35 53 3 -94) -94])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[83 83 -60 83] -60]
Train Case:   6 | Input/Output: [[65 65 65 45] 45]
Train Case:   7 | Input/Output: [[-51 -51 81 -51] -51]
Train Case:   8 | Input/Output: [[26 26 92 26] 26]
Train Case:   9 | Input/Output: [[-26 -26 -1 -26] -26]
Train Case:  10 | Input/Output: [[-91 -91 -91 -26] -91]
Train Case:  11 | Input/Output: [[49 49 -15 49] -15]
Train Case:  12 | Input/Output: [[-43 -26 -43 -43] -43]
Train Case:  13 | Input/Output: [[-2 -2 84 -2] -2]
Train Case:  14 | Input/Output: [[17 17 17 43] 17]
Train Case:  15 | Input/Output: [(-85 -85 -85 -85) -85]
Train Case:  16 | Input/Output: [(-36 -36 -36 -36) -36]
Train Case:  17 | Input/Output: [(-4 -4 -4 -4) -4]
Train Case:  18 | Input/Output: [(37 37 37 37) 37]
Train Case:  19 | Input/Output: [(13 13 13 13) 13]
Train Case:  20 | Input/Output: [(92 65 80 66) 65]
Train Case:  21 | Input/Output: [(5 37 34 16) 5]
Train Case:  22 | Input/Output: [(1 7 95 38) 1]
Train Case:  23 | Input/Output: [(30 55 53 81) 30]
Train Case:  24 | Input/Output: [(57 1 15 2) 1]
Train Case:  25 | Input/Output: [(23 94 22 63) 22]
Train Case:  26 | Input/Output: [(60 90 0 62) 0]
Train Case:  27 | Input/Output: [(46 1 99 39) 1]
Train Case:  28 | Input/Output: [(78 15 18 58) 15]
Train Case:  29 | Input/Output: [(11 73 44 67) 11]
Train Case:  30 | Input/Output: [(97 47 81 6) 6]
Train Case:  31 | Input/Output: [(42 97 51 90) 42]
Train Case:  32 | Input/Output: [(50 98 3 49) 3]
Train Case:  33 | Input/Output: [(0 91 73 88) 0]
Train Case:  34 | Input/Output: [(2 99 25 39) 2]
Train Case:  35 | Input/Output: [(98 64 64 59) 59]
Train Case:  36 | Input/Output: [(43 43 7 61) 7]
Train Case:  37 | Input/Output: [(93 62 40 73) 40]
Train Case:  38 | Input/Output: [(34 73 20 93) 20]
Train Case:  39 | Input/Output: [(57 36 26 32) 26]
Train Case:  40 | Input/Output: [(-43 3 36 7) -43]
Train Case:  41 | Input/Output: [(-15 -30 2 89) -30]
Train Case:  42 | Input/Output: [(92 -41 -93 46) -93]
Train Case:  43 | Input/Output: [(-59 91 -82 14) -82]
Train Case:  44 | Input/Output: [(-35 -100 -6 -96) -100]
Train Case:  45 | Input/Output: [(-3 -43 72 -13) -43]
Train Case:  46 | Input/Output: [(-91 -61 53 -87) -91]
Train Case:  47 | Input/Output: [(5 90 -53 55) -53]
Train Case:  48 | Input/Output: [(-27 -25 -18 80) -27]
Train Case:  49 | Input/Output: [(-61 -76 17 -28) -76]
Train Case:  50 | Input/Output: [(-70 -61 -31 95) -70]
Train Case:  51 | Input/Output: [(-98 -94 38 57) -98]
Train Case:  52 | Input/Output: [(21 -68 -88 -33) -88]
Train Case:  53 | Input/Output: [(1 -59 53 17) -59]
Train Case:  54 | Input/Output: [(-50 -97 -29 -100) -100]
Train Case:  55 | Input/Output: [(69 34 71 -67) -67]
Train Case:  56 | Input/Output: [(-62 19 -11 -89) -89]
Train Case:  57 | Input/Output: [(19 -9 32 -1) -9]
Train Case:  58 | Input/Output: [(63 77 -67 -17) -67]
Train Case:  59 | Input/Output: [(10 -82 97 68) -82]
Train Case:  60 | Input/Output: [(66 -86 93 94) -86]
Train Case:  61 | Input/Output: [(33 -60 84 -76) -76]
Train Case:  62 | Input/Output: [(-7 -98 100 -82) -98]
Train Case:  63 | Input/Output: [(-85 -80 89 -50) -85]
Train Case:  64 | Input/Output: [(46 42 -20 -28) -28]
Train Case:  65 | Input/Output: [(63 41 -46 4) -46]
Train Case:  66 | Input/Output: [(76 27 -46 -87) -87]
Train Case:  67 | Input/Output: [(76 -76 -63 -37) -76]
Train Case:  68 | Input/Output: [(9 74 -34 65) -34]
Train Case:  69 | Input/Output: [(-70 -43 3 -65) -70]
Train Case:  70 | Input/Output: [(30 38 49 -2) -2]
Train Case:  71 | Input/Output: [(23 53 78 -76) -76]
Train Case:  72 | Input/Output: [(2 43 54 99) 2]
Train Case:  73 | Input/Output: [(-54 43 -97 -42) -97]
Train Case:  74 | Input/Output: [(-57 58 -6 6) -57]
Train Case:  75 | Input/Output: [(83 65 94 8) 8]
Train Case:  76 | Input/Output: [(-69 73 82 59) -69]
Train Case:  77 | Input/Output: [(100 -7 -19 73) -19]
Train Case:  78 | Input/Output: [(-40 -31 -8 17) -40]
Train Case:  79 | Input/Output: [(-18 8 -24 -9) -24]
Train Case:  80 | Input/Output: [(-71 -4 72 97) -71]
Train Case:  81 | Input/Output: [(-92 65 -87 0) -92]
Train Case:  82 | Input/Output: [(23 25 5 -58) -58]
Train Case:  83 | Input/Output: [(18 42 -4 -32) -32]
Train Case:  84 | Input/Output: [(40 -100 -37 -84) -100]
Train Case:  85 | Input/Output: [(40 -34 -98 96) -98]
Train Case:  86 | Input/Output: [(-97 -81 -100 6) -100]
Train Case:  87 | Input/Output: [(10 -18 21 48) -18]
Train Case:  88 | Input/Output: [(-77 -32 -53 -49) -77]
Train Case:  89 | Input/Output: [(76 -11 -90 -49) -90]
Train Case:  90 | Input/Output: [(81 65 45 65) 45]
Train Case:  91 | Input/Output: [(71 -14 -43 -2) -43]
Train Case:  92 | Input/Output: [(-21 -57 74 -9) -57]
Train Case:  93 | Input/Output: [(-27 -44 95 -23) -44]
Train Case:  94 | Input/Output: [(70 -14 -93 69) -93]
Train Case:  95 | Input/Output: [(-64 18 37 -4) -64]
Train Case:  96 | Input/Output: [(27 -11 93 -59) -59]
Train Case:  97 | Input/Output: [(-92 78 -22 53) -92]
Train Case:  98 | Input/Output: [(11 -72 -21 -1) -72]
Train Case:  99 | Input/Output: [(-35 53 3 -94) -94]
Test Case:   0 | Input/Output: [[-28 16 -28 -28] -28]
Test Case:   1 | Input/Output: [[49 49 49 -64] -64]
Test Case:   2 | Input/Output: [[33 33 33 19] 19]
Test Case:   3 | Input/Output: [[7 7 -14 7] -14]
Test Case:   4 | Input/Output: [[2 2 26 2] 2]
Test Case:   5 | Input/Output: [[-16 56 56 56] -16]
Test Case:   6 | Input/Output: [[-2 -20 -20 -20] -20]
Test Case:   7 | Input/Output: [[-75 22 -75 -75] -75]
Test Case:   8 | Input/Output: [[0 0 35 0] 0]
Test Case:   9 | Input/Output: [[94 55 94 94] 55]
Test Case:  10 | Input/Output: [[-65 -65 -65 -15] -65]
Test Case:  11 | Input/Output: [[-30 -20 -30 -30] -30]
Test Case:  12 | Input/Output: [[74 85 74 74] 74]
Test Case:  13 | Input/Output: [[-45 2 -45 -45] -45]
Test Case:  14 | Input/Output: [[67 -12 -12 -12] -12]
Test Case:  15 | Input/Output: [[8 40 8 8] 8]
Test Case:  16 | Input/Output: [[15 15 73 15] 15]
Test Case:  17 | Input/Output: [[99 -59 99 99] -59]
Test Case:  18 | Input/Output: [[-81 -81 -81 36] -81]
Test Case:  19 | Input/Output: [[-43 -43 -43 -92] -92]
Test Case:  20 | Input/Output: [[74 74 74 -36] -36]
Test Case:  21 | Input/Output: [[-32 -32 -32 63] -32]
Test Case:  22 | Input/Output: [[62 -6 62 62] -6]
Test Case:  23 | Input/Output: [[-17 -32 -32 -32] -32]
Test Case:  24 | Input/Output: [[13 -45 13 13] -45]
Test Case:  25 | Input/Output: [[98 98 98 -14] -14]
Test Case:  26 | Input/Output: [[52 52 52 -94] -94]
Test Case:  27 | Input/Output: [[-4 -4 -4 7] -4]
Test Case:  28 | Input/Output: [[-34 32 -34 -34] -34]
Test Case:  29 | Input/Output: [[81 44 81 81] 44]
Test Case:  30 | Input/Output: [[100 100 100 -33] -33]
Test Case:  31 | Input/Output: [[35 35 -100 35] -100]
Test Case:  32 | Input/Output: [[-76 -10 -76 -76] -76]
Test Case:  33 | Input/Output: [[15 15 22 15] 15]
Test Case:  34 | Input/Output: [[40 8 8 8] 8]
Test Case:  35 | Input/Output: [[-35 -35 -35 -49] -49]
Test Case:  36 | Input/Output: [[57 -63 57 57] -63]
Test Case:  37 | Input/Output: [[-4 -16 -16 -16] -16]
Test Case:  38 | Input/Output: [[-90 -90 -44 -90] -90]
Test Case:  39 | Input/Output: [[20 -49 -49 -49] -49]
Test Case:  40 | Input/Output: [[-88 -88 -88 71] -88]
Test Case:  41 | Input/Output: [[9 -8 9 9] -8]
Test Case:  42 | Input/Output: [[28 28 -44 28] -44]
Test Case:  43 | Input/Output: [[11 98 98 98] 11]
Test Case:  44 | Input/Output: [[-8 -8 17 -8] -8]
Test Case:  45 | Input/Output: [[-79 -79 16 -79] -79]
Test Case:  46 | Input/Output: [[-58 -58 -58 92] -58]
Test Case:  47 | Input/Output: [[-96 -23 -23 -23] -96]
Test Case:  48 | Input/Output: [[-20 -20 93 -20] -20]
Test Case:  49 | Input/Output: [[72 39 39 39] 39]
Test Case:  50 | Input/Output: [[99 70 70 70] 70]
Test Case:  51 | Input/Output: [[-59 -59 47 -59] -59]
Test Case:  52 | Input/Output: [[94 -28 -28 -28] -28]
Test Case:  53 | Input/Output: [[-24 -24 -24 -10] -24]
Test Case:  54 | Input/Output: [[-10 -51 -10 -10] -51]
Test Case:  55 | Input/Output: [[-58 -58 -58 -5] -58]
Test Case:  56 | Input/Output: [[32 32 -17 32] -17]
Test Case:  57 | Input/Output: [[-42 -64 -42 -42] -64]
Test Case:  58 | Input/Output: [[-100 -100 -100 -10] -100]
Test Case:  59 | Input/Output: [[35 35 35 35] 35]
Test Case:  60 | Input/Output: [[12 12 12 -50] -50]
Test Case:  61 | Input/Output: [[-38 -62 -62 -62] -62]
Test Case:  62 | Input/Output: [[83 83 95 83] 83]
Test Case:  63 | Input/Output: [[38 38 31 38] 31]
Test Case:  64 | Input/Output: [[29 19 19 19] 19]
Test Case:  65 | Input/Output: [[42 42 42 -57] -57]
Test Case:  66 | Input/Output: [[57 57 57 -68] -68]
Test Case:  67 | Input/Output: [[100 -25 100 100] -25]
Test Case:  68 | Input/Output: [[-64 -64 36 -64] -64]
Test Case:  69 | Input/Output: [[57 63 57 57] 57]
Test Case:  70 | Input/Output: [[42 -76 -76 -76] -76]
Test Case:  71 | Input/Output: [[-47 -47 40 -47] -47]
Test Case:  72 | Input/Output: [[-6 98 -6 -6] -6]
Test Case:  73 | Input/Output: [[-4 -4 -41 -4] -41]
Test Case:  74 | Input/Output: [[-26 -26 -26 -58] -58]
Test Case:  75 | Input/Output: [[81 81 81 -2] -2]
Test Case:  76 | Input/Output: [[61 96 96 96] 61]
Test Case:  77 | Input/Output: [[65 65 84 65] 65]
Test Case:  78 | Input/Output: [[51 -25 -25 -25] -25]
Test Case:  79 | Input/Output: [[36 9 36 36] 9]
Test Case:  80 | Input/Output: [[83 83 53 83] 53]
Test Case:  81 | Input/Output: [[54 -27 54 54] -27]
Test Case:  82 | Input/Output: [[-37 -24 -24 -24] -37]
Test Case:  83 | Input/Output: [[41 16 41 41] 16]
Test Case:  84 | Input/Output: [[-51 62 62 62] -51]
Test Case:  85 | Input/Output: [[38 -17 -17 -17] -17]
Test Case:  86 | Input/Output: [[48 -14 48 48] -14]
Test Case:  87 | Input/Output: [[6 6 84 6] 6]
Test Case:  88 | Input/Output: [[-19 -19 -19 3] -19]
Test Case:  89 | Input/Output: [[13 -71 -71 -71] -71]
Test Case:  90 | Input/Output: [[-82 -82 -82 -65] -82]
Test Case:  91 | Input/Output: [[-1 -93 -1 -1] -93]
Test Case:  92 | Input/Output: [[36 -51 -51 -51] -51]
Test Case:  93 | Input/Output: [[-41 -41 -41 -98] -98]
Test Case:  94 | Input/Output: [[25 42 25 25] 25]
Test Case:  95 | Input/Output: [[52 2 52 52] 2]
Test Case:  96 | Input/Output: [[44 -61 44 44] -61]
Test Case:  97 | Input/Output: [[89 -96 89 89] -96]
Test Case:  98 | Input/Output: [[-15 47 47 47] -15]
Test Case:  99 | Input/Output: [[-82 62 -82 -82] -82]
Test Case: 100 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 101 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 102 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 103 | Input/Output: [(29 29 29 29) 29]
Test Case: 104 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 105 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 106 | Input/Output: [(87 87 87 87) 87]
Test Case: 107 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 108 | Input/Output: [(20 20 20 20) 20]
Test Case: 109 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 110 | Input/Output: [(3 3 3 3) 3]
Test Case: 111 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 112 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 113 | Input/Output: [(6 6 6 6) 6]
Test Case: 114 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 115 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 116 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 117 | Input/Output: [(63 63 63 63) 63]
Test Case: 118 | Input/Output: [(81 81 81 81) 81]
Test Case: 119 | Input/Output: [(49 49 49 49) 49]
Test Case: 120 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 121 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 122 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 123 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 124 | Input/Output: [(20 20 20 20) 20]
Test Case: 125 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 126 | Input/Output: [(76 76 76 76) 76]
Test Case: 127 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 128 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 129 | Input/Output: [(70 70 70 70) 70]
Test Case: 130 | Input/Output: [(69 69 69 69) 69]
Test Case: 131 | Input/Output: [(69 69 69 69) 69]
Test Case: 132 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 133 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 134 | Input/Output: [(15 15 15 15) 15]
Test Case: 135 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 136 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 137 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 138 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 139 | Input/Output: [(38 38 38 38) 38]
Test Case: 140 | Input/Output: [(97 97 97 97) 97]
Test Case: 141 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 142 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 143 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 144 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 145 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 146 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 147 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 148 | Input/Output: [(42 42 42 42) 42]
Test Case: 149 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 150 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 151 | Input/Output: [(85 85 85 85) 85]
Test Case: 152 | Input/Output: [(7 7 7 7) 7]
Test Case: 153 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 154 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 155 | Input/Output: [(48 48 48 48) 48]
Test Case: 156 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 157 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 158 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 159 | Input/Output: [(0 0 0 0) 0]
Test Case: 160 | Input/Output: [(18 18 18 18) 18]
Test Case: 161 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 162 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 163 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 164 | Input/Output: [(26 26 26 26) 26]
Test Case: 165 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 166 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 167 | Input/Output: [(25 25 25 25) 25]
Test Case: 168 | Input/Output: [(17 17 17 17) 17]
Test Case: 169 | Input/Output: [(46 46 46 46) 46]
Test Case: 170 | Input/Output: [(-46 -46 -46 -46) -46]
Test Case: 171 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 172 | Input/Output: [(42 42 42 42) 42]
Test Case: 173 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 174 | Input/Output: [(46 46 46 46) 46]
Test Case: 175 | Input/Output: [(92 92 92 92) 92]
Test Case: 176 | Input/Output: [(66 66 66 66) 66]
Test Case: 177 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 178 | Input/Output: [(77 77 77 77) 77]
Test Case: 179 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 180 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 181 | Input/Output: [(39 39 39 39) 39]
Test Case: 182 | Input/Output: [(3 3 3 3) 3]
Test Case: 183 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 184 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 185 | Input/Output: [(87 87 87 87) 87]
Test Case: 186 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 187 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 188 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 189 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 190 | Input/Output: [(73 73 73 73) 73]
Test Case: 191 | Input/Output: [(85 85 85 85) 85]
Test Case: 192 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 193 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 194 | Input/Output: [(61 61 61 61) 61]
Test Case: 195 | Input/Output: [(71 71 71 71) 71]
Test Case: 196 | Input/Output: [(12 12 12 12) 12]
Test Case: 197 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 198 | Input/Output: [(40 40 40 40) 40]
Test Case: 199 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 200 | Input/Output: [(95 79 53 17) 17]
Test Case: 201 | Input/Output: [(41 99 0 13) 0]
Test Case: 202 | Input/Output: [(48 58 72 54) 48]
Test Case: 203 | Input/Output: [(90 76 19 45) 19]
Test Case: 204 | Input/Output: [(57 2 60 84) 2]
Test Case: 205 | Input/Output: [(46 100 38 54) 38]
Test Case: 206 | Input/Output: [(90 94 48 26) 26]
Test Case: 207 | Input/Output: [(75 54 67 21) 21]
Test Case: 208 | Input/Output: [(54 23 59 5) 5]
Test Case: 209 | Input/Output: [(100 9 36 98) 9]
Test Case: 210 | Input/Output: [(8 48 41 52) 8]
Test Case: 211 | Input/Output: [(83 12 91 29) 12]
Test Case: 212 | Input/Output: [(57 80 54 39) 39]
Test Case: 213 | Input/Output: [(93 31 43 77) 31]
Test Case: 214 | Input/Output: [(33 48 15 58) 15]
Test Case: 215 | Input/Output: [(3 60 22 2) 2]
Test Case: 216 | Input/Output: [(66 68 13 7) 7]
Test Case: 217 | Input/Output: [(43 81 98 17) 17]
Test Case: 218 | Input/Output: [(71 29 61 88) 29]
Test Case: 219 | Input/Output: [(10 40 90 63) 10]
Test Case: 220 | Input/Output: [(35 58 62 95) 35]
Test Case: 221 | Input/Output: [(34 57 51 87) 34]
Test Case: 222 | Input/Output: [(85 71 25 65) 25]
Test Case: 223 | Input/Output: [(53 62 40 88) 40]
Test Case: 224 | Input/Output: [(46 78 11 87) 11]
Test Case: 225 | Input/Output: [(47 34 79 16) 16]
Test Case: 226 | Input/Output: [(60 3 92 32) 3]
Test Case: 227 | Input/Output: [(50 24 50 11) 11]
Test Case: 228 | Input/Output: [(71 90 46 35) 35]
Test Case: 229 | Input/Output: [(4 5 32 64) 4]
Test Case: 230 | Input/Output: [(100 6 90 46) 6]
Test Case: 231 | Input/Output: [(33 71 32 37) 32]
Test Case: 232 | Input/Output: [(80 96 87 50) 50]
Test Case: 233 | Input/Output: [(59 90 80 92) 59]
Test Case: 234 | Input/Output: [(23 21 70 69) 21]
Test Case: 235 | Input/Output: [(31 14 26 21) 14]
Test Case: 236 | Input/Output: [(20 35 28 39) 20]
Test Case: 237 | Input/Output: [(11 70 80 67) 11]
Test Case: 238 | Input/Output: [(78 92 41 7) 7]
Test Case: 239 | Input/Output: [(12 54 16 48) 12]
Test Case: 240 | Input/Output: [(86 34 17 18) 17]
Test Case: 241 | Input/Output: [(93 45 58 98) 45]
Test Case: 242 | Input/Output: [(65 38 65 23) 23]
Test Case: 243 | Input/Output: [(17 94 13 1) 1]
Test Case: 244 | Input/Output: [(4 72 92 55) 4]
Test Case: 245 | Input/Output: [(39 91 38 59) 38]
Test Case: 246 | Input/Output: [(46 7 52 73) 7]
Test Case: 247 | Input/Output: [(45 24 68 73) 24]
Test Case: 248 | Input/Output: [(24 90 50 19) 19]
Test Case: 249 | Input/Output: [(63 11 84 31) 11]
Test Case: 250 | Input/Output: [(28 83 47 24) 24]
Test Case: 251 | Input/Output: [(75 54 75 51) 51]
Test Case: 252 | Input/Output: [(48 1 48 17) 1]
Test Case: 253 | Input/Output: [(20 2 66 44) 2]
Test Case: 254 | Input/Output: [(13 59 62 59) 13]
Test Case: 255 | Input/Output: [(49 21 4 74) 4]
Test Case: 256 | Input/Output: [(85 25 83 55) 25]
Test Case: 257 | Input/Output: [(6 2 97 33) 2]
Test Case: 258 | Input/Output: [(15 56 17 22) 15]
Test Case: 259 | Input/Output: [(47 54 35 85) 35]
Test Case: 260 | Input/Output: [(5 76 75 78) 5]
Test Case: 261 | Input/Output: [(65 24 78 21) 21]
Test Case: 262 | Input/Output: [(99 63 11 19) 11]
Test Case: 263 | Input/Output: [(10 91 30 91) 10]
Test Case: 264 | Input/Output: [(8 19 13 73) 8]
Test Case: 265 | Input/Output: [(24 17 26 10) 10]
Test Case: 266 | Input/Output: [(52 5 31 22) 5]
Test Case: 267 | Input/Output: [(74 98 47 79) 47]
Test Case: 268 | Input/Output: [(60 83 17 71) 17]
Test Case: 269 | Input/Output: [(34 1 87 76) 1]
Test Case: 270 | Input/Output: [(2 46 85 12) 2]
Test Case: 271 | Input/Output: [(88 66 11 21) 11]
Test Case: 272 | Input/Output: [(24 97 5 99) 5]
Test Case: 273 | Input/Output: [(94 10 3 38) 3]
Test Case: 274 | Input/Output: [(52 26 37 2) 2]
Test Case: 275 | Input/Output: [(14 19 40 97) 14]
Test Case: 276 | Input/Output: [(16 66 94 31) 16]
Test Case: 277 | Input/Output: [(57 33 64 4) 4]
Test Case: 278 | Input/Output: [(38 10 36 90) 10]
Test Case: 279 | Input/Output: [(1 8 10 73) 1]
Test Case: 280 | Input/Output: [(34 47 14 56) 14]
Test Case: 281 | Input/Output: [(76 94 17 32) 17]
Test Case: 282 | Input/Output: [(97 26 82 51) 26]
Test Case: 283 | Input/Output: [(77 56 22 41) 22]
Test Case: 284 | Input/Output: [(82 27 52 55) 27]
Test Case: 285 | Input/Output: [(12 34 81 42) 12]
Test Case: 286 | Input/Output: [(74 71 60 5) 5]
Test Case: 287 | Input/Output: [(94 16 67 70) 16]
Test Case: 288 | Input/Output: [(41 71 35 62) 35]
Test Case: 289 | Input/Output: [(96 5 86 98) 5]
Test Case: 290 | Input/Output: [(8 24 44 40) 8]
Test Case: 291 | Input/Output: [(77 42 0 62) 0]
Test Case: 292 | Input/Output: [(46 62 20 88) 20]
Test Case: 293 | Input/Output: [(85 66 30 85) 30]
Test Case: 294 | Input/Output: [(37 100 33 37) 33]
Test Case: 295 | Input/Output: [(52 21 45 72) 21]
Test Case: 296 | Input/Output: [(71 20 80 54) 20]
Test Case: 297 | Input/Output: [(47 82 88 4) 4]
Test Case: 298 | Input/Output: [(82 30 39 93) 30]
Test Case: 299 | Input/Output: [(74 5 26 41) 5]
Test Case: 300 | Input/Output: [(11 16 59 47) 11]
Test Case: 301 | Input/Output: [(87 88 85 34) 34]
Test Case: 302 | Input/Output: [(58 4 83 36) 4]
Test Case: 303 | Input/Output: [(58 79 32 52) 32]
Test Case: 304 | Input/Output: [(73 27 75 97) 27]
Test Case: 305 | Input/Output: [(48 63 68 74) 48]
Test Case: 306 | Input/Output: [(37 33 4 42) 4]
Test Case: 307 | Input/Output: [(74 63 89 64) 63]
Test Case: 308 | Input/Output: [(36 63 10 34) 10]
Test Case: 309 | Input/Output: [(18 25 25 71) 18]
Test Case: 310 | Input/Output: [(95 81 86 0) 0]
Test Case: 311 | Input/Output: [(83 49 61 5) 5]
Test Case: 312 | Input/Output: [(45 37 44 43) 37]
Test Case: 313 | Input/Output: [(61 83 19 72) 19]
Test Case: 314 | Input/Output: [(38 16 62 85) 16]
Test Case: 315 | Input/Output: [(21 85 16 39) 16]
Test Case: 316 | Input/Output: [(30 9 83 58) 9]
Test Case: 317 | Input/Output: [(61 83 16 7) 7]
Test Case: 318 | Input/Output: [(79 60 67 31) 31]
Test Case: 319 | Input/Output: [(70 40 86 19) 19]
Test Case: 320 | Input/Output: [(15 4 58 48) 4]
Test Case: 321 | Input/Output: [(40 68 30 83) 30]
Test Case: 322 | Input/Output: [(29 64 11 64) 11]
Test Case: 323 | Input/Output: [(21 78 9 60) 9]
Test Case: 324 | Input/Output: [(4 82 31 24) 4]
Test Case: 325 | Input/Output: [(39 97 89 1) 1]
Test Case: 326 | Input/Output: [(71 79 42 73) 42]
Test Case: 327 | Input/Output: [(29 96 14 24) 14]
Test Case: 328 | Input/Output: [(81 54 33 57) 33]
Test Case: 329 | Input/Output: [(29 49 92 2) 2]
Test Case: 330 | Input/Output: [(27 47 31 11) 11]
Test Case: 331 | Input/Output: [(37 44 69 90) 37]
Test Case: 332 | Input/Output: [(84 97 21 96) 21]
Test Case: 333 | Input/Output: [(45 8 27 67) 8]
Test Case: 334 | Input/Output: [(29 29 38 24) 24]
Test Case: 335 | Input/Output: [(47 62 76 32) 32]
Test Case: 336 | Input/Output: [(73 78 12 60) 12]
Test Case: 337 | Input/Output: [(21 19 82 39) 19]
Test Case: 338 | Input/Output: [(25 57 47 86) 25]
Test Case: 339 | Input/Output: [(20 71 93 73) 20]
Test Case: 340 | Input/Output: [(12 57 16 86) 12]
Test Case: 341 | Input/Output: [(67 36 98 16) 16]
Test Case: 342 | Input/Output: [(83 20 20 28) 20]
Test Case: 343 | Input/Output: [(41 73 3 90) 3]
Test Case: 344 | Input/Output: [(84 35 4 43) 4]
Test Case: 345 | Input/Output: [(97 39 55 34) 34]
Test Case: 346 | Input/Output: [(56 10 67 60) 10]
Test Case: 347 | Input/Output: [(46 60 21 20) 20]
Test Case: 348 | Input/Output: [(14 36 73 96) 14]
Test Case: 349 | Input/Output: [(0 19 99 94) 0]
Test Case: 350 | Input/Output: [(81 6 29 61) 6]
Test Case: 351 | Input/Output: [(59 82 7 31) 7]
Test Case: 352 | Input/Output: [(11 40 9 81) 9]
Test Case: 353 | Input/Output: [(36 63 58 90) 36]
Test Case: 354 | Input/Output: [(33 25 78 56) 25]
Test Case: 355 | Input/Output: [(33 15 48 9) 9]
Test Case: 356 | Input/Output: [(21 80 20 38) 20]
Test Case: 357 | Input/Output: [(34 87 34 26) 26]
Test Case: 358 | Input/Output: [(31 47 35 34) 31]
Test Case: 359 | Input/Output: [(0 23 23 94) 0]
Test Case: 360 | Input/Output: [(87 37 30 20) 20]
Test Case: 361 | Input/Output: [(53 65 99 30) 30]
Test Case: 362 | Input/Output: [(28 91 25 46) 25]
Test Case: 363 | Input/Output: [(67 81 90 34) 34]
Test Case: 364 | Input/Output: [(64 40 13 55) 13]
Test Case: 365 | Input/Output: [(78 9 29 68) 9]
Test Case: 366 | Input/Output: [(20 72 22 86) 20]
Test Case: 367 | Input/Output: [(7 42 61 14) 7]
Test Case: 368 | Input/Output: [(85 87 19 11) 11]
Test Case: 369 | Input/Output: [(44 76 88 30) 30]
Test Case: 370 | Input/Output: [(93 80 96 31) 31]
Test Case: 371 | Input/Output: [(56 58 85 78) 56]
Test Case: 372 | Input/Output: [(30 48 46 79) 30]
Test Case: 373 | Input/Output: [(34 78 45 67) 34]
Test Case: 374 | Input/Output: [(46 94 30 23) 23]
Test Case: 375 | Input/Output: [(19 32 11 94) 11]
Test Case: 376 | Input/Output: [(8 55 54 16) 8]
Test Case: 377 | Input/Output: [(63 6 58 10) 6]
Test Case: 378 | Input/Output: [(95 61 48 93) 48]
Test Case: 379 | Input/Output: [(98 70 30 17) 17]
Test Case: 380 | Input/Output: [(50 48 63 55) 48]
Test Case: 381 | Input/Output: [(7 96 67 2) 2]
Test Case: 382 | Input/Output: [(71 44 57 95) 44]
Test Case: 383 | Input/Output: [(64 53 88 1) 1]
Test Case: 384 | Input/Output: [(14 72 36 17) 14]
Test Case: 385 | Input/Output: [(84 99 36 12) 12]
Test Case: 386 | Input/Output: [(18 78 77 14) 14]
Test Case: 387 | Input/Output: [(2 35 78 15) 2]
Test Case: 388 | Input/Output: [(28 58 0 31) 0]
Test Case: 389 | Input/Output: [(53 78 16 6) 6]
Test Case: 390 | Input/Output: [(76 43 17 42) 17]
Test Case: 391 | Input/Output: [(3 48 4 95) 3]
Test Case: 392 | Input/Output: [(49 28 41 70) 28]
Test Case: 393 | Input/Output: [(44 7 27 65) 7]
Test Case: 394 | Input/Output: [(68 78 70 34) 34]
Test Case: 395 | Input/Output: [(36 2 97 67) 2]
Test Case: 396 | Input/Output: [(27 66 71 74) 27]
Test Case: 397 | Input/Output: [(14 73 29 100) 14]
Test Case: 398 | Input/Output: [(4 11 95 60) 4]
Test Case: 399 | Input/Output: [(37 54 74 95) 37]
Test Case: 400 | Input/Output: [(1 -82 94 -96) -96]
Test Case: 401 | Input/Output: [(-4 -75 41 100) -75]
Test Case: 402 | Input/Output: [(18 -16 -37 -38) -38]
Test Case: 403 | Input/Output: [(-26 -42 23 -46) -46]
Test Case: 404 | Input/Output: [(-48 81 5 -16) -48]
Test Case: 405 | Input/Output: [(-64 69 -73 74) -73]
Test Case: 406 | Input/Output: [(-75 -9 -26 -94) -94]
Test Case: 407 | Input/Output: [(-21 -86 55 -63) -86]
Test Case: 408 | Input/Output: [(97 -37 12 -19) -37]
Test Case: 409 | Input/Output: [(82 86 -76 -25) -76]
Test Case: 410 | Input/Output: [(-4 35 53 -37) -37]
Test Case: 411 | Input/Output: [(-36 57 -69 18) -69]
Test Case: 412 | Input/Output: [(74 -82 -73 68) -82]
Test Case: 413 | Input/Output: [(-46 26 -57 -36) -57]
Test Case: 414 | Input/Output: [(-48 -33 24 73) -48]
Test Case: 415 | Input/Output: [(-24 -91 -94 -28) -94]
Test Case: 416 | Input/Output: [(-43 -36 25 91) -43]
Test Case: 417 | Input/Output: [(-23 24 13 -83) -83]
Test Case: 418 | Input/Output: [(-68 -26 37 100) -68]
Test Case: 419 | Input/Output: [(35 41 -12 76) -12]
Test Case: 420 | Input/Output: [(-54 37 87 -50) -54]
Test Case: 421 | Input/Output: [(-24 -35 47 0) -35]
Test Case: 422 | Input/Output: [(-17 55 89 25) -17]
Test Case: 423 | Input/Output: [(-89 -4 28 -34) -89]
Test Case: 424 | Input/Output: [(74 5 45 -82) -82]
Test Case: 425 | Input/Output: [(-15 60 18 -10) -15]
Test Case: 426 | Input/Output: [(-14 -25 -97 32) -97]
Test Case: 427 | Input/Output: [(-44 96 -83 -13) -83]
Test Case: 428 | Input/Output: [(-22 94 -85 55) -85]
Test Case: 429 | Input/Output: [(-9 35 -43 79) -43]
Test Case: 430 | Input/Output: [(-19 -60 72 -96) -96]
Test Case: 431 | Input/Output: [(7 -17 -73 -98) -98]
Test Case: 432 | Input/Output: [(84 -68 1 45) -68]
Test Case: 433 | Input/Output: [(-37 74 28 -48) -48]
Test Case: 434 | Input/Output: [(10 27 -26 8) -26]
Test Case: 435 | Input/Output: [(-86 -23 -27 53) -86]
Test Case: 436 | Input/Output: [(55 -94 90 75) -94]
Test Case: 437 | Input/Output: [(88 -79 -87 31) -87]
Test Case: 438 | Input/Output: [(54 -62 -76 11) -76]
Test Case: 439 | Input/Output: [(-86 48 -92 54) -92]
Test Case: 440 | Input/Output: [(-60 82 34 3) -60]
Test Case: 441 | Input/Output: [(42 91 18 82) 18]
Test Case: 442 | Input/Output: [(30 -30 -26 49) -30]
Test Case: 443 | Input/Output: [(23 75 14 -96) -96]
Test Case: 444 | Input/Output: [(-2 -7 -29 -97) -97]
Test Case: 445 | Input/Output: [(39 24 -29 81) -29]
Test Case: 446 | Input/Output: [(29 -97 -82 9) -97]
Test Case: 447 | Input/Output: [(85 16 76 94) 16]
Test Case: 448 | Input/Output: [(-38 17 73 -10) -38]
Test Case: 449 | Input/Output: [(-62 90 -41 0) -62]
Test Case: 450 | Input/Output: [(19 51 -32 9) -32]
Test Case: 451 | Input/Output: [(40 42 25 71) 25]
Test Case: 452 | Input/Output: [(60 30 43 -31) -31]
Test Case: 453 | Input/Output: [(-64 -70 11 10) -70]
Test Case: 454 | Input/Output: [(-76 50 56 39) -76]
Test Case: 455 | Input/Output: [(-36 31 -66 98) -66]
Test Case: 456 | Input/Output: [(64 -10 91 29) -10]
Test Case: 457 | Input/Output: [(10 -100 72 77) -100]
Test Case: 458 | Input/Output: [(-91 11 23 70) -91]
Test Case: 459 | Input/Output: [(96 -29 -53 -48) -53]
Test Case: 460 | Input/Output: [(33 -9 35 -58) -58]
Test Case: 461 | Input/Output: [(26 -51 -52 54) -52]
Test Case: 462 | Input/Output: [(-33 -23 -3 -88) -88]
Test Case: 463 | Input/Output: [(-15 -37 40 90) -37]
Test Case: 464 | Input/Output: [(-93 69 42 98) -93]
Test Case: 465 | Input/Output: [(-42 9 -22 -14) -42]
Test Case: 466 | Input/Output: [(71 91 57 -62) -62]
Test Case: 467 | Input/Output: [(46 27 -86 -46) -86]
Test Case: 468 | Input/Output: [(3 31 -67 81) -67]
Test Case: 469 | Input/Output: [(96 -29 -28 -31) -31]
Test Case: 470 | Input/Output: [(-83 80 50 -41) -83]
Test Case: 471 | Input/Output: [(-85 65 -78 16) -85]
Test Case: 472 | Input/Output: [(63 35 98 -75) -75]
Test Case: 473 | Input/Output: [(-30 -98 -57 -72) -98]
Test Case: 474 | Input/Output: [(-47 19 -63 80) -63]
Test Case: 475 | Input/Output: [(65 -67 -62 -78) -78]
Test Case: 476 | Input/Output: [(-59 60 70 -30) -59]
Test Case: 477 | Input/Output: [(71 -49 -53 99) -53]
Test Case: 478 | Input/Output: [(-2 -60 11 -94) -94]
Test Case: 479 | Input/Output: [(64 19 9 -8) -8]
Test Case: 480 | Input/Output: [(26 -47 -100 -8) -100]
Test Case: 481 | Input/Output: [(-70 -24 39 57) -70]
Test Case: 482 | Input/Output: [(35 -7 -14 -20) -20]
Test Case: 483 | Input/Output: [(-56 -53 1 -10) -56]
Test Case: 484 | Input/Output: [(30 3 16 29) 3]
Test Case: 485 | Input/Output: [(67 -36 -45 3) -45]
Test Case: 486 | Input/Output: [(-44 -40 -24 -30) -44]
Test Case: 487 | Input/Output: [(-3 -76 -16 -4) -76]
Test Case: 488 | Input/Output: [(-36 -53 66 61) -53]
Test Case: 489 | Input/Output: [(-22 -49 -73 -65) -73]
Test Case: 490 | Input/Output: [(87 64 -18 18) -18]
Test Case: 491 | Input/Output: [(-44 -39 98 75) -44]
Test Case: 492 | Input/Output: [(-20 -50 40 -10) -50]
Test Case: 493 | Input/Output: [(-13 -99 -27 73) -99]
Test Case: 494 | Input/Output: [(17 77 -93 33) -93]
Test Case: 495 | Input/Output: [(-18 -40 -4 41) -40]
Test Case: 496 | Input/Output: [(37 92 -23 76) -23]
Test Case: 497 | Input/Output: [(-21 65 89 35) -21]
Test Case: 498 | Input/Output: [(66 61 -7 28) -7]
Test Case: 499 | Input/Output: [(-51 -67 13 83) -67]
Test Case: 500 | Input/Output: [(44 -39 -37 91) -39]
Test Case: 501 | Input/Output: [(-83 -64 -92 51) -92]
Test Case: 502 | Input/Output: [(60 -70 -87 -44) -87]
Test Case: 503 | Input/Output: [(-7 52 -54 -56) -56]
Test Case: 504 | Input/Output: [(70 72 -23 -39) -39]
Test Case: 505 | Input/Output: [(-6 -91 -65 -77) -91]
Test Case: 506 | Input/Output: [(-100 -28 93 8) -100]
Test Case: 507 | Input/Output: [(-11 28 18 46) -11]
Test Case: 508 | Input/Output: [(26 -84 -26 37) -84]
Test Case: 509 | Input/Output: [(67 46 12 63) 12]
Test Case: 510 | Input/Output: [(-73 46 -49 57) -73]
Test Case: 511 | Input/Output: [(50 -41 38 -12) -41]
Test Case: 512 | Input/Output: [(33 15 -28 -54) -54]
Test Case: 513 | Input/Output: [(-38 -46 -90 -47) -90]
Test Case: 514 | Input/Output: [(5 -75 -90 -70) -90]
Test Case: 515 | Input/Output: [(27 99 -36 -36) -36]
Test Case: 516 | Input/Output: [(0 5 -69 -72) -72]
Test Case: 517 | Input/Output: [(-40 29 66 -58) -58]
Test Case: 518 | Input/Output: [(-87 22 -99 -100) -100]
Test Case: 519 | Input/Output: [(-57 61 -34 -61) -61]
Test Case: 520 | Input/Output: [(81 84 -15 -6) -15]
Test Case: 521 | Input/Output: [(-55 84 70 -28) -55]
Test Case: 522 | Input/Output: [(76 -19 -13 33) -19]
Test Case: 523 | Input/Output: [(-31 67 93 -7) -31]
Test Case: 524 | Input/Output: [(-48 -96 -57 -30) -96]
Test Case: 525 | Input/Output: [(-36 84 22 -22) -36]
Test Case: 526 | Input/Output: [(-29 -96 -12 22) -96]
Test Case: 527 | Input/Output: [(90 13 -31 -22) -31]
Test Case: 528 | Input/Output: [(12 66 25 99) 12]
Test Case: 529 | Input/Output: [(39 58 49 78) 39]
Test Case: 530 | Input/Output: [(52 -40 -77 -70) -77]
Test Case: 531 | Input/Output: [(-95 -30 40 -26) -95]
Test Case: 532 | Input/Output: [(-42 28 -16 -70) -70]
Test Case: 533 | Input/Output: [(-92 95 -20 -48) -92]
Test Case: 534 | Input/Output: [(-28 -28 -81 -38) -81]
Test Case: 535 | Input/Output: [(77 77 -10 -94) -94]
Test Case: 536 | Input/Output: [(-51 76 45 -85) -85]
Test Case: 537 | Input/Output: [(70 -85 42 2) -85]
Test Case: 538 | Input/Output: [(-44 67 65 -30) -44]
Test Case: 539 | Input/Output: [(84 -8 -99 66) -99]
Test Case: 540 | Input/Output: [(-40 1 -87 -64) -87]
Test Case: 541 | Input/Output: [(-97 53 -58 -46) -97]
Test Case: 542 | Input/Output: [(81 -89 -80 1) -89]
Test Case: 543 | Input/Output: [(9 -27 -30 -77) -77]
Test Case: 544 | Input/Output: [(92 -23 0 -33) -33]
Test Case: 545 | Input/Output: [(51 -51 41 -71) -71]
Test Case: 546 | Input/Output: [(-2 -93 -20 -43) -93]
Test Case: 547 | Input/Output: [(-7 94 26 50) -7]
Test Case: 548 | Input/Output: [(-73 1 -4 0) -73]
Test Case: 549 | Input/Output: [(-58 -64 -70 -78) -78]
Test Case: 550 | Input/Output: [(-18 -91 62 23) -91]
Test Case: 551 | Input/Output: [(-20 -45 -94 -71) -94]
Test Case: 552 | Input/Output: [(2 -63 90 -65) -65]
Test Case: 553 | Input/Output: [(77 -14 0 -30) -30]
Test Case: 554 | Input/Output: [(-82 10 -92 -84) -92]
Test Case: 555 | Input/Output: [(-24 -13 22 59) -24]
Test Case: 556 | Input/Output: [(76 58 18 -82) -82]
Test Case: 557 | Input/Output: [(79 -13 -57 60) -57]
Test Case: 558 | Input/Output: [(5 75 28 23) 5]
Test Case: 559 | Input/Output: [(54 -4 27 85) -4]
Test Case: 560 | Input/Output: [(-60 -93 27 -2) -93]
Test Case: 561 | Input/Output: [(15 -47 -90 -26) -90]
Test Case: 562 | Input/Output: [(-57 58 30 69) -57]
Test Case: 563 | Input/Output: [(-45 32 -34 -64) -64]
Test Case: 564 | Input/Output: [(-94 -98 -68 -29) -98]
Test Case: 565 | Input/Output: [(-38 -5 -100 15) -100]
Test Case: 566 | Input/Output: [(42 -80 -77 85) -80]
Test Case: 567 | Input/Output: [(-69 -40 -92 43) -92]
Test Case: 568 | Input/Output: [(-85 13 12 30) -85]
Test Case: 569 | Input/Output: [(-27 -69 -45 6) -69]
Test Case: 570 | Input/Output: [(9 98 -82 82) -82]
Test Case: 571 | Input/Output: [(-56 78 21 -84) -84]
Test Case: 572 | Input/Output: [(-34 98 -60 36) -60]
Test Case: 573 | Input/Output: [(-91 40 97 -25) -91]
Test Case: 574 | Input/Output: [(80 27 -64 49) -64]
Test Case: 575 | Input/Output: [(-35 -20 79 -55) -55]
Test Case: 576 | Input/Output: [(-37 15 48 -96) -96]
Test Case: 577 | Input/Output: [(-39 86 -4 -35) -39]
Test Case: 578 | Input/Output: [(-28 -85 -14 79) -85]
Test Case: 579 | Input/Output: [(56 94 10 -10) -10]
Test Case: 580 | Input/Output: [(-16 -17 6 23) -17]
Test Case: 581 | Input/Output: [(-71 -52 58 49) -71]
Test Case: 582 | Input/Output: [(73 52 -84 -37) -84]
Test Case: 583 | Input/Output: [(-9 82 13 -39) -39]
Test Case: 584 | Input/Output: [(-26 57 -78 -55) -78]
Test Case: 585 | Input/Output: [(-78 25 -58 -43) -78]
Test Case: 586 | Input/Output: [(44 87 65 -86) -86]
Test Case: 587 | Input/Output: [(32 13 86 3) 3]
Test Case: 588 | Input/Output: [(59 -88 -41 92) -88]
Test Case: 589 | Input/Output: [(89 50 68 -54) -54]
Test Case: 590 | Input/Output: [(15 36 95 -72) -72]
Test Case: 591 | Input/Output: [(-90 -12 -97 -79) -97]
Test Case: 592 | Input/Output: [(-34 30 72 31) -34]
Test Case: 593 | Input/Output: [(74 -22 -82 86) -82]
Test Case: 594 | Input/Output: [(-3 -42 76 80) -42]
Test Case: 595 | Input/Output: [(88 -34 81 10) -34]
Test Case: 596 | Input/Output: [(-25 78 64 98) -25]
Test Case: 597 | Input/Output: [(43 -96 -76 -49) -96]
Test Case: 598 | Input/Output: [(84 -49 -27 39) -49]
Test Case: 599 | Input/Output: [(-88 -87 75 12) -88]
Test Case: 600 | Input/Output: [(-97 -50 -21 -97) -97]
Test Case: 601 | Input/Output: [(-68 -3 -5 55) -68]
Test Case: 602 | Input/Output: [(-12 -7 -76 -88) -88]
Test Case: 603 | Input/Output: [(-21 88 80 -25) -25]
Test Case: 604 | Input/Output: [(91 -36 64 100) -36]
Test Case: 605 | Input/Output: [(94 85 -4 -10) -10]
Test Case: 606 | Input/Output: [(84 -33 10 -8) -33]
Test Case: 607 | Input/Output: [(-30 -23 3 17) -30]
Test Case: 608 | Input/Output: [(2 -25 98 49) -25]
Test Case: 609 | Input/Output: [(-17 -1 99 71) -17]
Test Case: 610 | Input/Output: [(50 -55 1 -8) -55]
Test Case: 611 | Input/Output: [(-26 -72 -99 -43) -99]
Test Case: 612 | Input/Output: [(57 -50 -3 1) -50]
Test Case: 613 | Input/Output: [(-74 24 99 62) -74]
Test Case: 614 | Input/Output: [(16 34 79 -60) -60]
Test Case: 615 | Input/Output: [(74 18 -36 96) -36]
Test Case: 616 | Input/Output: [(4 -30 52 65) -30]
Test Case: 617 | Input/Output: [(27 20 -81 -5) -81]
Test Case: 618 | Input/Output: [(-94 -20 15 -14) -94]
Test Case: 619 | Input/Output: [(-74 -70 100 80) -74]
Test Case: 620 | Input/Output: [(47 7 -29 -14) -29]
Test Case: 621 | Input/Output: [(-92 62 -36 -71) -92]
Test Case: 622 | Input/Output: [(-84 53 -56 -32) -84]
Test Case: 623 | Input/Output: [(22 -59 49 -72) -72]
Test Case: 624 | Input/Output: [(-71 55 -12 -11) -71]
Test Case: 625 | Input/Output: [(-52 8 100 -47) -52]
Test Case: 626 | Input/Output: [(5 -39 -82 30) -82]
Test Case: 627 | Input/Output: [(-41 62 19 7) -41]
Test Case: 628 | Input/Output: [(39 47 84 38) 38]
Test Case: 629 | Input/Output: [(57 83 58 15) 15]
Test Case: 630 | Input/Output: [(-66 -36 22 66) -66]
Test Case: 631 | Input/Output: [(53 -26 2 -23) -26]
Test Case: 632 | Input/Output: [(78 -94 -84 -88) -94]
Test Case: 633 | Input/Output: [(8 58 -52 -92) -92]
Test Case: 634 | Input/Output: [(-1 -45 36 65) -45]
Test Case: 635 | Input/Output: [(-28 15 -4 -68) -68]
Test Case: 636 | Input/Output: [(-66 -45 43 33) -66]
Test Case: 637 | Input/Output: [(95 92 19 -5) -5]
Test Case: 638 | Input/Output: [(-77 43 -61 -62) -77]
Test Case: 639 | Input/Output: [(61 -54 -19 -26) -54]
Test Case: 640 | Input/Output: [(-44 -29 -42 30) -44]
Test Case: 641 | Input/Output: [(-92 82 66 94) -92]
Test Case: 642 | Input/Output: [(70 -68 71 38) -68]
Test Case: 643 | Input/Output: [(57 91 -40 3) -40]
Test Case: 644 | Input/Output: [(60 -93 -92 -90) -93]
Test Case: 645 | Input/Output: [(9 -45 -27 -56) -56]
Test Case: 646 | Input/Output: [(-88 -43 14 -42) -88]
Test Case: 647 | Input/Output: [(84 -32 -79 15) -79]
Test Case: 648 | Input/Output: [(41 32 22 50) 22]
Test Case: 649 | Input/Output: [(-86 64 91 -59) -86]
Test Case: 650 | Input/Output: [(27 -80 41 82) -80]
Test Case: 651 | Input/Output: [(-18 12 81 -84) -84]
Test Case: 652 | Input/Output: [(87 72 -90 -20) -90]
Test Case: 653 | Input/Output: [(86 -56 -56 96) -56]
Test Case: 654 | Input/Output: [(23 40 -2 17) -2]
Test Case: 655 | Input/Output: [(39 -90 -9 60) -90]
Test Case: 656 | Input/Output: [(-86 -36 -82 86) -86]
Test Case: 657 | Input/Output: [(67 -37 55 -86) -86]
Test Case: 658 | Input/Output: [(46 99 -70 -41) -70]
Test Case: 659 | Input/Output: [(-85 2 4 -34) -85]
Test Case: 660 | Input/Output: [(99 22 76 93) 22]
Test Case: 661 | Input/Output: [(26 -29 25 -97) -97]
Test Case: 662 | Input/Output: [(81 12 14 94) 12]
Test Case: 663 | Input/Output: [(-63 -72 -48 39) -72]
Test Case: 664 | Input/Output: [(-56 -11 -62 -56) -62]
Test Case: 665 | Input/Output: [(-43 97 -83 67) -83]
Test Case: 666 | Input/Output: [(-50 -84 -14 99) -84]
Test Case: 667 | Input/Output: [(-55 7 96 95) -55]
Test Case: 668 | Input/Output: [(32 76 26 -85) -85]
Test Case: 669 | Input/Output: [(77 -60 1 -63) -63]
Test Case: 670 | Input/Output: [(-63 70 0 19) -63]
Test Case: 671 | Input/Output: [(-33 -35 72 -73) -73]
Test Case: 672 | Input/Output: [(-92 17 54 43) -92]
Test Case: 673 | Input/Output: [(0 -75 48 50) -75]
Test Case: 674 | Input/Output: [(90 -95 -63 85) -95]
Test Case: 675 | Input/Output: [(-64 23 -89 30) -89]
Test Case: 676 | Input/Output: [(65 -41 -18 -46) -46]
Test Case: 677 | Input/Output: [(-16 91 -52 -53) -53]
Test Case: 678 | Input/Output: [(0 -36 -58 -68) -68]
Test Case: 679 | Input/Output: [(19 -79 -88 10) -88]
Test Case: 680 | Input/Output: [(-17 -76 12 -19) -76]
Test Case: 681 | Input/Output: [(-44 -33 49 24) -44]
Test Case: 682 | Input/Output: [(5 99 98 -59) -59]
Test Case: 683 | Input/Output: [(63 25 55 -32) -32]
Test Case: 684 | Input/Output: [(-26 -6 -93 65) -93]
Test Case: 685 | Input/Output: [(69 20 18 80) 18]
Test Case: 686 | Input/Output: [(54 -55 -1 22) -55]
Test Case: 687 | Input/Output: [(-1 31 -78 33) -78]
Test Case: 688 | Input/Output: [(51 54 5 8) 5]
Test Case: 689 | Input/Output: [(-86 3 26 41) -86]
Test Case: 690 | Input/Output: [(-60 86 -89 91) -89]
Test Case: 691 | Input/Output: [(-42 -21 -65 63) -65]
Test Case: 692 | Input/Output: [(-29 -34 1 -20) -34]
Test Case: 693 | Input/Output: [(43 -23 9 56) -23]
Test Case: 694 | Input/Output: [(25 -58 48 25) -58]
Test Case: 695 | Input/Output: [(-100 71 -61 -41) -100]
Test Case: 696 | Input/Output: [(-53 -85 76 39) -85]
Test Case: 697 | Input/Output: [(-18 13 23 32) -18]
Test Case: 698 | Input/Output: [(45 -86 74 62) -86]
Test Case: 699 | Input/Output: [(-32 -63 -12 23) -63]
Test Case: 700 | Input/Output: [(-53 -71 -5 45) -71]
Test Case: 701 | Input/Output: [(-92 -79 -77 100) -92]
Test Case: 702 | Input/Output: [(77 -93 -61 -96) -96]
Test Case: 703 | Input/Output: [(-17 -38 -47 46) -47]
Test Case: 704 | Input/Output: [(44 -56 86 55) -56]
Test Case: 705 | Input/Output: [(-77 23 81 -68) -77]
Test Case: 706 | Input/Output: [(98 70 45 80) 45]
Test Case: 707 | Input/Output: [(98 64 75 71) 64]
Test Case: 708 | Input/Output: [(-6 -60 1 8) -60]
Test Case: 709 | Input/Output: [(-55 -26 -75 31) -75]
Test Case: 710 | Input/Output: [(71 -98 90 33) -98]
Test Case: 711 | Input/Output: [(-23 34 -40 69) -40]
Test Case: 712 | Input/Output: [(77 -94 -57 76) -94]
Test Case: 713 | Input/Output: [(65 89 -3 0) -3]
Test Case: 714 | Input/Output: [(-75 3 15 38) -75]
Test Case: 715 | Input/Output: [(6 30 -45 -75) -75]
Test Case: 716 | Input/Output: [(-52 -14 20 -67) -67]
Test Case: 717 | Input/Output: [(0 1 -38 74) -38]
Test Case: 718 | Input/Output: [(-65 -18 -59 -49) -65]
Test Case: 719 | Input/Output: [(-74 89 17 22) -74]
Test Case: 720 | Input/Output: [(30 -46 74 60) -46]
Test Case: 721 | Input/Output: [(-37 -85 -43 -95) -95]
Test Case: 722 | Input/Output: [(-82 -22 -35 -45) -82]
Test Case: 723 | Input/Output: [(-94 -94 100 48) -94]
Test Case: 724 | Input/Output: [(-18 -60 -56 -20) -60]
Test Case: 725 | Input/Output: [(-25 53 23 -53) -53]
Test Case: 726 | Input/Output: [(7 -41 -94 -55) -94]
Test Case: 727 | Input/Output: [(89 -75 43 -74) -75]
Test Case: 728 | Input/Output: [(-73 -9 82 -56) -73]
Test Case: 729 | Input/Output: [(1 88 -69 29) -69]
Test Case: 730 | Input/Output: [(-43 -37 -55 -81) -81]
Test Case: 731 | Input/Output: [(92 95 -91 -25) -91]
Test Case: 732 | Input/Output: [(-81 -8 13 -47) -81]
Test Case: 733 | Input/Output: [(36 20 28 97) 20]
Test Case: 734 | Input/Output: [(-49 -93 -97 60) -97]
Test Case: 735 | Input/Output: [(-13 24 79 78) -13]
Test Case: 736 | Input/Output: [(-27 28 -27 13) -27]
Test Case: 737 | Input/Output: [(79 35 60 49) 35]
Test Case: 738 | Input/Output: [(74 69 -42 20) -42]
Test Case: 739 | Input/Output: [(98 58 6 -11) -11]
Test Case: 740 | Input/Output: [(-98 9 -84 -86) -98]
Test Case: 741 | Input/Output: [(92 -95 -78 61) -95]
Test Case: 742 | Input/Output: [(46 81 50 29) 29]
Test Case: 743 | Input/Output: [(28 80 -5 18) -5]
Test Case: 744 | Input/Output: [(-68 4 84 -93) -93]
Test Case: 745 | Input/Output: [(-100 -84 73 90) -100]
Test Case: 746 | Input/Output: [(79 -20 7 -42) -42]
Test Case: 747 | Input/Output: [(-76 -51 23 21) -76]
Test Case: 748 | Input/Output: [(27 0 62 4) 0]
Test Case: 749 | Input/Output: [(-31 -90 -48 34) -90]
Test Case: 750 | Input/Output: [(17 79 49 -91) -91]
Test Case: 751 | Input/Output: [(-81 20 2 62) -81]
Test Case: 752 | Input/Output: [(-43 -70 -46 -65) -70]
Test Case: 753 | Input/Output: [(19 -88 55 63) -88]
Test Case: 754 | Input/Output: [(29 49 73 -88) -88]
Test Case: 755 | Input/Output: [(25 48 -4 99) -4]
Test Case: 756 | Input/Output: [(62 -97 -90 31) -97]
Test Case: 757 | Input/Output: [(-95 -87 47 -72) -95]
Test Case: 758 | Input/Output: [(-8 28 -96 49) -96]
Test Case: 759 | Input/Output: [(20 -20 -92 4) -92]
Test Case: 760 | Input/Output: [(-100 -51 91 55) -100]
Test Case: 761 | Input/Output: [(-53 -78 -3 -87) -87]
Test Case: 762 | Input/Output: [(27 -2 -54 81) -54]
Test Case: 763 | Input/Output: [(14 92 44 -65) -65]
Test Case: 764 | Input/Output: [(56 59 -73 79) -73]
Test Case: 765 | Input/Output: [(40 -85 -48 -99) -99]
Test Case: 766 | Input/Output: [(50 -20 -52 -27) -52]
Test Case: 767 | Input/Output: [(18 25 -33 -74) -74]
Test Case: 768 | Input/Output: [(48 97 -28 -27) -28]
Test Case: 769 | Input/Output: [(50 28 23 86) 23]
Test Case: 770 | Input/Output: [(-4 23 57 -30) -30]
Test Case: 771 | Input/Output: [(96 -53 -8 36) -53]
Test Case: 772 | Input/Output: [(26 -45 -93 2) -93]
Test Case: 773 | Input/Output: [(-48 42 82 -96) -96]
Test Case: 774 | Input/Output: [(41 -77 64 -87) -87]
Test Case: 775 | Input/Output: [(56 -88 -78 -8) -88]
Test Case: 776 | Input/Output: [(16 -19 -96 -92) -96]
Test Case: 777 | Input/Output: [(46 -34 73 31) -34]
Test Case: 778 | Input/Output: [(7 98 -72 -60) -72]
Test Case: 779 | Input/Output: [(-45 48 90 24) -45]
Test Case: 780 | Input/Output: [(20 97 -32 24) -32]
Test Case: 781 | Input/Output: [(2 53 -69 -69) -69]
Test Case: 782 | Input/Output: [(98 49 -37 72) -37]
Test Case: 783 | Input/Output: [(48 -37 -96 75) -96]
Test Case: 784 | Input/Output: [(79 62 8 52) 8]
Test Case: 785 | Input/Output: [(70 -22 -48 -10) -48]
Test Case: 786 | Input/Output: [(17 -9 -24 -18) -24]
Test Case: 787 | Input/Output: [(92 -72 -60 91) -72]
Test Case: 788 | Input/Output: [(21 95 60 90) 21]
Test Case: 789 | Input/Output: [(84 -8 -83 -61) -83]
Test Case: 790 | Input/Output: [(-21 -35 -58 88) -58]
Test Case: 791 | Input/Output: [(55 -88 -64 -79) -88]
Test Case: 792 | Input/Output: [(48 67 -19 37) -19]
Test Case: 793 | Input/Output: [(-80 -74 9 -17) -80]
Test Case: 794 | Input/Output: [(-39 25 -3 -42) -42]
Test Case: 795 | Input/Output: [(-86 -3 -39 -72) -86]
Test Case: 796 | Input/Output: [(18 -83 -12 -63) -83]
Test Case: 797 | Input/Output: [(-39 70 -83 -56) -83]
Test Case: 798 | Input/Output: [(26 -36 -14 30) -36]
Test Case: 799 | Input/Output: [(69 55 59 60) 55]
Test Case: 800 | Input/Output: [(-59 3 1 -69) -69]
Test Case: 801 | Input/Output: [(75 -16 25 71) -16]
Test Case: 802 | Input/Output: [(36 3 -83 79) -83]
Test Case: 803 | Input/Output: [(100 68 -24 -15) -24]
Test Case: 804 | Input/Output: [(17 11 -7 -45) -45]
Test Case: 805 | Input/Output: [(-33 44 41 -82) -82]
Test Case: 806 | Input/Output: [(-86 -93 -46 -32) -93]
Test Case: 807 | Input/Output: [(-82 92 51 25) -82]
Test Case: 808 | Input/Output: [(-95 -82 -2 -55) -95]
Test Case: 809 | Input/Output: [(32 33 59 -56) -56]
Test Case: 810 | Input/Output: [(-79 -48 -71 70) -79]
Test Case: 811 | Input/Output: [(59 -1 93 24) -1]
Test Case: 812 | Input/Output: [(77 87 61 70) 61]
Test Case: 813 | Input/Output: [(-17 91 29 92) -17]
Test Case: 814 | Input/Output: [(77 -7 -92 78) -92]
Test Case: 815 | Input/Output: [(29 -70 50 -35) -70]
Test Case: 816 | Input/Output: [(-56 44 -88 -36) -88]
Test Case: 817 | Input/Output: [(-7 -56 84 -58) -58]
Test Case: 818 | Input/Output: [(15 37 -87 60) -87]
Test Case: 819 | Input/Output: [(-31 96 -28 -10) -31]
Test Case: 820 | Input/Output: [(60 62 37 52) 37]
Test Case: 821 | Input/Output: [(81 4 -7 34) -7]
Test Case: 822 | Input/Output: [(100 70 24 11) 11]
Test Case: 823 | Input/Output: [(100 -60 -82 -65) -82]
Test Case: 824 | Input/Output: [(24 65 65 45) 24]
Test Case: 825 | Input/Output: [(59 -49 -36 23) -49]
Test Case: 826 | Input/Output: [(-75 74 -62 -3) -75]
Test Case: 827 | Input/Output: [(-32 96 24 -51) -51]
Test Case: 828 | Input/Output: [(20 -17 -28 46) -28]
Test Case: 829 | Input/Output: [(-14 19 -42 5) -42]
Test Case: 830 | Input/Output: [(-21 31 -53 73) -53]
Test Case: 831 | Input/Output: [(-7 -91 -87 -54) -91]
Test Case: 832 | Input/Output: [(-82 56 -92 -21) -92]
Test Case: 833 | Input/Output: [(60 -66 -23 -86) -86]
Test Case: 834 | Input/Output: [(33 85 48 -18) -18]
Test Case: 835 | Input/Output: [(41 55 10 -48) -48]
Test Case: 836 | Input/Output: [(78 8 77 73) 8]
Test Case: 837 | Input/Output: [(38 -14 -39 -75) -75]
Test Case: 838 | Input/Output: [(-38 -42 -81 27) -81]
Test Case: 839 | Input/Output: [(-53 -45 -7 74) -53]
Test Case: 840 | Input/Output: [(-9 -58 -30 -25) -58]
Test Case: 841 | Input/Output: [(74 -13 -62 -10) -62]
Test Case: 842 | Input/Output: [(72 -63 50 -74) -74]
Test Case: 843 | Input/Output: [(89 81 -10 80) -10]
Test Case: 844 | Input/Output: [(12 49 68 67) 12]
Test Case: 845 | Input/Output: [(96 -26 22 -70) -70]
Test Case: 846 | Input/Output: [(-68 81 67 22) -68]
Test Case: 847 | Input/Output: [(-84 -1 49 76) -84]
Test Case: 848 | Input/Output: [(16 -9 -5 80) -9]
Test Case: 849 | Input/Output: [(65 -55 -58 72) -58]
Test Case: 850 | Input/Output: [(-32 96 40 64) -32]
Test Case: 851 | Input/Output: [(-52 -92 10 -30) -92]
Test Case: 852 | Input/Output: [(-31 -41 -29 -7) -41]
Test Case: 853 | Input/Output: [(51 15 -73 12) -73]
Test Case: 854 | Input/Output: [(76 -36 89 -19) -36]
Test Case: 855 | Input/Output: [(19 -77 43 99) -77]
Test Case: 856 | Input/Output: [(76 89 75 -22) -22]
Test Case: 857 | Input/Output: [(-48 -98 74 -82) -98]
Test Case: 858 | Input/Output: [(-39 22 13 13) -39]
Test Case: 859 | Input/Output: [(-50 -42 29 10) -50]
Test Case: 860 | Input/Output: [(65 21 -26 -53) -53]
Test Case: 861 | Input/Output: [(94 77 45 -61) -61]
Test Case: 862 | Input/Output: [(37 -54 14 -13) -54]
Test Case: 863 | Input/Output: [(-93 89 -30 9) -93]
Test Case: 864 | Input/Output: [(-87 14 93 -17) -87]
Test Case: 865 | Input/Output: [(2 25 13 62) 2]
Test Case: 866 | Input/Output: [(-67 35 55 21) -67]
Test Case: 867 | Input/Output: [(-100 61 86 41) -100]
Test Case: 868 | Input/Output: [(-65 -9 47 10) -65]
Test Case: 869 | Input/Output: [(9 21 -9 100) -9]
Test Case: 870 | Input/Output: [(19 55 54 49) 19]
Test Case: 871 | Input/Output: [(-71 -53 -52 -53) -71]
Test Case: 872 | Input/Output: [(86 73 -4 60) -4]
Test Case: 873 | Input/Output: [(82 -74 -67 -47) -74]
Test Case: 874 | Input/Output: [(27 8 -68 46) -68]
Test Case: 875 | Input/Output: [(37 80 -95 -76) -95]
Test Case: 876 | Input/Output: [(87 35 -76 35) -76]
Test Case: 877 | Input/Output: [(71 -38 -14 -19) -38]
Test Case: 878 | Input/Output: [(-23 66 -14 54) -23]
Test Case: 879 | Input/Output: [(37 -87 80 -98) -98]
Test Case: 880 | Input/Output: [(-73 90 -64 -36) -73]
Test Case: 881 | Input/Output: [(48 3 -44 45) -44]
Test Case: 882 | Input/Output: [(18 59 28 51) 18]
Test Case: 883 | Input/Output: [(-17 -67 -29 75) -67]
Test Case: 884 | Input/Output: [(92 -93 -52 72) -93]
Test Case: 885 | Input/Output: [(-100 -90 -79 41) -100]
Test Case: 886 | Input/Output: [(-6 -24 39 65) -24]
Test Case: 887 | Input/Output: [(-78 16 89 97) -78]
Test Case: 888 | Input/Output: [(-15 86 86 5) -15]
Test Case: 889 | Input/Output: [(-55 13 24 24) -55]
Test Case: 890 | Input/Output: [(-9 -13 -89 58) -89]
Test Case: 891 | Input/Output: [(90 58 26 -88) -88]
Test Case: 892 | Input/Output: [(-53 -97 -65 29) -97]
Test Case: 893 | Input/Output: [(29 -49 -46 -32) -49]
Test Case: 894 | Input/Output: [(-88 8 52 -80) -88]
Test Case: 895 | Input/Output: [(-96 56 24 -46) -96]
Test Case: 896 | Input/Output: [(78 49 -68 -54) -68]
Test Case: 897 | Input/Output: [(-65 -33 -60 -96) -96]
Test Case: 898 | Input/Output: [(2 81 -59 -67) -67]
Test Case: 899 | Input/Output: [(-1 75 -65 -6) -65]
Test Case: 900 | Input/Output: [(-34 37 59 37) -34]
Test Case: 901 | Input/Output: [(57 -10 74 10) -10]
Test Case: 902 | Input/Output: [(-14 -40 -10 -1) -40]
Test Case: 903 | Input/Output: [(-29 35 -52 -58) -58]
Test Case: 904 | Input/Output: [(-49 -28 25 1) -49]
Test Case: 905 | Input/Output: [(46 -97 25 69) -97]
Test Case: 906 | Input/Output: [(70 -11 -45 88) -45]
Test Case: 907 | Input/Output: [(-88 -8 40 -36) -88]
Test Case: 908 | Input/Output: [(11 96 31 80) 11]
Test Case: 909 | Input/Output: [(4 -9 72 -38) -38]
Test Case: 910 | Input/Output: [(56 100 90 36) 36]
Test Case: 911 | Input/Output: [(-99 1 -59 53) -99]
Test Case: 912 | Input/Output: [(44 -50 -54 77) -54]
Test Case: 913 | Input/Output: [(83 -21 -5 -90) -90]
Test Case: 914 | Input/Output: [(1 82 -21 -90) -90]
Test Case: 915 | Input/Output: [(37 -11 5 -79) -79]
Test Case: 916 | Input/Output: [(50 75 -96 87) -96]
Test Case: 917 | Input/Output: [(-14 -33 -33 -34) -34]
Test Case: 918 | Input/Output: [(-58 -55 -33 14) -58]
Test Case: 919 | Input/Output: [(-19 28 -58 -62) -62]
Test Case: 920 | Input/Output: [(-83 66 -76 -27) -83]
Test Case: 921 | Input/Output: [(-98 48 -48 -7) -98]
Test Case: 922 | Input/Output: [(-16 60 -9 42) -16]
Test Case: 923 | Input/Output: [(-12 -87 14 86) -87]
Test Case: 924 | Input/Output: [(-3 -97 -87 83) -97]
Test Case: 925 | Input/Output: [(-94 69 -100 11) -100]
Test Case: 926 | Input/Output: [(3 14 -69 80) -69]
Test Case: 927 | Input/Output: [(-25 -1 49 92) -25]
Test Case: 928 | Input/Output: [(-27 -95 53 39) -95]
Test Case: 929 | Input/Output: [(55 8 94 -31) -31]
Test Case: 930 | Input/Output: [(-60 -27 -10 99) -60]
Test Case: 931 | Input/Output: [(-8 47 81 77) -8]
Test Case: 932 | Input/Output: [(-92 -60 39 -14) -92]
Test Case: 933 | Input/Output: [(-92 94 87 37) -92]
Test Case: 934 | Input/Output: [(70 -6 -64 42) -64]
Test Case: 935 | Input/Output: [(-81 -42 -41 -12) -81]
Test Case: 936 | Input/Output: [(74 6 11 -68) -68]
Test Case: 937 | Input/Output: [(-10 -81 -62 90) -81]
Test Case: 938 | Input/Output: [(-3 -24 86 -23) -24]
Test Case: 939 | Input/Output: [(-3 17 4 30) -3]
Test Case: 940 | Input/Output: [(-47 62 -12 88) -47]
Test Case: 941 | Input/Output: [(-90 83 65 13) -90]
Test Case: 942 | Input/Output: [(65 83 -60 -74) -74]
Test Case: 943 | Input/Output: [(-51 34 -2 50) -51]
Test Case: 944 | Input/Output: [(-38 9 17 84) -38]
Test Case: 945 | Input/Output: [(45 -54 -89 48) -89]
Test Case: 946 | Input/Output: [(82 -75 -90 38) -90]
Test Case: 947 | Input/Output: [(-56 87 64 28) -56]
Test Case: 948 | Input/Output: [(-57 -54 -11 80) -57]
Test Case: 949 | Input/Output: [(89 40 40 72) 40]
Test Case: 950 | Input/Output: [(-90 76 76 -6) -90]
Test Case: 951 | Input/Output: [(91 -98 82 49) -98]
Test Case: 952 | Input/Output: [(-15 -78 44 -42) -78]
Test Case: 953 | Input/Output: [(81 79 3 -36) -36]
Test Case: 954 | Input/Output: [(66 26 81 -23) -23]
Test Case: 955 | Input/Output: [(97 -39 81 -39) -39]
Test Case: 956 | Input/Output: [(-81 34 42 11) -81]
Test Case: 957 | Input/Output: [(-78 20 -6 48) -78]
Test Case: 958 | Input/Output: [(-34 -71 57 82) -71]
Test Case: 959 | Input/Output: [(68 -23 14 27) -23]
Test Case: 960 | Input/Output: [(68 -82 13 64) -82]
Test Case: 961 | Input/Output: [(-55 -25 99 18) -55]
Test Case: 962 | Input/Output: [(-80 98 34 -90) -90]
Test Case: 963 | Input/Output: [(66 -98 86 22) -98]
Test Case: 964 | Input/Output: [(30 84 91 -36) -36]
Test Case: 965 | Input/Output: [(-11 44 -100 60) -100]
Test Case: 966 | Input/Output: [(68 -44 -87 83) -87]
Test Case: 967 | Input/Output: [(69 22 -43 -66) -66]
Test Case: 968 | Input/Output: [(94 -85 64 36) -85]
Test Case: 969 | Input/Output: [(-27 69 -11 -86) -86]
Test Case: 970 | Input/Output: [(-10 -65 25 -66) -66]
Test Case: 971 | Input/Output: [(-33 81 -80 -23) -80]
Test Case: 972 | Input/Output: [(10 -58 64 -48) -58]
Test Case: 973 | Input/Output: [(55 -17 76 -79) -79]
Test Case: 974 | Input/Output: [(98 -30 -31 -10) -31]
Test Case: 975 | Input/Output: [(-58 6 1 -24) -58]
Test Case: 976 | Input/Output: [(-22 -64 16 59) -64]
Test Case: 977 | Input/Output: [(-12 42 -69 41) -69]
Test Case: 978 | Input/Output: [(-30 -73 73 66) -73]
Test Case: 979 | Input/Output: [(-94 88 81 -90) -94]
Test Case: 980 | Input/Output: [(59 81 -78 15) -78]
Test Case: 981 | Input/Output: [(57 12 -14 -59) -59]
Test Case: 982 | Input/Output: [(100 81 -25 -76) -76]
Test Case: 983 | Input/Output: [(-37 8 57 56) -37]
Test Case: 984 | Input/Output: [(-38 77 68 -28) -38]
Test Case: 985 | Input/Output: [(-78 47 49 -2) -78]
Test Case: 986 | Input/Output: [(92 97 -49 98) -49]
Test Case: 987 | Input/Output: [(1 96 7 -18) -18]
Test Case: 988 | Input/Output: [(62 91 -60 48) -60]
Test Case: 989 | Input/Output: [(-2 -28 -93 -78) -93]
Test Case: 990 | Input/Output: [(-99 -41 63 -1) -99]
Test Case: 991 | Input/Output: [(77 -98 87 -77) -98]
Test Case: 992 | Input/Output: [(-8 -4 28 70) -8]
Test Case: 993 | Input/Output: [(-8 15 78 28) -8]
Test Case: 994 | Input/Output: [(-80 -54 2 22) -80]
Test Case: 995 | Input/Output: [(90 86 -61 -55) -61]
Test Case: 996 | Input/Output: [(-83 85 15 50) -83]
Test Case: 997 | Input/Output: [(-34 -55 -37 -17) -55]
Test Case: 998 | Input/Output: [(-7 86 -54 35) -54]
Test Case: 999 | Input/Output: [(-44 66 64 -70) -70]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 47 -60 -68 -22 43 32 -102 104 25 7 34 -57 -103 87 120 -104
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[83 83 -60 83] -60] [[65 65 65 45] 45] [[-51 -51 81 -51] -51] [[26 26 92 26] 26] [[-26 -26 -1 -26] -26] [[-91 -91 -91 -26] -91] [[49 49 -15 49] -15] [[-43 -26 -43 -43] -43] [[-2 -2 84 -2] -2] [[17 17 17 43] 17] [(-85 -85 -85 -85) -85] [(-36 -36 -36 -36) -36] [(-4 -4 -4 -4) -4] [(37 37 37 37) 37] [(13 13 13 13) 13] [(92 65 80 66) 65] [(5 37 34 16) 5] [(1 7 95 38) 1] [(30 55 53 81) 30] [(57 1 15 2) 1] [(23 94 22 63) 22] [(60 90 0 62) 0] [(46 1 99 39) 1] [(78 15 18 58) 15] [(11 73 44 67) 11] [(97 47 81 6) 6] [(42 97 51 90) 42] [(50 98 3 49) 3] [(0 91 73 88) 0] [(2 99 25 39) 2] [(98 64 64 59) 59] [(43 43 7 61) 7] [(93 62 40 73) 40] [(34 73 20 93) 20] [(57 36 26 32) 26] [(-43 3 36 7) -43] [(-15 -30 2 89) -30] [(92 -41 -93 46) -93] [(-59 91 -82 14) -82] [(-35 -100 -6 -96) -100] [(-3 -43 72 -13) -43] [(-91 -61 53 -87) -91] [(5 90 -53 55) -53] [(-27 -25 -18 80) -27] [(-61 -76 17 -28) -76] [(-70 -61 -31 95) -70] [(-98 -94 38 57) -98] [(21 -68 -88 -33) -88] [(1 -59 53 17) -59] [(-50 -97 -29 -100) -100] [(69 34 71 -67) -67] [(-62 19 -11 -89) -89] [(19 -9 32 -1) -9] [(63 77 -67 -17) -67] [(10 -82 97 68) -82] [(66 -86 93 94) -86] [(33 -60 84 -76) -76] [(-7 -98 100 -82) -98] [(-85 -80 89 -50) -85] [(46 42 -20 -28) -28] [(63 41 -46 4) -46] [(76 27 -46 -87) -87] [(76 -76 -63 -37) -76] [(9 74 -34 65) -34] [(-70 -43 3 -65) -70] [(30 38 49 -2) -2] [(23 53 78 -76) -76] [(2 43 54 99) 2] [(-54 43 -97 -42) -97] [(-57 58 -6 6) -57] [(83 65 94 8) 8] [(-69 73 82 59) -69] [(100 -7 -19 73) -19] [(-40 -31 -8 17) -40] [(-18 8 -24 -9) -24] [(-71 -4 72 97) -71] [(-92 65 -87 0) -92] [(23 25 5 -58) -58] [(18 42 -4 -32) -32] [(40 -100 -37 -84) -100] [(40 -34 -98 96) -98] [(-97 -81 -100 6) -100] [(10 -18 21 48) -18] [(-77 -32 -53 -49) -77] [(76 -11 -90 -49) -90] [(81 65 45 65) 45] [(71 -14 -43 -2) -43] [(-21 -57 74 -9) -57] [(-27 -44 95 -23) -44] [(70 -14 -93 69) -93] [(-64 18 37 -4) -64] [(27 -11 93 -59) -59] [(-92 78 -22 53) -92] [(11 -72 -21 -1) -72] [(-35 53 3 -94) -94])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -60                 | Program output: 83                 
Correct output: 45                  | Program output: 65                 
Correct output: -51                 | Program output: -51                
Correct output: 26                  | Program output: 26                 
Correct output: -26                 | Program output: -26                
Correct output: -91                 | Program output: -91                
Correct output: -15                 | Program output: 49                 
Correct output: -43                 | Program output: -26                
Correct output: -2                  | Program output: -2                 
Correct output: 17                  | Program output: 17                 
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: 37                  | Program output: 37                 
Correct output: 13                  | Program output: 13                 
Correct output: 65                  | Program output: 65                 
Correct output: 5                   | Program output: 37                 
Correct output: 1                   | Program output: 7                  
Correct output: 30                  | Program output: 55                 
Correct output: 1                   | Program output: 1                  
Correct output: 22                  | Program output: 94                 
Correct output: 0                   | Program output: 90                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 73                 
Correct output: 6                   | Program output: 47                 
Correct output: 42                  | Program output: 97                 
Correct output: 3                   | Program output: 98                 
Correct output: 0                   | Program output: 91                 
Correct output: 2                   | Program output: 99                 
Correct output: 59                  | Program output: 64                 
Correct output: 7                   | Program output: 43                 
Correct output: 40                  | Program output: 62                 
Correct output: 20                  | Program output: 73                 
Correct output: 26                  | Program output: 36                 
Correct output: -43                 | Program output: 3                  
Correct output: -30                 | Program output: -30                
Correct output: -93                 | Program output: -41                
Correct output: -82                 | Program output: 91                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -43                
Correct output: -91                 | Program output: -61                
Correct output: -53                 | Program output: 90                 
Correct output: -27                 | Program output: -25                
Correct output: -76                 | Program output: -76                
Correct output: -70                 | Program output: -61                
Correct output: -98                 | Program output: -94                
Correct output: -88                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -97                
Correct output: -67                 | Program output: 34                 
Correct output: -89                 | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -67                 | Program output: 77                 
Correct output: -82                 | Program output: -82                
Correct output: -86                 | Program output: -86                
Correct output: -76                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -80                
Correct output: -28                 | Program output: 42                 
Correct output: -46                 | Program output: 41                 
Correct output: -87                 | Program output: 27                 
Correct output: -76                 | Program output: -76                
Correct output: -34                 | Program output: 74                 
Correct output: -70                 | Program output: -43                
Correct output: -2                  | Program output: 38                 
Correct output: -76                 | Program output: 53                 
Correct output: 2                   | Program output: 43                 
Correct output: -97                 | Program output: 43                 
Correct output: -57                 | Program output: 58                 
Correct output: 8                   | Program output: 65                 
Correct output: -69                 | Program output: 73                 
Correct output: -19                 | Program output: -7                 
Correct output: -40                 | Program output: -31                
Correct output: -24                 | Program output: 8                  
Correct output: -71                 | Program output: -4                 
Correct output: -92                 | Program output: 65                 
Correct output: -58                 | Program output: 25                 
Correct output: -32                 | Program output: 42                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -34                
Correct output: -100                | Program output: -81                
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -32                
Correct output: -90                 | Program output: -11                
Correct output: 45                  | Program output: 65                 
Correct output: -43                 | Program output: -14                
Correct output: -57                 | Program output: -57                
Correct output: -44                 | Program output: -44                
Correct output: -93                 | Program output: -14                
Correct output: -64                 | Program output: 18                 
Correct output: -59                 | Program output: -11                
Correct output: -92                 | Program output: 78                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: 53                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction in1} {:close 0, :instruction integer_div} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_539} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction tagged_853} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_684} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 1, :instruction print_newline} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 1, :instruction exec_when} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_pop} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_newline} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k_when_autoconstructing})
Lexicase best program: (in1 integer_div exec_while (integer_min integer_stackdepth integer_gt exec_when (exec_k_when_autoconstructing () (boolean_rot exec_if (integer_sub exec_empty boolean_swap boolean_eq integer_yank print_boolean boolean_eq) (integer_flush exec_s () (exec_do*count (boolean_not boolean_xor print_boolean integer_eq tagged_539 integer_yankdup) exec_noop integer_inc boolean_rot boolean_stackdepth) (integer_swap) exec_when (exec_dup_times () boolean_and tagged_853 integer_gt boolean_stackdepth boolean_invert_second_then_and boolean_flush tagged_684 exec_empty exec_s (integer_dup integer_eq integer_pop boolean_dup_items exec_y () exec_dup_items print_newline) (integer_sub exec_do*times (integer_shove) integer_add exec_when () integer_mod) (integer_rot)) boolean_swap exec_k (integer_dup_times) (boolean_yankdup integer_shove) integer_add boolean_stackdepth integer_pop) integer_min)) boolean_yank exec_when () exec_eq integer_pop exec_eq exec_do*times (print_newline integer_add boolean_rot integer_yankdup)) integer_rot integer_pop boolean_dup_items boolean_eq integer_yank exec_if (exec_when (exec_dup_times (boolean_dup_items in2) boolean_dup_times integer_gte exec_k (print_integer integer_dec exec_pop (integer_dup_times in3) exec_y_when_autoconstructing (boolean_stackdepth) integer_dup_items) (exec_k_when_autoconstructing () ()))) ())
Lexicase best errors: [1 1 0 1 1 0 1 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 130
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction in1} {:close 0, :instruction integer_div} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_s} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_eq} {:close 0, :instruction tagged_539} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction tagged_853} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction tagged_684} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_y} {:close 0, :instruction exec_dup_items} {:close 1, :instruction print_newline} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 1, :instruction exec_when} {:close 1, :instruction integer_mod} {:close 2, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 1, :instruction integer_dup_times} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_pop} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_when} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_newline} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 2, :instruction integer_yankdup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dup_times} {:close 1, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_k_when_autoconstructing})
Zero cases best program: (in1 integer_div exec_while (integer_min integer_stackdepth integer_gt exec_when (exec_k_when_autoconstructing () (boolean_rot exec_if (integer_sub exec_empty boolean_swap boolean_eq integer_yank print_boolean boolean_eq) (integer_flush exec_s () (exec_do*count (boolean_not boolean_xor print_boolean integer_eq tagged_539 integer_yankdup) exec_noop integer_inc boolean_rot boolean_stackdepth) (integer_swap) exec_when (exec_dup_times () boolean_and tagged_853 integer_gt boolean_stackdepth boolean_invert_second_then_and boolean_flush tagged_684 exec_empty exec_s (integer_dup integer_eq integer_pop boolean_dup_items exec_y () exec_dup_items print_newline) (integer_sub exec_do*times (integer_shove) integer_add exec_when () integer_mod) (integer_rot)) boolean_swap exec_k (integer_dup_times) (boolean_yankdup integer_shove) integer_add boolean_stackdepth integer_pop) integer_min)) boolean_yank exec_when () exec_eq integer_pop exec_eq exec_do*times (print_newline integer_add boolean_rot integer_yankdup)) integer_rot integer_pop boolean_dup_items boolean_eq integer_yank exec_if (exec_when (exec_dup_times (boolean_dup_items in2) boolean_dup_times integer_gte exec_k (print_integer integer_dec exec_pop (integer_dup_times in3) exec_y_when_autoconstructing (boolean_stackdepth) integer_dup_items) (exec_k_when_autoconstructing () ()))) ())
Zero cases best errors: [1 1 0 1 1 0 1 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 130
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 2 2 5 4 2 5 2 3 3)
Population mean number of elite cases: 0.03
Count of perfect (error zero) individuals by case: (1 2 2 5 4 2 5 2 3 3)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction in4} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while})
Best program: (boolean_yankdup exec_k_when_autoconstructing (integer_dup_times) (exec_s_when_autoconstructing (print_integer boolean_invert_second_then_and) (boolean_not integer_add in2 exec_dup () boolean_yank integer_gte boolean_invert_first_then_and integer_mult integer_swap in4 boolean_flush) (exec_shove (print_integer integer_inc integer_sub integer_stackdepth exec_stackdepth exec_when (boolean_stackdepth) exec_s_when_autoconstructing (integer_dup_times boolean_swap integer_stackdepth exec_do*while ()) () ()))))
Errors: [1 1 0 1 1 0 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 30
Size: 43
Percent parens: 0.302
--- Population Statistics ---
Average total errors in population: 9.971
Median total errors in population: 10
Error averages by case: (0.999 0.998 0.998 0.995 0.996 0.998 0.995 0.998 0.997 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.137
Average program size in population (points): 68.943
Average percent parens in population: 0.282
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.283
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 488979
--- Timings ---
Current time: 1559314314126 milliseconds
Total Time:           2.8 seconds
Initialization:       0.1 seconds,  3.8%
Reproduction:         0.8 seconds, 27.2%
Fitness Testing:      1.9 seconds, 69.0%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 658
Test mean error for best: 0.65800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -60                 | Program output: 83                 
Correct output: 45                  | Program output: 65                 
Correct output: -51                 | Program output: -51                
Correct output: 26                  | Program output: 26                 
Correct output: -26                 | Program output: -26                
Correct output: -91                 | Program output: -26                
Correct output: -15                 | Program output: 49                 
Correct output: -43                 | Program output: -43                
Correct output: -2                  | Program output: -2                 
Correct output: 17                  | Program output: 17                 
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: 37                  | Program output: 37                 
Correct output: 13                  | Program output: 13                 
Correct output: 65                  | Program output: 65                 
Correct output: 5                   | Program output: 37                 
Correct output: 1                   | Program output: 7                  
Correct output: 30                  | Program output: 55                 
Correct output: 1                   | Program output: 1                  
Correct output: 22                  | Program output: 94                 
Correct output: 0                   | Program output: 62                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 73                 
Correct output: 6                   | Program output: 47                 
Correct output: 42                  | Program output: 97                 
Correct output: 3                   | Program output: 98                 
Correct output: 0                   | Program output: 91                 
Correct output: 2                   | Program output: 99                 
Correct output: 59                  | Program output: 64                 
Correct output: 7                   | Program output: 43                 
Correct output: 40                  | Program output: 62                 
Correct output: 20                  | Program output: 73                 
Correct output: 26                  | Program output: 36                 
Correct output: -43                 | Program output: 3                  
Correct output: -30                 | Program output: -30                
Correct output: -93                 | Program output: 46                 
Correct output: -82                 | Program output: 14                 
Correct output: -100                | Program output: -96                
Correct output: -43                 | Program output: -43                
Correct output: -91                 | Program output: -61                
Correct output: -53                 | Program output: 55                 
Correct output: -27                 | Program output: 80                 
Correct output: -76                 | Program output: -76                
Correct output: -70                 | Program output: 95                 
Correct output: -98                 | Program output: -94                
Correct output: -88                 | Program output: -33                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: 34                 
Correct output: -89                 | Program output: -89                
Correct output: -9                  | Program output: -9                 
Correct output: -67                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -86                 | Program output: -86                
Correct output: -76                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -80                
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: 4                  
Correct output: -87                 | Program output: -87                
Correct output: -76                 | Program output: -37                
Correct output: -34                 | Program output: 65                 
Correct output: -70                 | Program output: -43                
Correct output: -2                  | Program output: 38                 
Correct output: -76                 | Program output: 53                 
Correct output: 2                   | Program output: 43                 
Correct output: -97                 | Program output: -42                
Correct output: -57                 | Program output: 6                  
Correct output: 8                   | Program output: 65                 
Correct output: -69                 | Program output: 73                 
Correct output: -19                 | Program output: 73                 
Correct output: -40                 | Program output: 17                 
Correct output: -24                 | Program output: -9                 
Correct output: -71                 | Program output: -4                 
Correct output: -92                 | Program output: 0                  
Correct output: -58                 | Program output: 25                 
Correct output: -32                 | Program output: -32                
Correct output: -100                | Program output: -84                
Correct output: -98                 | Program output: 96                 
Correct output: -100                | Program output: 6                  
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -49                
Correct output: -90                 | Program output: -49                
Correct output: 45                  | Program output: 65                 
Correct output: -43                 | Program output: -2                 
Correct output: -57                 | Program output: -57                
Correct output: -44                 | Program output: -44                
Correct output: -93                 | Program output: 69                 
Correct output: -64                 | Program output: 18                 
Correct output: -59                 | Program output: -11                
Correct output: -92                 | Program output: 53                 
Correct output: -72                 | Program output: -1                 
Correct output: -94                 | Program output: 53                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_lt exec_yankdup integer_div boolean_swap integer_gte boolean_or in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_shove exec_if () (integer_swap integer_lte exec_pop (boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) integer_yank integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (boolean_frominteger boolean_not integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) (exec_swap (boolean_flush integer_dup_items in3 boolean_rot) (exec_when () boolean_yankdup)) (exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 boolean_or in4 integer_sub integer_stackdepth boolean_stackdepth) boolean_swap exec_pop (integer_stackdepth integer_gt boolean_dup_times) integer_lte exec_shove (integer_pop exec_rot () (boolean_shove) (boolean_dup_items)))
Lexicase best errors: [0 0 1 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 107
Percent parens: 0.215
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_lt exec_yankdup integer_div boolean_swap integer_gte boolean_or in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_shove exec_if () (integer_swap integer_lte exec_pop (boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) integer_yank integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (boolean_frominteger boolean_not integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) (exec_swap (boolean_flush integer_dup_items in3 boolean_rot) (exec_when () boolean_yankdup)) (exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 boolean_or in4 integer_sub integer_stackdepth boolean_stackdepth) boolean_swap exec_pop (integer_stackdepth integer_gt boolean_dup_times) integer_lte exec_shove (integer_pop exec_rot () (boolean_shove) (boolean_dup_items)))
Zero cases best errors: [0 0 1 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 107
Percent parens: 0.215
--- Lexicase Population Statistics ---
Count of elite individuals by case: (94 159 395 492 809 160 5 87 349 799)
Population mean number of elite cases: 3.35
Count of perfect (error zero) individuals by case: (94 159 395 492 809 160 5 87 349 799)
Population mean number of perfect (error zero) cases: 3.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while})
Best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_lt exec_yankdup integer_div boolean_swap integer_gte exec_k_when_autoconstructing (in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_shove exec_if () (integer_swap integer_lte exec_pop (boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap print_integer integer_inc integer_sub integer_stackdepth exec_stackdepth exec_when (boolean_stackdepth) exec_s_when_autoconstructing (integer_dup_times boolean_swap integer_stackdepth exec_do*while ()) () ()))) () ()) ())
Errors: [1 0 0 0 0 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 39
Size: 54
Percent parens: 0.278
--- Population Statistics ---
Average total errors in population: 6.651
Median total errors in population: 15/2
Error averages by case: (0.906 0.841 0.605 0.508 0.191 0.84 0.995 0.913 0.651 0.201)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.925
Average program size in population (points): 79.304
Average percent parens in population: 0.271
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.495
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 141
Genome diversity (% unique genomes):	 0.528
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 145
Syntactic diversity (% unique Push programs):	 0.524
Total error diversity:				 0.008
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1003268
--- Timings ---
Current time: 1559314316916 milliseconds
Total Time:           5.6 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.4 seconds, 43.2%
Fitness Testing:      2.7 seconds, 47.2%
Report:               0.4 seconds,  7.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -60                 | Program output: 83                 
Correct output: 45                  | Program output: 65                 
Correct output: -51                 | Program output: -51                
Correct output: 26                  | Program output: 26                 
Correct output: -26                 | Program output: -26                
Correct output: -91                 | Program output: -91                
Correct output: -15                 | Program output: 49                 
Correct output: -43                 | Program output: -26                
Correct output: -2                  | Program output: -2                 
Correct output: 17                  | Program output: 17                 
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: 37                  | Program output: 37                 
Correct output: 13                  | Program output: 13                 
Correct output: 65                  | Program output: 65                 
Correct output: 5                   | Program output: 37                 
Correct output: 1                   | Program output: 7                  
Correct output: 30                  | Program output: 55                 
Correct output: 1                   | Program output: 1                  
Correct output: 22                  | Program output: 94                 
Correct output: 0                   | Program output: 90                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 73                 
Correct output: 6                   | Program output: 47                 
Correct output: 42                  | Program output: 97                 
Correct output: 3                   | Program output: 98                 
Correct output: 0                   | Program output: 91                 
Correct output: 2                   | Program output: 99                 
Correct output: 59                  | Program output: 64                 
Correct output: 7                   | Program output: 43                 
Correct output: 40                  | Program output: 62                 
Correct output: 20                  | Program output: 73                 
Correct output: 26                  | Program output: 36                 
Correct output: -43                 | Program output: 3                  
Correct output: -30                 | Program output: -30                
Correct output: -93                 | Program output: -41                
Correct output: -82                 | Program output: 91                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -43                
Correct output: -91                 | Program output: -61                
Correct output: -53                 | Program output: 90                 
Correct output: -27                 | Program output: -25                
Correct output: -76                 | Program output: -76                
Correct output: -70                 | Program output: -61                
Correct output: -98                 | Program output: -94                
Correct output: -88                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -97                
Correct output: -67                 | Program output: 34                 
Correct output: -89                 | Program output: 19                 
Correct output: -9                  | Program output: -9                 
Correct output: -67                 | Program output: 77                 
Correct output: -82                 | Program output: -82                
Correct output: -86                 | Program output: -86                
Correct output: -76                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -80                
Correct output: -28                 | Program output: 42                 
Correct output: -46                 | Program output: 41                 
Correct output: -87                 | Program output: 27                 
Correct output: -76                 | Program output: -76                
Correct output: -34                 | Program output: 74                 
Correct output: -70                 | Program output: -43                
Correct output: -2                  | Program output: 38                 
Correct output: -76                 | Program output: 53                 
Correct output: 2                   | Program output: 43                 
Correct output: -97                 | Program output: 43                 
Correct output: -57                 | Program output: 58                 
Correct output: 8                   | Program output: 65                 
Correct output: -69                 | Program output: 73                 
Correct output: -19                 | Program output: -7                 
Correct output: -40                 | Program output: -31                
Correct output: -24                 | Program output: 8                  
Correct output: -71                 | Program output: -4                 
Correct output: -92                 | Program output: 65                 
Correct output: -58                 | Program output: 25                 
Correct output: -32                 | Program output: 42                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -34                
Correct output: -100                | Program output: -81                
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -32                
Correct output: -90                 | Program output: -11                
Correct output: 45                  | Program output: 65                 
Correct output: -43                 | Program output: -14                
Correct output: -57                 | Program output: -57                
Correct output: -44                 | Program output: -44                
Correct output: -93                 | Program output: -14                
Correct output: -64                 | Program output: 18                 
Correct output: -59                 | Program output: -11                
Correct output: -92                 | Program output: 78                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: 53                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_lt exec_yankdup integer_div boolean_swap integer_gte boolean_or in4 in2 integer_dup in3 integer_dup exec_pop (boolean_frominteger integer_lte boolean_and integer_lt) exec_y_when_autoconstructing (boolean_swap in1 in3) integer_max integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (boolean_frominteger boolean_not integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () boolean_not integer_eq integer_min integer_eq in2 exec_rot (boolean_flush integer_dup_items in3 boolean_rot) (exec_when () boolean_yankdup) () exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 boolean_or in2 integer_sub boolean_yank boolean_stackdepth boolean_swap exec_pop (integer_stackdepth integer_gt boolean_dup_times) integer_lte exec_flush integer_pop exec_rot () (boolean_shove) (boolean_dup_items))
Lexicase best errors: [1 0 1 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 97
Percent parens: 0.186
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_lt exec_yankdup integer_div boolean_swap integer_gte boolean_or in4 in2 integer_dup in3 integer_dup exec_pop (boolean_frominteger integer_lte boolean_and integer_lt) exec_y_when_autoconstructing (boolean_swap in1 in3) integer_max integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (boolean_frominteger boolean_not integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () boolean_not integer_eq integer_min integer_eq in2 exec_rot (boolean_flush integer_dup_items in3 boolean_rot) (exec_when () boolean_yankdup) () exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 boolean_or in2 integer_sub boolean_yank boolean_stackdepth boolean_swap exec_pop (integer_stackdepth integer_gt boolean_dup_times) integer_lte exec_flush integer_pop exec_rot () (boolean_shove) (boolean_dup_items))
Zero cases best errors: [1 0 1 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 97
Percent parens: 0.186
--- Lexicase Population Statistics ---
Count of elite individuals by case: (212 5 225 8 233 217 201 213 19 4)
Population mean number of elite cases: 1.34
Count of perfect (error zero) individuals by case: (212 5 225 8 233 217 201 213 19 4)
Population mean number of perfect (error zero) cases: 1.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_do*while})
Best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_lt exec_yankdup integer_div boolean_swap integer_gte boolean_or in4 in2 integer_dup in3 integer_swap integer_lte exec_pop (boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap print_integer integer_inc integer_sub integer_stackdepth exec_stackdepth exec_when (boolean_stackdepth) exec_s_when_autoconstructing (integer_dup_times boolean_swap integer_stackdepth exec_do*while ()) () ()))
Errors: [1 1 1 0 0 0 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 35
Size: 43
Percent parens: 0.186
--- Population Statistics ---
Average total errors in population: 8.663
Median total errors in population: 8
Error averages by case: (0.788 0.995 0.775 0.992 0.767 0.783 0.799 0.787 0.981 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 68.421
Average program size in population (points): 90.601
Average percent parens in population: 0.249
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.259
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 136
Genome diversity (% unique genomes):	 0.657
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 136
Syntactic diversity (% unique Push programs):	 0.655
Total error diversity:				 0.005
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.114
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1753626
--- Timings ---
Current time: 1559314320133 milliseconds
Total Time:           8.9 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.5 seconds, 50.1%
Fitness Testing:      3.5 seconds, 39.5%
Report:               0.8 seconds,  9.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -60                 | Program output:                    
Correct output: 45                  | Program output: 65                 
Correct output: -51                 | Program output: -51                
Correct output: 26                  | Program output: 26                 
Correct output: -26                 | Program output: -26                
Correct output: -91                 | Program output: -91                
Correct output: -15                 | Program output:                    
Correct output: -43                 | Program output: -43                
Correct output: -2                  | Program output: -2                 
Correct output: 17                  | Program output: 17                 
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: 37                  | Program output: 37                 
Correct output: 13                  | Program output:                    
Correct output: 65                  | Program output: 80                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 95                 
Correct output: 30                  | Program output: 53                 
Correct output: 1                   | Program output:                    
Correct output: 22                  | Program output: 23                 
Correct output: 0                   | Program output:                    
Correct output: 1                   | Program output: 99                 
Correct output: 15                  | Program output: 18                 
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 97                 
Correct output: 42                  | Program output: 42                 
Correct output: 3                   | Program output:                    
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 59                  | Program output: 98                 
Correct output: 7                   | Program output:                    
Correct output: 40                  | Program output: 40                 
Correct output: 20                  | Program output: 20                 
Correct output: 26                  | Program output: 57                 
Correct output: -43                 | Program output: -43                
Correct output: -30                 | Program output: -15                
Correct output: -93                 | Program output:                    
Correct output: -82                 | Program output: -59                
Correct output: -100                | Program output: -35                
Correct output: -43                 | Program output: -3                 
Correct output: -91                 | Program output: -91                
Correct output: -53                 | Program output:                    
Correct output: -27                 | Program output: -27                
Correct output: -76                 | Program output: -61                
Correct output: -70                 | Program output: -70                
Correct output: -98                 | Program output: -98                
Correct output: -88                 | Program output:                    
Correct output: -59                 | Program output: 53                 
Correct output: -100                | Program output: -50                
Correct output: -67                 | Program output: 69                 
Correct output: -89                 | Program output: -62                
Correct output: -9                  | Program output: 32                 
Correct output: -67                 | Program output:                    
Correct output: -82                 | Program output: 97                 
Correct output: -86                 | Program output: 93                 
Correct output: -76                 | Program output: 33                 
Correct output: -98                 | Program output: -7                 
Correct output: -85                 | Program output: -85                
Correct output: -28                 | Program output:                    
Correct output: -46                 | Program output:                    
Correct output: -87                 | Program output:                    
Correct output: -76                 | Program output:                    
Correct output: -34                 | Program output:                    
Correct output: -70                 | Program output: -70                
Correct output: -2                  | Program output: 30                 
Correct output: -76                 | Program output: 23                 
Correct output: 2                   | Program output: 54                 
Correct output: -97                 | Program output: -54                
Correct output: -57                 | Program output: -57                
Correct output: 8                   | Program output: 83                 
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output:                    
Correct output: -40                 | Program output: -40                
Correct output: -24                 | Program output: -18                
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output:                    
Correct output: -32                 | Program output:                    
Correct output: -100                | Program output:                    
Correct output: -98                 | Program output:                    
Correct output: -100                | Program output: -97                
Correct output: -18                 | Program output: 21                 
Correct output: -77                 | Program output: -77                
Correct output: -90                 | Program output:                    
Correct output: 45                  | Program output: 81                 
Correct output: -43                 | Program output:                    
Correct output: -57                 | Program output: -21                
Correct output: -44                 | Program output: -27                
Correct output: -93                 | Program output:                    
Correct output: -64                 | Program output: -64                
Correct output: -59                 | Program output: 27                 
Correct output: -92                 | Program output: -92                
Correct output: -72                 | Program output:                    
Correct output: -94                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_lt exec_yankdup integer_div boolean_swap integer_gte boolean_or in4 in2 in3 exec_s_when_autoconstructing (boolean_empty integer_shove exec_if () (integer_swap integer_lte exec_pop (boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) integer_yank integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (boolean_frominteger boolean_not integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) (exec_swap (boolean_flush integer_dup_items exec_k (boolean_rot) (exec_when () boolean_yankdup)) (exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 boolean_or in4 integer_sub integer_stackdepth boolean_stackdepth) boolean_swap exec_pop (integer_stackdepth integer_gt boolean_dup_times) integer_lte exec_shove (integer_pop exec_rot () (boolean_shove) (boolean_dup_items))) ())
Lexicase best errors: [0 1 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 108
Percent parens: 0.231
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_lt exec_yankdup integer_div boolean_swap integer_gte boolean_or in4 in2 in3 exec_s_when_autoconstructing (boolean_empty integer_shove exec_if () (integer_swap integer_lte exec_pop (boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) integer_yank integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (boolean_frominteger boolean_not integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) (exec_swap (boolean_flush integer_dup_items exec_k (boolean_rot) (exec_when () boolean_yankdup)) (exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 boolean_or in4 integer_sub integer_stackdepth boolean_stackdepth) boolean_swap exec_pop (integer_stackdepth integer_gt boolean_dup_times) integer_lte exec_shove (integer_pop exec_rot () (boolean_shove) (boolean_dup_items))) ())
Zero cases best errors: [0 1 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 108
Percent parens: 0.231
--- Lexicase Population Statistics ---
Count of elite individuals by case: (147 413 160 177 254 472 651 199 851 98)
Population mean number of elite cases: 3.42
Count of perfect (error zero) individuals by case: (147 413 160 177 254 472 651 199 851 98)
Population mean number of perfect (error zero) cases: 3.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items})
Best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_lt exec_yankdup integer_div boolean_swap integer_gte boolean_or in4 in2 in3 exec_s_when_autoconstructing (boolean_empty integer_shove exec_if () (integer_swap integer_lte exec_pop (boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) integer_yank integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (boolean_frominteger boolean_not integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_dec boolean_empty boolean_yank integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () in2) exec_swap (boolean_flush integer_dup_items in3 boolean_rot) (exec_when () boolean_yankdup)) (exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 boolean_or in4 integer_sub integer_stackdepth boolean_yankdup) (boolean_swap exec_pop (integer_stackdepth integer_gt boolean_dup_times) integer_lte exec_shove (integer_pop exec_rot () (boolean_shove) (boolean_dup_items))))
Errors: [0 1 0 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 83
Size: 106
Percent parens: 0.217
--- Population Statistics ---
Average total errors in population: 6.578
Median total errors in population: 6
Error averages by case: (0.853 0.587 0.84 0.823 0.746 0.528 0.349 0.801 0.149 0.902)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 76.127
Average program size in population (points): 96.385
Average percent parens in population: 0.210
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 5.141
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 62
Genome diversity (% unique genomes):	 0.682
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.676
Total error diversity:				 0.009
Error (vector) diversity:			 0.071
Behavioral diversity:				 0.181
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2881423
--- Timings ---
Current time: 1559314323859 milliseconds
Total Time:          12.2 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.4 seconds, 52.6%
Fitness Testing:      4.5 seconds, 37.2%
Report:               1.1 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 484
Test mean error for best: 0.48400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -60                 | Program output: -60                
Correct output: 45                  | Program output: 65                 
Correct output: -51                 | Program output: -51                
Correct output: 26                  | Program output: 26                 
Correct output: -26                 | Program output: -1                 
Correct output: -91                 | Program output: -91                
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -2                  | Program output: -2                 
Correct output: 17                  | Program output: 17                 
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: 37                  | Program output: 37                 
Correct output: 13                  | Program output: 13                 
Correct output: 65                  | Program output: 92                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 30                  | Program output: 30                 
Correct output: 1                   | Program output: 57                 
Correct output: 22                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 46                 
Correct output: 15                  | Program output: 78                 
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 97                 
Correct output: 42                  | Program output: 42                 
Correct output: 3                   | Program output: 50                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 59                  | Program output: 98                 
Correct output: 7                   | Program output: 43                 
Correct output: 40                  | Program output: 93                 
Correct output: 20                  | Program output: 34                 
Correct output: 26                  | Program output: 57                 
Correct output: -43                 | Program output: -43                
Correct output: -30                 | Program output: -30                
Correct output: -93                 | Program output: -93                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -6                 
Correct output: -43                 | Program output: -43                
Correct output: -91                 | Program output: -61                
Correct output: -53                 | Program output: -53                
Correct output: -27                 | Program output: -18                
Correct output: -76                 | Program output: -76                
Correct output: -70                 | Program output: -31                
Correct output: -98                 | Program output: -94                
Correct output: -88                 | Program output: -88                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -29                
Correct output: -67                 | Program output: 69                 
Correct output: -89                 | Program output: -11                
Correct output: -9                  | Program output: -9                 
Correct output: -67                 | Program output: -67                
Correct output: -82                 | Program output: -82                
Correct output: -86                 | Program output: -86                
Correct output: -76                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -80                
Correct output: -28                 | Program output: -20                
Correct output: -46                 | Program output: -46                
Correct output: -87                 | Program output: -46                
Correct output: -76                 | Program output: -63                
Correct output: -34                 | Program output: -34                
Correct output: -70                 | Program output: -43                
Correct output: -2                  | Program output: 30                 
Correct output: -76                 | Program output: 23                 
Correct output: 2                   | Program output: 2                  
Correct output: -97                 | Program output: -97                
Correct output: -57                 | Program output: -6                 
Correct output: 8                   | Program output: 83                 
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -40                 | Program output: -8                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -4                 
Correct output: -92                 | Program output: -87                
Correct output: -58                 | Program output: 23                 
Correct output: -32                 | Program output: -4                 
Correct output: -100                | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -53                
Correct output: -90                 | Program output: -90                
Correct output: 45                  | Program output: 81                 
Correct output: -43                 | Program output: -43                
Correct output: -57                 | Program output: -57                
Correct output: -44                 | Program output: -44                
Correct output: -93                 | Program output: -93                
Correct output: -64                 | Program output: -64                
Correct output: -59                 | Program output: -11                
Correct output: -92                 | Program output: -22                
Correct output: -72                 | Program output: -21                
Correct output: -94                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_stackdepth exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_lt exec_yankdup integer_div boolean_swap integer_gte boolean_or in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_shove boolean_empty exec_noop exec_if () (integer_swap integer_lte exec_pop (boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_dup exec_do*times (integer_yank integer_dup boolean_not integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (boolean_frominteger boolean_not integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) exec_swap (boolean_flush integer_dup_items in3 boolean_rot) (exec_when () boolean_yankdup)) (exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 boolean_or in4 integer_sub integer_stackdepth boolean_stackdepth) (boolean_swap exec_pop (integer_stackdepth integer_gt boolean_dup_times) integer_lte exec_shove (integer_pop exec_rot () (boolean_shove) (boolean_dup_items))))
Lexicase best errors: [0 0 0 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 118
Percent parens: 0.203
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_stackdepth exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_lt exec_yankdup integer_div boolean_swap integer_gte boolean_or in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_shove boolean_empty exec_noop exec_if () (integer_swap integer_lte exec_pop (boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_dup exec_do*times (integer_yank integer_dup boolean_not integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (boolean_frominteger boolean_not integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) exec_swap (boolean_flush integer_dup_items in3 boolean_rot) (exec_when () boolean_yankdup)) (exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 boolean_or in4 integer_sub integer_stackdepth boolean_stackdepth) (boolean_swap exec_pop (integer_stackdepth integer_gt boolean_dup_times) integer_lte exec_shove (integer_pop exec_rot () (boolean_shove) (boolean_dup_items))))
Zero cases best errors: [0 0 0 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 118
Percent parens: 0.203
--- Lexicase Population Statistics ---
Count of elite individuals by case: (256 320 663 486 327 712 23 520 512 23)
Population mean number of elite cases: 3.84
Count of perfect (error zero) individuals by case: (256 320 663 486 327 712 23 520 512 23)
Population mean number of perfect (error zero) cases: 3.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items})
Best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_lt integer_gte boolean_or in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_shove boolean_empty exec_noop exec_if () (integer_swap integer_lte exec_pop (boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_dup exec_do*times (integer_yank integer_dup boolean_not integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (boolean_frominteger boolean_not integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) exec_swap (boolean_flush integer_dup_items in3 boolean_rot) (exec_when () boolean_yankdup)) (exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 boolean_or in4 integer_sub integer_stackdepth boolean_stackdepth) (boolean_swap exec_pop (integer_stackdepth integer_gt boolean_dup_times) integer_lte exec_shove (integer_pop exec_rot () (boolean_shove) (boolean_dup_items))))
Errors: [0 0 0 0 0 0 1 0 0 1]
Total: 2
Mean: 0.2
Genome size: 90
Size: 114
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 6.158
Median total errors in population: 7
Error averages by case: (0.744 0.68 0.337 0.514 0.673 0.288 0.977 0.48 0.488 0.977)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 86.051
Average program size in population (points): 109.188
Average percent parens in population: 0.212
Minimum age in population: 5.5
Maximum age in population: 8.0
Average age in population: 6.73375
Median age in population: 7.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 92
Genome diversity (% unique genomes):	 0.742
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 92
Syntactic diversity (% unique Push programs):	 0.741
Total error diversity:				 0.009
Error (vector) diversity:			 0.051
Behavioral diversity:				 0.189
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 4259571
--- Timings ---
Current time: 1559314327865 milliseconds
Total Time:          16.2 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.5 seconds, 52.3%
Fitness Testing:      5.7 seconds, 35.4%
Report:               1.9 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 551
Test mean error for best: 0.55100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -60                 | Program output: 83                 
Correct output: 45                  | Program output: 45                 
Correct output: -51                 | Program output: -51                
Correct output: 26                  | Program output: 26                 
Correct output: -26                 | Program output: -26                
Correct output: -91                 | Program output: -91                
Correct output: -15                 | Program output: 49                 
Correct output: -43                 | Program output: -26                
Correct output: -2                  | Program output: -2                 
Correct output: 17                  | Program output: 43                 
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: 37                  | Program output: 37                 
Correct output: 13                  | Program output: 13                 
Correct output: 65                  | Program output: 66                 
Correct output: 5                   | Program output: 16                 
Correct output: 1                   | Program output: 38                 
Correct output: 30                  | Program output: 81                 
Correct output: 1                   | Program output: 2                  
Correct output: 22                  | Program output: 63                 
Correct output: 0                   | Program output: 90                 
Correct output: 1                   | Program output: 39                 
Correct output: 15                  | Program output: 58                 
Correct output: 11                  | Program output: 67                 
Correct output: 6                   | Program output: 6                  
Correct output: 42                  | Program output: 90                 
Correct output: 3                   | Program output: 49                 
Correct output: 0                   | Program output: 88                 
Correct output: 2                   | Program output: 39                 
Correct output: 59                  | Program output: 59                 
Correct output: 7                   | Program output: 61                 
Correct output: 40                  | Program output: 73                 
Correct output: 20                  | Program output: 93                 
Correct output: 26                  | Program output: 32                 
Correct output: -43                 | Program output: 7                  
Correct output: -30                 | Program output: -30                
Correct output: -93                 | Program output: -41                
Correct output: -82                 | Program output: 91                 
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -43                
Correct output: -91                 | Program output: -61                
Correct output: -53                 | Program output: 90                 
Correct output: -27                 | Program output: -25                
Correct output: -76                 | Program output: -76                
Correct output: -70                 | Program output: -61                
Correct output: -98                 | Program output: -94                
Correct output: -88                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -97                
Correct output: -67                 | Program output: -67                
Correct output: -89                 | Program output: -89                
Correct output: -9                  | Program output: -9                 
Correct output: -67                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -86                 | Program output: -86                
Correct output: -76                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -80                
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: 41                 
Correct output: -87                 | Program output: -87                
Correct output: -76                 | Program output: -76                
Correct output: -34                 | Program output: 74                 
Correct output: -70                 | Program output: -43                
Correct output: -2                  | Program output: -2                 
Correct output: -76                 | Program output: -76                
Correct output: 2                   | Program output: 99                 
Correct output: -97                 | Program output: -42                
Correct output: -57                 | Program output: 58                 
Correct output: 8                   | Program output: 8                  
Correct output: -69                 | Program output: 59                 
Correct output: -19                 | Program output: -7                 
Correct output: -40                 | Program output: -31                
Correct output: -24                 | Program output: -9                 
Correct output: -71                 | Program output: -4                 
Correct output: -92                 | Program output: 0                  
Correct output: -58                 | Program output: -58                
Correct output: -32                 | Program output: -32                
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -34                
Correct output: -100                | Program output: -81                
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -32                
Correct output: -90                 | Program output: -11                
Correct output: 45                  | Program output: 65                 
Correct output: -43                 | Program output: -14                
Correct output: -57                 | Program output: -57                
Correct output: -44                 | Program output: -44                
Correct output: -93                 | Program output: -14                
Correct output: -64                 | Program output: -4                 
Correct output: -59                 | Program output: -11                
Correct output: -92                 | Program output: 78                 
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_stackdepth integer_mod in3 boolean_flush integer_lt exec_yankdup integer_div boolean_swap integer_gte boolean_or in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_shove boolean_empty exec_noop exec_if (integer_swap print_integer exec_pop (boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3)) (boolean_not integer_dup exec_do*times (integer_yank integer_dup boolean_not integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (boolean_frominteger boolean_not integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) exec_swap (boolean_flush integer_dup_items in3 boolean_rot) (exec_when () in4 integer_sub integer_stackdepth boolean_stackdepth) boolean_swap exec_pop (integer_stackdepth integer_gt boolean_dup_times) integer_lte exec_shove (in1 exec_rot () (boolean_shove) (boolean_dup_items))) () ())
Lexicase best errors: [0 1 1 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 108
Percent parens: 0.213
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_stackdepth integer_mod in3 boolean_flush integer_lt exec_yankdup integer_div boolean_swap integer_gte boolean_or in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_shove boolean_empty exec_noop exec_if (integer_swap print_integer exec_pop (boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3)) (boolean_not integer_dup exec_do*times (integer_yank integer_dup boolean_not integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (boolean_frominteger boolean_not integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) exec_swap (boolean_flush integer_dup_items in3 boolean_rot) (exec_when () in4 integer_sub integer_stackdepth boolean_stackdepth) boolean_swap exec_pop (integer_stackdepth integer_gt boolean_dup_times) integer_lte exec_shove (in1 exec_rot () (boolean_shove) (boolean_dup_items))) () ())
Zero cases best errors: [0 1 1 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 108
Percent parens: 0.213
--- Lexicase Population Statistics ---
Count of elite individuals by case: (350 85 741 26 393 19 45 757 112 354)
Population mean number of elite cases: 2.88
Count of perfect (error zero) individuals by case: (350 85 741 26 393 19 45 757 112 354)
Population mean number of perfect (error zero) cases: 2.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items})
Best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_lt exec_yankdup integer_div boolean_swap integer_gte boolean_or in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_shove boolean_empty exec_noop exec_if (integer_swap integer_lte exec_pop (boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3)) (boolean_not integer_dup exec_do*times (integer_yank integer_dup boolean_not integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (boolean_frominteger boolean_not integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) exec_swap (boolean_flush integer_dup_items in3 boolean_rot) (exec_when () boolean_yankdup)) (exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 boolean_or in4 integer_sub integer_stackdepth boolean_stackdepth) (boolean_swap exec_pop (integer_stackdepth integer_gt boolean_dup_times) integer_lte exec_shove (integer_pop exec_rot () (boolean_shove) (boolean_dup_items))))
Errors: [0 1 1 0 0 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 93
Size: 117
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 7.118
Median total errors in population: 7
Error averages by case: (0.65 0.915 0.259 0.974 0.607 0.981 0.955 0.243 0.888 0.646)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 92.748
Average program size in population (points): 116.527
Average percent parens in population: 0.204
Minimum age in population: 6.5
Maximum age in population: 9.625
Average age in population: 8.2595
Median age in population: 8.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 101
Genome diversity (% unique genomes):	 0.8
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 101
Syntactic diversity (% unique Push programs):	 0.799
Total error diversity:				 0.007
Error (vector) diversity:			 0.053
Behavioral diversity:				 0.211
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 5562698
--- Timings ---
Current time: 1559314331738 milliseconds
Total Time:          20.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.5 seconds, 52.2%
Fitness Testing:      6.9 seconds, 34.1%
Report:               2.6 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 484
Test mean error for best: 0.48400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -60                 | Program output: -60                
Correct output: 45                  | Program output: 65                 
Correct output: -51                 | Program output: -51                
Correct output: 26                  | Program output: 26                 
Correct output: -26                 | Program output: -1                 
Correct output: -91                 | Program output: -91                
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -2                  | Program output: -2                 
Correct output: 17                  | Program output: 17                 
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: 37                  | Program output: 37                 
Correct output: 13                  | Program output: 13                 
Correct output: 65                  | Program output: 92                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 30                  | Program output: 30                 
Correct output: 1                   | Program output: 57                 
Correct output: 22                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 46                 
Correct output: 15                  | Program output: 78                 
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 97                 
Correct output: 42                  | Program output: 42                 
Correct output: 3                   | Program output: 50                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 59                  | Program output: 98                 
Correct output: 7                   | Program output: 43                 
Correct output: 40                  | Program output: 93                 
Correct output: 20                  | Program output: 34                 
Correct output: 26                  | Program output: 57                 
Correct output: -43                 | Program output: -43                
Correct output: -30                 | Program output: -30                
Correct output: -93                 | Program output: -93                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -6                 
Correct output: -43                 | Program output: -43                
Correct output: -91                 | Program output: -61                
Correct output: -53                 | Program output: -53                
Correct output: -27                 | Program output: -18                
Correct output: -76                 | Program output: -76                
Correct output: -70                 | Program output: -31                
Correct output: -98                 | Program output: -94                
Correct output: -88                 | Program output: -88                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -29                
Correct output: -67                 | Program output: 69                 
Correct output: -89                 | Program output: -11                
Correct output: -9                  | Program output: -9                 
Correct output: -67                 | Program output: -67                
Correct output: -82                 | Program output: -82                
Correct output: -86                 | Program output: -86                
Correct output: -76                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -80                
Correct output: -28                 | Program output: -20                
Correct output: -46                 | Program output: -46                
Correct output: -87                 | Program output: -46                
Correct output: -76                 | Program output: -63                
Correct output: -34                 | Program output: -34                
Correct output: -70                 | Program output: -43                
Correct output: -2                  | Program output: 30                 
Correct output: -76                 | Program output: 23                 
Correct output: 2                   | Program output: 2                  
Correct output: -97                 | Program output: -97                
Correct output: -57                 | Program output: -6                 
Correct output: 8                   | Program output: 83                 
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -40                 | Program output: -8                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -4                 
Correct output: -92                 | Program output: -87                
Correct output: -58                 | Program output: 23                 
Correct output: -32                 | Program output: -4                 
Correct output: -100                | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -53                
Correct output: -90                 | Program output: -90                
Correct output: 45                  | Program output: 81                 
Correct output: -43                 | Program output: -43                
Correct output: -57                 | Program output: -57                
Correct output: -44                 | Program output: -44                
Correct output: -93                 | Program output: -93                
Correct output: -64                 | Program output: -64                
Correct output: -59                 | Program output: -11                
Correct output: -92                 | Program output: -22                
Correct output: -72                 | Program output: -21                
Correct output: -94                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_lt exec_yankdup integer_div boolean_swap integer_gte boolean_or in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_shove boolean_empty exec_noop exec_if () (integer_swap exec_pop (boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_dup exec_do*times (integer_yank integer_dup boolean_not integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) tagged_218 exec_swap (boolean_frominteger boolean_not integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) (exec_swap (boolean_flush integer_dup_items integer_dup_items in3 boolean_rot) (exec_when () boolean_yankdup)) (exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 boolean_or in4 integer_sub integer_stackdepth boolean_stackdepth) boolean_swap exec_pop (integer_stackdepth integer_gt boolean_xor) integer_lte exec_shove (integer_pop exec_rot () (boolean_shove) (boolean_dup_items)))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 133
Percent parens: 0.195
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_lt exec_yankdup integer_div boolean_swap integer_gte boolean_or in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_shove boolean_empty exec_noop exec_if () (integer_swap exec_pop (boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_dup exec_do*times (integer_yank integer_dup boolean_not integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) tagged_218 exec_swap (boolean_frominteger boolean_not integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) (exec_swap (boolean_flush integer_dup_items integer_dup_items in3 boolean_rot) (exec_when () boolean_yankdup)) (exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 boolean_or in4 integer_sub integer_stackdepth boolean_stackdepth) boolean_swap exec_pop (integer_stackdepth integer_gt boolean_xor) integer_lte exec_shove (integer_pop exec_rot () (boolean_shove) (boolean_dup_items)))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 133
Percent parens: 0.195
--- Lexicase Population Statistics ---
Count of elite individuals by case: (764 258 230 833 686 369 363 258 373 631)
Population mean number of elite cases: 4.76
Count of perfect (error zero) individuals by case: (764 258 230 833 686 369 363 258 373 631)
Population mean number of perfect (error zero) cases: 4.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items})
Best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_lt exec_yankdup integer_div boolean_swap integer_gte boolean_or in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_shove boolean_empty exec_noop exec_if () (integer_swap boolean_stackdepth boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_dup exec_do*times (integer_yank integer_dup boolean_not integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (boolean_frominteger boolean_not integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) (exec_swap (boolean_flush integer_dup_items in3 boolean_rot) (exec_when () boolean_yankdup)) (exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 boolean_or in4 integer_sub integer_stackdepth boolean_stackdepth) boolean_swap exec_pop (integer_stackdepth integer_gt boolean_dup_times) integer_lte exec_shove (integer_pop exec_rot () (boolean_shove) (boolean_dup_items)))
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 92
Size: 115
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 5.235
Median total errors in population: 4
Error averages by case: (0.236 0.742 0.77 0.167 0.314 0.631 0.637 0.742 0.627 0.369)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 93.487
Average program size in population (points): 116.801
Average percent parens in population: 0.199
Minimum age in population: 7.5
Maximum age in population: 11.4375
Average age in population: 9.742875
Median age in population: 9.8125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 38
Genome diversity (% unique genomes):	 0.791
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.79
Total error diversity:				 0.01
Error (vector) diversity:			 0.079
Behavioral diversity:				 0.257
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 6798084
--- Timings ---
Current time: 1559314335526 milliseconds
Total Time:          23.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.5 seconds, 52.2%
Fitness Testing:      7.9 seconds, 33.2%
Report:               3.4 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 457
Test mean error for best: 0.45700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -60                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: -51                 | Program output: -51                
Correct output: 26                  | Program output: 26                 
Correct output: -26                 | Program output: -1                 
Correct output: -91                 | Program output: -91                
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -2                  | Program output: -2                 
Correct output: 17                  | Program output: 17                 
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: 37                  | Program output: 37                 
Correct output: 13                  | Program output: 13                 
Correct output: 65                  | Program output: 66                 
Correct output: 5                   | Program output: 34                 
Correct output: 1                   | Program output: 38                 
Correct output: 30                  | Program output: 81                 
Correct output: 1                   | Program output: 15                 
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 39                 
Correct output: 15                  | Program output: 18                 
Correct output: 11                  | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: 42                  | Program output: 90                 
Correct output: 3                   | Program output: 3                  
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 25                 
Correct output: 59                  | Program output: 59                 
Correct output: 7                   | Program output: 7                  
Correct output: 40                  | Program output: 40                 
Correct output: 20                  | Program output: 20                 
Correct output: 26                  | Program output: 26                 
Correct output: -43                 | Program output: -43                
Correct output: -30                 | Program output: -15                
Correct output: -93                 | Program output: -93                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -6                 
Correct output: -43                 | Program output: -3                 
Correct output: -91                 | Program output: -91                
Correct output: -53                 | Program output: -53                
Correct output: -27                 | Program output: -18                
Correct output: -76                 | Program output: -61                
Correct output: -70                 | Program output: -31                
Correct output: -98                 | Program output: -98                
Correct output: -88                 | Program output: -88                
Correct output: -59                 | Program output: 17                 
Correct output: -100                | Program output: -29                
Correct output: -67                 | Program output: -67                
Correct output: -89                 | Program output: -11                
Correct output: -9                  | Program output: 32                 
Correct output: -67                 | Program output: -67                
Correct output: -82                 | Program output: 68                 
Correct output: -86                 | Program output: 94                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: -7                 
Correct output: -85                 | Program output: -85                
Correct output: -28                 | Program output: -20                
Correct output: -46                 | Program output: -46                
Correct output: -87                 | Program output: -46                
Correct output: -76                 | Program output: -63                
Correct output: -34                 | Program output: -34                
Correct output: -70                 | Program output: -65                
Correct output: -2                  | Program output: 49                 
Correct output: -76                 | Program output: -76                
Correct output: 2                   | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -57                 | Program output: -6                 
Correct output: 8                   | Program output: 8                  
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -40                 | Program output: -8                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: -87                
Correct output: -58                 | Program output: 5                  
Correct output: -32                 | Program output: -4                 
Correct output: -100                | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -18                 | Program output: 21                 
Correct output: -77                 | Program output: -53                
Correct output: -90                 | Program output: -90                
Correct output: 45                  | Program output: 45                 
Correct output: -43                 | Program output: -43                
Correct output: -57                 | Program output: -21                
Correct output: -44                 | Program output: -27                
Correct output: -93                 | Program output: -93                
Correct output: -64                 | Program output: -64                
Correct output: -59                 | Program output: -59                
Correct output: -92                 | Program output: -22                
Correct output: -72                 | Program output: -21                
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_lt exec_yankdup integer_div boolean_swap integer_gte boolean_or in4 in2 integer_dup integer_swap integer_lte exec_pop (boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) integer_yank exec_pop (boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_dup exec_do*times (integer_yank integer_dup boolean_not integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (boolean_frominteger boolean_not integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2 exec_swap (boolean_flush integer_dup_items in3 boolean_rot) (exec_when () boolean_invert_first_then_and) exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 boolean_or in4 in3 integer_stackdepth boolean_stackdepth boolean_swap exec_pop (integer_stackdepth integer_gt boolean_dup_times) integer_lte exec_shove (integer_pop integer_dup) boolean_shove boolean_dup_items)
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 114
Percent parens: 0.158
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_dup} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_lt exec_yankdup integer_div boolean_swap integer_gte boolean_or in4 in2 integer_dup integer_swap integer_lte exec_pop (boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) integer_yank exec_pop (boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_dup exec_do*times (integer_yank integer_dup boolean_not integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (boolean_frominteger boolean_not integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2 exec_swap (boolean_flush integer_dup_items in3 boolean_rot) (exec_when () boolean_invert_first_then_and) exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 boolean_or in4 in3 integer_stackdepth boolean_stackdepth boolean_swap exec_pop (integer_stackdepth integer_gt boolean_dup_times) integer_lte exec_shove (integer_pop integer_dup) boolean_shove boolean_dup_items)
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 114
Percent parens: 0.158
--- Lexicase Population Statistics ---
Count of elite individuals by case: (636 476 39 715 76 277 271 867 89 713)
Population mean number of elite cases: 4.16
Count of perfect (error zero) individuals by case: (636 476 39 715 76 277 271 867 89 713)
Population mean number of perfect (error zero) cases: 4.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items})
Best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_lt exec_yankdup integer_div boolean_swap integer_gte boolean_or in4 in2 integer_dup integer_swap integer_lte exec_pop (boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) integer_yank exec_pop (boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_dup exec_do*times (integer_yank integer_dup boolean_not integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (boolean_frominteger boolean_not integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2 exec_swap (boolean_flush integer_dup_items in3 boolean_rot) (exec_when () boolean_invert_first_then_and) exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 boolean_or in4 in3 integer_stackdepth boolean_stackdepth boolean_swap exec_pop (integer_stackdepth integer_gt boolean_dup_times) integer_lte exec_shove (integer_pop exec_rot () (boolean_shove) (boolean_dup_items)))
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 96
Size: 117
Percent parens: 0.179
--- Population Statistics ---
Average total errors in population: 5.841
Median total errors in population: 5
Error averages by case: (0.364 0.524 0.961 0.285 0.924 0.723 0.729 0.133 0.911 0.287)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 96.231
Average program size in population (points): 120.132
Average percent parens in population: 0.199
Minimum age in population: 9.5
Maximum age in population: 13.25
Average age in population: 11.1741875
Median age in population: 11.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 49
Genome diversity (% unique genomes):	 0.788
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 49
Syntactic diversity (% unique Push programs):	 0.785
Total error diversity:				 0.01
Error (vector) diversity:			 0.05
Behavioral diversity:				 0.23
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 8122256
--- Timings ---
Current time: 1559314339429 milliseconds
Total Time:          27.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.4 seconds, 52.0%
Fitness Testing:      9.1 seconds, 32.7%
Report:               4.1 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 485
Test mean error for best: 0.48500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -60                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: -51                 | Program output: -51                
Correct output: 26                  | Program output: 26                 
Correct output: -26                 | Program output: -1                 
Correct output: -91                 | Program output: -91                
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -2                  | Program output: -2                 
Correct output: 17                  | Program output: 43                 
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: 37                  | Program output: 37                 
Correct output: 13                  | Program output: 13                 
Correct output: 65                  | Program output: 66                 
Correct output: 5                   | Program output: 16                 
Correct output: 1                   | Program output: 38                 
Correct output: 30                  | Program output: 81                 
Correct output: 1                   | Program output: 2                  
Correct output: 22                  | Program output: 63                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 39                 
Correct output: 15                  | Program output: 58                 
Correct output: 11                  | Program output: 67                 
Correct output: 6                   | Program output: 6                  
Correct output: 42                  | Program output: 90                 
Correct output: 3                   | Program output: 49                 
Correct output: 0                   | Program output: 88                 
Correct output: 2                   | Program output: 39                 
Correct output: 59                  | Program output: 59                 
Correct output: 7                   | Program output: 61                 
Correct output: 40                  | Program output: 73                 
Correct output: 20                  | Program output: 93                 
Correct output: 26                  | Program output: 32                 
Correct output: -43                 | Program output: 7                  
Correct output: -30                 | Program output: -15                
Correct output: -93                 | Program output: -93                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -6                 
Correct output: -43                 | Program output: -43                
Correct output: -91                 | Program output: -61                
Correct output: -53                 | Program output: -53                
Correct output: -27                 | Program output: -18                
Correct output: -76                 | Program output: -76                
Correct output: -70                 | Program output: -31                
Correct output: -98                 | Program output: -94                
Correct output: -88                 | Program output: -88                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -29                
Correct output: -67                 | Program output: -67                
Correct output: -89                 | Program output: -11                
Correct output: -9                  | Program output: -9                 
Correct output: -67                 | Program output: -67                
Correct output: -82                 | Program output: -82                
Correct output: -86                 | Program output: -86                
Correct output: -76                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -80                
Correct output: -28                 | Program output: -20                
Correct output: -46                 | Program output: -46                
Correct output: -87                 | Program output: -46                
Correct output: -76                 | Program output: -63                
Correct output: -34                 | Program output: -34                
Correct output: -70                 | Program output: -43                
Correct output: -2                  | Program output: -2                 
Correct output: -76                 | Program output: -76                
Correct output: 2                   | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -57                 | Program output: -6                 
Correct output: 8                   | Program output: 8                  
Correct output: -69                 | Program output: 59                 
Correct output: -19                 | Program output: -19                
Correct output: -40                 | Program output: -8                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -4                 
Correct output: -92                 | Program output: -87                
Correct output: -58                 | Program output: -58                
Correct output: -32                 | Program output: -4                 
Correct output: -100                | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -53                
Correct output: -90                 | Program output: -90                
Correct output: 45                  | Program output: 65                 
Correct output: -43                 | Program output: -43                
Correct output: -57                 | Program output: -57                
Correct output: -44                 | Program output: -44                
Correct output: -93                 | Program output: -93                
Correct output: -64                 | Program output: -4                 
Correct output: -59                 | Program output: -11                
Correct output: -92                 | Program output: -22                
Correct output: -72                 | Program output: -21                
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tagged_225} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_dup_times (integer_mod in3 boolean_invert_second_then_and integer_lt exec_yankdup integer_div boolean_swap integer_gte boolean_or in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_shove boolean_empty exec_noop exec_if () (integer_swap exec_pop (boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap boolean_not in3) boolean_not integer_dup exec_do*times (integer_yank integer_dup boolean_not integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank in2 integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) tagged_218 exec_swap (integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) (exec_swap (boolean_flush integer_dup_items tagged_225 boolean_or in4 integer_sub integer_stackdepth boolean_stackdepth) (boolean_swap exec_pop (integer_stackdepth integer_gt boolean_dup_times) integer_lte exec_shove (integer_pop exec_rot () (boolean_shove) (boolean_dup_items)))) ()))
Lexicase best errors: [0 0 0 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 120
Percent parens: 0.208
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tagged_225} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_dup_times (integer_mod in3 boolean_invert_second_then_and integer_lt exec_yankdup integer_div boolean_swap integer_gte boolean_or in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_shove boolean_empty exec_noop exec_if () (integer_swap exec_pop (boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap boolean_not in3) boolean_not integer_dup exec_do*times (integer_yank integer_dup boolean_not integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank in2 integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) tagged_218 exec_swap (integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) (exec_swap (boolean_flush integer_dup_items tagged_225 boolean_or in4 integer_sub integer_stackdepth boolean_stackdepth) (boolean_swap exec_pop (integer_stackdepth integer_gt boolean_dup_times) integer_lte exec_shove (integer_pop exec_rot () (boolean_shove) (boolean_dup_items)))) ()))
Zero cases best errors: [0 0 0 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 120
Percent parens: 0.208
--- Lexicase Population Statistics ---
Count of elite individuals by case: (749 749 263 255 455 519 13 78 26 753)
Population mean number of elite cases: 3.86
Count of perfect (error zero) individuals by case: (749 749 263 255 455 519 13 78 26 753)
Population mean number of perfect (error zero) cases: 3.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 2, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items})
Best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_lt exec_yankdup integer_div boolean_swap integer_gte boolean_or in4 in2 integer_dup integer_swap exec_y_when_autoconstructing (exec_pop (boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) integer_yank exec_pop (boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3)) boolean_not integer_dup exec_do*times (integer_yank integer_dup boolean_not integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (boolean_frominteger boolean_not integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2 exec_swap (boolean_flush integer_dup_items in3 boolean_rot) (exec_when () boolean_invert_first_then_and) exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 boolean_or in4 in3 integer_stackdepth boolean_stackdepth boolean_swap exec_pop (integer_stackdepth integer_gt boolean_dup_times) integer_lte exec_shove (integer_pop exec_rot () (boolean_shove) (boolean_dup_items)))
Errors: [0 0 0 0 0 0 1 1 1 0]
Total: 3
Mean: 0.3
Genome size: 96
Size: 118
Percent parens: 0.186
--- Population Statistics ---
Average total errors in population: 6.14
Median total errors in population: 5
Error averages by case: (0.251 0.251 0.737 0.745 0.545 0.481 0.987 0.922 0.974 0.247)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 96.213
Average program size in population (points): 117.694
Average percent parens in population: 0.182
Minimum age in population: 10.5
Maximum age in population: 14.6875
Average age in population: 12.3244375
Median age in population: 12.40625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 93
Genome diversity (% unique genomes):	 0.776
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 94
Syntactic diversity (% unique Push programs):	 0.774
Total error diversity:				 0.008
Error (vector) diversity:			 0.052
Behavioral diversity:				 0.268
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 9463202
--- Timings ---
Current time: 1559314343362 milliseconds
Total Time:          31.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.4 seconds, 51.8%
Fitness Testing:     10.2 seconds, 32.3%
Report:               4.9 seconds, 15.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 440
Test mean error for best: 0.44000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44-44-44-44       
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -60                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: -51                 | Program output: -51                
Correct output: 26                  | Program output: 26                 
Correct output: -26                 | Program output: -26-26-26-26       
Correct output: -91                 | Program output: -91                
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -2                  | Program output: -2                 
Correct output: 17                  | Program output: 17                 
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: 37                  | Program output: 37                 
Correct output: 13                  | Program output: 13                 
Correct output: 65                  | Program output: 65                 
Correct output: 5                   | Program output: 16                 
Correct output: 1                   | Program output: 7                  
Correct output: 30                  | Program output: 53                 
Correct output: 1                   | Program output: 111                
Correct output: 22                  | Program output: 63                 
Correct output: 0                   | Program output: 62                 
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 67                 
Correct output: 6                   | Program output: 6                  
Correct output: 42                  | Program output: 90                 
Correct output: 3                   | Program output: 49                 
Correct output: 0                   | Program output: 88                 
Correct output: 2                   | Program output: 39                 
Correct output: 59                  | Program output: 59                 
Correct output: 7                   | Program output: 7                  
Correct output: 40                  | Program output: 40                 
Correct output: 20                  | Program output: 20                 
Correct output: 26                  | Program output: 32                 
Correct output: -43                 | Program output: 3                  
Correct output: -30                 | Program output: -30                
Correct output: -93                 | Program output: -93                
Correct output: -82                 | Program output: 14                 
Correct output: -100                | Program output: -35-100-100-100    
Correct output: -43                 | Program output: -43                
Correct output: -91                 | Program output: -61                
Correct output: -53                 | Program output: 55                 
Correct output: -27                 | Program output: -27                
Correct output: -76                 | Program output: -76                
Correct output: -70                 | Program output: -70-61             
Correct output: -98                 | Program output: -94                
Correct output: -88                 | Program output: -88                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -67                
Correct output: -89                 | Program output: -8919              
Correct output: -9                  | Program output: -9                 
Correct output: -67                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -86                 | Program output: -86                
Correct output: -76                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -80                
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: 4                  
Correct output: -87                 | Program output: -87                
Correct output: -76                 | Program output: -63                
Correct output: -34                 | Program output: 65                 
Correct output: -70                 | Program output: -43                
Correct output: -2                  | Program output: -2                 
Correct output: -76                 | Program output: -76                
Correct output: 2                   | Program output: 43                 
Correct output: -97                 | Program output: -42                
Correct output: -57                 | Program output: 6                  
Correct output: 8                   | Program output: 8                  
Correct output: -69                 | Program output: 59                 
Correct output: -19                 | Program output: -19                
Correct output: -40                 | Program output: -40-31-31-31       
Correct output: -24                 | Program output: -9                 
Correct output: -71                 | Program output: -4                 
Correct output: -92                 | Program output: 0                  
Correct output: -58                 | Program output: -5825              
Correct output: -32                 | Program output: -32                
Correct output: -100                | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -49                
Correct output: -90                 | Program output: -11                
Correct output: 45                  | Program output: 45                 
Correct output: -43                 | Program output: -43                
Correct output: -57                 | Program output: -57                
Correct output: -44                 | Program output: -44                
Correct output: -93                 | Program output: -93                
Correct output: -64                 | Program output: -4                 
Correct output: -59                 | Program output: -11                
Correct output: -92                 | Program output: 53                 
Correct output: -72                 | Program output: -21                
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_lt exec_yankdup integer_div boolean_swap integer_gte boolean_or in4 in2 integer_dup in3 in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_noop exec_if () (integer_swap boolean_stackdepth boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_div exec_do*times (integer_yank integer_dup exec_do*while (integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (boolean_frominteger boolean_not integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) exec_swap (boolean_flush integer_dup_items in3 boolean_rot) (exec_when () boolean_yankdup)) (exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 boolean_or in4 integer_sub integer_stackdepth boolean_stackdepth) (boolean_swap exec_pop (integer_stackdepth integer_gt boolean_pop) integer_lte exec_shove (integer_pop exec_rot () (boolean_shove) (boolean_dup_items))))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 120
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_lt exec_yankdup integer_div boolean_swap integer_gte boolean_or in4 in2 integer_dup in3 in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_noop exec_if () (integer_swap boolean_stackdepth boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_div exec_do*times (integer_yank integer_dup exec_do*while (integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (boolean_frominteger boolean_not integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) exec_swap (boolean_flush integer_dup_items in3 boolean_rot) (exec_when () boolean_yankdup)) (exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 boolean_or in4 integer_sub integer_stackdepth boolean_stackdepth) (boolean_swap exec_pop (integer_stackdepth integer_gt boolean_pop) integer_lte exec_shove (integer_pop exec_rot () (boolean_shove) (boolean_dup_items))))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 120
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (143 852 206 852 817 384 423 110 171 559)
Population mean number of elite cases: 4.52
Count of perfect (error zero) individuals by case: (143 852 206 852 817 384 423 110 171 559)
Population mean number of perfect (error zero) cases: 4.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items})
Best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_lt exec_yankdup integer_div boolean_swap integer_gte boolean_or in4 in2 integer_dup in3 in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_noop exec_if () (integer_swap boolean_stackdepth boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_div exec_do*times (integer_yank integer_dup exec_do*while (integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (boolean_frominteger boolean_not integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) exec_swap (boolean_flush integer_dup_items in3 boolean_rot) (exec_when () boolean_yankdup)) (exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 boolean_or in4 integer_sub integer_stackdepth boolean_stackdepth) (boolean_swap exec_pop (integer_stackdepth integer_gt boolean_pop) integer_lte exec_shove (integer_pop exec_rot () (boolean_shove) (boolean_dup_items))))
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 96
Size: 120
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 5.483
Median total errors in population: 5
Error averages by case: (0.857 0.148 0.794 0.148 0.183 0.616 0.577 0.89 0.829 0.441)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 93.236
Average program size in population (points): 115.992
Average percent parens in population: 0.196
Minimum age in population: 11.9375
Maximum age in population: 15.8984375
Average age in population: 14.028609375
Median age in population: 14.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 55
Genome diversity (% unique genomes):	 0.813
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.808
Total error diversity:				 0.01
Error (vector) diversity:			 0.081
Behavioral diversity:				 0.301
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 10611154
--- Timings ---
Current time: 1559314347159 milliseconds
Total Time:          35.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.4 seconds, 51.8%
Fitness Testing:     11.3 seconds, 31.8%
Report:               5.7 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 430
Test mean error for best: 0.43000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13-44-44-44       
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -60                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: -51                 | Program output: -51                
Correct output: 26                  | Program output: 26                 
Correct output: -26                 | Program output: -26-26-26-26       
Correct output: -91                 | Program output: -91                
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -2                  | Program output: -2                 
Correct output: 17                  | Program output: 17                 
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: 37                  | Program output: 37                 
Correct output: 13                  | Program output: 13                 
Correct output: 65                  | Program output: 66                 
Correct output: 5                   | Program output: 16                 
Correct output: 1                   | Program output: 38                 
Correct output: 30                  | Program output: 53                 
Correct output: 1                   | Program output: 211                
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 60                 
Correct output: 1                   | Program output: 39                 
Correct output: 15                  | Program output: 78                 
Correct output: 11                  | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: 42                  | Program output: 51                 
Correct output: 3                   | Program output: 3                  
Correct output: 0                   | Program output: 73                 
Correct output: 2                   | Program output: 25                 
Correct output: 59                  | Program output: 59                 
Correct output: 7                   | Program output: 7                  
Correct output: 40                  | Program output: 40                 
Correct output: 20                  | Program output: 20                 
Correct output: 26                  | Program output: 26                 
Correct output: -43                 | Program output: 7                  
Correct output: -30                 | Program output: 89                 
Correct output: -93                 | Program output: -93                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -96-100-100-100    
Correct output: -43                 | Program output: -13                
Correct output: -91                 | Program output: -87                
Correct output: -53                 | Program output: -53                
Correct output: -27                 | Program output: -27                
Correct output: -76                 | Program output: -28                
Correct output: -70                 | Program output: -70-61             
Correct output: -98                 | Program output: 57                 
Correct output: -88                 | Program output: -88                
Correct output: -59                 | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -67                
Correct output: -89                 | Program output: -8919              
Correct output: -9                  | Program output: -1                 
Correct output: -67                 | Program output: -67                
Correct output: -82                 | Program output: 68                 
Correct output: -86                 | Program output: 94                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: -82                
Correct output: -85                 | Program output: -50                
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -46                
Correct output: -87                 | Program output: -87                
Correct output: -76                 | Program output: -63                
Correct output: -34                 | Program output: -34                
Correct output: -70                 | Program output: -65                
Correct output: -2                  | Program output: -2                 
Correct output: -76                 | Program output: -76                
Correct output: 2                   | Program output: 99                 
Correct output: -97                 | Program output: -97                
Correct output: -57                 | Program output: -5758              
Correct output: 8                   | Program output: 8                  
Correct output: -69                 | Program output: 59                 
Correct output: -19                 | Program output: -19                
Correct output: -40                 | Program output: -40-31-31-31       
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: 97                 
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: -5825              
Correct output: -32                 | Program output: -32                
Correct output: -100                | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -18                 | Program output: 48                 
Correct output: -77                 | Program output: -77                
Correct output: -90                 | Program output: -90                
Correct output: 45                  | Program output: 45                 
Correct output: -43                 | Program output: -43                
Correct output: -57                 | Program output: -9                 
Correct output: -44                 | Program output: -23                
Correct output: -93                 | Program output: -93                
Correct output: -64                 | Program output: -4                 
Correct output: -59                 | Program output: -59                
Correct output: -92                 | Program output: -9278              
Correct output: -72                 | Program output: -21                
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_lt exec_yankdup integer_div boolean_swap integer_gte boolean_or in4 in2 integer_dup in3 in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_noop exec_if () (integer_swap integer_swap boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_div exec_do*times (integer_yank integer_dup exec_do*while (integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (boolean_frominteger boolean_not integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) exec_swap (boolean_flush integer_dup_items in3 boolean_rot) (exec_when () boolean_yankdup)) (exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 boolean_or in4 integer_sub integer_gte boolean_stackdepth) (boolean_swap exec_pop (integer_stackdepth integer_gt boolean_pop) integer_lte exec_shove (integer_pop exec_rot () (boolean_shove) (boolean_dup_items))))
Lexicase best errors: [1 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 120
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_lt exec_yankdup integer_div boolean_swap integer_gte boolean_or in4 in2 integer_dup in3 in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_noop exec_if () (integer_swap integer_swap boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_div exec_do*times (integer_yank integer_dup exec_do*while (integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (boolean_frominteger boolean_not integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) exec_swap (boolean_flush integer_dup_items in3 boolean_rot) (exec_when () boolean_yankdup)) (exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 boolean_or in4 integer_sub integer_gte boolean_stackdepth) (boolean_swap exec_pop (integer_stackdepth integer_gt boolean_pop) integer_lte exec_shove (integer_pop exec_rot () (boolean_shove) (boolean_dup_items))))
Zero cases best errors: [1 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 120
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (86 654 691 879 416 33 62 248 543 665)
Population mean number of elite cases: 4.28
Count of perfect (error zero) individuals by case: (86 654 691 879 416 33 62 248 543 665)
Population mean number of perfect (error zero) cases: 4.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items})
Best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_lt exec_yankdup integer_div boolean_swap integer_gte boolean_or in4 in2 integer_dup in3 in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_noop exec_if () (integer_swap integer_swap boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_div exec_do*times (integer_yank integer_dup exec_do*while (integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (boolean_frominteger boolean_not integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) exec_swap (boolean_flush integer_dup_items in3 boolean_rot) (exec_when () boolean_yankdup)) (exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 boolean_or in4 integer_sub integer_gte boolean_stackdepth) (boolean_swap exec_pop (integer_stackdepth integer_gt boolean_pop) integer_lte exec_shove (integer_pop exec_rot () (boolean_shove) (boolean_dup_items))))
Errors: [1 0 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 96
Size: 120
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 5.723
Median total errors in population: 5
Error averages by case: (0.914 0.346 0.309 0.121 0.584 0.967 0.938 0.752 0.457 0.335)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 96.63
Average program size in population (points): 119.629
Average percent parens in population: 0.192
Minimum age in population: 12.9375
Maximum age in population: 17.671875
Average age in population: 15.6239453125
Median age in population: 15.71875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 134
Genome diversity (% unique genomes):	 0.787
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 134
Syntactic diversity (% unique Push programs):	 0.785
Total error diversity:				 0.009
Error (vector) diversity:			 0.096
Behavioral diversity:				 0.339
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 11978676
--- Timings ---
Current time: 1559314351136 milliseconds
Total Time:          39.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.4 seconds, 51.6%
Fitness Testing:     12.5 seconds, 31.6%
Report:               6.5 seconds, 16.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 541
Test mean error for best: 0.54100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: 41                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -60                 | Program output: -60                
Correct output: 45                  | Program output: 65                 
Correct output: -51                 | Program output: -51                
Correct output: 26                  | Program output: 26                 
Correct output: -26                 | Program output: -26                
Correct output: -91                 | Program output: 41                 
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -2                  | Program output: -2                 
Correct output: 17                  | Program output: 17                 
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: 37                  | Program output: 37                 
Correct output: 13                  | Program output: 1313               
Correct output: 65                  | Program output: 65                 
Correct output: 5                   | Program output: 37                 
Correct output: 1                   | Program output: 7                  
Correct output: 30                  | Program output: 30                 
Correct output: 1                   | Program output: 1                  
Correct output: 22                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 78                 
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 47                 
Correct output: 42                  | Program output: 42                 
Correct output: 3                   | Program output: 50                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 59                  | Program output: 64                 
Correct output: 7                   | Program output: 43                 
Correct output: 40                  | Program output: 93                 
Correct output: 20                  | Program output: 34                 
Correct output: 26                  | Program output: 57                 
Correct output: -43                 | Program output: 3                  
Correct output: -30                 | Program output: -15                
Correct output: -93                 | Program output: -41                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: 41                 
Correct output: -43                 | Program output: -43                
Correct output: -91                 | Program output: -61                
Correct output: -53                 | Program output: -53                
Correct output: -27                 | Program output: 41                 
Correct output: -76                 | Program output: -76                
Correct output: -70                 | Program output: 41                 
Correct output: -98                 | Program output: -98                
Correct output: -88                 | Program output: -68                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -50                
Correct output: -67                 | Program output: 34                 
Correct output: -89                 | Program output: -62                
Correct output: -9                  | Program output: -9                 
Correct output: -67                 | Program output: -67                
Correct output: -82                 | Program output: -82                
Correct output: -86                 | Program output: 66                 
Correct output: -76                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -80                
Correct output: -28                 | Program output: -20                
Correct output: -46                 | Program output: -46                
Correct output: -87                 | Program output: -46                
Correct output: -76                 | Program output: -76                
Correct output: -34                 | Program output: -34                
Correct output: -70                 | Program output: -43                
Correct output: -2                  | Program output: 38                 
Correct output: -76                 | Program output: 53                 
Correct output: 2                   | Program output: 2                  
Correct output: -97                 | Program output: -97                
Correct output: -57                 | Program output: -57                
Correct output: 8                   | Program output: 65                 
Correct output: -69                 | Program output: 73                 
Correct output: -19                 | Program output: -7                 
Correct output: -40                 | Program output: 41                 
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: 25                 
Correct output: -32                 | Program output: -4                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -34                
Correct output: -100                | Program output: -81                
Correct output: -18                 | Program output: 10                 
Correct output: -77                 | Program output: -77                
Correct output: -90                 | Program output: -90                
Correct output: 45                  | Program output: 81                 
Correct output: -43                 | Program output: -14                
Correct output: -57                 | Program output: -57                
Correct output: -44                 | Program output: -44                
Correct output: -93                 | Program output: -14                
Correct output: -64                 | Program output: 18                 
Correct output: -59                 | Program output: -11                
Correct output: -92                 | Program output: -92                
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: 41                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and boolean_rot exec_yankdup integer_div boolean_swap integer_gte boolean_or boolean_empty in2 integer_dup in3 in4 in2 integer_empty in3 exec_s_when_autoconstructing (boolean_empty integer_shove boolean_empty exec_noop exec_if () (exec_noop boolean_stackdepth boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_div exec_do*times (integer_yank integer_dup boolean_not tagged_218 exec_swap (integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) tagged_218 exec_swap (integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) (exec_k (boolean_not) () boolean_not integer_eq) (integer_min integer_eq in2) exec_swap (boolean_flush integer_dup_items boolean_flush integer_dup_items in3 boolean_rot) (exec_when () exec_yankdup) exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 boolean_or in4 integer_sub integer_stackdepth boolean_stackdepth boolean_swap exec_pop (integer_stackdepth integer_gt boolean_pop) integer_lte exec_shove (integer_pop exec_rot () (boolean_shove) (boolean_dup_items)))
Lexicase best errors: [0 0 0 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 129
Percent parens: 0.178
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and boolean_rot exec_yankdup integer_div boolean_swap integer_gte boolean_or boolean_empty in2 integer_dup in3 in4 in2 integer_empty in3 exec_s_when_autoconstructing (boolean_empty integer_shove boolean_empty exec_noop exec_if () (exec_noop boolean_stackdepth boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_div exec_do*times (integer_yank integer_dup boolean_not tagged_218 exec_swap (integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) tagged_218 exec_swap (integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) (exec_k (boolean_not) () boolean_not integer_eq) (integer_min integer_eq in2) exec_swap (boolean_flush integer_dup_items boolean_flush integer_dup_items in3 boolean_rot) (exec_when () exec_yankdup) exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 boolean_or in4 integer_sub integer_stackdepth boolean_stackdepth boolean_swap exec_pop (integer_stackdepth integer_gt boolean_pop) integer_lte exec_shove (integer_pop exec_rot () (boolean_shove) (boolean_dup_items)))
Zero cases best errors: [0 0 0 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 129
Percent parens: 0.178
--- Lexicase Population Statistics ---
Count of elite individuals by case: (411 75 374 39 356 417 65 823 331 430)
Population mean number of elite cases: 3.32
Count of perfect (error zero) individuals by case: (411 75 374 39 356 417 65 823 331 430)
Population mean number of perfect (error zero) cases: 3.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items})
Best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and boolean_rot exec_yankdup integer_div boolean_swap integer_gte boolean_or boolean_empty in2 integer_dup in3 in4 in2 integer_empty in3 exec_s_when_autoconstructing (boolean_empty integer_shove boolean_empty exec_noop exec_if () (exec_noop boolean_stackdepth boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_div exec_do*times (integer_yank integer_dup boolean_not tagged_218 exec_swap (integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) tagged_218 exec_swap (integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) (exec_k (boolean_not) () boolean_not integer_eq) (integer_min integer_eq in2) exec_swap (boolean_flush integer_dup_items boolean_flush integer_dup_items in3 boolean_rot) (exec_when () exec_yankdup) exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 boolean_or in4 integer_sub integer_stackdepth boolean_stackdepth boolean_swap exec_pop (integer_stackdepth integer_gt boolean_pop) integer_lte exec_shove (integer_pop exec_rot () (boolean_shove) (boolean_dup_items)))
Errors: [0 0 0 0 0 0 0 0 1 1]
Total: 2
Mean: 0.2
Genome size: 106
Size: 129
Percent parens: 0.178
--- Population Statistics ---
Average total errors in population: 6.679
Median total errors in population: 7
Error averages by case: (0.589 0.925 0.626 0.961 0.644 0.583 0.935 0.177 0.669 0.57)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 95.853
Average program size in population (points): 117.466
Average percent parens in population: 0.183
Minimum age in population: 14.890625
Maximum age in population: 19.2734375
Average age in population: 17.31200390625
Median age in population: 17.27734375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 95
Genome diversity (% unique genomes):	 0.781
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.777
Total error diversity:				 0.009
Error (vector) diversity:			 0.08
Behavioral diversity:				 0.372
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 13233114
--- Timings ---
Current time: 1559314355000 milliseconds
Total Time:          43.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        22.3 seconds, 51.5%
Fitness Testing:     13.6 seconds, 31.4%
Report:               7.3 seconds, 16.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 452
Test mean error for best: 0.45200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -60                 | Program output: -60                
Correct output: 45                  | Program output: 65                 
Correct output: -51                 | Program output: -51                
Correct output: 26                  | Program output: 26                 
Correct output: -26                 | Program output: -26                
Correct output: -91                 | Program output: -91                
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -2                  | Program output: -2                 
Correct output: 17                  | Program output: 17                 
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: 37                  | Program output: 37                 
Correct output: 13                  | Program output: 13                 
Correct output: 65                  | Program output: 65                 
Correct output: 5                   | Program output: 37                 
Correct output: 1                   | Program output: 7                  
Correct output: 30                  | Program output: 55                 
Correct output: 1                   | Program output: 35                 
Correct output: 22                  | Program output: 94                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 73                 
Correct output: 6                   | Program output: 47                 
Correct output: 42                  | Program output: 97                 
Correct output: 3                   | Program output: 98                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 99                 
Correct output: 59                  | Program output: 64                 
Correct output: 7                   | Program output: 43                 
Correct output: 40                  | Program output: 62                 
Correct output: 20                  | Program output: 73                 
Correct output: 26                  | Program output: 36                 
Correct output: -43                 | Program output: -43                
Correct output: -30                 | Program output: -15                
Correct output: -93                 | Program output: -93                
Correct output: -82                 | Program output: -59                
Correct output: -100                | Program output: -35                
Correct output: -43                 | Program output: -3                 
Correct output: -91                 | Program output: -91                
Correct output: -53                 | Program output: -53                
Correct output: -27                 | Program output: -27                
Correct output: -76                 | Program output: -61                
Correct output: -70                 | Program output: -70                
Correct output: -98                 | Program output: -98                
Correct output: -88                 | Program output: -88                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -50                
Correct output: -67                 | Program output: -67                
Correct output: -89                 | Program output: -62                
Correct output: -9                  | Program output: -1                 
Correct output: -67                 | Program output: -67                
Correct output: -82                 | Program output: -82                
Correct output: -86                 | Program output: -86                
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: -7                 
Correct output: -85                 | Program output: -85                
Correct output: -28                 | Program output: -20                
Correct output: -46                 | Program output: -46                
Correct output: -87                 | Program output: -46                
Correct output: -76                 | Program output: -63                
Correct output: -34                 | Program output: -34                
Correct output: -70                 | Program output: -70                
Correct output: -2                  | Program output: -2                 
Correct output: -76                 | Program output: -76                
Correct output: 2                   | Program output: 43                 
Correct output: -97                 | Program output: -54                
Correct output: -57                 | Program output: -57                
Correct output: 8                   | Program output: 65                 
Correct output: -69                 | Program output: -69                
Correct output: -19                 | Program output: -19                
Correct output: -40                 | Program output: -40                
Correct output: -24                 | Program output: -18                
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: 5                  
Correct output: -32                 | Program output: -4                 
Correct output: -100                | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -97                
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -77                
Correct output: -90                 | Program output: -90                
Correct output: 45                  | Program output: 65                 
Correct output: -43                 | Program output: -43                
Correct output: -57                 | Program output: -21                
Correct output: -44                 | Program output: -27                
Correct output: -93                 | Program output: -93                
Correct output: -64                 | Program output: -64                
Correct output: -59                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: -72                 | Program output: -21                
Correct output: -94                 | Program output: -35                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction tagged_505} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and boolean_rot exec_yankdup integer_div boolean_swap integer_gte boolean_or in4 in2 integer_dup in3 in4 boolean_empty integer_shove boolean_empty exec_noop exec_if (integer_swap boolean_stackdepth boolean_frominteger integer_lte boolean_and integer_lt) (exec_do*while (boolean_swap in1 boolean_not integer_dup exec_do*times (integer_yank integer_dup boolean_not integer_dup boolean_yankdup exec_pop (integer_yankdup) tagged_218 exec_swap (integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank integer_shove boolean_invert_second_then_and) tagged_218 exec_swap (integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty exec_when () boolean_yankdup)) tagged_505 boolean_shove in4 integer_mod integer_yankdup tagged_225 boolean_or in4 integer_sub integer_stackdepth boolean_stackdepth boolean_swap exec_pop (exec_while (integer_gt boolean_dup_times) integer_lte exec_shove (integer_pop exec_rot () (boolean_shove) (boolean_dup_items))))
Lexicase best errors: [0 0 0 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 107
Percent parens: 0.159
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction tagged_505} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and boolean_rot exec_yankdup integer_div boolean_swap integer_gte boolean_or in4 in2 integer_dup in3 in4 boolean_empty integer_shove boolean_empty exec_noop exec_if (integer_swap boolean_stackdepth boolean_frominteger integer_lte boolean_and integer_lt) (exec_do*while (boolean_swap in1 boolean_not integer_dup exec_do*times (integer_yank integer_dup boolean_not integer_dup boolean_yankdup exec_pop (integer_yankdup) tagged_218 exec_swap (integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank integer_shove boolean_invert_second_then_and) tagged_218 exec_swap (integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty exec_when () boolean_yankdup)) tagged_505 boolean_shove in4 integer_mod integer_yankdup tagged_225 boolean_or in4 integer_sub integer_stackdepth boolean_stackdepth boolean_swap exec_pop (exec_while (integer_gt boolean_dup_times) integer_lte exec_shove (integer_pop exec_rot () (boolean_shove) (boolean_dup_items))))
Zero cases best errors: [0 0 0 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 107
Percent parens: 0.159
--- Lexicase Population Statistics ---
Count of elite individuals by case: (437 297 297 509 320 81 581 311 429 409)
Population mean number of elite cases: 3.67
Count of perfect (error zero) individuals by case: (437 297 297 509 320 81 581 311 429 409)
Population mean number of perfect (error zero) cases: 3.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction tagged_505} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items})
Best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and boolean_rot exec_yankdup integer_div boolean_swap integer_gte boolean_or in4 in2 integer_dup in3 in4 boolean_empty integer_shove boolean_empty exec_noop exec_if (integer_swap boolean_stackdepth boolean_frominteger integer_lte boolean_and integer_lt) (exec_do*while (boolean_swap in1 boolean_not integer_dup exec_do*times (integer_yank integer_dup boolean_not integer_dup boolean_yankdup exec_pop (integer_yankdup) tagged_218 exec_swap (integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank integer_shove boolean_invert_second_then_and) tagged_218 exec_swap (integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty exec_when () boolean_yankdup)) tagged_505 boolean_shove in4 integer_mod integer_yankdup tagged_225 boolean_or in4 integer_sub integer_stackdepth boolean_stackdepth boolean_swap exec_pop (exec_while (integer_gt boolean_dup_times) integer_lte exec_shove (integer_pop exec_rot () (boolean_shove) (boolean_dup_items))))
Errors: [0 0 0 0 0 1 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 90
Size: 107
Percent parens: 0.159
--- Population Statistics ---
Average total errors in population: 6.329
Median total errors in population: 7
Error averages by case: (0.563 0.703 0.703 0.491 0.68 0.919 0.419 0.689 0.571 0.591)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 99.88
Average program size in population (points): 123.13
Average percent parens in population: 0.189
Minimum age in population: 16.984375
Maximum age in population: 20.7578125
Average age in population: 18.97173046875
Median age in population: 19.0546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 79
Genome diversity (% unique genomes):	 0.784
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 81
Syntactic diversity (% unique Push programs):	 0.779
Total error diversity:				 0.009
Error (vector) diversity:			 0.093
Behavioral diversity:				 0.401
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 14462291
--- Timings ---
Current time: 1559314358930 milliseconds
Total Time:          47.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.3 seconds, 51.5%
Fitness Testing:     14.7 seconds, 31.2%
Report:               8.0 seconds, 17.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 369
Test mean error for best: 0.36900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13-44-44-44       
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -60                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: -51                 | Program output: -51                
Correct output: 26                  | Program output: 26                 
Correct output: -26                 | Program output: -26-26-26-26       
Correct output: -91                 | Program output: -91                
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -2                  | Program output: -2                 
Correct output: 17                  | Program output: 17                 
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: 37                  | Program output: 37                 
Correct output: 13                  | Program output: 13                 
Correct output: 65                  | Program output: 66                 
Correct output: 5                   | Program output: 16                 
Correct output: 1                   | Program output: 38                 
Correct output: 30                  | Program output: 53                 
Correct output: 1                   | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: 0                   | Program output: 6062               
Correct output: 1                   | Program output: 39                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 44                 
Correct output: 6                   | Program output: 6                  
Correct output: 42                  | Program output: 51                 
Correct output: 3                   | Program output: 3                  
Correct output: 0                   | Program output: 73                 
Correct output: 2                   | Program output: 25                 
Correct output: 59                  | Program output: 59                 
Correct output: 7                   | Program output: 7                  
Correct output: 40                  | Program output: 40                 
Correct output: 20                  | Program output: 20                 
Correct output: 26                  | Program output: 26                 
Correct output: -43                 | Program output: 7                  
Correct output: -30                 | Program output: -30                
Correct output: -93                 | Program output: -93                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -96-100-100-100    
Correct output: -43                 | Program output: -43                
Correct output: -91                 | Program output: -61                
Correct output: -53                 | Program output: -53                
Correct output: -27                 | Program output: -27                
Correct output: -76                 | Program output: -76                
Correct output: -70                 | Program output: -70-61             
Correct output: -98                 | Program output: -94                
Correct output: -88                 | Program output: -88                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -67                
Correct output: -89                 | Program output: -89                
Correct output: -9                  | Program output: -9                 
Correct output: -67                 | Program output: -67                
Correct output: -82                 | Program output: -82                
Correct output: -86                 | Program output: -86                
Correct output: -76                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -80                
Correct output: -28                 | Program output: 25                 
Correct output: -46                 | Program output: -46                
Correct output: -87                 | Program output: 25                 
Correct output: -76                 | Program output: -63                
Correct output: -34                 | Program output: -34                
Correct output: -70                 | Program output: -43                
Correct output: -2                  | Program output: -2                 
Correct output: -76                 | Program output: -76                
Correct output: 2                   | Program output: 43                 
Correct output: -97                 | Program output: -97                
Correct output: -57                 | Program output: -576               
Correct output: 8                   | Program output: 8                  
Correct output: -69                 | Program output: 59                 
Correct output: -19                 | Program output: -19                
Correct output: -40                 | Program output: -40-31-31          
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -4                 
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: -58                
Correct output: -32                 | Program output: 25                 
Correct output: -100                | Program output: -100               
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -18                 | Program output: -18                
Correct output: -77                 | Program output: -77                
Correct output: -90                 | Program output: -90                
Correct output: 45                  | Program output: 45                 
Correct output: -43                 | Program output: -43                
Correct output: -57                 | Program output: -57                
Correct output: -44                 | Program output: -44                
Correct output: -93                 | Program output: -93                
Correct output: -64                 | Program output: -4                 
Correct output: -59                 | Program output: -11                
Correct output: -92                 | Program output: -9253              
Correct output: -72                 | Program output: -21                
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and boolean_rot exec_yankdup integer_div boolean_swap integer_gte boolean_or in4 in2 in2 integer_dup in3 in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_noop exec_if () (integer_swap integer_swap boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_div exec_do*times (integer_yank integer_dup exec_do*while (integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (boolean_frominteger boolean_not integer_shove tag_boolean_58 print_integer) () integer_lt integer_fromboolean in2 integer_yank integer_dec boolean_empty boolean_yank boolean_empty integer_lt integer_yank in2 integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) (exec_swap (boolean_flush integer_dup_items in3 boolean_rot) (exec_when () boolean_yankdup)) (exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 boolean_or boolean_empty integer_sub integer_gte boolean_stackdepth) boolean_swap exec_pop (integer_stackdepth integer_gt boolean_pop) integer_lte exec_shove (integer_pop exec_rot () (boolean_shove) (boolean_dup_items)))
Lexicase best errors: [0 0 0 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 139
Percent parens: 0.187
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and boolean_rot exec_yankdup integer_div boolean_swap integer_gte boolean_or in4 in2 in2 integer_dup in3 in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_noop exec_if () (integer_swap integer_swap boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_div exec_do*times (integer_yank integer_dup exec_do*while (integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (boolean_frominteger boolean_not integer_shove tag_boolean_58 print_integer) () integer_lt integer_fromboolean in2 integer_yank integer_dec boolean_empty boolean_yank boolean_empty integer_lt integer_yank in2 integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) (exec_swap (boolean_flush integer_dup_items in3 boolean_rot) (exec_when () boolean_yankdup)) (exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 boolean_or boolean_empty integer_sub integer_gte boolean_stackdepth) boolean_swap exec_pop (integer_stackdepth integer_gt boolean_pop) integer_lte exec_shove (integer_pop exec_rot () (boolean_shove) (boolean_dup_items)))
Zero cases best errors: [0 0 0 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 139
Percent parens: 0.187
--- Lexicase Population Statistics ---
Count of elite individuals by case: (175 792 531 39 334 534 218 86 683 832)
Population mean number of elite cases: 4.22
Count of perfect (error zero) individuals by case: (175 792 531 39 334 534 218 86 683 832)
Population mean number of perfect (error zero) cases: 4.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction in3} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items})
Best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and boolean_rot integer_dup in3 boolean_rot exec_yankdup integer_div boolean_swap integer_gte boolean_or in4 in2 in2 integer_dup in3 in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_noop exec_if () (integer_swap integer_swap boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_div exec_do*times (integer_yank integer_dup exec_do*while (integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (boolean_frominteger boolean_not integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank in2 integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) exec_swap (boolean_flush integer_dup_items in3 boolean_rot) (exec_when () boolean_yankdup)) (exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 in3 boolean_empty integer_sub integer_gte boolean_stackdepth) (boolean_swap exec_pop (integer_stackdepth integer_gt boolean_pop) integer_lte exec_shove (integer_pop exec_rot () (boolean_shove) (boolean_dup_items))))
Errors: [0 0 0 1 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 100
Size: 124
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 5.776
Median total errors in population: 5
Error averages by case: (0.825 0.208 0.469 0.961 0.666 0.466 0.782 0.914 0.317 0.168)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 98.547
Average program size in population (points): 121.381
Average percent parens in population: 0.187
Minimum age in population: 19.734375
Maximum age in population: 22.28125
Average age in population: 20.860208984375
Median age in population: 20.95703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 43
Genome diversity (% unique genomes):	 0.79
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.786
Total error diversity:				 0.009
Error (vector) diversity:			 0.111
Behavioral diversity:				 0.367
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 15865843
--- Timings ---
Current time: 1559314363033 milliseconds
Total Time:          51.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.3 seconds, 51.3%
Fitness Testing:     16.0 seconds, 31.2%
Report:               8.9 seconds, 17.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 439
Test mean error for best: 0.43900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -60                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: -51                 | Program output: -51                
Correct output: 26                  | Program output: 26                 
Correct output: -26                 | Program output:                    
Correct output: -91                 | Program output: -91                
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -2                  | Program output: -2                 
Correct output: 17                  | Program output: 17                 
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: 37                  | Program output: 37                 
Correct output: 13                  | Program output: 13                 
Correct output: 65                  | Program output: 66                 
Correct output: 5                   | Program output: 16                 
Correct output: 1                   | Program output: 38                 
Correct output: 30                  | Program output: 30                 
Correct output: 1                   | Program output: 2                  
Correct output: 22                  | Program output: 23                 
Correct output: 0                   | Program output: 60                 
Correct output: 1                   | Program output: 39                 
Correct output: 15                  | Program output: 15                 
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 3                   | Program output:                    
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 59                  | Program output: 59                 
Correct output: 7                   | Program output: 5743               
Correct output: 40                  | Program output: 57                 
Correct output: 20                  | Program output: 34                 
Correct output: 26                  | Program output: 57                 
Correct output: -43                 | Program output: 7                  
Correct output: -30                 | Program output: -15                
Correct output: -93                 | Program output: -93                
Correct output: -82                 | Program output: -59                
Correct output: -100                | Program output: -96                
Correct output: -43                 | Program output: -43                
Correct output: -91                 | Program output: -61                
Correct output: -53                 | Program output: -53                
Correct output: -27                 | Program output: -25                
Correct output: -76                 | Program output: -76                
Correct output: -70                 | Program output: -70                
Correct output: -98                 | Program output: -98                
Correct output: -88                 | Program output: -88                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: 57                 
Correct output: -67                 | Program output: -67                
Correct output: -89                 | Program output: 57                 
Correct output: -9                  | Program output: -9                 
Correct output: -67                 | Program output: -67                
Correct output: -82                 | Program output: -82                
Correct output: -86                 | Program output: 66                 
Correct output: -76                 | Program output: -60                
Correct output: -98                 | Program output: -98                
Correct output: -85                 | Program output: -80                
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -46                
Correct output: -87                 | Program output: -87                
Correct output: -76                 | Program output: -76                
Correct output: -34                 | Program output: -34                
Correct output: -70                 | Program output: -43                
Correct output: -2                  | Program output: -2                 
Correct output: -76                 | Program output: -76                
Correct output: 2                   | Program output: 2                  
Correct output: -97                 | Program output: -54                
Correct output: -57                 | Program output: -57-57             
Correct output: 8                   | Program output: 8                  
Correct output: -69                 | Program output: 59                 
Correct output: -19                 | Program output: -19                
Correct output: -40                 | Program output: -40                
Correct output: -24                 | Program output: -18                
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: -87                
Correct output: -58                 | Program output: -58                
Correct output: -32                 | Program output: -32                
Correct output: -100                | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -97                
Correct output: -18                 | Program output: 10                 
Correct output: -77                 | Program output: -53                
Correct output: -90                 | Program output: -90                
Correct output: 45                  | Program output: 81                 
Correct output: -43                 | Program output: -43                
Correct output: -57                 | Program output: -57                
Correct output: -44                 | Program output: -44                
Correct output: -93                 | Program output: -93                
Correct output: -64                 | Program output: -4                 
Correct output: -59                 | Program output: -11                
Correct output: -92                 | Program output: -9257              
Correct output: -72                 | Program output: -72                
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_eq exec_yankdup integer_div boolean_swap integer_gte boolean_or in4 in2 in2 integer_dup in3 in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_noop exec_if () (integer_swap integer_swap boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_div exec_do*times (integer_yank integer_dup exec_do*while (integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) (tagged_218 exec_swap (integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) exec_swap (boolean_flush integer_dup_items boolean_flush integer_dup_items in3 boolean_rot) (in3) exec_yankdup)) (exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 boolean_or in4 integer_sub integer_stackdepth boolean_stackdepth) (boolean_swap exec_pop (integer_stackdepth integer_gt boolean_pop) integer_lte exec_shove (integer_pop exec_rot () (boolean_shove) (boolean_dup_items))))
Lexicase best errors: [0 0 0 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 133
Percent parens: 0.188
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_eq exec_yankdup integer_div boolean_swap integer_gte boolean_or in4 in2 in2 integer_dup in3 in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_noop exec_if () (integer_swap integer_swap boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_div exec_do*times (integer_yank integer_dup exec_do*while (integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) (tagged_218 exec_swap (integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) exec_swap (boolean_flush integer_dup_items boolean_flush integer_dup_items in3 boolean_rot) (in3) exec_yankdup)) (exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 boolean_or in4 integer_sub integer_stackdepth boolean_stackdepth) (boolean_swap exec_pop (integer_stackdepth integer_gt boolean_pop) integer_lte exec_shove (integer_pop exec_rot () (boolean_shove) (boolean_dup_items))))
Zero cases best errors: [0 0 0 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 133
Percent parens: 0.188
--- Lexicase Population Statistics ---
Count of elite individuals by case: (481 649 308 651 815 73 601 345 92 454)
Population mean number of elite cases: 4.47
Count of perfect (error zero) individuals by case: (481 649 308 651 815 73 601 345 92 454)
Population mean number of perfect (error zero) cases: 4.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_when} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_rot} {:close 1, :instruction boolean_shove} {:close 0, :instruction boolean_dup_items})
Best program: (exec_stackdepth integer_mod integer_div boolean_swap integer_gte boolean_or in4 in2 in2 integer_dup in3 in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_noop exec_if () (integer_swap integer_swap boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_div exec_do*times (integer_yank integer_dup in3) boolean_not integer_div exec_do*times (integer_yank integer_dup boolean_not tagged_218 exec_swap (integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt boolean_flush integer_dec boolean_empty boolean_yank boolean_empty integer_dec boolean_invert_first_then_and boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () boolean_not integer_eq) (boolean_invert_second_then_and) (exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2 exec_swap (boolean_flush integer_dup_items in3 boolean_rot) (boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () boolean_not integer_eq integer_min integer_eq in2 boolean_empty boolean_flush integer_dup_items in3 boolean_rot exec_when () boolean_yankdup exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 boolean_or boolean_empty integer_sub integer_gte boolean_stackdepth boolean_swap exec_pop (integer_stackdepth integer_gt boolean_pop) integer_lte exec_shove (integer_pop exec_rot () (boolean_shove) (boolean_dup_items)))
Errors: [0 0 0 0 0 1 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 117
Size: 143
Percent parens: 0.182
--- Population Statistics ---
Average total errors in population: 5.531
Median total errors in population: 5
Error averages by case: (0.519 0.351 0.692 0.349 0.185 0.927 0.399 0.655 0.908 0.546)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 100.385
Average program size in population (points): 124.32
Average percent parens in population: 0.192
Minimum age in population: 20.935546875
Maximum age in population: 23.9296875
Average age in population: 22.26217578125
Median age in population: 22.35546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 35
Genome diversity (% unique genomes):	 0.787
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.782
Total error diversity:				 0.009
Error (vector) diversity:			 0.103
Behavioral diversity:				 0.454
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 17091519
--- Timings ---
Current time: 1559314366984 milliseconds
Total Time:          55.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.3 seconds, 51.3%
Fitness Testing:     17.1 seconds, 31.0%
Report:               9.7 seconds, 17.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 436
Test mean error for best: 0.43600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -60                 | Program output: -60                
Correct output: 45                  | Program output: 65                 
Correct output: -51                 | Program output: -51                
Correct output: 26                  | Program output: 26                 
Correct output: -26                 | Program output: -26                
Correct output: -91                 | Program output: -91                
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -2                  | Program output: -2                 
Correct output: 17                  | Program output: 17                 
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: 37                  | Program output: 37                 
Correct output: 13                  | Program output: 13                 
Correct output: 65                  | Program output: 65                 
Correct output: 5                   | Program output: 37                 
Correct output: 1                   | Program output: 7                  
Correct output: 30                  | Program output: 30                 
Correct output: 1                   | Program output: 11                 
Correct output: 22                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 78                 
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 47                 
Correct output: 42                  | Program output: 42                 
Correct output: 3                   | Program output: 50                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 59                  | Program output: 64                 
Correct output: 7                   | Program output: 43                 
Correct output: 40                  | Program output: 93                 
Correct output: 20                  | Program output: 34                 
Correct output: 26                  | Program output: 57                 
Correct output: -43                 | Program output: 3                  
Correct output: -30                 | Program output: -15                
Correct output: -93                 | Program output: -93                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -13                
Correct output: -91                 | Program output: -87                
Correct output: -53                 | Program output: -53                
Correct output: -27                 | Program output: -27                
Correct output: -76                 | Program output: -28                
Correct output: -70                 | Program output: -70                
Correct output: -98                 | Program output: -98                
Correct output: -88                 | Program output: -88                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -97                
Correct output: -67                 | Program output: -67                
Correct output: -89                 | Program output: -12                
Correct output: -9                  | Program output: -1                 
Correct output: -67                 | Program output: -67                
Correct output: -82                 | Program output: -82                
Correct output: -86                 | Program output: 66                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: -82                
Correct output: -85                 | Program output: -50                
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -46                
Correct output: -87                 | Program output: -87                
Correct output: -76                 | Program output: -63                
Correct output: -34                 | Program output: -34                
Correct output: -70                 | Program output: -65                
Correct output: -2                  | Program output: -2                 
Correct output: -76                 | Program output: -76                
Correct output: 2                   | Program output: 2                  
Correct output: -97                 | Program output: -97                
Correct output: -57                 | Program output: -57                
Correct output: 8                   | Program output: 65                 
Correct output: -69                 | Program output: 73                 
Correct output: -19                 | Program output: -19                
Correct output: -40                 | Program output: -40                
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: 4                  
Correct output: -32                 | Program output: -32                
Correct output: -100                | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -18                 | Program output: 10                 
Correct output: -77                 | Program output: -77                
Correct output: -90                 | Program output: -90                
Correct output: 45                  | Program output: 81                 
Correct output: -43                 | Program output: -43                
Correct output: -57                 | Program output: -9                 
Correct output: -44                 | Program output: -23                
Correct output: -93                 | Program output: -93                
Correct output: -64                 | Program output: -4                 
Correct output: -59                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: -72                 | Program output: -21                
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_321} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_eq exec_yankdup integer_div boolean_swap integer_gte boolean_or boolean_or in4 in2 in2 integer_dup in3 integer_dec in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_noop boolean_or in4 in2 in2 boolean_invert_first_then_and in3 in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_noop exec_if () (integer_swap integer_swap boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_div exec_do*times (integer_yank integer_dup exec_do*while (integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) (tagged_321 exec_swap (integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) exec_swap (boolean_flush integer_dup_items boolean_flush integer_dup_items in3 boolean_rot) (in3) exec_yankdup)) (exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 integer_mult in4 integer_sub integer_stackdepth) ()) () ())
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 135
Percent parens: 0.170
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_321} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_eq exec_yankdup integer_div boolean_swap integer_gte boolean_or boolean_or in4 in2 in2 integer_dup in3 integer_dec in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_noop boolean_or in4 in2 in2 boolean_invert_first_then_and in3 in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_noop exec_if () (integer_swap integer_swap boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_div exec_do*times (integer_yank integer_dup exec_do*while (integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) (tagged_321 exec_swap (integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) exec_swap (boolean_flush integer_dup_items boolean_flush integer_dup_items in3 boolean_rot) (in3) exec_yankdup)) (exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 integer_mult in4 integer_sub integer_stackdepth) ()) () ())
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 135
Percent parens: 0.170
--- Lexicase Population Statistics ---
Count of elite individuals by case: (254 758 396 603 262 34 599 312 482 40)
Population mean number of elite cases: 3.74
Count of perfect (error zero) individuals by case: (254 758 396 603 262 34 599 312 482 40)
Population mean number of perfect (error zero) cases: 3.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_321} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth})
Best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_eq exec_yankdup integer_div boolean_swap integer_gte boolean_or boolean_or in4 in2 in2 integer_dup in3 integer_dec in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_noop boolean_or in4 in2 in2 boolean_invert_first_then_and in3 in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_noop exec_if () (integer_swap integer_swap boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_div exec_do*times (integer_yank integer_dup exec_do*while (integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) (tagged_321 exec_swap (integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) exec_swap (boolean_flush integer_dup_items boolean_flush integer_dup_items in3 boolean_rot) (in3) exec_yankdup)) (exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 integer_mult in4 integer_sub integer_stackdepth) ()) () ())
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 112
Size: 135
Percent parens: 0.170
--- Population Statistics ---
Average total errors in population: 6.26
Median total errors in population: 6
Error averages by case: (0.746 0.242 0.604 0.397 0.738 0.966 0.401 0.688 0.518 0.96)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 100.181
Average program size in population (points): 123.378
Average percent parens in population: 0.187
Minimum age in population: 22.41796875
Maximum age in population: 25.46728515625
Average age in population: 23.87775244140625
Median age in population: 23.924560546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 83
Genome diversity (% unique genomes):	 0.832
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 83
Syntactic diversity (% unique Push programs):	 0.828
Total error diversity:				 0.01
Error (vector) diversity:			 0.091
Behavioral diversity:				 0.492
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 18370384
--- Timings ---
Current time: 1559314371038 milliseconds
Total Time:          59.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.4 seconds, 51.2%
Fitness Testing:     18.3 seconds, 30.9%
Report:              10.5 seconds, 17.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 435
Test mean error for best: 0.43500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -60                 | Program output: -60                
Correct output: 45                  | Program output: 65                 
Correct output: -51                 | Program output: -51                
Correct output: 26                  | Program output: 26                 
Correct output: -26                 | Program output: -26                
Correct output: -91                 | Program output: -91                
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -2                  | Program output: -2                 
Correct output: 17                  | Program output: 17                 
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: 37                  | Program output: 37                 
Correct output: 13                  | Program output: 13                 
Correct output: 65                  | Program output: 65                 
Correct output: 5                   | Program output: 37                 
Correct output: 1                   | Program output: 7                  
Correct output: 30                  | Program output: 30                 
Correct output: 1                   | Program output: 11                 
Correct output: 22                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: 15                  | Program output: 78                 
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 47                 
Correct output: 42                  | Program output: 42                 
Correct output: 3                   | Program output: 50                 
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 59                  | Program output: 64                 
Correct output: 7                   | Program output: 43                 
Correct output: 40                  | Program output: 93                 
Correct output: 20                  | Program output: 34                 
Correct output: 26                  | Program output: 57                 
Correct output: -43                 | Program output: 3                  
Correct output: -30                 | Program output: -15                
Correct output: -93                 | Program output: -93                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -100               
Correct output: -43                 | Program output: -13                
Correct output: -91                 | Program output: -87                
Correct output: -53                 | Program output: -53                
Correct output: -27                 | Program output: -27                
Correct output: -76                 | Program output: -28                
Correct output: -70                 | Program output: -70                
Correct output: -98                 | Program output: -98                
Correct output: -88                 | Program output: -88                
Correct output: -59                 | Program output: -59                
Correct output: -100                | Program output: -97                
Correct output: -67                 | Program output: -67                
Correct output: -89                 | Program output: -12                
Correct output: -9                  | Program output: -1                 
Correct output: -67                 | Program output: -67                
Correct output: -82                 | Program output: -82                
Correct output: -86                 | Program output: 66                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: -82                
Correct output: -85                 | Program output: -50                
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -46                
Correct output: -87                 | Program output: -87                
Correct output: -76                 | Program output: -63                
Correct output: -34                 | Program output: -34                
Correct output: -70                 | Program output: -65                
Correct output: -2                  | Program output: -2                 
Correct output: -76                 | Program output: -76                
Correct output: 2                   | Program output: 2                  
Correct output: -97                 | Program output: -97                
Correct output: -57                 | Program output: -57                
Correct output: 8                   | Program output: 65                 
Correct output: -69                 | Program output: 73                 
Correct output: -19                 | Program output: -19                
Correct output: -40                 | Program output: -40                
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: 4                  
Correct output: -32                 | Program output: -32                
Correct output: -100                | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -18                 | Program output: 10                 
Correct output: -77                 | Program output: -77                
Correct output: -90                 | Program output: -90                
Correct output: 45                  | Program output: 81                 
Correct output: -43                 | Program output: -43                
Correct output: -57                 | Program output: -9                 
Correct output: -44                 | Program output: -23                
Correct output: -93                 | Program output: -93                
Correct output: -64                 | Program output: -4                 
Correct output: -59                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: -72                 | Program output: -21                
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_321} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_eq exec_yankdup integer_div boolean_swap integer_gte boolean_or boolean_or in4 in2 exec_shove (integer_dup in3 integer_dec in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_noop boolean_or in4 in2 in2 boolean_invert_first_then_and in3 in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_noop exec_if () (integer_swap integer_swap boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_div exec_do*times (integer_yank integer_dup exec_do*while (integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) (tagged_321 exec_swap (integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) exec_swap (boolean_flush integer_dup_items boolean_flush integer_dup_items in3 boolean_rot) (in3) exec_yankdup)) (exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 integer_mult in4 integer_sub integer_stackdepth) ()) () ()))
Lexicase best errors: [0 0 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 136
Percent parens: 0.176
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_321} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_eq exec_yankdup integer_div boolean_swap integer_gte boolean_or boolean_or in4 in2 exec_shove (integer_dup in3 integer_dec in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_noop boolean_or in4 in2 in2 boolean_invert_first_then_and in3 in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_noop exec_if () (integer_swap integer_swap boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_div exec_do*times (integer_yank integer_dup exec_do*while (integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) (tagged_321 exec_swap (integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) exec_swap (boolean_flush integer_dup_items boolean_flush integer_dup_items in3 boolean_rot) (in3) exec_yankdup)) (exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 integer_mult in4 integer_sub integer_stackdepth) ()) () ()))
Zero cases best errors: [0 0 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 136
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (370 483 474 98 679 508 42 379 500 678)
Population mean number of elite cases: 4.21
Count of perfect (error zero) individuals by case: (370 483 474 98 679 508 42 379 500 678)
Population mean number of perfect (error zero) cases: 4.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_321} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 1, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction integer_mult} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth})
Best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_eq exec_yankdup integer_div boolean_swap integer_gte boolean_or boolean_or in4 in2 in2 integer_dup in3 integer_dec in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_noop boolean_or in4 in2 in2 boolean_invert_first_then_and in3 in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_noop exec_if () (integer_swap integer_swap boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_div exec_do*times (integer_yank integer_dup exec_do*while (integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) (tagged_321 exec_swap (integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) exec_swap (boolean_flush integer_dup_items boolean_flush integer_dup_items in3 boolean_rot) (in3) exec_yankdup)) (exec_while (boolean_shove) in4 integer_mod integer_yankdup in3) (exec_yankdup)) (exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 integer_mult in4 integer_sub integer_stackdepth) ())
Errors: [0 0 0 1 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 119
Size: 143
Percent parens: 0.168
--- Population Statistics ---
Average total errors in population: 5.789
Median total errors in population: 5
Error averages by case: (0.63 0.517 0.526 0.902 0.321 0.492 0.958 0.621 0.5 0.322)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 108.016
Average program size in population (points): 131.463
Average percent parens in population: 0.178
Minimum age in population: 24.7783203125
Maximum age in population: 26.9619140625
Average age in population: 26.0836630859375
Median age in population: 25.9619140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 125
Genome diversity (% unique genomes):	 0.785
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 125
Syntactic diversity (% unique Push programs):	 0.785
Total error diversity:				 0.009
Error (vector) diversity:			 0.092
Behavioral diversity:				 0.416
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 19845246
--- Timings ---
Current time: 1559314375259 milliseconds
Total Time:          63.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.4 seconds, 51.0%
Fitness Testing:     19.6 seconds, 30.9%
Report:              11.4 seconds, 17.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 392
Test mean error for best: 0.39200
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 1
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 1
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 1
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 1
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 1
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 1
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 1
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 1
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 1
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 1
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 1
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 1
Test Case  268 | Error: 1
Test Case  269 | Error: 1
Test Case  270 | Error: 1
Test Case  271 | Error: 1
Test Case  272 | Error: 1
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 1
Test Case  282 | Error: 1
Test Case  283 | Error: 1
Test Case  284 | Error: 1
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 1
Test Case  294 | Error: 1
Test Case  295 | Error: 1
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 1
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 1
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 1
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 1
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 1
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 1
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 1
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 1
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 1
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 1
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 1
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 1
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 1
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 1
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 1
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -60                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: -51                 | Program output: -51                
Correct output: 26                  | Program output: 26                 
Correct output: -26                 | Program output: -26                
Correct output: -91                 | Program output: -91                
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -2                  | Program output: -2                 
Correct output: 17                  | Program output: 17                 
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: 37                  | Program output: 37                 
Correct output: 13                  | Program output: 13                 
Correct output: 65                  | Program output: 66                 
Correct output: 5                   | Program output: 16                 
Correct output: 1                   | Program output: 38                 
Correct output: 30                  | Program output: 30                 
Correct output: 1                   | Program output: 2                  
Correct output: 22                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 39                 
Correct output: 15                  | Program output: 78                 
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 3                   | Program output: 500                
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 59                  | Program output: 59                 
Correct output: 7                   | Program output: 43                 
Correct output: 40                  | Program output: 93                 
Correct output: 20                  | Program output: 34                 
Correct output: 26                  | Program output: 57                 
Correct output: -43                 | Program output: 7                  
Correct output: -30                 | Program output: -15                
Correct output: -93                 | Program output: -93                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -96                
Correct output: -43                 | Program output: -13                
Correct output: -91                 | Program output: -87                
Correct output: -53                 | Program output: -53                
Correct output: -27                 | Program output: -27                
Correct output: -76                 | Program output: -28                
Correct output: -70                 | Program output: -70                
Correct output: -98                 | Program output: -98                
Correct output: -88                 | Program output: -88                
Correct output: -59                 | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -67                
Correct output: -89                 | Program output: -89                
Correct output: -9                  | Program output: -1                 
Correct output: -67                 | Program output: -67                
Correct output: -82                 | Program output: 68                 
Correct output: -86                 | Program output: 66                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: -82                
Correct output: -85                 | Program output: -50                
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -46                
Correct output: -87                 | Program output: -87                
Correct output: -76                 | Program output: -63                
Correct output: -34                 | Program output: -34                
Correct output: -70                 | Program output: -65                
Correct output: -2                  | Program output: -2                 
Correct output: -76                 | Program output: -76                
Correct output: 2                   | Program output: 2                  
Correct output: -97                 | Program output: -97                
Correct output: -57                 | Program output: -57                
Correct output: 8                   | Program output: 8                  
Correct output: -69                 | Program output: 59                 
Correct output: -19                 | Program output: -19                
Correct output: -40                 | Program output: -40                
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: -580               
Correct output: -32                 | Program output: -32                
Correct output: -100                | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -18                 | Program output: 10                 
Correct output: -77                 | Program output: -77                
Correct output: -90                 | Program output: -90                
Correct output: 45                  | Program output: 81                 
Correct output: -43                 | Program output: -43                
Correct output: -57                 | Program output: -9                 
Correct output: -44                 | Program output: -23                
Correct output: -93                 | Program output: -93                
Correct output: -64                 | Program output: -4                 
Correct output: -59                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: -72                 | Program output: -21                
Correct output: -94                 | Program output: -94                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_321} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth})
Lexicase best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_eq exec_yankdup integer_div boolean_swap integer_gte integer_div boolean_swap integer_gte boolean_or boolean_or in4 in2 in2 integer_dup in3 integer_dec in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_noop boolean_or in4 exec_noop boolean_or in4 in2 in2 boolean_invert_first_then_and in3 in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_k (exec_if () (integer_swap integer_swap boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_div exec_do*times (integer_yank integer_dup exec_do*while (integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) (tagged_321 exec_swap (integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank exec_dup_items boolean_empty exec_k (boolean_empty boolean_invert_second_then_and) (exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) exec_swap (boolean_flush integer_dup_items boolean_flush integer_dup_items in3 boolean_rot) (in3) exec_yankdup)) exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 integer_mult boolean_yank integer_sub integer_stackdepth)) ()) () ()) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 143
Percent parens: 0.189
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_321} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth})
Zero cases best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_eq exec_yankdup integer_div boolean_swap integer_gte integer_div boolean_swap integer_gte boolean_or boolean_or in4 in2 in2 integer_dup in3 integer_dec in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_noop boolean_or in4 exec_noop boolean_or in4 in2 in2 boolean_invert_first_then_and in3 in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_k (exec_if () (integer_swap integer_swap boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_div exec_do*times (integer_yank integer_dup exec_do*while (integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) (tagged_321 exec_swap (integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank exec_dup_items boolean_empty exec_k (boolean_empty boolean_invert_second_then_and) (exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) exec_swap (boolean_flush integer_dup_items boolean_flush integer_dup_items in3 boolean_rot) (in3) exec_yankdup)) exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 integer_mult boolean_yank integer_sub integer_stackdepth)) ()) () ()) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 143
Percent parens: 0.189
--- Lexicase Population Statistics ---
Count of elite individuals by case: (419 805 281 755 419 654 357 386 544 51)
Population mean number of elite cases: 4.67
Count of perfect (error zero) individuals by case: (419 805 281 755 419 654 357 386 544 51)
Population mean number of perfect (error zero) cases: 4.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_mod} {:close 0, :instruction in3} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_or} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 1, :instruction exec_if} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 1, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_yankdup} {:close 0, :instruction tagged_218} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction tagged_321} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_shove} {:close 0, :instruction tag_boolean_58} {:close 2, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_empty} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_k} {:close 2, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction in3} {:close 2, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_shove} {:close 0, :instruction in4} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_225} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_stackdepth})
Best program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_eq exec_yankdup integer_div boolean_swap integer_gte integer_div boolean_swap integer_gte boolean_or boolean_or in4 in2 in2 integer_dup in3 integer_dec in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_noop boolean_or in4 exec_noop boolean_or in4 in2 in2 boolean_invert_first_then_and in3 in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_k (exec_if () (integer_swap integer_swap boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_div exec_do*times (integer_yank integer_dup exec_do*while (integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) (tagged_321 exec_swap (integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank exec_dup_items boolean_empty exec_k (boolean_empty boolean_invert_second_then_and) (exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) exec_swap (boolean_flush integer_dup_items boolean_flush integer_dup_items in3 boolean_rot) (in3) exec_yankdup)) exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 integer_mult boolean_yank integer_sub integer_stackdepth)) ()) () ()) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 116
Size: 143
Percent parens: 0.189
--- Population Statistics ---
Average total errors in population: 5.329
Median total errors in population: 6
Error averages by case: (0.581 0.195 0.719 0.245 0.581 0.346 0.643 0.614 0.456 0.949)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 110.193
Average program size in population (points): 134.206
Average percent parens in population: 0.179
Minimum age in population: 26.14208984375
Maximum age in population: 28.9619140625
Average age in population: 27.82999267578125
Median age in population: 27.9619140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 55
Genome diversity (% unique genomes):	 0.848
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.847
Total error diversity:				 0.011
Error (vector) diversity:			 0.108
Behavioral diversity:				 0.394
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 21265944
--- Timings ---
Current time: 1559314379521 milliseconds
Total Time:          67.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.4 seconds, 50.8%
Fitness Testing:     20.9 seconds, 30.9%
Report:              12.2 seconds, 18.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 17
Successful program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_eq exec_yankdup integer_div boolean_swap integer_gte integer_div boolean_swap integer_gte boolean_or boolean_or in4 in2 in2 integer_dup in3 integer_dec in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_noop boolean_or in4 exec_noop boolean_or in4 in2 in2 boolean_invert_first_then_and in3 in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_k (exec_if () (integer_swap integer_swap boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_div exec_do*times (integer_yank integer_dup exec_do*while (integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) (tagged_321 exec_swap (integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank exec_dup_items boolean_empty exec_k (boolean_empty boolean_invert_second_then_and) (exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) exec_swap (boolean_flush integer_dup_items boolean_flush integer_dup_items in3 boolean_rot) (in3) exec_yankdup)) exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 integer_mult boolean_yank integer_sub integer_stackdepth)) ()) () ()) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 143


Auto-simplifying with starting size: 143
step: 0
program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_eq exec_yankdup integer_div boolean_swap integer_gte integer_div boolean_swap integer_gte boolean_or boolean_or in4 in2 in2 integer_dup in3 integer_dec in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_noop boolean_or in4 exec_noop boolean_or in4 in2 in2 boolean_invert_first_then_and in3 in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_k (exec_if () (integer_swap integer_swap boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_div exec_do*times (integer_yank integer_dup exec_do*while (integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) (tagged_321 exec_swap (integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank exec_dup_items boolean_empty exec_k (boolean_empty boolean_invert_second_then_and) (exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) exec_swap (boolean_flush integer_dup_items boolean_flush integer_dup_items in3 boolean_rot) (in3) exec_yankdup)) exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 integer_mult boolean_yank integer_sub integer_stackdepth)) ()) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 143

step: 500
program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_eq exec_yankdup integer_div boolean_swap integer_gte integer_div boolean_swap integer_gte boolean_or boolean_or in4 in2 in2 integer_dup in3 integer_dec in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_noop boolean_or in4 exec_noop boolean_or in4 in2 in2 boolean_invert_first_then_and in3 in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_k (exec_if () (integer_swap integer_swap boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_div exec_do*times (integer_yank integer_dup exec_do*while (integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) (tagged_321 exec_swap (integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank exec_dup_items boolean_empty exec_k (boolean_empty boolean_invert_second_then_and) (exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) exec_swap (boolean_flush integer_dup_items boolean_flush integer_dup_items in3 boolean_rot) (in3) exec_yankdup)) exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 integer_mult boolean_yank integer_sub integer_stackdepth)) ()) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 143

step: 1000
program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_eq exec_yankdup integer_div boolean_swap integer_gte integer_div boolean_swap integer_gte boolean_or boolean_or in4 in2 in2 integer_dup in3 integer_dec in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_noop boolean_or in4 exec_noop boolean_or in4 in2 in2 boolean_invert_first_then_and in3 in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_k (exec_if () (integer_swap integer_swap boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_div exec_do*times (integer_yank integer_dup exec_do*while (integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) (tagged_321 exec_swap (integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank exec_dup_items boolean_empty exec_k (boolean_empty boolean_invert_second_then_and) (exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) exec_swap (boolean_flush integer_dup_items boolean_flush integer_dup_items in3 boolean_rot) (in3) exec_yankdup)) exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 integer_mult boolean_yank integer_sub integer_stackdepth)) ()) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 143

step: 1500
program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_eq exec_yankdup integer_div boolean_swap integer_gte integer_div boolean_swap integer_gte boolean_or boolean_or in4 in2 in2 integer_dup in3 integer_dec in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_noop boolean_or in4 exec_noop boolean_or in4 in2 in2 boolean_invert_first_then_and in3 in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_k (exec_if () (integer_swap integer_swap boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_div exec_do*times (integer_yank integer_dup exec_do*while (integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) (tagged_321 exec_swap (integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank exec_dup_items boolean_empty exec_k (boolean_empty boolean_invert_second_then_and) (exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) exec_swap (boolean_flush integer_dup_items boolean_flush integer_dup_items in3 boolean_rot) (in3) exec_yankdup)) exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 integer_mult boolean_yank integer_sub integer_stackdepth)) ()) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 143

step: 2000
program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_eq exec_yankdup integer_div boolean_swap integer_gte integer_div boolean_swap integer_gte boolean_or boolean_or in4 in2 in2 integer_dup in3 integer_dec in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_noop boolean_or in4 exec_noop boolean_or in4 in2 in2 boolean_invert_first_then_and in3 in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_k (exec_if () (integer_swap integer_swap boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_div exec_do*times (integer_yank integer_dup exec_do*while (integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) (tagged_321 exec_swap (integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank exec_dup_items boolean_empty exec_k (boolean_empty boolean_invert_second_then_and) (exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) exec_swap (boolean_flush integer_dup_items boolean_flush integer_dup_items in3 boolean_rot) (in3) exec_yankdup)) exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 integer_mult boolean_yank integer_sub integer_stackdepth)) ()) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 143

step: 2500
program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_eq exec_yankdup integer_div boolean_swap integer_gte integer_div boolean_swap integer_gte boolean_or boolean_or in4 in2 in2 integer_dup in3 integer_dec in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_noop boolean_or in4 exec_noop boolean_or in4 in2 in2 boolean_invert_first_then_and in3 in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_k (exec_if () (integer_swap integer_swap boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_div exec_do*times (integer_yank integer_dup exec_do*while (integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) (tagged_321 exec_swap (integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank exec_dup_items boolean_empty exec_k (boolean_empty boolean_invert_second_then_and) (exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) exec_swap (boolean_flush integer_dup_items boolean_flush integer_dup_items in3 boolean_rot) (in3) exec_yankdup)) exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 integer_mult boolean_yank integer_sub integer_stackdepth)) ()) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 143

step: 3000
program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_eq exec_yankdup integer_div boolean_swap integer_gte integer_div boolean_swap integer_gte boolean_or boolean_or in4 in2 in2 integer_dup in3 integer_dec in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_noop boolean_or in4 exec_noop boolean_or in4 in2 in2 boolean_invert_first_then_and in3 in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_k (exec_if () (integer_swap integer_swap boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_div exec_do*times (integer_yank integer_dup exec_do*while (integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) (tagged_321 exec_swap (integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank exec_dup_items boolean_empty exec_k (boolean_empty boolean_invert_second_then_and) (exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) exec_swap (boolean_flush integer_dup_items boolean_flush integer_dup_items in3 boolean_rot) (in3) exec_yankdup)) exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 integer_mult boolean_yank integer_sub integer_stackdepth)) ()) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 143

step: 3500
program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_eq exec_yankdup integer_div boolean_swap integer_gte integer_div boolean_swap integer_gte boolean_or boolean_or in4 in2 in2 integer_dup in3 integer_dec in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_noop boolean_or in4 exec_noop boolean_or in4 in2 in2 boolean_invert_first_then_and in3 in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_k (exec_if () (integer_swap integer_swap boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_div exec_do*times (integer_yank integer_dup exec_do*while (integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) (tagged_321 exec_swap (integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank exec_dup_items boolean_empty exec_k (boolean_empty boolean_invert_second_then_and) (exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) exec_swap (boolean_flush integer_dup_items boolean_flush integer_dup_items in3 boolean_rot) (in3) exec_yankdup)) exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 integer_mult boolean_yank integer_sub integer_stackdepth)) ()) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 143

step: 4000
program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_eq exec_yankdup integer_div boolean_swap integer_gte integer_div boolean_swap integer_gte boolean_or boolean_or in4 in2 in2 integer_dup in3 integer_dec in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_noop boolean_or in4 exec_noop boolean_or in4 in2 in2 boolean_invert_first_then_and in3 in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_k (exec_if () (integer_swap integer_swap boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_div exec_do*times (integer_yank integer_dup exec_do*while (integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) (tagged_321 exec_swap (integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank exec_dup_items boolean_empty exec_k (boolean_empty boolean_invert_second_then_and) (exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) exec_swap (boolean_flush integer_dup_items boolean_flush integer_dup_items in3 boolean_rot) (in3) exec_yankdup)) exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 integer_mult boolean_yank integer_sub integer_stackdepth)) ()) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 143

step: 4500
program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_eq exec_yankdup integer_div boolean_swap integer_gte integer_div boolean_swap integer_gte boolean_or boolean_or in4 in2 in2 integer_dup in3 integer_dec in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_noop boolean_or in4 exec_noop boolean_or in4 in2 in2 boolean_invert_first_then_and in3 in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_k (exec_if () (integer_swap integer_swap boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_div exec_do*times (integer_yank integer_dup exec_do*while (integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) (tagged_321 exec_swap (integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank exec_dup_items boolean_empty exec_k (boolean_empty boolean_invert_second_then_and) (exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) exec_swap (boolean_flush integer_dup_items boolean_flush integer_dup_items in3 boolean_rot) (in3) exec_yankdup)) exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 integer_mult boolean_yank integer_sub integer_stackdepth)) ()) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 143

step: 5000
program: (exec_stackdepth integer_mod in3 boolean_invert_second_then_and integer_eq exec_yankdup integer_div boolean_swap integer_gte integer_div boolean_swap integer_gte boolean_or boolean_or in4 in2 in2 integer_dup in3 integer_dec in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_noop boolean_or in4 exec_noop boolean_or in4 in2 in2 boolean_invert_first_then_and in3 in4 in2 integer_dup in3 exec_s_when_autoconstructing (boolean_empty integer_gt boolean_empty exec_k (exec_if () (integer_swap integer_swap boolean_frominteger integer_lte boolean_and integer_lt) exec_do*while (boolean_swap in1 in3) boolean_not integer_div exec_do*times (integer_yank integer_dup exec_do*while (integer_dup exec_do*times (exec_pop (integer_yankdup) tagged_218 exec_swap (integer_lt integer_yank integer_lt integer_yank integer_dec boolean_empty boolean_yank boolean_empty boolean_invert_second_then_and) (tagged_321 exec_swap (integer_shove tag_boolean_58 print_integer) () integer_lt integer_yank exec_dup_items boolean_empty exec_k (boolean_empty boolean_invert_second_then_and) (exec_k (boolean_not) () boolean_not integer_eq) integer_min integer_eq in2) exec_swap (boolean_flush integer_dup_items boolean_flush integer_dup_items in3 boolean_rot) (in3) exec_yankdup)) exec_while (boolean_shove) in4 integer_mod integer_yankdup tagged_225 integer_mult boolean_yank integer_sub integer_stackdepth)) ()) () ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 143

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 392
Test mean error for best: 0.39200
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 1
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 1
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 1
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 1
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 1
Test Case   50 | Error: 1
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 1
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 1
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 1
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 1
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 1
Test Case   96 | Error: 1
Test Case   97 | Error: 1
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 1
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 1
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 1
Test Case  246 | Error: 1
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 1
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 1
Test Case  268 | Error: 1
Test Case  269 | Error: 1
Test Case  270 | Error: 1
Test Case  271 | Error: 1
Test Case  272 | Error: 1
Test Case  273 | Error: 1
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 1
Test Case  282 | Error: 1
Test Case  283 | Error: 1
Test Case  284 | Error: 1
Test Case  285 | Error: 1
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 1
Test Case  293 | Error: 1
Test Case  294 | Error: 1
Test Case  295 | Error: 1
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 1
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 1
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 1
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 1
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 1
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 0
Test Case  364 | Error: 1
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 1
Test Case  377 | Error: 1
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 0
Test Case  384 | Error: 1
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 1
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 1
Test Case  421 | Error: 1
Test Case  422 | Error: 1
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 1
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 1
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 1
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 1
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 1
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 1
Test Case  493 | Error: 1
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 1
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 1
Test Case  526 | Error: 1
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 1
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 1
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 1
Test Case  639 | Error: 1
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 1
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 1
Test Case  674 | Error: 1
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 1
Test Case  681 | Error: 1
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 1
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 1
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 1
Test Case  707 | Error: 1
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 1
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 1
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 1
Test Case  748 | Error: 1
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 1
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 1
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 1
Test Case  845 | Error: 1
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 1
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 1
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 1
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 1
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 1
Test Case  901 | Error: 1
Test Case  902 | Error: 1
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 1
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 1
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 1
Test Case  951 | Error: 1
Test Case  952 | Error: 1
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 1
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 1
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 1
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -60                 | Program output: -60                
Correct output: 45                  | Program output: 45                 
Correct output: -51                 | Program output: -51                
Correct output: 26                  | Program output: 26                 
Correct output: -26                 | Program output: -26                
Correct output: -91                 | Program output: -91                
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -2                  | Program output: -2                 
Correct output: 17                  | Program output: 17                 
Correct output: -85                 | Program output: -85                
Correct output: -36                 | Program output: -36                
Correct output: -4                  | Program output: -4                 
Correct output: 37                  | Program output: 37                 
Correct output: 13                  | Program output: 13                 
Correct output: 65                  | Program output: 66                 
Correct output: 5                   | Program output: 16                 
Correct output: 1                   | Program output: 38                 
Correct output: 30                  | Program output: 30                 
Correct output: 1                   | Program output: 2                  
Correct output: 22                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 39                 
Correct output: 15                  | Program output: 78                 
Correct output: 11                  | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 3                   | Program output: 500                
Correct output: 0                   | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 59                  | Program output: 59                 
Correct output: 7                   | Program output: 43                 
Correct output: 40                  | Program output: 93                 
Correct output: 20                  | Program output: 34                 
Correct output: 26                  | Program output: 57                 
Correct output: -43                 | Program output: 7                  
Correct output: -30                 | Program output: -15                
Correct output: -93                 | Program output: -93                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -96                
Correct output: -43                 | Program output: -13                
Correct output: -91                 | Program output: -87                
Correct output: -53                 | Program output: -53                
Correct output: -27                 | Program output: -27                
Correct output: -76                 | Program output: -28                
Correct output: -70                 | Program output: -70                
Correct output: -98                 | Program output: -98                
Correct output: -88                 | Program output: -88                
Correct output: -59                 | Program output: 17                 
Correct output: -100                | Program output: -100               
Correct output: -67                 | Program output: -67                
Correct output: -89                 | Program output: -89                
Correct output: -9                  | Program output: -1                 
Correct output: -67                 | Program output: -67                
Correct output: -82                 | Program output: 68                 
Correct output: -86                 | Program output: 66                 
Correct output: -76                 | Program output: -76                
Correct output: -98                 | Program output: -82                
Correct output: -85                 | Program output: -50                
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -46                
Correct output: -87                 | Program output: -87                
Correct output: -76                 | Program output: -63                
Correct output: -34                 | Program output: -34                
Correct output: -70                 | Program output: -65                
Correct output: -2                  | Program output: -2                 
Correct output: -76                 | Program output: -76                
Correct output: 2                   | Program output: 2                  
Correct output: -97                 | Program output: -97                
Correct output: -57                 | Program output: -57                
Correct output: 8                   | Program output: 8                  
Correct output: -69                 | Program output: 59                 
Correct output: -19                 | Program output: -19                
Correct output: -40                 | Program output: -40                
Correct output: -24                 | Program output: -24                
Correct output: -71                 | Program output: -71                
Correct output: -92                 | Program output: -92                
Correct output: -58                 | Program output: -580               
Correct output: -32                 | Program output: -32                
Correct output: -100                | Program output: -84                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -18                 | Program output: 10                 
Correct output: -77                 | Program output: -77                
Correct output: -90                 | Program output: -90                
Correct output: 45                  | Program output: 81                 
Correct output: -43                 | Program output: -43                
Correct output: -57                 | Program output: -9                 
Correct output: -44                 | Program output: -23                
Correct output: -93                 | Program output: -93                
Correct output: -64                 | Program output: -4                 
Correct output: -59                 | Program output: -59                
Correct output: -92                 | Program output: -92                
Correct output: -72                 | Program output: -21                
Correct output: -94                 | Program output: -94                
;;******************************
