Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x579dde54 clojush.problems.software.smallest$fn__7460@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@7e2a76be]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-26 49 -26 -26] -26] [[-81 -12 -12 -12] -81] [[-97 -97 -97 78] -97] [[8 8 97 8] 8] [[-91 -91 -10 -91] -91] [[74 74 41 74] 41] [[24 24 24 -20] -20] [[4 -65 4 4] -65] [[-100 -100 -100 40] -100] [[20 -44 -44 -44] -44] [(-31 -31 -31 -31) -31] [(55 55 55 55) 55] [(-88 -88 -88 -88) -88] [(-10 -10 -10 -10) -10] [(68 68 68 68) 68] [(53 26 86 21) 21] [(17 99 83 33) 17] [(61 0 59 25) 0] [(38 7 73 1) 1] [(68 61 11 74) 11] [(19 90 41 69) 19] [(34 1 74 70) 1] [(62 6 67 29) 6] [(35 98 77 11) 11] [(29 51 16 70) 16] [(32 57 4 78) 4] [(58 21 80 58) 21] [(96 17 89 9) 9] [(43 72 100 77) 43] [(52 20 17 65) 17] [(90 15 25 40) 15] [(44 58 68 68) 44] [(72 94 66 51) 51] [(3 56 7 77) 3] [(10 13 21 25) 10] [(-31 -27 66 -19) -31] [(-82 -78 -85 -87) -87] [(-3 -58 -88 -26) -88] [(1 -42 -72 10) -72] [(59 -83 54 56) -83] [(55 85 -50 -7) -50] [(28 72 4 86) 4] [(17 -48 -66 -14) -66] [(-23 36 -76 45) -76] [(17 77 -46 -21) -46] [(15 65 18 5) 5] [(-65 -75 -19 -67) -75] [(-16 -100 -91 15) -100] [(-69 4 -58 -52) -69] [(12 -22 -3 76) -22] [(-68 -6 53 -10) -68] [(41 68 17 51) 17] [(80 4 -41 90) -41] [(37 50 10 13) 10] [(-65 -50 7 29) -65] [(61 -86 88 -17) -86] [(55 -64 -3 -91) -91] [(-76 56 15 -73) -76] [(51 -31 -41 73) -41] [(-9 -10 98 39) -10] [(-64 18 -41 89) -64] [(-74 92 -98 -30) -98] [(-42 17 -47 76) -47] [(-64 48 -89 11) -89] [(9 39 6 87) 6] [(36 -21 41 -70) -70] [(-37 7 59 -56) -56] [(-62 49 67 -33) -62] [(66 -35 13 62) -35] [(-48 20 69 -27) -48] [(94 40 -55 -57) -57] [(59 96 56 9) 9] [(-16 -38 -48 74) -48] [(-7 37 -90 -71) -90] [(-92 -1 -63 -47) -92] [(12 -92 46 81) -92] [(12 -20 -93 21) -93] [(-13 92 77 94) -13] [(26 78 -82 87) -82] [(-6 21 44 61) -6] [(-91 -84 -53 9) -91] [(46 46 77 32) 32] [(70 19 27 1) 1] [(-54 -57 -61 -83) -83] [(-34 62 -90 -90) -90] [(-47 36 4 61) -47] [(5 74 -15 24) -15] [(-14 -16 9 29) -16] [(-84 25 -66 47) -84] [(-47 -61 -41 -18) -61] [(-3 91 -86 0) -86] [(46 -41 71 75) -41] [(38 -35 11 -65) -65] [(60 -8 99 18) -8] [(89 -92 72 -6) -92])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-26 49 -26 -26] -26]
Train Case:   6 | Input/Output: [[-81 -12 -12 -12] -81]
Train Case:   7 | Input/Output: [[-97 -97 -97 78] -97]
Train Case:   8 | Input/Output: [[8 8 97 8] 8]
Train Case:   9 | Input/Output: [[-91 -91 -10 -91] -91]
Train Case:  10 | Input/Output: [[74 74 41 74] 41]
Train Case:  11 | Input/Output: [[24 24 24 -20] -20]
Train Case:  12 | Input/Output: [[4 -65 4 4] -65]
Train Case:  13 | Input/Output: [[-100 -100 -100 40] -100]
Train Case:  14 | Input/Output: [[20 -44 -44 -44] -44]
Train Case:  15 | Input/Output: [(-31 -31 -31 -31) -31]
Train Case:  16 | Input/Output: [(55 55 55 55) 55]
Train Case:  17 | Input/Output: [(-88 -88 -88 -88) -88]
Train Case:  18 | Input/Output: [(-10 -10 -10 -10) -10]
Train Case:  19 | Input/Output: [(68 68 68 68) 68]
Train Case:  20 | Input/Output: [(53 26 86 21) 21]
Train Case:  21 | Input/Output: [(17 99 83 33) 17]
Train Case:  22 | Input/Output: [(61 0 59 25) 0]
Train Case:  23 | Input/Output: [(38 7 73 1) 1]
Train Case:  24 | Input/Output: [(68 61 11 74) 11]
Train Case:  25 | Input/Output: [(19 90 41 69) 19]
Train Case:  26 | Input/Output: [(34 1 74 70) 1]
Train Case:  27 | Input/Output: [(62 6 67 29) 6]
Train Case:  28 | Input/Output: [(35 98 77 11) 11]
Train Case:  29 | Input/Output: [(29 51 16 70) 16]
Train Case:  30 | Input/Output: [(32 57 4 78) 4]
Train Case:  31 | Input/Output: [(58 21 80 58) 21]
Train Case:  32 | Input/Output: [(96 17 89 9) 9]
Train Case:  33 | Input/Output: [(43 72 100 77) 43]
Train Case:  34 | Input/Output: [(52 20 17 65) 17]
Train Case:  35 | Input/Output: [(90 15 25 40) 15]
Train Case:  36 | Input/Output: [(44 58 68 68) 44]
Train Case:  37 | Input/Output: [(72 94 66 51) 51]
Train Case:  38 | Input/Output: [(3 56 7 77) 3]
Train Case:  39 | Input/Output: [(10 13 21 25) 10]
Train Case:  40 | Input/Output: [(-31 -27 66 -19) -31]
Train Case:  41 | Input/Output: [(-82 -78 -85 -87) -87]
Train Case:  42 | Input/Output: [(-3 -58 -88 -26) -88]
Train Case:  43 | Input/Output: [(1 -42 -72 10) -72]
Train Case:  44 | Input/Output: [(59 -83 54 56) -83]
Train Case:  45 | Input/Output: [(55 85 -50 -7) -50]
Train Case:  46 | Input/Output: [(28 72 4 86) 4]
Train Case:  47 | Input/Output: [(17 -48 -66 -14) -66]
Train Case:  48 | Input/Output: [(-23 36 -76 45) -76]
Train Case:  49 | Input/Output: [(17 77 -46 -21) -46]
Train Case:  50 | Input/Output: [(15 65 18 5) 5]
Train Case:  51 | Input/Output: [(-65 -75 -19 -67) -75]
Train Case:  52 | Input/Output: [(-16 -100 -91 15) -100]
Train Case:  53 | Input/Output: [(-69 4 -58 -52) -69]
Train Case:  54 | Input/Output: [(12 -22 -3 76) -22]
Train Case:  55 | Input/Output: [(-68 -6 53 -10) -68]
Train Case:  56 | Input/Output: [(41 68 17 51) 17]
Train Case:  57 | Input/Output: [(80 4 -41 90) -41]
Train Case:  58 | Input/Output: [(37 50 10 13) 10]
Train Case:  59 | Input/Output: [(-65 -50 7 29) -65]
Train Case:  60 | Input/Output: [(61 -86 88 -17) -86]
Train Case:  61 | Input/Output: [(55 -64 -3 -91) -91]
Train Case:  62 | Input/Output: [(-76 56 15 -73) -76]
Train Case:  63 | Input/Output: [(51 -31 -41 73) -41]
Train Case:  64 | Input/Output: [(-9 -10 98 39) -10]
Train Case:  65 | Input/Output: [(-64 18 -41 89) -64]
Train Case:  66 | Input/Output: [(-74 92 -98 -30) -98]
Train Case:  67 | Input/Output: [(-42 17 -47 76) -47]
Train Case:  68 | Input/Output: [(-64 48 -89 11) -89]
Train Case:  69 | Input/Output: [(9 39 6 87) 6]
Train Case:  70 | Input/Output: [(36 -21 41 -70) -70]
Train Case:  71 | Input/Output: [(-37 7 59 -56) -56]
Train Case:  72 | Input/Output: [(-62 49 67 -33) -62]
Train Case:  73 | Input/Output: [(66 -35 13 62) -35]
Train Case:  74 | Input/Output: [(-48 20 69 -27) -48]
Train Case:  75 | Input/Output: [(94 40 -55 -57) -57]
Train Case:  76 | Input/Output: [(59 96 56 9) 9]
Train Case:  77 | Input/Output: [(-16 -38 -48 74) -48]
Train Case:  78 | Input/Output: [(-7 37 -90 -71) -90]
Train Case:  79 | Input/Output: [(-92 -1 -63 -47) -92]
Train Case:  80 | Input/Output: [(12 -92 46 81) -92]
Train Case:  81 | Input/Output: [(12 -20 -93 21) -93]
Train Case:  82 | Input/Output: [(-13 92 77 94) -13]
Train Case:  83 | Input/Output: [(26 78 -82 87) -82]
Train Case:  84 | Input/Output: [(-6 21 44 61) -6]
Train Case:  85 | Input/Output: [(-91 -84 -53 9) -91]
Train Case:  86 | Input/Output: [(46 46 77 32) 32]
Train Case:  87 | Input/Output: [(70 19 27 1) 1]
Train Case:  88 | Input/Output: [(-54 -57 -61 -83) -83]
Train Case:  89 | Input/Output: [(-34 62 -90 -90) -90]
Train Case:  90 | Input/Output: [(-47 36 4 61) -47]
Train Case:  91 | Input/Output: [(5 74 -15 24) -15]
Train Case:  92 | Input/Output: [(-14 -16 9 29) -16]
Train Case:  93 | Input/Output: [(-84 25 -66 47) -84]
Train Case:  94 | Input/Output: [(-47 -61 -41 -18) -61]
Train Case:  95 | Input/Output: [(-3 91 -86 0) -86]
Train Case:  96 | Input/Output: [(46 -41 71 75) -41]
Train Case:  97 | Input/Output: [(38 -35 11 -65) -65]
Train Case:  98 | Input/Output: [(60 -8 99 18) -8]
Train Case:  99 | Input/Output: [(89 -92 72 -6) -92]
Test Case:   0 | Input/Output: [[88 88 88 -80] -80]
Test Case:   1 | Input/Output: [[70 -90 70 70] -90]
Test Case:   2 | Input/Output: [[-48 -29 -29 -29] -48]
Test Case:   3 | Input/Output: [[37 -100 -100 -100] -100]
Test Case:   4 | Input/Output: [[37 -71 -71 -71] -71]
Test Case:   5 | Input/Output: [[-88 -92 -88 -88] -92]
Test Case:   6 | Input/Output: [[1 1 31 1] 1]
Test Case:   7 | Input/Output: [[-39 -70 -70 -70] -70]
Test Case:   8 | Input/Output: [[40 40 -33 40] -33]
Test Case:   9 | Input/Output: [[-53 -98 -53 -53] -98]
Test Case:  10 | Input/Output: [[-80 -80 -66 -80] -80]
Test Case:  11 | Input/Output: [[-21 30 30 30] -21]
Test Case:  12 | Input/Output: [[-99 -99 -43 -99] -99]
Test Case:  13 | Input/Output: [[-69 -76 -76 -76] -76]
Test Case:  14 | Input/Output: [[52 52 -19 52] -19]
Test Case:  15 | Input/Output: [[22 -18 22 22] -18]
Test Case:  16 | Input/Output: [[-59 -59 -74 -59] -74]
Test Case:  17 | Input/Output: [[-41 98 -41 -41] -41]
Test Case:  18 | Input/Output: [[20 -6 -6 -6] -6]
Test Case:  19 | Input/Output: [[85 85 85 -37] -37]
Test Case:  20 | Input/Output: [[-85 89 -85 -85] -85]
Test Case:  21 | Input/Output: [[100 15 15 15] 15]
Test Case:  22 | Input/Output: [[-54 -54 2 -54] -54]
Test Case:  23 | Input/Output: [[37 37 37 58] 37]
Test Case:  24 | Input/Output: [[91 -28 91 91] -28]
Test Case:  25 | Input/Output: [[-81 -81 24 -81] -81]
Test Case:  26 | Input/Output: [[32 87 87 87] 32]
Test Case:  27 | Input/Output: [[0 -24 -24 -24] -24]
Test Case:  28 | Input/Output: [[-90 -30 -30 -30] -90]
Test Case:  29 | Input/Output: [[90 52 90 90] 52]
Test Case:  30 | Input/Output: [[-81 79 79 79] -81]
Test Case:  31 | Input/Output: [[52 -78 -78 -78] -78]
Test Case:  32 | Input/Output: [[33 89 89 89] 33]
Test Case:  33 | Input/Output: [[-13 -13 -13 80] -13]
Test Case:  34 | Input/Output: [[-6 -7 -6 -6] -7]
Test Case:  35 | Input/Output: [[-60 -60 15 -60] -60]
Test Case:  36 | Input/Output: [[14 -95 -95 -95] -95]
Test Case:  37 | Input/Output: [[25 25 90 25] 25]
Test Case:  38 | Input/Output: [[-8 -8 -8 -8] -8]
Test Case:  39 | Input/Output: [[98 -84 98 98] -84]
Test Case:  40 | Input/Output: [[14 14 19 14] 14]
Test Case:  41 | Input/Output: [[33 -4 -4 -4] -4]
Test Case:  42 | Input/Output: [[-69 -77 -77 -77] -77]
Test Case:  43 | Input/Output: [[-11 43 -11 -11] -11]
Test Case:  44 | Input/Output: [[98 98 98 82] 82]
Test Case:  45 | Input/Output: [[-58 -77 -77 -77] -77]
Test Case:  46 | Input/Output: [[51 51 7 51] 7]
Test Case:  47 | Input/Output: [[48 48 48 37] 37]
Test Case:  48 | Input/Output: [[99 99 99 -48] -48]
Test Case:  49 | Input/Output: [[-33 -33 8 -33] -33]
Test Case:  50 | Input/Output: [[79 79 79 13] 13]
Test Case:  51 | Input/Output: [[45 -41 -41 -41] -41]
Test Case:  52 | Input/Output: [[75 -6 -6 -6] -6]
Test Case:  53 | Input/Output: [[-86 -86 -10 -86] -86]
Test Case:  54 | Input/Output: [[20 20 20 -86] -86]
Test Case:  55 | Input/Output: [[-48 -48 -48 99] -48]
Test Case:  56 | Input/Output: [[51 64 51 51] 51]
Test Case:  57 | Input/Output: [[-21 -34 -21 -21] -34]
Test Case:  58 | Input/Output: [[48 11 11 11] 11]
Test Case:  59 | Input/Output: [[16 16 16 -5] -5]
Test Case:  60 | Input/Output: [[-24 -97 -97 -97] -97]
Test Case:  61 | Input/Output: [[58 58 -57 58] -57]
Test Case:  62 | Input/Output: [[-50 6 6 6] -50]
Test Case:  63 | Input/Output: [[65 56 65 65] 56]
Test Case:  64 | Input/Output: [[38 38 51 38] 38]
Test Case:  65 | Input/Output: [[99 99 -14 99] -14]
Test Case:  66 | Input/Output: [[-80 -80 3 -80] -80]
Test Case:  67 | Input/Output: [[87 87 51 87] 51]
Test Case:  68 | Input/Output: [[-84 -71 -84 -84] -84]
Test Case:  69 | Input/Output: [[91 91 91 -16] -16]
Test Case:  70 | Input/Output: [[-30 -30 -30 5] -30]
Test Case:  71 | Input/Output: [[-90 -90 47 -90] -90]
Test Case:  72 | Input/Output: [[-45 -45 91 -45] -45]
Test Case:  73 | Input/Output: [[-1 -1 -1 -52] -52]
Test Case:  74 | Input/Output: [[-23 52 52 52] -23]
Test Case:  75 | Input/Output: [[-60 -60 -60 5] -60]
Test Case:  76 | Input/Output: [[-91 -13 -13 -13] -91]
Test Case:  77 | Input/Output: [[-44 -44 -44 -9] -44]
Test Case:  78 | Input/Output: [[-89 -91 -91 -91] -91]
Test Case:  79 | Input/Output: [[69 69 69 60] 60]
Test Case:  80 | Input/Output: [[-17 85 -17 -17] -17]
Test Case:  81 | Input/Output: [[-62 -62 -62 -36] -62]
Test Case:  82 | Input/Output: [[46 46 74 46] 46]
Test Case:  83 | Input/Output: [[15 -77 -77 -77] -77]
Test Case:  84 | Input/Output: [[19 -68 -68 -68] -68]
Test Case:  85 | Input/Output: [[-71 -59 -59 -59] -71]
Test Case:  86 | Input/Output: [[5 89 89 89] 5]
Test Case:  87 | Input/Output: [[-62 -56 -62 -62] -62]
Test Case:  88 | Input/Output: [[88 -21 88 88] -21]
Test Case:  89 | Input/Output: [[-99 -99 -99 -26] -99]
Test Case:  90 | Input/Output: [[83 0 0 0] 0]
Test Case:  91 | Input/Output: [[2 -79 2 2] -79]
Test Case:  92 | Input/Output: [[-74 -74 -74 86] -74]
Test Case:  93 | Input/Output: [[-39 46 -39 -39] -39]
Test Case:  94 | Input/Output: [[-97 -97 46 -97] -97]
Test Case:  95 | Input/Output: [[-31 12 -31 -31] -31]
Test Case:  96 | Input/Output: [[40 40 -86 40] -86]
Test Case:  97 | Input/Output: [[4 4 -62 4] -62]
Test Case:  98 | Input/Output: [[85 -76 -76 -76] -76]
Test Case:  99 | Input/Output: [[62 -9 62 62] -9]
Test Case: 100 | Input/Output: [(21 21 21 21) 21]
Test Case: 101 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 102 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 103 | Input/Output: [(25 25 25 25) 25]
Test Case: 104 | Input/Output: [(75 75 75 75) 75]
Test Case: 105 | Input/Output: [(91 91 91 91) 91]
Test Case: 106 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 107 | Input/Output: [(46 46 46 46) 46]
Test Case: 108 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 109 | Input/Output: [(9 9 9 9) 9]
Test Case: 110 | Input/Output: [(49 49 49 49) 49]
Test Case: 111 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 112 | Input/Output: [(47 47 47 47) 47]
Test Case: 113 | Input/Output: [(1 1 1 1) 1]
Test Case: 114 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 115 | Input/Output: [(44 44 44 44) 44]
Test Case: 116 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 117 | Input/Output: [(10 10 10 10) 10]
Test Case: 118 | Input/Output: [(98 98 98 98) 98]
Test Case: 119 | Input/Output: [(28 28 28 28) 28]
Test Case: 120 | Input/Output: [(76 76 76 76) 76]
Test Case: 121 | Input/Output: [(63 63 63 63) 63]
Test Case: 122 | Input/Output: [(86 86 86 86) 86]
Test Case: 123 | Input/Output: [(89 89 89 89) 89]
Test Case: 124 | Input/Output: [(16 16 16 16) 16]
Test Case: 125 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 126 | Input/Output: [(16 16 16 16) 16]
Test Case: 127 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 128 | Input/Output: [(95 95 95 95) 95]
Test Case: 129 | Input/Output: [(23 23 23 23) 23]
Test Case: 130 | Input/Output: [(96 96 96 96) 96]
Test Case: 131 | Input/Output: [(49 49 49 49) 49]
Test Case: 132 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 133 | Input/Output: [(9 9 9 9) 9]
Test Case: 134 | Input/Output: [(86 86 86 86) 86]
Test Case: 135 | Input/Output: [(20 20 20 20) 20]
Test Case: 136 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 137 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 138 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 139 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 140 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 141 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 142 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 143 | Input/Output: [(70 70 70 70) 70]
Test Case: 144 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 145 | Input/Output: [(82 82 82 82) 82]
Test Case: 146 | Input/Output: [(99 99 99 99) 99]
Test Case: 147 | Input/Output: [(63 63 63 63) 63]
Test Case: 148 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 149 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 150 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 151 | Input/Output: [(70 70 70 70) 70]
Test Case: 152 | Input/Output: [(92 92 92 92) 92]
Test Case: 153 | Input/Output: [(-20 -20 -20 -20) -20]
Test Case: 154 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 155 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 156 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 157 | Input/Output: [(10 10 10 10) 10]
Test Case: 158 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 159 | Input/Output: [(11 11 11 11) 11]
Test Case: 160 | Input/Output: [(73 73 73 73) 73]
Test Case: 161 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 162 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 163 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 164 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 165 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 166 | Input/Output: [(0 0 0 0) 0]
Test Case: 167 | Input/Output: [(10 10 10 10) 10]
Test Case: 168 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 169 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 170 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 171 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 172 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 173 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 174 | Input/Output: [(11 11 11 11) 11]
Test Case: 175 | Input/Output: [(90 90 90 90) 90]
Test Case: 176 | Input/Output: [(93 93 93 93) 93]
Test Case: 177 | Input/Output: [(60 60 60 60) 60]
Test Case: 178 | Input/Output: [(44 44 44 44) 44]
Test Case: 179 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 180 | Input/Output: [(91 91 91 91) 91]
Test Case: 181 | Input/Output: [(96 96 96 96) 96]
Test Case: 182 | Input/Output: [(78 78 78 78) 78]
Test Case: 183 | Input/Output: [(95 95 95 95) 95]
Test Case: 184 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 185 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 186 | Input/Output: [(81 81 81 81) 81]
Test Case: 187 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 188 | Input/Output: [(62 62 62 62) 62]
Test Case: 189 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 190 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 191 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 192 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 193 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 194 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 195 | Input/Output: [(35 35 35 35) 35]
Test Case: 196 | Input/Output: [(70 70 70 70) 70]
Test Case: 197 | Input/Output: [(18 18 18 18) 18]
Test Case: 198 | Input/Output: [(1 1 1 1) 1]
Test Case: 199 | Input/Output: [(14 14 14 14) 14]
Test Case: 200 | Input/Output: [(34 26 16 23) 16]
Test Case: 201 | Input/Output: [(39 25 35 14) 14]
Test Case: 202 | Input/Output: [(28 50 25 35) 25]
Test Case: 203 | Input/Output: [(5 48 79 19) 5]
Test Case: 204 | Input/Output: [(13 20 52 33) 13]
Test Case: 205 | Input/Output: [(51 46 74 26) 26]
Test Case: 206 | Input/Output: [(86 89 8 18) 8]
Test Case: 207 | Input/Output: [(75 30 74 51) 30]
Test Case: 208 | Input/Output: [(76 39 24 15) 15]
Test Case: 209 | Input/Output: [(29 67 79 25) 25]
Test Case: 210 | Input/Output: [(18 43 50 34) 18]
Test Case: 211 | Input/Output: [(54 93 60 54) 54]
Test Case: 212 | Input/Output: [(76 20 58 96) 20]
Test Case: 213 | Input/Output: [(25 66 14 55) 14]
Test Case: 214 | Input/Output: [(5 71 8 97) 5]
Test Case: 215 | Input/Output: [(81 5 78 98) 5]
Test Case: 216 | Input/Output: [(28 6 58 55) 6]
Test Case: 217 | Input/Output: [(37 7 99 87) 7]
Test Case: 218 | Input/Output: [(41 21 8 15) 8]
Test Case: 219 | Input/Output: [(87 35 22 62) 22]
Test Case: 220 | Input/Output: [(44 54 84 90) 44]
Test Case: 221 | Input/Output: [(32 68 45 42) 32]
Test Case: 222 | Input/Output: [(71 73 90 14) 14]
Test Case: 223 | Input/Output: [(10 29 17 84) 10]
Test Case: 224 | Input/Output: [(30 97 30 40) 30]
Test Case: 225 | Input/Output: [(25 93 62 98) 25]
Test Case: 226 | Input/Output: [(66 29 85 49) 29]
Test Case: 227 | Input/Output: [(22 97 32 26) 22]
Test Case: 228 | Input/Output: [(99 66 42 85) 42]
Test Case: 229 | Input/Output: [(12 3 18 80) 3]
Test Case: 230 | Input/Output: [(67 23 95 84) 23]
Test Case: 231 | Input/Output: [(42 20 92 59) 20]
Test Case: 232 | Input/Output: [(2 43 79 25) 2]
Test Case: 233 | Input/Output: [(56 35 59 92) 35]
Test Case: 234 | Input/Output: [(54 55 27 46) 27]
Test Case: 235 | Input/Output: [(1 28 74 22) 1]
Test Case: 236 | Input/Output: [(84 73 29 48) 29]
Test Case: 237 | Input/Output: [(44 44 40 35) 35]
Test Case: 238 | Input/Output: [(25 71 4 66) 4]
Test Case: 239 | Input/Output: [(5 52 34 49) 5]
Test Case: 240 | Input/Output: [(47 82 29 53) 29]
Test Case: 241 | Input/Output: [(65 6 47 29) 6]
Test Case: 242 | Input/Output: [(14 98 86 57) 14]
Test Case: 243 | Input/Output: [(30 29 93 3) 3]
Test Case: 244 | Input/Output: [(27 3 38 9) 3]
Test Case: 245 | Input/Output: [(92 39 53 18) 18]
Test Case: 246 | Input/Output: [(89 42 96 45) 42]
Test Case: 247 | Input/Output: [(74 20 46 43) 20]
Test Case: 248 | Input/Output: [(85 92 9 93) 9]
Test Case: 249 | Input/Output: [(73 61 60 18) 18]
Test Case: 250 | Input/Output: [(75 76 79 76) 75]
Test Case: 251 | Input/Output: [(5 5 75 1) 1]
Test Case: 252 | Input/Output: [(48 24 91 76) 24]
Test Case: 253 | Input/Output: [(33 32 79 51) 32]
Test Case: 254 | Input/Output: [(29 93 44 69) 29]
Test Case: 255 | Input/Output: [(64 7 7 21) 7]
Test Case: 256 | Input/Output: [(68 5 9 34) 5]
Test Case: 257 | Input/Output: [(21 58 17 47) 17]
Test Case: 258 | Input/Output: [(92 26 67 15) 15]
Test Case: 259 | Input/Output: [(67 18 26 40) 18]
Test Case: 260 | Input/Output: [(81 88 4 6) 4]
Test Case: 261 | Input/Output: [(84 71 97 74) 71]
Test Case: 262 | Input/Output: [(33 30 84 17) 17]
Test Case: 263 | Input/Output: [(8 42 65 65) 8]
Test Case: 264 | Input/Output: [(24 10 28 58) 10]
Test Case: 265 | Input/Output: [(13 14 54 28) 13]
Test Case: 266 | Input/Output: [(23 97 5 60) 5]
Test Case: 267 | Input/Output: [(16 13 42 10) 10]
Test Case: 268 | Input/Output: [(22 68 29 85) 22]
Test Case: 269 | Input/Output: [(35 93 7 58) 7]
Test Case: 270 | Input/Output: [(26 4 75 57) 4]
Test Case: 271 | Input/Output: [(74 28 63 60) 28]
Test Case: 272 | Input/Output: [(100 47 3 95) 3]
Test Case: 273 | Input/Output: [(100 23 60 7) 7]
Test Case: 274 | Input/Output: [(55 86 91 83) 55]
Test Case: 275 | Input/Output: [(9 37 34 74) 9]
Test Case: 276 | Input/Output: [(58 7 19 71) 7]
Test Case: 277 | Input/Output: [(89 33 43 59) 33]
Test Case: 278 | Input/Output: [(95 75 78 78) 75]
Test Case: 279 | Input/Output: [(10 88 38 5) 5]
Test Case: 280 | Input/Output: [(12 13 82 98) 12]
Test Case: 281 | Input/Output: [(68 9 93 90) 9]
Test Case: 282 | Input/Output: [(37 78 16 95) 16]
Test Case: 283 | Input/Output: [(38 61 87 92) 38]
Test Case: 284 | Input/Output: [(91 36 6 26) 6]
Test Case: 285 | Input/Output: [(59 93 41 71) 41]
Test Case: 286 | Input/Output: [(100 58 5 89) 5]
Test Case: 287 | Input/Output: [(5 0 78 97) 0]
Test Case: 288 | Input/Output: [(1 86 62 93) 1]
Test Case: 289 | Input/Output: [(6 50 30 76) 6]
Test Case: 290 | Input/Output: [(7 75 45 93) 7]
Test Case: 291 | Input/Output: [(76 69 18 58) 18]
Test Case: 292 | Input/Output: [(51 65 41 52) 41]
Test Case: 293 | Input/Output: [(15 79 12 36) 12]
Test Case: 294 | Input/Output: [(21 36 75 3) 3]
Test Case: 295 | Input/Output: [(59 2 94 55) 2]
Test Case: 296 | Input/Output: [(54 84 75 20) 20]
Test Case: 297 | Input/Output: [(93 75 89 77) 75]
Test Case: 298 | Input/Output: [(65 7 100 47) 7]
Test Case: 299 | Input/Output: [(91 37 85 60) 37]
Test Case: 300 | Input/Output: [(53 88 83 95) 53]
Test Case: 301 | Input/Output: [(43 38 12 7) 7]
Test Case: 302 | Input/Output: [(39 86 46 75) 39]
Test Case: 303 | Input/Output: [(99 58 48 24) 24]
Test Case: 304 | Input/Output: [(58 0 8 49) 0]
Test Case: 305 | Input/Output: [(42 28 0 15) 0]
Test Case: 306 | Input/Output: [(24 20 37 83) 20]
Test Case: 307 | Input/Output: [(7 73 17 11) 7]
Test Case: 308 | Input/Output: [(0 82 53 31) 0]
Test Case: 309 | Input/Output: [(74 2 7 19) 2]
Test Case: 310 | Input/Output: [(78 38 94 59) 38]
Test Case: 311 | Input/Output: [(69 8 69 85) 8]
Test Case: 312 | Input/Output: [(62 70 89 84) 62]
Test Case: 313 | Input/Output: [(46 20 21 29) 20]
Test Case: 314 | Input/Output: [(47 93 17 90) 17]
Test Case: 315 | Input/Output: [(60 17 77 63) 17]
Test Case: 316 | Input/Output: [(54 78 47 31) 31]
Test Case: 317 | Input/Output: [(89 71 71 60) 60]
Test Case: 318 | Input/Output: [(22 75 30 94) 22]
Test Case: 319 | Input/Output: [(46 61 54 78) 46]
Test Case: 320 | Input/Output: [(24 99 65 57) 24]
Test Case: 321 | Input/Output: [(66 86 81 3) 3]
Test Case: 322 | Input/Output: [(0 84 91 78) 0]
Test Case: 323 | Input/Output: [(62 32 24 70) 24]
Test Case: 324 | Input/Output: [(33 44 39 69) 33]
Test Case: 325 | Input/Output: [(79 36 64 79) 36]
Test Case: 326 | Input/Output: [(98 65 33 75) 33]
Test Case: 327 | Input/Output: [(46 29 53 35) 29]
Test Case: 328 | Input/Output: [(14 81 15 26) 14]
Test Case: 329 | Input/Output: [(13 37 96 100) 13]
Test Case: 330 | Input/Output: [(31 33 2 77) 2]
Test Case: 331 | Input/Output: [(31 90 94 28) 28]
Test Case: 332 | Input/Output: [(74 95 44 41) 41]
Test Case: 333 | Input/Output: [(95 6 89 47) 6]
Test Case: 334 | Input/Output: [(70 5 6 93) 5]
Test Case: 335 | Input/Output: [(43 74 36 69) 36]
Test Case: 336 | Input/Output: [(16 84 39 15) 15]
Test Case: 337 | Input/Output: [(80 29 41 29) 29]
Test Case: 338 | Input/Output: [(69 98 82 14) 14]
Test Case: 339 | Input/Output: [(59 17 42 8) 8]
Test Case: 340 | Input/Output: [(55 34 12 6) 6]
Test Case: 341 | Input/Output: [(73 89 70 74) 70]
Test Case: 342 | Input/Output: [(40 96 8 38) 8]
Test Case: 343 | Input/Output: [(79 73 32 69) 32]
Test Case: 344 | Input/Output: [(22 93 43 28) 22]
Test Case: 345 | Input/Output: [(87 49 11 29) 11]
Test Case: 346 | Input/Output: [(75 8 34 25) 8]
Test Case: 347 | Input/Output: [(16 2 46 88) 2]
Test Case: 348 | Input/Output: [(51 22 90 93) 22]
Test Case: 349 | Input/Output: [(51 26 93 14) 14]
Test Case: 350 | Input/Output: [(78 17 70 63) 17]
Test Case: 351 | Input/Output: [(49 10 18 76) 10]
Test Case: 352 | Input/Output: [(5 5 91 49) 5]
Test Case: 353 | Input/Output: [(5 58 61 97) 5]
Test Case: 354 | Input/Output: [(90 37 11 7) 7]
Test Case: 355 | Input/Output: [(4 90 67 10) 4]
Test Case: 356 | Input/Output: [(20 49 44 69) 20]
Test Case: 357 | Input/Output: [(7 87 81 31) 7]
Test Case: 358 | Input/Output: [(19 74 73 40) 19]
Test Case: 359 | Input/Output: [(5 46 98 53) 5]
Test Case: 360 | Input/Output: [(98 41 20 73) 20]
Test Case: 361 | Input/Output: [(65 76 61 95) 61]
Test Case: 362 | Input/Output: [(88 1 12 25) 1]
Test Case: 363 | Input/Output: [(13 71 7 76) 7]
Test Case: 364 | Input/Output: [(100 35 89 2) 2]
Test Case: 365 | Input/Output: [(29 4 14 92) 4]
Test Case: 366 | Input/Output: [(61 65 42 33) 33]
Test Case: 367 | Input/Output: [(95 15 53 12) 12]
Test Case: 368 | Input/Output: [(82 67 51 76) 51]
Test Case: 369 | Input/Output: [(37 20 27 21) 20]
Test Case: 370 | Input/Output: [(15 49 75 11) 11]
Test Case: 371 | Input/Output: [(52 34 2 85) 2]
Test Case: 372 | Input/Output: [(28 29 12 23) 12]
Test Case: 373 | Input/Output: [(36 53 56 8) 8]
Test Case: 374 | Input/Output: [(24 24 65 11) 11]
Test Case: 375 | Input/Output: [(14 75 11 67) 11]
Test Case: 376 | Input/Output: [(71 92 100 27) 27]
Test Case: 377 | Input/Output: [(61 66 17 63) 17]
Test Case: 378 | Input/Output: [(41 22 25 14) 14]
Test Case: 379 | Input/Output: [(14 66 16 57) 14]
Test Case: 380 | Input/Output: [(89 5 25 33) 5]
Test Case: 381 | Input/Output: [(0 57 41 56) 0]
Test Case: 382 | Input/Output: [(30 38 64 43) 30]
Test Case: 383 | Input/Output: [(20 8 47 94) 8]
Test Case: 384 | Input/Output: [(45 51 91 76) 45]
Test Case: 385 | Input/Output: [(30 24 82 65) 24]
Test Case: 386 | Input/Output: [(27 16 90 36) 16]
Test Case: 387 | Input/Output: [(49 50 1 29) 1]
Test Case: 388 | Input/Output: [(29 42 40 57) 29]
Test Case: 389 | Input/Output: [(1 9 26 19) 1]
Test Case: 390 | Input/Output: [(77 61 31 16) 16]
Test Case: 391 | Input/Output: [(27 62 10 44) 10]
Test Case: 392 | Input/Output: [(100 9 76 42) 9]
Test Case: 393 | Input/Output: [(17 8 31 33) 8]
Test Case: 394 | Input/Output: [(20 82 60 88) 20]
Test Case: 395 | Input/Output: [(34 7 47 39) 7]
Test Case: 396 | Input/Output: [(96 95 18 67) 18]
Test Case: 397 | Input/Output: [(17 63 67 86) 17]
Test Case: 398 | Input/Output: [(12 10 65 34) 10]
Test Case: 399 | Input/Output: [(96 16 36 75) 16]
Test Case: 400 | Input/Output: [(-26 -77 59 31) -77]
Test Case: 401 | Input/Output: [(74 -85 72 56) -85]
Test Case: 402 | Input/Output: [(-34 21 8 -19) -34]
Test Case: 403 | Input/Output: [(40 64 58 23) 23]
Test Case: 404 | Input/Output: [(-13 -95 52 77) -95]
Test Case: 405 | Input/Output: [(-38 -32 -74 74) -74]
Test Case: 406 | Input/Output: [(-26 -24 -56 -25) -56]
Test Case: 407 | Input/Output: [(25 42 -64 81) -64]
Test Case: 408 | Input/Output: [(99 -86 9 -34) -86]
Test Case: 409 | Input/Output: [(-82 36 24 55) -82]
Test Case: 410 | Input/Output: [(46 -2 59 38) -2]
Test Case: 411 | Input/Output: [(-57 -70 42 -14) -70]
Test Case: 412 | Input/Output: [(-88 -32 -90 69) -90]
Test Case: 413 | Input/Output: [(27 49 26 55) 26]
Test Case: 414 | Input/Output: [(63 66 -9 -6) -9]
Test Case: 415 | Input/Output: [(-66 -81 -88 -12) -88]
Test Case: 416 | Input/Output: [(66 13 -73 88) -73]
Test Case: 417 | Input/Output: [(-92 -96 -85 57) -96]
Test Case: 418 | Input/Output: [(91 32 46 64) 32]
Test Case: 419 | Input/Output: [(10 24 -41 3) -41]
Test Case: 420 | Input/Output: [(12 2 -32 0) -32]
Test Case: 421 | Input/Output: [(-70 -55 -64 64) -70]
Test Case: 422 | Input/Output: [(12 -19 60 79) -19]
Test Case: 423 | Input/Output: [(60 -8 82 -76) -76]
Test Case: 424 | Input/Output: [(88 50 -47 36) -47]
Test Case: 425 | Input/Output: [(-27 20 -4 2) -27]
Test Case: 426 | Input/Output: [(-28 94 3 -28) -28]
Test Case: 427 | Input/Output: [(-56 95 -26 100) -56]
Test Case: 428 | Input/Output: [(49 64 -69 35) -69]
Test Case: 429 | Input/Output: [(-54 -6 6 -74) -74]
Test Case: 430 | Input/Output: [(50 -74 57 -23) -74]
Test Case: 431 | Input/Output: [(15 -69 -50 12) -69]
Test Case: 432 | Input/Output: [(92 27 92 -64) -64]
Test Case: 433 | Input/Output: [(95 39 44 -100) -100]
Test Case: 434 | Input/Output: [(-38 -39 -77 88) -77]
Test Case: 435 | Input/Output: [(-94 37 -30 17) -94]
Test Case: 436 | Input/Output: [(73 31 -100 -40) -100]
Test Case: 437 | Input/Output: [(-56 87 -51 -91) -91]
Test Case: 438 | Input/Output: [(34 70 31 -78) -78]
Test Case: 439 | Input/Output: [(-15 -44 -12 -10) -44]
Test Case: 440 | Input/Output: [(-10 -45 -78 -40) -78]
Test Case: 441 | Input/Output: [(43 58 -29 -13) -29]
Test Case: 442 | Input/Output: [(-92 61 -24 -21) -92]
Test Case: 443 | Input/Output: [(-48 -24 -4 62) -48]
Test Case: 444 | Input/Output: [(17 12 -100 -5) -100]
Test Case: 445 | Input/Output: [(96 -2 74 -85) -85]
Test Case: 446 | Input/Output: [(-51 -12 70 31) -51]
Test Case: 447 | Input/Output: [(90 -98 88 74) -98]
Test Case: 448 | Input/Output: [(10 46 61 -35) -35]
Test Case: 449 | Input/Output: [(23 45 52 53) 23]
Test Case: 450 | Input/Output: [(-43 42 98 -54) -54]
Test Case: 451 | Input/Output: [(28 93 -48 -19) -48]
Test Case: 452 | Input/Output: [(-68 32 61 48) -68]
Test Case: 453 | Input/Output: [(1 3 77 99) 1]
Test Case: 454 | Input/Output: [(-48 30 -65 -29) -65]
Test Case: 455 | Input/Output: [(27 30 35 -78) -78]
Test Case: 456 | Input/Output: [(-11 86 -11 80) -11]
Test Case: 457 | Input/Output: [(-81 34 17 -29) -81]
Test Case: 458 | Input/Output: [(-11 81 96 98) -11]
Test Case: 459 | Input/Output: [(-4 -58 -58 -29) -58]
Test Case: 460 | Input/Output: [(81 18 93 -59) -59]
Test Case: 461 | Input/Output: [(77 -98 -61 -42) -98]
Test Case: 462 | Input/Output: [(40 -7 63 56) -7]
Test Case: 463 | Input/Output: [(83 92 -37 -77) -77]
Test Case: 464 | Input/Output: [(65 -46 -46 -97) -97]
Test Case: 465 | Input/Output: [(-84 -67 -95 25) -95]
Test Case: 466 | Input/Output: [(-3 -88 -9 -100) -100]
Test Case: 467 | Input/Output: [(46 74 -13 83) -13]
Test Case: 468 | Input/Output: [(51 80 14 78) 14]
Test Case: 469 | Input/Output: [(6 -16 -50 -4) -50]
Test Case: 470 | Input/Output: [(30 78 34 20) 20]
Test Case: 471 | Input/Output: [(-92 -36 6 -47) -92]
Test Case: 472 | Input/Output: [(-65 0 15 -6) -65]
Test Case: 473 | Input/Output: [(39 -42 -54 47) -54]
Test Case: 474 | Input/Output: [(-93 85 99 -80) -93]
Test Case: 475 | Input/Output: [(-56 0 61 40) -56]
Test Case: 476 | Input/Output: [(61 -7 -35 -72) -72]
Test Case: 477 | Input/Output: [(44 92 -83 70) -83]
Test Case: 478 | Input/Output: [(-2 -8 -86 73) -86]
Test Case: 479 | Input/Output: [(54 -70 59 -53) -70]
Test Case: 480 | Input/Output: [(-80 -54 -77 -1) -80]
Test Case: 481 | Input/Output: [(-48 -74 45 -11) -74]
Test Case: 482 | Input/Output: [(-80 -34 86 76) -80]
Test Case: 483 | Input/Output: [(-72 74 -88 -21) -88]
Test Case: 484 | Input/Output: [(-41 -10 73 2) -41]
Test Case: 485 | Input/Output: [(-52 64 98 100) -52]
Test Case: 486 | Input/Output: [(45 15 54 65) 15]
Test Case: 487 | Input/Output: [(-4 24 -65 -32) -65]
Test Case: 488 | Input/Output: [(-77 68 28 -64) -77]
Test Case: 489 | Input/Output: [(27 -53 -7 40) -53]
Test Case: 490 | Input/Output: [(71 54 -13 26) -13]
Test Case: 491 | Input/Output: [(49 1 -96 35) -96]
Test Case: 492 | Input/Output: [(-60 98 -32 55) -60]
Test Case: 493 | Input/Output: [(-65 24 92 33) -65]
Test Case: 494 | Input/Output: [(-9 -57 63 24) -57]
Test Case: 495 | Input/Output: [(100 -76 38 79) -76]
Test Case: 496 | Input/Output: [(-5 -39 -68 13) -68]
Test Case: 497 | Input/Output: [(-67 97 -53 -49) -67]
Test Case: 498 | Input/Output: [(18 96 -65 -25) -65]
Test Case: 499 | Input/Output: [(-94 100 77 55) -94]
Test Case: 500 | Input/Output: [(-38 79 -100 80) -100]
Test Case: 501 | Input/Output: [(-37 -98 -19 -90) -98]
Test Case: 502 | Input/Output: [(18 46 -52 -71) -71]
Test Case: 503 | Input/Output: [(-23 73 19 -90) -90]
Test Case: 504 | Input/Output: [(74 -25 -95 -97) -97]
Test Case: 505 | Input/Output: [(34 -100 72 -16) -100]
Test Case: 506 | Input/Output: [(22 95 28 55) 22]
Test Case: 507 | Input/Output: [(90 -24 97 -79) -79]
Test Case: 508 | Input/Output: [(9 -100 -79 68) -100]
Test Case: 509 | Input/Output: [(-17 57 -50 71) -50]
Test Case: 510 | Input/Output: [(-71 30 -32 3) -71]
Test Case: 511 | Input/Output: [(37 -85 58 -21) -85]
Test Case: 512 | Input/Output: [(-20 12 84 -24) -24]
Test Case: 513 | Input/Output: [(38 19 -100 78) -100]
Test Case: 514 | Input/Output: [(68 -18 21 -38) -38]
Test Case: 515 | Input/Output: [(-44 -32 -87 82) -87]
Test Case: 516 | Input/Output: [(-57 -10 -2 28) -57]
Test Case: 517 | Input/Output: [(96 96 -38 -88) -88]
Test Case: 518 | Input/Output: [(4 -71 -60 14) -71]
Test Case: 519 | Input/Output: [(-7 -27 -81 2) -81]
Test Case: 520 | Input/Output: [(37 46 97 84) 37]
Test Case: 521 | Input/Output: [(-24 89 -1 24) -24]
Test Case: 522 | Input/Output: [(-71 -15 41 -21) -71]
Test Case: 523 | Input/Output: [(-20 98 1 -46) -46]
Test Case: 524 | Input/Output: [(-39 32 43 11) -39]
Test Case: 525 | Input/Output: [(60 -44 56 90) -44]
Test Case: 526 | Input/Output: [(-1 -49 34 -36) -49]
Test Case: 527 | Input/Output: [(45 34 66 56) 34]
Test Case: 528 | Input/Output: [(-49 -18 -53 -37) -53]
Test Case: 529 | Input/Output: [(64 30 -60 -57) -60]
Test Case: 530 | Input/Output: [(25 95 -33 23) -33]
Test Case: 531 | Input/Output: [(-99 41 -65 58) -99]
Test Case: 532 | Input/Output: [(-59 -44 24 91) -59]
Test Case: 533 | Input/Output: [(-76 -79 90 11) -79]
Test Case: 534 | Input/Output: [(44 32 66 38) 32]
Test Case: 535 | Input/Output: [(64 -22 12 -13) -22]
Test Case: 536 | Input/Output: [(80 -30 -9 -77) -77]
Test Case: 537 | Input/Output: [(56 -71 36 -35) -71]
Test Case: 538 | Input/Output: [(-61 -77 -46 6) -77]
Test Case: 539 | Input/Output: [(90 51 79 -17) -17]
Test Case: 540 | Input/Output: [(-99 39 -86 -67) -99]
Test Case: 541 | Input/Output: [(-72 -16 -99 37) -99]
Test Case: 542 | Input/Output: [(-68 -2 92 -86) -86]
Test Case: 543 | Input/Output: [(73 48 -57 32) -57]
Test Case: 544 | Input/Output: [(-50 98 40 -100) -100]
Test Case: 545 | Input/Output: [(-18 56 -9 13) -18]
Test Case: 546 | Input/Output: [(-62 -4 -34 27) -62]
Test Case: 547 | Input/Output: [(97 -27 78 60) -27]
Test Case: 548 | Input/Output: [(-45 -56 26 84) -56]
Test Case: 549 | Input/Output: [(35 45 -23 -21) -23]
Test Case: 550 | Input/Output: [(51 -65 61 33) -65]
Test Case: 551 | Input/Output: [(46 16 8 27) 8]
Test Case: 552 | Input/Output: [(-12 23 88 -92) -92]
Test Case: 553 | Input/Output: [(-33 -66 47 -9) -66]
Test Case: 554 | Input/Output: [(6 18 -66 -65) -66]
Test Case: 555 | Input/Output: [(92 10 -38 42) -38]
Test Case: 556 | Input/Output: [(-58 31 89 -60) -60]
Test Case: 557 | Input/Output: [(24 -82 86 26) -82]
Test Case: 558 | Input/Output: [(69 33 63 47) 33]
Test Case: 559 | Input/Output: [(56 56 -70 -98) -98]
Test Case: 560 | Input/Output: [(12 -43 45 85) -43]
Test Case: 561 | Input/Output: [(19 0 -56 -61) -61]
Test Case: 562 | Input/Output: [(-27 -96 -81 27) -96]
Test Case: 563 | Input/Output: [(51 33 95 -89) -89]
Test Case: 564 | Input/Output: [(12 93 59 -93) -93]
Test Case: 565 | Input/Output: [(0 71 39 72) 0]
Test Case: 566 | Input/Output: [(-24 7 90 35) -24]
Test Case: 567 | Input/Output: [(-42 -37 66 61) -42]
Test Case: 568 | Input/Output: [(77 26 -66 -5) -66]
Test Case: 569 | Input/Output: [(48 -10 -50 27) -50]
Test Case: 570 | Input/Output: [(-74 100 -87 8) -87]
Test Case: 571 | Input/Output: [(-99 -69 -23 -46) -99]
Test Case: 572 | Input/Output: [(13 11 28 -16) -16]
Test Case: 573 | Input/Output: [(45 90 -60 -81) -81]
Test Case: 574 | Input/Output: [(-74 -10 40 -31) -74]
Test Case: 575 | Input/Output: [(-18 -3 -90 -52) -90]
Test Case: 576 | Input/Output: [(-92 47 90 -26) -92]
Test Case: 577 | Input/Output: [(-39 58 -38 79) -39]
Test Case: 578 | Input/Output: [(-60 -80 32 93) -80]
Test Case: 579 | Input/Output: [(85 57 -68 -25) -68]
Test Case: 580 | Input/Output: [(77 -22 -16 -89) -89]
Test Case: 581 | Input/Output: [(50 41 -89 76) -89]
Test Case: 582 | Input/Output: [(-17 -38 -48 17) -48]
Test Case: 583 | Input/Output: [(47 -72 63 32) -72]
Test Case: 584 | Input/Output: [(68 -81 -60 3) -81]
Test Case: 585 | Input/Output: [(58 -13 -31 40) -31]
Test Case: 586 | Input/Output: [(65 -92 42 67) -92]
Test Case: 587 | Input/Output: [(70 -57 -89 -69) -89]
Test Case: 588 | Input/Output: [(-22 -25 -34 -65) -65]
Test Case: 589 | Input/Output: [(-79 -46 54 8) -79]
Test Case: 590 | Input/Output: [(9 86 -42 74) -42]
Test Case: 591 | Input/Output: [(-85 -41 -56 95) -85]
Test Case: 592 | Input/Output: [(25 -21 -42 -13) -42]
Test Case: 593 | Input/Output: [(-39 59 -31 -37) -39]
Test Case: 594 | Input/Output: [(28 50 22 15) 15]
Test Case: 595 | Input/Output: [(-23 -17 -83 96) -83]
Test Case: 596 | Input/Output: [(7 -51 -56 27) -56]
Test Case: 597 | Input/Output: [(35 -29 20 82) -29]
Test Case: 598 | Input/Output: [(-72 -14 63 -44) -72]
Test Case: 599 | Input/Output: [(51 -86 -43 -50) -86]
Test Case: 600 | Input/Output: [(-42 -38 83 33) -42]
Test Case: 601 | Input/Output: [(74 -48 -42 -48) -48]
Test Case: 602 | Input/Output: [(56 -88 73 -66) -88]
Test Case: 603 | Input/Output: [(-95 44 -53 -43) -95]
Test Case: 604 | Input/Output: [(0 -6 29 -17) -17]
Test Case: 605 | Input/Output: [(-34 7 -52 87) -52]
Test Case: 606 | Input/Output: [(71 6 -16 52) -16]
Test Case: 607 | Input/Output: [(-87 -73 43 -97) -97]
Test Case: 608 | Input/Output: [(32 -59 25 -18) -59]
Test Case: 609 | Input/Output: [(-84 -44 -60 -57) -84]
Test Case: 610 | Input/Output: [(-87 -100 -44 -54) -100]
Test Case: 611 | Input/Output: [(-89 -56 -96 -22) -96]
Test Case: 612 | Input/Output: [(83 65 -14 59) -14]
Test Case: 613 | Input/Output: [(9 -94 0 33) -94]
Test Case: 614 | Input/Output: [(67 -4 -79 7) -79]
Test Case: 615 | Input/Output: [(25 -38 -34 -84) -84]
Test Case: 616 | Input/Output: [(75 -31 22 62) -31]
Test Case: 617 | Input/Output: [(-40 23 0 -70) -70]
Test Case: 618 | Input/Output: [(-100 -26 -90 65) -100]
Test Case: 619 | Input/Output: [(24 -95 -85 36) -95]
Test Case: 620 | Input/Output: [(36 3 -51 -100) -100]
Test Case: 621 | Input/Output: [(40 77 21 49) 21]
Test Case: 622 | Input/Output: [(-77 66 84 0) -77]
Test Case: 623 | Input/Output: [(-42 16 -24 -58) -58]
Test Case: 624 | Input/Output: [(48 15 15 69) 15]
Test Case: 625 | Input/Output: [(-89 -60 33 36) -89]
Test Case: 626 | Input/Output: [(-71 -29 80 80) -71]
Test Case: 627 | Input/Output: [(-47 51 -13 57) -47]
Test Case: 628 | Input/Output: [(52 -67 -42 -55) -67]
Test Case: 629 | Input/Output: [(-51 -49 67 40) -51]
Test Case: 630 | Input/Output: [(87 71 91 -100) -100]
Test Case: 631 | Input/Output: [(100 -42 -26 44) -42]
Test Case: 632 | Input/Output: [(-47 87 26 50) -47]
Test Case: 633 | Input/Output: [(6 8 -98 -37) -98]
Test Case: 634 | Input/Output: [(-5 70 63 -20) -20]
Test Case: 635 | Input/Output: [(7 -97 -14 -31) -97]
Test Case: 636 | Input/Output: [(-2 -55 73 -24) -55]
Test Case: 637 | Input/Output: [(-38 -85 88 -50) -85]
Test Case: 638 | Input/Output: [(-84 -10 63 0) -84]
Test Case: 639 | Input/Output: [(83 1 48 -40) -40]
Test Case: 640 | Input/Output: [(84 -27 -19 81) -27]
Test Case: 641 | Input/Output: [(76 79 33 43) 33]
Test Case: 642 | Input/Output: [(-50 -84 49 -91) -91]
Test Case: 643 | Input/Output: [(60 74 94 -58) -58]
Test Case: 644 | Input/Output: [(7 97 -11 -88) -88]
Test Case: 645 | Input/Output: [(-99 24 14 -78) -99]
Test Case: 646 | Input/Output: [(-51 72 61 36) -51]
Test Case: 647 | Input/Output: [(63 36 -60 -45) -60]
Test Case: 648 | Input/Output: [(96 -58 50 9) -58]
Test Case: 649 | Input/Output: [(59 100 -17 83) -17]
Test Case: 650 | Input/Output: [(74 75 90 57) 57]
Test Case: 651 | Input/Output: [(58 82 73 -24) -24]
Test Case: 652 | Input/Output: [(76 91 -48 91) -48]
Test Case: 653 | Input/Output: [(-48 73 85 -80) -80]
Test Case: 654 | Input/Output: [(-67 -16 2 58) -67]
Test Case: 655 | Input/Output: [(-29 93 88 -17) -29]
Test Case: 656 | Input/Output: [(-45 49 32 -13) -45]
Test Case: 657 | Input/Output: [(45 -23 -91 -96) -96]
Test Case: 658 | Input/Output: [(-70 68 6 -25) -70]
Test Case: 659 | Input/Output: [(-91 -7 -60 67) -91]
Test Case: 660 | Input/Output: [(37 -56 -82 82) -82]
Test Case: 661 | Input/Output: [(32 -48 5 -92) -92]
Test Case: 662 | Input/Output: [(8 28 -85 -13) -85]
Test Case: 663 | Input/Output: [(87 44 -23 -2) -23]
Test Case: 664 | Input/Output: [(-8 -63 -28 44) -63]
Test Case: 665 | Input/Output: [(-63 93 94 -71) -71]
Test Case: 666 | Input/Output: [(-8 97 -51 78) -51]
Test Case: 667 | Input/Output: [(66 -37 -40 75) -40]
Test Case: 668 | Input/Output: [(-45 89 66 58) -45]
Test Case: 669 | Input/Output: [(-14 -67 -62 -37) -67]
Test Case: 670 | Input/Output: [(-46 -71 51 46) -71]
Test Case: 671 | Input/Output: [(37 47 -58 31) -58]
Test Case: 672 | Input/Output: [(57 85 -68 -91) -91]
Test Case: 673 | Input/Output: [(-100 97 -27 -37) -100]
Test Case: 674 | Input/Output: [(80 2 10 -94) -94]
Test Case: 675 | Input/Output: [(13 -53 -55 -32) -55]
Test Case: 676 | Input/Output: [(-47 0 53 -39) -47]
Test Case: 677 | Input/Output: [(30 39 33 -5) -5]
Test Case: 678 | Input/Output: [(-77 17 81 16) -77]
Test Case: 679 | Input/Output: [(61 -13 71 -92) -92]
Test Case: 680 | Input/Output: [(2 79 7 -26) -26]
Test Case: 681 | Input/Output: [(-99 -95 -63 -73) -99]
Test Case: 682 | Input/Output: [(-66 50 -50 11) -66]
Test Case: 683 | Input/Output: [(43 40 59 -65) -65]
Test Case: 684 | Input/Output: [(-90 7 -69 -96) -96]
Test Case: 685 | Input/Output: [(21 38 -68 -78) -78]
Test Case: 686 | Input/Output: [(35 -1 86 -6) -6]
Test Case: 687 | Input/Output: [(29 100 78 -10) -10]
Test Case: 688 | Input/Output: [(15 72 89 -53) -53]
Test Case: 689 | Input/Output: [(54 -97 -87 -68) -97]
Test Case: 690 | Input/Output: [(46 60 -8 7) -8]
Test Case: 691 | Input/Output: [(-82 34 -69 85) -82]
Test Case: 692 | Input/Output: [(68 71 -14 95) -14]
Test Case: 693 | Input/Output: [(-71 96 60 -25) -71]
Test Case: 694 | Input/Output: [(-82 61 48 -65) -82]
Test Case: 695 | Input/Output: [(-51 -87 69 89) -87]
Test Case: 696 | Input/Output: [(-96 99 -3 -45) -96]
Test Case: 697 | Input/Output: [(-84 -90 -16 76) -90]
Test Case: 698 | Input/Output: [(88 -50 5 6) -50]
Test Case: 699 | Input/Output: [(-47 80 49 -50) -50]
Test Case: 700 | Input/Output: [(-6 26 -17 91) -17]
Test Case: 701 | Input/Output: [(39 23 54 46) 23]
Test Case: 702 | Input/Output: [(-17 72 -77 -62) -77]
Test Case: 703 | Input/Output: [(23 91 45 -7) -7]
Test Case: 704 | Input/Output: [(57 -47 -78 -46) -78]
Test Case: 705 | Input/Output: [(-10 37 28 -78) -78]
Test Case: 706 | Input/Output: [(30 -15 -73 46) -73]
Test Case: 707 | Input/Output: [(-42 75 55 27) -42]
Test Case: 708 | Input/Output: [(20 -4 47 37) -4]
Test Case: 709 | Input/Output: [(22 -96 12 49) -96]
Test Case: 710 | Input/Output: [(9 98 40 -75) -75]
Test Case: 711 | Input/Output: [(-14 80 -17 82) -17]
Test Case: 712 | Input/Output: [(-97 -87 -65 -67) -97]
Test Case: 713 | Input/Output: [(-50 -70 20 -66) -70]
Test Case: 714 | Input/Output: [(91 51 -95 -96) -96]
Test Case: 715 | Input/Output: [(17 8 -83 -73) -83]
Test Case: 716 | Input/Output: [(81 53 59 -35) -35]
Test Case: 717 | Input/Output: [(54 75 -83 96) -83]
Test Case: 718 | Input/Output: [(55 97 43 32) 32]
Test Case: 719 | Input/Output: [(86 -77 76 93) -77]
Test Case: 720 | Input/Output: [(54 -53 -24 -69) -69]
Test Case: 721 | Input/Output: [(-30 25 73 97) -30]
Test Case: 722 | Input/Output: [(-6 -5 -99 -11) -99]
Test Case: 723 | Input/Output: [(0 -81 81 -24) -81]
Test Case: 724 | Input/Output: [(-19 -9 -11 -48) -48]
Test Case: 725 | Input/Output: [(-8 -86 63 -10) -86]
Test Case: 726 | Input/Output: [(88 -76 72 87) -76]
Test Case: 727 | Input/Output: [(-77 -35 89 40) -77]
Test Case: 728 | Input/Output: [(-36 -85 98 -95) -95]
Test Case: 729 | Input/Output: [(24 8 33 60) 8]
Test Case: 730 | Input/Output: [(58 95 -64 88) -64]
Test Case: 731 | Input/Output: [(-68 5 -56 15) -68]
Test Case: 732 | Input/Output: [(92 83 -77 -24) -77]
Test Case: 733 | Input/Output: [(70 -63 -92 -53) -92]
Test Case: 734 | Input/Output: [(45 -5 -99 20) -99]
Test Case: 735 | Input/Output: [(-17 23 -87 58) -87]
Test Case: 736 | Input/Output: [(35 -93 -3 60) -93]
Test Case: 737 | Input/Output: [(-7 80 -64 -37) -64]
Test Case: 738 | Input/Output: [(21 77 -48 0) -48]
Test Case: 739 | Input/Output: [(-25 14 61 -90) -90]
Test Case: 740 | Input/Output: [(-49 -93 30 -51) -93]
Test Case: 741 | Input/Output: [(-45 34 -43 5) -45]
Test Case: 742 | Input/Output: [(89 -98 63 56) -98]
Test Case: 743 | Input/Output: [(0 -57 41 77) -57]
Test Case: 744 | Input/Output: [(-97 -76 79 -37) -97]
Test Case: 745 | Input/Output: [(-48 -29 -74 14) -74]
Test Case: 746 | Input/Output: [(19 -98 58 88) -98]
Test Case: 747 | Input/Output: [(-88 -98 53 17) -98]
Test Case: 748 | Input/Output: [(-55 -61 -81 -13) -81]
Test Case: 749 | Input/Output: [(-51 8 -45 15) -51]
Test Case: 750 | Input/Output: [(-37 -47 -70 12) -70]
Test Case: 751 | Input/Output: [(-69 -18 32 25) -69]
Test Case: 752 | Input/Output: [(27 62 55 78) 27]
Test Case: 753 | Input/Output: [(85 55 92 39) 39]
Test Case: 754 | Input/Output: [(-98 14 -59 -30) -98]
Test Case: 755 | Input/Output: [(28 -77 93 8) -77]
Test Case: 756 | Input/Output: [(45 90 48 -39) -39]
Test Case: 757 | Input/Output: [(48 -97 59 85) -97]
Test Case: 758 | Input/Output: [(-74 23 88 -60) -74]
Test Case: 759 | Input/Output: [(-34 53 -25 -94) -94]
Test Case: 760 | Input/Output: [(61 71 -96 83) -96]
Test Case: 761 | Input/Output: [(68 35 -40 86) -40]
Test Case: 762 | Input/Output: [(-8 -21 -84 75) -84]
Test Case: 763 | Input/Output: [(-86 17 -65 -13) -86]
Test Case: 764 | Input/Output: [(63 99 -25 -9) -25]
Test Case: 765 | Input/Output: [(61 -33 87 49) -33]
Test Case: 766 | Input/Output: [(-55 60 -80 -86) -86]
Test Case: 767 | Input/Output: [(80 97 -63 4) -63]
Test Case: 768 | Input/Output: [(-35 -63 4 71) -63]
Test Case: 769 | Input/Output: [(-12 65 86 -19) -19]
Test Case: 770 | Input/Output: [(-22 39 17 87) -22]
Test Case: 771 | Input/Output: [(-78 60 -53 53) -78]
Test Case: 772 | Input/Output: [(91 46 55 29) 29]
Test Case: 773 | Input/Output: [(16 23 10 92) 10]
Test Case: 774 | Input/Output: [(-6 37 -60 15) -60]
Test Case: 775 | Input/Output: [(60 -49 -20 -12) -49]
Test Case: 776 | Input/Output: [(-67 -74 17 -16) -74]
Test Case: 777 | Input/Output: [(-46 44 -84 31) -84]
Test Case: 778 | Input/Output: [(-77 -14 85 -100) -100]
Test Case: 779 | Input/Output: [(-62 28 -59 -89) -89]
Test Case: 780 | Input/Output: [(36 58 -66 -7) -66]
Test Case: 781 | Input/Output: [(62 93 28 12) 12]
Test Case: 782 | Input/Output: [(-27 11 -64 59) -64]
Test Case: 783 | Input/Output: [(-84 66 60 -9) -84]
Test Case: 784 | Input/Output: [(-27 -73 -12 -16) -73]
Test Case: 785 | Input/Output: [(13 -13 -34 -13) -34]
Test Case: 786 | Input/Output: [(11 -80 12 -36) -80]
Test Case: 787 | Input/Output: [(77 -8 98 69) -8]
Test Case: 788 | Input/Output: [(8 86 -76 -6) -76]
Test Case: 789 | Input/Output: [(-56 85 52 -18) -56]
Test Case: 790 | Input/Output: [(6 36 56 49) 6]
Test Case: 791 | Input/Output: [(22 -25 -20 -37) -37]
Test Case: 792 | Input/Output: [(57 -83 74 -27) -83]
Test Case: 793 | Input/Output: [(6 -81 3 80) -81]
Test Case: 794 | Input/Output: [(92 49 14 27) 14]
Test Case: 795 | Input/Output: [(54 17 -89 -24) -89]
Test Case: 796 | Input/Output: [(-28 -93 5 -10) -93]
Test Case: 797 | Input/Output: [(-17 42 9 4) -17]
Test Case: 798 | Input/Output: [(89 18 78 -66) -66]
Test Case: 799 | Input/Output: [(-56 -4 77 -59) -59]
Test Case: 800 | Input/Output: [(2 21 27 -65) -65]
Test Case: 801 | Input/Output: [(-52 11 -47 -74) -74]
Test Case: 802 | Input/Output: [(-54 11 81 -79) -79]
Test Case: 803 | Input/Output: [(-90 -99 -96 -32) -99]
Test Case: 804 | Input/Output: [(45 -14 -21 47) -21]
Test Case: 805 | Input/Output: [(15 94 -18 56) -18]
Test Case: 806 | Input/Output: [(-40 -93 81 35) -93]
Test Case: 807 | Input/Output: [(-51 -75 -60 -72) -75]
Test Case: 808 | Input/Output: [(-70 52 74 91) -70]
Test Case: 809 | Input/Output: [(-20 20 -59 7) -59]
Test Case: 810 | Input/Output: [(-67 -88 87 -67) -88]
Test Case: 811 | Input/Output: [(89 -19 -54 16) -54]
Test Case: 812 | Input/Output: [(-47 -10 89 97) -47]
Test Case: 813 | Input/Output: [(-60 -25 78 -11) -60]
Test Case: 814 | Input/Output: [(-5 53 33 53) -5]
Test Case: 815 | Input/Output: [(-88 -1 -63 -66) -88]
Test Case: 816 | Input/Output: [(35 -13 66 10) -13]
Test Case: 817 | Input/Output: [(92 57 8 -45) -45]
Test Case: 818 | Input/Output: [(57 30 66 -61) -61]
Test Case: 819 | Input/Output: [(-14 80 -6 62) -14]
Test Case: 820 | Input/Output: [(-62 74 87 75) -62]
Test Case: 821 | Input/Output: [(33 31 2 -48) -48]
Test Case: 822 | Input/Output: [(84 -23 -79 -74) -79]
Test Case: 823 | Input/Output: [(97 51 6 60) 6]
Test Case: 824 | Input/Output: [(75 -41 7 31) -41]
Test Case: 825 | Input/Output: [(4 -17 26 -61) -61]
Test Case: 826 | Input/Output: [(-1 -57 83 -47) -57]
Test Case: 827 | Input/Output: [(34 19 -42 -53) -53]
Test Case: 828 | Input/Output: [(-6 -89 66 38) -89]
Test Case: 829 | Input/Output: [(-68 -29 -73 -48) -73]
Test Case: 830 | Input/Output: [(-69 -59 92 -43) -69]
Test Case: 831 | Input/Output: [(48 49 -16 -23) -23]
Test Case: 832 | Input/Output: [(77 -9 52 48) -9]
Test Case: 833 | Input/Output: [(100 -100 85 -89) -100]
Test Case: 834 | Input/Output: [(12 -11 -8 17) -11]
Test Case: 835 | Input/Output: [(-11 -26 40 17) -26]
Test Case: 836 | Input/Output: [(58 34 -29 -83) -83]
Test Case: 837 | Input/Output: [(29 -100 -97 -15) -100]
Test Case: 838 | Input/Output: [(91 35 -76 -8) -76]
Test Case: 839 | Input/Output: [(-34 -29 92 20) -34]
Test Case: 840 | Input/Output: [(68 37 82 65) 37]
Test Case: 841 | Input/Output: [(2 -71 -21 27) -71]
Test Case: 842 | Input/Output: [(65 53 18 28) 18]
Test Case: 843 | Input/Output: [(-17 -37 32 -42) -42]
Test Case: 844 | Input/Output: [(-57 62 -70 -11) -70]
Test Case: 845 | Input/Output: [(-36 -54 92 32) -54]
Test Case: 846 | Input/Output: [(-8 50 10 57) -8]
Test Case: 847 | Input/Output: [(18 44 26 -9) -9]
Test Case: 848 | Input/Output: [(-44 78 -64 -95) -95]
Test Case: 849 | Input/Output: [(-38 10 68 88) -38]
Test Case: 850 | Input/Output: [(36 -60 43 43) -60]
Test Case: 851 | Input/Output: [(-51 70 -82 -63) -82]
Test Case: 852 | Input/Output: [(-80 3 -1 -84) -84]
Test Case: 853 | Input/Output: [(-15 -87 -90 77) -90]
Test Case: 854 | Input/Output: [(52 -33 -71 -83) -83]
Test Case: 855 | Input/Output: [(27 -55 96 78) -55]
Test Case: 856 | Input/Output: [(-83 -45 -40 63) -83]
Test Case: 857 | Input/Output: [(1 -26 35 -11) -26]
Test Case: 858 | Input/Output: [(-61 -24 -5 -63) -63]
Test Case: 859 | Input/Output: [(-19 -90 8 22) -90]
Test Case: 860 | Input/Output: [(-87 -14 -75 -61) -87]
Test Case: 861 | Input/Output: [(-30 -97 -2 -47) -97]
Test Case: 862 | Input/Output: [(66 36 65 60) 36]
Test Case: 863 | Input/Output: [(89 -47 -41 28) -47]
Test Case: 864 | Input/Output: [(-25 -52 64 -8) -52]
Test Case: 865 | Input/Output: [(9 -29 -87 -69) -87]
Test Case: 866 | Input/Output: [(-16 46 71 -27) -27]
Test Case: 867 | Input/Output: [(74 -94 -68 8) -94]
Test Case: 868 | Input/Output: [(59 56 100 14) 14]
Test Case: 869 | Input/Output: [(-31 -35 74 68) -35]
Test Case: 870 | Input/Output: [(-16 71 -70 -45) -70]
Test Case: 871 | Input/Output: [(-75 9 20 90) -75]
Test Case: 872 | Input/Output: [(21 -47 -54 -50) -54]
Test Case: 873 | Input/Output: [(1 70 25 21) 1]
Test Case: 874 | Input/Output: [(26 -82 -28 -51) -82]
Test Case: 875 | Input/Output: [(-44 45 63 -1) -44]
Test Case: 876 | Input/Output: [(20 -97 -9 -75) -97]
Test Case: 877 | Input/Output: [(-24 -100 -71 79) -100]
Test Case: 878 | Input/Output: [(100 -78 -31 -51) -78]
Test Case: 879 | Input/Output: [(-98 -18 68 22) -98]
Test Case: 880 | Input/Output: [(-55 -99 43 77) -99]
Test Case: 881 | Input/Output: [(-61 -87 -1 -9) -87]
Test Case: 882 | Input/Output: [(-5 84 83 -99) -99]
Test Case: 883 | Input/Output: [(71 -89 1 -89) -89]
Test Case: 884 | Input/Output: [(62 -74 5 51) -74]
Test Case: 885 | Input/Output: [(-82 -49 -11 -11) -82]
Test Case: 886 | Input/Output: [(65 32 -92 -26) -92]
Test Case: 887 | Input/Output: [(-63 45 88 4) -63]
Test Case: 888 | Input/Output: [(46 -98 -61 -26) -98]
Test Case: 889 | Input/Output: [(74 62 -2 86) -2]
Test Case: 890 | Input/Output: [(-96 3 -74 -30) -96]
Test Case: 891 | Input/Output: [(-39 25 -35 -4) -39]
Test Case: 892 | Input/Output: [(82 41 -12 -47) -47]
Test Case: 893 | Input/Output: [(40 59 45 44) 40]
Test Case: 894 | Input/Output: [(47 -23 -69 63) -69]
Test Case: 895 | Input/Output: [(13 -47 32 -30) -47]
Test Case: 896 | Input/Output: [(21 30 -53 70) -53]
Test Case: 897 | Input/Output: [(-53 -33 -70 -36) -70]
Test Case: 898 | Input/Output: [(12 -82 66 -49) -82]
Test Case: 899 | Input/Output: [(-100 79 70 -11) -100]
Test Case: 900 | Input/Output: [(-93 -5 21 45) -93]
Test Case: 901 | Input/Output: [(-8 -90 77 66) -90]
Test Case: 902 | Input/Output: [(61 -20 -80 12) -80]
Test Case: 903 | Input/Output: [(34 -4 38 -53) -53]
Test Case: 904 | Input/Output: [(7 2 43 -69) -69]
Test Case: 905 | Input/Output: [(43 40 -15 67) -15]
Test Case: 906 | Input/Output: [(83 -37 -68 -77) -77]
Test Case: 907 | Input/Output: [(-92 -49 -6 -32) -92]
Test Case: 908 | Input/Output: [(95 40 26 41) 26]
Test Case: 909 | Input/Output: [(81 86 -26 -61) -61]
Test Case: 910 | Input/Output: [(2 69 -48 -18) -48]
Test Case: 911 | Input/Output: [(-62 59 -35 31) -62]
Test Case: 912 | Input/Output: [(78 -12 -3 -69) -69]
Test Case: 913 | Input/Output: [(-70 59 -85 95) -85]
Test Case: 914 | Input/Output: [(-100 -16 -22 -3) -100]
Test Case: 915 | Input/Output: [(15 -25 14 39) -25]
Test Case: 916 | Input/Output: [(-92 -94 -17 22) -94]
Test Case: 917 | Input/Output: [(78 -55 72 -85) -85]
Test Case: 918 | Input/Output: [(-100 85 32 92) -100]
Test Case: 919 | Input/Output: [(-55 94 77 100) -55]
Test Case: 920 | Input/Output: [(41 44 8 -78) -78]
Test Case: 921 | Input/Output: [(-3 -50 -83 -79) -83]
Test Case: 922 | Input/Output: [(-75 96 70 74) -75]
Test Case: 923 | Input/Output: [(6 14 47 -12) -12]
Test Case: 924 | Input/Output: [(44 -2 -92 -91) -92]
Test Case: 925 | Input/Output: [(-51 -58 61 98) -58]
Test Case: 926 | Input/Output: [(46 75 15 -52) -52]
Test Case: 927 | Input/Output: [(-8 65 -99 -17) -99]
Test Case: 928 | Input/Output: [(48 19 12 -34) -34]
Test Case: 929 | Input/Output: [(-61 -34 79 53) -61]
Test Case: 930 | Input/Output: [(8 49 -79 -40) -79]
Test Case: 931 | Input/Output: [(-11 96 60 19) -11]
Test Case: 932 | Input/Output: [(16 77 -43 -35) -43]
Test Case: 933 | Input/Output: [(55 56 -72 49) -72]
Test Case: 934 | Input/Output: [(-55 -87 -15 8) -87]
Test Case: 935 | Input/Output: [(-20 -77 -14 -22) -77]
Test Case: 936 | Input/Output: [(-80 -68 70 -33) -80]
Test Case: 937 | Input/Output: [(-49 -73 87 6) -73]
Test Case: 938 | Input/Output: [(92 -72 95 38) -72]
Test Case: 939 | Input/Output: [(-49 -14 -100 -5) -100]
Test Case: 940 | Input/Output: [(-45 -96 45 20) -96]
Test Case: 941 | Input/Output: [(-3 17 -67 13) -67]
Test Case: 942 | Input/Output: [(12 -4 -27 -64) -64]
Test Case: 943 | Input/Output: [(-24 67 -38 91) -38]
Test Case: 944 | Input/Output: [(-98 -98 84 -84) -98]
Test Case: 945 | Input/Output: [(6 47 7 36) 6]
Test Case: 946 | Input/Output: [(75 22 -86 62) -86]
Test Case: 947 | Input/Output: [(30 93 -21 -16) -21]
Test Case: 948 | Input/Output: [(88 32 34 -92) -92]
Test Case: 949 | Input/Output: [(-57 -66 -6 -81) -81]
Test Case: 950 | Input/Output: [(-22 36 75 13) -22]
Test Case: 951 | Input/Output: [(-51 -88 24 -14) -88]
Test Case: 952 | Input/Output: [(-72 14 -8 -6) -72]
Test Case: 953 | Input/Output: [(48 64 -36 -51) -51]
Test Case: 954 | Input/Output: [(78 -98 86 -37) -98]
Test Case: 955 | Input/Output: [(3 42 -27 71) -27]
Test Case: 956 | Input/Output: [(-25 54 47 6) -25]
Test Case: 957 | Input/Output: [(-87 35 27 37) -87]
Test Case: 958 | Input/Output: [(93 -32 20 83) -32]
Test Case: 959 | Input/Output: [(-98 -92 14 -73) -98]
Test Case: 960 | Input/Output: [(-36 -42 20 40) -42]
Test Case: 961 | Input/Output: [(60 -90 -83 -42) -90]
Test Case: 962 | Input/Output: [(-48 83 -57 55) -57]
Test Case: 963 | Input/Output: [(27 95 -29 39) -29]
Test Case: 964 | Input/Output: [(-81 13 -40 69) -81]
Test Case: 965 | Input/Output: [(0 10 -85 15) -85]
Test Case: 966 | Input/Output: [(-28 0 -76 -90) -90]
Test Case: 967 | Input/Output: [(-54 96 46 77) -54]
Test Case: 968 | Input/Output: [(47 -9 37 -96) -96]
Test Case: 969 | Input/Output: [(-97 -2 77 -73) -97]
Test Case: 970 | Input/Output: [(-72 67 -16 -16) -72]
Test Case: 971 | Input/Output: [(-2 74 48 37) -2]
Test Case: 972 | Input/Output: [(54 97 -83 -3) -83]
Test Case: 973 | Input/Output: [(13 -56 86 -76) -76]
Test Case: 974 | Input/Output: [(-43 81 -55 14) -55]
Test Case: 975 | Input/Output: [(92 54 40 -12) -12]
Test Case: 976 | Input/Output: [(-33 15 -96 75) -96]
Test Case: 977 | Input/Output: [(-99 -39 37 85) -99]
Test Case: 978 | Input/Output: [(59 20 45 37) 20]
Test Case: 979 | Input/Output: [(-54 3 -7 77) -54]
Test Case: 980 | Input/Output: [(-19 -20 96 -55) -55]
Test Case: 981 | Input/Output: [(2 -57 30 -51) -57]
Test Case: 982 | Input/Output: [(-55 -88 15 57) -88]
Test Case: 983 | Input/Output: [(-29 -24 -42 29) -42]
Test Case: 984 | Input/Output: [(-94 -6 46 27) -94]
Test Case: 985 | Input/Output: [(-76 11 94 -77) -77]
Test Case: 986 | Input/Output: [(-44 -19 -24 -43) -44]
Test Case: 987 | Input/Output: [(50 38 1 54) 1]
Test Case: 988 | Input/Output: [(4 6 -55 80) -55]
Test Case: 989 | Input/Output: [(51 -39 72 98) -39]
Test Case: 990 | Input/Output: [(-64 -57 -30 65) -64]
Test Case: 991 | Input/Output: [(71 -1 16 85) -1]
Test Case: 992 | Input/Output: [(-83 -55 -3 -65) -83]
Test Case: 993 | Input/Output: [(1 -14 -76 44) -76]
Test Case: 994 | Input/Output: [(41 -23 -65 -36) -65]
Test Case: 995 | Input/Output: [(48 -61 -18 -31) -61]
Test Case: 996 | Input/Output: [(89 -5 51 -80) -80]
Test Case: 997 | Input/Output: [(57 -29 -37 -8) -37]
Test Case: 998 | Input/Output: [(-95 85 -14 81) -95]
Test Case: 999 | Input/Output: [(-50 55 -85 37) -85]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x579dde54 clojush.problems.software.smallest$fn__7460@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@7e2a76be]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
random-screen = false
random-seed = -64 41 18 -37 46 -24 -9 -43 -114 -96 -118 48 -77 75 -100 14
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-26 49 -26 -26] -26] [[-81 -12 -12 -12] -81] [[-97 -97 -97 78] -97] [[8 8 97 8] 8] [[-91 -91 -10 -91] -91] [[74 74 41 74] 41] [[24 24 24 -20] -20] [[4 -65 4 4] -65] [[-100 -100 -100 40] -100] [[20 -44 -44 -44] -44] [(-31 -31 -31 -31) -31] [(55 55 55 55) 55] [(-88 -88 -88 -88) -88] [(-10 -10 -10 -10) -10] [(68 68 68 68) 68] [(53 26 86 21) 21] [(17 99 83 33) 17] [(61 0 59 25) 0] [(38 7 73 1) 1] [(68 61 11 74) 11] [(19 90 41 69) 19] [(34 1 74 70) 1] [(62 6 67 29) 6] [(35 98 77 11) 11] [(29 51 16 70) 16] [(32 57 4 78) 4] [(58 21 80 58) 21] [(96 17 89 9) 9] [(43 72 100 77) 43] [(52 20 17 65) 17] [(90 15 25 40) 15] [(44 58 68 68) 44] [(72 94 66 51) 51] [(3 56 7 77) 3] [(10 13 21 25) 10] [(-31 -27 66 -19) -31] [(-82 -78 -85 -87) -87] [(-3 -58 -88 -26) -88] [(1 -42 -72 10) -72] [(59 -83 54 56) -83] [(55 85 -50 -7) -50] [(28 72 4 86) 4] [(17 -48 -66 -14) -66] [(-23 36 -76 45) -76] [(17 77 -46 -21) -46] [(15 65 18 5) 5] [(-65 -75 -19 -67) -75] [(-16 -100 -91 15) -100] [(-69 4 -58 -52) -69] [(12 -22 -3 76) -22] [(-68 -6 53 -10) -68] [(41 68 17 51) 17] [(80 4 -41 90) -41] [(37 50 10 13) 10] [(-65 -50 7 29) -65] [(61 -86 88 -17) -86] [(55 -64 -3 -91) -91] [(-76 56 15 -73) -76] [(51 -31 -41 73) -41] [(-9 -10 98 39) -10] [(-64 18 -41 89) -64] [(-74 92 -98 -30) -98] [(-42 17 -47 76) -47] [(-64 48 -89 11) -89] [(9 39 6 87) 6] [(36 -21 41 -70) -70] [(-37 7 59 -56) -56] [(-62 49 67 -33) -62] [(66 -35 13 62) -35] [(-48 20 69 -27) -48] [(94 40 -55 -57) -57] [(59 96 56 9) 9] [(-16 -38 -48 74) -48] [(-7 37 -90 -71) -90] [(-92 -1 -63 -47) -92] [(12 -92 46 81) -92] [(12 -20 -93 21) -93] [(-13 92 77 94) -13] [(26 78 -82 87) -82] [(-6 21 44 61) -6] [(-91 -84 -53 9) -91] [(46 46 77 32) 32] [(70 19 27 1) 1] [(-54 -57 -61 -83) -83] [(-34 62 -90 -90) -90] [(-47 36 4 61) -47] [(5 74 -15 24) -15] [(-14 -16 9 29) -16] [(-84 25 -66 47) -84] [(-47 -61 -41 -18) -61] [(-3 91 -86 0) -86] [(46 -41 71 75) -41] [(38 -35 11 -65) -65] [(60 -8 99 18) -8] [(89 -92 72 -6) -92])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -26                 | Program output: -26                
Correct output: -81                 | Program output: -81                
Correct output: -97                 | Program output: -97                
Correct output: 8                   | Program output: 8                  
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 74                 
Correct output: -20                 | Program output: 24                 
Correct output: -65                 | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -44                 | Program output: 20                 
Correct output: -31                 | Program output: -31                
Correct output: 55                  | Program output: 55                 
Correct output: -88                 | Program output: -88                
Correct output: -10                 | Program output: -10                
Correct output: 68                  | Program output: 68                 
Correct output: 21                  | Program output: 53                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 61                 
Correct output: 1                   | Program output: 38                 
Correct output: 11                  | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 1                   | Program output: 34                 
Correct output: 6                   | Program output: 62                 
Correct output: 11                  | Program output: 35                 
Correct output: 16                  | Program output: 29                 
Correct output: 4                   | Program output: 32                 
Correct output: 21                  | Program output: 58                 
Correct output: 9                   | Program output: 96                 
Correct output: 43                  | Program output: 43                 
Correct output: 17                  | Program output: 52                 
Correct output: 15                  | Program output: 90                 
Correct output: 44                  | Program output: 44                 
Correct output: 51                  | Program output: 72                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: -31                 | Program output: -31                
Correct output: -87                 | Program output: -82                
Correct output: -88                 | Program output: -3                 
Correct output: -72                 | Program output: 1                  
Correct output: -83                 | Program output: 59                 
Correct output: -50                 | Program output: 55                 
Correct output: 4                   | Program output: 28                 
Correct output: -66                 | Program output: 17                 
Correct output: -76                 | Program output: -23                
Correct output: -46                 | Program output: 17                 
Correct output: 5                   | Program output: 15                 
Correct output: -75                 | Program output: -65                
Correct output: -100                | Program output: -16                
Correct output: -69                 | Program output: -69                
Correct output: -22                 | Program output: 12                 
Correct output: -68                 | Program output: -68                
Correct output: 17                  | Program output: 41                 
Correct output: -41                 | Program output: 80                 
Correct output: 10                  | Program output: 37                 
Correct output: -65                 | Program output: -65                
Correct output: -86                 | Program output: 61                 
Correct output: -91                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: 51                 
Correct output: -10                 | Program output: -9                 
Correct output: -64                 | Program output: -64                
Correct output: -98                 | Program output: -74                
Correct output: -47                 | Program output: -42                
Correct output: -89                 | Program output: -64                
Correct output: 6                   | Program output: 9                  
Correct output: -70                 | Program output: 36                 
Correct output: -56                 | Program output: -37                
Correct output: -62                 | Program output: -62                
Correct output: -35                 | Program output: 66                 
Correct output: -48                 | Program output: -48                
Correct output: -57                 | Program output: 94                 
Correct output: 9                   | Program output: 59                 
Correct output: -48                 | Program output: -16                
Correct output: -90                 | Program output: -7                 
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: 12                 
Correct output: -93                 | Program output: 12                 
Correct output: -13                 | Program output: -13                
Correct output: -82                 | Program output: 26                 
Correct output: -6                  | Program output: -6                 
Correct output: -91                 | Program output: -91                
Correct output: 32                  | Program output: 46                 
Correct output: 1                   | Program output: 70                 
Correct output: -83                 | Program output: -54                
Correct output: -90                 | Program output: -34                
Correct output: -47                 | Program output: -47                
Correct output: -15                 | Program output: 5                  
Correct output: -16                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -61                 | Program output: -47                
Correct output: -86                 | Program output: -3                 
Correct output: -41                 | Program output: 46                 
Correct output: -65                 | Program output: 38                 
Correct output: -8                  | Program output: 60                 
Correct output: -92                 | Program output: 89                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dup} {:close 1, :instruction tagged_629} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction print_exec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_if} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction print_exec} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tag_integer_5} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_923} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_753} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_boolean_805} {:close 0, :instruction exec_while} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction integer_pop})
Lexicase best program: (in1 boolean_eq print_integer integer_div exec_stackdepth integer_gt boolean_yank exec_eq integer_sub exec_do*times (exec_when (integer_div exec_y_when_autoconstructing (exec_flush) integer_lte boolean_flush integer_gt integer_pop integer_mult print_exec (integer_dup tagged_629) boolean_pop boolean_or print_exec () exec_when () exec_k_when_autoconstructing (exec_dup_times (integer_dup integer_dup integer_pop exec_if () (print_exec (boolean_yankdup exec_flush print_exec () integer_flush integer_dup_items print_integer exec_do*range (integer_empty exec_k_when_autoconstructing (integer_flush exec_dup_times () integer_inc) (integer_eq) exec_empty in1 exec_do*while (exec_yankdup tag_integer_5 integer_yankdup) exec_do*times (integer_gt boolean_empty print_boolean integer_gt) exec_do*count (exec_dup_times (boolean_and boolean_yank boolean_empty) boolean_pop exec_k_when_autoconstructing (boolean_xor) (integer_sub exec_s_when_autoconstructing () (exec_rot (exec_pop () exec_if (in1 exec_s_when_autoconstructing (integer_dup_items exec_do*range (exec_while (tagged_923 integer_eq boolean_shove tagged_753 integer_dec integer_empty) exec_k_when_autoconstructing (boolean_yank tag_boolean_805 exec_while (exec_eq exec_y_when_autoconstructing (boolean_stackdepth exec_while (integer_pop)))) ())) () ()) ()) () ()) ()))))))) ())))
Lexicase best errors: [1 1 0 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 133
Percent parens: 0.323
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction boolean_eq} {:close 1, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dup} {:close 1, :instruction tagged_629} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction print_exec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_if} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction print_exec} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tag_integer_5} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_923} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_753} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_boolean_805} {:close 0, :instruction exec_while} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction integer_pop})
Zero cases best program: (in1 boolean_eq print_integer integer_div exec_stackdepth integer_gt boolean_yank exec_eq integer_sub exec_do*times (exec_when (integer_div exec_y_when_autoconstructing (exec_flush) integer_lte boolean_flush integer_gt integer_pop integer_mult print_exec (integer_dup tagged_629) boolean_pop boolean_or print_exec () exec_when () exec_k_when_autoconstructing (exec_dup_times (integer_dup integer_dup integer_pop exec_if () (print_exec (boolean_yankdup exec_flush print_exec () integer_flush integer_dup_items print_integer exec_do*range (integer_empty exec_k_when_autoconstructing (integer_flush exec_dup_times () integer_inc) (integer_eq) exec_empty in1 exec_do*while (exec_yankdup tag_integer_5 integer_yankdup) exec_do*times (integer_gt boolean_empty print_boolean integer_gt) exec_do*count (exec_dup_times (boolean_and boolean_yank boolean_empty) boolean_pop exec_k_when_autoconstructing (boolean_xor) (integer_sub exec_s_when_autoconstructing () (exec_rot (exec_pop () exec_if (in1 exec_s_when_autoconstructing (integer_dup_items exec_do*range (exec_while (tagged_923 integer_eq boolean_shove tagged_753 integer_dec integer_empty) exec_k_when_autoconstructing (boolean_yank tag_boolean_805 exec_while (exec_eq exec_y_when_autoconstructing (boolean_stackdepth exec_while (integer_pop)))) ())) () ()) ()) () ()) ()))))))) ())))
Zero cases best errors: [1 1 0 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 133
Percent parens: 0.323
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 4 3 2 13 2 2 2 3 2)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (4 4 3 2 13 2 2 2 3 2)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction 50} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction 7} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_104} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop})
Best program: (boolean_yank integer_lt integer_add boolean_yank in1 print_integer integer_mult exec_dup_times (integer_inc in4 integer_sub exec_while (in4 integer_lte boolean_eq integer_empty exec_k_when_autoconstructing (print_exec (integer_lte) exec_do*while (boolean_not exec_k (boolean_dup) (boolean_swap 50) boolean_yankdup boolean_dup_items 7 integer_yank exec_swap (exec_while (integer_pop tagged_104 exec_swap (exec_if (in1 boolean_empty) (exec_dup (integer_dup) print_integer integer_lt boolean_pop)) ())) ())) ())))
Errors: [1 1 0 0 0 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 42
Size: 59
Percent parens: 0.288
--- Population Statistics ---
Average total errors in population: 9.963
Median total errors in population: 10
Error averages by case: (0.996 0.996 0.997 0.998 0.987 0.998 0.998 0.998 0.997 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.184
Average program size in population (points): 69.158
Average percent parens in population: 0.280
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.282
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 501629
--- Timings ---
Current time: 1559314753987 milliseconds
Total Time:           2.4 seconds
Initialization:       0.1 seconds,  4.3%
Reproduction:         0.7 seconds, 31.5%
Fitness Testing:      1.5 seconds, 64.2%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -26                 | Program output: -26                
Correct output: -81                 | Program output: -81                
Correct output: -97                 | Program output: -97                
Correct output: 8                   | Program output: 8                  
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 74                 
Correct output: -20                 | Program output: 24                 
Correct output: -65                 | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -44                 | Program output: 20                 
Correct output: -31                 | Program output: -31                
Correct output: 55                  | Program output: 55                 
Correct output: -88                 | Program output: -88                
Correct output: -10                 | Program output: -10                
Correct output: 68                  | Program output: 68                 
Correct output: 21                  | Program output: 53                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 61                 
Correct output: 1                   | Program output: 38                 
Correct output: 11                  | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 1                   | Program output: 34                 
Correct output: 6                   | Program output: 62                 
Correct output: 11                  | Program output: 35                 
Correct output: 16                  | Program output: 29                 
Correct output: 4                   | Program output: 32                 
Correct output: 21                  | Program output: 58                 
Correct output: 9                   | Program output: 96                 
Correct output: 43                  | Program output: 43                 
Correct output: 17                  | Program output: 52                 
Correct output: 15                  | Program output: 90                 
Correct output: 44                  | Program output: 44                 
Correct output: 51                  | Program output: 72                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: -31                 | Program output: -31                
Correct output: -87                 | Program output: -82                
Correct output: -88                 | Program output: -3                 
Correct output: -72                 | Program output: 1                  
Correct output: -83                 | Program output: 59                 
Correct output: -50                 | Program output: 55                 
Correct output: 4                   | Program output: 28                 
Correct output: -66                 | Program output: 17                 
Correct output: -76                 | Program output: -23                
Correct output: -46                 | Program output: 17                 
Correct output: 5                   | Program output: 15                 
Correct output: -75                 | Program output: -65                
Correct output: -100                | Program output: -16                
Correct output: -69                 | Program output: -69                
Correct output: -22                 | Program output: 12                 
Correct output: -68                 | Program output: -68                
Correct output: 17                  | Program output: 41                 
Correct output: -41                 | Program output: 80                 
Correct output: 10                  | Program output: 37                 
Correct output: -65                 | Program output: -65                
Correct output: -86                 | Program output: 61                 
Correct output: -91                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: 51                 
Correct output: -10                 | Program output: -9                 
Correct output: -64                 | Program output: -64                
Correct output: -98                 | Program output: -74                
Correct output: -47                 | Program output: -42                
Correct output: -89                 | Program output: -64                
Correct output: 6                   | Program output: 9                  
Correct output: -70                 | Program output: 36                 
Correct output: -56                 | Program output: -37                
Correct output: -62                 | Program output: -62                
Correct output: -35                 | Program output: 66                 
Correct output: -48                 | Program output: -48                
Correct output: -57                 | Program output: 94                 
Correct output: 9                   | Program output: 59                 
Correct output: -48                 | Program output: -16                
Correct output: -90                 | Program output: -7                 
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: 12                 
Correct output: -93                 | Program output: 12                 
Correct output: -13                 | Program output: -13                
Correct output: -82                 | Program output: 26                 
Correct output: -6                  | Program output: -6                 
Correct output: -91                 | Program output: -91                
Correct output: 32                  | Program output: 46                 
Correct output: 1                   | Program output: 70                 
Correct output: -83                 | Program output: -54                
Correct output: -90                 | Program output: -34                
Correct output: -47                 | Program output: -47                
Correct output: -15                 | Program output: 5                  
Correct output: -16                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -61                 | Program output: -47                
Correct output: -86                 | Program output: -3                 
Correct output: -41                 | Program output: 46                 
Correct output: -65                 | Program output: 38                 
Correct output: -8                  | Program output: 60                 
Correct output: -92                 | Program output: 89                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction 50} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction 7} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_flush} {:close 1, :instruction print_exec} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tag_integer_5} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_923} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_753} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_boolean_805} {:close 0, :instruction exec_while} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (boolean_yank integer_lt integer_add boolean_yank in1 print_integer integer_mult exec_dup_times (integer_inc in4 integer_sub exec_while (in4 integer_lte boolean_eq integer_empty exec_k_when_autoconstructing (print_exec (integer_lte) exec_do*while (boolean_not exec_k (boolean_dup) (boolean_swap 50) boolean_yankdup boolean_dup_items 7 integer_yank exec_swap (exec_while (integer_dup exec_flush print_exec () integer_flush integer_dup_items print_integer exec_do*range (integer_empty exec_k_when_autoconstructing (integer_flush exec_dup_times () integer_inc) (integer_eq) exec_empty in1 exec_do*while (exec_yankdup tag_integer_5 integer_yankdup) exec_do*times (integer_gt boolean_empty print_boolean integer_gt) exec_do*count (exec_dup_times (boolean_and boolean_yank boolean_empty) boolean_pop exec_k_when_autoconstructing (boolean_xor) (integer_sub exec_s_when_autoconstructing () (exec_rot (exec_pop () exec_if (in1 exec_empty integer_dup_items exec_do*range (exec_while (tagged_923 integer_eq boolean_shove tagged_753 integer_dec integer_empty) exec_k_when_autoconstructing (boolean_yank tag_boolean_805 exec_while (exec_eq exec_y_when_autoconstructing (boolean_stackdepth))) ())) ()) () ()) ()))))) ())) ())))
Lexicase best errors: [0 1 1 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 124
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction 50} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction 7} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_flush} {:close 1, :instruction print_exec} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tag_integer_5} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_923} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_753} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_boolean_805} {:close 0, :instruction exec_while} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (boolean_yank integer_lt integer_add boolean_yank in1 print_integer integer_mult exec_dup_times (integer_inc in4 integer_sub exec_while (in4 integer_lte boolean_eq integer_empty exec_k_when_autoconstructing (print_exec (integer_lte) exec_do*while (boolean_not exec_k (boolean_dup) (boolean_swap 50) boolean_yankdup boolean_dup_items 7 integer_yank exec_swap (exec_while (integer_dup exec_flush print_exec () integer_flush integer_dup_items print_integer exec_do*range (integer_empty exec_k_when_autoconstructing (integer_flush exec_dup_times () integer_inc) (integer_eq) exec_empty in1 exec_do*while (exec_yankdup tag_integer_5 integer_yankdup) exec_do*times (integer_gt boolean_empty print_boolean integer_gt) exec_do*count (exec_dup_times (boolean_and boolean_yank boolean_empty) boolean_pop exec_k_when_autoconstructing (boolean_xor) (integer_sub exec_s_when_autoconstructing () (exec_rot (exec_pop () exec_if (in1 exec_empty integer_dup_items exec_do*range (exec_while (tagged_923 integer_eq boolean_shove tagged_753 integer_dec integer_empty) exec_k_when_autoconstructing (boolean_yank tag_boolean_805 exec_while (exec_eq exec_y_when_autoconstructing (boolean_stackdepth))) ())) ()) () ()) ()))))) ())) ())))
Zero cases best errors: [0 1 1 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 124
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (414 150 1 847 414 1 564 414 337 284)
Population mean number of elite cases: 3.43
Count of perfect (error zero) individuals by case: (414 150 1 847 414 1 564 414 337 284)
Population mean number of perfect (error zero) cases: 3.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_newline} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_s} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_shove} {:close 2, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_empty} {:close 2, :instruction boolean_swap} {:close 1, :instruction integer_swap} {:close 0, :instruction tag_boolean_386} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_do*range} {:close 0, :instruction in3} {:close 0, :instruction 83} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_newline} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_lte} {:close 1, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction in4} {:close 1, :instruction boolean_rot})
Best program: (boolean_yank integer_lt integer_add boolean_yank in1 print_integer integer_mult exec_dup_times (integer_inc in4 integer_sub exec_while (in4 integer_lte boolean_eq integer_empty exec_k_when_autoconstructing (print_exec (exec_shove () integer_empty exec_s (boolean_swap print_newline integer_pop exec_empty integer_min) (boolean_dup boolean_xor exec_s () (exec_pop (boolean_not integer_shove integer_div)) (integer_min exec_y (boolean_or integer_gt) integer_empty boolean_swap)) (integer_swap) tag_boolean_386 exec_do*times (boolean_stackdepth integer_swap in3 integer_dec boolean_invert_first_then_and boolean_invert_first_then_and) exec_do*range (in3 83 exec_k_when_autoconstructing (print_newline integer_mult integer_dec integer_lte in4) (integer_dup_times in4 boolean_rot)))) ())))
Errors: [0 1 1 0 0 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 60
Size: 79
Percent parens: 0.241
--- Population Statistics ---
Average total errors in population: 6.574
Median total errors in population: 7
Error averages by case: (0.586 0.85 0.999 0.153 0.586 0.999 0.436 0.586 0.663 0.716)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.652
Average program size in population (points): 81.317
Average percent parens in population: 0.265
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.521
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 98
Genome diversity (% unique genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 99
Syntactic diversity (% unique Push programs):	 0.599
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 830027
--- Timings ---
Current time: 1559314756463 milliseconds
Total Time:           4.9 seconds
Initialization:       0.1 seconds,  2.1%
Reproduction:         2.5 seconds, 51.7%
Fitness Testing:      1.9 seconds, 39.9%
Report:               0.3 seconds,  6.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 541
Test mean error for best: 0.54100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -26                 | Program output: -26                
Correct output: -81                 | Program output: -12                
Correct output: -97                 | Program output: -97                
Correct output: 8                   | Program output: 8                  
Correct output: -91                 | Program output: -10                
Correct output: 41                  | Program output: 74                 
Correct output: -20                 | Program output: -20                
Correct output: -65                 | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -44                 | Program output: -44                
Correct output: -31                 | Program output: -31                
Correct output: 55                  | Program output: 55                 
Correct output: -88                 | Program output: -88                
Correct output: -10                 | Program output: -10                
Correct output: 68                  | Program output: 68                 
Correct output: 21                  | Program output: 53                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 61                 
Correct output: 1                   | Program output: 38                 
Correct output: 11                  | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 1                   | Program output: 34                 
Correct output: 6                   | Program output: 62                 
Correct output: 11                  | Program output: 35                 
Correct output: 16                  | Program output: 29                 
Correct output: 4                   | Program output: 32                 
Correct output: 21                  | Program output: 58                 
Correct output: 9                   | Program output: 96                 
Correct output: 43                  | Program output: 43                 
Correct output: 17                  | Program output: 52                 
Correct output: 15                  | Program output: 90                 
Correct output: 44                  | Program output: 44                 
Correct output: 51                  | Program output: 72                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: -31                 | Program output: -19                
Correct output: -87                 | Program output: -85                
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: 1                  
Correct output: -83                 | Program output: 59                 
Correct output: -50                 | Program output: -50                
Correct output: 4                   | Program output: 28                 
Correct output: -66                 | Program output: -66                
Correct output: -76                 | Program output: -23                
Correct output: -46                 | Program output: -46                
Correct output: 5                   | Program output: 15                 
Correct output: -75                 | Program output: -19                
Correct output: -100                | Program output: -16                
Correct output: -69                 | Program output: -58                
Correct output: -22                 | Program output: 12                 
Correct output: -68                 | Program output: -10                
Correct output: 17                  | Program output: 41                 
Correct output: -41                 | Program output: 80                 
Correct output: 10                  | Program output: 37                 
Correct output: -65                 | Program output: -65                
Correct output: -86                 | Program output: -17                
Correct output: -91                 | Program output: -3                 
Correct output: -76                 | Program output: -73                
Correct output: -41                 | Program output: 51                 
Correct output: -10                 | Program output: -9                 
Correct output: -64                 | Program output: -64                
Correct output: -98                 | Program output: -98                
Correct output: -47                 | Program output: -42                
Correct output: -89                 | Program output: -64                
Correct output: 6                   | Program output: 9                  
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -56                
Correct output: -62                 | Program output: -33                
Correct output: -35                 | Program output: 66                 
Correct output: -48                 | Program output: -27                
Correct output: -57                 | Program output: -55                
Correct output: 9                   | Program output: 59                 
Correct output: -48                 | Program output: -16                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -63                
Correct output: -92                 | Program output: 12                 
Correct output: -93                 | Program output: 12                 
Correct output: -13                 | Program output: -13                
Correct output: -82                 | Program output: 26                 
Correct output: -6                  | Program output: -6                 
Correct output: -91                 | Program output: -91                
Correct output: 32                  | Program output: 46                 
Correct output: 1                   | Program output: 70                 
Correct output: -83                 | Program output: -61                
Correct output: -90                 | Program output: -90                
Correct output: -47                 | Program output: -47                
Correct output: -15                 | Program output: 5                  
Correct output: -16                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -61                 | Program output: -41                
Correct output: -86                 | Program output: -86                
Correct output: -41                 | Program output: 46                 
Correct output: -65                 | Program output: -65                
Correct output: -8                  | Program output: 60                 
Correct output: -92                 | Program output: -6                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 3, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_integer_193} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_or boolean_xor boolean_frominteger boolean_or in1 integer_add in4 in3 boolean_pop exec_k () (exec_do*range (integer_add boolean_frominteger) integer_mult boolean_invert_second_then_and boolean_dup boolean_invert_first_then_and exec_s (exec_do*range ()) (exec_pop (exec_noop integer_eq) integer_stackdepth boolean_rot print_newline integer_gt integer_gt print_integer integer_eq) (boolean_rot integer_lt exec_empty) boolean_pop) exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec exec_y () integer_dup_times tag_integer_193 integer_empty integer_pop boolean_not boolean_frominteger exec_shove (integer_rot integer_empty) integer_pop boolean_not boolean_frominteger exec_shove (integer_rot boolean_flush exec_while ()))
Lexicase best errors: [1 1 0 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 77
Percent parens: 0.208
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 3, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_integer_193} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_or boolean_xor boolean_frominteger boolean_or in1 integer_add in4 in3 boolean_pop exec_k () (exec_do*range (integer_add boolean_frominteger) integer_mult boolean_invert_second_then_and boolean_dup boolean_invert_first_then_and exec_s (exec_do*range ()) (exec_pop (exec_noop integer_eq) integer_stackdepth boolean_rot print_newline integer_gt integer_gt print_integer integer_eq) (boolean_rot integer_lt exec_empty) boolean_pop) exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec exec_y () integer_dup_times tag_integer_193 integer_empty integer_pop boolean_not boolean_frominteger exec_shove (integer_rot integer_empty) integer_pop boolean_not boolean_frominteger exec_shove (integer_rot boolean_flush exec_while ()))
Zero cases best errors: [1 1 0 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 77
Percent parens: 0.208
--- Lexicase Population Statistics ---
Count of elite individuals by case: (470 86 279 274 469 471 838 87 88 274)
Population mean number of elite cases: 3.34
Count of perfect (error zero) individuals by case: (470 86 279 274 469 471 838 87 88 274)
Population mean number of perfect (error zero) cases: 3.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 3, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_integer_193} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while})
Best program: (boolean_or boolean_xor boolean_frominteger boolean_or in1 integer_add in4 in3 boolean_pop exec_k () (exec_do*range (integer_add boolean_frominteger) integer_mult boolean_invert_second_then_and boolean_dup boolean_invert_first_then_and exec_s (exec_do*range ()) (exec_pop (exec_noop integer_eq) integer_stackdepth boolean_rot print_newline integer_gt integer_gt print_integer integer_eq) (boolean_rot integer_lt exec_empty) boolean_pop) exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec exec_y () integer_dup_times tag_integer_193 integer_empty integer_pop boolean_not boolean_frominteger exec_shove (integer_rot integer_empty) integer_pop boolean_not boolean_frominteger exec_shove (integer_rot boolean_flush exec_while ()))
Errors: [1 1 0 0 1 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 61
Size: 77
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 6.664
Median total errors in population: 6
Error averages by case: (0.53 0.914 0.721 0.726 0.531 0.529 0.162 0.913 0.912 0.726)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.462
Average program size in population (points): 86.295
Average percent parens in population: 0.283
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.826
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 162
Genome diversity (% unique genomes):	 0.713
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 163
Syntactic diversity (% unique Push programs):	 0.708
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1046447
--- Timings ---
Current time: 1559314759707 milliseconds
Total Time:           8.1 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         5.2 seconds, 64.1%
Fitness Testing:      2.2 seconds, 27.6%
Report:               0.6 seconds,  7.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 648
Test mean error for best: 0.64800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -26                 | Program output: -26                
Correct output: -81                 | Program output: -81                
Correct output: -97                 | Program output: -97                
Correct output: 8                   | Program output: 8                  
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 74                 
Correct output: -20                 | Program output: 24                 
Correct output: -65                 | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -44                 | Program output: 20                 
Correct output: -31                 | Program output: -31                
Correct output: 55                  | Program output: 55                 
Correct output: -88                 | Program output: -88                
Correct output: -10                 | Program output: -10                
Correct output: 68                  | Program output: 68                 
Correct output: 21                  | Program output: 53                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 61                 
Correct output: 1                   | Program output: 38                 
Correct output: 11                  | Program output: 68                 
Correct output: 19                  | Program output: 19                 
Correct output: 1                   | Program output: 34                 
Correct output: 6                   | Program output: 62                 
Correct output: 11                  | Program output: 35                 
Correct output: 16                  | Program output: 29                 
Correct output: 4                   | Program output: 32                 
Correct output: 21                  | Program output: 58                 
Correct output: 9                   | Program output: 96                 
Correct output: 43                  | Program output: 43                 
Correct output: 17                  | Program output: 52                 
Correct output: 15                  | Program output: 90                 
Correct output: 44                  | Program output: 44                 
Correct output: 51                  | Program output: 72                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: -31                 | Program output: -31                
Correct output: -87                 | Program output: -82                
Correct output: -88                 | Program output: -3                 
Correct output: -72                 | Program output: 1                  
Correct output: -83                 | Program output: 59                 
Correct output: -50                 | Program output: 55                 
Correct output: 4                   | Program output: 28                 
Correct output: -66                 | Program output: 17                 
Correct output: -76                 | Program output: -23                
Correct output: -46                 | Program output: 17                 
Correct output: 5                   | Program output: 15                 
Correct output: -75                 | Program output: -65                
Correct output: -100                | Program output: -16                
Correct output: -69                 | Program output: -69                
Correct output: -22                 | Program output: 12                 
Correct output: -68                 | Program output: -68                
Correct output: 17                  | Program output: 41                 
Correct output: -41                 | Program output: 80                 
Correct output: 10                  | Program output: 37                 
Correct output: -65                 | Program output: -65                
Correct output: -86                 | Program output: 61                 
Correct output: -91                 | Program output: 55                 
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: 51                 
Correct output: -10                 | Program output: -9                 
Correct output: -64                 | Program output: -64                
Correct output: -98                 | Program output: -74                
Correct output: -47                 | Program output: -42                
Correct output: -89                 | Program output: -64                
Correct output: 6                   | Program output: 9                  
Correct output: -70                 | Program output: 36                 
Correct output: -56                 | Program output: -37                
Correct output: -62                 | Program output: -62                
Correct output: -35                 | Program output: 66                 
Correct output: -48                 | Program output: -48                
Correct output: -57                 | Program output: 94                 
Correct output: 9                   | Program output: 59                 
Correct output: -48                 | Program output: -16                
Correct output: -90                 | Program output: -7                 
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: 12                 
Correct output: -93                 | Program output: 12                 
Correct output: -13                 | Program output: -13                
Correct output: -82                 | Program output: 26                 
Correct output: -6                  | Program output: -6                 
Correct output: -91                 | Program output: -91                
Correct output: 32                  | Program output: 46                 
Correct output: 1                   | Program output: 70                 
Correct output: -83                 | Program output: -54                
Correct output: -90                 | Program output: -34                
Correct output: -47                 | Program output: -47                
Correct output: -15                 | Program output: 5                  
Correct output: -16                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -61                 | Program output: -47                
Correct output: -86                 | Program output: -3                 
Correct output: -41                 | Program output: 46                 
Correct output: -65                 | Program output: 38                 
Correct output: -8                  | Program output: 60                 
Correct output: -92                 | Program output: 89                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 1, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dup} {:close 1, :instruction tagged_629} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction print_exec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_if} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction print_exec} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tag_integer_5} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_923} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_753} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_boolean_805} {:close 0, :instruction exec_while} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction integer_pop})
Lexicase best program: (in1 boolean_eq print_integer integer_div exec_stackdepth integer_gt boolean_yank exec_eq integer_sub exec_do*times (exec_when (integer_div exec_y_when_autoconstructing (exec_flush) integer_lte boolean_flush integer_gt integer_pop integer_mult print_exec (integer_dup tagged_629) boolean_pop boolean_or print_exec () exec_when () exec_k_when_autoconstructing (exec_dup_times (integer_dup integer_dup integer_pop exec_if () (print_exec (boolean_yankdup exec_flush print_exec () integer_flush integer_dup_items print_integer exec_do*range (integer_empty exec_k_when_autoconstructing (integer_flush exec_dup_times () integer_inc) (integer_eq) exec_empty in1 exec_do*while (exec_yankdup tag_integer_5 integer_yankdup) exec_do*times (integer_gt boolean_empty print_boolean integer_gt) exec_do*count (exec_dup_times (boolean_and boolean_yank boolean_empty) boolean_pop exec_k_when_autoconstructing (boolean_xor) (integer_sub exec_s_when_autoconstructing () (exec_rot (exec_pop () exec_if (in1 exec_s_when_autoconstructing (integer_dup_items exec_do*range (exec_while (tagged_923 integer_eq boolean_shove tagged_753 integer_dec integer_empty) exec_k_when_autoconstructing (boolean_yank tag_boolean_805 exec_while (exec_eq exec_y_when_autoconstructing (boolean_stackdepth exec_while (integer_pop)))) ())) () ()) ()) () ()) ()))))))) ())))
Lexicase best errors: [1 1 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 133
Percent parens: 0.323
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 1, :instruction print_integer} {:close 0, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dup} {:close 1, :instruction tagged_629} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_or} {:close 1, :instruction print_exec} {:close 1, :instruction exec_when} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_if} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 1, :instruction print_exec} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_dup_times} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction tag_integer_5} {:close 1, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_while} {:close 0, :instruction tagged_923} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_753} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yank} {:close 0, :instruction tag_boolean_805} {:close 0, :instruction exec_while} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_while} {:close 0, :instruction integer_pop})
Zero cases best program: (in1 boolean_eq print_integer integer_div exec_stackdepth integer_gt boolean_yank exec_eq integer_sub exec_do*times (exec_when (integer_div exec_y_when_autoconstructing (exec_flush) integer_lte boolean_flush integer_gt integer_pop integer_mult print_exec (integer_dup tagged_629) boolean_pop boolean_or print_exec () exec_when () exec_k_when_autoconstructing (exec_dup_times (integer_dup integer_dup integer_pop exec_if () (print_exec (boolean_yankdup exec_flush print_exec () integer_flush integer_dup_items print_integer exec_do*range (integer_empty exec_k_when_autoconstructing (integer_flush exec_dup_times () integer_inc) (integer_eq) exec_empty in1 exec_do*while (exec_yankdup tag_integer_5 integer_yankdup) exec_do*times (integer_gt boolean_empty print_boolean integer_gt) exec_do*count (exec_dup_times (boolean_and boolean_yank boolean_empty) boolean_pop exec_k_when_autoconstructing (boolean_xor) (integer_sub exec_s_when_autoconstructing () (exec_rot (exec_pop () exec_if (in1 exec_s_when_autoconstructing (integer_dup_items exec_do*range (exec_while (tagged_923 integer_eq boolean_shove tagged_753 integer_dec integer_empty) exec_k_when_autoconstructing (boolean_yank tag_boolean_805 exec_while (exec_eq exec_y_when_autoconstructing (boolean_stackdepth exec_while (integer_pop)))) ())) () ()) ()) () ()) ()))))))) ())))
Zero cases best errors: [1 1 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 133
Percent parens: 0.323
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 287 1000 810 795 278 509 504 810 566)
Population mean number of elite cases: 5.56
Count of perfect (error zero) individuals by case: (1 287 0 810 795 278 509 504 810 566)
Population mean number of perfect (error zero) cases: 4.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_while} {:close 0, :instruction in4} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_exec} {:close 1, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_swap} {:close 1, :instruction 50} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction 7} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 0, :instruction tagged_104} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop})
Best program: (boolean_yank integer_lt integer_add boolean_yank in1 print_integer integer_mult exec_dup_times (integer_inc in4 integer_sub exec_while (in4 integer_lte boolean_eq integer_empty exec_k_when_autoconstructing (print_exec (integer_lte) exec_do*while (boolean_not exec_k (boolean_dup) (boolean_swap 50) boolean_yankdup boolean_dup_items 7 integer_yank exec_swap (exec_while (integer_pop tagged_104 exec_swap (exec_if (in1 boolean_empty) (exec_dup (integer_dup) print_integer integer_lt integer_dup) print_integer integer_lt boolean_pop) ())) ())) ())))
Errors: [1 1 1 0 0 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 45
Size: 62
Percent parens: 0.274
--- Population Statistics ---
Average total errors in population: 5.44
Median total errors in population: 5
Error averages by case: (0.999 0.713 1.0 0.19 0.205 0.722 0.491 0.496 0.19 0.434)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 62.693
Average program size in population (points): 83.917
Average percent parens in population: 0.249
Minimum age in population: 3.0
Maximum age in population: 5.75
Average age in population: 4.65675
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 134
Genome diversity (% unique genomes):	 0.755
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 134
Syntactic diversity (% unique Push programs):	 0.751
Total error diversity:				 0.008
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.084
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1356170
--- Timings ---
Current time: 1559314762339 milliseconds
Total Time:          10.8 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         7.3 seconds, 67.1%
Fitness Testing:      2.6 seconds, 24.0%
Report:               0.9 seconds,  7.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 547
Test mean error for best: 0.54700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -26                 | Program output: -26                
Correct output: -81                 | Program output: -12                
Correct output: -97                 | Program output: -97                
Correct output: 8                   | Program output: 8                  
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 74                 
Correct output: -20                 | Program output: -20                
Correct output: -65                 | Program output: -65                
Correct output: -100                | Program output: -100               
Correct output: -44                 | Program output: -44                
Correct output: -31                 | Program output: -31                
Correct output: 55                  | Program output: 55                 
Correct output: -88                 | Program output: -88                
Correct output: -10                 | Program output: -10                
Correct output: 68                  | Program output: 68                 
Correct output: 21                  | Program output: 21                 
Correct output: 17                  | Program output: 33                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 74                 
Correct output: 19                  | Program output: 69                 
Correct output: 1                   | Program output: 70                 
Correct output: 6                   | Program output: 29                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 70                 
Correct output: 4                   | Program output: 78                 
Correct output: 21                  | Program output: 58                 
Correct output: 9                   | Program output: 9                  
Correct output: 43                  | Program output: 77                 
Correct output: 17                  | Program output: 65                 
Correct output: 15                  | Program output: 40                 
Correct output: 44                  | Program output: 68                 
Correct output: 51                  | Program output: 51                 
Correct output: 3                   | Program output: 77                 
Correct output: 10                  | Program output: 25                 
Correct output: -31                 | Program output: -27                
Correct output: -87                 | Program output: -78                
Correct output: -88                 | Program output: -58                
Correct output: -72                 | Program output: -42                
Correct output: -83                 | Program output: -83                
Correct output: -50                 | Program output: -7                 
Correct output: 4                   | Program output: 86                 
Correct output: -66                 | Program output: -48                
Correct output: -76                 | Program output: 45                 
Correct output: -46                 | Program output: -21                
Correct output: 5                   | Program output: 5                  
Correct output: -75                 | Program output: -75                
Correct output: -100                | Program output: -100               
Correct output: -69                 | Program output: -52                
Correct output: -22                 | Program output: -22                
Correct output: -68                 | Program output: -6                 
Correct output: 17                  | Program output: 51                 
Correct output: -41                 | Program output: 90                 
Correct output: 10                  | Program output: 13                 
Correct output: -65                 | Program output: -50                
Correct output: -86                 | Program output: -86                
Correct output: -91                 | Program output: -64                
Correct output: -76                 | Program output: -73                
Correct output: -41                 | Program output: -31                
Correct output: -10                 | Program output: -10                
Correct output: -64                 | Program output: 89                 
Correct output: -98                 | Program output: -30                
Correct output: -47                 | Program output: 76                 
Correct output: -89                 | Program output: 11                 
Correct output: 6                   | Program output: 87                 
Correct output: -70                 | Program output: -21                
Correct output: -56                 | Program output: -56                
Correct output: -62                 | Program output: -33                
Correct output: -35                 | Program output: -35                
Correct output: -48                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 9                   | Program output: 9                  
Correct output: -48                 | Program output: -38                
Correct output: -90                 | Program output: -71                
Correct output: -92                 | Program output: -1                 
Correct output: -92                 | Program output: -92                
Correct output: -93                 | Program output: -20                
Correct output: -13                 | Program output: 94                 
Correct output: -82                 | Program output: 87                 
Correct output: -6                  | Program output: 61                 
Correct output: -91                 | Program output: -84                
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: -83                 | Program output: -57                
Correct output: -90                 | Program output: -90                
Correct output: -47                 | Program output: 61                 
Correct output: -15                 | Program output: 24                 
Correct output: -16                 | Program output: -16                
Correct output: -84                 | Program output: 47                 
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: 0                  
Correct output: -41                 | Program output: -41                
Correct output: -65                 | Program output: -35                
Correct output: -8                  | Program output: -8                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_integer_193} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while})
Lexicase best program: (exec_shove (in2 exec_do*times (exec_when (exec_while (integer_yank) exec_y_when_autoconstructing (exec_swap (boolean_dup boolean_invert_first_then_and exec_eq exec_do*range ()) (exec_pop (exec_do*range (integer_eq) integer_stackdepth boolean_rot print_newline integer_gt integer_gt print_integer integer_eq) boolean_rot integer_lt exec_empty) boolean_pop) exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec exec_y () integer_dup_times tag_integer_193) integer_empty) integer_pop boolean_not boolean_frominteger exec_shove (integer_rot integer_empty) integer_pop boolean_not boolean_frominteger exec_shove (integer_rot boolean_flush exec_while ())))
Lexicase best errors: [1 1 0 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 72
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_integer_193} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while})
Zero cases best program: (exec_shove (in2 exec_do*times (exec_when (exec_while (integer_yank) exec_y_when_autoconstructing (exec_swap (boolean_dup boolean_invert_first_then_and exec_eq exec_do*range ()) (exec_pop (exec_do*range (integer_eq) integer_stackdepth boolean_rot print_newline integer_gt integer_gt print_integer integer_eq) boolean_rot integer_lt exec_empty) boolean_pop) exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec exec_y () integer_dup_times tag_integer_193) integer_empty) integer_pop boolean_not boolean_frominteger exec_shove (integer_rot integer_empty) integer_pop boolean_not boolean_frominteger exec_shove (integer_rot boolean_flush exec_while ())))
Zero cases best errors: [1 1 0 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 72
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (567 567 180 122 126 125 125 179 123 179)
Population mean number of elite cases: 2.29
Count of perfect (error zero) individuals by case: (567 567 180 122 126 125 125 179 123 179)
Population mean number of perfect (error zero) cases: 2.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_integer_193} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while})
Best program: (exec_shove (in2 exec_do*times (exec_when (exec_while (integer_yank) exec_y_when_autoconstructing (exec_swap (boolean_dup boolean_invert_first_then_and exec_eq exec_do*range ()) (exec_pop (exec_do*range (integer_eq) integer_stackdepth boolean_rot print_newline integer_gt integer_gt print_integer integer_eq) boolean_rot integer_lt exec_empty) boolean_pop) exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec exec_y () integer_dup_times tag_integer_193) integer_empty) integer_pop boolean_not boolean_frominteger exec_shove (integer_rot integer_empty) integer_pop boolean_not boolean_frominteger exec_shove (integer_rot boolean_flush exec_while ())))
Errors: [1 1 0 1 0 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 54
Size: 72
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.707
Median total errors in population: 8
Error averages by case: (0.433 0.433 0.82 0.878 0.874 0.875 0.875 0.821 0.877 0.821)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.426
Average program size in population (points): 84.045
Average percent parens in population: 0.264
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 6.181
Median age in population: 6.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 71
Genome diversity (% unique genomes):	 0.795
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 75
Syntactic diversity (% unique Push programs):	 0.786
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.082
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1609358
--- Timings ---
Current time: 1559314765003 milliseconds
Total Time:          13.4 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         9.3 seconds, 69.7%
Fitness Testing:      2.9 seconds, 21.4%
Report:               1.1 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -26                 | Program output: -26                
Correct output: -81                 | Program output: -12                
Correct output: -97                 | Program output: -97                
Correct output: 8                   | Program output:                    
Correct output: -91                 | Program output: -10                
Correct output: 41                  | Program output: 41                 
Correct output: -20                 | Program output: 24                 
Correct output: -65                 | Program output: 
04                
Correct output: -100                | Program output: -100               
Correct output: -44                 | Program output: -44                
Correct output: -31                 | Program output: -31                
Correct output: 55                  | Program output: 55                 
Correct output: -88                 | Program output: -88                
Correct output: -10                 | Program output: -10                
Correct output: 68                  | Program output: 68                 
Correct output: 21                  | Program output: 86                 
Correct output: 17                  | Program output: 83                 
Correct output: 0                   | Program output: 59                 
Correct output: 1                   | Program output: 73                 
Correct output: 11                  | Program output: 11                 
Correct output: 19                  | Program output: 41                 
Correct output: 1                   | Program output: 74                 
Correct output: 6                   | Program output: 67                 
Correct output: 11                  | Program output: 77                 
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 80                 
Correct output: 9                   | Program output: 89                 
Correct output: 43                  | Program output: 100                
Correct output: 17                  | Program output: 17                 
Correct output: 15                  | Program output: 25                 
Correct output: 44                  | Program output: 68                 
Correct output: 51                  | Program output: 66                 
Correct output: 3                   | Program output: 7                  
Correct output: 10                  | Program output: 21                 
Correct output: -31                 | Program output: 66                 
Correct output: -87                 | Program output: -85                
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: 54                 
Correct output: -50                 | Program output: -50                
Correct output: 4                   | Program output: 4                  
Correct output: -66                 | Program output: -66                
Correct output: -76                 | Program output: -76                
Correct output: -46                 | Program output: -46                
Correct output: 5                   | Program output: 18                 
Correct output: -75                 | Program output: -19                
Correct output: -100                | Program output: -91                
Correct output: -69                 | Program output: -58                
Correct output: -22                 | Program output: -3                 
Correct output: -68                 | Program output: 53                 
Correct output: 17                  | Program output: 17                 
Correct output: -41                 | Program output: -41                
Correct output: 10                  | Program output: 10                 
Correct output: -65                 | Program output: 7                  
Correct output: -86                 | Program output: 88                 
Correct output: -91                 | Program output: -3                 
Correct output: -76                 | Program output: 15                 
Correct output: -41                 | Program output: -41                
Correct output: -10                 | Program output: 98                 
Correct output: -64                 | Program output: -41                
Correct output: -98                 | Program output: -98                
Correct output: -47                 | Program output: -47                
Correct output: -89                 | Program output: -89                
Correct output: 6                   | Program output: 6                  
Correct output: -70                 | Program output: 41                 
Correct output: -56                 | Program output: 59                 
Correct output: -62                 | Program output: 67                 
Correct output: -35                 | Program output: 13                 
Correct output: -48                 | Program output: 69                 
Correct output: -57                 | Program output: -55                
Correct output: 9                   | Program output: 56                 
Correct output: -48                 | Program output: -48                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -63                
Correct output: -92                 | Program output: 46                 
Correct output: -93                 | Program output: -93                
Correct output: -13                 | Program output: 77                 
Correct output: -82                 | Program output: -82                
Correct output: -6                  | Program output: 44                 
Correct output: -91                 | Program output: -53                
Correct output: 32                  | Program output: 77                 
Correct output: 1                   | Program output: 27                 
Correct output: -83                 | Program output: -61                
Correct output: -90                 | Program output: -90                
Correct output: -47                 | Program output: 4                  
Correct output: -15                 | Program output: 24                 
Correct output: -16                 | Program output: 9                  
Correct output: -84                 | Program output: -66                
Correct output: -61                 | Program output: -41                
Correct output: -86                 | Program output: -86                
Correct output: -41                 | Program output: 71                 
Correct output: -65                 | Program output: 11                 
Correct output: -8                  | Program output: 99                 
Correct output: -92                 | Program output: 72                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 3, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 0, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_integer_193} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while})
Lexicase best program: (boolean_or boolean_xor boolean_frominteger boolean_or in1 integer_add exec_yankdup in3 boolean_pop exec_k () (exec_do*range (integer_add boolean_frominteger) integer_mult boolean_invert_second_then_and boolean_dup boolean_invert_first_then_and exec_s (exec_do*range ()) (exec_pop (exec_noop integer_eq) integer_stackdepth boolean_rot print_newline integer_gt integer_gt print_integer integer_eq) (boolean_rot integer_lt exec_empty) boolean_pop) in4 integer_yankdup print_integer exec_flush boolean_yank integer_dec exec_y () integer_dup_times tag_integer_193 integer_empty integer_pop boolean_not boolean_frominteger exec_shove (integer_rot integer_empty) integer_pop boolean_not integer_pop boolean_not boolean_frominteger exec_shove (integer_rot integer_empty) integer_pop boolean_not boolean_frominteger exec_shove (integer_rot boolean_flush exec_while ()))
Lexicase best errors: [0 0 0 1 1 0 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 78
Percent parens: 0.179
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 3, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 0, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_integer_193} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while})
Zero cases best program: (boolean_or boolean_xor boolean_frominteger boolean_or in1 integer_add exec_yankdup in3 boolean_pop exec_k () (exec_do*range (integer_add boolean_frominteger) integer_mult boolean_invert_second_then_and boolean_dup boolean_invert_first_then_and exec_s (exec_do*range ()) (exec_pop (exec_noop integer_eq) integer_stackdepth boolean_rot print_newline integer_gt integer_gt print_integer integer_eq) (boolean_rot integer_lt exec_empty) boolean_pop) in4 integer_yankdup print_integer exec_flush boolean_yank integer_dec exec_y () integer_dup_times tag_integer_193 integer_empty integer_pop boolean_not boolean_frominteger exec_shove (integer_rot integer_empty) integer_pop boolean_not integer_pop boolean_not boolean_frominteger exec_shove (integer_rot integer_empty) integer_pop boolean_not boolean_frominteger exec_shove (integer_rot boolean_flush exec_while ()))
Zero cases best errors: [0 0 0 1 1 0 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 78
Percent parens: 0.179
--- Lexicase Population Statistics ---
Count of elite individuals by case: (214 214 215 401 3 4 183 402 214 183)
Population mean number of elite cases: 2.03
Count of perfect (error zero) individuals by case: (214 214 215 401 3 4 183 402 214 183)
Population mean number of perfect (error zero) cases: 2.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 3, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 0, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_integer_193} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while})
Best program: (boolean_or boolean_xor boolean_frominteger boolean_or in1 integer_add exec_yankdup in3 boolean_pop exec_k () (exec_do*range (integer_add boolean_frominteger) integer_mult boolean_invert_second_then_and boolean_dup boolean_invert_first_then_and exec_s (exec_do*range ()) (exec_pop (exec_noop integer_eq) integer_stackdepth boolean_rot print_newline integer_gt integer_gt print_integer integer_eq) (boolean_rot integer_lt exec_empty) boolean_pop) in4 integer_yankdup print_integer exec_flush boolean_yank integer_dec exec_y () integer_dup_times tag_integer_193 integer_empty integer_pop boolean_not boolean_frominteger exec_shove (integer_rot integer_empty) integer_pop boolean_not integer_pop boolean_not boolean_frominteger exec_shove (integer_rot integer_empty) integer_pop boolean_not boolean_frominteger exec_shove (integer_rot boolean_flush exec_while ()))
Errors: [0 0 0 1 1 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 64
Size: 78
Percent parens: 0.179
--- Population Statistics ---
Average total errors in population: 7.967
Median total errors in population: 8
Error averages by case: (0.786 0.786 0.785 0.599 0.997 0.996 0.817 0.598 0.786 0.817)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.703
Average program size in population (points): 76.574
Average percent parens in population: 0.244
Minimum age in population: 5.0
Maximum age in population: 9.625
Average age in population: 8.5134375
Median age in population: 8.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 207
Genome diversity (% unique genomes):	 0.695
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 207
Syntactic diversity (% unique Push programs):	 0.689
Total error diversity:				 0.006
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.101
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 1893332
--- Timings ---
Current time: 1559314767468 milliseconds
Total Time:          15.9 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.3 seconds, 70.6%
Fitness Testing:      3.2 seconds, 20.0%
Report:               1.4 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 596
Test mean error for best: 0.59600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -26                 | Program output: -26                
Correct output: -81                 | Program output: -12                
Correct output: -97                 | Program output: -97                
Correct output: 8                   | Program output: 8                  
Correct output: -91                 | Program output: -10                
Correct output: 41                  | Program output: 74                 
Correct output: -20                 | Program output: -20                
Correct output: -65                 | Program output: 
04                
Correct output: -100                | Program output: -100               
Correct output: -44                 | Program output: -44                
Correct output: -31                 | Program output: -31                
Correct output: 55                  | Program output: 55                 
Correct output: -88                 | Program output: -88                
Correct output: -10                 | Program output: -10                
Correct output: 68                  | Program output: 68                 
Correct output: 21                  | Program output: 21                 
Correct output: 17                  | Program output: 33                 
Correct output: 0                   | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 74                 
Correct output: 19                  | Program output: 69                 
Correct output: 1                   | Program output: 70                 
Correct output: 6                   | Program output: 29                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 70                 
Correct output: 4                   | Program output: 78                 
Correct output: 21                  | Program output: 58                 
Correct output: 9                   | Program output: 9                  
Correct output: 43                  | Program output: 77                 
Correct output: 17                  | Program output: 65                 
Correct output: 15                  | Program output: 40                 
Correct output: 44                  | Program output: 68                 
Correct output: 51                  | Program output: 51                 
Correct output: 3                   | Program output: 77                 
Correct output: 10                  | Program output: 25                 
Correct output: -31                 | Program output: 66                 
Correct output: -87                 | Program output: -85                
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: 56                 
Correct output: -50                 | Program output: -50                
Correct output: 4                   | Program output: 86                 
Correct output: -66                 | Program output: -66                
Correct output: -76                 | Program output: -76                
Correct output: -46                 | Program output: -46                
Correct output: 5                   | Program output: 5                  
Correct output: -75                 | Program output: -19                
Correct output: -100                | Program output: -91                
Correct output: -69                 | Program output: -58                
Correct output: -22                 | Program output: -3                 
Correct output: -68                 | Program output: 53                 
Correct output: 17                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: 10                  | Program output: 13                 
Correct output: -65                 | Program output: 7                  
Correct output: -86                 | Program output: -17                
Correct output: -91                 | Program output: -3                 
Correct output: -76                 | Program output: 15                 
Correct output: -41                 | Program output: -41                
Correct output: -10                 | Program output: 98                 
Correct output: -64                 | Program output: -41                
Correct output: -98                 | Program output: -98                
Correct output: -47                 | Program output: -47                
Correct output: -89                 | Program output: -89                
Correct output: 6                   | Program output:                    
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: 59                 
Correct output: -62                 | Program output: 67                 
Correct output: -35                 | Program output: 62                 
Correct output: -48                 | Program output: 69                 
Correct output: -57                 | Program output: -55                
Correct output: 9                   | Program output: 9                  
Correct output: -48                 | Program output: -48                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -63                
Correct output: -92                 | Program output: 81                 
Correct output: -93                 | Program output: -93                
Correct output: -13                 | Program output: 77                 
Correct output: -82                 | Program output: -82                
Correct output: -6                  | Program output: 44                 
Correct output: -91                 | Program output: -53                
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: -83                 | Program output: -61                
Correct output: -90                 | Program output: -90                
Correct output: -47                 | Program output: 4                  
Correct output: -15                 | Program output: -15                
Correct output: -16                 | Program output: 9                  
Correct output: -84                 | Program output: -66                
Correct output: -61                 | Program output: -41                
Correct output: -86                 | Program output: -86                
Correct output: -41                 | Program output: 75                 
Correct output: -65                 | Program output: -65                
Correct output: -8                  | Program output: 18                 
Correct output: -92                 | Program output: -6                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_integer_193} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while})
Lexicase best program: (exec_shove (in2 exec_do*times (exec_when (exec_while (integer_yank) exec_y_when_autoconstructing (exec_swap (in3 boolean_pop exec_k () (exec_do*range (integer_add boolean_frominteger) integer_mult boolean_invert_second_then_and boolean_dup boolean_invert_first_then_and exec_s (exec_do*range ()) (exec_pop (exec_noop integer_eq) integer_stackdepth boolean_rot print_newline integer_gt integer_gt print_integer integer_eq) (boolean_rot integer_lt exec_empty) boolean_pop) exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec exec_y () integer_dup_times tag_integer_193) (integer_empty) exec_s (boolean_not boolean_frominteger exec_shove (exec_while ())) () ())))))
Lexicase best errors: [1 0 0 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 79
Percent parens: 0.316
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_integer_193} {:close 1, :instruction integer_empty} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_while})
Zero cases best program: (exec_shove (in2 exec_do*times (exec_when (exec_while (integer_yank) exec_y_when_autoconstructing (exec_swap (in3 boolean_pop exec_k () (exec_do*range (integer_add boolean_frominteger) integer_mult boolean_invert_second_then_and boolean_dup boolean_invert_first_then_and exec_s (exec_do*range ()) (exec_pop (exec_noop integer_eq) integer_stackdepth boolean_rot print_newline integer_gt integer_gt print_integer integer_eq) (boolean_rot integer_lt exec_empty) boolean_pop) exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec exec_y () integer_dup_times tag_integer_193) (integer_empty) exec_s (boolean_not boolean_frominteger exec_shove (exec_while ())) () ())))))
Zero cases best errors: [1 0 0 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 79
Percent parens: 0.316
--- Lexicase Population Statistics ---
Count of elite individuals by case: (322 201 380 29 341 335 258 262 261 510)
Population mean number of elite cases: 2.90
Count of perfect (error zero) individuals by case: (322 201 380 29 341 335 258 262 261 510)
Population mean number of perfect (error zero) cases: 2.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 3, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_s} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_integer_193} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while})
Best program: (boolean_or boolean_xor boolean_frominteger boolean_or in1 integer_add exec_yankdup in3 boolean_pop exec_k () (exec_do*range (integer_add boolean_frominteger) integer_mult boolean_invert_second_then_and exec_noop boolean_invert_first_then_and exec_s (exec_do*range ()) (exec_pop (exec_noop integer_eq) integer_stackdepth boolean_rot print_newline integer_gt integer_gt print_integer integer_eq) (boolean_rot integer_lt exec_empty) boolean_pop) exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec exec_y () integer_dup_times tag_integer_193 integer_empty integer_pop boolean_not boolean_frominteger exec_shove (integer_rot integer_empty) integer_pop boolean_not boolean_frominteger exec_shove (integer_rot boolean_flush exec_while ()))
Errors: [0 0 1 1 0 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 61
Size: 77
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 7.101
Median total errors in population: 7
Error averages by case: (0.678 0.799 0.62 0.971 0.659 0.665 0.742 0.738 0.739 0.49)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.354
Average program size in population (points): 73.325
Average percent parens in population: 0.220
Minimum age in population: 9.3125
Maximum age in population: 11.625
Average age in population: 10.18359375
Median age in population: 10.3125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 130
Genome diversity (% unique genomes):	 0.597
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 132
Syntactic diversity (% unique Push programs):	 0.589
Total error diversity:				 0.007
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.129
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2219213
--- Timings ---
Current time: 1559314770072 milliseconds
Total Time:          18.5 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        13.3 seconds, 71.7%
Fitness Testing:      3.5 seconds, 18.9%
Report:               1.6 seconds,  8.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 590
Test mean error for best: 0.59000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -26                 | Program output: -26                
Correct output: -81                 | Program output: -81                
Correct output: -97                 | Program output: -97                
Correct output: 8                   | Program output: 97                 
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 41                 
Correct output: -20                 | Program output: 24                 
Correct output: -65                 | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -44                 | Program output: -44                
Correct output: -31                 | Program output: -31                
Correct output: 55                  | Program output: 55                 
Correct output: -88                 | Program output: -88                
Correct output: -10                 | Program output: -10                
Correct output: 68                  | Program output: 68                 
Correct output: 21                  | Program output: 86                 
Correct output: 17                  | Program output: 83                 
Correct output: 0                   | Program output: 59                 
Correct output: 1                   | Program output: 73                 
Correct output: 11                  | Program output: 11                 
Correct output: 19                  | Program output: 41                 
Correct output: 1                   | Program output: 74                 
Correct output: 6                   | Program output: 67                 
Correct output: 11                  | Program output: 77                 
Correct output: 16                  | Program output: 16                 
Correct output: 4                   | Program output: 4                  
Correct output: 21                  | Program output: 80                 
Correct output: 9                   | Program output: 89                 
Correct output: 43                  | Program output: 100                
Correct output: 17                  | Program output: 17                 
Correct output: 15                  | Program output: 25                 
Correct output: 44                  | Program output: 68                 
Correct output: 51                  | Program output: 66                 
Correct output: 3                   | Program output: 7                  
Correct output: 10                  | Program output: 21                 
Correct output: -31                 | Program output: -31                
Correct output: -87                 | Program output: -82                
Correct output: -88                 | Program output: -3                 
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: 54                 
Correct output: -50                 | Program output: -50                
Correct output: 4                   | Program output: 4                  
Correct output: -66                 | Program output: -66                
Correct output: -76                 | Program output: -76                
Correct output: -46                 | Program output: -46                
Correct output: 5                   | Program output: 18                 
Correct output: -75                 | Program output: -65                
Correct output: -100                | Program output: -91                
Correct output: -69                 | Program output: -69                
Correct output: -22                 | Program output: -3                 
Correct output: -68                 | Program output: -68                
Correct output: 17                  | Program output: 17                 
Correct output: -41                 | Program output: -41                
Correct output: 10                  | Program output: 10                 
Correct output: -65                 | Program output: 7                  
Correct output: -86                 | Program output: 88                 
Correct output: -91                 | Program output: -3                 
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -41                
Correct output: -10                 | Program output: 98                 
Correct output: -64                 | Program output: -41                
Correct output: -98                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -89                 | Program output: -89                
Correct output: 6                   | Program output: 6                  
Correct output: -70                 | Program output: 41                 
Correct output: -56                 | Program output: -37                
Correct output: -62                 | Program output: -62                
Correct output: -35                 | Program output: 13                 
Correct output: -48                 | Program output: -48                
Correct output: -57                 | Program output: -55                
Correct output: 9                   | Program output: 56                 
Correct output: -48                 | Program output: -48                
Correct output: -90                 | Program output: -7                 
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: 46                 
Correct output: -93                 | Program output: -93                
Correct output: -13                 | Program output: 77                 
Correct output: -82                 | Program output: -82                
Correct output: -6                  | Program output: 44                 
Correct output: -91                 | Program output: -53                
Correct output: 32                  | Program output: 77                 
Correct output: 1                   | Program output: 27                 
Correct output: -83                 | Program output: -54                
Correct output: -90                 | Program output: -34                
Correct output: -47                 | Program output: 4                  
Correct output: -15                 | Program output: 5                  
Correct output: -16                 | Program output: 9                  
Correct output: -84                 | Program output: -66                
Correct output: -61                 | Program output: -47                
Correct output: -86                 | Program output: -3                 
Correct output: -41                 | Program output: 71                 
Correct output: -65                 | Program output: 11                 
Correct output: -8                  | Program output: 99                 
Correct output: -92                 | Program output: 72                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_empty} {:close 1, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_integer_193} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while})
Lexicase best program: (exec_shove (in2 exec_do*times (exec_when (exec_while (integer_yank) exec_y_when_autoconstructing (in3 boolean_pop exec_k () (exec_eq exec_do*range ()) exec_pop (exec_do*range (integer_eq) integer_stackdepth boolean_rot print_newline integer_gt integer_gt print_integer integer_eq) boolean_rot integer_lt exec_empty) in1) exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec exec_y () integer_dup_times tag_integer_193) integer_empty) integer_pop boolean_not boolean_frominteger exec_shove (integer_rot integer_empty) integer_pop boolean_not boolean_frominteger exec_shove (integer_rot boolean_flush exec_while ()))
Lexicase best errors: [0 1 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 72
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_empty} {:close 1, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_integer_193} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while})
Zero cases best program: (exec_shove (in2 exec_do*times (exec_when (exec_while (integer_yank) exec_y_when_autoconstructing (in3 boolean_pop exec_k () (exec_eq exec_do*range ()) exec_pop (exec_do*range (integer_eq) integer_stackdepth boolean_rot print_newline integer_gt integer_gt print_integer integer_eq) boolean_rot integer_lt exec_empty) in1) exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec exec_y () integer_dup_times tag_integer_193) integer_empty) integer_pop boolean_not boolean_frominteger exec_shove (integer_rot integer_empty) integer_pop boolean_not boolean_frominteger exec_shove (integer_rot boolean_flush exec_while ()))
Zero cases best errors: [0 1 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 72
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (210 19 118 228 810 712 412 224 118 536)
Population mean number of elite cases: 3.39
Count of perfect (error zero) individuals by case: (210 19 118 228 810 712 412 224 118 536)
Population mean number of perfect (error zero) cases: 3.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 3, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_k} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_k} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_empty} {:close 1, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_integer_193} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while})
Best program: (boolean_or boolean_xor boolean_frominteger boolean_or in1 integer_add exec_yankdup in3 boolean_pop exec_k () (boolean_pop exec_k () (exec_pop (integer_add boolean_frominteger) integer_mult boolean_invert_second_then_and boolean_dup boolean_invert_first_then_and integer_gt integer_gt print_integer integer_eq) boolean_rot integer_lt exec_empty) in1 exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) in3 integer_dec exec_yankdup integer_dup_times tag_integer_193 integer_empty integer_pop boolean_not boolean_frominteger exec_shove (integer_rot integer_empty) integer_pop boolean_not boolean_frominteger exec_shove (integer_rot boolean_flush exec_while ()))
Errors: [0 1 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 55
Size: 67
Percent parens: 0.179
--- Population Statistics ---
Average total errors in population: 6.613
Median total errors in population: 6
Error averages by case: (0.79 0.981 0.882 0.772 0.19 0.288 0.588 0.776 0.882 0.464)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.108
Average program size in population (points): 71.854
Average percent parens in population: 0.233
Minimum age in population: 10.3125
Maximum age in population: 13.015625
Average age in population: 11.523671875
Median age in population: 11.515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 89
Genome diversity (% unique genomes):	 0.656
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 89
Syntactic diversity (% unique Push programs):	 0.647
Total error diversity:				 0.009
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.127
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 2625457
--- Timings ---
Current time: 1559314772589 milliseconds
Total Time:          21.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        15.2 seconds, 72.1%
Fitness Testing:      3.9 seconds, 18.4%
Report:               1.9 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 547
Test mean error for best: 0.54700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -26                 | Program output: -26                
Correct output: -81                 | Program output: -12                
Correct output: -97                 | Program output: -97                
Correct output: 8                   | Program output: 8                  
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 74                 
Correct output: -20                 | Program output: -20                
Correct output: -65                 | Program output: -65                
Correct output: -100                | Program output: -100               
Correct output: -44                 | Program output: -44                
Correct output: -31                 | Program output: -31                
Correct output: 55                  | Program output: 55                 
Correct output: -88                 | Program output: -88                
Correct output: -10                 | Program output: -10                
Correct output: 68                  | Program output: 68                 
Correct output: 21                  | Program output: 21                 
Correct output: 17                  | Program output: 33                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 74                 
Correct output: 19                  | Program output: 69                 
Correct output: 1                   | Program output: 70                 
Correct output: 6                   | Program output: 29                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 70                 
Correct output: 4                   | Program output: 78                 
Correct output: 21                  | Program output: 58                 
Correct output: 9                   | Program output: 9                  
Correct output: 43                  | Program output: 77                 
Correct output: 17                  | Program output: 65                 
Correct output: 15                  | Program output: 40                 
Correct output: 44                  | Program output: 68                 
Correct output: 51                  | Program output: 51                 
Correct output: 3                   | Program output: 77                 
Correct output: 10                  | Program output: 25                 
Correct output: -31                 | Program output: -27                
Correct output: -87                 | Program output: -78                
Correct output: -88                 | Program output: -58                
Correct output: -72                 | Program output: -42                
Correct output: -83                 | Program output: -83                
Correct output: -50                 | Program output: -7                 
Correct output: 4                   | Program output: 86                 
Correct output: -66                 | Program output: -48                
Correct output: -76                 | Program output: 45                 
Correct output: -46                 | Program output: -21                
Correct output: 5                   | Program output: 5                  
Correct output: -75                 | Program output: -75                
Correct output: -100                | Program output: -100               
Correct output: -69                 | Program output: -52                
Correct output: -22                 | Program output: -22                
Correct output: -68                 | Program output: -6                 
Correct output: 17                  | Program output: 51                 
Correct output: -41                 | Program output: 90                 
Correct output: 10                  | Program output: 13                 
Correct output: -65                 | Program output: -50                
Correct output: -86                 | Program output: -86                
Correct output: -91                 | Program output: -64                
Correct output: -76                 | Program output: -73                
Correct output: -41                 | Program output: -31                
Correct output: -10                 | Program output: -10                
Correct output: -64                 | Program output: 89                 
Correct output: -98                 | Program output: -30                
Correct output: -47                 | Program output: 76                 
Correct output: -89                 | Program output: 11                 
Correct output: 6                   | Program output: 87                 
Correct output: -70                 | Program output: -21                
Correct output: -56                 | Program output: -56                
Correct output: -62                 | Program output: -33                
Correct output: -35                 | Program output: -35                
Correct output: -48                 | Program output: -27                
Correct output: -57                 | Program output: -57                
Correct output: 9                   | Program output: 9                  
Correct output: -48                 | Program output: -38                
Correct output: -90                 | Program output: -71                
Correct output: -92                 | Program output: -1                 
Correct output: -92                 | Program output: -92                
Correct output: -93                 | Program output: -20                
Correct output: -13                 | Program output: 94                 
Correct output: -82                 | Program output: 87                 
Correct output: -6                  | Program output: 61                 
Correct output: -91                 | Program output: -84                
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: -83                 | Program output: -57                
Correct output: -90                 | Program output: -90                
Correct output: -47                 | Program output: 61                 
Correct output: -15                 | Program output: 24                 
Correct output: -16                 | Program output: -16                
Correct output: -84                 | Program output: 47                 
Correct output: -61                 | Program output: -61                
Correct output: -86                 | Program output: 0                  
Correct output: -41                 | Program output: -41                
Correct output: -65                 | Program output: -35                
Correct output: -8                  | Program output: -8                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_integer_193} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop})
Lexicase best program: (boolean_or boolean_xor exec_shove (in2 exec_do*times (exec_when (exec_while (integer_yank) exec_y_when_autoconstructing (exec_swap (in3 exec_yankdup boolean_and boolean_pop exec_k () (exec_do*range (integer_add boolean_frominteger) integer_mult boolean_invert_second_then_and in1) integer_yankdup boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer exec_flush boolean_yank integer_dec exec_y () integer_dup_times tag_integer_193) integer_empty integer_pop boolean_not boolean_frominteger exec_shove (integer_rot integer_empty) integer_pop) ())))))
Lexicase best errors: [0 0 0 1 1 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 58
Percent parens: 0.259
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_k} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_integer_193} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop})
Zero cases best program: (boolean_or boolean_xor exec_shove (in2 exec_do*times (exec_when (exec_while (integer_yank) exec_y_when_autoconstructing (exec_swap (in3 exec_yankdup boolean_and boolean_pop exec_k () (exec_do*range (integer_add boolean_frominteger) integer_mult boolean_invert_second_then_and in1) integer_yankdup boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer exec_flush boolean_yank integer_dec exec_y () integer_dup_times tag_integer_193) integer_empty integer_pop boolean_not boolean_frominteger exec_shove (integer_rot integer_empty) integer_pop) ())))))
Zero cases best errors: [0 0 0 1 1 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 58
Percent parens: 0.259
--- Lexicase Population Statistics ---
Count of elite individuals by case: (64 791 62 619 237 19 551 601 65 460)
Population mean number of elite cases: 3.47
Count of perfect (error zero) individuals by case: (64 791 62 619 237 19 551 601 65 460)
Population mean number of perfect (error zero) cases: 3.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 2, :instruction integer_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 1, :instruction in1} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_integer_193} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop})
Best program: (exec_shove (in2 exec_do*times (exec_when (exec_while (integer_yank)) exec_y_when_autoconstructing (exec_swap (boolean_dup boolean_invert_first_then_and exec_eq exec_do*range () exec_pop (exec_do*range (integer_eq) integer_stackdepth boolean_rot print_newline integer_gt integer_gt print_integer integer_eq) boolean_rot integer_lt exec_empty in1) (integer_yankdup boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer exec_flush boolean_yank integer_dec exec_y () integer_dup_times tag_integer_193) integer_empty integer_pop boolean_not boolean_frominteger exec_shove (integer_rot integer_empty) integer_pop)))))
Errors: [0 0 0 1 1 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 48
Size: 63
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 6.531
Median total errors in population: 6
Error averages by case: (0.936 0.209 0.938 0.381 0.763 0.981 0.449 0.399 0.935 0.54)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.662
Average program size in population (points): 71.072
Average percent parens in population: 0.203
Minimum age in population: 11.46875
Maximum age in population: 14.5078125
Average age in population: 13.2073671875
Median age in population: 13.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 41
Genome diversity (% unique genomes):	 0.632
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.619
Total error diversity:				 0.007
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.124
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 2953483
--- Timings ---
Current time: 1559314775086 milliseconds
Total Time:          23.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.1 seconds, 72.6%
Fitness Testing:      4.2 seconds, 17.9%
Report:               2.1 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 541
Test mean error for best: 0.54100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -26                 | Program output: -26                
Correct output: -81                 | Program output: -81                
Correct output: -97                 | Program output: -97                
Correct output: 8                   | Program output: 8                  
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 74                 
Correct output: -20                 | Program output: -20                
Correct output: -65                 | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -44                 | Program output: -44                
Correct output: -31                 | Program output: -31                
Correct output: 55                  | Program output: 55                 
Correct output: -88                 | Program output: -88                
Correct output: -10                 | Program output: -10                
Correct output: 68                  | Program output: 68                 
Correct output: 21                  | Program output: 21                 
Correct output: 17                  | Program output: 33                 
Correct output: 0                   | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 74                 
Correct output: 19                  | Program output: 69                 
Correct output: 1                   | Program output: 70                 
Correct output: 6                   | Program output: 29                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 70                 
Correct output: 4                   | Program output: 78                 
Correct output: 21                  | Program output: 58                 
Correct output: 9                   | Program output: 9                  
Correct output: 43                  | Program output: 77                 
Correct output: 17                  | Program output: 65                 
Correct output: 15                  | Program output: 40                 
Correct output: 44                  | Program output: 68                 
Correct output: 51                  | Program output: 51                 
Correct output: 3                   | Program output: 77                 
Correct output: 10                  | Program output: 25                 
Correct output: -31                 | Program output: -31                
Correct output: -87                 | Program output: -82                
Correct output: -88                 | Program output: -3                 
Correct output: -72                 | Program output: 10                 
Correct output: -83                 | Program output: 56                 
Correct output: -50                 | Program output: -50                
Correct output: 4                   | Program output: 86                 
Correct output: -66                 | Program output: -14                
Correct output: -76                 | Program output: -76                
Correct output: -46                 | Program output: -46                
Correct output: 5                   | Program output: 5                  
Correct output: -75                 | Program output: -65                
Correct output: -100                | Program output: -16                
Correct output: -69                 | Program output: -69                
Correct output: -22                 | Program output: 76                 
Correct output: -68                 | Program output: -68                
Correct output: 17                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: 10                  | Program output: 13                 
Correct output: -65                 | Program output: -65                
Correct output: -86                 | Program output: -17                
Correct output: -91                 | Program output: -91                
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: 73                 
Correct output: -10                 | Program output: -9                 
Correct output: -64                 | Program output: -41                
Correct output: -98                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -89                 | Program output: -89                
Correct output: 6                   | Program output: 87                 
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -37                
Correct output: -62                 | Program output: -62                
Correct output: -35                 | Program output: 62                 
Correct output: -48                 | Program output: -48                
Correct output: -57                 | Program output: -55                
Correct output: 9                   | Program output: 9                  
Correct output: -48                 | Program output: -16                
Correct output: -90                 | Program output: -7                 
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: 81                 
Correct output: -93                 | Program output: 21                 
Correct output: -13                 | Program output: 77                 
Correct output: -82                 | Program output: -82                
Correct output: -6                  | Program output: 44                 
Correct output: -91                 | Program output: -91                
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: -83                 | Program output: -54                
Correct output: -90                 | Program output: -34                
Correct output: -47                 | Program output: 4                  
Correct output: -15                 | Program output: -15                
Correct output: -16                 | Program output: -14                
Correct output: -84                 | Program output: -66                
Correct output: -61                 | Program output: -47                
Correct output: -86                 | Program output: -3                 
Correct output: -41                 | Program output: 75                 
Correct output: -65                 | Program output: -65                
Correct output: -8                  | Program output: 18                 
Correct output: -92                 | Program output: -6                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_k} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_empty} {:close 1, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_integer_193} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_integer_193} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while})
Lexicase best program: (exec_shove (in2 exec_do*times (exec_when (exec_while (integer_yank) exec_y_when_autoconstructing (in3 boolean_pop exec_k () (exec_do*range () integer_add integer_gt integer_gt print_integer integer_eq) boolean_rot integer_lt exec_empty) in1) exec_do*times (boolean_pop boolean_and exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec exec_y () integer_dup_times tag_integer_193) integer_empty) integer_pop boolean_not boolean_frominteger exec_shove (integer_rot integer_empty) integer_pop boolean_not boolean_frominteger exec_y () integer_dup_times tag_integer_193) integer_empty integer_pop boolean_not boolean_frominteger exec_shove (integer_rot integer_empty) boolean_flush exec_while ())
Lexicase best errors: [1 0 0 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 77
Percent parens: 0.234
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_k} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_empty} {:close 1, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_integer_193} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_integer_193} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while})
Zero cases best program: (exec_shove (in2 exec_do*times (exec_when (exec_while (integer_yank) exec_y_when_autoconstructing (in3 boolean_pop exec_k () (exec_do*range () integer_add integer_gt integer_gt print_integer integer_eq) boolean_rot integer_lt exec_empty) in1) exec_do*times (boolean_pop boolean_and exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec exec_y () integer_dup_times tag_integer_193) integer_empty) integer_pop boolean_not boolean_frominteger exec_shove (integer_rot integer_empty) integer_pop boolean_not boolean_frominteger exec_y () integer_dup_times tag_integer_193) integer_empty integer_pop boolean_not boolean_frominteger exec_shove (integer_rot integer_empty) boolean_flush exec_while ())
Zero cases best errors: [1 0 0 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 77
Percent parens: 0.234
--- Lexicase Population Statistics ---
Count of elite individuals by case: (245 429 199 817 866 565 2 83 317 2)
Population mean number of elite cases: 3.53
Count of perfect (error zero) individuals by case: (245 429 199 817 866 565 2 83 317 2)
Population mean number of perfect (error zero) cases: 3.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_k} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_empty} {:close 1, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_integer_193} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_integer_193} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while})
Best program: (exec_shove (in2 exec_do*times (exec_when (exec_while (integer_yank) exec_y_when_autoconstructing (in3 boolean_pop exec_k () (exec_do*range () integer_add integer_gt integer_gt print_integer integer_eq) boolean_rot integer_lt exec_empty) in1) exec_do*times (boolean_pop boolean_and exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec exec_y () integer_dup_times tag_integer_193) integer_empty) integer_pop boolean_not boolean_frominteger exec_shove (integer_rot integer_empty) integer_pop boolean_not boolean_frominteger exec_y () integer_dup_times tag_integer_193) integer_empty integer_pop boolean_not boolean_frominteger exec_shove (integer_rot integer_empty) boolean_flush exec_while ())
Errors: [1 0 0 0 0 0 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 59
Size: 77
Percent parens: 0.234
--- Population Statistics ---
Average total errors in population: 6.475
Median total errors in population: 6
Error averages by case: (0.755 0.571 0.801 0.183 0.134 0.435 0.998 0.917 0.683 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.615
Average program size in population (points): 73.816
Average percent parens in population: 0.207
Minimum age in population: 12.46875
Maximum age in population: 16.078125
Average age in population: 14.7896484375
Median age in population: 14.8046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 82
Genome diversity (% unique genomes):	 0.663
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.656
Total error diversity:				 0.008
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.144
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 3329899
--- Timings ---
Current time: 1559314777677 milliseconds
Total Time:          26.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        19.0 seconds, 73.0%
Fitness Testing:      4.6 seconds, 17.5%
Report:               2.4 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 543
Test mean error for best: 0.54300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -26                 | Program output: -26                
Correct output: -81                 | Program output: -81                
Correct output: -97                 | Program output: -97                
Correct output: 8                   | Program output: 8                  
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 74                 
Correct output: -20                 | Program output: -20                
Correct output: -65                 | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -44                 | Program output: -44                
Correct output: -31                 | Program output: -31                
Correct output: 55                  | Program output: 55                 
Correct output: -88                 | Program output: -88                
Correct output: -10                 | Program output: -10                
Correct output: 68                  | Program output: 68                 
Correct output: 21                  | Program output: 21                 
Correct output: 17                  | Program output: 33                 
Correct output: 0                   | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 74                 
Correct output: 19                  | Program output: 69                 
Correct output: 1                   | Program output: 70                 
Correct output: 6                   | Program output: 29                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 70                 
Correct output: 4                   | Program output: 78                 
Correct output: 21                  | Program output: 58                 
Correct output: 9                   | Program output: 9                  
Correct output: 43                  | Program output: 77                 
Correct output: 17                  | Program output: 65                 
Correct output: 15                  | Program output: 40                 
Correct output: 44                  | Program output: 68                 
Correct output: 51                  | Program output: 51                 
Correct output: 3                   | Program output: 77                 
Correct output: 10                  | Program output: 25                 
Correct output: -31                 | Program output: -31                
Correct output: -87                 | Program output: -82                
Correct output: -88                 | Program output: -3                 
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: 56                 
Correct output: -50                 | Program output: -50                
Correct output: 4                   | Program output: 86                 
Correct output: -66                 | Program output: -66                
Correct output: -76                 | Program output: -76                
Correct output: -46                 | Program output: -46                
Correct output: 5                   | Program output: 5                  
Correct output: -75                 | Program output: -65                
Correct output: -100                | Program output: -91                
Correct output: -69                 | Program output: -69                
Correct output: -22                 | Program output: -3                 
Correct output: -68                 | Program output: -68                
Correct output: 17                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: 10                  | Program output: 13                 
Correct output: -65                 | Program output: 7                  
Correct output: -86                 | Program output: -17                
Correct output: -91                 | Program output: -3                 
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -41                
Correct output: -10                 | Program output: 98                 
Correct output: -64                 | Program output: -41                
Correct output: -98                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -89                 | Program output: -89                
Correct output: 6                   | Program output: 87                 
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -37                
Correct output: -62                 | Program output: -62                
Correct output: -35                 | Program output: 62                 
Correct output: -48                 | Program output: -48                
Correct output: -57                 | Program output: -55                
Correct output: 9                   | Program output: 9                  
Correct output: -48                 | Program output: -48                
Correct output: -90                 | Program output: -7                 
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: 81                 
Correct output: -93                 | Program output: -93                
Correct output: -13                 | Program output: 77                 
Correct output: -82                 | Program output: -82                
Correct output: -6                  | Program output: 44                 
Correct output: -91                 | Program output: -53                
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: -83                 | Program output: -54                
Correct output: -90                 | Program output: -34                
Correct output: -47                 | Program output: 4                  
Correct output: -15                 | Program output: -15                
Correct output: -16                 | Program output: 9                  
Correct output: -84                 | Program output: -66                
Correct output: -61                 | Program output: -47                
Correct output: -86                 | Program output: -3                 
Correct output: -41                 | Program output: 75                 
Correct output: -65                 | Program output: -65                
Correct output: -8                  | Program output: 18                 
Correct output: -92                 | Program output: -6                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_k} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_empty} {:close 1, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_integer_193} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_integer_193} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while})
Lexicase best program: (exec_shove (integer_yankdup exec_do*times (exec_when (exec_while (integer_yank) exec_y_when_autoconstructing (in3 boolean_pop exec_k () (exec_do*range () integer_add integer_gt integer_gt print_integer integer_eq) boolean_rot integer_lt exec_empty) in1) exec_do*times (boolean_pop boolean_and exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec exec_y () integer_dup_times tag_integer_193) integer_empty) integer_pop boolean_not boolean_frominteger exec_shove (integer_rot integer_empty) integer_pop boolean_not boolean_frominteger exec_y () integer_dup_times boolean_frominteger exec_y () integer_dup_times tag_integer_193) integer_empty integer_pop boolean_not boolean_frominteger exec_shove (integer_rot integer_empty) boolean_flush exec_while ())
Lexicase best errors: [1 0 1 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 81
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_k} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_empty} {:close 1, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_integer_193} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_integer_193} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while})
Zero cases best program: (exec_shove (integer_yankdup exec_do*times (exec_when (exec_while (integer_yank) exec_y_when_autoconstructing (in3 boolean_pop exec_k () (exec_do*range () integer_add integer_gt integer_gt print_integer integer_eq) boolean_rot integer_lt exec_empty) in1) exec_do*times (boolean_pop boolean_and exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec exec_y () integer_dup_times tag_integer_193) integer_empty) integer_pop boolean_not boolean_frominteger exec_shove (integer_rot integer_empty) integer_pop boolean_not boolean_frominteger exec_y () integer_dup_times boolean_frominteger exec_y () integer_dup_times tag_integer_193) integer_empty integer_pop boolean_not boolean_frominteger exec_shove (integer_rot integer_empty) boolean_flush exec_while ())
Zero cases best errors: [1 0 1 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 81
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (138 16 255 5 453 464 564 532 463 561)
Population mean number of elite cases: 3.45
Count of perfect (error zero) individuals by case: (138 16 255 5 453 464 564 532 463 561)
Population mean number of perfect (error zero) cases: 3.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_k} {:close 1, :instruction exec_do*range} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_empty} {:close 1, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_integer_193} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_integer_193} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while})
Best program: (exec_shove (exec_when (exec_while (integer_yank) exec_y_when_autoconstructing (in3 boolean_pop exec_k () (exec_do*range () integer_add integer_gt integer_gt print_integer integer_eq) boolean_rot integer_lt exec_empty) in1) exec_do*times (boolean_pop boolean_and exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec exec_y () integer_dup_times tag_integer_193) integer_empty) integer_pop boolean_not boolean_frominteger exec_shove (integer_rot integer_empty) integer_pop exec_y () integer_dup_times tag_integer_193 integer_empty integer_pop boolean_not boolean_frominteger exec_shove (integer_rot integer_empty) integer_pop boolean_not boolean_frominteger exec_shove (integer_rot boolean_flush exec_while ()))
Errors: [1 0 1 1 0 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 60
Size: 78
Percent parens: 0.231
--- Population Statistics ---
Average total errors in population: 6.549
Median total errors in population: 6
Error averages by case: (0.862 0.984 0.745 0.995 0.547 0.536 0.436 0.468 0.537 0.439)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.168
Average program size in population (points): 68.946
Average percent parens in population: 0.244
Minimum age in population: 14.46875
Maximum age in population: 17.607421875
Average age in population: 16.204130859375
Median age in population: 16.24609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 167
Genome diversity (% unique genomes):	 0.578
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 167
Syntactic diversity (% unique Push programs):	 0.578
Total error diversity:				 0.008
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.1
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 3670329
--- Timings ---
Current time: 1559314780162 milliseconds
Total Time:          28.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        21.0 seconds, 73.3%
Fitness Testing:      4.9 seconds, 17.1%
Report:               2.6 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 475
Test mean error for best: 0.47500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -26                 | Program output: -26                
Correct output: -81                 | Program output: -81                
Correct output: -97                 | Program output: -97                
Correct output: 8                   | Program output: 8                  
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 74                 
Correct output: -20                 | Program output: -20                
Correct output: -65                 | Program output: -65                
Correct output: -100                | Program output: -100               
Correct output: -44                 | Program output: -44                
Correct output: -31                 | Program output: -31                
Correct output: 55                  | Program output: 55                 
Correct output: -88                 | Program output: -88                
Correct output: -10                 | Program output: -10                
Correct output: 68                  | Program output: 68                 
Correct output: 21                  | Program output: 21                 
Correct output: 17                  | Program output: 33                 
Correct output: 0                   | Program output: 0                  
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 74                 
Correct output: 19                  | Program output: 69                 
Correct output: 1                   | Program output: 70                 
Correct output: 6                   | Program output: 29                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 70                 
Correct output: 4                   | Program output: 78                 
Correct output: 21                  | Program output: 58                 
Correct output: 9                   | Program output: 9                  
Correct output: 43                  | Program output: 77                 
Correct output: 17                  | Program output: 65                 
Correct output: 15                  | Program output: 40                 
Correct output: 44                  | Program output: 68                 
Correct output: 51                  | Program output: 51                 
Correct output: 3                   | Program output: 77                 
Correct output: 10                  | Program output: 25                 
Correct output: -31                 | Program output: -31                
Correct output: -87                 | Program output: -82                
Correct output: -88                 | Program output: -3                 
Correct output: -72                 | Program output: -42                
Correct output: -83                 | Program output: -83                
Correct output: -50                 | Program output: -50                
Correct output: 4                   | Program output: 86                 
Correct output: -66                 | Program output: -66                
Correct output: -76                 | Program output: -76                
Correct output: -46                 | Program output: -46                
Correct output: 5                   | Program output: 5                  
Correct output: -75                 | Program output: -65                
Correct output: -100                | Program output: -100               
Correct output: -69                 | Program output: -69                
Correct output: -22                 | Program output: -22                
Correct output: -68                 | Program output: -68                
Correct output: 17                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: 10                  | Program output: 13                 
Correct output: -65                 | Program output: -50                
Correct output: -86                 | Program output: -86                
Correct output: -91                 | Program output: -3                 
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -31                
Correct output: -10                 | Program output: -10                
Correct output: -64                 | Program output: -41                
Correct output: -98                 | Program output: -74                
Correct output: -47                 | Program output: -47                
Correct output: -89                 | Program output: -89                
Correct output: 6                   | Program output: 87                 
Correct output: -70                 | Program output: -21                
Correct output: -56                 | Program output: -37                
Correct output: -62                 | Program output: -62                
Correct output: -35                 | Program output: -35                
Correct output: -48                 | Program output: -48                
Correct output: -57                 | Program output: -55                
Correct output: 9                   | Program output: 9                  
Correct output: -48                 | Program output: -38                
Correct output: -90                 | Program output: -7                 
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -92                
Correct output: -93                 | Program output: -20                
Correct output: -13                 | Program output: 77                 
Correct output: -82                 | Program output: -82                
Correct output: -6                  | Program output: 44                 
Correct output: -91                 | Program output: -84                
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: -83                 | Program output: -54                
Correct output: -90                 | Program output: -34                
Correct output: -47                 | Program output: 4                  
Correct output: -15                 | Program output: -15                
Correct output: -16                 | Program output: -16                
Correct output: -84                 | Program output: -66                
Correct output: -61                 | Program output: -47                
Correct output: -86                 | Program output: -3                 
Correct output: -41                 | Program output: -41                
Correct output: -65                 | Program output: -35                
Correct output: -8                  | Program output: -8                 
Correct output: -92                 | Program output: -92                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_k} {:close 1, :instruction exec_empty} {:close 1, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_integer_193} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_integer_193} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while})
Lexicase best program: (exec_shove (in2 exec_do*times (exec_when (exec_while (integer_yank) exec_y_when_autoconstructing (in3 boolean_pop exec_k () (exec_empty) in1) exec_do*times (boolean_pop boolean_and exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec exec_y () integer_dup_times tag_integer_193) integer_empty) integer_pop boolean_not boolean_frominteger exec_shove (integer_rot integer_empty) integer_pop boolean_not boolean_frominteger exec_y () integer_dup_times tag_integer_193) integer_empty) integer_pop boolean_not boolean_frominteger exec_shove (integer_rot integer_empty) boolean_flush exec_while ())
Lexicase best errors: [1 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 68
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_k} {:close 1, :instruction exec_empty} {:close 1, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_integer_193} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_integer_193} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while})
Zero cases best program: (exec_shove (in2 exec_do*times (exec_when (exec_while (integer_yank) exec_y_when_autoconstructing (in3 boolean_pop exec_k () (exec_empty) in1) exec_do*times (boolean_pop boolean_and exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec exec_y () integer_dup_times tag_integer_193) integer_empty) integer_pop boolean_not boolean_frominteger exec_shove (integer_rot integer_empty) integer_pop boolean_not boolean_frominteger exec_y () integer_dup_times tag_integer_193) integer_empty) integer_pop boolean_not boolean_frominteger exec_shove (integer_rot integer_empty) boolean_flush exec_while ())
Zero cases best errors: [1 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 68
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (110 507 756 504 71 515 174 645 603 828)
Population mean number of elite cases: 4.71
Count of perfect (error zero) individuals by case: (110 507 756 504 71 515 174 645 603 828)
Population mean number of perfect (error zero) cases: 4.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction in2} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_empty} {:close 1, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_integer_193} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times} {:close 1, :instruction tag_integer_193} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while})
Best program: (exec_shove (in2 exec_do*times (exec_when (exec_while (integer_yank) exec_y_when_autoconstructing (in3 boolean_pop exec_k () (exec_eq integer_lt exec_empty) in1) exec_do*times (boolean_pop boolean_and exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec exec_y () integer_dup_times tag_integer_193) integer_empty) integer_pop boolean_not boolean_frominteger exec_shove (integer_rot integer_empty) integer_pop boolean_not boolean_frominteger exec_y () integer_dup_times tag_integer_193) integer_empty) integer_pop boolean_not boolean_frominteger exec_shove (integer_rot integer_empty) boolean_flush exec_while ())
Errors: [1 0 0 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 53
Size: 70
Percent parens: 0.243
--- Population Statistics ---
Average total errors in population: 5.287
Median total errors in population: 5
Error averages by case: (0.89 0.493 0.244 0.496 0.929 0.485 0.826 0.355 0.397 0.172)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.076
Average program size in population (points): 70.911
Average percent parens in population: 0.238
Minimum age in population: 15.46875
Maximum age in population: 19.2021484375
Average age in population: 17.7756748046875
Median age in population: 17.796875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 30
Genome diversity (% unique genomes):	 0.628
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.625
Total error diversity:				 0.009
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.105
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 4007430
--- Timings ---
Current time: 1559314782642 milliseconds
Total Time:          31.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.8 seconds, 73.6%
Fitness Testing:      5.2 seconds, 16.8%
Report:               2.9 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 422
Test mean error for best: 0.42200
Test Case    0 | Error: 0
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 1
Test Case   25 | Error: 0
Test Case   26 | Error: 1
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 1
Test Case   33 | Error: 0
Test Case   34 | Error: 1
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 1
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 1
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 1
Test Case   87 | Error: 0
Test Case   88 | Error: 1
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 1
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 1
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 1
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 1
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 1
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 1
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 1
Test Case  270 | Error: 1
Test Case  271 | Error: 1
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 1
Test Case  282 | Error: 1
Test Case  283 | Error: 1
Test Case  284 | Error: 1
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 1
Test Case  311 | Error: 1
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 1
Test Case  326 | Error: 1
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 1
Test Case  357 | Error: 1
Test Case  358 | Error: 1
Test Case  359 | Error: 1
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 1
Test Case  393 | Error: 1
Test Case  394 | Error: 1
Test Case  395 | Error: 1
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 1
Test Case  400 | Error: 1
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 1
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 1
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 1
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 1
Test Case  537 | Error: 1
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 1
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 1
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 1
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 1
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 1
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 1
Test Case  725 | Error: 1
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 1
Test Case  793 | Error: 1
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 1
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 1
Test Case  835 | Error: 1
Test Case  836 | Error: 1
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 1
Test Case  842 | Error: 1
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 1
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 1
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 1
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -26                 | Program output: -26                
Correct output: -81                 | Program output: -81                
Correct output: -97                 | Program output: -97                
Correct output: 8                   | Program output: 8                  
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 74                 
Correct output: -20                 | Program output: -20                
Correct output: -65                 | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -44                 | Program output: -44                
Correct output: -31                 | Program output: -31                
Correct output: 55                  | Program output: 55                 
Correct output: -88                 | Program output: -88                
Correct output: -10                 | Program output: -10                
Correct output: 68                  | Program output: 68                 
Correct output: 21                  | Program output: 21                 
Correct output: 17                  | Program output: 33                 
Correct output: 0                   | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 74                 
Correct output: 19                  | Program output: 69                 
Correct output: 1                   | Program output: 70                 
Correct output: 6                   | Program output: 29                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 70                 
Correct output: 4                   | Program output: 78                 
Correct output: 21                  | Program output: 58                 
Correct output: 9                   | Program output: 9                  
Correct output: 43                  | Program output: 77                 
Correct output: 17                  | Program output: 65                 
Correct output: 15                  | Program output: 40                 
Correct output: 44                  | Program output: 68                 
Correct output: 51                  | Program output: 51                 
Correct output: 3                   | Program output: 77                 
Correct output: 10                  | Program output: 25                 
Correct output: -31                 | Program output: -31                
Correct output: -87                 | Program output: -85                
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: 56                 
Correct output: -50                 | Program output: -50                
Correct output: 4                   | Program output: 86                 
Correct output: -66                 | Program output: -66                
Correct output: -76                 | Program output: -76                
Correct output: -46                 | Program output: -46                
Correct output: 5                   | Program output: 5                  
Correct output: -75                 | Program output: -65                
Correct output: -100                | Program output: -91                
Correct output: -69                 | Program output: -69                
Correct output: -22                 | Program output: -3                 
Correct output: -68                 | Program output: -68                
Correct output: 17                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: 10                  | Program output: 13                 
Correct output: -65                 | Program output: -65                
Correct output: -86                 | Program output: -17                
Correct output: -91                 | Program output: -3                 
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -41                
Correct output: -10                 | Program output: -9                 
Correct output: -64                 | Program output: -64                
Correct output: -98                 | Program output: -98                
Correct output: -47                 | Program output: -47                
Correct output: -89                 | Program output: -89                
Correct output: 6                   | Program output: 87                 
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -37                
Correct output: -62                 | Program output: -62                
Correct output: -35                 | Program output: 62                 
Correct output: -48                 | Program output: -48                
Correct output: -57                 | Program output: -55                
Correct output: 9                   | Program output: 9                  
Correct output: -48                 | Program output: -48                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: 81                 
Correct output: -93                 | Program output: -93                
Correct output: -13                 | Program output: -13                
Correct output: -82                 | Program output: -82                
Correct output: -6                  | Program output: -6                 
Correct output: -91                 | Program output: -91                
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: -83                 | Program output: -61                
Correct output: -90                 | Program output: -90                
Correct output: -47                 | Program output: -47                
Correct output: -15                 | Program output: -15                
Correct output: -16                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -61                 | Program output: -47                
Correct output: -86                 | Program output: -86                
Correct output: -41                 | Program output: 75                 
Correct output: -65                 | Program output: -65                
Correct output: -8                  | Program output: 18                 
Correct output: -92                 | Program output: -6                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_empty} {:close 1, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times})
Lexicase best program: (exec_shove (exec_dup (exec_do*times (exec_when (exec_while (integer_yank) exec_y_when_autoconstructing (in3 boolean_pop exec_k () (exec_eq exec_do*range ()) exec_pop (exec_do*range (integer_eq) integer_stackdepth boolean_rot print_newline integer_gt integer_gt print_integer integer_eq boolean_rot integer_lt exec_empty) in1) exec_do*times (boolean_pop boolean_and integer_min exec_k_when_autoconstructing (boolean_pop boolean_and exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec boolean_pop boolean_and exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec exec_y () integer_dup_times) ()))))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 81
Percent parens: 0.272
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_empty} {:close 1, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times})
Zero cases best program: (exec_shove (exec_dup (exec_do*times (exec_when (exec_while (integer_yank) exec_y_when_autoconstructing (in3 boolean_pop exec_k () (exec_eq exec_do*range ()) exec_pop (exec_do*range (integer_eq) integer_stackdepth boolean_rot print_newline integer_gt integer_gt print_integer integer_eq boolean_rot integer_lt exec_empty) in1) exec_do*times (boolean_pop boolean_and integer_min exec_k_when_autoconstructing (boolean_pop boolean_and exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec boolean_pop boolean_and exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec exec_y () integer_dup_times) ()))))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 81
Percent parens: 0.272
--- Lexicase Population Statistics ---
Count of elite individuals by case: (233 303 889 234 653 224 804 324 588 225)
Population mean number of elite cases: 4.48
Count of perfect (error zero) individuals by case: (233 303 889 234 653 224 804 324 588 225)
Population mean number of perfect (error zero) cases: 4.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_when} {:close 0, :instruction exec_while} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_k} {:close 0, :instruction exec_eq} {:close 2, :instruction exec_do*range} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction print_newline} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_empty} {:close 1, :instruction in1} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction integer_yankdup} {:close 1, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_y} {:close 0, :instruction integer_dup_times})
Best program: (exec_shove (exec_dup (exec_do*times (exec_when (exec_while (integer_yank) exec_y_when_autoconstructing (in3 boolean_pop exec_k () (exec_eq exec_do*range ()) exec_pop (exec_do*range (integer_eq) integer_stackdepth boolean_rot print_newline integer_gt integer_gt print_integer integer_eq boolean_rot integer_lt exec_empty) in1) exec_do*times (boolean_pop boolean_and integer_min exec_k_when_autoconstructing (boolean_pop boolean_and exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec boolean_pop boolean_and exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec exec_y () integer_dup_times) ()))))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 59
Size: 81
Percent parens: 0.272
--- Population Statistics ---
Average total errors in population: 5.523
Median total errors in population: 6
Error averages by case: (0.767 0.697 0.111 0.766 0.347 0.776 0.196 0.676 0.412 0.775)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.862
Average program size in population (points): 72.223
Average percent parens in population: 0.240
Minimum age in population: 18.140625
Maximum age in population: 20.857421875
Average age in population: 19.3539169921875
Median age in population: 19.50244140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 76
Genome diversity (% unique genomes):	 0.599
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 76
Syntactic diversity (% unique Push programs):	 0.598
Total error diversity:				 0.011
Error (vector) diversity:			 0.042
Behavioral diversity:				 0.122
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 4396983
--- Timings ---
Current time: 1559314785233 milliseconds
Total Time:          33.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.8 seconds, 73.7%
Fitness Testing:      5.6 seconds, 16.5%
Report:               3.2 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 12
Successful program: (exec_shove (exec_dup (exec_do*times (exec_when (exec_while (integer_yank) exec_y_when_autoconstructing (in3 boolean_pop exec_k () (exec_eq exec_do*range ()) exec_pop (exec_do*range (integer_eq) integer_stackdepth boolean_rot print_newline integer_gt integer_gt print_integer integer_eq boolean_rot integer_lt exec_empty) in1) exec_do*times (boolean_pop boolean_and integer_min exec_k_when_autoconstructing (boolean_pop boolean_and exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec boolean_pop boolean_and exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec exec_y () integer_dup_times) ()))))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 81


Auto-simplifying with starting size: 81
step: 0
program: (exec_shove (exec_dup (exec_do*times (exec_when (exec_while (integer_yank) exec_y_when_autoconstructing (in3 boolean_pop exec_k () (exec_eq exec_do*range ()) exec_pop (exec_do*range (integer_eq) integer_stackdepth boolean_rot print_newline integer_gt integer_gt print_integer integer_eq boolean_rot integer_lt exec_empty) in1) exec_do*times (boolean_pop boolean_and integer_min exec_k_when_autoconstructing (boolean_pop boolean_and exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec boolean_pop boolean_and exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec exec_y () integer_dup_times) ()))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 81

step: 500
program: (exec_shove (exec_dup (exec_do*times (exec_when (exec_while (integer_yank) exec_y_when_autoconstructing (in3 boolean_pop exec_k () (exec_eq exec_do*range ()) exec_pop (exec_do*range (integer_eq) integer_stackdepth boolean_rot print_newline integer_gt integer_gt print_integer integer_eq boolean_rot integer_lt exec_empty) in1) exec_do*times (boolean_pop boolean_and integer_min exec_k_when_autoconstructing (boolean_pop boolean_and exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec boolean_pop boolean_and exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec exec_y () integer_dup_times) ()))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 81

step: 1000
program: (exec_shove (exec_dup (exec_do*times (exec_when (exec_while (integer_yank) exec_y_when_autoconstructing (in3 boolean_pop exec_k () (exec_eq exec_do*range ()) exec_pop (exec_do*range (integer_eq) integer_stackdepth boolean_rot print_newline integer_gt integer_gt print_integer integer_eq boolean_rot integer_lt exec_empty) in1) exec_do*times (boolean_pop boolean_and integer_min exec_k_when_autoconstructing (boolean_pop boolean_and exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec boolean_pop boolean_and exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec exec_y () integer_dup_times) ()))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 81

step: 1500
program: (exec_shove (exec_dup (exec_do*times (exec_when (exec_while (integer_yank) exec_y_when_autoconstructing (in3 boolean_pop exec_k () (exec_eq exec_do*range ()) exec_pop (exec_do*range (integer_eq) integer_stackdepth boolean_rot print_newline integer_gt integer_gt print_integer integer_eq boolean_rot integer_lt exec_empty) in1) exec_do*times (boolean_pop boolean_and integer_min exec_k_when_autoconstructing (boolean_pop boolean_and exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec boolean_pop boolean_and exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec exec_y () integer_dup_times) ()))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 81

step: 2000
program: (exec_shove (exec_dup (exec_do*times (exec_when (exec_while (integer_yank) exec_y_when_autoconstructing (in3 boolean_pop exec_k () (exec_eq exec_do*range ()) exec_pop (exec_do*range (integer_eq) integer_stackdepth boolean_rot print_newline integer_gt integer_gt print_integer integer_eq boolean_rot integer_lt exec_empty) in1) exec_do*times (boolean_pop boolean_and integer_min exec_k_when_autoconstructing (boolean_pop boolean_and exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec boolean_pop boolean_and exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec exec_y () integer_dup_times) ()))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 81

step: 2500
program: (exec_shove (exec_dup (exec_do*times (exec_when (exec_while (integer_yank) exec_y_when_autoconstructing (in3 boolean_pop exec_k () (exec_eq exec_do*range ()) exec_pop (exec_do*range (integer_eq) integer_stackdepth boolean_rot print_newline integer_gt integer_gt print_integer integer_eq boolean_rot integer_lt exec_empty) in1) exec_do*times (boolean_pop boolean_and integer_min exec_k_when_autoconstructing (boolean_pop boolean_and exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec boolean_pop boolean_and exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec exec_y () integer_dup_times) ()))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 81

step: 3000
program: (exec_shove (exec_dup (exec_do*times (exec_when (exec_while (integer_yank) exec_y_when_autoconstructing (in3 boolean_pop exec_k () (exec_eq exec_do*range ()) exec_pop (exec_do*range (integer_eq) integer_stackdepth boolean_rot print_newline integer_gt integer_gt print_integer integer_eq boolean_rot integer_lt exec_empty) in1) exec_do*times (boolean_pop boolean_and integer_min exec_k_when_autoconstructing (boolean_pop boolean_and exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec boolean_pop boolean_and exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec exec_y () integer_dup_times) ()))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 81

step: 3500
program: (exec_shove (exec_dup (exec_do*times (exec_when (exec_while (integer_yank) exec_y_when_autoconstructing (in3 boolean_pop exec_k () (exec_eq exec_do*range ()) exec_pop (exec_do*range (integer_eq) integer_stackdepth boolean_rot print_newline integer_gt integer_gt print_integer integer_eq boolean_rot integer_lt exec_empty) in1) exec_do*times (boolean_pop boolean_and integer_min exec_k_when_autoconstructing (boolean_pop boolean_and exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec boolean_pop boolean_and exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec exec_y () integer_dup_times) ()))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 81

step: 4000
program: (exec_shove (exec_dup (exec_do*times (exec_when (exec_while (integer_yank) exec_y_when_autoconstructing (in3 boolean_pop exec_k () (exec_eq exec_do*range ()) exec_pop (exec_do*range (integer_eq) integer_stackdepth boolean_rot print_newline integer_gt integer_gt print_integer integer_eq boolean_rot integer_lt exec_empty) in1) exec_do*times (boolean_pop boolean_and integer_min exec_k_when_autoconstructing (boolean_pop boolean_and exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec boolean_pop boolean_and exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec exec_y () integer_dup_times) ()))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 81

step: 4500
program: (exec_shove (exec_dup (exec_do*times (exec_when (exec_while (integer_yank) exec_y_when_autoconstructing (in3 boolean_pop exec_k () (exec_eq exec_do*range ()) exec_pop (exec_do*range (integer_eq) integer_stackdepth boolean_rot print_newline integer_gt integer_gt print_integer integer_eq boolean_rot integer_lt exec_empty) in1) exec_do*times (boolean_pop boolean_and integer_min exec_k_when_autoconstructing (boolean_pop boolean_and exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec boolean_pop boolean_and exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec exec_y () integer_dup_times) ()))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 81

step: 5000
program: (exec_shove (exec_dup (exec_do*times (exec_when (exec_while (integer_yank) exec_y_when_autoconstructing (in3 boolean_pop exec_k () (exec_eq exec_do*range ()) exec_pop (exec_do*range (integer_eq) integer_stackdepth boolean_rot print_newline integer_gt integer_gt print_integer integer_eq boolean_rot integer_lt exec_empty) in1) exec_do*times (boolean_pop boolean_and integer_min exec_k_when_autoconstructing (boolean_pop boolean_and exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec boolean_pop boolean_and exec_do*times (boolean_pop boolean_and integer_empty exec_k_when_autoconstructing (in4 integer_yankdup) (print_integer) exec_flush) boolean_yank integer_dec exec_y () integer_dup_times) ()))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 81

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 422
Test mean error for best: 0.42200
Test Case    0 | Error: 0
Test Case    1 | Error: 1
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 1
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 1
Test Case   24 | Error: 1
Test Case   25 | Error: 0
Test Case   26 | Error: 1
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 1
Test Case   33 | Error: 0
Test Case   34 | Error: 1
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 1
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 1
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 1
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 1
Test Case   87 | Error: 0
Test Case   88 | Error: 1
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 1
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 1
Test Case  214 | Error: 1
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 1
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 1
Test Case  225 | Error: 1
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 1
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 1
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 1
Test Case  248 | Error: 1
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 1
Test Case  254 | Error: 1
Test Case  255 | Error: 1
Test Case  256 | Error: 1
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 1
Test Case  261 | Error: 1
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 1
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 1
Test Case  270 | Error: 1
Test Case  271 | Error: 1
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 1
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 1
Test Case  282 | Error: 1
Test Case  283 | Error: 1
Test Case  284 | Error: 1
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 1
Test Case  299 | Error: 1
Test Case  300 | Error: 1
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 1
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 1
Test Case  310 | Error: 1
Test Case  311 | Error: 1
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 1
Test Case  326 | Error: 1
Test Case  327 | Error: 1
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 1
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 1
Test Case  335 | Error: 1
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 1
Test Case  343 | Error: 1
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 1
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 1
Test Case  357 | Error: 1
Test Case  358 | Error: 1
Test Case  359 | Error: 1
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 1
Test Case  372 | Error: 1
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 1
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 1
Test Case  393 | Error: 1
Test Case  394 | Error: 1
Test Case  395 | Error: 1
Test Case  396 | Error: 1
Test Case  397 | Error: 1
Test Case  398 | Error: 1
Test Case  399 | Error: 1
Test Case  400 | Error: 1
Test Case  401 | Error: 1
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 1
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 1
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 1
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 1
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 1
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 1
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 1
Test Case  502 | Error: 1
Test Case  503 | Error: 1
Test Case  504 | Error: 1
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 0
Test Case  525 | Error: 1
Test Case  526 | Error: 1
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 1
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 1
Test Case  537 | Error: 1
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 0
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 1
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 1
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 1
Test Case  561 | Error: 1
Test Case  562 | Error: 1
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 1
Test Case  585 | Error: 0
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 1
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 1
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 1
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 1
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 1
Test Case  642 | Error: 1
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 1
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 1
Test Case  700 | Error: 0
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 1
Test Case  724 | Error: 1
Test Case  725 | Error: 1
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 1
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 1
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 1
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 1
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 1
Test Case  791 | Error: 1
Test Case  792 | Error: 1
Test Case  793 | Error: 1
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 1
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 1
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 1
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 1
Test Case  835 | Error: 1
Test Case  836 | Error: 1
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 1
Test Case  842 | Error: 1
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 1
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 1
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 1
Test Case  863 | Error: 1
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 1
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 1
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 1
Test Case  877 | Error: 1
Test Case  878 | Error: 1
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 1
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 1
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 1
Test Case  916 | Error: 1
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 0
Test Case  953 | Error: 1
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 1
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -26                 | Program output: -26                
Correct output: -81                 | Program output: -81                
Correct output: -97                 | Program output: -97                
Correct output: 8                   | Program output: 8                  
Correct output: -91                 | Program output: -91                
Correct output: 41                  | Program output: 74                 
Correct output: -20                 | Program output: -20                
Correct output: -65                 | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -44                 | Program output: -44                
Correct output: -31                 | Program output: -31                
Correct output: 55                  | Program output: 55                 
Correct output: -88                 | Program output: -88                
Correct output: -10                 | Program output: -10                
Correct output: 68                  | Program output: 68                 
Correct output: 21                  | Program output: 21                 
Correct output: 17                  | Program output: 33                 
Correct output: 0                   | Program output: 25                 
Correct output: 1                   | Program output: 1                  
Correct output: 11                  | Program output: 74                 
Correct output: 19                  | Program output: 69                 
Correct output: 1                   | Program output: 70                 
Correct output: 6                   | Program output: 29                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 70                 
Correct output: 4                   | Program output: 78                 
Correct output: 21                  | Program output: 58                 
Correct output: 9                   | Program output: 9                  
Correct output: 43                  | Program output: 77                 
Correct output: 17                  | Program output: 65                 
Correct output: 15                  | Program output: 40                 
Correct output: 44                  | Program output: 68                 
Correct output: 51                  | Program output: 51                 
Correct output: 3                   | Program output: 77                 
Correct output: 10                  | Program output: 25                 
Correct output: -31                 | Program output: -31                
Correct output: -87                 | Program output: -85                
Correct output: -88                 | Program output: -88                
Correct output: -72                 | Program output: -72                
Correct output: -83                 | Program output: 56                 
Correct output: -50                 | Program output: -50                
Correct output: 4                   | Program output: 86                 
Correct output: -66                 | Program output: -66                
Correct output: -76                 | Program output: -76                
Correct output: -46                 | Program output: -46                
Correct output: 5                   | Program output: 5                  
Correct output: -75                 | Program output: -65                
Correct output: -100                | Program output: -91                
Correct output: -69                 | Program output: -69                
Correct output: -22                 | Program output: -3                 
Correct output: -68                 | Program output: -68                
Correct output: 17                  | Program output: 51                 
Correct output: -41                 | Program output: -41                
Correct output: 10                  | Program output: 13                 
Correct output: -65                 | Program output: -65                
Correct output: -86                 | Program output: -17                
Correct output: -91                 | Program output: -3                 
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -41                
Correct output: -10                 | Program output: -9                 
Correct output: -64                 | Program output: -64                
Correct output: -98                 | Program output: -98                
Correct output: -47                 | Program output: -47                
Correct output: -89                 | Program output: -89                
Correct output: 6                   | Program output: 87                 
Correct output: -70                 | Program output: -70                
Correct output: -56                 | Program output: -37                
Correct output: -62                 | Program output: -62                
Correct output: -35                 | Program output: 62                 
Correct output: -48                 | Program output: -48                
Correct output: -57                 | Program output: -55                
Correct output: 9                   | Program output: 9                  
Correct output: -48                 | Program output: -48                
Correct output: -90                 | Program output: -90                
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: 81                 
Correct output: -93                 | Program output: -93                
Correct output: -13                 | Program output: -13                
Correct output: -82                 | Program output: -82                
Correct output: -6                  | Program output: -6                 
Correct output: -91                 | Program output: -91                
Correct output: 32                  | Program output: 32                 
Correct output: 1                   | Program output: 1                  
Correct output: -83                 | Program output: -61                
Correct output: -90                 | Program output: -90                
Correct output: -47                 | Program output: -47                
Correct output: -15                 | Program output: -15                
Correct output: -16                 | Program output: -14                
Correct output: -84                 | Program output: -84                
Correct output: -61                 | Program output: -47                
Correct output: -86                 | Program output: -86                
Correct output: -41                 | Program output: 75                 
Correct output: -65                 | Program output: -65                
Correct output: -8                  | Program output: 18                 
Correct output: -92                 | Program output: -6                 
;;******************************
