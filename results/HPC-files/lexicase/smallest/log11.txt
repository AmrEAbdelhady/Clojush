Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[58 -21 58 58] -21] [[3 3 -53 3] -53] [[1 71 1 1] 1] [[77 77 4 77] 4] [[13 -94 13 13] -94] [[-39 -68 -39 -39] -68] [[69 69 81 69] 69] [[-43 -3 -43 -43] -43] [[-47 66 -47 -47] -47] [[2 -50 -50 -50] -50] [(22 22 22 22) 22] [(-73 -73 -73 -73) -73] [(85 85 85 85) 85] [(-57 -57 -57 -57) -57] [(32 32 32 32) 32] [(41 67 17 47) 17] [(0 80 16 51) 0] [(4 77 85 50) 4] [(15 24 64 77) 15] [(33 44 100 20) 20] [(66 61 65 13) 13] [(49 63 66 36) 36] [(85 62 13 91) 13] [(65 55 50 97) 50] [(84 13 1 84) 1] [(15 67 86 7) 7] [(2 1 26 42) 1] [(8 34 45 58) 8] [(32 95 0 94) 0] [(14 37 55 80) 14] [(82 76 96 70) 70] [(83 25 51 77) 25] [(56 32 33 83) 32] [(59 36 54 85) 36] [(22 57 90 22) 22] [(65 -32 -57 70) -57] [(-79 87 80 29) -79] [(-27 -19 14 98) -27] [(-25 15 9 26) -25] [(48 84 -35 16) -35] [(5 45 37 -58) -58] [(91 69 59 100) 59] [(43 -34 -80 -69) -80] [(20 -81 -27 -60) -81] [(-92 -68 8 4) -92] [(-53 68 84 -100) -100] [(23 51 81 -62) -62] [(-97 11 8 -55) -97] [(-7 66 6 -97) -97] [(-73 -100 34 -85) -100] [(-91 -5 -78 -8) -91] [(-28 96 -91 4) -91] [(-50 18 88 85) -50] [(12 68 -94 1) -94] [(-21 93 72 -4) -21] [(59 26 -70 92) -70] [(-78 68 -96 95) -96] [(-54 -15 -23 -90) -90] [(-94 -10 43 -13) -94] [(8 7 94 98) 7] [(36 -98 -99 48) -99] [(-54 21 -45 0) -54] [(-41 28 -48 -28) -48] [(-75 62 -37 -70) -75] [(-8 33 -82 46) -82] [(-64 -21 -81 0) -81] [(-45 -51 13 -26) -51] [(39 -15 -42 -80) -80] [(-35 -4 46 -40) -40] [(-80 56 -18 7) -80] [(100 63 -39 -74) -74] [(71 51 -45 37) -45] [(75 -59 -46 98) -59] [(1 74 22 -58) -58] [(57 95 52 -95) -95] [(49 74 17 32) 17] [(-13 -57 73 -42) -57] [(-82 22 -98 -93) -98] [(-3 -100 99 88) -100] [(-26 4 -14 -74) -74] [(-98 51 32 1) -98] [(11 68 -67 -49) -67] [(-52 -2 67 53) -52] [(16 -67 -52 -69) -69] [(-84 -31 -8 39) -84] [(81 -55 31 -45) -55] [(-73 -96 -13 -80) -96] [(13 73 75 0) 0] [(-82 -18 65 -83) -83] [(-52 -93 2 85) -93] [(-8 -33 -10 -24) -33] [(-25 91 -63 -68) -68] [(48 -51 75 -92) -92] [(-46 76 -70 86) -70] [(19 20 -9 74) -9])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[58 -21 58 58] -21]
Train Case:   6 | Input/Output: [[3 3 -53 3] -53]
Train Case:   7 | Input/Output: [[1 71 1 1] 1]
Train Case:   8 | Input/Output: [[77 77 4 77] 4]
Train Case:   9 | Input/Output: [[13 -94 13 13] -94]
Train Case:  10 | Input/Output: [[-39 -68 -39 -39] -68]
Train Case:  11 | Input/Output: [[69 69 81 69] 69]
Train Case:  12 | Input/Output: [[-43 -3 -43 -43] -43]
Train Case:  13 | Input/Output: [[-47 66 -47 -47] -47]
Train Case:  14 | Input/Output: [[2 -50 -50 -50] -50]
Train Case:  15 | Input/Output: [(22 22 22 22) 22]
Train Case:  16 | Input/Output: [(-73 -73 -73 -73) -73]
Train Case:  17 | Input/Output: [(85 85 85 85) 85]
Train Case:  18 | Input/Output: [(-57 -57 -57 -57) -57]
Train Case:  19 | Input/Output: [(32 32 32 32) 32]
Train Case:  20 | Input/Output: [(41 67 17 47) 17]
Train Case:  21 | Input/Output: [(0 80 16 51) 0]
Train Case:  22 | Input/Output: [(4 77 85 50) 4]
Train Case:  23 | Input/Output: [(15 24 64 77) 15]
Train Case:  24 | Input/Output: [(33 44 100 20) 20]
Train Case:  25 | Input/Output: [(66 61 65 13) 13]
Train Case:  26 | Input/Output: [(49 63 66 36) 36]
Train Case:  27 | Input/Output: [(85 62 13 91) 13]
Train Case:  28 | Input/Output: [(65 55 50 97) 50]
Train Case:  29 | Input/Output: [(84 13 1 84) 1]
Train Case:  30 | Input/Output: [(15 67 86 7) 7]
Train Case:  31 | Input/Output: [(2 1 26 42) 1]
Train Case:  32 | Input/Output: [(8 34 45 58) 8]
Train Case:  33 | Input/Output: [(32 95 0 94) 0]
Train Case:  34 | Input/Output: [(14 37 55 80) 14]
Train Case:  35 | Input/Output: [(82 76 96 70) 70]
Train Case:  36 | Input/Output: [(83 25 51 77) 25]
Train Case:  37 | Input/Output: [(56 32 33 83) 32]
Train Case:  38 | Input/Output: [(59 36 54 85) 36]
Train Case:  39 | Input/Output: [(22 57 90 22) 22]
Train Case:  40 | Input/Output: [(65 -32 -57 70) -57]
Train Case:  41 | Input/Output: [(-79 87 80 29) -79]
Train Case:  42 | Input/Output: [(-27 -19 14 98) -27]
Train Case:  43 | Input/Output: [(-25 15 9 26) -25]
Train Case:  44 | Input/Output: [(48 84 -35 16) -35]
Train Case:  45 | Input/Output: [(5 45 37 -58) -58]
Train Case:  46 | Input/Output: [(91 69 59 100) 59]
Train Case:  47 | Input/Output: [(43 -34 -80 -69) -80]
Train Case:  48 | Input/Output: [(20 -81 -27 -60) -81]
Train Case:  49 | Input/Output: [(-92 -68 8 4) -92]
Train Case:  50 | Input/Output: [(-53 68 84 -100) -100]
Train Case:  51 | Input/Output: [(23 51 81 -62) -62]
Train Case:  52 | Input/Output: [(-97 11 8 -55) -97]
Train Case:  53 | Input/Output: [(-7 66 6 -97) -97]
Train Case:  54 | Input/Output: [(-73 -100 34 -85) -100]
Train Case:  55 | Input/Output: [(-91 -5 -78 -8) -91]
Train Case:  56 | Input/Output: [(-28 96 -91 4) -91]
Train Case:  57 | Input/Output: [(-50 18 88 85) -50]
Train Case:  58 | Input/Output: [(12 68 -94 1) -94]
Train Case:  59 | Input/Output: [(-21 93 72 -4) -21]
Train Case:  60 | Input/Output: [(59 26 -70 92) -70]
Train Case:  61 | Input/Output: [(-78 68 -96 95) -96]
Train Case:  62 | Input/Output: [(-54 -15 -23 -90) -90]
Train Case:  63 | Input/Output: [(-94 -10 43 -13) -94]
Train Case:  64 | Input/Output: [(8 7 94 98) 7]
Train Case:  65 | Input/Output: [(36 -98 -99 48) -99]
Train Case:  66 | Input/Output: [(-54 21 -45 0) -54]
Train Case:  67 | Input/Output: [(-41 28 -48 -28) -48]
Train Case:  68 | Input/Output: [(-75 62 -37 -70) -75]
Train Case:  69 | Input/Output: [(-8 33 -82 46) -82]
Train Case:  70 | Input/Output: [(-64 -21 -81 0) -81]
Train Case:  71 | Input/Output: [(-45 -51 13 -26) -51]
Train Case:  72 | Input/Output: [(39 -15 -42 -80) -80]
Train Case:  73 | Input/Output: [(-35 -4 46 -40) -40]
Train Case:  74 | Input/Output: [(-80 56 -18 7) -80]
Train Case:  75 | Input/Output: [(100 63 -39 -74) -74]
Train Case:  76 | Input/Output: [(71 51 -45 37) -45]
Train Case:  77 | Input/Output: [(75 -59 -46 98) -59]
Train Case:  78 | Input/Output: [(1 74 22 -58) -58]
Train Case:  79 | Input/Output: [(57 95 52 -95) -95]
Train Case:  80 | Input/Output: [(49 74 17 32) 17]
Train Case:  81 | Input/Output: [(-13 -57 73 -42) -57]
Train Case:  82 | Input/Output: [(-82 22 -98 -93) -98]
Train Case:  83 | Input/Output: [(-3 -100 99 88) -100]
Train Case:  84 | Input/Output: [(-26 4 -14 -74) -74]
Train Case:  85 | Input/Output: [(-98 51 32 1) -98]
Train Case:  86 | Input/Output: [(11 68 -67 -49) -67]
Train Case:  87 | Input/Output: [(-52 -2 67 53) -52]
Train Case:  88 | Input/Output: [(16 -67 -52 -69) -69]
Train Case:  89 | Input/Output: [(-84 -31 -8 39) -84]
Train Case:  90 | Input/Output: [(81 -55 31 -45) -55]
Train Case:  91 | Input/Output: [(-73 -96 -13 -80) -96]
Train Case:  92 | Input/Output: [(13 73 75 0) 0]
Train Case:  93 | Input/Output: [(-82 -18 65 -83) -83]
Train Case:  94 | Input/Output: [(-52 -93 2 85) -93]
Train Case:  95 | Input/Output: [(-8 -33 -10 -24) -33]
Train Case:  96 | Input/Output: [(-25 91 -63 -68) -68]
Train Case:  97 | Input/Output: [(48 -51 75 -92) -92]
Train Case:  98 | Input/Output: [(-46 76 -70 86) -70]
Train Case:  99 | Input/Output: [(19 20 -9 74) -9]
Test Case:   0 | Input/Output: [[-42 -1 -1 -1] -42]
Test Case:   1 | Input/Output: [[86 86 86 12] 12]
Test Case:   2 | Input/Output: [[-13 -13 -35 -13] -35]
Test Case:   3 | Input/Output: [[-33 37 -33 -33] -33]
Test Case:   4 | Input/Output: [[-29 -54 -29 -29] -54]
Test Case:   5 | Input/Output: [[-64 -64 -64 73] -64]
Test Case:   6 | Input/Output: [[-69 -69 -69 -56] -69]
Test Case:   7 | Input/Output: [[62 0 62 62] 0]
Test Case:   8 | Input/Output: [[3 3 52 3] 3]
Test Case:   9 | Input/Output: [[11 11 11 -43] -43]
Test Case:  10 | Input/Output: [[-44 52 52 52] -44]
Test Case:  11 | Input/Output: [[71 71 -23 71] -23]
Test Case:  12 | Input/Output: [[12 12 12 74] 12]
Test Case:  13 | Input/Output: [[41 52 41 41] 41]
Test Case:  14 | Input/Output: [[-30 33 -30 -30] -30]
Test Case:  15 | Input/Output: [[83 -19 83 83] -19]
Test Case:  16 | Input/Output: [[-86 -91 -91 -91] -91]
Test Case:  17 | Input/Output: [[4 4 -75 4] -75]
Test Case:  18 | Input/Output: [[3 43 3 3] 3]
Test Case:  19 | Input/Output: [[-97 -97 -77 -97] -97]
Test Case:  20 | Input/Output: [[58 58 58 -85] -85]
Test Case:  21 | Input/Output: [[-41 -67 -67 -67] -67]
Test Case:  22 | Input/Output: [[-65 71 71 71] -65]
Test Case:  23 | Input/Output: [[1 -90 -90 -90] -90]
Test Case:  24 | Input/Output: [[66 -27 -27 -27] -27]
Test Case:  25 | Input/Output: [[69 69 69 -41] -41]
Test Case:  26 | Input/Output: [[-39 -39 -93 -39] -93]
Test Case:  27 | Input/Output: [[-2 -2 -2 35] -2]
Test Case:  28 | Input/Output: [[-23 -23 -23 28] -23]
Test Case:  29 | Input/Output: [[-41 -41 -41 84] -41]
Test Case:  30 | Input/Output: [[21 21 -57 21] -57]
Test Case:  31 | Input/Output: [[-17 47 -17 -17] -17]
Test Case:  32 | Input/Output: [[86 82 86 86] 82]
Test Case:  33 | Input/Output: [[-44 91 -44 -44] -44]
Test Case:  34 | Input/Output: [[46 36 36 36] 36]
Test Case:  35 | Input/Output: [[57 -91 -91 -91] -91]
Test Case:  36 | Input/Output: [[-76 7 -76 -76] -76]
Test Case:  37 | Input/Output: [[79 -43 79 79] -43]
Test Case:  38 | Input/Output: [[78 77 77 77] 77]
Test Case:  39 | Input/Output: [[-19 -19 98 -19] -19]
Test Case:  40 | Input/Output: [[-92 -92 -92 51] -92]
Test Case:  41 | Input/Output: [[-68 19 19 19] -68]
Test Case:  42 | Input/Output: [[90 75 75 75] 75]
Test Case:  43 | Input/Output: [[-38 -38 -38 31] -38]
Test Case:  44 | Input/Output: [[68 41 41 41] 41]
Test Case:  45 | Input/Output: [[-84 -84 -84 -46] -84]
Test Case:  46 | Input/Output: [[-54 28 28 28] -54]
Test Case:  47 | Input/Output: [[37 -79 37 37] -79]
Test Case:  48 | Input/Output: [[28 28 28 47] 28]
Test Case:  49 | Input/Output: [[65 65 65 80] 65]
Test Case:  50 | Input/Output: [[71 71 -81 71] -81]
Test Case:  51 | Input/Output: [[45 56 45 45] 45]
Test Case:  52 | Input/Output: [[37 37 -68 37] -68]
Test Case:  53 | Input/Output: [[-90 -67 -67 -67] -90]
Test Case:  54 | Input/Output: [[61 61 61 85] 61]
Test Case:  55 | Input/Output: [[20 20 -16 20] -16]
Test Case:  56 | Input/Output: [[1 1 91 1] 1]
Test Case:  57 | Input/Output: [[96 31 96 96] 31]
Test Case:  58 | Input/Output: [[86 86 41 86] 41]
Test Case:  59 | Input/Output: [[-69 11 11 11] -69]
Test Case:  60 | Input/Output: [[98 98 98 58] 58]
Test Case:  61 | Input/Output: [[-11 -11 -11 82] -11]
Test Case:  62 | Input/Output: [[-81 -81 -81 -92] -92]
Test Case:  63 | Input/Output: [[1 1 9 1] 1]
Test Case:  64 | Input/Output: [[44 -91 -91 -91] -91]
Test Case:  65 | Input/Output: [[47 -46 -46 -46] -46]
Test Case:  66 | Input/Output: [[-68 -68 -32 -68] -68]
Test Case:  67 | Input/Output: [[96 96 -80 96] -80]
Test Case:  68 | Input/Output: [[39 39 -89 39] -89]
Test Case:  69 | Input/Output: [[-61 -61 -61 45] -61]
Test Case:  70 | Input/Output: [[-19 -68 -68 -68] -68]
Test Case:  71 | Input/Output: [[-83 -43 -43 -43] -83]
Test Case:  72 | Input/Output: [[98 98 98 58] 58]
Test Case:  73 | Input/Output: [[-47 29 -47 -47] -47]
Test Case:  74 | Input/Output: [[-5 -5 42 -5] -5]
Test Case:  75 | Input/Output: [[49 49 49 78] 49]
Test Case:  76 | Input/Output: [[-3 -71 -71 -71] -71]
Test Case:  77 | Input/Output: [[21 21 -52 21] -52]
Test Case:  78 | Input/Output: [[15 15 15 -9] -9]
Test Case:  79 | Input/Output: [[12 -5 -5 -5] -5]
Test Case:  80 | Input/Output: [[81 -37 -37 -37] -37]
Test Case:  81 | Input/Output: [[77 -22 77 77] -22]
Test Case:  82 | Input/Output: [[15 15 15 95] 15]
Test Case:  83 | Input/Output: [[-77 -48 -48 -48] -77]
Test Case:  84 | Input/Output: [[-40 42 42 42] -40]
Test Case:  85 | Input/Output: [[-20 -9 -20 -20] -20]
Test Case:  86 | Input/Output: [[78 -61 78 78] -61]
Test Case:  87 | Input/Output: [[26 -82 26 26] -82]
Test Case:  88 | Input/Output: [[34 34 34 31] 31]
Test Case:  89 | Input/Output: [[-60 -60 -60 26] -60]
Test Case:  90 | Input/Output: [[-24 -24 -24 37] -24]
Test Case:  91 | Input/Output: [[15 -72 -72 -72] -72]
Test Case:  92 | Input/Output: [[-34 -34 45 -34] -34]
Test Case:  93 | Input/Output: [[-99 -99 -99 94] -99]
Test Case:  94 | Input/Output: [[-35 -35 -56 -35] -56]
Test Case:  95 | Input/Output: [[21 21 85 21] 21]
Test Case:  96 | Input/Output: [[54 9 54 54] 9]
Test Case:  97 | Input/Output: [[-87 60 60 60] -87]
Test Case:  98 | Input/Output: [[66 66 -1 66] -1]
Test Case:  99 | Input/Output: [[-87 -87 80 -87] -87]
Test Case: 100 | Input/Output: [(5 5 5 5) 5]
Test Case: 101 | Input/Output: [(53 53 53 53) 53]
Test Case: 102 | Input/Output: [(19 19 19 19) 19]
Test Case: 103 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 104 | Input/Output: [(46 46 46 46) 46]
Test Case: 105 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 106 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 107 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 108 | Input/Output: [(41 41 41 41) 41]
Test Case: 109 | Input/Output: [(52 52 52 52) 52]
Test Case: 110 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 111 | Input/Output: [(49 49 49 49) 49]
Test Case: 112 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 113 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 114 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 115 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 116 | Input/Output: [(-79 -79 -79 -79) -79]
Test Case: 117 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 118 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 119 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 120 | Input/Output: [(23 23 23 23) 23]
Test Case: 121 | Input/Output: [(88 88 88 88) 88]
Test Case: 122 | Input/Output: [(27 27 27 27) 27]
Test Case: 123 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 124 | Input/Output: [(71 71 71 71) 71]
Test Case: 125 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 126 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 127 | Input/Output: [(94 94 94 94) 94]
Test Case: 128 | Input/Output: [(99 99 99 99) 99]
Test Case: 129 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 130 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 131 | Input/Output: [(76 76 76 76) 76]
Test Case: 132 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 133 | Input/Output: [(50 50 50 50) 50]
Test Case: 134 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 135 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 136 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 137 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 138 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 139 | Input/Output: [(40 40 40 40) 40]
Test Case: 140 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 141 | Input/Output: [(34 34 34 34) 34]
Test Case: 142 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 143 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 144 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 145 | Input/Output: [(61 61 61 61) 61]
Test Case: 146 | Input/Output: [(46 46 46 46) 46]
Test Case: 147 | Input/Output: [(35 35 35 35) 35]
Test Case: 148 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 149 | Input/Output: [(82 82 82 82) 82]
Test Case: 150 | Input/Output: [(81 81 81 81) 81]
Test Case: 151 | Input/Output: [(57 57 57 57) 57]
Test Case: 152 | Input/Output: [(7 7 7 7) 7]
Test Case: 153 | Input/Output: [(26 26 26 26) 26]
Test Case: 154 | Input/Output: [(47 47 47 47) 47]
Test Case: 155 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 156 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 157 | Input/Output: [(-57 -57 -57 -57) -57]
Test Case: 158 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 159 | Input/Output: [(48 48 48 48) 48]
Test Case: 160 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 161 | Input/Output: [(18 18 18 18) 18]
Test Case: 162 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 163 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 164 | Input/Output: [(15 15 15 15) 15]
Test Case: 165 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 166 | Input/Output: [(59 59 59 59) 59]
Test Case: 167 | Input/Output: [(38 38 38 38) 38]
Test Case: 168 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 169 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 170 | Input/Output: [(3 3 3 3) 3]
Test Case: 171 | Input/Output: [(32 32 32 32) 32]
Test Case: 172 | Input/Output: [(56 56 56 56) 56]
Test Case: 173 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 174 | Input/Output: [(23 23 23 23) 23]
Test Case: 175 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 176 | Input/Output: [(53 53 53 53) 53]
Test Case: 177 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 178 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 179 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 180 | Input/Output: [(90 90 90 90) 90]
Test Case: 181 | Input/Output: [(57 57 57 57) 57]
Test Case: 182 | Input/Output: [(16 16 16 16) 16]
Test Case: 183 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 184 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 185 | Input/Output: [(79 79 79 79) 79]
Test Case: 186 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 187 | Input/Output: [(50 50 50 50) 50]
Test Case: 188 | Input/Output: [(-76 -76 -76 -76) -76]
Test Case: 189 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 190 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 191 | Input/Output: [(78 78 78 78) 78]
Test Case: 192 | Input/Output: [(21 21 21 21) 21]
Test Case: 193 | Input/Output: [(47 47 47 47) 47]
Test Case: 194 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 195 | Input/Output: [(56 56 56 56) 56]
Test Case: 196 | Input/Output: [(70 70 70 70) 70]
Test Case: 197 | Input/Output: [(1 1 1 1) 1]
Test Case: 198 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 199 | Input/Output: [(76 76 76 76) 76]
Test Case: 200 | Input/Output: [(28 61 47 69) 28]
Test Case: 201 | Input/Output: [(25 28 100 82) 25]
Test Case: 202 | Input/Output: [(56 51 47 14) 14]
Test Case: 203 | Input/Output: [(54 96 30 53) 30]
Test Case: 204 | Input/Output: [(73 17 68 70) 17]
Test Case: 205 | Input/Output: [(65 12 65 72) 12]
Test Case: 206 | Input/Output: [(50 20 88 31) 20]
Test Case: 207 | Input/Output: [(59 39 50 48) 39]
Test Case: 208 | Input/Output: [(92 16 42 68) 16]
Test Case: 209 | Input/Output: [(27 44 41 12) 12]
Test Case: 210 | Input/Output: [(20 6 11 61) 6]
Test Case: 211 | Input/Output: [(33 53 86 74) 33]
Test Case: 212 | Input/Output: [(87 28 45 30) 28]
Test Case: 213 | Input/Output: [(53 77 45 40) 40]
Test Case: 214 | Input/Output: [(31 33 32 3) 3]
Test Case: 215 | Input/Output: [(46 15 7 11) 7]
Test Case: 216 | Input/Output: [(87 48 81 54) 48]
Test Case: 217 | Input/Output: [(57 26 21 87) 21]
Test Case: 218 | Input/Output: [(23 69 55 98) 23]
Test Case: 219 | Input/Output: [(56 70 24 4) 4]
Test Case: 220 | Input/Output: [(0 34 79 15) 0]
Test Case: 221 | Input/Output: [(83 23 27 37) 23]
Test Case: 222 | Input/Output: [(74 97 22 66) 22]
Test Case: 223 | Input/Output: [(21 8 19 69) 8]
Test Case: 224 | Input/Output: [(52 81 4 38) 4]
Test Case: 225 | Input/Output: [(80 67 59 70) 59]
Test Case: 226 | Input/Output: [(91 99 99 98) 91]
Test Case: 227 | Input/Output: [(70 49 19 48) 19]
Test Case: 228 | Input/Output: [(41 83 13 44) 13]
Test Case: 229 | Input/Output: [(46 59 98 86) 46]
Test Case: 230 | Input/Output: [(89 72 88 99) 72]
Test Case: 231 | Input/Output: [(38 31 43 52) 31]
Test Case: 232 | Input/Output: [(20 62 43 95) 20]
Test Case: 233 | Input/Output: [(44 86 98 97) 44]
Test Case: 234 | Input/Output: [(22 84 39 84) 22]
Test Case: 235 | Input/Output: [(14 45 87 30) 14]
Test Case: 236 | Input/Output: [(25 74 17 65) 17]
Test Case: 237 | Input/Output: [(48 17 94 21) 17]
Test Case: 238 | Input/Output: [(93 8 95 12) 8]
Test Case: 239 | Input/Output: [(88 7 79 100) 7]
Test Case: 240 | Input/Output: [(94 93 54 47) 47]
Test Case: 241 | Input/Output: [(32 89 48 54) 32]
Test Case: 242 | Input/Output: [(67 13 27 58) 13]
Test Case: 243 | Input/Output: [(100 5 57 54) 5]
Test Case: 244 | Input/Output: [(48 23 18 83) 18]
Test Case: 245 | Input/Output: [(32 18 2 61) 2]
Test Case: 246 | Input/Output: [(11 73 44 2) 2]
Test Case: 247 | Input/Output: [(94 31 9 43) 9]
Test Case: 248 | Input/Output: [(94 67 73 30) 30]
Test Case: 249 | Input/Output: [(20 72 31 99) 20]
Test Case: 250 | Input/Output: [(76 85 29 24) 24]
Test Case: 251 | Input/Output: [(24 61 4 20) 4]
Test Case: 252 | Input/Output: [(41 90 4 92) 4]
Test Case: 253 | Input/Output: [(7 76 51 95) 7]
Test Case: 254 | Input/Output: [(75 25 69 18) 18]
Test Case: 255 | Input/Output: [(67 84 39 42) 39]
Test Case: 256 | Input/Output: [(50 82 2 21) 2]
Test Case: 257 | Input/Output: [(34 52 76 81) 34]
Test Case: 258 | Input/Output: [(5 94 19 97) 5]
Test Case: 259 | Input/Output: [(62 41 19 46) 19]
Test Case: 260 | Input/Output: [(66 54 46 87) 46]
Test Case: 261 | Input/Output: [(65 76 26 71) 26]
Test Case: 262 | Input/Output: [(28 19 59 16) 16]
Test Case: 263 | Input/Output: [(51 8 10 81) 8]
Test Case: 264 | Input/Output: [(66 84 68 58) 58]
Test Case: 265 | Input/Output: [(85 10 4 11) 4]
Test Case: 266 | Input/Output: [(77 69 69 51) 51]
Test Case: 267 | Input/Output: [(84 17 55 33) 17]
Test Case: 268 | Input/Output: [(67 38 84 95) 38]
Test Case: 269 | Input/Output: [(73 72 4 81) 4]
Test Case: 270 | Input/Output: [(52 58 85 43) 43]
Test Case: 271 | Input/Output: [(56 41 20 4) 4]
Test Case: 272 | Input/Output: [(24 80 66 5) 5]
Test Case: 273 | Input/Output: [(8 33 93 10) 8]
Test Case: 274 | Input/Output: [(60 92 42 84) 42]
Test Case: 275 | Input/Output: [(100 68 24 49) 24]
Test Case: 276 | Input/Output: [(27 34 20 96) 20]
Test Case: 277 | Input/Output: [(39 83 36 62) 36]
Test Case: 278 | Input/Output: [(71 87 20 76) 20]
Test Case: 279 | Input/Output: [(8 28 78 20) 8]
Test Case: 280 | Input/Output: [(70 75 85 48) 48]
Test Case: 281 | Input/Output: [(24 70 85 56) 24]
Test Case: 282 | Input/Output: [(30 6 3 12) 3]
Test Case: 283 | Input/Output: [(80 52 44 50) 44]
Test Case: 284 | Input/Output: [(37 91 48 69) 37]
Test Case: 285 | Input/Output: [(55 19 95 45) 19]
Test Case: 286 | Input/Output: [(35 21 6 56) 6]
Test Case: 287 | Input/Output: [(50 46 78 100) 46]
Test Case: 288 | Input/Output: [(26 11 48 23) 11]
Test Case: 289 | Input/Output: [(47 24 6 81) 6]
Test Case: 290 | Input/Output: [(22 84 87 1) 1]
Test Case: 291 | Input/Output: [(55 44 44 13) 13]
Test Case: 292 | Input/Output: [(73 74 72 33) 33]
Test Case: 293 | Input/Output: [(53 87 20 87) 20]
Test Case: 294 | Input/Output: [(75 64 13 87) 13]
Test Case: 295 | Input/Output: [(59 25 1 20) 1]
Test Case: 296 | Input/Output: [(44 14 54 99) 14]
Test Case: 297 | Input/Output: [(90 84 65 41) 41]
Test Case: 298 | Input/Output: [(59 4 66 61) 4]
Test Case: 299 | Input/Output: [(45 60 54 46) 45]
Test Case: 300 | Input/Output: [(55 80 91 7) 7]
Test Case: 301 | Input/Output: [(62 80 85 48) 48]
Test Case: 302 | Input/Output: [(3 7 99 57) 3]
Test Case: 303 | Input/Output: [(52 91 15 96) 15]
Test Case: 304 | Input/Output: [(56 3 87 74) 3]
Test Case: 305 | Input/Output: [(51 32 61 36) 32]
Test Case: 306 | Input/Output: [(2 23 74 79) 2]
Test Case: 307 | Input/Output: [(42 86 1 73) 1]
Test Case: 308 | Input/Output: [(82 55 36 29) 29]
Test Case: 309 | Input/Output: [(41 84 77 79) 41]
Test Case: 310 | Input/Output: [(46 87 38 22) 22]
Test Case: 311 | Input/Output: [(84 63 45 95) 45]
Test Case: 312 | Input/Output: [(54 94 46 83) 46]
Test Case: 313 | Input/Output: [(85 10 62 53) 10]
Test Case: 314 | Input/Output: [(79 5 42 6) 5]
Test Case: 315 | Input/Output: [(5 39 92 91) 5]
Test Case: 316 | Input/Output: [(91 64 15 98) 15]
Test Case: 317 | Input/Output: [(82 50 90 11) 11]
Test Case: 318 | Input/Output: [(97 24 91 20) 20]
Test Case: 319 | Input/Output: [(35 31 68 5) 5]
Test Case: 320 | Input/Output: [(41 83 10 48) 10]
Test Case: 321 | Input/Output: [(53 68 73 17) 17]
Test Case: 322 | Input/Output: [(46 4 88 33) 4]
Test Case: 323 | Input/Output: [(5 33 21 40) 5]
Test Case: 324 | Input/Output: [(41 94 48 20) 20]
Test Case: 325 | Input/Output: [(87 19 82 48) 19]
Test Case: 326 | Input/Output: [(21 31 67 88) 21]
Test Case: 327 | Input/Output: [(90 94 76 61) 61]
Test Case: 328 | Input/Output: [(65 80 20 75) 20]
Test Case: 329 | Input/Output: [(61 25 11 36) 11]
Test Case: 330 | Input/Output: [(75 39 3 2) 2]
Test Case: 331 | Input/Output: [(75 65 64 30) 30]
Test Case: 332 | Input/Output: [(56 12 20 91) 12]
Test Case: 333 | Input/Output: [(75 58 100 36) 36]
Test Case: 334 | Input/Output: [(92 0 64 51) 0]
Test Case: 335 | Input/Output: [(43 84 67 100) 43]
Test Case: 336 | Input/Output: [(93 32 61 42) 32]
Test Case: 337 | Input/Output: [(73 63 30 25) 25]
Test Case: 338 | Input/Output: [(30 99 80 48) 30]
Test Case: 339 | Input/Output: [(98 72 90 75) 72]
Test Case: 340 | Input/Output: [(23 70 79 45) 23]
Test Case: 341 | Input/Output: [(83 49 38 93) 38]
Test Case: 342 | Input/Output: [(29 97 73 34) 29]
Test Case: 343 | Input/Output: [(52 32 21 84) 21]
Test Case: 344 | Input/Output: [(44 47 91 35) 35]
Test Case: 345 | Input/Output: [(56 7 7 87) 7]
Test Case: 346 | Input/Output: [(60 49 96 63) 49]
Test Case: 347 | Input/Output: [(15 9 19 42) 9]
Test Case: 348 | Input/Output: [(31 79 23 49) 23]
Test Case: 349 | Input/Output: [(93 68 24 8) 8]
Test Case: 350 | Input/Output: [(26 8 62 91) 8]
Test Case: 351 | Input/Output: [(12 3 39 0) 0]
Test Case: 352 | Input/Output: [(12 47 21 92) 12]
Test Case: 353 | Input/Output: [(69 88 84 52) 52]
Test Case: 354 | Input/Output: [(6 10 79 60) 6]
Test Case: 355 | Input/Output: [(17 69 73 94) 17]
Test Case: 356 | Input/Output: [(1 36 3 55) 1]
Test Case: 357 | Input/Output: [(28 67 8 49) 8]
Test Case: 358 | Input/Output: [(61 1 31 83) 1]
Test Case: 359 | Input/Output: [(21 94 56 18) 18]
Test Case: 360 | Input/Output: [(31 10 31 71) 10]
Test Case: 361 | Input/Output: [(59 22 72 56) 22]
Test Case: 362 | Input/Output: [(54 24 73 36) 24]
Test Case: 363 | Input/Output: [(39 73 93 99) 39]
Test Case: 364 | Input/Output: [(34 0 42 12) 0]
Test Case: 365 | Input/Output: [(47 35 40 74) 35]
Test Case: 366 | Input/Output: [(61 88 30 94) 30]
Test Case: 367 | Input/Output: [(17 42 40 56) 17]
Test Case: 368 | Input/Output: [(68 17 91 82) 17]
Test Case: 369 | Input/Output: [(97 12 29 66) 12]
Test Case: 370 | Input/Output: [(26 75 16 18) 16]
Test Case: 371 | Input/Output: [(72 68 47 68) 47]
Test Case: 372 | Input/Output: [(7 15 97 56) 7]
Test Case: 373 | Input/Output: [(10 14 87 26) 10]
Test Case: 374 | Input/Output: [(0 31 16 69) 0]
Test Case: 375 | Input/Output: [(45 92 82 80) 45]
Test Case: 376 | Input/Output: [(43 83 100 10) 10]
Test Case: 377 | Input/Output: [(32 26 9 4) 4]
Test Case: 378 | Input/Output: [(65 10 73 45) 10]
Test Case: 379 | Input/Output: [(22 21 2 59) 2]
Test Case: 380 | Input/Output: [(58 76 89 78) 58]
Test Case: 381 | Input/Output: [(36 56 59 50) 36]
Test Case: 382 | Input/Output: [(6 24 69 55) 6]
Test Case: 383 | Input/Output: [(76 96 78 40) 40]
Test Case: 384 | Input/Output: [(17 24 54 11) 11]
Test Case: 385 | Input/Output: [(45 81 33 13) 13]
Test Case: 386 | Input/Output: [(19 100 30 11) 11]
Test Case: 387 | Input/Output: [(31 90 19 18) 18]
Test Case: 388 | Input/Output: [(27 46 34 70) 27]
Test Case: 389 | Input/Output: [(79 74 0 82) 0]
Test Case: 390 | Input/Output: [(16 97 30 82) 16]
Test Case: 391 | Input/Output: [(63 35 36 1) 1]
Test Case: 392 | Input/Output: [(73 2 97 76) 2]
Test Case: 393 | Input/Output: [(13 24 62 47) 13]
Test Case: 394 | Input/Output: [(86 18 50 57) 18]
Test Case: 395 | Input/Output: [(73 9 40 87) 9]
Test Case: 396 | Input/Output: [(80 60 94 53) 53]
Test Case: 397 | Input/Output: [(28 87 30 65) 28]
Test Case: 398 | Input/Output: [(18 76 36 18) 18]
Test Case: 399 | Input/Output: [(78 21 23 18) 18]
Test Case: 400 | Input/Output: [(-63 8 -46 -40) -63]
Test Case: 401 | Input/Output: [(47 88 59 -44) -44]
Test Case: 402 | Input/Output: [(59 5 -70 -19) -70]
Test Case: 403 | Input/Output: [(-91 -20 65 -64) -91]
Test Case: 404 | Input/Output: [(-9 -71 25 35) -71]
Test Case: 405 | Input/Output: [(-81 -63 -82 -60) -82]
Test Case: 406 | Input/Output: [(-98 52 -13 -43) -98]
Test Case: 407 | Input/Output: [(54 45 -25 -88) -88]
Test Case: 408 | Input/Output: [(62 7 -58 29) -58]
Test Case: 409 | Input/Output: [(-41 -97 49 82) -97]
Test Case: 410 | Input/Output: [(-91 49 11 -7) -91]
Test Case: 411 | Input/Output: [(-15 -27 60 7) -27]
Test Case: 412 | Input/Output: [(64 49 -25 -62) -62]
Test Case: 413 | Input/Output: [(65 -80 -25 40) -80]
Test Case: 414 | Input/Output: [(45 -29 -21 7) -29]
Test Case: 415 | Input/Output: [(9 87 44 -78) -78]
Test Case: 416 | Input/Output: [(11 -12 56 -66) -66]
Test Case: 417 | Input/Output: [(-52 73 16 57) -52]
Test Case: 418 | Input/Output: [(-53 65 23 78) -53]
Test Case: 419 | Input/Output: [(-76 83 -90 0) -90]
Test Case: 420 | Input/Output: [(-75 77 -86 -31) -86]
Test Case: 421 | Input/Output: [(-98 -82 -52 8) -98]
Test Case: 422 | Input/Output: [(-93 -67 84 46) -93]
Test Case: 423 | Input/Output: [(2 -66 22 6) -66]
Test Case: 424 | Input/Output: [(63 -2 -28 29) -28]
Test Case: 425 | Input/Output: [(48 6 68 61) 6]
Test Case: 426 | Input/Output: [(-98 -53 46 -85) -98]
Test Case: 427 | Input/Output: [(36 -38 2 79) -38]
Test Case: 428 | Input/Output: [(49 69 -9 94) -9]
Test Case: 429 | Input/Output: [(-23 100 30 75) -23]
Test Case: 430 | Input/Output: [(-13 41 46 94) -13]
Test Case: 431 | Input/Output: [(61 -94 15 -76) -94]
Test Case: 432 | Input/Output: [(-46 41 80 73) -46]
Test Case: 433 | Input/Output: [(-53 -74 -69 -25) -74]
Test Case: 434 | Input/Output: [(-36 -81 46 -91) -91]
Test Case: 435 | Input/Output: [(15 99 23 -6) -6]
Test Case: 436 | Input/Output: [(-38 -53 21 49) -53]
Test Case: 437 | Input/Output: [(65 25 -16 23) -16]
Test Case: 438 | Input/Output: [(-47 6 87 44) -47]
Test Case: 439 | Input/Output: [(-82 -5 22 71) -82]
Test Case: 440 | Input/Output: [(-99 37 -48 -73) -99]
Test Case: 441 | Input/Output: [(63 -11 30 -49) -49]
Test Case: 442 | Input/Output: [(-20 44 19 -74) -74]
Test Case: 443 | Input/Output: [(-13 -23 -100 82) -100]
Test Case: 444 | Input/Output: [(-86 87 46 86) -86]
Test Case: 445 | Input/Output: [(-8 28 81 -78) -78]
Test Case: 446 | Input/Output: [(-95 11 -17 -19) -95]
Test Case: 447 | Input/Output: [(-46 16 -16 38) -46]
Test Case: 448 | Input/Output: [(-85 -13 -10 -91) -91]
Test Case: 449 | Input/Output: [(-21 86 -2 -50) -50]
Test Case: 450 | Input/Output: [(46 -93 6 74) -93]
Test Case: 451 | Input/Output: [(-13 -36 -34 -21) -36]
Test Case: 452 | Input/Output: [(96 70 -68 42) -68]
Test Case: 453 | Input/Output: [(32 -86 94 46) -86]
Test Case: 454 | Input/Output: [(31 -28 -100 -88) -100]
Test Case: 455 | Input/Output: [(-36 -71 -82 -89) -89]
Test Case: 456 | Input/Output: [(50 -28 8 -11) -28]
Test Case: 457 | Input/Output: [(-34 71 -58 -29) -58]
Test Case: 458 | Input/Output: [(-81 -59 -61 47) -81]
Test Case: 459 | Input/Output: [(-31 40 -35 72) -35]
Test Case: 460 | Input/Output: [(-27 -20 1 -27) -27]
Test Case: 461 | Input/Output: [(95 -90 8 28) -90]
Test Case: 462 | Input/Output: [(98 52 -69 28) -69]
Test Case: 463 | Input/Output: [(100 -56 -33 -28) -56]
Test Case: 464 | Input/Output: [(1 -28 -99 76) -99]
Test Case: 465 | Input/Output: [(-98 21 -91 -32) -98]
Test Case: 466 | Input/Output: [(49 74 96 -7) -7]
Test Case: 467 | Input/Output: [(-84 -14 32 -56) -84]
Test Case: 468 | Input/Output: [(61 -25 -99 -12) -99]
Test Case: 469 | Input/Output: [(86 90 79 27) 27]
Test Case: 470 | Input/Output: [(-75 -58 -77 63) -77]
Test Case: 471 | Input/Output: [(-22 26 23 78) -22]
Test Case: 472 | Input/Output: [(91 18 -80 49) -80]
Test Case: 473 | Input/Output: [(23 -65 -90 49) -90]
Test Case: 474 | Input/Output: [(-60 4 -38 -37) -60]
Test Case: 475 | Input/Output: [(56 31 21 -30) -30]
Test Case: 476 | Input/Output: [(-96 -34 -86 -82) -96]
Test Case: 477 | Input/Output: [(9 -67 4 20) -67]
Test Case: 478 | Input/Output: [(-78 -56 -85 78) -85]
Test Case: 479 | Input/Output: [(87 43 -97 -50) -97]
Test Case: 480 | Input/Output: [(30 58 -32 -49) -49]
Test Case: 481 | Input/Output: [(42 -10 49 90) -10]
Test Case: 482 | Input/Output: [(-2 6 54 82) -2]
Test Case: 483 | Input/Output: [(84 -78 84 -96) -96]
Test Case: 484 | Input/Output: [(-81 4 -41 -91) -91]
Test Case: 485 | Input/Output: [(60 -78 79 13) -78]
Test Case: 486 | Input/Output: [(77 -78 -100 15) -100]
Test Case: 487 | Input/Output: [(94 31 50 47) 31]
Test Case: 488 | Input/Output: [(-14 58 50 -49) -49]
Test Case: 489 | Input/Output: [(-22 20 80 16) -22]
Test Case: 490 | Input/Output: [(-29 -45 70 -57) -57]
Test Case: 491 | Input/Output: [(-23 57 29 4) -23]
Test Case: 492 | Input/Output: [(50 -35 -4 54) -35]
Test Case: 493 | Input/Output: [(-7 -86 -37 -2) -86]
Test Case: 494 | Input/Output: [(20 -98 -74 -68) -98]
Test Case: 495 | Input/Output: [(-45 -64 79 -35) -64]
Test Case: 496 | Input/Output: [(-16 80 -2 63) -16]
Test Case: 497 | Input/Output: [(80 -4 -30 -26) -30]
Test Case: 498 | Input/Output: [(-41 -48 -46 -60) -60]
Test Case: 499 | Input/Output: [(-18 -9 -37 54) -37]
Test Case: 500 | Input/Output: [(-67 29 -56 -8) -67]
Test Case: 501 | Input/Output: [(81 -7 -15 74) -15]
Test Case: 502 | Input/Output: [(8 68 -41 -74) -74]
Test Case: 503 | Input/Output: [(27 -47 -3 79) -47]
Test Case: 504 | Input/Output: [(56 84 83 14) 14]
Test Case: 505 | Input/Output: [(36 -86 -61 -36) -86]
Test Case: 506 | Input/Output: [(30 -22 3 -32) -32]
Test Case: 507 | Input/Output: [(-93 58 17 72) -93]
Test Case: 508 | Input/Output: [(4 -34 -33 -21) -34]
Test Case: 509 | Input/Output: [(-69 37 -54 -28) -69]
Test Case: 510 | Input/Output: [(-7 -15 -69 59) -69]
Test Case: 511 | Input/Output: [(-92 -12 27 37) -92]
Test Case: 512 | Input/Output: [(-80 43 47 55) -80]
Test Case: 513 | Input/Output: [(-47 -46 19 -96) -96]
Test Case: 514 | Input/Output: [(-59 92 74 -7) -59]
Test Case: 515 | Input/Output: [(-66 -34 -11 47) -66]
Test Case: 516 | Input/Output: [(25 -13 -27 39) -27]
Test Case: 517 | Input/Output: [(46 52 64 -5) -5]
Test Case: 518 | Input/Output: [(-39 -12 41 78) -39]
Test Case: 519 | Input/Output: [(-46 -26 18 100) -46]
Test Case: 520 | Input/Output: [(-50 -8 40 27) -50]
Test Case: 521 | Input/Output: [(-40 89 43 38) -40]
Test Case: 522 | Input/Output: [(-31 -43 48 22) -43]
Test Case: 523 | Input/Output: [(78 34 -16 -26) -26]
Test Case: 524 | Input/Output: [(8 -39 -54 -59) -59]
Test Case: 525 | Input/Output: [(0 43 -96 44) -96]
Test Case: 526 | Input/Output: [(-12 -58 73 -3) -58]
Test Case: 527 | Input/Output: [(5 -8 -28 3) -28]
Test Case: 528 | Input/Output: [(79 -93 -80 -16) -93]
Test Case: 529 | Input/Output: [(45 15 95 -68) -68]
Test Case: 530 | Input/Output: [(52 -89 -29 7) -89]
Test Case: 531 | Input/Output: [(-85 100 35 35) -85]
Test Case: 532 | Input/Output: [(19 1 -19 85) -19]
Test Case: 533 | Input/Output: [(-63 -5 -8 -13) -63]
Test Case: 534 | Input/Output: [(-7 90 97 58) -7]
Test Case: 535 | Input/Output: [(29 -54 -94 -40) -94]
Test Case: 536 | Input/Output: [(-27 52 70 -2) -27]
Test Case: 537 | Input/Output: [(12 -2 84 20) -2]
Test Case: 538 | Input/Output: [(-97 -5 -60 49) -97]
Test Case: 539 | Input/Output: [(-60 38 -46 -2) -60]
Test Case: 540 | Input/Output: [(-29 -84 38 -48) -84]
Test Case: 541 | Input/Output: [(11 91 2 78) 2]
Test Case: 542 | Input/Output: [(79 -11 -55 -11) -55]
Test Case: 543 | Input/Output: [(-12 42 -12 -74) -74]
Test Case: 544 | Input/Output: [(-36 75 -3 61) -36]
Test Case: 545 | Input/Output: [(-53 -32 -19 -96) -96]
Test Case: 546 | Input/Output: [(9 88 63 23) 9]
Test Case: 547 | Input/Output: [(61 46 29 37) 29]
Test Case: 548 | Input/Output: [(71 79 -74 0) -74]
Test Case: 549 | Input/Output: [(56 43 13 -40) -40]
Test Case: 550 | Input/Output: [(-15 -56 43 -60) -60]
Test Case: 551 | Input/Output: [(-49 -49 77 37) -49]
Test Case: 552 | Input/Output: [(-93 47 -93 11) -93]
Test Case: 553 | Input/Output: [(36 64 -76 -25) -76]
Test Case: 554 | Input/Output: [(69 -64 22 18) -64]
Test Case: 555 | Input/Output: [(55 12 -30 21) -30]
Test Case: 556 | Input/Output: [(-13 -44 -23 8) -44]
Test Case: 557 | Input/Output: [(4 83 -93 66) -93]
Test Case: 558 | Input/Output: [(-91 3 28 30) -91]
Test Case: 559 | Input/Output: [(68 65 40 49) 40]
Test Case: 560 | Input/Output: [(71 48 -79 3) -79]
Test Case: 561 | Input/Output: [(-1 -8 -10 -58) -58]
Test Case: 562 | Input/Output: [(-29 66 13 5) -29]
Test Case: 563 | Input/Output: [(99 36 90 99) 36]
Test Case: 564 | Input/Output: [(-42 -97 26 -57) -97]
Test Case: 565 | Input/Output: [(63 -93 -82 -41) -93]
Test Case: 566 | Input/Output: [(85 -52 -93 15) -93]
Test Case: 567 | Input/Output: [(-58 -47 8 -14) -58]
Test Case: 568 | Input/Output: [(-3 -81 52 -67) -81]
Test Case: 569 | Input/Output: [(-52 -12 94 -83) -83]
Test Case: 570 | Input/Output: [(-14 -79 55 85) -79]
Test Case: 571 | Input/Output: [(-13 14 92 -58) -58]
Test Case: 572 | Input/Output: [(-77 -59 2 -41) -77]
Test Case: 573 | Input/Output: [(32 -19 -45 -99) -99]
Test Case: 574 | Input/Output: [(-52 25 -30 40) -52]
Test Case: 575 | Input/Output: [(-21 73 -20 19) -21]
Test Case: 576 | Input/Output: [(-93 -53 7 -55) -93]
Test Case: 577 | Input/Output: [(0 -6 1 -37) -37]
Test Case: 578 | Input/Output: [(16 -59 53 -72) -72]
Test Case: 579 | Input/Output: [(74 -3 -32 53) -32]
Test Case: 580 | Input/Output: [(-46 1 -92 -68) -92]
Test Case: 581 | Input/Output: [(-34 36 95 58) -34]
Test Case: 582 | Input/Output: [(0 7 -55 35) -55]
Test Case: 583 | Input/Output: [(-36 -12 92 2) -36]
Test Case: 584 | Input/Output: [(-70 -77 -72 -75) -77]
Test Case: 585 | Input/Output: [(47 -11 37 89) -11]
Test Case: 586 | Input/Output: [(-65 28 9 -94) -94]
Test Case: 587 | Input/Output: [(2 -85 -27 53) -85]
Test Case: 588 | Input/Output: [(22 67 -42 -35) -42]
Test Case: 589 | Input/Output: [(-66 -3 -95 29) -95]
Test Case: 590 | Input/Output: [(-64 -57 -50 5) -64]
Test Case: 591 | Input/Output: [(52 -72 69 11) -72]
Test Case: 592 | Input/Output: [(61 -43 97 9) -43]
Test Case: 593 | Input/Output: [(-77 -56 -59 89) -77]
Test Case: 594 | Input/Output: [(47 96 70 46) 46]
Test Case: 595 | Input/Output: [(16 32 -35 61) -35]
Test Case: 596 | Input/Output: [(3 -92 -65 -16) -92]
Test Case: 597 | Input/Output: [(-18 -30 20 94) -30]
Test Case: 598 | Input/Output: [(-13 26 -18 -80) -80]
Test Case: 599 | Input/Output: [(38 14 -92 -87) -92]
Test Case: 600 | Input/Output: [(-17 -79 36 -24) -79]
Test Case: 601 | Input/Output: [(64 73 -83 -62) -83]
Test Case: 602 | Input/Output: [(76 24 99 -81) -81]
Test Case: 603 | Input/Output: [(-33 50 -50 -91) -91]
Test Case: 604 | Input/Output: [(73 93 2 66) 2]
Test Case: 605 | Input/Output: [(-69 -42 -91 -57) -91]
Test Case: 606 | Input/Output: [(-73 24 -83 58) -83]
Test Case: 607 | Input/Output: [(41 35 -33 88) -33]
Test Case: 608 | Input/Output: [(-4 -8 -80 -77) -80]
Test Case: 609 | Input/Output: [(90 74 97 51) 51]
Test Case: 610 | Input/Output: [(-2 59 -11 -76) -76]
Test Case: 611 | Input/Output: [(-64 -23 -44 73) -64]
Test Case: 612 | Input/Output: [(-56 -34 -24 44) -56]
Test Case: 613 | Input/Output: [(79 -67 -83 -26) -83]
Test Case: 614 | Input/Output: [(-28 48 -100 -78) -100]
Test Case: 615 | Input/Output: [(-19 37 -38 -75) -75]
Test Case: 616 | Input/Output: [(-96 -4 -61 18) -96]
Test Case: 617 | Input/Output: [(-43 31 -54 -99) -99]
Test Case: 618 | Input/Output: [(65 -3 5 17) -3]
Test Case: 619 | Input/Output: [(30 77 -23 28) -23]
Test Case: 620 | Input/Output: [(82 -100 -86 -45) -100]
Test Case: 621 | Input/Output: [(-75 -14 -81 -61) -81]
Test Case: 622 | Input/Output: [(27 29 -48 24) -48]
Test Case: 623 | Input/Output: [(-87 -53 47 -14) -87]
Test Case: 624 | Input/Output: [(-78 62 -86 -37) -86]
Test Case: 625 | Input/Output: [(90 21 24 23) 21]
Test Case: 626 | Input/Output: [(19 -44 -60 65) -60]
Test Case: 627 | Input/Output: [(86 -36 -24 -69) -69]
Test Case: 628 | Input/Output: [(8 61 65 41) 8]
Test Case: 629 | Input/Output: [(-26 -65 100 6) -65]
Test Case: 630 | Input/Output: [(-83 -83 50 -38) -83]
Test Case: 631 | Input/Output: [(24 -86 63 -80) -86]
Test Case: 632 | Input/Output: [(27 97 -52 65) -52]
Test Case: 633 | Input/Output: [(-73 -93 -42 -48) -93]
Test Case: 634 | Input/Output: [(79 -90 -22 -57) -90]
Test Case: 635 | Input/Output: [(-28 61 78 75) -28]
Test Case: 636 | Input/Output: [(-100 -18 -58 64) -100]
Test Case: 637 | Input/Output: [(29 29 12 -99) -99]
Test Case: 638 | Input/Output: [(-99 -71 43 24) -99]
Test Case: 639 | Input/Output: [(55 -34 -75 -6) -75]
Test Case: 640 | Input/Output: [(-51 89 -37 72) -51]
Test Case: 641 | Input/Output: [(-61 -47 -56 4) -61]
Test Case: 642 | Input/Output: [(14 65 96 71) 14]
Test Case: 643 | Input/Output: [(50 10 48 -53) -53]
Test Case: 644 | Input/Output: [(56 -47 -65 64) -65]
Test Case: 645 | Input/Output: [(-6 -45 -77 -10) -77]
Test Case: 646 | Input/Output: [(77 -36 -58 72) -58]
Test Case: 647 | Input/Output: [(31 -66 49 85) -66]
Test Case: 648 | Input/Output: [(-64 -94 41 85) -94]
Test Case: 649 | Input/Output: [(-18 4 -69 71) -69]
Test Case: 650 | Input/Output: [(35 37 99 3) 3]
Test Case: 651 | Input/Output: [(-43 74 20 12) -43]
Test Case: 652 | Input/Output: [(42 58 80 -87) -87]
Test Case: 653 | Input/Output: [(7 -12 40 -74) -74]
Test Case: 654 | Input/Output: [(-73 11 16 -45) -73]
Test Case: 655 | Input/Output: [(88 -40 14 -30) -40]
Test Case: 656 | Input/Output: [(-41 -44 -100 -67) -100]
Test Case: 657 | Input/Output: [(47 -89 62 -60) -89]
Test Case: 658 | Input/Output: [(-51 49 -56 84) -56]
Test Case: 659 | Input/Output: [(-21 31 -20 43) -21]
Test Case: 660 | Input/Output: [(85 -25 -4 11) -25]
Test Case: 661 | Input/Output: [(-94 -98 -92 -96) -98]
Test Case: 662 | Input/Output: [(16 -93 -45 22) -93]
Test Case: 663 | Input/Output: [(25 62 99 -20) -20]
Test Case: 664 | Input/Output: [(48 93 -72 -71) -72]
Test Case: 665 | Input/Output: [(23 94 54 7) 7]
Test Case: 666 | Input/Output: [(93 -76 -68 67) -76]
Test Case: 667 | Input/Output: [(-76 -30 36 -81) -81]
Test Case: 668 | Input/Output: [(-38 -76 23 22) -76]
Test Case: 669 | Input/Output: [(42 -56 -65 -19) -65]
Test Case: 670 | Input/Output: [(47 31 64 64) 31]
Test Case: 671 | Input/Output: [(83 64 -75 -25) -75]
Test Case: 672 | Input/Output: [(79 -52 -28 59) -52]
Test Case: 673 | Input/Output: [(-7 43 -13 61) -13]
Test Case: 674 | Input/Output: [(14 79 -71 1) -71]
Test Case: 675 | Input/Output: [(-94 24 57 -17) -94]
Test Case: 676 | Input/Output: [(-54 -84 -72 59) -84]
Test Case: 677 | Input/Output: [(43 -83 -32 74) -83]
Test Case: 678 | Input/Output: [(-82 71 -21 42) -82]
Test Case: 679 | Input/Output: [(-86 -73 16 -16) -86]
Test Case: 680 | Input/Output: [(63 73 68 95) 63]
Test Case: 681 | Input/Output: [(-21 -95 93 92) -95]
Test Case: 682 | Input/Output: [(-12 57 -39 -14) -39]
Test Case: 683 | Input/Output: [(72 -61 6 67) -61]
Test Case: 684 | Input/Output: [(-48 74 -92 43) -92]
Test Case: 685 | Input/Output: [(-81 20 -66 58) -81]
Test Case: 686 | Input/Output: [(-67 77 47 -88) -88]
Test Case: 687 | Input/Output: [(-52 -44 65 76) -52]
Test Case: 688 | Input/Output: [(-58 66 -8 74) -58]
Test Case: 689 | Input/Output: [(1 48 48 -55) -55]
Test Case: 690 | Input/Output: [(-93 48 18 95) -93]
Test Case: 691 | Input/Output: [(-46 29 -66 97) -66]
Test Case: 692 | Input/Output: [(-47 -32 -76 13) -76]
Test Case: 693 | Input/Output: [(-19 -80 13 48) -80]
Test Case: 694 | Input/Output: [(-96 -30 -8 34) -96]
Test Case: 695 | Input/Output: [(95 87 100 -98) -98]
Test Case: 696 | Input/Output: [(50 -69 34 56) -69]
Test Case: 697 | Input/Output: [(-90 1 46 -67) -90]
Test Case: 698 | Input/Output: [(-32 -98 35 -35) -98]
Test Case: 699 | Input/Output: [(-58 -70 23 23) -70]
Test Case: 700 | Input/Output: [(-91 53 2 51) -91]
Test Case: 701 | Input/Output: [(97 87 -5 22) -5]
Test Case: 702 | Input/Output: [(-60 -5 -11 19) -60]
Test Case: 703 | Input/Output: [(-11 -45 7 22) -45]
Test Case: 704 | Input/Output: [(-55 70 42 51) -55]
Test Case: 705 | Input/Output: [(6 -18 63 -8) -18]
Test Case: 706 | Input/Output: [(43 -65 100 -14) -65]
Test Case: 707 | Input/Output: [(-4 -4 -85 23) -85]
Test Case: 708 | Input/Output: [(56 -62 32 60) -62]
Test Case: 709 | Input/Output: [(31 -73 -63 -67) -73]
Test Case: 710 | Input/Output: [(59 -74 -66 -20) -74]
Test Case: 711 | Input/Output: [(100 -55 -66 45) -66]
Test Case: 712 | Input/Output: [(32 -76 16 60) -76]
Test Case: 713 | Input/Output: [(87 89 33 -8) -8]
Test Case: 714 | Input/Output: [(93 -95 -13 -96) -96]
Test Case: 715 | Input/Output: [(-55 41 -29 -36) -55]
Test Case: 716 | Input/Output: [(-88 -48 -11 15) -88]
Test Case: 717 | Input/Output: [(29 -32 -65 -31) -65]
Test Case: 718 | Input/Output: [(-60 40 17 -94) -94]
Test Case: 719 | Input/Output: [(39 -34 71 -78) -78]
Test Case: 720 | Input/Output: [(68 -68 -78 41) -78]
Test Case: 721 | Input/Output: [(-65 -95 -58 22) -95]
Test Case: 722 | Input/Output: [(-68 91 11 20) -68]
Test Case: 723 | Input/Output: [(71 82 61 41) 41]
Test Case: 724 | Input/Output: [(63 -86 -93 20) -93]
Test Case: 725 | Input/Output: [(-26 20 -22 -24) -26]
Test Case: 726 | Input/Output: [(99 -15 92 56) -15]
Test Case: 727 | Input/Output: [(-72 -65 -100 68) -100]
Test Case: 728 | Input/Output: [(-99 -63 82 -70) -99]
Test Case: 729 | Input/Output: [(-72 -94 51 -30) -94]
Test Case: 730 | Input/Output: [(37 -74 47 24) -74]
Test Case: 731 | Input/Output: [(-79 70 -64 94) -79]
Test Case: 732 | Input/Output: [(56 -89 39 -19) -89]
Test Case: 733 | Input/Output: [(-42 -65 37 -71) -71]
Test Case: 734 | Input/Output: [(-43 82 -37 39) -43]
Test Case: 735 | Input/Output: [(-68 29 -79 3) -79]
Test Case: 736 | Input/Output: [(45 -38 66 -21) -38]
Test Case: 737 | Input/Output: [(90 -45 77 38) -45]
Test Case: 738 | Input/Output: [(-51 98 -25 15) -51]
Test Case: 739 | Input/Output: [(11 48 -29 5) -29]
Test Case: 740 | Input/Output: [(34 -54 -23 -62) -62]
Test Case: 741 | Input/Output: [(13 -22 41 -60) -60]
Test Case: 742 | Input/Output: [(100 -91 45 5) -91]
Test Case: 743 | Input/Output: [(54 92 72 55) 54]
Test Case: 744 | Input/Output: [(53 -3 84 -79) -79]
Test Case: 745 | Input/Output: [(63 70 61 9) 9]
Test Case: 746 | Input/Output: [(40 59 34 -22) -22]
Test Case: 747 | Input/Output: [(-45 86 -28 59) -45]
Test Case: 748 | Input/Output: [(-94 -79 -55 -77) -94]
Test Case: 749 | Input/Output: [(29 -6 8 -15) -15]
Test Case: 750 | Input/Output: [(-15 97 61 -40) -40]
Test Case: 751 | Input/Output: [(78 -63 65 95) -63]
Test Case: 752 | Input/Output: [(20 -17 -84 39) -84]
Test Case: 753 | Input/Output: [(-20 -82 -7 -59) -82]
Test Case: 754 | Input/Output: [(65 -98 11 -83) -98]
Test Case: 755 | Input/Output: [(-98 45 -29 -5) -98]
Test Case: 756 | Input/Output: [(-1 9 81 -26) -26]
Test Case: 757 | Input/Output: [(99 51 66 -16) -16]
Test Case: 758 | Input/Output: [(-23 88 34 18) -23]
Test Case: 759 | Input/Output: [(-15 -82 -26 -88) -88]
Test Case: 760 | Input/Output: [(76 73 -21 -4) -21]
Test Case: 761 | Input/Output: [(88 -76 -5 -72) -76]
Test Case: 762 | Input/Output: [(24 71 -70 -91) -91]
Test Case: 763 | Input/Output: [(54 65 58 -12) -12]
Test Case: 764 | Input/Output: [(-54 -70 -98 73) -98]
Test Case: 765 | Input/Output: [(54 65 71 -11) -11]
Test Case: 766 | Input/Output: [(82 -26 82 7) -26]
Test Case: 767 | Input/Output: [(-93 -93 -91 -78) -93]
Test Case: 768 | Input/Output: [(-28 -48 11 71) -48]
Test Case: 769 | Input/Output: [(54 95 -34 -4) -34]
Test Case: 770 | Input/Output: [(76 -67 14 21) -67]
Test Case: 771 | Input/Output: [(-97 -34 -14 86) -97]
Test Case: 772 | Input/Output: [(-60 -70 15 -84) -84]
Test Case: 773 | Input/Output: [(55 94 67 68) 55]
Test Case: 774 | Input/Output: [(45 -93 -16 85) -93]
Test Case: 775 | Input/Output: [(-1 87 5 -52) -52]
Test Case: 776 | Input/Output: [(-11 -76 91 95) -76]
Test Case: 777 | Input/Output: [(46 79 19 35) 19]
Test Case: 778 | Input/Output: [(-7 -25 62 7) -25]
Test Case: 779 | Input/Output: [(26 -20 -52 -68) -68]
Test Case: 780 | Input/Output: [(30 -8 96 -86) -86]
Test Case: 781 | Input/Output: [(31 -56 4 52) -56]
Test Case: 782 | Input/Output: [(97 -45 94 -42) -45]
Test Case: 783 | Input/Output: [(100 56 56 -30) -30]
Test Case: 784 | Input/Output: [(88 10 -79 50) -79]
Test Case: 785 | Input/Output: [(-27 -35 -79 24) -79]
Test Case: 786 | Input/Output: [(28 18 -78 -48) -78]
Test Case: 787 | Input/Output: [(-98 41 -94 -93) -98]
Test Case: 788 | Input/Output: [(75 61 62 -97) -97]
Test Case: 789 | Input/Output: [(12 -16 -45 53) -45]
Test Case: 790 | Input/Output: [(-87 58 92 -26) -87]
Test Case: 791 | Input/Output: [(-56 -72 -31 51) -72]
Test Case: 792 | Input/Output: [(82 -32 43 22) -32]
Test Case: 793 | Input/Output: [(-74 -24 66 -93) -93]
Test Case: 794 | Input/Output: [(-49 -53 75 -28) -53]
Test Case: 795 | Input/Output: [(45 16 -18 -42) -42]
Test Case: 796 | Input/Output: [(10 8 9 -64) -64]
Test Case: 797 | Input/Output: [(-39 37 67 51) -39]
Test Case: 798 | Input/Output: [(-61 27 37 -3) -61]
Test Case: 799 | Input/Output: [(74 -31 -96 21) -96]
Test Case: 800 | Input/Output: [(79 -81 35 -2) -81]
Test Case: 801 | Input/Output: [(-37 37 97 12) -37]
Test Case: 802 | Input/Output: [(26 -46 -47 100) -47]
Test Case: 803 | Input/Output: [(-93 -51 36 -55) -93]
Test Case: 804 | Input/Output: [(95 -17 -60 18) -60]
Test Case: 805 | Input/Output: [(28 41 97 -17) -17]
Test Case: 806 | Input/Output: [(-13 -25 -24 82) -25]
Test Case: 807 | Input/Output: [(-38 78 -51 72) -51]
Test Case: 808 | Input/Output: [(-14 -46 92 73) -46]
Test Case: 809 | Input/Output: [(-73 26 -85 -1) -85]
Test Case: 810 | Input/Output: [(79 -38 -12 26) -38]
Test Case: 811 | Input/Output: [(52 5 89 -26) -26]
Test Case: 812 | Input/Output: [(14 -5 85 -39) -39]
Test Case: 813 | Input/Output: [(-21 -42 47 -7) -42]
Test Case: 814 | Input/Output: [(-98 -45 97 -76) -98]
Test Case: 815 | Input/Output: [(76 -64 -23 92) -64]
Test Case: 816 | Input/Output: [(-52 -38 39 -44) -52]
Test Case: 817 | Input/Output: [(6 -68 -59 -8) -68]
Test Case: 818 | Input/Output: [(-94 5 -27 79) -94]
Test Case: 819 | Input/Output: [(83 -67 -47 86) -67]
Test Case: 820 | Input/Output: [(26 -67 -44 -78) -78]
Test Case: 821 | Input/Output: [(-96 97 -15 -62) -96]
Test Case: 822 | Input/Output: [(88 -87 96 -84) -87]
Test Case: 823 | Input/Output: [(-6 -34 -77 72) -77]
Test Case: 824 | Input/Output: [(-76 29 44 97) -76]
Test Case: 825 | Input/Output: [(-60 24 -52 64) -60]
Test Case: 826 | Input/Output: [(-31 -90 -64 -16) -90]
Test Case: 827 | Input/Output: [(-99 16 -1 41) -99]
Test Case: 828 | Input/Output: [(-16 13 95 17) -16]
Test Case: 829 | Input/Output: [(59 7 -95 -47) -95]
Test Case: 830 | Input/Output: [(-25 96 34 -14) -25]
Test Case: 831 | Input/Output: [(-35 -55 -2 65) -55]
Test Case: 832 | Input/Output: [(70 66 -40 -98) -98]
Test Case: 833 | Input/Output: [(22 77 40 -87) -87]
Test Case: 834 | Input/Output: [(-65 -72 17 -77) -77]
Test Case: 835 | Input/Output: [(86 46 -76 71) -76]
Test Case: 836 | Input/Output: [(-18 -20 -77 -14) -77]
Test Case: 837 | Input/Output: [(62 7 15 -35) -35]
Test Case: 838 | Input/Output: [(5 -18 39 17) -18]
Test Case: 839 | Input/Output: [(80 83 -38 -8) -38]
Test Case: 840 | Input/Output: [(59 3 8 -77) -77]
Test Case: 841 | Input/Output: [(-62 -64 40 36) -64]
Test Case: 842 | Input/Output: [(12 -92 45 -10) -92]
Test Case: 843 | Input/Output: [(38 -21 -9 -3) -21]
Test Case: 844 | Input/Output: [(74 76 74 -37) -37]
Test Case: 845 | Input/Output: [(-24 87 15 -76) -76]
Test Case: 846 | Input/Output: [(0 -89 -19 61) -89]
Test Case: 847 | Input/Output: [(3 -48 -46 -15) -48]
Test Case: 848 | Input/Output: [(80 53 50 75) 50]
Test Case: 849 | Input/Output: [(-47 62 -33 -74) -74]
Test Case: 850 | Input/Output: [(-8 -61 86 30) -61]
Test Case: 851 | Input/Output: [(-36 44 15 85) -36]
Test Case: 852 | Input/Output: [(78 -98 -14 -23) -98]
Test Case: 853 | Input/Output: [(-7 6 -13 100) -13]
Test Case: 854 | Input/Output: [(85 37 -42 96) -42]
Test Case: 855 | Input/Output: [(-70 -21 65 5) -70]
Test Case: 856 | Input/Output: [(65 -51 -14 5) -51]
Test Case: 857 | Input/Output: [(22 14 -41 57) -41]
Test Case: 858 | Input/Output: [(41 -86 82 -14) -86]
Test Case: 859 | Input/Output: [(-46 77 68 -41) -46]
Test Case: 860 | Input/Output: [(-76 69 87 -94) -94]
Test Case: 861 | Input/Output: [(-41 6 80 -89) -89]
Test Case: 862 | Input/Output: [(45 -70 -58 -75) -75]
Test Case: 863 | Input/Output: [(-15 4 70 -52) -52]
Test Case: 864 | Input/Output: [(-11 -51 -96 -18) -96]
Test Case: 865 | Input/Output: [(-98 9 77 89) -98]
Test Case: 866 | Input/Output: [(37 23 -89 99) -89]
Test Case: 867 | Input/Output: [(40 -99 99 78) -99]
Test Case: 868 | Input/Output: [(21 4 -6 -84) -84]
Test Case: 869 | Input/Output: [(-16 17 80 -36) -36]
Test Case: 870 | Input/Output: [(-18 -19 78 -17) -19]
Test Case: 871 | Input/Output: [(-98 46 76 89) -98]
Test Case: 872 | Input/Output: [(32 -89 -73 -4) -89]
Test Case: 873 | Input/Output: [(-84 41 -88 50) -88]
Test Case: 874 | Input/Output: [(-73 62 54 -78) -78]
Test Case: 875 | Input/Output: [(-49 -84 -27 24) -84]
Test Case: 876 | Input/Output: [(31 -61 37 13) -61]
Test Case: 877 | Input/Output: [(84 -29 -60 -12) -60]
Test Case: 878 | Input/Output: [(-1 -66 -22 -83) -83]
Test Case: 879 | Input/Output: [(-11 -5 74 100) -11]
Test Case: 880 | Input/Output: [(67 -75 15 -90) -90]
Test Case: 881 | Input/Output: [(-94 -84 30 -81) -94]
Test Case: 882 | Input/Output: [(66 5 81 -71) -71]
Test Case: 883 | Input/Output: [(-87 -98 15 41) -98]
Test Case: 884 | Input/Output: [(65 55 100 3) 3]
Test Case: 885 | Input/Output: [(-28 -42 70 -4) -42]
Test Case: 886 | Input/Output: [(-82 59 92 -19) -82]
Test Case: 887 | Input/Output: [(1 97 18 24) 1]
Test Case: 888 | Input/Output: [(9 -93 27 -19) -93]
Test Case: 889 | Input/Output: [(59 -67 -73 80) -73]
Test Case: 890 | Input/Output: [(95 -57 -87 -64) -87]
Test Case: 891 | Input/Output: [(-11 -7 43 -84) -84]
Test Case: 892 | Input/Output: [(84 96 -86 44) -86]
Test Case: 893 | Input/Output: [(-96 -24 -24 -93) -96]
Test Case: 894 | Input/Output: [(97 60 -86 -9) -86]
Test Case: 895 | Input/Output: [(1 -69 -77 -72) -77]
Test Case: 896 | Input/Output: [(-85 84 -76 -28) -85]
Test Case: 897 | Input/Output: [(-4 73 -90 -30) -90]
Test Case: 898 | Input/Output: [(57 -83 -46 -46) -83]
Test Case: 899 | Input/Output: [(93 80 -64 14) -64]
Test Case: 900 | Input/Output: [(-87 -38 19 -28) -87]
Test Case: 901 | Input/Output: [(-78 -1 -98 -67) -98]
Test Case: 902 | Input/Output: [(29 -57 -94 44) -94]
Test Case: 903 | Input/Output: [(-7 88 73 -77) -77]
Test Case: 904 | Input/Output: [(29 49 -3 18) -3]
Test Case: 905 | Input/Output: [(-67 96 -32 99) -67]
Test Case: 906 | Input/Output: [(-38 85 -94 15) -94]
Test Case: 907 | Input/Output: [(-23 19 45 -14) -23]
Test Case: 908 | Input/Output: [(11 19 -30 98) -30]
Test Case: 909 | Input/Output: [(-70 -85 79 5) -85]
Test Case: 910 | Input/Output: [(99 81 -6 16) -6]
Test Case: 911 | Input/Output: [(36 -50 96 88) -50]
Test Case: 912 | Input/Output: [(-7 -10 28 83) -10]
Test Case: 913 | Input/Output: [(77 -67 -61 84) -67]
Test Case: 914 | Input/Output: [(77 65 -86 98) -86]
Test Case: 915 | Input/Output: [(66 24 66 -24) -24]
Test Case: 916 | Input/Output: [(-16 87 93 -86) -86]
Test Case: 917 | Input/Output: [(-13 60 100 -66) -66]
Test Case: 918 | Input/Output: [(90 -14 39 -32) -32]
Test Case: 919 | Input/Output: [(40 19 -15 90) -15]
Test Case: 920 | Input/Output: [(87 5 87 57) 5]
Test Case: 921 | Input/Output: [(0 22 -34 -53) -53]
Test Case: 922 | Input/Output: [(-17 -3 -86 -50) -86]
Test Case: 923 | Input/Output: [(61 -1 -87 -95) -95]
Test Case: 924 | Input/Output: [(-4 88 100 59) -4]
Test Case: 925 | Input/Output: [(44 91 -67 -15) -67]
Test Case: 926 | Input/Output: [(-88 72 -73 15) -88]
Test Case: 927 | Input/Output: [(-9 -28 -64 51) -64]
Test Case: 928 | Input/Output: [(-56 -84 92 -33) -84]
Test Case: 929 | Input/Output: [(81 48 27 -40) -40]
Test Case: 930 | Input/Output: [(-12 30 82 -3) -12]
Test Case: 931 | Input/Output: [(-97 42 76 -100) -100]
Test Case: 932 | Input/Output: [(44 52 48 12) 12]
Test Case: 933 | Input/Output: [(-83 13 69 45) -83]
Test Case: 934 | Input/Output: [(-18 34 -20 23) -20]
Test Case: 935 | Input/Output: [(-87 -54 95 -87) -87]
Test Case: 936 | Input/Output: [(53 -28 -95 13) -95]
Test Case: 937 | Input/Output: [(-31 76 93 4) -31]
Test Case: 938 | Input/Output: [(-17 -23 42 72) -23]
Test Case: 939 | Input/Output: [(-89 -16 25 -34) -89]
Test Case: 940 | Input/Output: [(-96 89 -29 -13) -96]
Test Case: 941 | Input/Output: [(42 53 99 -20) -20]
Test Case: 942 | Input/Output: [(-76 16 -51 62) -76]
Test Case: 943 | Input/Output: [(98 20 -32 -92) -92]
Test Case: 944 | Input/Output: [(-67 -63 23 -75) -75]
Test Case: 945 | Input/Output: [(17 -34 -73 -18) -73]
Test Case: 946 | Input/Output: [(51 -78 -30 -57) -78]
Test Case: 947 | Input/Output: [(37 75 27 -52) -52]
Test Case: 948 | Input/Output: [(83 25 -40 22) -40]
Test Case: 949 | Input/Output: [(34 -50 -80 -25) -80]
Test Case: 950 | Input/Output: [(28 -8 -20 -71) -71]
Test Case: 951 | Input/Output: [(20 -98 -42 64) -98]
Test Case: 952 | Input/Output: [(63 32 -87 24) -87]
Test Case: 953 | Input/Output: [(80 85 47 -84) -84]
Test Case: 954 | Input/Output: [(-70 -77 77 92) -77]
Test Case: 955 | Input/Output: [(-12 -29 71 -62) -62]
Test Case: 956 | Input/Output: [(36 -3 97 81) -3]
Test Case: 957 | Input/Output: [(79 -3 95 -17) -17]
Test Case: 958 | Input/Output: [(-53 -47 87 54) -53]
Test Case: 959 | Input/Output: [(64 72 6 49) 6]
Test Case: 960 | Input/Output: [(48 -31 -47 89) -47]
Test Case: 961 | Input/Output: [(25 -8 -86 11) -86]
Test Case: 962 | Input/Output: [(2 96 10 75) 2]
Test Case: 963 | Input/Output: [(40 -58 70 28) -58]
Test Case: 964 | Input/Output: [(88 48 73 -56) -56]
Test Case: 965 | Input/Output: [(0 51 68 64) 0]
Test Case: 966 | Input/Output: [(-6 72 -61 -12) -61]
Test Case: 967 | Input/Output: [(-58 62 -4 -53) -58]
Test Case: 968 | Input/Output: [(-68 -18 -45 33) -68]
Test Case: 969 | Input/Output: [(87 34 23 74) 23]
Test Case: 970 | Input/Output: [(34 -95 -13 99) -95]
Test Case: 971 | Input/Output: [(-44 59 61 -14) -44]
Test Case: 972 | Input/Output: [(-100 -74 98 -63) -100]
Test Case: 973 | Input/Output: [(-28 75 2 28) -28]
Test Case: 974 | Input/Output: [(-83 -86 -8 59) -86]
Test Case: 975 | Input/Output: [(77 -41 96 -42) -42]
Test Case: 976 | Input/Output: [(-1 23 -76 -87) -87]
Test Case: 977 | Input/Output: [(70 24 -42 -82) -82]
Test Case: 978 | Input/Output: [(43 -49 44 53) -49]
Test Case: 979 | Input/Output: [(-1 70 -82 75) -82]
Test Case: 980 | Input/Output: [(46 -2 47 -85) -85]
Test Case: 981 | Input/Output: [(96 -26 87 -51) -51]
Test Case: 982 | Input/Output: [(20 96 -81 8) -81]
Test Case: 983 | Input/Output: [(-89 61 32 -77) -89]
Test Case: 984 | Input/Output: [(1 60 32 -63) -63]
Test Case: 985 | Input/Output: [(51 94 -42 25) -42]
Test Case: 986 | Input/Output: [(2 86 -62 -85) -85]
Test Case: 987 | Input/Output: [(10 87 -85 29) -85]
Test Case: 988 | Input/Output: [(-8 -40 -23 33) -40]
Test Case: 989 | Input/Output: [(53 70 68 83) 53]
Test Case: 990 | Input/Output: [(-12 -48 -35 -80) -80]
Test Case: 991 | Input/Output: [(-40 -1 51 87) -40]
Test Case: 992 | Input/Output: [(74 64 -96 -76) -96]
Test Case: 993 | Input/Output: [(-32 -71 -68 -27) -71]
Test Case: 994 | Input/Output: [(99 -27 -2 -19) -27]
Test Case: 995 | Input/Output: [(88 -98 -3 -19) -98]
Test Case: 996 | Input/Output: [(84 -80 99 -58) -80]
Test Case: 997 | Input/Output: [(-29 -28 26 16) -29]
Test Case: 998 | Input/Output: [(44 40 39 -64) -64]
Test Case: 999 | Input/Output: [(67 45 34 6) 6]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 9 99 -88 -7 -69 -95 23 -114 -118 -83 -93 86 -13 -60 -85 125
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[58 -21 58 58] -21] [[3 3 -53 3] -53] [[1 71 1 1] 1] [[77 77 4 77] 4] [[13 -94 13 13] -94] [[-39 -68 -39 -39] -68] [[69 69 81 69] 69] [[-43 -3 -43 -43] -43] [[-47 66 -47 -47] -47] [[2 -50 -50 -50] -50] [(22 22 22 22) 22] [(-73 -73 -73 -73) -73] [(85 85 85 85) 85] [(-57 -57 -57 -57) -57] [(32 32 32 32) 32] [(41 67 17 47) 17] [(0 80 16 51) 0] [(4 77 85 50) 4] [(15 24 64 77) 15] [(33 44 100 20) 20] [(66 61 65 13) 13] [(49 63 66 36) 36] [(85 62 13 91) 13] [(65 55 50 97) 50] [(84 13 1 84) 1] [(15 67 86 7) 7] [(2 1 26 42) 1] [(8 34 45 58) 8] [(32 95 0 94) 0] [(14 37 55 80) 14] [(82 76 96 70) 70] [(83 25 51 77) 25] [(56 32 33 83) 32] [(59 36 54 85) 36] [(22 57 90 22) 22] [(65 -32 -57 70) -57] [(-79 87 80 29) -79] [(-27 -19 14 98) -27] [(-25 15 9 26) -25] [(48 84 -35 16) -35] [(5 45 37 -58) -58] [(91 69 59 100) 59] [(43 -34 -80 -69) -80] [(20 -81 -27 -60) -81] [(-92 -68 8 4) -92] [(-53 68 84 -100) -100] [(23 51 81 -62) -62] [(-97 11 8 -55) -97] [(-7 66 6 -97) -97] [(-73 -100 34 -85) -100] [(-91 -5 -78 -8) -91] [(-28 96 -91 4) -91] [(-50 18 88 85) -50] [(12 68 -94 1) -94] [(-21 93 72 -4) -21] [(59 26 -70 92) -70] [(-78 68 -96 95) -96] [(-54 -15 -23 -90) -90] [(-94 -10 43 -13) -94] [(8 7 94 98) 7] [(36 -98 -99 48) -99] [(-54 21 -45 0) -54] [(-41 28 -48 -28) -48] [(-75 62 -37 -70) -75] [(-8 33 -82 46) -82] [(-64 -21 -81 0) -81] [(-45 -51 13 -26) -51] [(39 -15 -42 -80) -80] [(-35 -4 46 -40) -40] [(-80 56 -18 7) -80] [(100 63 -39 -74) -74] [(71 51 -45 37) -45] [(75 -59 -46 98) -59] [(1 74 22 -58) -58] [(57 95 52 -95) -95] [(49 74 17 32) 17] [(-13 -57 73 -42) -57] [(-82 22 -98 -93) -98] [(-3 -100 99 88) -100] [(-26 4 -14 -74) -74] [(-98 51 32 1) -98] [(11 68 -67 -49) -67] [(-52 -2 67 53) -52] [(16 -67 -52 -69) -69] [(-84 -31 -8 39) -84] [(81 -55 31 -45) -55] [(-73 -96 -13 -80) -96] [(13 73 75 0) 0] [(-82 -18 65 -83) -83] [(-52 -93 2 85) -93] [(-8 -33 -10 -24) -33] [(-25 91 -63 -68) -68] [(48 -51 75 -92) -92] [(-46 76 -70 86) -70] [(19 20 -9 74) -9])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 47                 
Correct output: 0                   | Program output: 51                 
Correct output: 4                   | Program output: 50                 
Correct output: 15                  | Program output: 77                 
Correct output: 20                  | Program output: 20                 
Correct output: 13                  | Program output: 13                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 91                 
Correct output: 50                  | Program output: 97                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 42                 
Correct output: 8                   | Program output: 58                 
Correct output: 0                   | Program output: 94                 
Correct output: 14                  | Program output: 80                 
Correct output: 70                  | Program output: 70                 
Correct output: 25                  | Program output: 77                 
Correct output: 32                  | Program output: 83                 
Correct output: 36                  | Program output: 85                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 70                 
Correct output: -79                 | Program output: 29                 
Correct output: -27                 | Program output: 98                 
Correct output: -25                 | Program output: 26                 
Correct output: -35                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: 59                  | Program output: 100                
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -60                
Correct output: -92                 | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: -62                
Correct output: -97                 | Program output: -55                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -85                
Correct output: -91                 | Program output: -8                 
Correct output: -91                 | Program output: 4                  
Correct output: -50                 | Program output: 85                 
Correct output: -94                 | Program output: 1                  
Correct output: -21                 | Program output: -4                 
Correct output: -70                 | Program output: 92                 
Correct output: -96                 | Program output: 95                 
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -13                
Correct output: 7                   | Program output: 98                 
Correct output: -99                 | Program output: 48                 
Correct output: -54                 | Program output: 0                  
Correct output: -48                 | Program output: -28                
Correct output: -75                 | Program output: -70                
Correct output: -82                 | Program output: 46                 
Correct output: -81                 | Program output: 0                  
Correct output: -51                 | Program output: -26                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -80                 | Program output: 7                  
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: 37                 
Correct output: -59                 | Program output: 98                 
Correct output: -58                 | Program output: -58                
Correct output: -95                 | Program output: -95                
Correct output: 17                  | Program output: 32                 
Correct output: -57                 | Program output: -42                
Correct output: -98                 | Program output: -93                
Correct output: -100                | Program output: 88                 
Correct output: -74                 | Program output: -74                
Correct output: -98                 | Program output: 1                  
Correct output: -67                 | Program output: -49                
Correct output: -52                 | Program output: 53                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: 39                 
Correct output: -55                 | Program output: -45                
Correct output: -96                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: 85                 
Correct output: -33                 | Program output: -24                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 86                 
Correct output: -9                  | Program output: 74                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 1, :instruction tagged_124} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 2, :instruction integer_lte} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 1, :instruction in2} {:close 1, :instruction in1})
Lexicase best program: (exec_y_when_autoconstructing (exec_dup_times () boolean_or boolean_stackdepth integer_inc exec_dup (boolean_invert_second_then_and integer_max tagged_124) exec_eq exec_pop (print_exec (boolean_dup_items exec_dup (integer_lte)) integer_yank) integer_dup) integer_min integer_dup boolean_stackdepth in4 exec_when () boolean_shove print_integer exec_swap () (exec_yankdup exec_empty) in2 in1)
Lexicase best errors: [0 1 1 0 0 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 39
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 1, :instruction tagged_124} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_pop} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 2, :instruction integer_lte} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in4} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_empty} {:close 1, :instruction in2} {:close 1, :instruction in1})
Zero cases best program: (exec_y_when_autoconstructing (exec_dup_times () boolean_or boolean_stackdepth integer_inc exec_dup (boolean_invert_second_then_and integer_max tagged_124) exec_eq exec_pop (print_exec (boolean_dup_items exec_dup (integer_lte)) integer_yank) integer_dup) integer_min integer_dup boolean_stackdepth in4 exec_when () boolean_shove print_integer exec_swap () (exec_yankdup exec_empty) in2 in1)
Zero cases best errors: [0 1 1 0 0 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 39
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (5 3 4 9 6 6 5 4 5 4)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (5 3 4 9 6 6 5 4 5 4)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tagged_501} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y} {:close 0, :instruction -55} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_if} {:close 1, :instruction print_newline} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 2, :instruction exec_yankdup} {:close 0, :instruction -85} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_if} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times})
Best program: (tagged_501 in4 print_integer boolean_shove boolean_stackdepth integer_div boolean_dup exec_yankdup boolean_dup boolean_or boolean_xor boolean_dup_times exec_yankdup exec_y_when_autoconstructing (exec_do*times () boolean_shove exec_k_when_autoconstructing (exec_do*range (integer_lt exec_do*range (integer_swap exec_do*range () exec_y_when_autoconstructing () boolean_pop exec_when (integer_yankdup exec_flush) boolean_shove integer_inc) integer_mult integer_flush integer_dup_items exec_dup_items exec_empty exec_y (-55 integer_pop integer_add) integer_mult boolean_not integer_mult boolean_yank) exec_if (print_newline) (print_boolean boolean_stackdepth integer_shove exec_eq exec_yankdup)) (-85 integer_gt integer_dec) exec_if () (exec_flush) integer_eq integer_min exec_do*while (exec_yankdup integer_stackdepth integer_max exec_dup_items integer_pop) integer_mult boolean_pop boolean_dup exec_do*count (integer_lte) integer_fromboolean boolean_rot exec_yankdup integer_inc boolean_dup_times))
Errors: [0 1 1 0 0 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 72
Size: 89
Percent parens: 0.191
--- Population Statistics ---
Average total errors in population: 9.949
Median total errors in population: 10
Error averages by case: (0.995 0.997 0.996 0.991 0.994 0.994 0.995 0.996 0.995 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.03
Average program size in population (points): 70.381
Average percent parens in population: 0.280
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.262
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 496070
--- Timings ---
Current time: 1559314318382 milliseconds
Total Time:           2.8 seconds
Initialization:       0.1 seconds,  3.5%
Reproduction:         0.8 seconds, 28.7%
Fitness Testing:      1.9 seconds, 67.8%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 47                 
Correct output: 0                   | Program output: 51                 
Correct output: 4                   | Program output: 50                 
Correct output: 15                  | Program output: 77                 
Correct output: 20                  | Program output: 20                 
Correct output: 13                  | Program output: 13                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 91                 
Correct output: 50                  | Program output: 97                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 42                 
Correct output: 8                   | Program output: 58                 
Correct output: 0                   | Program output: 94                 
Correct output: 14                  | Program output: 80                 
Correct output: 70                  | Program output: 70                 
Correct output: 25                  | Program output: 77                 
Correct output: 32                  | Program output: 83                 
Correct output: 36                  | Program output: 85                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 70                 
Correct output: -79                 | Program output: 29                 
Correct output: -27                 | Program output: 98                 
Correct output: -25                 | Program output: 26                 
Correct output: -35                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: 59                  | Program output: 100                
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -60                
Correct output: -92                 | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: -62                
Correct output: -97                 | Program output: -55                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -85                
Correct output: -91                 | Program output: -8                 
Correct output: -91                 | Program output: 4                  
Correct output: -50                 | Program output: 85                 
Correct output: -94                 | Program output: 1                  
Correct output: -21                 | Program output: -4                 
Correct output: -70                 | Program output: 92                 
Correct output: -96                 | Program output: 95                 
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -13                
Correct output: 7                   | Program output: 98                 
Correct output: -99                 | Program output: 48                 
Correct output: -54                 | Program output: 0                  
Correct output: -48                 | Program output: -28                
Correct output: -75                 | Program output: -70                
Correct output: -82                 | Program output: 46                 
Correct output: -81                 | Program output: 0                  
Correct output: -51                 | Program output: -26                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -80                 | Program output: 7                  
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: 37                 
Correct output: -59                 | Program output: 98                 
Correct output: -58                 | Program output: -58                
Correct output: -95                 | Program output: -95                
Correct output: 17                  | Program output: 32                 
Correct output: -57                 | Program output: -42                
Correct output: -98                 | Program output: -93                
Correct output: -100                | Program output: 88                 
Correct output: -74                 | Program output: -74                
Correct output: -98                 | Program output: 1                  
Correct output: -67                 | Program output: -49                
Correct output: -52                 | Program output: 53                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: 39                 
Correct output: -55                 | Program output: -45                
Correct output: -96                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: 85                 
Correct output: -33                 | Program output: -24                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 86                 
Correct output: -9                  | Program output: 74                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tagged_501} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y} {:close 0, :instruction -55} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_if} {:close 1, :instruction print_newline} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 2, :instruction exec_yankdup} {:close 0, :instruction -85} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_if} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (tagged_501 in4 print_integer boolean_shove boolean_stackdepth integer_div boolean_dup exec_yankdup boolean_dup boolean_or boolean_xor boolean_dup_times exec_yankdup exec_y_when_autoconstructing (exec_do*times () boolean_shove exec_k_when_autoconstructing (exec_do*range (integer_lt exec_do*range (integer_swap exec_do*range () exec_y_when_autoconstructing () boolean_pop exec_when (integer_yankdup exec_flush) boolean_shove integer_inc) integer_mult integer_flush integer_dup_items exec_dup_items exec_empty exec_y (-55 integer_pop integer_add) integer_mult boolean_not integer_mult boolean_yank) exec_if (print_newline) (print_boolean boolean_stackdepth integer_shove exec_eq exec_yankdup)) (-85 integer_gt integer_dec) exec_if () (exec_flush) integer_eq integer_min exec_do*while (exec_yankdup integer_stackdepth integer_max exec_dup_items integer_pop) integer_mult boolean_pop boolean_dup exec_do*count (integer_lte) integer_fromboolean boolean_rot exec_yankdup integer_inc boolean_dup_times))
Lexicase best errors: [0 0 0 1 1 1 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 89
Percent parens: 0.191
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tagged_501} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y} {:close 0, :instruction -55} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_if} {:close 1, :instruction print_newline} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 2, :instruction exec_yankdup} {:close 0, :instruction -85} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_if} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (tagged_501 in4 print_integer boolean_shove boolean_stackdepth integer_div boolean_dup exec_yankdup boolean_dup boolean_or boolean_xor boolean_dup_times exec_yankdup exec_y_when_autoconstructing (exec_do*times () boolean_shove exec_k_when_autoconstructing (exec_do*range (integer_lt exec_do*range (integer_swap exec_do*range () exec_y_when_autoconstructing () boolean_pop exec_when (integer_yankdup exec_flush) boolean_shove integer_inc) integer_mult integer_flush integer_dup_items exec_dup_items exec_empty exec_y (-55 integer_pop integer_add) integer_mult boolean_not integer_mult boolean_yank) exec_if (print_newline) (print_boolean boolean_stackdepth integer_shove exec_eq exec_yankdup)) (-85 integer_gt integer_dec) exec_if () (exec_flush) integer_eq integer_min exec_do*while (exec_yankdup integer_stackdepth integer_max exec_dup_items integer_pop) integer_mult boolean_pop boolean_dup exec_do*count (integer_lte) integer_fromboolean boolean_rot exec_yankdup integer_inc boolean_dup_times))
Zero cases best errors: [0 0 0 1 1 1 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 89
Percent parens: 0.191
--- Lexicase Population Statistics ---
Count of elite individuals by case: (471 471 471 1000 1000 1000 213 471 213 213)
Population mean number of elite cases: 5.52
Count of perfect (error zero) individuals by case: (471 471 471 0 0 0 213 471 213 213)
Population mean number of perfect (error zero) cases: 2.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tagged_501} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y} {:close 0, :instruction -55} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_if} {:close 1, :instruction print_newline} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 2, :instruction exec_yankdup} {:close 0, :instruction -85} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_if} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times})
Best program: (tagged_501 in4 print_integer boolean_shove boolean_stackdepth integer_div boolean_dup exec_yankdup boolean_dup boolean_or boolean_xor boolean_dup_times exec_yankdup exec_y_when_autoconstructing (exec_do*times () boolean_shove exec_k_when_autoconstructing (exec_do*range (integer_lt exec_do*range (integer_swap exec_do*range () exec_y_when_autoconstructing () boolean_pop exec_when (integer_yankdup exec_flush) boolean_shove integer_inc) integer_mult integer_flush integer_dup_items exec_dup_items exec_empty exec_y (-55 integer_pop integer_add) integer_mult boolean_not integer_mult boolean_yank) exec_if (print_newline) (print_boolean boolean_stackdepth integer_shove exec_eq exec_yankdup)) (-85 integer_gt integer_dec) exec_if () (exec_flush) integer_eq integer_min exec_do*while (exec_yankdup integer_stackdepth integer_max exec_dup_items integer_pop) integer_mult boolean_pop boolean_dup exec_do*count (integer_lte) integer_fromboolean boolean_rot exec_yankdup integer_inc boolean_dup_times))
Errors: [0 0 0 1 1 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 72
Size: 89
Percent parens: 0.191
--- Population Statistics ---
Average total errors in population: 7.477
Median total errors in population: 7
Error averages by case: (0.529 0.529 0.529 1.0 1.0 1.0 0.787 0.529 0.787 0.787)
Error minima by case: (0 0 0 1 1 1 0 0 0 0)
Average genome size in population (length): 43.223
Average program size in population (points): 57.064
Average percent parens in population: 0.246
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.496
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 133
Genome diversity (% unique genomes):	 0.472
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 137
Syntactic diversity (% unique Push programs):	 0.461
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 983993
--- Timings ---
Current time: 1559314321103 milliseconds
Total Time:           5.6 seconds
Initialization:       0.1 seconds,  1.7%
Reproduction:         2.5 seconds, 44.4%
Fitness Testing:      2.6 seconds, 47.4%
Report:               0.4 seconds,  6.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 47                 
Correct output: 0                   | Program output: 51                 
Correct output: 4                   | Program output: 50                 
Correct output: 15                  | Program output: 77                 
Correct output: 20                  | Program output: 20                 
Correct output: 13                  | Program output: 13                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 91                 
Correct output: 50                  | Program output: 97                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 42                 
Correct output: 8                   | Program output: 58                 
Correct output: 0                   | Program output: 94                 
Correct output: 14                  | Program output: 80                 
Correct output: 70                  | Program output: 70                 
Correct output: 25                  | Program output: 77                 
Correct output: 32                  | Program output: 83                 
Correct output: 36                  | Program output: 85                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 70                 
Correct output: -79                 | Program output: 29                 
Correct output: -27                 | Program output: 98                 
Correct output: -25                 | Program output: 26                 
Correct output: -35                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: 59                  | Program output: 100                
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -60                
Correct output: -92                 | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: -62                
Correct output: -97                 | Program output: -55                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -85                
Correct output: -91                 | Program output: -8                 
Correct output: -91                 | Program output: 4                  
Correct output: -50                 | Program output: 85                 
Correct output: -94                 | Program output: 1                  
Correct output: -21                 | Program output: -4                 
Correct output: -70                 | Program output: 92                 
Correct output: -96                 | Program output: 95                 
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -13                
Correct output: 7                   | Program output: 98                 
Correct output: -99                 | Program output: 48                 
Correct output: -54                 | Program output: 0                  
Correct output: -48                 | Program output: -28                
Correct output: -75                 | Program output: -70                
Correct output: -82                 | Program output: 46                 
Correct output: -81                 | Program output: 0                  
Correct output: -51                 | Program output: -26                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -80                 | Program output: 7                  
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: 37                 
Correct output: -59                 | Program output: 98                 
Correct output: -58                 | Program output: -58                
Correct output: -95                 | Program output: -95                
Correct output: 17                  | Program output: 32                 
Correct output: -57                 | Program output: -42                
Correct output: -98                 | Program output: -93                
Correct output: -100                | Program output: 88                 
Correct output: -74                 | Program output: -74                
Correct output: -98                 | Program output: 1                  
Correct output: -67                 | Program output: -49                
Correct output: -52                 | Program output: 53                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: 39                 
Correct output: -55                 | Program output: -45                
Correct output: -96                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: 85                 
Correct output: -33                 | Program output: -24                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 86                 
Correct output: -9                  | Program output: 74                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tagged_501} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y} {:close 0, :instruction -55} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_if} {:close 1, :instruction print_newline} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 2, :instruction exec_yankdup} {:close 0, :instruction -85} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_if} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times})
Lexicase best program: (tagged_501 in4 print_integer boolean_shove boolean_stackdepth integer_div boolean_dup exec_yankdup boolean_dup boolean_or boolean_xor boolean_dup_times exec_yankdup exec_y_when_autoconstructing (exec_do*times () boolean_shove exec_k_when_autoconstructing (exec_do*range (integer_lt exec_do*range (integer_swap exec_do*range () exec_y_when_autoconstructing () boolean_pop exec_when (integer_yankdup exec_flush boolean_shove integer_inc) integer_mult integer_flush) integer_dup_items exec_dup_items exec_empty exec_y (-55 integer_pop integer_add)) integer_mult boolean_not integer_mult boolean_yank) (exec_if (print_newline) (print_boolean boolean_stackdepth integer_shove exec_eq exec_yankdup)) -85 integer_gt integer_dec) exec_if (exec_flush) (integer_eq integer_min exec_do*while (exec_yankdup integer_stackdepth integer_max exec_dup_items integer_pop) integer_mult boolean_pop boolean_dup exec_do*count (integer_lte integer_fromboolean boolean_rot exec_yankdup integer_inc boolean_dup_times)))
Lexicase best errors: [1 0 0 1 1 1 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 89
Percent parens: 0.191
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tagged_501} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y} {:close 0, :instruction -55} {:close 0, :instruction integer_pop} {:close 2, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_if} {:close 1, :instruction print_newline} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 2, :instruction exec_yankdup} {:close 0, :instruction -85} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_if} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times})
Zero cases best program: (tagged_501 in4 print_integer boolean_shove boolean_stackdepth integer_div boolean_dup exec_yankdup boolean_dup boolean_or boolean_xor boolean_dup_times exec_yankdup exec_y_when_autoconstructing (exec_do*times () boolean_shove exec_k_when_autoconstructing (exec_do*range (integer_lt exec_do*range (integer_swap exec_do*range () exec_y_when_autoconstructing () boolean_pop exec_when (integer_yankdup exec_flush boolean_shove integer_inc) integer_mult integer_flush) integer_dup_items exec_dup_items exec_empty exec_y (-55 integer_pop integer_add)) integer_mult boolean_not integer_mult boolean_yank) (exec_if (print_newline) (print_boolean boolean_stackdepth integer_shove exec_eq exec_yankdup)) -85 integer_gt integer_dec) exec_if (exec_flush) (integer_eq integer_min exec_do*while (exec_yankdup integer_stackdepth integer_max exec_dup_items integer_pop) integer_mult boolean_pop boolean_dup exec_do*count (integer_lte integer_fromboolean boolean_rot exec_yankdup integer_inc boolean_dup_times)))
Zero cases best errors: [1 0 0 1 1 1 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 89
Percent parens: 0.191
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 519 519 386 1 1 2 1000 1000 906)
Population mean number of elite cases: 5.33
Count of perfect (error zero) individuals by case: (0 519 519 386 1 1 2 0 0 906)
Population mean number of perfect (error zero) cases: 2.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction tagged_501} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y} {:close 0, :instruction -55} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction exec_if} {:close 1, :instruction print_newline} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_eq} {:close 2, :instruction exec_yankdup} {:close 0, :instruction -85} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_if} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_inc})
Best program: (tagged_501 in4 print_integer boolean_shove boolean_stackdepth integer_div boolean_dup exec_yankdup boolean_dup boolean_or boolean_xor boolean_dup_times exec_yankdup exec_y_when_autoconstructing (exec_do*times () boolean_shove exec_k_when_autoconstructing (exec_do*range (integer_lt exec_do*range (integer_swap exec_do*range () exec_y_when_autoconstructing () boolean_pop exec_when (integer_yankdup exec_flush) boolean_shove integer_inc) integer_mult integer_flush boolean_not exec_dup_items exec_empty exec_y (-55 integer_pop integer_add) integer_mult boolean_not integer_mult boolean_yank) exec_if (print_newline) (print_boolean boolean_stackdepth integer_shove exec_eq exec_yankdup)) (-85 integer_gt integer_dec) exec_if () (exec_flush) integer_eq integer_min exec_do*while (exec_yankdup integer_stackdepth integer_max exec_dup_items integer_pop) integer_mult boolean_pop boolean_dup exec_do*count (integer_lte) integer_fromboolean boolean_rot exec_yankdup integer_inc))
Errors: [1 0 0 1 1 1 1 1 1 0]
Total: 7
Mean: 0.7
Genome size: 71
Size: 88
Percent parens: 0.193
--- Population Statistics ---
Average total errors in population: 7.666
Median total errors in population: 7
Error averages by case: (1.0 0.481 0.481 0.614 0.999 0.999 0.998 1.0 1.0 0.094)
Error minima by case: (1 0 0 0 0 0 0 1 1 0)
Average genome size in population (length): 45.566
Average program size in population (points): 61.855
Average percent parens in population: 0.266
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.984
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 131
Genome diversity (% unique genomes):	 0.638
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 136
Syntactic diversity (% unique Push programs):	 0.624
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1224510
--- Timings ---
Current time: 1559314323623 milliseconds
Total Time:           8.1 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.4 seconds, 54.1%
Fitness Testing:      3.0 seconds, 36.5%
Report:               0.7 seconds,  8.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 33                 
Correct output: 13                  | Program output: 66                 
Correct output: 36                  | Program output: 49                 
Correct output: 13                  | Program output: 85                 
Correct output: 50                  | Program output: 65                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 15                 
Correct output: 1                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 32                 
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 82                 
Correct output: 25                  | Program output: 83                 
Correct output: 32                  | Program output: 56                 
Correct output: 36                  | Program output: 59                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 65                 
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: 48                 
Correct output: -58                 | Program output: 5                  
Correct output: 59                  | Program output: 91                 
Correct output: -80                 | Program output: 43                 
Correct output: -81                 | Program output: 20                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -53                
Correct output: -62                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -7                 
Correct output: -100                | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -28                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 12                 
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: 59                 
Correct output: -96                 | Program output: -78                
Correct output: -90                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 8                  
Correct output: -99                 | Program output: 36                 
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -41                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -8                 
Correct output: -81                 | Program output: -64                
Correct output: -51                 | Program output: -45                
Correct output: -80                 | Program output: 39                 
Correct output: -40                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: 100                
Correct output: -45                 | Program output: 71                 
Correct output: -59                 | Program output: 75                 
Correct output: -58                 | Program output: 1                  
Correct output: -95                 | Program output: 57                 
Correct output: 17                  | Program output: 49                 
Correct output: -57                 | Program output: -13                
Correct output: -98                 | Program output: -82                
Correct output: -100                | Program output: -3                 
Correct output: -74                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: 81                 
Correct output: -96                 | Program output: -73                
Correct output: 0                   | Program output: 13                 
Correct output: -83                 | Program output: -82                
Correct output: -93                 | Program output: -52                
Correct output: -33                 | Program output: -8                 
Correct output: -68                 | Program output: -25                
Correct output: -92                 | Program output: 48                 
Correct output: -70                 | Program output: -46                
Correct output: -9                  | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_843} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod})
Lexicase best program: (integer_dup integer_max boolean_flush tag_boolean_843 boolean_flush in1 integer_add exec_when (print_integer integer_mod))
Lexicase best errors: [0 0 0 1 1 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 12
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_843} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod})
Zero cases best program: (integer_dup integer_max boolean_flush tag_boolean_843 boolean_flush in1 integer_add exec_when (print_integer integer_mod))
Zero cases best errors: [0 0 0 1 1 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 12
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (283 283 283 319 319 283 1000 319 283 483)
Population mean number of elite cases: 3.86
Count of perfect (error zero) individuals by case: (283 283 283 319 319 283 0 319 283 483)
Population mean number of perfect (error zero) cases: 2.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_843} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq})
Best program: (integer_dup integer_max boolean_flush tag_boolean_843 boolean_flush in1 integer_add exec_when (print_integer integer_mod boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) ()) ()))
Errors: [0 0 0 1 1 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 18
Size: 26
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 7.145
Median total errors in population: 6
Error averages by case: (0.717 0.717 0.717 0.681 0.681 0.717 1.0 0.681 0.717 0.517)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 33.255
Average program size in population (points): 45.407
Average percent parens in population: 0.275
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.89925
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 209
Genome diversity (% unique genomes):	 0.526
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 213
Syntactic diversity (% unique Push programs):	 0.51
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1462257
--- Timings ---
Current time: 1559314325895 milliseconds
Total Time:          10.5 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.1 seconds, 58.7%
Fitness Testing:      3.3 seconds, 31.4%
Report:               0.9 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 33                 
Correct output: 13                  | Program output: 66                 
Correct output: 36                  | Program output: 49                 
Correct output: 13                  | Program output: 85                 
Correct output: 50                  | Program output: 65                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 15                 
Correct output: 1                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 32                 
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 82                 
Correct output: 25                  | Program output: 83                 
Correct output: 32                  | Program output: 56                 
Correct output: 36                  | Program output: 59                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 65                 
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: 48                 
Correct output: -58                 | Program output: 5                  
Correct output: 59                  | Program output: 91                 
Correct output: -80                 | Program output: 43                 
Correct output: -81                 | Program output: 20                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -53                
Correct output: -62                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -7                 
Correct output: -100                | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -28                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 12                 
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: 59                 
Correct output: -96                 | Program output: -78                
Correct output: -90                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 8                  
Correct output: -99                 | Program output: 36                 
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -41                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -8                 
Correct output: -81                 | Program output: -64                
Correct output: -51                 | Program output: -45                
Correct output: -80                 | Program output: 39                 
Correct output: -40                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: 100                
Correct output: -45                 | Program output: 71                 
Correct output: -59                 | Program output: 75                 
Correct output: -58                 | Program output: 1                  
Correct output: -95                 | Program output: 57                 
Correct output: 17                  | Program output: 49                 
Correct output: -57                 | Program output: -13                
Correct output: -98                 | Program output: -82                
Correct output: -100                | Program output: -3                 
Correct output: -74                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: 81                 
Correct output: -96                 | Program output: -73                
Correct output: 0                   | Program output: 13                 
Correct output: -83                 | Program output: -82                
Correct output: -93                 | Program output: -52                
Correct output: -33                 | Program output: -8                 
Correct output: -68                 | Program output: -25                
Correct output: -92                 | Program output: 48                 
Correct output: -70                 | Program output: -46                
Correct output: -9                  | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_843} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Lexicase best program: (integer_dup integer_max boolean_flush tag_boolean_843 boolean_flush in1 integer_add exec_when (print_integer integer_mod boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ()))
Lexicase best errors: [0 1 0 1 1 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 27
Percent parens: 0.296
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_843} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Zero cases best program: (integer_dup integer_max boolean_flush tag_boolean_843 boolean_flush in1 integer_add exec_when (print_integer integer_mod boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ()))
Zero cases best errors: [0 1 0 1 1 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 27
Percent parens: 0.296
--- Lexicase Population Statistics ---
Count of elite individuals by case: (935 1000 500 1000 1000 500 935 435 935 500)
Population mean number of elite cases: 7.74
Count of perfect (error zero) individuals by case: (935 0 500 0 0 500 935 435 935 500)
Population mean number of perfect (error zero) cases: 4.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_843} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction integer_max} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Best program: (integer_dup integer_max boolean_flush tag_boolean_843 boolean_flush in1 integer_add exec_when (print_integer integer_lte boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) integer_max exec_eq) (integer_lt)) ()))
Errors: [0 1 0 1 1 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 19
Size: 27
Percent parens: 0.296
--- Population Statistics ---
Average total errors in population: 5.26
Median total errors in population: 5
Error averages by case: (0.065 1.0 0.5 1.0 1.0 0.5 0.065 0.565 0.065 0.5)
Error minima by case: (0 1 0 1 1 0 0 0 0 0)
Average genome size in population (length): 27.997
Average program size in population (points): 37.776
Average percent parens in population: 0.274
Minimum age in population: 4.0
Maximum age in population: 8.0
Average age in population: 6.48875
Median age in population: 6.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 295
Genome diversity (% unique genomes):	 0.508
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 305
Syntactic diversity (% unique Push programs):	 0.483
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1705126
--- Timings ---
Current time: 1559314328502 milliseconds
Total Time:          13.1 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.3 seconds, 63.3%
Fitness Testing:      3.6 seconds, 27.3%
Report:               1.1 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 33                 
Correct output: 13                  | Program output: 66                 
Correct output: 36                  | Program output: 49                 
Correct output: 13                  | Program output: 85                 
Correct output: 50                  | Program output: 65                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 15                 
Correct output: 1                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 32                 
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 82                 
Correct output: 25                  | Program output: 83                 
Correct output: 32                  | Program output: 56                 
Correct output: 36                  | Program output: 59                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 65                 
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: 48                 
Correct output: -58                 | Program output: 5                  
Correct output: 59                  | Program output: 91                 
Correct output: -80                 | Program output: 43                 
Correct output: -81                 | Program output: 20                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -53                
Correct output: -62                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -7                 
Correct output: -100                | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -28                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 12                 
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: 59                 
Correct output: -96                 | Program output: -78                
Correct output: -90                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 8                  
Correct output: -99                 | Program output: 36                 
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -41                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -8                 
Correct output: -81                 | Program output: -64                
Correct output: -51                 | Program output: -45                
Correct output: -80                 | Program output: 39                 
Correct output: -40                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: 100                
Correct output: -45                 | Program output: 71                 
Correct output: -59                 | Program output: 75                 
Correct output: -58                 | Program output: 1                  
Correct output: -95                 | Program output: 57                 
Correct output: 17                  | Program output: 49                 
Correct output: -57                 | Program output: -13                
Correct output: -98                 | Program output: -82                
Correct output: -100                | Program output: -3                 
Correct output: -74                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: 81                 
Correct output: -96                 | Program output: -73                
Correct output: 0                   | Program output: 13                 
Correct output: -83                 | Program output: -82                
Correct output: -93                 | Program output: -52                
Correct output: -33                 | Program output: -8                 
Correct output: -68                 | Program output: -25                
Correct output: -92                 | Program output: 48                 
Correct output: -70                 | Program output: -46                
Correct output: -9                  | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_843} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Lexicase best program: (integer_dup integer_max boolean_flush tag_boolean_843 boolean_flush in1 integer_add exec_when (print_integer integer_mod boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ()))
Lexicase best errors: [0 0 1 1 0 1 0 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 27
Percent parens: 0.296
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_843} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Zero cases best program: (integer_dup integer_max boolean_flush tag_boolean_843 boolean_flush in1 integer_add exec_when (print_integer integer_mod boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ()))
Zero cases best errors: [0 0 1 1 0 1 0 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 27
Percent parens: 0.296
--- Lexicase Population Statistics ---
Count of elite individuals by case: (696 699 1000 1 946 1000 696 1 1000 1000)
Population mean number of elite cases: 7.04
Count of perfect (error zero) individuals by case: (696 699 0 1 946 0 696 1 0 0)
Population mean number of perfect (error zero) cases: 3.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_843} {:close 0, :instruction exec_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Best program: (integer_dup integer_max boolean_flush tag_boolean_843 exec_yank in1 integer_add exec_when (print_integer integer_mod boolean_and integer_gte exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ()))
Errors: [0 0 1 1 0 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 19
Size: 27
Percent parens: 0.296
--- Population Statistics ---
Average total errors in population: 6.961
Median total errors in population: 6
Error averages by case: (0.304 0.301 1.0 0.999 0.054 1.0 0.304 0.999 1.0 1.0)
Error minima by case: (0 0 1 0 0 1 0 0 1 1)
Average genome size in population (length): 23.636
Average program size in population (points): 32.464
Average percent parens in population: 0.281
Minimum age in population: 5.0
Maximum age in population: 9.9375
Average age in population: 8.104375
Median age in population: 8.1875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 307
Genome diversity (% unique genomes):	 0.487
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 324
Syntactic diversity (% unique Push programs):	 0.454
Total error diversity:				 0.003
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 1932962
--- Timings ---
Current time: 1559314330677 milliseconds
Total Time:          15.3 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.0 seconds, 65.6%
Fitness Testing:      3.8 seconds, 25.1%
Report:               1.3 seconds,  8.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 33                 
Correct output: 13                  | Program output: 66                 
Correct output: 36                  | Program output: 49                 
Correct output: 13                  | Program output: 85                 
Correct output: 50                  | Program output: 65                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 15                 
Correct output: 1                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 32                 
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 82                 
Correct output: 25                  | Program output: 83                 
Correct output: 32                  | Program output: 56                 
Correct output: 36                  | Program output: 59                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 65                 
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: 48                 
Correct output: -58                 | Program output: 5                  
Correct output: 59                  | Program output: 91                 
Correct output: -80                 | Program output: 43                 
Correct output: -81                 | Program output: 20                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -53                
Correct output: -62                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -7                 
Correct output: -100                | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -28                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 12                 
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: 59                 
Correct output: -96                 | Program output: -78                
Correct output: -90                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 8                  
Correct output: -99                 | Program output: 36                 
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -41                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -8                 
Correct output: -81                 | Program output: -64                
Correct output: -51                 | Program output: -45                
Correct output: -80                 | Program output: 39                 
Correct output: -40                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: 100                
Correct output: -45                 | Program output: 71                 
Correct output: -59                 | Program output: 75                 
Correct output: -58                 | Program output: 1                  
Correct output: -95                 | Program output: 57                 
Correct output: 17                  | Program output: 49                 
Correct output: -57                 | Program output: -13                
Correct output: -98                 | Program output: -82                
Correct output: -100                | Program output: -3                 
Correct output: -74                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: 81                 
Correct output: -96                 | Program output: -73                
Correct output: 0                   | Program output: 13                 
Correct output: -83                 | Program output: -82                
Correct output: -93                 | Program output: -52                
Correct output: -33                 | Program output: -8                 
Correct output: -68                 | Program output: -25                
Correct output: -92                 | Program output: 48                 
Correct output: -70                 | Program output: -46                
Correct output: -9                  | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_843} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Lexicase best program: (integer_dup integer_max boolean_flush tag_boolean_843 boolean_xor in1 integer_add exec_when (print_integer exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)))
Lexicase best errors: [0 1 1 1 1 0 0 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 21
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_843} {:close 0, :instruction boolean_xor} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Zero cases best program: (integer_dup integer_max boolean_flush tag_boolean_843 boolean_xor in1 integer_add exec_when (print_integer exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)))
Zero cases best errors: [0 1 1 1 1 0 0 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 21
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (626 1000 1 1000 1000 626 627 1 1000 1000)
Population mean number of elite cases: 6.88
Count of perfect (error zero) individuals by case: (626 0 1 0 0 626 627 1 0 0)
Population mean number of perfect (error zero) cases: 1.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_843} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Best program: (integer_dup integer_max boolean_flush tag_boolean_843 boolean_flush in1 integer_add exec_when (print_integer integer_mod boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ()))
Errors: [0 1 1 1 1 0 0 1 1 1]
Total: 7
Mean: 0.7
Genome size: 19
Size: 27
Percent parens: 0.296
--- Population Statistics ---
Average total errors in population: 8.119
Median total errors in population: 7
Error averages by case: (0.374 1.0 0.999 1.0 1.0 0.374 0.373 0.999 1.0 1.0)
Error minima by case: (0 1 0 1 1 0 0 0 1 1)
Average genome size in population (length): 20.867
Average program size in population (points): 29.191
Average percent parens in population: 0.287
Minimum age in population: 7.625
Maximum age in population: 11.40625
Average age in population: 9.61496875
Median age in population: 9.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 210
Genome diversity (% unique genomes):	 0.436
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 226
Syntactic diversity (% unique Push programs):	 0.407
Total error diversity:				 0.002
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2139848
--- Timings ---
Current time: 1559314332915 milliseconds
Total Time:          17.5 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.9 seconds, 67.6%
Fitness Testing:      4.1 seconds, 23.3%
Report:               1.5 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 33                 
Correct output: 13                  | Program output: 66                 
Correct output: 36                  | Program output: 49                 
Correct output: 13                  | Program output: 85                 
Correct output: 50                  | Program output: 65                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 15                 
Correct output: 1                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 32                 
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 82                 
Correct output: 25                  | Program output: 83                 
Correct output: 32                  | Program output: 56                 
Correct output: 36                  | Program output: 59                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 65                 
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: 48                 
Correct output: -58                 | Program output: 5                  
Correct output: 59                  | Program output: 91                 
Correct output: -80                 | Program output: 43                 
Correct output: -81                 | Program output: 20                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -53                
Correct output: -62                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -7                 
Correct output: -100                | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -28                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 12                 
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: 59                 
Correct output: -96                 | Program output: -78                
Correct output: -90                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 8                  
Correct output: -99                 | Program output: 36                 
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -41                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -8                 
Correct output: -81                 | Program output: -64                
Correct output: -51                 | Program output: -45                
Correct output: -80                 | Program output: 39                 
Correct output: -40                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: 100                
Correct output: -45                 | Program output: 71                 
Correct output: -59                 | Program output: 75                 
Correct output: -58                 | Program output: 1                  
Correct output: -95                 | Program output: 57                 
Correct output: 17                  | Program output: 49                 
Correct output: -57                 | Program output: -13                
Correct output: -98                 | Program output: -82                
Correct output: -100                | Program output: -3                 
Correct output: -74                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: 81                 
Correct output: -96                 | Program output: -73                
Correct output: 0                   | Program output: 13                 
Correct output: -83                 | Program output: -82                
Correct output: -93                 | Program output: -52                
Correct output: -33                 | Program output: -8                 
Correct output: -68                 | Program output: -25                
Correct output: -92                 | Program output: 48                 
Correct output: -70                 | Program output: -46                
Correct output: -9                  | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_843} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Lexicase best program: (integer_dup integer_max boolean_flush tag_boolean_843 boolean_flush in1 integer_add exec_when (print_integer integer_mod boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ()))
Lexicase best errors: [0 0 0 1 0 1 1 0 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 27
Percent parens: 0.296
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_843} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Zero cases best program: (integer_dup integer_max boolean_flush tag_boolean_843 boolean_flush in1 integer_add exec_when (print_integer integer_mod boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ()))
Zero cases best errors: [0 0 0 1 0 1 1 0 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 27
Percent parens: 0.296
--- Lexicase Population Statistics ---
Count of elite individuals by case: (489 489 489 1000 949 1000 460 949 1000 1000)
Population mean number of elite cases: 7.82
Count of perfect (error zero) individuals by case: (489 489 489 0 949 0 460 949 0 0)
Population mean number of perfect (error zero) cases: 3.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_843} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Best program: (integer_dup integer_max boolean_flush tag_boolean_843 boolean_flush in1 integer_add exec_when (print_integer exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)))
Errors: [0 0 0 1 0 1 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 15
Size: 21
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 6.175
Median total errors in population: 7
Error averages by case: (0.511 0.511 0.511 1.0 0.051 1.0 0.54 0.051 1.0 1.0)
Error minima by case: (0 0 0 1 0 1 0 0 1 1)
Average genome size in population (length): 19.309
Average program size in population (points): 26.801
Average percent parens in population: 0.278
Minimum age in population: 8.75
Maximum age in population: 12.953125
Average age in population: 11.516484375
Median age in population: 11.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 356
Genome diversity (% unique genomes):	 0.407
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 364
Syntactic diversity (% unique Push programs):	 0.381
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.013
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 2337175
--- Timings ---
Current time: 1559314335012 milliseconds
Total Time:          19.6 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.6 seconds, 69.1%
Fitness Testing:      4.3 seconds, 22.0%
Report:               1.7 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 81                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 16                 
Correct output: 4                   | Program output: 85                 
Correct output: 15                  | Program output: 64                 
Correct output: 20                  | Program output: 100                
Correct output: 13                  | Program output: 65                 
Correct output: 36                  | Program output: 66                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 86                 
Correct output: 1                   | Program output: 26                 
Correct output: 8                   | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 55                 
Correct output: 70                  | Program output: 96                 
Correct output: 25                  | Program output: 51                 
Correct output: 32                  | Program output: 33                 
Correct output: 36                  | Program output: 54                 
Correct output: 22                  | Program output: 90                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: 80                 
Correct output: -27                 | Program output: 14                 
Correct output: -25                 | Program output: 9                  
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: 37                 
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -27                
Correct output: -92                 | Program output: 8                  
Correct output: -100                | Program output: 84                 
Correct output: -62                 | Program output: 81                 
Correct output: -97                 | Program output: 8                  
Correct output: -97                 | Program output: 6                  
Correct output: -100                | Program output: 34                 
Correct output: -91                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: 88                 
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: 72                 
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -23                
Correct output: -94                 | Program output: 43                 
Correct output: 7                   | Program output: 94                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -37                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 13                 
Correct output: -80                 | Program output: -42                
Correct output: -40                 | Program output: 46                 
Correct output: -80                 | Program output: -18                
Correct output: -74                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -46                
Correct output: -58                 | Program output: 22                 
Correct output: -95                 | Program output: 52                 
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: 73                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 99                 
Correct output: -74                 | Program output: -14                
Correct output: -98                 | Program output: 32                 
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: 67                 
Correct output: -69                 | Program output: -52                
Correct output: -84                 | Program output: -8                 
Correct output: -55                 | Program output: 31                 
Correct output: -96                 | Program output: -13                
Correct output: 0                   | Program output: 75                 
Correct output: -83                 | Program output: 65                 
Correct output: -93                 | Program output: 2                  
Correct output: -33                 | Program output: -10                
Correct output: -68                 | Program output: -63                
Correct output: -92                 | Program output: 75                 
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Lexicase best program: (integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 integer_add in3 print_integer integer_mod boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ())
Lexicase best errors: [1 0 0 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 26
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Zero cases best program: (integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 integer_add in3 print_integer integer_mod boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ())
Zero cases best errors: [1 0 0 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 26
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 245 245 696 1000 3 245 1000 948 245)
Population mean number of elite cases: 5.63
Count of perfect (error zero) individuals by case: (0 245 245 696 0 3 245 0 948 245)
Population mean number of perfect (error zero) cases: 2.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Best program: (integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 integer_add in3 print_integer integer_mod boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ())
Errors: [1 0 0 1 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 19
Size: 26
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 7.373
Median total errors in population: 8
Error averages by case: (1.0 0.755 0.755 0.304 1.0 0.997 0.755 1.0 0.052 0.755)
Error minima by case: (1 0 0 0 1 0 0 1 0 0)
Average genome size in population (length): 19.396
Average program size in population (points): 27.063
Average percent parens in population: 0.281
Minimum age in population: 9.75
Maximum age in population: 14.703125
Average age in population: 12.828984375
Median age in population: 12.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 153
Genome diversity (% unique genomes):	 0.476
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 159
Syntactic diversity (% unique Push programs):	 0.444
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 2533195
--- Timings ---
Current time: 1559314337067 milliseconds
Total Time:          21.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        15.2 seconds, 70.3%
Fitness Testing:      4.5 seconds, 21.0%
Report:               1.8 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 81                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 16                 
Correct output: 4                   | Program output: 85                 
Correct output: 15                  | Program output: 64                 
Correct output: 20                  | Program output: 100                
Correct output: 13                  | Program output: 65                 
Correct output: 36                  | Program output: 66                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 86                 
Correct output: 1                   | Program output: 26                 
Correct output: 8                   | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 55                 
Correct output: 70                  | Program output: 96                 
Correct output: 25                  | Program output: 51                 
Correct output: 32                  | Program output: 33                 
Correct output: 36                  | Program output: 54                 
Correct output: 22                  | Program output: 90                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: 80                 
Correct output: -27                 | Program output: 14                 
Correct output: -25                 | Program output: 9                  
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: 37                 
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -27                
Correct output: -92                 | Program output: 8                  
Correct output: -100                | Program output: 84                 
Correct output: -62                 | Program output: 81                 
Correct output: -97                 | Program output: 8                  
Correct output: -97                 | Program output: 6                  
Correct output: -100                | Program output: 34                 
Correct output: -91                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: 88                 
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: 72                 
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -23                
Correct output: -94                 | Program output: 43                 
Correct output: 7                   | Program output: 94                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -37                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 13                 
Correct output: -80                 | Program output: -42                
Correct output: -40                 | Program output: 46                 
Correct output: -80                 | Program output: -18                
Correct output: -74                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -46                
Correct output: -58                 | Program output: 22                 
Correct output: -95                 | Program output: 52                 
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: 73                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 99                 
Correct output: -74                 | Program output: -14                
Correct output: -98                 | Program output: 32                 
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: 67                 
Correct output: -69                 | Program output: -52                
Correct output: -84                 | Program output: -8                 
Correct output: -55                 | Program output: 31                 
Correct output: -96                 | Program output: -13                
Correct output: 0                   | Program output: 75                 
Correct output: -83                 | Program output: 65                 
Correct output: -93                 | Program output: 2                  
Correct output: -33                 | Program output: -10                
Correct output: -68                 | Program output: -63                
Correct output: -92                 | Program output: 75                 
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Lexicase best program: (integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 integer_add in3 print_integer integer_mod boolean_and integer_dup_times exec_swap (exec_y () exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt))
Lexicase best errors: [0 0 0 1 1 1 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 24
Percent parens: 0.208
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_y} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Zero cases best program: (integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 integer_add in3 print_integer integer_mod boolean_and integer_dup_times exec_swap (exec_y () exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt))
Zero cases best errors: [0 0 0 1 1 1 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 24
Percent parens: 0.208
--- Lexicase Population Statistics ---
Count of elite individuals by case: (646 646 646 1000 190 1000 190 646 190 1000)
Population mean number of elite cases: 6.15
Count of perfect (error zero) individuals by case: (646 646 646 0 190 0 190 646 190 0)
Population mean number of perfect (error zero) cases: 3.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Best program: (integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 integer_add in3 print_integer integer_mod boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ())
Errors: [0 0 0 1 1 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 19
Size: 26
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 6.846
Median total errors in population: 6
Error averages by case: (0.354 0.354 0.354 1.0 0.81 1.0 0.81 0.354 0.81 1.0)
Error minima by case: (0 0 0 1 0 1 0 0 0 1)
Average genome size in population (length): 19.081
Average program size in population (points): 26.22
Average percent parens in population: 0.270
Minimum age in population: 10.75
Maximum age in population: 16.2890625
Average age in population: 14.4802421875
Median age in population: 14.53125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 316
Genome diversity (% unique genomes):	 0.421
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 342
Syntactic diversity (% unique Push programs):	 0.388
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 2725945
--- Timings ---
Current time: 1559314339023 milliseconds
Total Time:          23.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.8 seconds, 71.0%
Fitness Testing:      4.8 seconds, 20.2%
Report:               2.0 seconds,  8.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 81                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 16                 
Correct output: 4                   | Program output: 85                 
Correct output: 15                  | Program output: 64                 
Correct output: 20                  | Program output: 100                
Correct output: 13                  | Program output: 65                 
Correct output: 36                  | Program output: 66                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 86                 
Correct output: 1                   | Program output: 26                 
Correct output: 8                   | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 55                 
Correct output: 70                  | Program output: 96                 
Correct output: 25                  | Program output: 51                 
Correct output: 32                  | Program output: 33                 
Correct output: 36                  | Program output: 54                 
Correct output: 22                  | Program output: 90                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: 80                 
Correct output: -27                 | Program output: 14                 
Correct output: -25                 | Program output: 9                  
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: 37                 
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -27                
Correct output: -92                 | Program output: 8                  
Correct output: -100                | Program output: 84                 
Correct output: -62                 | Program output: 81                 
Correct output: -97                 | Program output: 8                  
Correct output: -97                 | Program output: 6                  
Correct output: -100                | Program output: 34                 
Correct output: -91                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: 88                 
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: 72                 
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -23                
Correct output: -94                 | Program output: 43                 
Correct output: 7                   | Program output: 94                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -37                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 13                 
Correct output: -80                 | Program output: -42                
Correct output: -40                 | Program output: 46                 
Correct output: -80                 | Program output: -18                
Correct output: -74                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -46                
Correct output: -58                 | Program output: 22                 
Correct output: -95                 | Program output: 52                 
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: 73                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 99                 
Correct output: -74                 | Program output: -14                
Correct output: -98                 | Program output: 32                 
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: 67                 
Correct output: -69                 | Program output: -52                
Correct output: -84                 | Program output: -8                 
Correct output: -55                 | Program output: 31                 
Correct output: -96                 | Program output: -13                
Correct output: 0                   | Program output: 75                 
Correct output: -83                 | Program output: 65                 
Correct output: -93                 | Program output: 2                  
Correct output: -33                 | Program output: -10                
Correct output: -68                 | Program output: -63                
Correct output: -92                 | Program output: 75                 
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Lexicase best program: (integer_dup integer_max boolean_flush in3 print_integer exec_when (in1 boolean_invert_first_then_and exec_eq) integer_lt)
Lexicase best errors: [1 1 1 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 12
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Zero cases best program: (integer_dup integer_max boolean_flush in3 print_integer exec_when (in1 boolean_invert_first_then_and exec_eq) integer_lt)
Zero cases best errors: [1 1 1 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 12
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (405 405 407 953 548 548 548 1000 1000 548)
Population mean number of elite cases: 6.36
Count of perfect (error zero) individuals by case: (405 405 407 953 548 548 548 0 0 548)
Population mean number of perfect (error zero) cases: 4.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Best program: (integer_dup integer_max integer_dup integer_max boolean_flush tag_boolean_770 integer_dup boolean_flush in1 integer_add in3 print_integer integer_mod boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ())
Errors: [1 1 1 0 0 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 22
Size: 29
Percent parens: 0.241
--- Population Statistics ---
Average total errors in population: 5.638
Median total errors in population: 5
Error averages by case: (0.595 0.595 0.593 0.047 0.452 0.452 0.452 1.0 1.0 0.452)
Error minima by case: (0 0 0 0 0 0 0 1 1 0)
Average genome size in population (length): 19.295
Average program size in population (points): 26.579
Average percent parens in population: 0.270
Minimum age in population: 11.75
Maximum age in population: 17.796875
Average age in population: 15.95155859375
Median age in population: 16.056640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 202
Genome diversity (% unique genomes):	 0.51
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 223
Syntactic diversity (% unique Push programs):	 0.471
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 2923553
--- Timings ---
Current time: 1559314341077 milliseconds
Total Time:          25.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.4 seconds, 71.8%
Fitness Testing:      5.0 seconds, 19.5%
Report:               2.1 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 33                 
Correct output: 13                  | Program output: 66                 
Correct output: 36                  | Program output: 49                 
Correct output: 13                  | Program output: 85                 
Correct output: 50                  | Program output: 65                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 15                 
Correct output: 1                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 32                 
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 82                 
Correct output: 25                  | Program output: 83                 
Correct output: 32                  | Program output: 56                 
Correct output: 36                  | Program output: 59                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 65                 
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: 48                 
Correct output: -58                 | Program output: 5                  
Correct output: 59                  | Program output: 91                 
Correct output: -80                 | Program output: 43                 
Correct output: -81                 | Program output: 20                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -53                
Correct output: -62                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -7                 
Correct output: -100                | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -28                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 12                 
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: 59                 
Correct output: -96                 | Program output: -78                
Correct output: -90                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 8                  
Correct output: -99                 | Program output: 36                 
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -41                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -8                 
Correct output: -81                 | Program output: -64                
Correct output: -51                 | Program output: -45                
Correct output: -80                 | Program output: 39                 
Correct output: -40                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: 100                
Correct output: -45                 | Program output: 71                 
Correct output: -59                 | Program output: 75                 
Correct output: -58                 | Program output: 1                  
Correct output: -95                 | Program output: 57                 
Correct output: 17                  | Program output: 49                 
Correct output: -57                 | Program output: -13                
Correct output: -98                 | Program output: -82                
Correct output: -100                | Program output: -3                 
Correct output: -74                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: 81                 
Correct output: -96                 | Program output: -73                
Correct output: 0                   | Program output: 13                 
Correct output: -83                 | Program output: -82                
Correct output: -93                 | Program output: -52                
Correct output: -33                 | Program output: -8                 
Correct output: -68                 | Program output: -25                
Correct output: -92                 | Program output: 48                 
Correct output: -70                 | Program output: -46                
Correct output: -9                  | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 1, :instruction tag_boolean_843} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq})
Lexicase best program: (integer_dup integer_max boolean_flush tag_boolean_843 boolean_flush in1 integer_add exec_when (print_integer integer_mod boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) ()) ()))
Lexicase best errors: [0 1 0 1 0 1 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 26
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 1, :instruction tag_boolean_843} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq})
Zero cases best program: (integer_dup integer_max boolean_flush tag_boolean_843 boolean_flush in1 integer_add exec_when (print_integer integer_mod boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) ()) ()))
Zero cases best errors: [0 1 0 1 0 1 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 26
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (394 1 394 1 394 1 394 1000 1000 548)
Population mean number of elite cases: 4.13
Count of perfect (error zero) individuals by case: (394 1 394 1 394 1 394 0 0 548)
Population mean number of perfect (error zero) cases: 2.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_843} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_flush} {:close 1, :instruction integer_lt})
Best program: (integer_dup integer_sub boolean_flush tag_boolean_843 boolean_flush in1 integer_add exec_when (print_integer integer_mod boolean_and exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and boolean_flush) (integer_lt)) ()))
Errors: [0 1 0 1 0 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 18
Size: 26
Percent parens: 0.308
--- Population Statistics ---
Average total errors in population: 7.873
Median total errors in population: 9
Error averages by case: (0.606 0.999 0.606 0.999 0.606 0.999 0.606 1.0 1.0 0.452)
Error minima by case: (0 0 0 0 0 0 0 1 1 0)
Average genome size in population (length): 19.064
Average program size in population (points): 26.287
Average percent parens in population: 0.270
Minimum age in population: 14.28125
Maximum age in population: 19.38671875
Average age in population: 17.4114072265625
Median age in population: 17.44873046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 157
Genome diversity (% unique genomes):	 0.559
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 183
Syntactic diversity (% unique Push programs):	 0.515
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 3118393
--- Timings ---
Current time: 1559314343119 milliseconds
Total Time:          27.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.1 seconds, 72.4%
Fitness Testing:      5.2 seconds, 18.9%
Report:               2.3 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 33                 
Correct output: 13                  | Program output: 66                 
Correct output: 36                  | Program output: 49                 
Correct output: 13                  | Program output: 85                 
Correct output: 50                  | Program output: 65                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 15                 
Correct output: 1                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 32                 
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 82                 
Correct output: 25                  | Program output: 83                 
Correct output: 32                  | Program output: 56                 
Correct output: 36                  | Program output: 59                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 65                 
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: 48                 
Correct output: -58                 | Program output: 5                  
Correct output: 59                  | Program output: 91                 
Correct output: -80                 | Program output: 43                 
Correct output: -81                 | Program output: 20                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -53                
Correct output: -62                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -7                 
Correct output: -100                | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -28                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 12                 
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: 59                 
Correct output: -96                 | Program output: -78                
Correct output: -90                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 8                  
Correct output: -99                 | Program output: 36                 
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -41                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -8                 
Correct output: -81                 | Program output: -64                
Correct output: -51                 | Program output: -45                
Correct output: -80                 | Program output: 39                 
Correct output: -40                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: 100                
Correct output: -45                 | Program output: 71                 
Correct output: -59                 | Program output: 75                 
Correct output: -58                 | Program output: 1                  
Correct output: -95                 | Program output: 57                 
Correct output: 17                  | Program output: 49                 
Correct output: -57                 | Program output: -13                
Correct output: -98                 | Program output: -82                
Correct output: -100                | Program output: -3                 
Correct output: -74                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: 81                 
Correct output: -96                 | Program output: -73                
Correct output: 0                   | Program output: 13                 
Correct output: -83                 | Program output: -82                
Correct output: -93                 | Program output: -52                
Correct output: -33                 | Program output: -8                 
Correct output: -68                 | Program output: -25                
Correct output: -92                 | Program output: 48                 
Correct output: -70                 | Program output: -46                
Correct output: -9                  | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_773} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Lexicase best program: (integer_dup integer_max boolean_flush tag_boolean_773 boolean_flush in1 integer_add exec_when (print_integer integer_gt integer_dup_times exec_swap (exec_rot () (integer_mult in1) (boolean_invert_first_then_and exec_eq) in1) (boolean_invert_first_then_and exec_eq) integer_lt))
Lexicase best errors: [0 1 1 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 28
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_773} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_mult} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Zero cases best program: (integer_dup integer_max boolean_flush tag_boolean_773 boolean_flush in1 integer_add exec_when (print_integer integer_gt integer_dup_times exec_swap (exec_rot () (integer_mult in1) (boolean_invert_first_then_and exec_eq) in1) (boolean_invert_first_then_and exec_eq) integer_lt))
Zero cases best errors: [0 1 1 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 28
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (473 1000 134 473 134 134 473 960 134 473)
Population mean number of elite cases: 4.39
Count of perfect (error zero) individuals by case: (473 0 134 473 134 134 473 960 134 473)
Population mean number of perfect (error zero) cases: 3.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_843} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Best program: (exec_y_when_autoconstructing (integer_dup integer_max boolean_flush tag_boolean_843) boolean_flush in1 integer_add exec_when (print_integer integer_mod boolean_and integer_dup_times exec_swap (exec_rot () (integer_pop in1) (boolean_invert_first_then_and exec_eq) integer_lt) ()))
Errors: [0 1 1 0 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 20
Size: 28
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 6.612
Median total errors in population: 5
Error averages by case: (0.527 1.0 0.866 0.527 0.866 0.866 0.527 0.04 0.866 0.527)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 18.347
Average program size in population (points): 26.738
Average percent parens in population: 0.309
Minimum age in population: 15.384765625
Maximum age in population: 20.6552734375
Average age in population: 18.4878193359375
Median age in population: 18.59375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 279
Genome diversity (% unique genomes):	 0.448
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 280
Syntactic diversity (% unique Push programs):	 0.426
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 3331610
--- Timings ---
Current time: 1559314345221 milliseconds
Total Time:          29.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.8 seconds, 72.9%
Fitness Testing:      5.5 seconds, 18.4%
Report:               2.5 seconds,  8.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 81                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 16                 
Correct output: 4                   | Program output: 85                 
Correct output: 15                  | Program output: 64                 
Correct output: 20                  | Program output: 100                
Correct output: 13                  | Program output: 65                 
Correct output: 36                  | Program output: 66                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 86                 
Correct output: 1                   | Program output: 26                 
Correct output: 8                   | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 55                 
Correct output: 70                  | Program output: 96                 
Correct output: 25                  | Program output: 51                 
Correct output: 32                  | Program output: 33                 
Correct output: 36                  | Program output: 54                 
Correct output: 22                  | Program output: 90                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: 80                 
Correct output: -27                 | Program output: 14                 
Correct output: -25                 | Program output: 9                  
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: 37                 
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -27                
Correct output: -92                 | Program output: 8                  
Correct output: -100                | Program output: 84                 
Correct output: -62                 | Program output: 81                 
Correct output: -97                 | Program output: 8                  
Correct output: -97                 | Program output: 6                  
Correct output: -100                | Program output: 34                 
Correct output: -91                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: 88                 
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: 72                 
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -23                
Correct output: -94                 | Program output: 43                 
Correct output: 7                   | Program output: 94                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -37                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 13                 
Correct output: -80                 | Program output: -42                
Correct output: -40                 | Program output: 46                 
Correct output: -80                 | Program output: -18                
Correct output: -74                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -46                
Correct output: -58                 | Program output: 22                 
Correct output: -95                 | Program output: 52                 
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: 73                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 99                 
Correct output: -74                 | Program output: -14                
Correct output: -98                 | Program output: 32                 
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: 67                 
Correct output: -69                 | Program output: -52                
Correct output: -84                 | Program output: -8                 
Correct output: -55                 | Program output: 31                 
Correct output: -96                 | Program output: -13                
Correct output: 0                   | Program output: 75                 
Correct output: -83                 | Program output: 65                 
Correct output: -93                 | Program output: 2                  
Correct output: -33                 | Program output: -10                
Correct output: -68                 | Program output: -63                
Correct output: -92                 | Program output: 75                 
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Lexicase best program: (integer_dup integer_max boolean_flush tag_boolean_770 integer_pop in1 integer_add in3 print_integer integer_mod boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ())
Lexicase best errors: [1 0 0 1 0 1 1 0 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 26
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction integer_pop} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Zero cases best program: (integer_dup integer_max boolean_flush tag_boolean_770 integer_pop in1 integer_add in3 print_integer integer_mod boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ())
Zero cases best errors: [1 0 0 1 0 1 1 0 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 26
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 482 482 1000 482 1000 1000 482 468 1000)
Population mean number of elite cases: 7.40
Count of perfect (error zero) individuals by case: (0 482 482 0 482 0 0 482 468 0)
Population mean number of perfect (error zero) cases: 2.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Best program: (integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 integer_add in3 print_integer exec_pop (boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ()))
Errors: [1 0 0 1 0 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 19
Size: 27
Percent parens: 0.296
--- Population Statistics ---
Average total errors in population: 7.604
Median total errors in population: 9
Error averages by case: (1.0 0.518 0.518 1.0 0.518 1.0 1.0 0.518 0.532 1.0)
Error minima by case: (1 0 0 1 0 1 1 0 0 1)
Average genome size in population (length): 18.753
Average program size in population (points): 25.851
Average percent parens in population: 0.267
Minimum age in population: 16.384765625
Maximum age in population: 22.359619140625
Average age in population: 20.17022021484375
Median age in population: 20.21533203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 80
Genome diversity (% unique genomes):	 0.552
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 103
Syntactic diversity (% unique Push programs):	 0.511
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.013
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 3525124
--- Timings ---
Current time: 1559314347455 milliseconds
Total Time:          32.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.7 seconds, 73.7%
Fitness Testing:      5.7 seconds, 17.8%
Report:               2.6 seconds,  8.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 33                 
Correct output: 13                  | Program output: 66                 
Correct output: 36                  | Program output: 49                 
Correct output: 13                  | Program output: 85                 
Correct output: 50                  | Program output: 65                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 15                 
Correct output: 1                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 32                 
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 82                 
Correct output: 25                  | Program output: 83                 
Correct output: 32                  | Program output: 56                 
Correct output: 36                  | Program output: 59                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 65                 
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: 48                 
Correct output: -58                 | Program output: 5                  
Correct output: 59                  | Program output: 91                 
Correct output: -80                 | Program output: 43                 
Correct output: -81                 | Program output: 20                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -53                
Correct output: -62                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -7                 
Correct output: -100                | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -28                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 12                 
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: 59                 
Correct output: -96                 | Program output: -78                
Correct output: -90                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 8                  
Correct output: -99                 | Program output: 36                 
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -41                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -8                 
Correct output: -81                 | Program output: -64                
Correct output: -51                 | Program output: -45                
Correct output: -80                 | Program output: 39                 
Correct output: -40                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: 100                
Correct output: -45                 | Program output: 71                 
Correct output: -59                 | Program output: 75                 
Correct output: -58                 | Program output: 1                  
Correct output: -95                 | Program output: 57                 
Correct output: 17                  | Program output: 49                 
Correct output: -57                 | Program output: -13                
Correct output: -98                 | Program output: -82                
Correct output: -100                | Program output: -3                 
Correct output: -74                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: 81                 
Correct output: -96                 | Program output: -73                
Correct output: 0                   | Program output: 13                 
Correct output: -83                 | Program output: -82                
Correct output: -93                 | Program output: -52                
Correct output: -33                 | Program output: -8                 
Correct output: -68                 | Program output: -25                
Correct output: -92                 | Program output: 48                 
Correct output: -70                 | Program output: -46                
Correct output: -9                  | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_843} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Lexicase best program: (exec_y_when_autoconstructing (integer_dup integer_max boolean_flush tag_boolean_843) boolean_flush in1 integer_add exec_when (print_integer integer_mod boolean_and integer_dup_times exec_swap (exec_rot () (integer_pop in1) (boolean_invert_first_then_and exec_eq) integer_lt) ()))
Lexicase best errors: [0 1 1 1 0 1 1 0 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 28
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_843} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Zero cases best program: (exec_y_when_autoconstructing (integer_dup integer_max boolean_flush tag_boolean_843) boolean_flush in1 integer_add exec_when (print_integer integer_mod boolean_and integer_dup_times exec_swap (exec_rot () (integer_pop in1) (boolean_invert_first_then_and exec_eq) integer_lt) ()))
Zero cases best errors: [0 1 1 1 0 1 1 0 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 28
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (186 770 1000 1000 186 1000 1000 957 1000 1000)
Population mean number of elite cases: 8.10
Count of perfect (error zero) individuals by case: (186 770 0 0 186 0 0 957 0 0)
Population mean number of perfect (error zero) cases: 2.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_843} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Best program: (boolean_frominteger integer_max boolean_flush tag_boolean_843 boolean_flush in1 integer_add exec_when (print_integer print_integer boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1 boolean_invert_first_then_and exec_eq) integer_lt) ()) ()))
Errors: [0 1 1 1 0 1 1 0 1 1]
Total: 7
Mean: 0.7
Genome size: 19
Size: 27
Percent parens: 0.296
--- Population Statistics ---
Average total errors in population: 7.901
Median total errors in population: 8
Error averages by case: (0.814 0.23 1.0 1.0 0.814 1.0 1.0 0.043 1.0 1.0)
Error minima by case: (0 0 1 1 0 1 1 0 1 1)
Average genome size in population (length): 18.491
Average program size in population (points): 25.294
Average percent parens in population: 0.261
Minimum age in population: 17.384765625
Maximum age in population: 23.6199951171875
Average age in population: 21.63143225097656
Median age in population: 21.7152099609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 87
Genome diversity (% unique genomes):	 0.504
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 120
Syntactic diversity (% unique Push programs):	 0.469
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.013
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 3715929
--- Timings ---
Current time: 1559314349514 milliseconds
Total Time:          34.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.3 seconds, 74.2%
Fitness Testing:      5.9 seconds, 17.4%
Report:               2.8 seconds,  8.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 81                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 16                 
Correct output: 4                   | Program output: 85                 
Correct output: 15                  | Program output: 64                 
Correct output: 20                  | Program output: 100                
Correct output: 13                  | Program output: 65                 
Correct output: 36                  | Program output: 66                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 86                 
Correct output: 1                   | Program output: 26                 
Correct output: 8                   | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 55                 
Correct output: 70                  | Program output: 96                 
Correct output: 25                  | Program output: 51                 
Correct output: 32                  | Program output: 33                 
Correct output: 36                  | Program output: 54                 
Correct output: 22                  | Program output: 90                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: 80                 
Correct output: -27                 | Program output: 14                 
Correct output: -25                 | Program output: 9                  
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: 37                 
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -27                
Correct output: -92                 | Program output: 8                  
Correct output: -100                | Program output: 84                 
Correct output: -62                 | Program output: 81                 
Correct output: -97                 | Program output: 8                  
Correct output: -97                 | Program output: 6                  
Correct output: -100                | Program output: 34                 
Correct output: -91                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: 88                 
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: 72                 
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -23                
Correct output: -94                 | Program output: 43                 
Correct output: 7                   | Program output: 94                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -37                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 13                 
Correct output: -80                 | Program output: -42                
Correct output: -40                 | Program output: 46                 
Correct output: -80                 | Program output: -18                
Correct output: -74                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -46                
Correct output: -58                 | Program output: 22                 
Correct output: -95                 | Program output: 52                 
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: 73                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 99                 
Correct output: -74                 | Program output: -14                
Correct output: -98                 | Program output: 32                 
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: 67                 
Correct output: -69                 | Program output: -52                
Correct output: -84                 | Program output: -8                 
Correct output: -55                 | Program output: 31                 
Correct output: -96                 | Program output: -13                
Correct output: 0                   | Program output: 75                 
Correct output: -83                 | Program output: 65                 
Correct output: -93                 | Program output: 2                  
Correct output: -33                 | Program output: -10                
Correct output: -68                 | Program output: -63                
Correct output: -92                 | Program output: 75                 
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Lexicase best program: (integer_dup integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 integer_add in3 print_integer exec_pop (boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ()))
Lexicase best errors: [1 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 28
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Zero cases best program: (integer_dup integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 integer_add in3 print_integer exec_pop (boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ()))
Zero cases best errors: [1 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 28
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 301 941 941 301 301 1000 301 303 941)
Population mean number of elite cases: 6.33
Count of perfect (error zero) individuals by case: (0 301 941 941 301 301 0 301 303 941)
Population mean number of perfect (error zero) cases: 4.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_lt})
Best program: (integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 integer_add in3 print_integer exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt))
Errors: [1 0 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 15
Size: 20
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 5.67
Median total errors in population: 7
Error averages by case: (1.0 0.699 0.059 0.059 0.699 0.699 1.0 0.699 0.697 0.059)
Error minima by case: (1 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 18.384
Average program size in population (points): 25.12
Average percent parens in population: 0.258
Minimum age in population: 18.384765625
Maximum age in population: 25.10125732421875
Average age in population: 23.17604223632812
Median age in population: 23.26824951171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 29
Genome diversity (% unique genomes):	 0.517
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.48
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 3900216
--- Timings ---
Current time: 1559314351725 milliseconds
Total Time:          36.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        27.2 seconds, 74.8%
Fitness Testing:      6.2 seconds, 17.0%
Report:               2.9 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 33                 
Correct output: 13                  | Program output: 66                 
Correct output: 36                  | Program output: 49                 
Correct output: 13                  | Program output: 85                 
Correct output: 50                  | Program output: 65                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 15                 
Correct output: 1                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 32                 
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 82                 
Correct output: 25                  | Program output: 83                 
Correct output: 32                  | Program output: 56                 
Correct output: 36                  | Program output: 59                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 65                 
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: 48                 
Correct output: -58                 | Program output: 5                  
Correct output: 59                  | Program output: 91                 
Correct output: -80                 | Program output: 43                 
Correct output: -81                 | Program output: 20                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -53                
Correct output: -62                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -7                 
Correct output: -100                | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -28                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 12                 
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: 59                 
Correct output: -96                 | Program output: -78                
Correct output: -90                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 8                  
Correct output: -99                 | Program output: 36                 
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -41                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -8                 
Correct output: -81                 | Program output: -64                
Correct output: -51                 | Program output: -45                
Correct output: -80                 | Program output: 39                 
Correct output: -40                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: 100                
Correct output: -45                 | Program output: 71                 
Correct output: -59                 | Program output: 75                 
Correct output: -58                 | Program output: 1                  
Correct output: -95                 | Program output: 57                 
Correct output: 17                  | Program output: 49                 
Correct output: -57                 | Program output: -13                
Correct output: -98                 | Program output: -82                
Correct output: -100                | Program output: -3                 
Correct output: -74                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: 81                 
Correct output: -96                 | Program output: -73                
Correct output: 0                   | Program output: 13                 
Correct output: -83                 | Program output: -82                
Correct output: -93                 | Program output: -52                
Correct output: -33                 | Program output: -8                 
Correct output: -68                 | Program output: -25                
Correct output: -92                 | Program output: 48                 
Correct output: -70                 | Program output: -46                
Correct output: -9                  | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Lexicase best program: (integer_dup integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 integer_add integer_div print_integer exec_pop (boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ()))
Lexicase best errors: [0 1 1 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 28
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Zero cases best program: (integer_dup integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 integer_add integer_div print_integer exec_pop (boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ()))
Zero cases best errors: [0 1 1 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 28
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 1000 1000 1000 1000 944 2 2 945 947)
Population mean number of elite cases: 6.84
Count of perfect (error zero) individuals by case: (2 0 0 0 0 944 2 2 945 947)
Population mean number of perfect (error zero) cases: 2.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_dup_items})
Best program: (integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 integer_add integer_add print_integer integer_mod boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_dup_items)) ())
Errors: [0 1 1 1 1 1 0 0 1 0]
Total: 6
Mean: 0.6
Genome size: 19
Size: 26
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 7.158
Median total errors in population: 7
Error averages by case: (0.998 1.0 1.0 1.0 1.0 0.056 0.998 0.998 0.055 0.053)
Error minima by case: (0 1 1 1 1 0 0 0 0 0)
Average genome size in population (length): 18.541
Average program size in population (points): 25.219
Average percent parens in population: 0.258
Minimum age in population: 21.86376953125
Maximum age in population: 26.803466796875
Average age in population: 24.67156631469727
Median age in population: 24.75016784667969
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 65
Genome diversity (% unique genomes):	 0.459
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.412
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.01
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 4085877
--- Timings ---
Current time: 1559314353704 milliseconds
Total Time:          38.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        28.8 seconds, 75.1%
Fitness Testing:      6.4 seconds, 16.7%
Report:               3.1 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 33                 
Correct output: 13                  | Program output: 66                 
Correct output: 36                  | Program output: 49                 
Correct output: 13                  | Program output: 85                 
Correct output: 50                  | Program output: 65                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 15                 
Correct output: 1                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 32                 
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 82                 
Correct output: 25                  | Program output: 83                 
Correct output: 32                  | Program output: 56                 
Correct output: 36                  | Program output: 59                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 65                 
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: 48                 
Correct output: -58                 | Program output: 5                  
Correct output: 59                  | Program output: 91                 
Correct output: -80                 | Program output: 43                 
Correct output: -81                 | Program output: 20                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -53                
Correct output: -62                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -7                 
Correct output: -100                | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -28                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 12                 
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: 59                 
Correct output: -96                 | Program output: -78                
Correct output: -90                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 8                  
Correct output: -99                 | Program output: 36                 
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -41                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -8                 
Correct output: -81                 | Program output: -64                
Correct output: -51                 | Program output: -45                
Correct output: -80                 | Program output: 39                 
Correct output: -40                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: 100                
Correct output: -45                 | Program output: 71                 
Correct output: -59                 | Program output: 75                 
Correct output: -58                 | Program output: 1                  
Correct output: -95                 | Program output: 57                 
Correct output: 17                  | Program output: 49                 
Correct output: -57                 | Program output: -13                
Correct output: -98                 | Program output: -82                
Correct output: -100                | Program output: -3                 
Correct output: -74                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: 81                 
Correct output: -96                 | Program output: -73                
Correct output: 0                   | Program output: 13                 
Correct output: -83                 | Program output: -82                
Correct output: -93                 | Program output: -52                
Correct output: -33                 | Program output: -8                 
Correct output: -68                 | Program output: -25                
Correct output: -92                 | Program output: 48                 
Correct output: -70                 | Program output: -46                
Correct output: -9                  | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Lexicase best program: (integer_dup integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 integer_add integer_div print_integer exec_pop (boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ()))
Lexicase best errors: [1 1 0 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 28
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Zero cases best program: (integer_dup integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 integer_add integer_div print_integer exec_pop (boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ()))
Zero cases best errors: [1 1 0 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 28
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 595 341 595 1000 595 936 595 1000)
Population mean number of elite cases: 7.66
Count of perfect (error zero) individuals by case: (0 0 595 341 595 0 595 936 595 0)
Population mean number of perfect (error zero) cases: 3.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_div} {:close 0, :instruction print_integer} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Best program: (integer_dup integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 integer_add integer_div print_integer exec_when (in1) boolean_invert_first_then_and exec_eq integer_lt)
Errors: [1 1 0 1 0 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 15
Size: 17
Percent parens: 0.118
--- Population Statistics ---
Average total errors in population: 6.343
Median total errors in population: 5
Error averages by case: (1.0 1.0 0.405 0.659 0.405 1.0 0.405 0.064 0.405 1.0)
Error minima by case: (1 1 0 0 0 1 0 0 0 1)
Average genome size in population (length): 19.079
Average program size in population (points): 26.198
Average percent parens in population: 0.267
Minimum age in population: 22.86376953125
Maximum age in population: 28.10125732421875
Average age in population: 26.70988226318359
Median age in population: 26.7821044921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 215
Genome diversity (% unique genomes):	 0.448
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 224
Syntactic diversity (% unique Push programs):	 0.413
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 4248427
--- Timings ---
Current time: 1559314355446 milliseconds
Total Time:          40.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.2 seconds, 75.3%
Fitness Testing:      6.6 seconds, 16.4%
Report:               3.2 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 33                 
Correct output: 13                  | Program output: 66                 
Correct output: 36                  | Program output: 49                 
Correct output: 13                  | Program output: 85                 
Correct output: 50                  | Program output: 65                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 15                 
Correct output: 1                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 32                 
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 82                 
Correct output: 25                  | Program output: 83                 
Correct output: 32                  | Program output: 56                 
Correct output: 36                  | Program output: 59                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 65                 
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: 48                 
Correct output: -58                 | Program output: 5                  
Correct output: 59                  | Program output: 91                 
Correct output: -80                 | Program output: 43                 
Correct output: -81                 | Program output: 20                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -53                
Correct output: -62                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -7                 
Correct output: -100                | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -28                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 12                 
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: 59                 
Correct output: -96                 | Program output: -78                
Correct output: -90                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 8                  
Correct output: -99                 | Program output: 36                 
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -41                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -8                 
Correct output: -81                 | Program output: -64                
Correct output: -51                 | Program output: -45                
Correct output: -80                 | Program output: 39                 
Correct output: -40                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: 100                
Correct output: -45                 | Program output: 71                 
Correct output: -59                 | Program output: 75                 
Correct output: -58                 | Program output: 1                  
Correct output: -95                 | Program output: 57                 
Correct output: 17                  | Program output: 49                 
Correct output: -57                 | Program output: -13                
Correct output: -98                 | Program output: -82                
Correct output: -100                | Program output: -3                 
Correct output: -74                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: 81                 
Correct output: -96                 | Program output: -73                
Correct output: 0                   | Program output: 13                 
Correct output: -83                 | Program output: -82                
Correct output: -93                 | Program output: -52                
Correct output: -33                 | Program output: -8                 
Correct output: -68                 | Program output: -25                
Correct output: -92                 | Program output: 48                 
Correct output: -70                 | Program output: -46                
Correct output: -9                  | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_dup_items})
Lexicase best program: (integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 integer_add integer_add print_integer integer_mod boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_flush) (integer_dup_items)) ())
Lexicase best errors: [1 0 0 0 0 0 1 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 26
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_dup_items})
Zero cases best program: (integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 integer_add integer_add print_integer integer_mod boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_flush) (integer_dup_items)) ())
Zero cases best errors: [1 0 0 0 0 0 1 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 26
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 738 738 947 738 738 1000 207 208 209)
Population mean number of elite cases: 5.52
Count of perfect (error zero) individuals by case: (1 738 738 947 738 738 0 207 208 209)
Population mean number of perfect (error zero) cases: 4.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_dup_items})
Best program: (integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 integer_add integer_add print_integer integer_mod boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_dup_items)) ())
Errors: [1 0 0 0 0 0 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 19
Size: 26
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 5.476
Median total errors in population: 5
Error averages by case: (0.999 0.262 0.262 0.053 0.262 0.262 1.0 0.793 0.792 0.791)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 19.317
Average program size in population (points): 26.577
Average percent parens in population: 0.268
Minimum age in population: 25.49990844726562
Maximum age in population: 29.85293579101562
Average age in population: 28.25583532714844
Median age in population: 28.35149383544922
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 207
Genome diversity (% unique genomes):	 0.461
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 226
Syntactic diversity (% unique Push programs):	 0.422
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 4406701
--- Timings ---
Current time: 1559314357571 milliseconds
Total Time:          42.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.0 seconds, 75.7%
Fitness Testing:      6.8 seconds, 16.0%
Report:               3.4 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 81                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 16                 
Correct output: 4                   | Program output: 85                 
Correct output: 15                  | Program output: 64                 
Correct output: 20                  | Program output: 100                
Correct output: 13                  | Program output: 65                 
Correct output: 36                  | Program output: 66                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 86                 
Correct output: 1                   | Program output: 26                 
Correct output: 8                   | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 55                 
Correct output: 70                  | Program output: 96                 
Correct output: 25                  | Program output: 51                 
Correct output: 32                  | Program output: 33                 
Correct output: 36                  | Program output: 54                 
Correct output: 22                  | Program output: 90                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: 80                 
Correct output: -27                 | Program output: 14                 
Correct output: -25                 | Program output: 9                  
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: 37                 
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -27                
Correct output: -92                 | Program output: 8                  
Correct output: -100                | Program output: 84                 
Correct output: -62                 | Program output: 81                 
Correct output: -97                 | Program output: 8                  
Correct output: -97                 | Program output: 6                  
Correct output: -100                | Program output: 34                 
Correct output: -91                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: 88                 
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: 72                 
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -23                
Correct output: -94                 | Program output: 43                 
Correct output: 7                   | Program output: 94                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -37                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 13                 
Correct output: -80                 | Program output: -42                
Correct output: -40                 | Program output: 46                 
Correct output: -80                 | Program output: -18                
Correct output: -74                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -46                
Correct output: -58                 | Program output: 22                 
Correct output: -95                 | Program output: 52                 
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: 73                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 99                 
Correct output: -74                 | Program output: -14                
Correct output: -98                 | Program output: 32                 
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: 67                 
Correct output: -69                 | Program output: -52                
Correct output: -84                 | Program output: -8                 
Correct output: -55                 | Program output: 31                 
Correct output: -96                 | Program output: -13                
Correct output: 0                   | Program output: 75                 
Correct output: -83                 | Program output: 65                 
Correct output: -93                 | Program output: 2                  
Correct output: -33                 | Program output: -10                
Correct output: -68                 | Program output: -63                
Correct output: -92                 | Program output: 75                 
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_lt})
Lexicase best program: (integer_dup integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 integer_add in3 print_integer integer_mod boolean_and integer_dup_times exec_swap (boolean_dup_items) (exec_when (boolean_eq) boolean_invert_first_then_and exec_eq) integer_lt)
Lexicase best errors: [0 1 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 24
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_lt})
Zero cases best program: (integer_dup integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 integer_add in3 print_integer integer_mod boolean_and integer_dup_times exec_swap (boolean_dup_items) (exec_when (boolean_eq) boolean_invert_first_then_and exec_eq) integer_lt)
Zero cases best errors: [0 1 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 24
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (960 1000 960 388 960 852 388 108 1000 960)
Population mean number of elite cases: 7.58
Count of perfect (error zero) individuals by case: (960 0 960 388 960 852 388 108 0 960)
Population mean number of perfect (error zero) cases: 5.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_while} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Best program: (integer_dup boolean_eq integer_dup integer_max boolean_flush exec_dup_items integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 in3 in3 print_integer integer_mod boolean_and integer_dup_times exec_pop (boolean_and integer_dup_times exec_swap (exec_rot () (exec_while () in1) (boolean_invert_first_then_and exec_eq) integer_lt) ()))
Errors: [0 1 0 0 0 0 0 1 1 0]
Total: 3
Mean: 0.3
Genome size: 28
Size: 36
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 4.424
Median total errors in population: 5
Error averages by case: (0.04 1.0 0.04 0.612 0.04 0.148 0.612 0.892 1.0 0.04)
Error minima by case: (0 1 0 0 0 0 0 0 1 0)
Average genome size in population (length): 19.252
Average program size in population (points): 26.387
Average percent parens in population: 0.263
Minimum age in population: 26.49990844726562
Maximum age in population: 31.54892349243164
Average age in population: 29.71135217666626
Median age in population: 29.7821044921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 111
Genome diversity (% unique genomes):	 0.476
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 123
Syntactic diversity (% unique Push programs):	 0.428
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 4571216
--- Timings ---
Current time: 1559314359453 milliseconds
Total Time:          44.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.5 seconds, 76.0%
Fitness Testing:      7.0 seconds, 15.8%
Report:               3.5 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 33                 
Correct output: 13                  | Program output: 66                 
Correct output: 36                  | Program output: 49                 
Correct output: 13                  | Program output: 85                 
Correct output: 50                  | Program output: 65                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 15                 
Correct output: 1                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 32                 
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 82                 
Correct output: 25                  | Program output: 83                 
Correct output: 32                  | Program output: 56                 
Correct output: 36                  | Program output: 59                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 65                 
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: 48                 
Correct output: -58                 | Program output: 5                  
Correct output: 59                  | Program output: 91                 
Correct output: -80                 | Program output: 43                 
Correct output: -81                 | Program output: 20                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -53                
Correct output: -62                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -7                 
Correct output: -100                | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -28                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 12                 
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: 59                 
Correct output: -96                 | Program output: -78                
Correct output: -90                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 8                  
Correct output: -99                 | Program output: 36                 
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -41                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -8                 
Correct output: -81                 | Program output: -64                
Correct output: -51                 | Program output: -45                
Correct output: -80                 | Program output: 39                 
Correct output: -40                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: 100                
Correct output: -45                 | Program output: 71                 
Correct output: -59                 | Program output: 75                 
Correct output: -58                 | Program output: 1                  
Correct output: -95                 | Program output: 57                 
Correct output: 17                  | Program output: 49                 
Correct output: -57                 | Program output: -13                
Correct output: -98                 | Program output: -82                
Correct output: -100                | Program output: -3                 
Correct output: -74                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: 81                 
Correct output: -96                 | Program output: -73                
Correct output: 0                   | Program output: 13                 
Correct output: -83                 | Program output: -82                
Correct output: -93                 | Program output: -52                
Correct output: -33                 | Program output: -8                 
Correct output: -68                 | Program output: -25                
Correct output: -92                 | Program output: 48                 
Correct output: -70                 | Program output: -46                
Correct output: -9                  | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Lexicase best program: (integer_dup integer_dup integer_dup integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 integer_add integer_gt print_integer exec_pop (boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ()))
Lexicase best errors: [1 0 0 1 0 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 30
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gt} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Zero cases best program: (integer_dup integer_dup integer_dup integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 integer_add integer_gt print_integer exec_pop (boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ()))
Zero cases best errors: [1 0 0 1 0 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 30
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (720 6 959 232 5 958 1 5 720 233)
Population mean number of elite cases: 3.84
Count of perfect (error zero) individuals by case: (720 6 959 232 5 958 1 5 720 233)
Population mean number of perfect (error zero) cases: 3.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction print_integer} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_empty} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Best program: (integer_dup integer_max boolean_flush print_integer boolean_flush in1 integer_add integer_empty print_integer integer_mod boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ())
Errors: [1 0 0 1 0 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 19
Size: 26
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 6.161
Median total errors in population: 6
Error averages by case: (0.28 0.994 0.041 0.768 0.995 0.042 0.999 0.995 0.28 0.767)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.26
Average program size in population (points): 26.222
Average percent parens in population: 0.255
Minimum age in population: 27.49990844726562
Maximum age in population: 32.97991180419922
Average age in population: 31.2123353099823
Median age in population: 31.2821044921875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 128
Genome diversity (% unique genomes):	 0.457
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 134
Syntactic diversity (% unique Push programs):	 0.424
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.013
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 4748476
--- Timings ---
Current time: 1559314361649 milliseconds
Total Time:          46.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.3 seconds, 76.3%
Fitness Testing:      7.2 seconds, 15.5%
Report:               3.7 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 81                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 16                 
Correct output: 4                   | Program output: 85                 
Correct output: 15                  | Program output: 64                 
Correct output: 20                  | Program output: 100                
Correct output: 13                  | Program output: 65                 
Correct output: 36                  | Program output: 66                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 86                 
Correct output: 1                   | Program output: 26                 
Correct output: 8                   | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 55                 
Correct output: 70                  | Program output: 96                 
Correct output: 25                  | Program output: 51                 
Correct output: 32                  | Program output: 33                 
Correct output: 36                  | Program output: 54                 
Correct output: 22                  | Program output: 90                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: 80                 
Correct output: -27                 | Program output: 14                 
Correct output: -25                 | Program output: 9                  
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: 37                 
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -27                
Correct output: -92                 | Program output: 8                  
Correct output: -100                | Program output: 84                 
Correct output: -62                 | Program output: 81                 
Correct output: -97                 | Program output: 8                  
Correct output: -97                 | Program output: 6                  
Correct output: -100                | Program output: 34                 
Correct output: -91                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: 88                 
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: 72                 
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -23                
Correct output: -94                 | Program output: 43                 
Correct output: 7                   | Program output: 94                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -37                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 13                 
Correct output: -80                 | Program output: -42                
Correct output: -40                 | Program output: 46                 
Correct output: -80                 | Program output: -18                
Correct output: -74                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -46                
Correct output: -58                 | Program output: 22                 
Correct output: -95                 | Program output: 52                 
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: 73                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 99                 
Correct output: -74                 | Program output: -14                
Correct output: -98                 | Program output: 32                 
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: 67                 
Correct output: -69                 | Program output: -52                
Correct output: -84                 | Program output: -8                 
Correct output: -55                 | Program output: 31                 
Correct output: -96                 | Program output: -13                
Correct output: 0                   | Program output: 75                 
Correct output: -83                 | Program output: 65                 
Correct output: -93                 | Program output: 2                  
Correct output: -33                 | Program output: -10                
Correct output: -68                 | Program output: -63                
Correct output: -92                 | Program output: 75                 
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 3, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Lexicase best program: (integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush exec_s_when_autoconstructing (integer_add in3 print_integer integer_mod) (boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (exec_eq) integer_lt) ()) ()) ())
Lexicase best errors: [0 1 0 0 1 1 1 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 27
Percent parens: 0.370
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 3, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Zero cases best program: (integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush exec_s_when_autoconstructing (integer_add in3 print_integer integer_mod) (boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (exec_eq) integer_lt) ()) ()) ())
Zero cases best errors: [0 1 0 0 1 1 1 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 27
Percent parens: 0.370
--- Lexicase Population Statistics ---
Count of elite individuals by case: (213 240 213 213 240 168 328 213 328 240)
Population mean number of elite cases: 2.40
Count of perfect (error zero) individuals by case: (213 240 213 213 240 168 328 213 328 240)
Population mean number of perfect (error zero) cases: 2.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Best program: (integer_dup integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 integer_add in3 print_integer exec_pop (boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ()))
Errors: [0 1 0 0 1 1 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 20
Size: 28
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 7.604
Median total errors in population: 8
Error averages by case: (0.787 0.76 0.787 0.787 0.76 0.832 0.672 0.787 0.672 0.76)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.773
Average program size in population (points): 27.923
Average percent parens in population: 0.287
Minimum age in population: 29.54302978515625
Maximum age in population: 34.89263343811035
Average age in population: 32.94735236740112
Median age in population: 33.19115591049194
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 129
Genome diversity (% unique genomes):	 0.447
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 131
Syntactic diversity (% unique Push programs):	 0.42
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 4894701
--- Timings ---
Current time: 1559314363506 milliseconds
Total Time:          48.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.9 seconds, 76.6%
Fitness Testing:      7.3 seconds, 15.3%
Report:               3.8 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 81                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 16                 
Correct output: 4                   | Program output: 85                 
Correct output: 15                  | Program output: 64                 
Correct output: 20                  | Program output: 100                
Correct output: 13                  | Program output: 65                 
Correct output: 36                  | Program output: 66                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 86                 
Correct output: 1                   | Program output: 26                 
Correct output: 8                   | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 55                 
Correct output: 70                  | Program output: 96                 
Correct output: 25                  | Program output: 51                 
Correct output: 32                  | Program output: 33                 
Correct output: 36                  | Program output: 54                 
Correct output: 22                  | Program output: 90                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: 80                 
Correct output: -27                 | Program output: 14                 
Correct output: -25                 | Program output: 9                  
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: 37                 
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -27                
Correct output: -92                 | Program output: 8                  
Correct output: -100                | Program output: 84                 
Correct output: -62                 | Program output: 81                 
Correct output: -97                 | Program output: 8                  
Correct output: -97                 | Program output: 6                  
Correct output: -100                | Program output: 34                 
Correct output: -91                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: 88                 
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: 72                 
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -23                
Correct output: -94                 | Program output: 43                 
Correct output: 7                   | Program output: 94                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -37                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 13                 
Correct output: -80                 | Program output: -42                
Correct output: -40                 | Program output: 46                 
Correct output: -80                 | Program output: -18                
Correct output: -74                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -46                
Correct output: -58                 | Program output: 22                 
Correct output: -95                 | Program output: 52                 
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: 73                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 99                 
Correct output: -74                 | Program output: -14                
Correct output: -98                 | Program output: 32                 
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: 67                 
Correct output: -69                 | Program output: -52                
Correct output: -84                 | Program output: -8                 
Correct output: -55                 | Program output: 31                 
Correct output: -96                 | Program output: -13                
Correct output: 0                   | Program output: 75                 
Correct output: -83                 | Program output: 65                 
Correct output: -93                 | Program output: 2                  
Correct output: -33                 | Program output: -10                
Correct output: -68                 | Program output: -63                
Correct output: -92                 | Program output: 75                 
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and})
Lexicase best program: (integer_dup integer_max boolean_flush integer_max boolean_flush in1 integer_add in3 print_integer integer_mod boolean_and)
Lexicase best errors: [0 0 0 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 12
Percent parens: 0.083
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 1, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and})
Zero cases best program: (integer_dup integer_max boolean_flush integer_max boolean_flush in1 integer_add in3 print_integer integer_mod boolean_and)
Zero cases best errors: [0 0 0 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 12
Percent parens: 0.083
--- Lexicase Population Statistics ---
Count of elite individuals by case: (952 397 398 399 109 397 109 397 399 272)
Population mean number of elite cases: 3.83
Count of perfect (error zero) individuals by case: (952 397 398 399 109 397 109 397 399 272)
Population mean number of perfect (error zero) cases: 3.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 2, :instruction boolean_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Best program: (boolean_stackdepth integer_max boolean_flush tag_boolean_770 boolean_flush in1 exec_do*while (in3 print_integer integer_mod boolean_and integer_dup_times exec_swap (exec_rot () () (exec_when (boolean_shove)) boolean_invert_first_then_and exec_eq) (integer_lt)))
Errors: [0 0 0 0 1 0 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 19
Size: 27
Percent parens: 0.296
--- Population Statistics ---
Average total errors in population: 6.171
Median total errors in population: 7
Error averages by case: (0.048 0.603 0.602 0.601 0.891 0.603 0.891 0.603 0.601 0.728)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.636
Average program size in population (points): 27.281
Average percent parens in population: 0.271
Minimum age in population: 30.54302978515625
Maximum age in population: 36.30264949798584
Average age in population: 34.41806805181503
Median age in population: 34.50677967071533
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 73
Genome diversity (% unique genomes):	 0.512
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 84
Syntactic diversity (% unique Push programs):	 0.48
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 5053458
--- Timings ---
Current time: 1559314366350 milliseconds
Total Time:          51.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.4 seconds, 77.2%
Fitness Testing:      7.5 seconds, 14.8%
Report:               4.0 seconds,  7.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 635
Test mean error for best: 0.63500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -21                 | Program output: -21                
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 71                 
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -3                 
Correct output: -47                 | Program output: 66                 
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 67                 
Correct output: 0                   | Program output: 80                 
Correct output: 4                   | Program output: 77                 
Correct output: 15                  | Program output: 24                 
Correct output: 20                  | Program output: 44                 
Correct output: 13                  | Program output: 61                 
Correct output: 36                  | Program output: 63                 
Correct output: 13                  | Program output: 62                 
Correct output: 50                  | Program output: 55                 
Correct output: 1                   | Program output: 13                 
Correct output: 7                   | Program output: 67                 
Correct output: 1                   | Program output: 1                  
Correct output: 8                   | Program output: 34                 
Correct output: 0                   | Program output: 95                 
Correct output: 14                  | Program output: 37                 
Correct output: 70                  | Program output: 76                 
Correct output: 25                  | Program output: 25                 
Correct output: 32                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 22                  | Program output: 57                 
Correct output: -57                 | Program output: -32                
Correct output: -79                 | Program output: 87                 
Correct output: -27                 | Program output: -19                
Correct output: -25                 | Program output: 15                 
Correct output: -35                 | Program output: 84                 
Correct output: -58                 | Program output: 45                 
Correct output: 59                  | Program output: 69                 
Correct output: -80                 | Program output: -34                
Correct output: -81                 | Program output: -81                
Correct output: -92                 | Program output: -68                
Correct output: -100                | Program output: 68                 
Correct output: -62                 | Program output: 51                 
Correct output: -97                 | Program output: 11                 
Correct output: -97                 | Program output: 66                 
Correct output: -100                | Program output: -100               
Correct output: -91                 | Program output: -5                 
Correct output: -91                 | Program output: 96                 
Correct output: -50                 | Program output: 18                 
Correct output: -94                 | Program output: 68                 
Correct output: -21                 | Program output: 93                 
Correct output: -70                 | Program output: 26                 
Correct output: -96                 | Program output: 68                 
Correct output: -90                 | Program output: -15                
Correct output: -94                 | Program output: -10                
Correct output: 7                   | Program output: 7                  
Correct output: -99                 | Program output: -98                
Correct output: -54                 | Program output: 21                 
Correct output: -48                 | Program output: 28                 
Correct output: -75                 | Program output: 62                 
Correct output: -82                 | Program output: 33                 
Correct output: -81                 | Program output: -21                
Correct output: -51                 | Program output: -51                
Correct output: -80                 | Program output: -15                
Correct output: -40                 | Program output: -4                 
Correct output: -80                 | Program output: 56                 
Correct output: -74                 | Program output: 63                 
Correct output: -45                 | Program output: 51                 
Correct output: -59                 | Program output: -59                
Correct output: -58                 | Program output: 74                 
Correct output: -95                 | Program output: 95                 
Correct output: 17                  | Program output: 74                 
Correct output: -57                 | Program output: -57                
Correct output: -98                 | Program output: 22                 
Correct output: -100                | Program output: -100               
Correct output: -74                 | Program output: 4                  
Correct output: -98                 | Program output: 51                 
Correct output: -67                 | Program output: 68                 
Correct output: -52                 | Program output: -2                 
Correct output: -69                 | Program output: -67                
Correct output: -84                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -96                 | Program output: -96                
Correct output: 0                   | Program output: 73                 
Correct output: -83                 | Program output: -18                
Correct output: -93                 | Program output: -93                
Correct output: -33                 | Program output: -33                
Correct output: -68                 | Program output: 91                 
Correct output: -92                 | Program output: -51                
Correct output: -70                 | Program output: 76                 
Correct output: -9                  | Program output: 20                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Lexicase best program: (integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in2 print_integer exec_pop (boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ()))
Lexicase best errors: [1 0 1 1 1 1 0 0 1 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 25
Percent parens: 0.320
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Zero cases best program: (integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in2 print_integer exec_pop (boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ()))
Zero cases best errors: [1 0 1 1 1 1 0 0 1 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 25
Percent parens: 0.320
--- Lexicase Population Statistics ---
Count of elite individuals by case: (636 207 3 3 106 3 207 207 106 638)
Population mean number of elite cases: 2.12
Count of perfect (error zero) individuals by case: (636 207 3 3 106 3 207 207 106 638)
Population mean number of perfect (error zero) cases: 2.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Best program: (integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in2 print_integer exec_pop (boolean_and integer_dup_times exec_swap (exec_rot (exec_when (in1) integer_gte exec_eq) (integer_lt) ()) ()))
Errors: [1 0 1 1 1 1 0 0 1 1]
Total: 7
Mean: 0.7
Genome size: 17
Size: 25
Percent parens: 0.320
--- Population Statistics ---
Average total errors in population: 7.884
Median total errors in population: 8
Error averages by case: (0.364 0.793 0.997 0.997 0.894 0.997 0.793 0.793 0.894 0.362)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 18.571
Average program size in population (points): 25.599
Average percent parens in population: 0.264
Minimum age in population: 32.29393196105957
Maximum age in population: 38.0864634513855
Average age in population: 35.94109719371796
Median age in population: 35.96337628364563
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 108
Genome diversity (% unique genomes):	 0.49
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 113
Syntactic diversity (% unique Push programs):	 0.463
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 5217624
--- Timings ---
Current time: 1559314368812 milliseconds
Total Time:          53.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.5 seconds, 77.6%
Fitness Testing:      7.7 seconds, 14.5%
Report:               4.1 seconds,  7.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 47                 
Correct output: 0                   | Program output: 51                 
Correct output: 4                   | Program output: 50                 
Correct output: 15                  | Program output: 77                 
Correct output: 20                  | Program output: 20                 
Correct output: 13                  | Program output: 13                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 91                 
Correct output: 50                  | Program output: 97                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 42                 
Correct output: 8                   | Program output: 58                 
Correct output: 0                   | Program output: 94                 
Correct output: 14                  | Program output: 80                 
Correct output: 70                  | Program output: 70                 
Correct output: 25                  | Program output: 77                 
Correct output: 32                  | Program output: 83                 
Correct output: 36                  | Program output: 85                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 70                 
Correct output: -79                 | Program output: 29                 
Correct output: -27                 | Program output: 98                 
Correct output: -25                 | Program output: 26                 
Correct output: -35                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: 59                  | Program output: 100                
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -60                
Correct output: -92                 | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: -62                
Correct output: -97                 | Program output: -55                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -85                
Correct output: -91                 | Program output: -8                 
Correct output: -91                 | Program output: 4                  
Correct output: -50                 | Program output: 85                 
Correct output: -94                 | Program output: 1                  
Correct output: -21                 | Program output: -4                 
Correct output: -70                 | Program output: 92                 
Correct output: -96                 | Program output: 95                 
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -13                
Correct output: 7                   | Program output: 98                 
Correct output: -99                 | Program output: 48                 
Correct output: -54                 | Program output: 0                  
Correct output: -48                 | Program output: -28                
Correct output: -75                 | Program output: -70                
Correct output: -82                 | Program output: 46                 
Correct output: -81                 | Program output: 0                  
Correct output: -51                 | Program output: -26                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -80                 | Program output: 7                  
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: 37                 
Correct output: -59                 | Program output: 98                 
Correct output: -58                 | Program output: -58                
Correct output: -95                 | Program output: -95                
Correct output: 17                  | Program output: 32                 
Correct output: -57                 | Program output: -42                
Correct output: -98                 | Program output: -93                
Correct output: -100                | Program output: 88                 
Correct output: -74                 | Program output: -74                
Correct output: -98                 | Program output: 1                  
Correct output: -67                 | Program output: -49                
Correct output: -52                 | Program output: 53                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: 39                 
Correct output: -55                 | Program output: -45                
Correct output: -96                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: 85                 
Correct output: -33                 | Program output: -24                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 86                 
Correct output: -9                  | Program output: 74                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Lexicase best program: (integer_dup integer_dup integer_dup integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 integer_add in4 print_integer exec_pop (boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ()))
Lexicase best errors: [1 0 1 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 30
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Zero cases best program: (integer_dup integer_dup integer_dup integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 integer_add in4 print_integer exec_pop (boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ()))
Zero cases best errors: [1 0 1 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 30
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (288 672 186 280 288 206 774 960 206 187)
Population mean number of elite cases: 4.05
Count of perfect (error zero) individuals by case: (288 672 186 280 288 206 774 960 206 187)
Population mean number of perfect (error zero) cases: 4.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Best program: (integer_dup integer_dup integer_dup integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 integer_add in4 print_integer exec_pop (boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ()))
Errors: [1 0 1 1 1 0 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 22
Size: 30
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 5.953
Median total errors in population: 6
Error averages by case: (0.712 0.328 0.814 0.72 0.712 0.794 0.226 0.04 0.794 0.813)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 18.843
Average program size in population (points): 26.166
Average percent parens in population: 0.275
Minimum age in population: 33.99943399429321
Maximum age in population: 39.53209900856018
Average age in population: 37.42967633962631
Median age in population: 37.50215113162994
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 107
Genome diversity (% unique genomes):	 0.461
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 114
Syntactic diversity (% unique Push programs):	 0.426
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 5367058
--- Timings ---
Current time: 1559314370809 milliseconds
Total Time:          55.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.2 seconds, 77.9%
Fitness Testing:      7.9 seconds, 14.3%
Report:               4.3 seconds,  7.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 81                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 16                 
Correct output: 4                   | Program output: 85                 
Correct output: 15                  | Program output: 64                 
Correct output: 20                  | Program output: 100                
Correct output: 13                  | Program output: 65                 
Correct output: 36                  | Program output: 66                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 86                 
Correct output: 1                   | Program output: 26                 
Correct output: 8                   | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 55                 
Correct output: 70                  | Program output: 96                 
Correct output: 25                  | Program output: 51                 
Correct output: 32                  | Program output: 33                 
Correct output: 36                  | Program output: 54                 
Correct output: 22                  | Program output: 90                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: 80                 
Correct output: -27                 | Program output: 14                 
Correct output: -25                 | Program output: 9                  
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: 37                 
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -27                
Correct output: -92                 | Program output: 8                  
Correct output: -100                | Program output: 84                 
Correct output: -62                 | Program output: 81                 
Correct output: -97                 | Program output: 8                  
Correct output: -97                 | Program output: 6                  
Correct output: -100                | Program output: 34                 
Correct output: -91                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: 88                 
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: 72                 
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -23                
Correct output: -94                 | Program output: 43                 
Correct output: 7                   | Program output: 94                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -37                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 13                 
Correct output: -80                 | Program output: -42                
Correct output: -40                 | Program output: 46                 
Correct output: -80                 | Program output: -18                
Correct output: -74                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -46                
Correct output: -58                 | Program output: 22                 
Correct output: -95                 | Program output: 52                 
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: 73                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 99                 
Correct output: -74                 | Program output: -14                
Correct output: -98                 | Program output: 32                 
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: 67                 
Correct output: -69                 | Program output: -52                
Correct output: -84                 | Program output: -8                 
Correct output: -55                 | Program output: 31                 
Correct output: -96                 | Program output: -13                
Correct output: 0                   | Program output: 75                 
Correct output: -83                 | Program output: 65                 
Correct output: -93                 | Program output: 2                  
Correct output: -33                 | Program output: -10                
Correct output: -68                 | Program output: -63                
Correct output: -92                 | Program output: 75                 
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Lexicase best program: (integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 integer_add in3 print_integer integer_mod boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ())
Lexicase best errors: [0 0 1 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 26
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Zero cases best program: (integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 integer_add in3 print_integer integer_mod boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ())
Zero cases best errors: [0 0 1 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 26
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (219 219 330 330 219 250 219 330 219 959)
Population mean number of elite cases: 3.29
Count of perfect (error zero) individuals by case: (219 219 330 330 219 250 219 330 219 959)
Population mean number of perfect (error zero) cases: 3.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 2, :instruction integer_lt})
Best program: (integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 integer_add in3 print_integer boolean_invert_first_then_and boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ())
Errors: [0 0 1 1 0 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 19
Size: 26
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 6.706
Median total errors in population: 6
Error averages by case: (0.781 0.781 0.67 0.67 0.781 0.75 0.781 0.67 0.781 0.041)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.229
Average program size in population (points): 26.497
Average percent parens in population: 0.269
Minimum age in population: 34.99943399429321
Maximum age in population: 40.79248422384262
Average age in population: 38.87523971772194
Median age in population: 38.9651418030262
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 51
Genome diversity (% unique genomes):	 0.528
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.487
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 5525240
--- Timings ---
Current time: 1559314373312 milliseconds
Total Time:          57.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.3 seconds, 78.3%
Fitness Testing:      8.1 seconds, 14.0%
Report:               4.4 seconds,  7.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 47                 
Correct output: 0                   | Program output: 51                 
Correct output: 4                   | Program output: 50                 
Correct output: 15                  | Program output: 77                 
Correct output: 20                  | Program output: 20                 
Correct output: 13                  | Program output: 13                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 91                 
Correct output: 50                  | Program output: 97                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 42                 
Correct output: 8                   | Program output: 58                 
Correct output: 0                   | Program output: 94                 
Correct output: 14                  | Program output: 80                 
Correct output: 70                  | Program output: 70                 
Correct output: 25                  | Program output: 77                 
Correct output: 32                  | Program output: 83                 
Correct output: 36                  | Program output: 85                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 70                 
Correct output: -79                 | Program output: 29                 
Correct output: -27                 | Program output: 98                 
Correct output: -25                 | Program output: 26                 
Correct output: -35                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: 59                  | Program output: 100                
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -60                
Correct output: -92                 | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: -62                
Correct output: -97                 | Program output: -55                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -85                
Correct output: -91                 | Program output: -8                 
Correct output: -91                 | Program output: 4                  
Correct output: -50                 | Program output: 85                 
Correct output: -94                 | Program output: 1                  
Correct output: -21                 | Program output: -4                 
Correct output: -70                 | Program output: 92                 
Correct output: -96                 | Program output: 95                 
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -13                
Correct output: 7                   | Program output: 98                 
Correct output: -99                 | Program output: 48                 
Correct output: -54                 | Program output: 0                  
Correct output: -48                 | Program output: -28                
Correct output: -75                 | Program output: -70                
Correct output: -82                 | Program output: 46                 
Correct output: -81                 | Program output: 0                  
Correct output: -51                 | Program output: -26                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -80                 | Program output: 7                  
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: 37                 
Correct output: -59                 | Program output: 98                 
Correct output: -58                 | Program output: -58                
Correct output: -95                 | Program output: -95                
Correct output: 17                  | Program output: 32                 
Correct output: -57                 | Program output: -42                
Correct output: -98                 | Program output: -93                
Correct output: -100                | Program output: 88                 
Correct output: -74                 | Program output: -74                
Correct output: -98                 | Program output: 1                  
Correct output: -67                 | Program output: -49                
Correct output: -52                 | Program output: 53                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: 39                 
Correct output: -55                 | Program output: -45                
Correct output: -96                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: 85                 
Correct output: -33                 | Program output: -24                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 86                 
Correct output: -9                  | Program output: 74                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Lexicase best program: (integer_dup integer_dup integer_dup integer_dup integer_max integer_add tag_boolean_770 boolean_flush in1 integer_add in4 print_integer exec_pop (boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ()))
Lexicase best errors: [0 1 1 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 30
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Zero cases best program: (integer_dup integer_dup integer_dup integer_dup integer_max integer_add tag_boolean_770 boolean_flush in1 integer_add in4 print_integer exec_pop (boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ()))
Zero cases best errors: [0 1 1 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 30
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (951 534 534 316 316 315 101 101 534 316)
Population mean number of elite cases: 4.02
Count of perfect (error zero) individuals by case: (951 534 534 316 316 315 101 101 534 316)
Population mean number of perfect (error zero) cases: 4.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_k} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Best program: (integer_dup integer_dup integer_div integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 exec_k (in4 print_integer exec_pop (boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ())) ())
Errors: [0 1 1 0 0 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 22
Size: 32
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 5.982
Median total errors in population: 6
Error averages by case: (0.049 0.466 0.466 0.684 0.684 0.685 0.899 0.899 0.466 0.684)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 18.934
Average program size in population (points): 25.719
Average percent parens in population: 0.252
Minimum age in population: 37.29999876022339
Maximum age in population: 42.36899092793465
Average age in population: 40.36342684230208
Median age in population: 40.4342794418335
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 30
Genome diversity (% unique genomes):	 0.513
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.47
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 5699280
--- Timings ---
Current time: 1559314375867 milliseconds
Total Time:          60.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        47.6 seconds, 78.6%
Fitness Testing:      8.3 seconds, 13.7%
Report:               4.6 seconds,  7.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 33                 
Correct output: 13                  | Program output: 66                 
Correct output: 36                  | Program output: 49                 
Correct output: 13                  | Program output: 85                 
Correct output: 50                  | Program output: 65                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 15                 
Correct output: 1                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 32                 
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 82                 
Correct output: 25                  | Program output: 83                 
Correct output: 32                  | Program output: 56                 
Correct output: 36                  | Program output: 59                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 65                 
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: 48                 
Correct output: -58                 | Program output: 5                  
Correct output: 59                  | Program output: 91                 
Correct output: -80                 | Program output: 43                 
Correct output: -81                 | Program output: 20                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -53                
Correct output: -62                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -7                 
Correct output: -100                | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -28                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 12                 
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: 59                 
Correct output: -96                 | Program output: -78                
Correct output: -90                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 8                  
Correct output: -99                 | Program output: 36                 
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -41                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -8                 
Correct output: -81                 | Program output: -64                
Correct output: -51                 | Program output: -45                
Correct output: -80                 | Program output: 39                 
Correct output: -40                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: 100                
Correct output: -45                 | Program output: 71                 
Correct output: -59                 | Program output: 75                 
Correct output: -58                 | Program output: 1                  
Correct output: -95                 | Program output: 57                 
Correct output: 17                  | Program output: 49                 
Correct output: -57                 | Program output: -13                
Correct output: -98                 | Program output: -82                
Correct output: -100                | Program output: -3                 
Correct output: -74                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: 81                 
Correct output: -96                 | Program output: -73                
Correct output: 0                   | Program output: 13                 
Correct output: -83                 | Program output: -82                
Correct output: -93                 | Program output: -52                
Correct output: -33                 | Program output: -8                 
Correct output: -68                 | Program output: -25                
Correct output: -92                 | Program output: 48                 
Correct output: -70                 | Program output: -46                
Correct output: -9                  | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 3, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when})
Lexicase best program: (integer_dup integer_dup integer_sub integer_dup integer_max integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 integer_add print_integer print_integer integer_mod boolean_and integer_dup_times exec_swap (exec_rot (exec_when ()) () ()) ())
Lexicase best errors: [0 1 0 1 1 0 0 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 27
Percent parens: 0.259
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 3, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when})
Zero cases best program: (integer_dup integer_dup integer_sub integer_dup integer_max integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 integer_add print_integer print_integer integer_mod boolean_and integer_dup_times exec_swap (exec_rot (exec_when ()) () ()) ())
Zero cases best errors: [0 1 0 1 1 0 0 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 27
Percent parens: 0.259
--- Lexicase Population Statistics ---
Count of elite individuals by case: (240 408 240 1000 1000 954 240 408 408 1000)
Population mean number of elite cases: 5.90
Count of perfect (error zero) individuals by case: (240 408 240 0 0 954 240 408 408 0)
Population mean number of perfect (error zero) cases: 2.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Best program: (integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 integer_add integer_min print_integer integer_mod boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ())
Errors: [0 1 0 1 1 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 19
Size: 26
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 7.102
Median total errors in population: 6
Error averages by case: (0.76 0.592 0.76 1.0 1.0 0.046 0.76 0.592 0.592 1.0)
Error minima by case: (0 0 0 1 1 0 0 0 0 1)
Average genome size in population (length): 19.487
Average program size in population (points): 26.534
Average percent parens in population: 0.256
Minimum age in population: 38.4336404800415
Maximum age in population: 43.86494752764702
Average age in population: 41.86837811164558
Median age in population: 41.96290551126003
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 38
Genome diversity (% unique genomes):	 0.556
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.515
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 5864064
--- Timings ---
Current time: 1559314378119 milliseconds
Total Time:          62.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        49.5 seconds, 78.8%
Fitness Testing:      8.5 seconds, 13.5%
Report:               4.7 seconds,  7.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 33                 
Correct output: 13                  | Program output: 66                 
Correct output: 36                  | Program output: 49                 
Correct output: 13                  | Program output: 85                 
Correct output: 50                  | Program output: 65                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 15                 
Correct output: 1                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 32                 
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 82                 
Correct output: 25                  | Program output: 83                 
Correct output: 32                  | Program output: 56                 
Correct output: 36                  | Program output: 59                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 65                 
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: 48                 
Correct output: -58                 | Program output: 5                  
Correct output: 59                  | Program output: 91                 
Correct output: -80                 | Program output: 43                 
Correct output: -81                 | Program output: 20                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -53                
Correct output: -62                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -7                 
Correct output: -100                | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -28                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 12                 
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: 59                 
Correct output: -96                 | Program output: -78                
Correct output: -90                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 8                  
Correct output: -99                 | Program output: 36                 
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -41                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -8                 
Correct output: -81                 | Program output: -64                
Correct output: -51                 | Program output: -45                
Correct output: -80                 | Program output: 39                 
Correct output: -40                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: 100                
Correct output: -45                 | Program output: 71                 
Correct output: -59                 | Program output: 75                 
Correct output: -58                 | Program output: 1                  
Correct output: -95                 | Program output: 57                 
Correct output: 17                  | Program output: 49                 
Correct output: -57                 | Program output: -13                
Correct output: -98                 | Program output: -82                
Correct output: -100                | Program output: -3                 
Correct output: -74                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: 81                 
Correct output: -96                 | Program output: -73                
Correct output: 0                   | Program output: 13                 
Correct output: -83                 | Program output: -82                
Correct output: -93                 | Program output: -52                
Correct output: -33                 | Program output: -8                 
Correct output: -68                 | Program output: -25                
Correct output: -92                 | Program output: 48                 
Correct output: -70                 | Program output: -46                
Correct output: -9                  | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Lexicase best program: (integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 integer_add exec_y_when_autoconstructing (print_integer integer_mod boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ()))
Lexicase best errors: [1 1 0 0 0 1 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 27
Percent parens: 0.296
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Zero cases best program: (integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 integer_add exec_y_when_autoconstructing (print_integer integer_mod boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ()))
Zero cases best errors: [1 1 0 0 0 1 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 27
Percent parens: 0.296
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 478 478 478 470 1 1 482 479)
Population mean number of elite cases: 4.87
Count of perfect (error zero) individuals by case: (0 0 478 478 478 470 1 1 482 479)
Population mean number of perfect (error zero) cases: 2.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 1, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Best program: (integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 integer_add exec_y_when_autoconstructing (print_integer exec_pop (boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ())))
Errors: [1 1 0 0 0 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 19
Size: 28
Percent parens: 0.321
--- Population Statistics ---
Average total errors in population: 7.133
Median total errors in population: 9
Error averages by case: (1.0 1.0 0.522 0.522 0.522 0.53 0.999 0.999 0.518 0.521)
Error minima by case: (1 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.24
Average program size in population (points): 27.762
Average percent parens in population: 0.266
Minimum age in population: 40.3223934173584
Maximum age in population: 45.28633116185665
Average age in population: 43.35302471532673
Median age in population: 43.44559684023261
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 66
Genome diversity (% unique genomes):	 0.522
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.473
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 6030761
--- Timings ---
Current time: 1559314380417 milliseconds
Total Time:          65.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.4 seconds, 79.1%
Fitness Testing:      8.7 seconds, 13.3%
Report:               4.8 seconds,  7.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 47                 
Correct output: 0                   | Program output: 51                 
Correct output: 4                   | Program output: 50                 
Correct output: 15                  | Program output: 77                 
Correct output: 20                  | Program output: 20                 
Correct output: 13                  | Program output: 13                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 91                 
Correct output: 50                  | Program output: 97                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 42                 
Correct output: 8                   | Program output: 58                 
Correct output: 0                   | Program output: 94                 
Correct output: 14                  | Program output: 80                 
Correct output: 70                  | Program output: 70                 
Correct output: 25                  | Program output: 77                 
Correct output: 32                  | Program output: 83                 
Correct output: 36                  | Program output: 85                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 70                 
Correct output: -79                 | Program output: 29                 
Correct output: -27                 | Program output: 98                 
Correct output: -25                 | Program output: 26                 
Correct output: -35                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: 59                  | Program output: 100                
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -60                
Correct output: -92                 | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: -62                
Correct output: -97                 | Program output: -55                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -85                
Correct output: -91                 | Program output: -8                 
Correct output: -91                 | Program output: 4                  
Correct output: -50                 | Program output: 85                 
Correct output: -94                 | Program output: 1                  
Correct output: -21                 | Program output: -4                 
Correct output: -70                 | Program output: 92                 
Correct output: -96                 | Program output: 95                 
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -13                
Correct output: 7                   | Program output: 98                 
Correct output: -99                 | Program output: 48                 
Correct output: -54                 | Program output: 0                  
Correct output: -48                 | Program output: -28                
Correct output: -75                 | Program output: -70                
Correct output: -82                 | Program output: 46                 
Correct output: -81                 | Program output: 0                  
Correct output: -51                 | Program output: -26                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -80                 | Program output: 7                  
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: 37                 
Correct output: -59                 | Program output: 98                 
Correct output: -58                 | Program output: -58                
Correct output: -95                 | Program output: -95                
Correct output: 17                  | Program output: 32                 
Correct output: -57                 | Program output: -42                
Correct output: -98                 | Program output: -93                
Correct output: -100                | Program output: 88                 
Correct output: -74                 | Program output: -74                
Correct output: -98                 | Program output: 1                  
Correct output: -67                 | Program output: -49                
Correct output: -52                 | Program output: 53                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: 39                 
Correct output: -55                 | Program output: -45                
Correct output: -96                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: 85                 
Correct output: -33                 | Program output: -24                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 86                 
Correct output: -9                  | Program output: 74                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_lt})
Lexicase best program: (integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in3 integer_add exec_y_when_autoconstructing (print_integer integer_mod boolean_and integer_dup_times exec_swap (integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq integer_lt) ()) ()) ()))
Lexicase best errors: [1 1 1 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 31
Percent parens: 0.323
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_lt})
Zero cases best program: (integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in3 integer_add exec_y_when_autoconstructing (print_integer integer_mod boolean_and integer_dup_times exec_swap (integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq integer_lt) ()) ()) ()))
Zero cases best errors: [1 1 1 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 31
Percent parens: 0.323
--- Lexicase Population Statistics ---
Count of elite individuals by case: (133 133 133 590 1000 230 230 232 953 1000)
Population mean number of elite cases: 4.63
Count of perfect (error zero) individuals by case: (133 133 133 590 0 230 230 232 953 0)
Population mean number of perfect (error zero) cases: 2.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Best program: (integer_dup integer_max integer_dup integer_dup integer_dup integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 integer_add in4 print_integer exec_pop (boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ()))
Errors: [0 0 0 1 1 1 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 24
Size: 32
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.366
Median total errors in population: 8
Error averages by case: (0.867 0.867 0.867 0.41 1.0 0.77 0.77 0.768 0.047 1.0)
Error minima by case: (0 0 0 0 1 0 0 0 0 1)
Average genome size in population (length): 20.246
Average program size in population (points): 28.433
Average percent parens in population: 0.284
Minimum age in population: 41.3223934173584
Maximum age in population: 46.94228293001652
Average age in population: 45.06680534476787
Median age in population: 45.07244365662336
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 177
Genome diversity (% unique genomes):	 0.479
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 177
Syntactic diversity (% unique Push programs):	 0.439
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 6218741
--- Timings ---
Current time: 1559314382453 milliseconds
Total Time:          67.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.1 seconds, 79.2%
Fitness Testing:      8.9 seconds, 13.3%
Report:               5.0 seconds,  7.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 47                 
Correct output: 0                   | Program output: 51                 
Correct output: 4                   | Program output: 50                 
Correct output: 15                  | Program output: 77                 
Correct output: 20                  | Program output: 20                 
Correct output: 13                  | Program output: 13                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 91                 
Correct output: 50                  | Program output: 97                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 42                 
Correct output: 8                   | Program output: 58                 
Correct output: 0                   | Program output: 94                 
Correct output: 14                  | Program output: 80                 
Correct output: 70                  | Program output: 70                 
Correct output: 25                  | Program output: 77                 
Correct output: 32                  | Program output: 83                 
Correct output: 36                  | Program output: 85                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 70                 
Correct output: -79                 | Program output: 29                 
Correct output: -27                 | Program output: 98                 
Correct output: -25                 | Program output: 26                 
Correct output: -35                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: 59                  | Program output: 100                
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -60                
Correct output: -92                 | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: -62                
Correct output: -97                 | Program output: -55                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -85                
Correct output: -91                 | Program output: -8                 
Correct output: -91                 | Program output: 4                  
Correct output: -50                 | Program output: 85                 
Correct output: -94                 | Program output: 1                  
Correct output: -21                 | Program output: -4                 
Correct output: -70                 | Program output: 92                 
Correct output: -96                 | Program output: 95                 
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -13                
Correct output: 7                   | Program output: 98                 
Correct output: -99                 | Program output: 48                 
Correct output: -54                 | Program output: 0                  
Correct output: -48                 | Program output: -28                
Correct output: -75                 | Program output: -70                
Correct output: -82                 | Program output: 46                 
Correct output: -81                 | Program output: 0                  
Correct output: -51                 | Program output: -26                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -80                 | Program output: 7                  
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: 37                 
Correct output: -59                 | Program output: 98                 
Correct output: -58                 | Program output: -58                
Correct output: -95                 | Program output: -95                
Correct output: 17                  | Program output: 32                 
Correct output: -57                 | Program output: -42                
Correct output: -98                 | Program output: -93                
Correct output: -100                | Program output: 88                 
Correct output: -74                 | Program output: -74                
Correct output: -98                 | Program output: 1                  
Correct output: -67                 | Program output: -49                
Correct output: -52                 | Program output: 53                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: 39                 
Correct output: -55                 | Program output: -45                
Correct output: -96                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: 85                 
Correct output: -33                 | Program output: -24                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 86                 
Correct output: -9                  | Program output: 74                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Lexicase best program: (integer_dup integer_dup integer_dup integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 integer_lt in4 print_integer exec_pop (boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ()))
Lexicase best errors: [0 1 0 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 30
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_lt} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Zero cases best program: (integer_dup integer_dup integer_dup integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 integer_lt in4 print_integer exec_pop (boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ()))
Zero cases best errors: [0 1 0 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 30
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (957 136 407 1000 407 1000 414 135 821 407)
Population mean number of elite cases: 5.68
Count of perfect (error zero) individuals by case: (957 136 407 0 407 0 414 135 821 407)
Population mean number of perfect (error zero) cases: 3.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Best program: (integer_dup integer_dup integer_dup integer_div integer_max integer_add tag_boolean_770 boolean_flush in1 integer_add in4 print_integer exec_pop (boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (exec_s_when_autoconstructing () (boolean_invert_first_then_and exec_eq) (integer_lt))) ()) ()))
Errors: [0 1 0 1 0 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 22
Size: 33
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 6.316
Median total errors in population: 7
Error averages by case: (0.043 0.864 0.593 1.0 0.593 1.0 0.586 0.865 0.179 0.593)
Error minima by case: (0 0 0 1 0 1 0 0 0 0)
Average genome size in population (length): 20.958
Average program size in population (points): 29.607
Average percent parens in population: 0.287
Minimum age in population: 43.77750996500254
Maximum age in population: 48.26019950769842
Average age in population: 46.62842498771101
Median age in population: 46.66466650739312
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 240
Genome diversity (% unique genomes):	 0.484
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 244
Syntactic diversity (% unique Push programs):	 0.455
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 6399193
--- Timings ---
Current time: 1559314384821 milliseconds
Total Time:          69.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.1 seconds, 79.4%
Fitness Testing:      9.1 seconds, 13.1%
Report:               5.1 seconds,  7.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 81                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 16                 
Correct output: 4                   | Program output: 85                 
Correct output: 15                  | Program output: 64                 
Correct output: 20                  | Program output: 100                
Correct output: 13                  | Program output: 65                 
Correct output: 36                  | Program output: 66                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 86                 
Correct output: 1                   | Program output: 26                 
Correct output: 8                   | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 55                 
Correct output: 70                  | Program output: 96                 
Correct output: 25                  | Program output: 51                 
Correct output: 32                  | Program output: 33                 
Correct output: 36                  | Program output: 54                 
Correct output: 22                  | Program output: 90                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: 80                 
Correct output: -27                 | Program output: 14                 
Correct output: -25                 | Program output: 9                  
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: 37                 
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -27                
Correct output: -92                 | Program output: 8                  
Correct output: -100                | Program output: 84                 
Correct output: -62                 | Program output: 81                 
Correct output: -97                 | Program output: 8                  
Correct output: -97                 | Program output: 6                  
Correct output: -100                | Program output: 34                 
Correct output: -91                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: 88                 
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: 72                 
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -23                
Correct output: -94                 | Program output: 43                 
Correct output: 7                   | Program output: 94                 
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -37                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: 13                 
Correct output: -80                 | Program output: -42                
Correct output: -40                 | Program output: 46                 
Correct output: -80                 | Program output: -18                
Correct output: -74                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -46                
Correct output: -58                 | Program output: 22                 
Correct output: -95                 | Program output: 52                 
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: 73                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: 99                 
Correct output: -74                 | Program output: -14                
Correct output: -98                 | Program output: 32                 
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: 67                 
Correct output: -69                 | Program output: -52                
Correct output: -84                 | Program output: -8                 
Correct output: -55                 | Program output: 31                 
Correct output: -96                 | Program output: -13                
Correct output: 0                   | Program output: 75                 
Correct output: -83                 | Program output: 65                 
Correct output: -93                 | Program output: 2                  
Correct output: -33                 | Program output: -10                
Correct output: -68                 | Program output: -63                
Correct output: -92                 | Program output: 75                 
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_lt})
Lexicase best program: (integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in3 integer_add exec_y_when_autoconstructing (print_integer integer_mod boolean_and integer_dup_times exec_swap (integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq integer_lt) ()) ()) ()))
Lexicase best errors: [0 0 1 1 0 0 1 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 31
Percent parens: 0.323
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_lt})
Zero cases best program: (integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in3 integer_add exec_y_when_autoconstructing (print_integer integer_mod boolean_and integer_dup_times exec_swap (integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq integer_lt) ()) ()) ()))
Zero cases best errors: [0 0 1 1 0 0 1 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 31
Percent parens: 0.323
--- Lexicase Population Statistics ---
Count of elite individuals by case: (169 952 548 1000 169 169 235 235 1000 548)
Population mean number of elite cases: 5.03
Count of perfect (error zero) individuals by case: (169 952 548 0 169 169 235 235 0 548)
Population mean number of perfect (error zero) cases: 3.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_lt})
Best program: (integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in3 integer_add exec_y_when_autoconstructing (print_integer integer_mod boolean_and integer_dup_times exec_swap (integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq integer_lt) ()) ()) ()))
Errors: [0 0 1 1 0 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 21
Size: 31
Percent parens: 0.323
--- Population Statistics ---
Average total errors in population: 6.975
Median total errors in population: 7
Error averages by case: (0.831 0.048 0.452 1.0 0.831 0.831 0.765 0.765 1.0 0.452)
Error minima by case: (0 0 0 1 0 0 0 0 1 0)
Average genome size in population (length): 20.756
Average program size in population (points): 28.802
Average percent parens in population: 0.272
Minimum age in population: 44.77750996500254
Maximum age in population: 49.86708482727408
Average age in population: 48.00553811465111
Median age in population: 48.07507166685537
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 70
Genome diversity (% unique genomes):	 0.56
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.522
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 6567771
--- Timings ---
Current time: 1559314387452 milliseconds
Total Time:          72.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.4 seconds, 79.6%
Fitness Testing:      9.3 seconds, 12.9%
Report:               5.2 seconds,  7.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 47                 
Correct output: 0                   | Program output: 51                 
Correct output: 4                   | Program output: 50                 
Correct output: 15                  | Program output: 77                 
Correct output: 20                  | Program output: 20                 
Correct output: 13                  | Program output: 13                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 91                 
Correct output: 50                  | Program output: 97                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 42                 
Correct output: 8                   | Program output: 58                 
Correct output: 0                   | Program output: 94                 
Correct output: 14                  | Program output: 80                 
Correct output: 70                  | Program output: 70                 
Correct output: 25                  | Program output: 77                 
Correct output: 32                  | Program output: 83                 
Correct output: 36                  | Program output: 85                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 70                 
Correct output: -79                 | Program output: 29                 
Correct output: -27                 | Program output: 98                 
Correct output: -25                 | Program output: 26                 
Correct output: -35                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: 59                  | Program output: 100                
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -60                
Correct output: -92                 | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: -62                
Correct output: -97                 | Program output: -55                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -85                
Correct output: -91                 | Program output: -8                 
Correct output: -91                 | Program output: 4                  
Correct output: -50                 | Program output: 85                 
Correct output: -94                 | Program output: 1                  
Correct output: -21                 | Program output: -4                 
Correct output: -70                 | Program output: 92                 
Correct output: -96                 | Program output: 95                 
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -13                
Correct output: 7                   | Program output: 98                 
Correct output: -99                 | Program output: 48                 
Correct output: -54                 | Program output: 0                  
Correct output: -48                 | Program output: -28                
Correct output: -75                 | Program output: -70                
Correct output: -82                 | Program output: 46                 
Correct output: -81                 | Program output: 0                  
Correct output: -51                 | Program output: -26                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -80                 | Program output: 7                  
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: 37                 
Correct output: -59                 | Program output: 98                 
Correct output: -58                 | Program output: -58                
Correct output: -95                 | Program output: -95                
Correct output: 17                  | Program output: 32                 
Correct output: -57                 | Program output: -42                
Correct output: -98                 | Program output: -93                
Correct output: -100                | Program output: 88                 
Correct output: -74                 | Program output: -74                
Correct output: -98                 | Program output: 1                  
Correct output: -67                 | Program output: -49                
Correct output: -52                 | Program output: 53                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: 39                 
Correct output: -55                 | Program output: -45                
Correct output: -96                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: 85                 
Correct output: -33                 | Program output: -24                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 86                 
Correct output: -9                  | Program output: 74                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Lexicase best program: (integer_dup integer_dup integer_dup integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 integer_add in4 print_integer exec_pop (boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ()))
Lexicase best errors: [0 0 0 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 30
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_lt})
Zero cases best program: (integer_dup integer_dup integer_dup integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush in1 integer_add in4 print_integer exec_pop (boolean_and integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (integer_lt)) ()))
Zero cases best errors: [0 0 0 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 30
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (941 264 941 1000 408 1000 264 941 264 269)
Population mean number of elite cases: 6.29
Count of perfect (error zero) individuals by case: (941 264 941 0 408 0 264 941 264 269)
Population mean number of perfect (error zero) cases: 4.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt})
Best program: (integer_dup integer_dup integer_dup integer_dup integer_max boolean_flush tag_boolean_770 boolean_flush print_boolean integer_add in4 print_integer exec_pop (integer_add integer_dup_times exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq integer_lt) ()) ()))
Errors: [0 0 0 1 1 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 22
Size: 30
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 5.708
Median total errors in population: 6
Error averages by case: (0.059 0.736 0.059 1.0 0.592 1.0 0.736 0.059 0.736 0.731)
Error minima by case: (0 0 0 1 0 1 0 0 0 0)
Average genome size in population (length): 20.618
Average program size in population (points): 29.094
Average percent parens in population: 0.284
Minimum age in population: 46.8009689450264
Maximum age in population: 51.48829114018008
Average age in population: 49.58071429248434
Median age in population: 49.6342691089958
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 133
Genome diversity (% unique genomes):	 0.584
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 142
Syntactic diversity (% unique Push programs):	 0.545
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 6753345
--- Timings ---
Current time: 1559314389604 milliseconds
Total Time:          74.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.2 seconds, 79.7%
Fitness Testing:      9.5 seconds, 12.9%
Report:               5.4 seconds,  7.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: 2                  
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 33                 
Correct output: 13                  | Program output: 66                 
Correct output: 36                  | Program output: 49                 
Correct output: 13                  | Program output: 85                 
Correct output: 50                  | Program output: 65                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 15                 
Correct output: 1                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 32                 
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 82                 
Correct output: 25                  | Program output: 83                 
Correct output: 32                  | Program output: 56                 
Correct output: 36                  | Program output: 59                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 65                 
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: 48                 
Correct output: -58                 | Program output: 5                  
Correct output: 59                  | Program output: 91                 
Correct output: -80                 | Program output: 43                 
Correct output: -81                 | Program output: 20                 
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -53                
Correct output: -62                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -7                 
Correct output: -100                | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -28                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 12                 
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: 59                 
Correct output: -96                 | Program output: -78                
Correct output: -90                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 8                  
Correct output: -99                 | Program output: 36                 
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -41                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -8                 
Correct output: -81                 | Program output: -64                
Correct output: -51                 | Program output: -45                
Correct output: -80                 | Program output: 39                 
Correct output: -40                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: 100                
Correct output: -45                 | Program output: 71                 
Correct output: -59                 | Program output: 75                 
Correct output: -58                 | Program output: 1                  
Correct output: -95                 | Program output: 57                 
Correct output: 17                  | Program output: 49                 
Correct output: -57                 | Program output: -13                
Correct output: -98                 | Program output: -82                
Correct output: -100                | Program output: -3                 
Correct output: -74                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: 11                 
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: 16                 
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: 81                 
Correct output: -96                 | Program output: -73                
Correct output: 0                   | Program output: 13                 
Correct output: -83                 | Program output: -82                
Correct output: -93                 | Program output: -52                
Correct output: -33                 | Program output: -8                 
Correct output: -68                 | Program output: -25                
Correct output: -92                 | Program output: 48                 
Correct output: -70                 | Program output: -46                
Correct output: -9                  | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 3, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt})
Lexicase best program: (integer_dup integer_max boolean_flush tag_boolean_770 integer_dup integer_dup integer_sub integer_dup integer_max integer_dup integer_max exec_dup (tag_boolean_770) boolean_flush in1 integer_add exec_do*range (print_integer integer_mod boolean_and integer_dup_times) exec_swap (exec_eq) () integer_lt)
Lexicase best errors: [0 1 0 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 29
Percent parens: 0.172
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 1, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 3, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*range} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 2, :instruction exec_eq} {:close 1, :instruction integer_lt})
Zero cases best program: (integer_dup integer_max boolean_flush tag_boolean_770 integer_dup integer_dup integer_sub integer_dup integer_max integer_dup integer_max exec_dup (tag_boolean_770) boolean_flush in1 integer_add exec_do*range (print_integer integer_mod boolean_and integer_dup_times) exec_swap (exec_eq) () integer_lt)
Zero cases best errors: [0 1 0 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 29
Percent parens: 0.172
--- Lexicase Population Statistics ---
Count of elite individuals by case: (185 1000 186 955 186 575 1000 574 952 1000)
Population mean number of elite cases: 6.61
Count of perfect (error zero) individuals by case: (185 0 186 955 186 575 0 574 952 0)
Population mean number of perfect (error zero) cases: 3.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_707} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction in1} {:close 1, :instruction in1} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_eq})
Best program: (boolean_invert_second_then_and integer_max boolean_flush tag_boolean_707 boolean_flush in1 integer_add integer_min print_integer integer_mod boolean_and integer_dup_times exec_swap (exec_rot () (in1 in1) (exec_rot (exec_eq) () ())) ())
Errors: [0 1 0 0 0 1 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 18
Size: 27
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 6.387
Median total errors in population: 6
Error averages by case: (0.815 1.0 0.814 0.045 0.814 0.425 1.0 0.426 0.048 1.0)
Error minima by case: (0 1 0 0 0 0 1 0 0 1)
Average genome size in population (length): 20.751
Average program size in population (points): 28.745
Average percent parens in population: 0.271
Minimum age in population: 47.8009689450264
Maximum age in population: 53.01949127437547
Average age in population: 51.06828538439726
Median age in population: 51.12207253684755
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 47
Genome diversity (% unique genomes):	 0.593
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.56
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 6919497
--- Timings ---
Current time: 1559314391905 milliseconds
Total Time:          76.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.1 seconds, 79.9%
Fitness Testing:      9.8 seconds, 12.7%
Report:               5.5 seconds,  7.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 47                 
Correct output: 0                   | Program output: 51                 
Correct output: 4                   | Program output: 50                 
Correct output: 15                  | Program output: 77                 
Correct output: 20                  | Program output: 20                 
Correct output: 13                  | Program output: 13                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 91                 
Correct output: 50                  | Program output: 97                 
Correct output: 1                   | Program output: 84                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 42                 
Correct output: 8                   | Program output: 58                 
Correct output: 0                   | Program output: 94                 
Correct output: 14                  | Program output: 80                 
Correct output: 70                  | Program output: 70                 
Correct output: 25                  | Program output: 77                 
Correct output: 32                  | Program output: 83                 
Correct output: 36                  | Program output: 85                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: 70                 
Correct output: -79                 | Program output: 29                 
Correct output: -27                 | Program output: 98                 
Correct output: -25                 | Program output: 26                 
Correct output: -35                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: 59                  | Program output: 100                
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -60                
Correct output: -92                 | Program output: 4                  
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: -62                
Correct output: -97                 | Program output: -55                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -85                
Correct output: -91                 | Program output: -8                 
Correct output: -91                 | Program output: 4                  
Correct output: -50                 | Program output: 85                 
Correct output: -94                 | Program output: 1                  
Correct output: -21                 | Program output: -4                 
Correct output: -70                 | Program output: 92                 
Correct output: -96                 | Program output: 95                 
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -13                
Correct output: 7                   | Program output: 98                 
Correct output: -99                 | Program output: 48                 
Correct output: -54                 | Program output: 0                  
Correct output: -48                 | Program output: -28                
Correct output: -75                 | Program output: -70                
Correct output: -82                 | Program output: 46                 
Correct output: -81                 | Program output: 0                  
Correct output: -51                 | Program output: -26                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -80                 | Program output: 7                  
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: 37                 
Correct output: -59                 | Program output: 98                 
Correct output: -58                 | Program output: -58                
Correct output: -95                 | Program output: -95                
Correct output: 17                  | Program output: 32                 
Correct output: -57                 | Program output: -42                
Correct output: -98                 | Program output: -93                
Correct output: -100                | Program output: 88                 
Correct output: -74                 | Program output: -74                
Correct output: -98                 | Program output: 1                  
Correct output: -67                 | Program output: -49                
Correct output: -52                 | Program output: 53                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: 39                 
Correct output: -55                 | Program output: -45                
Correct output: -96                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: 85                 
Correct output: -33                 | Program output: -24                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: 86                 
Correct output: -9                  | Program output: 74                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_swap})
Lexicase best program: (integer_dup integer_dup exec_if (integer_dup integer_max integer_add tag_boolean_770) () boolean_flush boolean_swap integer_add in4 print_integer exec_pop (boolean_and integer_dup_times integer_dup_times exec_swap (exec_rot (exec_when (in1) boolean_invert_first_then_and exec_eq) (boolean_swap) ()) ()))
Lexicase best errors: [1 1 1 1 0 1 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 33
Percent parens: 0.303
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_add} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 1, :instruction boolean_swap})
Zero cases best program: (integer_dup integer_dup exec_if (integer_dup integer_max integer_add tag_boolean_770) () boolean_flush boolean_swap integer_add in4 print_integer exec_pop (boolean_and integer_dup_times integer_dup_times exec_swap (exec_rot (exec_when (in1) boolean_invert_first_then_and exec_eq) (boolean_swap) ()) ()))
Zero cases best errors: [1 1 1 1 0 1 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 33
Percent parens: 0.303
--- Lexicase Population Statistics ---
Count of elite individuals by case: (564 1000 1000 1000 377 563 3 377 1000 379)
Population mean number of elite cases: 6.26
Count of perfect (error zero) individuals by case: (564 0 0 0 377 563 3 377 0 379)
Population mean number of perfect (error zero) cases: 2.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction integer_add} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when})
Best program: (integer_dup integer_max boolean_flush tag_boolean_770 integer_add in4 print_integer exec_pop (boolean_and integer_dup_times exec_swap (exec_rot (exec_when ()) () ()) ()))
Errors: [1 1 1 1 0 1 1 0 1 0]
Total: 7
Mean: 0.7
Genome size: 13
Size: 21
Percent parens: 0.381
--- Population Statistics ---
Average total errors in population: 7.737
Median total errors in population: 8
Error averages by case: (0.436 1.0 1.0 1.0 0.623 0.437 0.997 0.623 1.0 0.621)
Error minima by case: (0 1 1 1 0 0 0 0 1 0)
Average genome size in population (length): 20.351
Average program size in population (points): 27.98
Average percent parens in population: 0.264
Minimum age in population: 49.33469240367413
Maximum age in population: 54.29779062198941
Average age in population: 52.5460691798667
Median age in population: 52.61473206506344
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 18
Genome diversity (% unique genomes):	 0.574
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.534
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 7089780
--- Timings ---
Current time: 1559314394619 milliseconds
Total Time:          79.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.5 seconds, 80.1%
Fitness Testing:      9.9 seconds, 12.5%
Report:               5.7 seconds,  7.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 417
Test mean error for best: 0.41700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 33                 
Correct output: 13                  | Program output: 65                 
Correct output: 36                  | Program output: 49                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 15                 
Correct output: 1                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 82                 
Correct output: 25                  | Program output: 51                 
Correct output: 32                  | Program output: 33                 
Correct output: 36                  | Program output: 54                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: 5                  
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -27                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -53                
Correct output: -62                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -7                 
Correct output: -100                | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 8                  
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -45                
Correct output: -80                 | Program output: -42                
Correct output: -40                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -46                
Correct output: -58                 | Program output: 1                  
Correct output: -95                 | Program output: 52                 
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: -13                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -3                 
Correct output: -74                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: -52                
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: 31                 
Correct output: -96                 | Program output: -73                
Correct output: 0                   | Program output: 13                 
Correct output: -83                 | Program output: -82                
Correct output: -93                 | Program output: -52                
Correct output: -33                 | Program output: -10                
Correct output: -68                 | Program output: -63                
Correct output: -92                 | Program output: 48                 
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_lt})
Lexicase best program: (integer_dup exec_empty boolean_flush tag_boolean_770 boolean_flush in1 integer_add in3 boolean_flush tag_boolean_770 tag_boolean_770 boolean_flush integer_min print_integer integer_mod boolean_and exec_s_when_autoconstructing (exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (boolean_and integer_dup_times exec_swap (exec_rot () (exec_when () exec_s () (boolean_flush exec_eq) (integer_lt)) ()) ())) ()) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 51
Percent parens: 0.373
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_lt})
Zero cases best program: (integer_dup exec_empty boolean_flush tag_boolean_770 boolean_flush in1 integer_add in3 boolean_flush tag_boolean_770 tag_boolean_770 boolean_flush integer_min print_integer integer_mod boolean_and exec_s_when_autoconstructing (exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (boolean_and integer_dup_times exec_swap (exec_rot () (exec_when () exec_s () (boolean_flush exec_eq) (integer_lt)) ()) ())) ()) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 51
Percent parens: 0.373
--- Lexicase Population Statistics ---
Count of elite individuals by case: (460 3 460 3 461 243 3 460 473 3)
Population mean number of elite cases: 2.57
Count of perfect (error zero) individuals by case: (460 3 460 3 461 243 3 460 473 3)
Population mean number of perfect (error zero) cases: 2.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_lt})
Best program: (integer_dup exec_empty boolean_flush tag_boolean_770 boolean_flush in1 integer_add in3 boolean_flush tag_boolean_770 tag_boolean_770 boolean_flush integer_min print_integer integer_mod boolean_and exec_s_when_autoconstructing (exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (boolean_and integer_dup_times exec_swap (exec_rot () (exec_when () exec_s () (boolean_flush exec_eq) (integer_lt)) ()) ())) ()) () ())
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 32
Size: 51
Percent parens: 0.373
--- Population Statistics ---
Average total errors in population: 7.431
Median total errors in population: 9
Error averages by case: (0.54 0.997 0.54 0.997 0.539 0.757 0.997 0.54 0.527 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.653
Average program size in population (points): 33.796
Average percent parens in population: 0.280
Minimum age in population: 50.33469240367413
Maximum age in population: 55.9532518867054
Average age in population: 53.78407984521776
Median age in population: 53.85427513992181
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 146
Genome diversity (% unique genomes):	 0.605
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 148
Syntactic diversity (% unique Push programs):	 0.58
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 7295083
--- Timings ---
Current time: 1559314396845 milliseconds
Total Time:          81.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.3 seconds, 80.2%
Fitness Testing:     10.2 seconds, 12.5%
Report:               5.8 seconds,  7.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 417
Test mean error for best: 0.41700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 33                 
Correct output: 13                  | Program output: 65                 
Correct output: 36                  | Program output: 49                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 15                 
Correct output: 1                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 82                 
Correct output: 25                  | Program output: 51                 
Correct output: 32                  | Program output: 33                 
Correct output: 36                  | Program output: 54                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: 5                  
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -27                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -53                
Correct output: -62                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -7                 
Correct output: -100                | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 8                  
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -45                
Correct output: -80                 | Program output: -42                
Correct output: -40                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -46                
Correct output: -58                 | Program output: 1                  
Correct output: -95                 | Program output: 52                 
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: -13                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -3                 
Correct output: -74                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: -52                
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: 31                 
Correct output: -96                 | Program output: -73                
Correct output: 0                   | Program output: 13                 
Correct output: -83                 | Program output: -82                
Correct output: -93                 | Program output: -52                
Correct output: -33                 | Program output: -10                
Correct output: -68                 | Program output: -63                
Correct output: -92                 | Program output: 48                 
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_lt})
Lexicase best program: (integer_dup exec_empty boolean_flush tag_boolean_770 boolean_flush in1 integer_add in3 boolean_flush tag_boolean_770 tag_boolean_770 boolean_flush integer_min print_integer integer_mod boolean_and exec_s_when_autoconstructing (exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (boolean_and integer_dup_times exec_swap (exec_rot () (exec_when () exec_s () (boolean_flush exec_eq) (integer_lt)) ()) ())) ()) () ())
Lexicase best errors: [0 0 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 51
Percent parens: 0.373
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_lt})
Zero cases best program: (integer_dup exec_empty boolean_flush tag_boolean_770 boolean_flush in1 integer_add in3 boolean_flush tag_boolean_770 tag_boolean_770 boolean_flush integer_min print_integer integer_mod boolean_and exec_s_when_autoconstructing (exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (boolean_and integer_dup_times exec_swap (exec_rot () (exec_when () exec_s () (boolean_flush exec_eq) (integer_lt)) ()) ())) ()) () ())
Zero cases best errors: [0 0 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 51
Percent parens: 0.373
--- Lexicase Population Statistics ---
Count of elite individuals by case: (845 956 820 819 1000 1000 848 847 819 819)
Population mean number of elite cases: 8.77
Count of perfect (error zero) individuals by case: (845 956 820 819 0 0 848 847 819 819)
Population mean number of perfect (error zero) cases: 6.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 1, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_lt})
Best program: (integer_dup exec_empty boolean_flush tag_boolean_770 boolean_flush in1 integer_add in3 boolean_flush tag_boolean_770 tag_boolean_770 boolean_flush integer_min print_integer integer_mod boolean_and exec_s_when_autoconstructing (exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (boolean_and integer_dup_times exec_swap (exec_rot () (exec_when () exec_s () (boolean_flush exec_eq) (integer_lt)) ()) ())) ()) () ())
Errors: [0 0 0 0 1 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 32
Size: 51
Percent parens: 0.373
--- Population Statistics ---
Average total errors in population: 3.227
Median total errors in population: 2
Error averages by case: (0.155 0.044 0.18 0.181 1.0 1.0 0.152 0.153 0.181 0.181)
Error minima by case: (0 0 0 0 1 1 0 0 0 0)
Average genome size in population (length): 30.598
Average program size in population (points): 48.132
Average percent parens in population: 0.356
Minimum age in population: 53.10816582356347
Maximum age in population: 56.8409789458965
Average age in population: 54.3148463519635
Median age in population: 54.64038988470566
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 535
Genome diversity (% unique genomes):	 0.421
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 555
Syntactic diversity (% unique Push programs):	 0.392
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 7586987
--- Timings ---
Current time: 1559314399600 milliseconds
Total Time:          84.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.4 seconds, 80.2%
Fitness Testing:     10.5 seconds, 12.5%
Report:               6.1 seconds,  7.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 417
Test mean error for best: 0.41700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 33                 
Correct output: 13                  | Program output: 65                 
Correct output: 36                  | Program output: 49                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 15                 
Correct output: 1                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 82                 
Correct output: 25                  | Program output: 51                 
Correct output: 32                  | Program output: 33                 
Correct output: 36                  | Program output: 54                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: 5                  
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -27                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -53                
Correct output: -62                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -7                 
Correct output: -100                | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 8                  
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -45                
Correct output: -80                 | Program output: -42                
Correct output: -40                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -46                
Correct output: -58                 | Program output: 1                  
Correct output: -95                 | Program output: 52                 
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: -13                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -3                 
Correct output: -74                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: -52                
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: 31                 
Correct output: -96                 | Program output: -73                
Correct output: 0                   | Program output: 13                 
Correct output: -83                 | Program output: -82                
Correct output: -93                 | Program output: -52                
Correct output: -33                 | Program output: -10                
Correct output: -68                 | Program output: -63                
Correct output: -92                 | Program output: 48                 
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_lt})
Lexicase best program: (integer_dup exec_empty boolean_flush tag_boolean_770 boolean_flush in1 integer_add in3 boolean_flush tag_boolean_770 tag_boolean_770 boolean_flush integer_min print_integer integer_mod boolean_and exec_s_when_autoconstructing (exec_swap (exec_rot () (integer_dup_items in1) (boolean_invert_first_then_and exec_eq) boolean_and integer_dup_times exec_swap (exec_rot () (exec_when () exec_s () (boolean_flush exec_eq) (integer_lt)) ()) ()) ()) () ())
Lexicase best errors: [0 1 0 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 50
Percent parens: 0.360
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_lt})
Zero cases best program: (integer_dup exec_empty boolean_flush tag_boolean_770 boolean_flush in1 integer_add in3 boolean_flush tag_boolean_770 tag_boolean_770 boolean_flush integer_min print_integer integer_mod boolean_and exec_s_when_autoconstructing (exec_swap (exec_rot () (integer_dup_items in1) (boolean_invert_first_then_and exec_eq) boolean_and integer_dup_times exec_swap (exec_rot () (exec_when () exec_s () (boolean_flush exec_eq) (integer_lt)) ()) ()) ()) () ())
Zero cases best errors: [0 1 0 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 50
Percent parens: 0.360
--- Lexicase Population Statistics ---
Count of elite individuals by case: (944 1000 949 1000 944 1000 940 933 929 1000)
Population mean number of elite cases: 9.64
Count of perfect (error zero) individuals by case: (944 0 949 0 944 0 940 933 929 0)
Population mean number of perfect (error zero) cases: 5.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_lt})
Best program: (integer_dup exec_empty boolean_flush tag_boolean_770 boolean_flush in1 integer_add in3 boolean_flush tag_boolean_770 tag_boolean_770 boolean_flush integer_min print_integer integer_mod boolean_and exec_s_when_autoconstructing (exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (boolean_and integer_dup_times exec_swap (exec_rot () (exec_when () exec_s () (boolean_flush exec_eq) (integer_lt)) ()) ())) ()) () ())
Errors: [0 1 0 1 0 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 32
Size: 51
Percent parens: 0.373
--- Population Statistics ---
Average total errors in population: 4.361
Median total errors in population: 4
Error averages by case: (0.056 1.0 0.051 1.0 0.056 1.0 0.06 0.067 0.071 1.0)
Error minima by case: (0 1 0 1 0 1 0 0 0 1)
Average genome size in population (length): 31.933
Average program size in population (points): 50.74
Average percent parens in population: 0.369
Minimum age in population: 54.64038988470566
Maximum age in population: 57.54339403855556
Average age in population: 55.70009597278008
Median age in population: 55.64038988470566
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 390
Genome diversity (% unique genomes):	 0.516
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 417
Syntactic diversity (% unique Push programs):	 0.482
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 7895651
--- Timings ---
Current time: 1559314401875 milliseconds
Total Time:          86.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.1 seconds, 80.0%
Fitness Testing:     10.9 seconds, 12.6%
Report:               6.3 seconds,  7.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 417
Test mean error for best: 0.41700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: 58                 
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: 13                 
Correct output: -68                 | Program output: -39                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 33                 
Correct output: 13                  | Program output: 65                 
Correct output: 36                  | Program output: 49                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 15                 
Correct output: 1                   | Program output: 2                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 82                 
Correct output: 25                  | Program output: 51                 
Correct output: 32                  | Program output: 33                 
Correct output: 36                  | Program output: 54                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: 5                  
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -27                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -53                
Correct output: -62                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -7                 
Correct output: -100                | Program output: -73                
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 8                  
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -45                
Correct output: -80                 | Program output: -42                
Correct output: -40                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -46                
Correct output: -58                 | Program output: 1                  
Correct output: -95                 | Program output: 52                 
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: -13                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -3                 
Correct output: -74                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: -52                
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: 31                 
Correct output: -96                 | Program output: -73                
Correct output: 0                   | Program output: 13                 
Correct output: -83                 | Program output: -82                
Correct output: -93                 | Program output: -52                
Correct output: -33                 | Program output: -10                
Correct output: -68                 | Program output: -63                
Correct output: -92                 | Program output: 48                 
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_lt})
Lexicase best program: (integer_dup exec_empty boolean_flush tag_boolean_770 boolean_flush in1 integer_add in3 boolean_flush tag_boolean_770 tag_boolean_770 boolean_flush integer_min print_integer integer_mod boolean_and exec_s_when_autoconstructing (exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (boolean_and integer_dup_times exec_swap (exec_rot () (exec_when () exec_s () (boolean_flush exec_eq) (integer_lt)) ()) ())) ()) () ())
Lexicase best errors: [1 1 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 51
Percent parens: 0.373
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_lt})
Zero cases best program: (integer_dup exec_empty boolean_flush tag_boolean_770 boolean_flush in1 integer_add in3 boolean_flush tag_boolean_770 tag_boolean_770 boolean_flush integer_min print_integer integer_mod boolean_and exec_s_when_autoconstructing (exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (boolean_and integer_dup_times exec_swap (exec_rot () (exec_when () exec_s () (boolean_flush exec_eq) (integer_lt)) ()) ())) ()) () ())
Zero cases best errors: [1 1 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 51
Percent parens: 0.373
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1 939 930 940 1 917 939 939 1)
Population mean number of elite cases: 6.61
Count of perfect (error zero) individuals by case: (0 1 939 930 940 1 917 939 939 1)
Population mean number of perfect (error zero) cases: 5.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_lt})
Best program: (integer_dup exec_empty boolean_flush tag_boolean_770 boolean_flush in1 integer_add in3 boolean_flush tag_boolean_770 tag_boolean_770 boolean_flush integer_min print_integer integer_mod boolean_and exec_s_when_autoconstructing (exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_eq) (boolean_and integer_dup_times exec_swap (exec_rot () (exec_when () exec_s () (boolean_flush exec_eq) (integer_lt)) ()) ())) ()) () ())
Errors: [1 1 0 0 0 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 32
Size: 51
Percent parens: 0.373
--- Population Statistics ---
Average total errors in population: 4.393
Median total errors in population: 4
Error averages by case: (1.0 0.999 0.061 0.07 0.06 0.999 0.083 0.061 0.061 0.999)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.881
Average program size in population (points): 50.505
Average percent parens in population: 0.367
Minimum age in population: 55.64038988470566
Maximum age in population: 58.92927416115708
Average age in population: 57.19595586909475
Median age in population: 57.14038988470566
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 251
Genome diversity (% unique genomes):	 0.622
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 277
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.007
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 8201161
--- Timings ---
Current time: 1559314404480 milliseconds
Total Time:          89.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.1 seconds, 79.9%
Fitness Testing:     11.2 seconds, 12.6%
Report:               6.6 seconds,  7.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 412
Test mean error for best: 0.41200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: -21                
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 16                 
Correct output: 4                   | Program output: 77                 
Correct output: 15                  | Program output: 24                 
Correct output: 20                  | Program output: 44                 
Correct output: 13                  | Program output: 61                 
Correct output: 36                  | Program output: 63                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 67                 
Correct output: 1                   | Program output: 1                  
Correct output: 8                   | Program output: 34                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 37                 
Correct output: 70                  | Program output: 76                 
Correct output: 25                  | Program output: 25                 
Correct output: 32                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 22                  | Program output: 57                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: 80                 
Correct output: -27                 | Program output: -19                
Correct output: -25                 | Program output: 9                  
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: 37                 
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -81                
Correct output: -92                 | Program output: -68                
Correct output: -100                | Program output: 68                 
Correct output: -62                 | Program output: 51                 
Correct output: -97                 | Program output: 8                  
Correct output: -97                 | Program output: 6                  
Correct output: -100                | Program output: -100               
Correct output: -91                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: 18                 
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: 72                 
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -23                
Correct output: -94                 | Program output: -10                
Correct output: 7                   | Program output: 7                  
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -37                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -51                
Correct output: -80                 | Program output: -42                
Correct output: -40                 | Program output: -4                 
Correct output: -80                 | Program output: -18                
Correct output: -74                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -59                
Correct output: -58                 | Program output: 22                 
Correct output: -95                 | Program output: 52                 
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: -57                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -74                 | Program output: -14                
Correct output: -98                 | Program output: 32                 
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: -2                 
Correct output: -69                 | Program output: -67                
Correct output: -84                 | Program output: -31                
Correct output: -55                 | Program output: -55                
Correct output: -96                 | Program output: -96                
Correct output: 0                   | Program output: 73                 
Correct output: -83                 | Program output: -18                
Correct output: -93                 | Program output: -93                
Correct output: -33                 | Program output: -33                
Correct output: -68                 | Program output: -63                
Correct output: -92                 | Program output: -51                
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_eq})
Lexicase best program: (integer_dup exec_empty boolean_flush tag_boolean_770 boolean_flush in1 integer_add in3 boolean_flush tag_boolean_770 tag_boolean_770 boolean_flush in2 boolean_flush integer_min print_integer integer_mod boolean_and exec_s_when_autoconstructing (exec_swap (exec_rot () (exec_when () in1 boolean_invert_first_then_and exec_eq boolean_and integer_dup_times exec_swap (exec_rot () (exec_when () exec_s () (boolean_flush exec_eq) ()) ()) ()) ()) ()) () ())
Lexicase best errors: [0 1 0 1 0 1 0 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 52
Percent parens: 0.365
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_eq})
Zero cases best program: (integer_dup exec_empty boolean_flush tag_boolean_770 boolean_flush in1 integer_add in3 boolean_flush tag_boolean_770 tag_boolean_770 boolean_flush in2 boolean_flush integer_min print_integer integer_mod boolean_and exec_s_when_autoconstructing (exec_swap (exec_rot () (exec_when () in1 boolean_invert_first_then_and exec_eq boolean_and integer_dup_times exec_swap (exec_rot () (exec_when () exec_s () (boolean_flush exec_eq) ()) ()) ()) ()) ()) () ())
Zero cases best errors: [0 1 0 1 0 1 0 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 52
Percent parens: 0.365
--- Lexicase Population Statistics ---
Count of elite individuals by case: (628 1000 314 1000 313 1000 313 608 610 1000)
Population mean number of elite cases: 6.79
Count of perfect (error zero) individuals by case: (628 0 314 0 313 0 313 608 610 0)
Population mean number of perfect (error zero) cases: 2.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction exec_s} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_lt})
Best program: (integer_dup boolean_flush in1 integer_add in3 boolean_flush tag_boolean_770 tag_boolean_770 boolean_flush in2 boolean_flush integer_min print_integer integer_mod boolean_and integer_mod boolean_and exec_s_when_autoconstructing (exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_swap (exec_rot () (exec_when (in1) exec_s (exec_eq) (boolean_and integer_dup_times exec_swap (exec_rot () (exec_when () exec_s () (boolean_flush exec_eq) (integer_lt)) ()) ()) ()) ()) ()) ()) ()) () ())
Errors: [0 1 0 1 0 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 38
Size: 66
Percent parens: 0.424
--- Population Statistics ---
Average total errors in population: 7.214
Median total errors in population: 7
Error averages by case: (0.372 1.0 0.686 1.0 0.687 1.0 0.687 0.392 0.39 1.0)
Error minima by case: (0 1 0 1 0 1 0 0 0 1)
Average genome size in population (length): 33.493
Average program size in population (points): 54.21
Average percent parens in population: 0.378
Minimum age in population: 56.64038988470566
Maximum age in population: 60.37806084938347
Average age in population: 58.60026546095602
Median age in population: 58.71863824773573
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 168
Genome diversity (% unique genomes):	 0.626
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 176
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 8527842
--- Timings ---
Current time: 1559314406652 milliseconds
Total Time:          91.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.6 seconds, 79.6%
Fitness Testing:     11.6 seconds, 12.8%
Report:               6.8 seconds,  7.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 201
Test mean error for best: 0.20100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: -21                
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 33                 
Correct output: 13                  | Program output: 61                 
Correct output: 36                  | Program output: 49                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 76                 
Correct output: 25                  | Program output: 25                 
Correct output: 32                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: 5                  
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -81                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -53                
Correct output: -62                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -7                 
Correct output: -100                | Program output: -100               
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 7                  
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -51                
Correct output: -80                 | Program output: -42                
Correct output: -40                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -59                
Correct output: -58                 | Program output: 1                  
Correct output: -95                 | Program output: 52                 
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: -57                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -74                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: -67                
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: -55                
Correct output: -96                 | Program output: -96                
Correct output: 0                   | Program output: 13                 
Correct output: -83                 | Program output: -82                
Correct output: -93                 | Program output: -93                
Correct output: -33                 | Program output: -33                
Correct output: -68                 | Program output: -63                
Correct output: -92                 | Program output: -51                
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 2, :instruction tag_boolean_770} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction exec_s} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 1, :instruction exec_s} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_lt})
Lexicase best program: (integer_dup exec_empty boolean_flush tag_boolean_770 boolean_flush in1 integer_add in3 boolean_flush tag_boolean_770 tag_boolean_770 boolean_flush integer_min tag_boolean_770 tag_boolean_770 boolean_flush in2 boolean_flush integer_min print_integer integer_mod boolean_and integer_mod boolean_and exec_s_when_autoconstructing (exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_swap (exec_rot () (exec_when (in1) exec_s (exec_eq) (boolean_and integer_dup_times exec_swap (exec_rot () (exec_when () exec_s () (exec_s () (boolean_flush exec_eq) (integer_lt)) ()) ()) ()) ()) ()) ()) ()) ()) () ())
Lexicase best errors: [0 1 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 77
Percent parens: 0.403
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 2, :instruction tag_boolean_770} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction in1} {:close 0, :instruction exec_s} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 1, :instruction exec_s} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_lt})
Zero cases best program: (integer_dup exec_empty boolean_flush tag_boolean_770 boolean_flush in1 integer_add in3 boolean_flush tag_boolean_770 tag_boolean_770 boolean_flush integer_min tag_boolean_770 tag_boolean_770 boolean_flush in2 boolean_flush integer_min print_integer integer_mod boolean_and integer_mod boolean_and exec_s_when_autoconstructing (exec_swap (exec_rot () (exec_when (in1) boolean_invert_first_then_and exec_swap (exec_rot () (exec_when (in1) exec_s (exec_eq) (boolean_and integer_dup_times exec_swap (exec_rot () (exec_when () exec_s () (exec_s () (boolean_flush exec_eq) (integer_lt)) ()) ()) ()) ()) ()) ()) ()) ()) () ())
Zero cases best errors: [0 1 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 77
Percent parens: 0.403
--- Lexicase Population Statistics ---
Count of elite individuals by case: (840 1000 422 511 1000 952 421 866 422 590)
Population mean number of elite cases: 7.02
Count of perfect (error zero) individuals by case: (840 0 422 511 0 952 421 866 422 590)
Population mean number of perfect (error zero) cases: 5.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_eq})
Best program: (integer_dup exec_empty boolean_flush tag_boolean_770 boolean_flush in1 integer_add in3 boolean_flush tag_boolean_770 tag_boolean_770 boolean_flush integer_min in2 boolean_flush integer_min print_integer integer_mod boolean_and exec_s_when_autoconstructing (exec_swap (exec_rot () (exec_when () in1 boolean_invert_first_then_and exec_eq boolean_and integer_dup_times exec_swap (exec_rot () (exec_when () exec_s () (boolean_flush exec_eq) ()) ()) ()) ()) ()) () ())
Errors: [0 1 0 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 34
Size: 53
Percent parens: 0.358
--- Population Statistics ---
Average total errors in population: 4.976
Median total errors in population: 5
Error averages by case: (0.16 1.0 0.578 0.489 1.0 0.048 0.579 0.134 0.578 0.41)
Error minima by case: (0 1 0 0 1 0 0 0 0 0)
Average genome size in population (length): 34.029
Average program size in population (points): 55.502
Average percent parens in population: 0.383
Minimum age in population: 57.64038988470566
Maximum age in population: 62.07172536704456
Average age in population: 60.44874135868517
Median age in population: 60.48693707323764
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 163
Genome diversity (% unique genomes):	 0.557
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 173
Syntactic diversity (% unique Push programs):	 0.533
Total error diversity:				 0.009
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 8888432
--- Timings ---
Current time: 1559314409044 milliseconds
Total Time:          93.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.3 seconds, 79.4%
Fitness Testing:     12.0 seconds, 12.9%
Report:               7.1 seconds,  7.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 201
Test mean error for best: 0.20100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: -21                
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 33                 
Correct output: 13                  | Program output: 61                 
Correct output: 36                  | Program output: 49                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 15                 
Correct output: 1                   | Program output: 1                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 76                 
Correct output: 25                  | Program output: 25                 
Correct output: 32                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: 5                  
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -81                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -53                
Correct output: -62                 | Program output: 23                 
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -7                 
Correct output: -100                | Program output: -100               
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -54                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 7                  
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -51                
Correct output: -80                 | Program output: -42                
Correct output: -40                 | Program output: -35                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -39                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -59                
Correct output: -58                 | Program output: 1                  
Correct output: -95                 | Program output: 52                 
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: -57                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -74                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: -67                
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: -55                
Correct output: -96                 | Program output: -96                
Correct output: 0                   | Program output: 13                 
Correct output: -83                 | Program output: -82                
Correct output: -93                 | Program output: -93                
Correct output: -33                 | Program output: -33                
Correct output: -68                 | Program output: -63                
Correct output: -92                 | Program output: -51                
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_eq})
Lexicase best program: (integer_dup exec_empty boolean_flush tag_boolean_770 boolean_flush in1 integer_add in3 boolean_flush tag_boolean_770 tag_boolean_770 boolean_flush in2 boolean_flush integer_min integer_min print_integer integer_mod boolean_and exec_s_when_autoconstructing (exec_swap (exec_rot () (exec_when () in1 boolean_invert_first_then_and exec_eq boolean_and integer_dup_times exec_swap (exec_rot () (exec_when () exec_s () (boolean_flush exec_eq) ()) ()) ()) ()) ()) () ())
Lexicase best errors: [0 0 0 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 53
Percent parens: 0.358
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_eq})
Zero cases best program: (integer_dup exec_empty boolean_flush tag_boolean_770 boolean_flush in1 integer_add in3 boolean_flush tag_boolean_770 tag_boolean_770 boolean_flush in2 boolean_flush integer_min integer_min print_integer integer_mod boolean_and exec_s_when_autoconstructing (exec_swap (exec_rot () (exec_when () in1 boolean_invert_first_then_and exec_eq boolean_and integer_dup_times exec_swap (exec_rot () (exec_when () exec_s () (boolean_flush exec_eq) ()) ()) ()) ()) ()) () ())
Zero cases best errors: [0 0 0 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 53
Percent parens: 0.358
--- Lexicase Population Statistics ---
Count of elite individuals by case: (892 894 892 2 2 930 2 892 909 891)
Population mean number of elite cases: 6.31
Count of perfect (error zero) individuals by case: (892 894 892 2 2 930 2 892 909 891)
Population mean number of perfect (error zero) cases: 6.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_add} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_eq})
Best program: (integer_dup exec_empty boolean_flush tag_boolean_770 boolean_flush in1 integer_add in3 boolean_flush tag_boolean_770 tag_boolean_770 boolean_flush in2 boolean_flush integer_min integer_min print_integer integer_mod boolean_and exec_s_when_autoconstructing (exec_swap (exec_rot () (exec_when () in1 boolean_invert_first_then_and exec_eq boolean_and integer_dup_times exec_swap (exec_rot () (exec_when () exec_s () (boolean_flush exec_eq) ()) ()) ()) ()) ()) () ())
Errors: [0 0 0 1 1 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 34
Size: 53
Percent parens: 0.358
--- Population Statistics ---
Average total errors in population: 3.694
Median total errors in population: 3
Error averages by case: (0.108 0.106 0.108 0.998 0.998 0.07 0.998 0.108 0.091 0.109)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.012
Average program size in population (points): 58.939
Average percent parens in population: 0.368
Minimum age in population: 61.20848426176963
Maximum age in population: 63.02915341067819
Average age in population: 61.99794777845868
Median age in population: 62.20848426176963
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 262
Genome diversity (% unique genomes):	 0.439
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 278
Syntactic diversity (% unique Push programs):	 0.407
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 9222354
--- Timings ---
Current time: 1559314411556 milliseconds
Total Time:          96.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.1 seconds, 79.2%
Fitness Testing:     12.4 seconds, 12.9%
Report:               7.4 seconds,  7.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 212
Test mean error for best: 0.21200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: -21                
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 20                 
Correct output: 13                  | Program output: 13                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 62                 
Correct output: 50                  | Program output: 55                 
Correct output: 1                   | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 32                 
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 70                 
Correct output: 25                  | Program output: 25                 
Correct output: 32                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: -32                
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: 59                  | Program output: 69                 
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -81                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: -62                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -28                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 1                  
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: 26                 
Correct output: -96                 | Program output: -78                
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 7                  
Correct output: -99                 | Program output: -98                
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -41                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -8                 
Correct output: -81                 | Program output: -64                
Correct output: -51                 | Program output: -51                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: 37                 
Correct output: -59                 | Program output: -59                
Correct output: -58                 | Program output: -58                
Correct output: -95                 | Program output: -95                
Correct output: 17                  | Program output: 32                 
Correct output: -57                 | Program output: -57                
Correct output: -98                 | Program output: -93                
Correct output: -100                | Program output: -100               
Correct output: -74                 | Program output: -74                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: -49                
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: -55                
Correct output: -96                 | Program output: -96                
Correct output: 0                   | Program output: 0                  
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: -93                
Correct output: -33                 | Program output: -33                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -46                
Correct output: -9                  | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 2, :instruction tag_boolean_1048} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_eq})
Lexicase best program: (integer_dup exec_empty boolean_flush tag_boolean_770 boolean_flush in1 in4 in3 exec_yankdup tag_boolean_1048 tag_boolean_770 boolean_flush integer_min in2 boolean_flush integer_min print_integer integer_mod boolean_and exec_s_when_autoconstructing (exec_swap (exec_rot () (exec_when () in1 boolean_invert_first_then_and exec_eq boolean_and integer_dup_times boolean_dup_items exec_rot () (exec_when () exec_s () (boolean_flush exec_eq) ()) ()) ()) ()) () ())
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 51
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 2, :instruction tag_boolean_1048} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_eq})
Zero cases best program: (integer_dup exec_empty boolean_flush tag_boolean_770 boolean_flush in1 in4 in3 exec_yankdup tag_boolean_1048 tag_boolean_770 boolean_flush integer_min in2 boolean_flush integer_min print_integer integer_mod boolean_and exec_s_when_autoconstructing (exec_swap (exec_rot () (exec_when () in1 boolean_invert_first_then_and exec_eq boolean_and integer_dup_times boolean_dup_items exec_rot () (exec_when () exec_s () (boolean_flush exec_eq) ()) ()) ()) ()) () ())
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 51
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (940 911 528 922 923 913 918 384 384 527)
Population mean number of elite cases: 7.35
Count of perfect (error zero) individuals by case: (940 911 528 922 923 913 918 384 384 527)
Population mean number of perfect (error zero) cases: 7.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_1048} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_eq})
Best program: (integer_dup exec_empty boolean_flush tag_boolean_770 boolean_flush in1 in4 boolean_flush tag_boolean_1048 tag_boolean_770 boolean_flush integer_min in2 boolean_flush integer_min print_integer integer_mod boolean_and exec_s_when_autoconstructing (exec_swap (exec_rot () (exec_when () integer_min boolean_invert_first_then_and exec_eq boolean_and integer_dup_times boolean_dup_items exec_rot () (exec_when () exec_s () (boolean_flush exec_eq) ()) ()) ()) ()) () ())
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 33
Size: 50
Percent parens: 0.340
--- Population Statistics ---
Average total errors in population: 2.65
Median total errors in population: 2
Error averages by case: (0.06 0.089 0.472 0.078 0.077 0.087 0.082 0.616 0.616 0.473)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.663
Average program size in population (points): 55.459
Average percent parens in population: 0.353
Minimum age in population: 62.20848426176963
Maximum age in population: 64.87797432631805
Average age in population: 63.23401434085952
Median age in population: 63.31646066750363
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 229
Genome diversity (% unique genomes):	 0.55
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 245
Syntactic diversity (% unique Push programs):	 0.509
Total error diversity:				 0.01
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 9550654
--- Timings ---
Current time: 1559314413924 milliseconds
Total Time:          98.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.8 seconds, 79.0%
Fitness Testing:     12.8 seconds, 13.0%
Report:               7.7 seconds,  7.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Smallest problem report - generation 43
Test total error for best: 219
Test mean error for best: 0.21900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: -21                
Correct output: -53                 | Program output: 3                  
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 77                 
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 41                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 20                 
Correct output: 13                  | Program output: 13                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 62                 
Correct output: 50                  | Program output: 55                 
Correct output: 1                   | Program output: 13                 
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 32                 
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 70                 
Correct output: 25                  | Program output: 25                 
Correct output: 32                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: -32                
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: 16                 
Correct output: -58                 | Program output: -58                
Correct output: 59                  | Program output: 69                 
Correct output: -80                 | Program output: -69                
Correct output: -81                 | Program output: -81                
Correct output: -92                 | Program output: -68                
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: -62                
Correct output: -97                 | Program output: -42                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -28                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: 1                  
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: 26                 
Correct output: -96                 | Program output: -78                
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 7                  
Correct output: -99                 | Program output: -98                
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -41                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -8                 
Correct output: -81                 | Program output: -64                
Correct output: -51                 | Program output: -51                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: 37                 
Correct output: -59                 | Program output: -59                
Correct output: -58                 | Program output: -58                
Correct output: -95                 | Program output: -95                
Correct output: 17                  | Program output: 32                 
Correct output: -57                 | Program output: -57                
Correct output: -98                 | Program output: -93                
Correct output: -100                | Program output: -100               
Correct output: -74                 | Program output: -74                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: -49                
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: -55                
Correct output: -96                 | Program output: -96                
Correct output: 0                   | Program output: 0                  
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: -93                
Correct output: -33                 | Program output: -33                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -46                
Correct output: -9                  | Program output: 19                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_1048} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_eq})
Lexicase best program: (integer_dup exec_empty boolean_flush tag_boolean_770 boolean_flush in1 in4 boolean_yank boolean_flush tag_boolean_1048 tag_boolean_770 boolean_flush integer_min in2 boolean_flush integer_min print_integer integer_mod boolean_and exec_s_when_autoconstructing (exec_swap (exec_rot () (exec_when () in1 boolean_invert_first_then_and integer_stackdepth boolean_and integer_dup_times boolean_dup_items exec_rot () (exec_when () exec_s () (boolean_flush exec_eq) ()) ()) ()) ()) () ())
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 51
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_1048} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_eq})
Zero cases best program: (integer_dup exec_empty boolean_flush tag_boolean_770 boolean_flush in1 in4 boolean_yank boolean_flush tag_boolean_1048 tag_boolean_770 boolean_flush integer_min in2 boolean_flush integer_min print_integer integer_mod boolean_and exec_s_when_autoconstructing (exec_swap (exec_rot () (exec_when () in1 boolean_invert_first_then_and integer_stackdepth boolean_and integer_dup_times boolean_dup_items exec_rot () (exec_when () exec_s () (boolean_flush exec_eq) ()) ()) ()) ()) () ())
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 51
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (715 896 748 746 716 450 714 746 714 894)
Population mean number of elite cases: 7.34
Count of perfect (error zero) individuals by case: (715 896 748 746 716 450 714 746 714 894)
Population mean number of perfect (error zero) cases: 7.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 2, :instruction tag_boolean_1048} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_eq})
Best program: (integer_dup exec_empty boolean_flush tag_boolean_770 boolean_flush in1 in4 in3 exec_yankdup tag_boolean_1048 tag_boolean_770 boolean_flush integer_min in2 boolean_flush integer_min print_integer integer_mod boolean_and exec_s_when_autoconstructing (exec_swap (exec_rot () (exec_when () in1 boolean_invert_first_then_and exec_eq boolean_and integer_dup_times boolean_dup_items exec_rot () (exec_when () exec_s () (boolean_flush exec_eq) ()) ()) ()) ()) () ())
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 34
Size: 51
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 2.661
Median total errors in population: 2
Error averages by case: (0.285 0.104 0.252 0.254 0.284 0.55 0.286 0.254 0.286 0.106)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.583
Average program size in population (points): 52.675
Average percent parens in population: 0.341
Minimum age in population: 63.20848426176963
Maximum age in population: 65.99463385329727
Average age in population: 64.64451395384171
Median age in population: 64.65824364146067
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 85
Genome diversity (% unique genomes):	 0.549
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 88
Syntactic diversity (% unique Push programs):	 0.509
Total error diversity:				 0.01
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 9872847
--- Timings ---
Current time: 1559314416364 milliseconds
Total Time:         100.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        79.6 seconds, 78.9%
Fitness Testing:     13.2 seconds, 13.1%
Report:               8.0 seconds,  7.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: -21                
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 20                 
Correct output: 13                  | Program output: 13                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 70                 
Correct output: 25                  | Program output: 25                 
Correct output: 32                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: -58                
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -81                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: -62                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 7                  
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -51                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -59                
Correct output: -58                 | Program output: -58                
Correct output: -95                 | Program output: -95                
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: -57                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -74                 | Program output: -74                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: -55                
Correct output: -96                 | Program output: -96                
Correct output: 0                   | Program output: 0                  
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: -93                
Correct output: -33                 | Program output: -33                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_1048} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_eq})
Lexicase best program: (integer_dup exec_empty integer_dup exec_empty boolean_flush tag_boolean_770 boolean_flush in1 in4 in3 boolean_flush tag_boolean_1048 tag_boolean_770 boolean_flush integer_min boolean_dup boolean_flush boolean_flush integer_min in2 boolean_flush integer_min print_integer integer_mod boolean_and exec_s_when_autoconstructing (exec_swap (exec_rot () (integer_lte) (in1 exec_swap (exec_eq boolean_and integer_dup_times boolean_dup_items exec_rot () (exec_when () exec_s () (boolean_flush exec_eq) ()) ()) ())) ()) () ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 58
Percent parens: 0.310
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_1048} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction integer_lte} {:close 0, :instruction in1} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_eq})
Zero cases best program: (integer_dup exec_empty integer_dup exec_empty boolean_flush tag_boolean_770 boolean_flush in1 in4 in3 boolean_flush tag_boolean_1048 tag_boolean_770 boolean_flush integer_min boolean_dup boolean_flush boolean_flush integer_min in2 boolean_flush integer_min print_integer integer_mod boolean_and exec_s_when_autoconstructing (exec_swap (exec_rot () (integer_lte) (in1 exec_swap (exec_eq boolean_and integer_dup_times boolean_dup_items exec_rot () (exec_when () exec_s () (boolean_flush exec_eq) ()) ()) ())) ()) () ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 58
Percent parens: 0.310
--- Lexicase Population Statistics ---
Count of elite individuals by case: (732 402 949 953 867 403 864 954 810 811)
Population mean number of elite cases: 7.74
Count of perfect (error zero) individuals by case: (732 402 949 953 867 403 864 954 810 811)
Population mean number of perfect (error zero) cases: 7.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 2, :instruction tag_boolean_1048} {:close 2, :instruction tag_boolean_770} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction in2} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_eq})
Best program: (integer_dup exec_empty boolean_flush tag_boolean_770 boolean_flush tag_boolean_770 boolean_flush in1 in4 in3 boolean_flush tag_boolean_1048 tag_boolean_770 boolean_flush integer_min boolean_dup boolean_flush boolean_flush integer_min in2 boolean_flush integer_min print_integer integer_mod boolean_and exec_s_when_autoconstructing (exec_swap (exec_rot () (exec_when () in1 boolean_invert_first_then_and exec_eq boolean_and integer_dup_times boolean_dup_items exec_rot () (exec_when () exec_s () (boolean_flush exec_eq) ()) ()) ()) ()) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 40
Size: 57
Percent parens: 0.298
--- Population Statistics ---
Average total errors in population: 2.255
Median total errors in population: 2
Error averages by case: (0.268 0.598 0.051 0.047 0.133 0.597 0.136 0.046 0.19 0.189)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.973
Average program size in population (points): 51.282
Average percent parens in population: 0.336
Minimum age in population: 64.20848426176963
Maximum age in population: 67.99463385329727
Average age in population: 66.1150542255528
Median age in population: 66.14744297180414
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 67
Genome diversity (% unique genomes):	 0.591
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.567
Total error diversity:				 0.011
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 10192769
--- Timings ---
Current time: 1559314418844 milliseconds
Total Time:         103.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.4 seconds, 78.8%
Fitness Testing:     13.6 seconds, 13.1%
Report:               8.3 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 44
Successful program: (integer_dup exec_empty boolean_flush tag_boolean_770 boolean_flush tag_boolean_770 boolean_flush in1 in4 in3 boolean_flush tag_boolean_1048 tag_boolean_770 boolean_flush integer_min boolean_dup boolean_flush boolean_flush integer_min in2 boolean_flush integer_min print_integer integer_mod boolean_and exec_s_when_autoconstructing (exec_swap (exec_rot () (exec_when () in1 boolean_invert_first_then_and exec_eq boolean_and integer_dup_times boolean_dup_items exec_rot () (exec_when () exec_s () (boolean_flush exec_eq) ()) ()) ()) ()) () ())
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 57


Auto-simplifying with starting size: 57
step: 0
program: (integer_dup exec_empty boolean_flush tag_boolean_770 boolean_flush tag_boolean_770 boolean_flush in1 in4 in3 boolean_flush tag_boolean_1048 tag_boolean_770 boolean_flush integer_min boolean_dup boolean_flush boolean_flush integer_min in2 boolean_flush integer_min print_integer integer_mod boolean_and exec_s_when_autoconstructing (exec_swap (exec_rot () (exec_when () in1 boolean_invert_first_then_and exec_eq boolean_and integer_dup_times boolean_dup_items exec_rot () (exec_when () exec_s () (boolean_flush exec_eq) ()) ()) ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 500
program: (integer_dup exec_empty boolean_flush tag_boolean_770 boolean_flush tag_boolean_770 boolean_flush in1 in4 in3 boolean_flush tag_boolean_1048 tag_boolean_770 boolean_flush integer_min boolean_dup boolean_flush boolean_flush integer_min in2 boolean_flush integer_min print_integer integer_mod boolean_and exec_s_when_autoconstructing (exec_swap (exec_rot () (exec_when () in1 boolean_invert_first_then_and exec_eq boolean_and integer_dup_times boolean_dup_items exec_rot () (exec_when () exec_s () (boolean_flush exec_eq) ()) ()) ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 1000
program: (integer_dup exec_empty boolean_flush tag_boolean_770 boolean_flush tag_boolean_770 boolean_flush in1 in4 in3 boolean_flush tag_boolean_1048 tag_boolean_770 boolean_flush integer_min boolean_dup boolean_flush boolean_flush integer_min in2 boolean_flush integer_min print_integer integer_mod boolean_and exec_s_when_autoconstructing (exec_swap (exec_rot () (exec_when () in1 boolean_invert_first_then_and exec_eq boolean_and integer_dup_times boolean_dup_items exec_rot () (exec_when () exec_s () (boolean_flush exec_eq) ()) ()) ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 1500
program: (integer_dup exec_empty boolean_flush tag_boolean_770 boolean_flush tag_boolean_770 boolean_flush in1 in4 in3 boolean_flush tag_boolean_1048 tag_boolean_770 boolean_flush integer_min boolean_dup boolean_flush boolean_flush integer_min in2 boolean_flush integer_min print_integer integer_mod boolean_and exec_s_when_autoconstructing (exec_swap (exec_rot () (exec_when () in1 boolean_invert_first_then_and exec_eq boolean_and integer_dup_times boolean_dup_items exec_rot () (exec_when () exec_s () (boolean_flush exec_eq) ()) ()) ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 2000
program: (integer_dup exec_empty boolean_flush tag_boolean_770 boolean_flush tag_boolean_770 boolean_flush in1 in4 in3 boolean_flush tag_boolean_1048 tag_boolean_770 boolean_flush integer_min boolean_dup boolean_flush boolean_flush integer_min in2 boolean_flush integer_min print_integer integer_mod boolean_and exec_s_when_autoconstructing (exec_swap (exec_rot () (exec_when () in1 boolean_invert_first_then_and exec_eq boolean_and integer_dup_times boolean_dup_items exec_rot () (exec_when () exec_s () (boolean_flush exec_eq) ()) ()) ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 2500
program: (integer_dup exec_empty boolean_flush tag_boolean_770 boolean_flush tag_boolean_770 boolean_flush in1 in4 in3 boolean_flush tag_boolean_1048 tag_boolean_770 boolean_flush integer_min boolean_dup boolean_flush boolean_flush integer_min in2 boolean_flush integer_min print_integer integer_mod boolean_and exec_s_when_autoconstructing (exec_swap (exec_rot () (exec_when () in1 boolean_invert_first_then_and exec_eq boolean_and integer_dup_times boolean_dup_items exec_rot () (exec_when () exec_s () (boolean_flush exec_eq) ()) ()) ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 3000
program: (integer_dup exec_empty boolean_flush tag_boolean_770 boolean_flush tag_boolean_770 boolean_flush in1 in4 in3 boolean_flush tag_boolean_1048 tag_boolean_770 boolean_flush integer_min boolean_dup boolean_flush boolean_flush integer_min in2 boolean_flush integer_min print_integer integer_mod boolean_and exec_s_when_autoconstructing (exec_swap (exec_rot () (exec_when () in1 boolean_invert_first_then_and exec_eq boolean_and integer_dup_times boolean_dup_items exec_rot () (exec_when () exec_s () (boolean_flush exec_eq) ()) ()) ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 3500
program: (integer_dup exec_empty boolean_flush tag_boolean_770 boolean_flush tag_boolean_770 boolean_flush in1 in4 in3 boolean_flush tag_boolean_1048 tag_boolean_770 boolean_flush integer_min boolean_dup boolean_flush boolean_flush integer_min in2 boolean_flush integer_min print_integer integer_mod boolean_and exec_s_when_autoconstructing (exec_swap (exec_rot () (exec_when () in1 boolean_invert_first_then_and exec_eq boolean_and integer_dup_times boolean_dup_items exec_rot () (exec_when () exec_s () (boolean_flush exec_eq) ()) ()) ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 4000
program: (integer_dup exec_empty boolean_flush tag_boolean_770 boolean_flush tag_boolean_770 boolean_flush in1 in4 in3 boolean_flush tag_boolean_1048 tag_boolean_770 boolean_flush integer_min boolean_dup boolean_flush boolean_flush integer_min in2 boolean_flush integer_min print_integer integer_mod boolean_and exec_s_when_autoconstructing (exec_swap (exec_rot () (exec_when () in1 boolean_invert_first_then_and exec_eq boolean_and integer_dup_times boolean_dup_items exec_rot () (exec_when () exec_s () (boolean_flush exec_eq) ()) ()) ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 4500
program: (integer_dup exec_empty boolean_flush tag_boolean_770 boolean_flush tag_boolean_770 boolean_flush in1 in4 in3 boolean_flush tag_boolean_1048 tag_boolean_770 boolean_flush integer_min boolean_dup boolean_flush boolean_flush integer_min in2 boolean_flush integer_min print_integer integer_mod boolean_and exec_s_when_autoconstructing (exec_swap (exec_rot () (exec_when () in1 boolean_invert_first_then_and exec_eq boolean_and integer_dup_times boolean_dup_items exec_rot () (exec_when () exec_s () (boolean_flush exec_eq) ()) ()) ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

step: 5000
program: (integer_dup exec_empty boolean_flush tag_boolean_770 boolean_flush tag_boolean_770 boolean_flush in1 in4 in3 boolean_flush tag_boolean_1048 tag_boolean_770 boolean_flush integer_min boolean_dup boolean_flush boolean_flush integer_min in2 boolean_flush integer_min print_integer integer_mod boolean_and exec_s_when_autoconstructing (exec_swap (exec_rot () (exec_when () in1 boolean_invert_first_then_and exec_eq boolean_and integer_dup_times boolean_dup_items exec_rot () (exec_when () exec_s () (boolean_flush exec_eq) ()) ()) ()) ()) () ())
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 57

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -21                 | Program output: -21                
Correct output: -53                 | Program output: -53                
Correct output: 1                   | Program output: 1                  
Correct output: 4                   | Program output: 4                  
Correct output: -94                 | Program output: -94                
Correct output: -68                 | Program output: -68                
Correct output: 69                  | Program output: 69                 
Correct output: -43                 | Program output: -43                
Correct output: -47                 | Program output: -47                
Correct output: -50                 | Program output: -50                
Correct output: 22                  | Program output: 22                 
Correct output: -73                 | Program output: -73                
Correct output: 85                  | Program output: 85                 
Correct output: -57                 | Program output: -57                
Correct output: 32                  | Program output: 32                 
Correct output: 17                  | Program output: 17                 
Correct output: 0                   | Program output: 0                  
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 20                  | Program output: 20                 
Correct output: 13                  | Program output: 13                 
Correct output: 36                  | Program output: 36                 
Correct output: 13                  | Program output: 13                 
Correct output: 50                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 7                   | Program output: 7                  
Correct output: 1                   | Program output: 1                  
Correct output: 8                   | Program output: 8                  
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 14                 
Correct output: 70                  | Program output: 70                 
Correct output: 25                  | Program output: 25                 
Correct output: 32                  | Program output: 32                 
Correct output: 36                  | Program output: 36                 
Correct output: 22                  | Program output: 22                 
Correct output: -57                 | Program output: -57                
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -25                 | Program output: -25                
Correct output: -35                 | Program output: -35                
Correct output: -58                 | Program output: -58                
Correct output: 59                  | Program output: 59                 
Correct output: -80                 | Program output: -80                
Correct output: -81                 | Program output: -81                
Correct output: -92                 | Program output: -92                
Correct output: -100                | Program output: -100               
Correct output: -62                 | Program output: -62                
Correct output: -97                 | Program output: -97                
Correct output: -97                 | Program output: -97                
Correct output: -100                | Program output: -100               
Correct output: -91                 | Program output: -91                
Correct output: -91                 | Program output: -91                
Correct output: -50                 | Program output: -50                
Correct output: -94                 | Program output: -94                
Correct output: -21                 | Program output: -21                
Correct output: -70                 | Program output: -70                
Correct output: -96                 | Program output: -96                
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -94                
Correct output: 7                   | Program output: 7                  
Correct output: -99                 | Program output: -99                
Correct output: -54                 | Program output: -54                
Correct output: -48                 | Program output: -48                
Correct output: -75                 | Program output: -75                
Correct output: -82                 | Program output: -82                
Correct output: -81                 | Program output: -81                
Correct output: -51                 | Program output: -51                
Correct output: -80                 | Program output: -80                
Correct output: -40                 | Program output: -40                
Correct output: -80                 | Program output: -80                
Correct output: -74                 | Program output: -74                
Correct output: -45                 | Program output: -45                
Correct output: -59                 | Program output: -59                
Correct output: -58                 | Program output: -58                
Correct output: -95                 | Program output: -95                
Correct output: 17                  | Program output: 17                 
Correct output: -57                 | Program output: -57                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -74                 | Program output: -74                
Correct output: -98                 | Program output: -98                
Correct output: -67                 | Program output: -67                
Correct output: -52                 | Program output: -52                
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: -84                
Correct output: -55                 | Program output: -55                
Correct output: -96                 | Program output: -96                
Correct output: 0                   | Program output: 0                  
Correct output: -83                 | Program output: -83                
Correct output: -93                 | Program output: -93                
Correct output: -33                 | Program output: -33                
Correct output: -68                 | Program output: -68                
Correct output: -92                 | Program output: -92                
Correct output: -70                 | Program output: -70                
Correct output: -9                  | Program output: -9                 
;;******************************
