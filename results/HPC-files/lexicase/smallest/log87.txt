Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x579dde54 clojush.problems.software.smallest$fn__7460@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@7e2a76be]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-4 -58 -4 -4] -58] [[0 0 80 0] 0] [[6 6 57 6] 6] [[-74 -74 -74 -55] -74] [[-80 -80 -80 -29] -80] [[89 89 -98 89] -98] [[-2 -2 -52 -2] -52] [[53 24 24 24] 24] [[91 91 20 91] 20] [[-11 -57 -57 -57] -57] [(26 26 26 26) 26] [(-15 -15 -15 -15) -15] [(54 54 54 54) 54] [(76 76 76 76) 76] [(61 61 61 61) 61] [(26 0 91 2) 0] [(16 22 43 95) 16] [(97 65 50 44) 44] [(89 24 84 52) 24] [(83 79 55 95) 55] [(75 31 37 2) 2] [(89 9 55 46) 9] [(54 22 81 72) 22] [(45 5 99 95) 5] [(27 90 51 54) 27] [(60 55 92 100) 55] [(82 82 5 49) 5] [(66 44 65 98) 44] [(88 30 39 56) 30] [(26 43 78 8) 8] [(41 88 93 41) 41] [(37 22 37 66) 22] [(64 42 1 88) 1] [(46 33 13 87) 13] [(26 90 72 54) 26] [(-37 -63 37 -95) -95] [(41 -79 90 53) -79] [(16 32 91 37) 16] [(1 -12 -67 -27) -67] [(24 38 -84 -65) -84] [(-25 59 -16 41) -25] [(33 29 -20 -8) -20] [(7 -95 -2 -80) -95] [(-86 -91 15 -68) -91] [(-51 8 -7 -31) -51] [(100 39 -3 10) -3] [(35 63 -96 31) -96] [(-9 10 26 22) -9] [(67 -12 27 12) -12] [(-17 46 9 -11) -17] [(17 53 72 -82) -82] [(-8 -78 -6 -100) -100] [(88 90 3 4) 3] [(-71 -36 -83 47) -83] [(-81 -74 -90 -88) -90] [(-90 7 -28 64) -90] [(-25 -55 -28 -27) -55] [(-77 84 -18 40) -77] [(-98 -93 20 -61) -98] [(17 -86 -37 -70) -86] [(-53 11 35 5) -53] [(3 -28 89 76) -28] [(-26 61 -46 -30) -46] [(-68 -80 -98 -96) -98] [(-72 -84 10 77) -84] [(13 20 48 39) 13] [(-91 67 -79 -37) -91] [(-98 -14 -21 10) -98] [(89 -27 98 -63) -63] [(-30 79 12 -5) -30] [(85 19 19 -51) -51] [(-27 39 -17 -87) -87] [(-81 -13 100 87) -81] [(98 90 -46 81) -46] [(-32 19 -4 58) -32] [(-84 0 -60 -4) -84] [(-64 -75 -18 96) -75] [(14 0 -58 -57) -58] [(18 -46 48 45) -46] [(78 76 65 -93) -93] [(-62 66 -8 67) -62] [(31 24 21 36) 21] [(34 -83 -32 7) -83] [(-44 69 99 91) -44] [(-99 1 30 36) -99] [(-42 -28 56 -99) -99] [(-24 -33 -87 -29) -87] [(-23 -1 -48 -2) -48] [(-8 -46 -1 97) -46] [(-14 -64 -19 -80) -80] [(13 -72 34 -98) -98] [(-64 -83 45 -60) -83] [(62 -95 98 69) -95] [(39 -24 -81 -23) -81] [(7 94 -68 -86) -86])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-4 -58 -4 -4] -58]
Train Case:   6 | Input/Output: [[0 0 80 0] 0]
Train Case:   7 | Input/Output: [[6 6 57 6] 6]
Train Case:   8 | Input/Output: [[-74 -74 -74 -55] -74]
Train Case:   9 | Input/Output: [[-80 -80 -80 -29] -80]
Train Case:  10 | Input/Output: [[89 89 -98 89] -98]
Train Case:  11 | Input/Output: [[-2 -2 -52 -2] -52]
Train Case:  12 | Input/Output: [[53 24 24 24] 24]
Train Case:  13 | Input/Output: [[91 91 20 91] 20]
Train Case:  14 | Input/Output: [[-11 -57 -57 -57] -57]
Train Case:  15 | Input/Output: [(26 26 26 26) 26]
Train Case:  16 | Input/Output: [(-15 -15 -15 -15) -15]
Train Case:  17 | Input/Output: [(54 54 54 54) 54]
Train Case:  18 | Input/Output: [(76 76 76 76) 76]
Train Case:  19 | Input/Output: [(61 61 61 61) 61]
Train Case:  20 | Input/Output: [(26 0 91 2) 0]
Train Case:  21 | Input/Output: [(16 22 43 95) 16]
Train Case:  22 | Input/Output: [(97 65 50 44) 44]
Train Case:  23 | Input/Output: [(89 24 84 52) 24]
Train Case:  24 | Input/Output: [(83 79 55 95) 55]
Train Case:  25 | Input/Output: [(75 31 37 2) 2]
Train Case:  26 | Input/Output: [(89 9 55 46) 9]
Train Case:  27 | Input/Output: [(54 22 81 72) 22]
Train Case:  28 | Input/Output: [(45 5 99 95) 5]
Train Case:  29 | Input/Output: [(27 90 51 54) 27]
Train Case:  30 | Input/Output: [(60 55 92 100) 55]
Train Case:  31 | Input/Output: [(82 82 5 49) 5]
Train Case:  32 | Input/Output: [(66 44 65 98) 44]
Train Case:  33 | Input/Output: [(88 30 39 56) 30]
Train Case:  34 | Input/Output: [(26 43 78 8) 8]
Train Case:  35 | Input/Output: [(41 88 93 41) 41]
Train Case:  36 | Input/Output: [(37 22 37 66) 22]
Train Case:  37 | Input/Output: [(64 42 1 88) 1]
Train Case:  38 | Input/Output: [(46 33 13 87) 13]
Train Case:  39 | Input/Output: [(26 90 72 54) 26]
Train Case:  40 | Input/Output: [(-37 -63 37 -95) -95]
Train Case:  41 | Input/Output: [(41 -79 90 53) -79]
Train Case:  42 | Input/Output: [(16 32 91 37) 16]
Train Case:  43 | Input/Output: [(1 -12 -67 -27) -67]
Train Case:  44 | Input/Output: [(24 38 -84 -65) -84]
Train Case:  45 | Input/Output: [(-25 59 -16 41) -25]
Train Case:  46 | Input/Output: [(33 29 -20 -8) -20]
Train Case:  47 | Input/Output: [(7 -95 -2 -80) -95]
Train Case:  48 | Input/Output: [(-86 -91 15 -68) -91]
Train Case:  49 | Input/Output: [(-51 8 -7 -31) -51]
Train Case:  50 | Input/Output: [(100 39 -3 10) -3]
Train Case:  51 | Input/Output: [(35 63 -96 31) -96]
Train Case:  52 | Input/Output: [(-9 10 26 22) -9]
Train Case:  53 | Input/Output: [(67 -12 27 12) -12]
Train Case:  54 | Input/Output: [(-17 46 9 -11) -17]
Train Case:  55 | Input/Output: [(17 53 72 -82) -82]
Train Case:  56 | Input/Output: [(-8 -78 -6 -100) -100]
Train Case:  57 | Input/Output: [(88 90 3 4) 3]
Train Case:  58 | Input/Output: [(-71 -36 -83 47) -83]
Train Case:  59 | Input/Output: [(-81 -74 -90 -88) -90]
Train Case:  60 | Input/Output: [(-90 7 -28 64) -90]
Train Case:  61 | Input/Output: [(-25 -55 -28 -27) -55]
Train Case:  62 | Input/Output: [(-77 84 -18 40) -77]
Train Case:  63 | Input/Output: [(-98 -93 20 -61) -98]
Train Case:  64 | Input/Output: [(17 -86 -37 -70) -86]
Train Case:  65 | Input/Output: [(-53 11 35 5) -53]
Train Case:  66 | Input/Output: [(3 -28 89 76) -28]
Train Case:  67 | Input/Output: [(-26 61 -46 -30) -46]
Train Case:  68 | Input/Output: [(-68 -80 -98 -96) -98]
Train Case:  69 | Input/Output: [(-72 -84 10 77) -84]
Train Case:  70 | Input/Output: [(13 20 48 39) 13]
Train Case:  71 | Input/Output: [(-91 67 -79 -37) -91]
Train Case:  72 | Input/Output: [(-98 -14 -21 10) -98]
Train Case:  73 | Input/Output: [(89 -27 98 -63) -63]
Train Case:  74 | Input/Output: [(-30 79 12 -5) -30]
Train Case:  75 | Input/Output: [(85 19 19 -51) -51]
Train Case:  76 | Input/Output: [(-27 39 -17 -87) -87]
Train Case:  77 | Input/Output: [(-81 -13 100 87) -81]
Train Case:  78 | Input/Output: [(98 90 -46 81) -46]
Train Case:  79 | Input/Output: [(-32 19 -4 58) -32]
Train Case:  80 | Input/Output: [(-84 0 -60 -4) -84]
Train Case:  81 | Input/Output: [(-64 -75 -18 96) -75]
Train Case:  82 | Input/Output: [(14 0 -58 -57) -58]
Train Case:  83 | Input/Output: [(18 -46 48 45) -46]
Train Case:  84 | Input/Output: [(78 76 65 -93) -93]
Train Case:  85 | Input/Output: [(-62 66 -8 67) -62]
Train Case:  86 | Input/Output: [(31 24 21 36) 21]
Train Case:  87 | Input/Output: [(34 -83 -32 7) -83]
Train Case:  88 | Input/Output: [(-44 69 99 91) -44]
Train Case:  89 | Input/Output: [(-99 1 30 36) -99]
Train Case:  90 | Input/Output: [(-42 -28 56 -99) -99]
Train Case:  91 | Input/Output: [(-24 -33 -87 -29) -87]
Train Case:  92 | Input/Output: [(-23 -1 -48 -2) -48]
Train Case:  93 | Input/Output: [(-8 -46 -1 97) -46]
Train Case:  94 | Input/Output: [(-14 -64 -19 -80) -80]
Train Case:  95 | Input/Output: [(13 -72 34 -98) -98]
Train Case:  96 | Input/Output: [(-64 -83 45 -60) -83]
Train Case:  97 | Input/Output: [(62 -95 98 69) -95]
Train Case:  98 | Input/Output: [(39 -24 -81 -23) -81]
Train Case:  99 | Input/Output: [(7 94 -68 -86) -86]
Test Case:   0 | Input/Output: [[85 85 72 85] 72]
Test Case:   1 | Input/Output: [[82 20 20 20] 20]
Test Case:   2 | Input/Output: [[19 19 19 -36] -36]
Test Case:   3 | Input/Output: [[94 94 -14 94] -14]
Test Case:   4 | Input/Output: [[-8 -8 -8 -4] -8]
Test Case:   5 | Input/Output: [[61 71 71 71] 61]
Test Case:   6 | Input/Output: [[64 64 64 39] 39]
Test Case:   7 | Input/Output: [[61 61 61 -68] -68]
Test Case:   8 | Input/Output: [[-61 -61 -61 93] -61]
Test Case:   9 | Input/Output: [[-20 -36 -36 -36] -36]
Test Case:  10 | Input/Output: [[43 -56 -56 -56] -56]
Test Case:  11 | Input/Output: [[29 29 25 29] 25]
Test Case:  12 | Input/Output: [[0 0 -19 0] -19]
Test Case:  13 | Input/Output: [[85 36 85 85] 36]
Test Case:  14 | Input/Output: [[81 81 84 81] 81]
Test Case:  15 | Input/Output: [[68 -50 68 68] -50]
Test Case:  16 | Input/Output: [[91 -92 -92 -92] -92]
Test Case:  17 | Input/Output: [[23 23 -67 23] -67]
Test Case:  18 | Input/Output: [[7 4 4 4] 4]
Test Case:  19 | Input/Output: [[-52 -52 -52 1] -52]
Test Case:  20 | Input/Output: [[-49 -15 -15 -15] -49]
Test Case:  21 | Input/Output: [[-42 -80 -80 -80] -80]
Test Case:  22 | Input/Output: [[-81 -81 28 -81] -81]
Test Case:  23 | Input/Output: [[-75 -75 -75 17] -75]
Test Case:  24 | Input/Output: [[-96 8 8 8] -96]
Test Case:  25 | Input/Output: [[3 3 83 3] 3]
Test Case:  26 | Input/Output: [[-14 -64 -64 -64] -64]
Test Case:  27 | Input/Output: [[68 -34 -34 -34] -34]
Test Case:  28 | Input/Output: [[-80 -64 -80 -80] -80]
Test Case:  29 | Input/Output: [[39 49 49 49] 39]
Test Case:  30 | Input/Output: [[84 84 99 84] 84]
Test Case:  31 | Input/Output: [[-71 -41 -41 -41] -71]
Test Case:  32 | Input/Output: [[-81 -81 -81 -13] -81]
Test Case:  33 | Input/Output: [[39 39 -2 39] -2]
Test Case:  34 | Input/Output: [[88 88 -33 88] -33]
Test Case:  35 | Input/Output: [[6 -60 6 6] -60]
Test Case:  36 | Input/Output: [[3 3 3 -88] -88]
Test Case:  37 | Input/Output: [[-14 36 -14 -14] -14]
Test Case:  38 | Input/Output: [[28 28 -79 28] -79]
Test Case:  39 | Input/Output: [[73 45 73 73] 45]
Test Case:  40 | Input/Output: [[-52 -52 -52 100] -52]
Test Case:  41 | Input/Output: [[32 32 21 32] 21]
Test Case:  42 | Input/Output: [[64 7 7 7] 7]
Test Case:  43 | Input/Output: [[-87 97 97 97] -87]
Test Case:  44 | Input/Output: [[-5 84 -5 -5] -5]
Test Case:  45 | Input/Output: [[-75 -76 -75 -75] -76]
Test Case:  46 | Input/Output: [[-15 -15 54 -15] -15]
Test Case:  47 | Input/Output: [[-19 -19 -25 -19] -25]
Test Case:  48 | Input/Output: [[-9 58 58 58] -9]
Test Case:  49 | Input/Output: [[11 11 11 20] 11]
Test Case:  50 | Input/Output: [[-23 -33 -23 -23] -33]
Test Case:  51 | Input/Output: [[16 2 16 16] 2]
Test Case:  52 | Input/Output: [[-66 -66 79 -66] -66]
Test Case:  53 | Input/Output: [[-86 -86 -86 95] -86]
Test Case:  54 | Input/Output: [[-95 -95 -44 -95] -95]
Test Case:  55 | Input/Output: [[-6 -6 -28 -6] -28]
Test Case:  56 | Input/Output: [[61 -9 -9 -9] -9]
Test Case:  57 | Input/Output: [[-45 -72 -72 -72] -72]
Test Case:  58 | Input/Output: [[-31 -31 -31 -45] -45]
Test Case:  59 | Input/Output: [[13 13 13 37] 13]
Test Case:  60 | Input/Output: [[-80 -80 -80 37] -80]
Test Case:  61 | Input/Output: [[-93 -55 -93 -93] -93]
Test Case:  62 | Input/Output: [[-91 -91 -91 -73] -91]
Test Case:  63 | Input/Output: [[-12 19 19 19] -12]
Test Case:  64 | Input/Output: [[-83 -83 -98 -83] -98]
Test Case:  65 | Input/Output: [[-66 -66 57 -66] -66]
Test Case:  66 | Input/Output: [[49 -38 -38 -38] -38]
Test Case:  67 | Input/Output: [[-93 -93 -92 -93] -93]
Test Case:  68 | Input/Output: [[92 31 92 92] 31]
Test Case:  69 | Input/Output: [[25 19 25 25] 19]
Test Case:  70 | Input/Output: [[25 25 25 33] 25]
Test Case:  71 | Input/Output: [[45 -86 45 45] -86]
Test Case:  72 | Input/Output: [[87 87 87 46] 46]
Test Case:  73 | Input/Output: [[31 29 31 31] 29]
Test Case:  74 | Input/Output: [[-65 -25 -65 -65] -65]
Test Case:  75 | Input/Output: [[-94 57 57 57] -94]
Test Case:  76 | Input/Output: [[28 85 28 28] 28]
Test Case:  77 | Input/Output: [[73 -43 -43 -43] -43]
Test Case:  78 | Input/Output: [[-47 -8 -47 -47] -47]
Test Case:  79 | Input/Output: [[-44 -44 -44 -46] -46]
Test Case:  80 | Input/Output: [[-93 -20 -20 -20] -93]
Test Case:  81 | Input/Output: [[-33 -33 -33 -27] -33]
Test Case:  82 | Input/Output: [[-11 -11 70 -11] -11]
Test Case:  83 | Input/Output: [[-41 -14 -41 -41] -41]
Test Case:  84 | Input/Output: [[13 13 13 70] 13]
Test Case:  85 | Input/Output: [[-43 -43 -43 -53] -53]
Test Case:  86 | Input/Output: [[-27 62 62 62] -27]
Test Case:  87 | Input/Output: [[-8 -34 -8 -8] -34]
Test Case:  88 | Input/Output: [[65 65 65 -36] -36]
Test Case:  89 | Input/Output: [[22 -44 -44 -44] -44]
Test Case:  90 | Input/Output: [[95 95 92 95] 92]
Test Case:  91 | Input/Output: [[37 37 -44 37] -44]
Test Case:  92 | Input/Output: [[100 17 100 100] 17]
Test Case:  93 | Input/Output: [[67 84 84 84] 67]
Test Case:  94 | Input/Output: [[83 31 31 31] 31]
Test Case:  95 | Input/Output: [[-26 -92 -92 -92] -92]
Test Case:  96 | Input/Output: [[-23 -23 -23 -41] -41]
Test Case:  97 | Input/Output: [[68 68 -51 68] -51]
Test Case:  98 | Input/Output: [[-20 -20 -20 -48] -48]
Test Case:  99 | Input/Output: [[23 43 43 43] 23]
Test Case: 100 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 101 | Input/Output: [(93 93 93 93) 93]
Test Case: 102 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 103 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 104 | Input/Output: [(19 19 19 19) 19]
Test Case: 105 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 106 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 107 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 108 | Input/Output: [(30 30 30 30) 30]
Test Case: 109 | Input/Output: [(80 80 80 80) 80]
Test Case: 110 | Input/Output: [(61 61 61 61) 61]
Test Case: 111 | Input/Output: [(16 16 16 16) 16]
Test Case: 112 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 113 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 114 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 115 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 116 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 117 | Input/Output: [(61 61 61 61) 61]
Test Case: 118 | Input/Output: [(7 7 7 7) 7]
Test Case: 119 | Input/Output: [(60 60 60 60) 60]
Test Case: 120 | Input/Output: [(93 93 93 93) 93]
Test Case: 121 | Input/Output: [(56 56 56 56) 56]
Test Case: 122 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 123 | Input/Output: [(89 89 89 89) 89]
Test Case: 124 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 125 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 126 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 127 | Input/Output: [(12 12 12 12) 12]
Test Case: 128 | Input/Output: [(63 63 63 63) 63]
Test Case: 129 | Input/Output: [(67 67 67 67) 67]
Test Case: 130 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 131 | Input/Output: [(75 75 75 75) 75]
Test Case: 132 | Input/Output: [(84 84 84 84) 84]
Test Case: 133 | Input/Output: [(44 44 44 44) 44]
Test Case: 134 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 135 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 136 | Input/Output: [(70 70 70 70) 70]
Test Case: 137 | Input/Output: [(74 74 74 74) 74]
Test Case: 138 | Input/Output: [(32 32 32 32) 32]
Test Case: 139 | Input/Output: [(64 64 64 64) 64]
Test Case: 140 | Input/Output: [(92 92 92 92) 92]
Test Case: 141 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 142 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 143 | Input/Output: [(43 43 43 43) 43]
Test Case: 144 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 145 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 146 | Input/Output: [(68 68 68 68) 68]
Test Case: 147 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 148 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 149 | Input/Output: [(37 37 37 37) 37]
Test Case: 150 | Input/Output: [(17 17 17 17) 17]
Test Case: 151 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 152 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 153 | Input/Output: [(93 93 93 93) 93]
Test Case: 154 | Input/Output: [(34 34 34 34) 34]
Test Case: 155 | Input/Output: [(91 91 91 91) 91]
Test Case: 156 | Input/Output: [(60 60 60 60) 60]
Test Case: 157 | Input/Output: [(26 26 26 26) 26]
Test Case: 158 | Input/Output: [(17 17 17 17) 17]
Test Case: 159 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 160 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 161 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 162 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 163 | Input/Output: [(40 40 40 40) 40]
Test Case: 164 | Input/Output: [(5 5 5 5) 5]
Test Case: 165 | Input/Output: [(65 65 65 65) 65]
Test Case: 166 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 167 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 168 | Input/Output: [(22 22 22 22) 22]
Test Case: 169 | Input/Output: [(19 19 19 19) 19]
Test Case: 170 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 171 | Input/Output: [(77 77 77 77) 77]
Test Case: 172 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 173 | Input/Output: [(24 24 24 24) 24]
Test Case: 174 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 175 | Input/Output: [(14 14 14 14) 14]
Test Case: 176 | Input/Output: [(93 93 93 93) 93]
Test Case: 177 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 178 | Input/Output: [(36 36 36 36) 36]
Test Case: 179 | Input/Output: [(66 66 66 66) 66]
Test Case: 180 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 181 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 182 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 183 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 184 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 185 | Input/Output: [(71 71 71 71) 71]
Test Case: 186 | Input/Output: [(3 3 3 3) 3]
Test Case: 187 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 188 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 189 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 190 | Input/Output: [(12 12 12 12) 12]
Test Case: 191 | Input/Output: [(99 99 99 99) 99]
Test Case: 192 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 193 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 194 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 195 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 196 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 197 | Input/Output: [(86 86 86 86) 86]
Test Case: 198 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 199 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 200 | Input/Output: [(8 51 72 46) 8]
Test Case: 201 | Input/Output: [(13 13 85 27) 13]
Test Case: 202 | Input/Output: [(21 70 91 89) 21]
Test Case: 203 | Input/Output: [(71 86 47 55) 47]
Test Case: 204 | Input/Output: [(36 61 6 100) 6]
Test Case: 205 | Input/Output: [(74 4 82 17) 4]
Test Case: 206 | Input/Output: [(52 33 28 60) 28]
Test Case: 207 | Input/Output: [(50 75 27 82) 27]
Test Case: 208 | Input/Output: [(72 52 13 73) 13]
Test Case: 209 | Input/Output: [(16 36 41 14) 14]
Test Case: 210 | Input/Output: [(52 69 59 39) 39]
Test Case: 211 | Input/Output: [(0 43 15 29) 0]
Test Case: 212 | Input/Output: [(20 62 87 74) 20]
Test Case: 213 | Input/Output: [(4 33 43 41) 4]
Test Case: 214 | Input/Output: [(69 73 65 2) 2]
Test Case: 215 | Input/Output: [(37 60 26 44) 26]
Test Case: 216 | Input/Output: [(98 79 50 19) 19]
Test Case: 217 | Input/Output: [(73 99 88 7) 7]
Test Case: 218 | Input/Output: [(12 67 25 57) 12]
Test Case: 219 | Input/Output: [(19 18 13 6) 6]
Test Case: 220 | Input/Output: [(99 66 34 97) 34]
Test Case: 221 | Input/Output: [(23 27 1 26) 1]
Test Case: 222 | Input/Output: [(50 45 67 68) 45]
Test Case: 223 | Input/Output: [(30 100 72 25) 25]
Test Case: 224 | Input/Output: [(8 89 8 9) 8]
Test Case: 225 | Input/Output: [(41 41 85 48) 41]
Test Case: 226 | Input/Output: [(17 24 50 25) 17]
Test Case: 227 | Input/Output: [(15 57 31 32) 15]
Test Case: 228 | Input/Output: [(20 33 79 2) 2]
Test Case: 229 | Input/Output: [(59 2 2 78) 2]
Test Case: 230 | Input/Output: [(0 27 48 96) 0]
Test Case: 231 | Input/Output: [(90 49 40 55) 40]
Test Case: 232 | Input/Output: [(39 80 82 95) 39]
Test Case: 233 | Input/Output: [(47 56 15 34) 15]
Test Case: 234 | Input/Output: [(94 68 4 74) 4]
Test Case: 235 | Input/Output: [(20 54 96 96) 20]
Test Case: 236 | Input/Output: [(22 3 80 64) 3]
Test Case: 237 | Input/Output: [(1 76 11 5) 1]
Test Case: 238 | Input/Output: [(61 71 92 15) 15]
Test Case: 239 | Input/Output: [(86 73 88 39) 39]
Test Case: 240 | Input/Output: [(34 48 45 77) 34]
Test Case: 241 | Input/Output: [(13 41 75 57) 13]
Test Case: 242 | Input/Output: [(6 3 36 97) 3]
Test Case: 243 | Input/Output: [(59 42 32 0) 0]
Test Case: 244 | Input/Output: [(33 46 69 79) 33]
Test Case: 245 | Input/Output: [(98 20 78 5) 5]
Test Case: 246 | Input/Output: [(99 6 61 50) 6]
Test Case: 247 | Input/Output: [(24 18 59 46) 18]
Test Case: 248 | Input/Output: [(2 43 98 92) 2]
Test Case: 249 | Input/Output: [(18 63 43 75) 18]
Test Case: 250 | Input/Output: [(40 51 3 25) 3]
Test Case: 251 | Input/Output: [(74 29 50 37) 29]
Test Case: 252 | Input/Output: [(90 69 22 51) 22]
Test Case: 253 | Input/Output: [(58 8 75 26) 8]
Test Case: 254 | Input/Output: [(1 87 49 2) 1]
Test Case: 255 | Input/Output: [(95 81 85 51) 51]
Test Case: 256 | Input/Output: [(16 76 70 98) 16]
Test Case: 257 | Input/Output: [(80 41 67 88) 41]
Test Case: 258 | Input/Output: [(59 10 33 26) 10]
Test Case: 259 | Input/Output: [(44 18 2 74) 2]
Test Case: 260 | Input/Output: [(66 98 9 45) 9]
Test Case: 261 | Input/Output: [(15 43 94 29) 15]
Test Case: 262 | Input/Output: [(8 21 24 67) 8]
Test Case: 263 | Input/Output: [(88 90 48 96) 48]
Test Case: 264 | Input/Output: [(17 31 78 41) 17]
Test Case: 265 | Input/Output: [(27 27 85 86) 27]
Test Case: 266 | Input/Output: [(79 22 44 84) 22]
Test Case: 267 | Input/Output: [(84 12 65 96) 12]
Test Case: 268 | Input/Output: [(39 5 19 49) 5]
Test Case: 269 | Input/Output: [(77 11 74 34) 11]
Test Case: 270 | Input/Output: [(39 96 16 27) 16]
Test Case: 271 | Input/Output: [(13 14 47 66) 13]
Test Case: 272 | Input/Output: [(34 23 84 36) 23]
Test Case: 273 | Input/Output: [(1 30 65 99) 1]
Test Case: 274 | Input/Output: [(97 6 74 53) 6]
Test Case: 275 | Input/Output: [(18 69 6 69) 6]
Test Case: 276 | Input/Output: [(68 76 83 31) 31]
Test Case: 277 | Input/Output: [(77 1 95 46) 1]
Test Case: 278 | Input/Output: [(30 90 43 25) 25]
Test Case: 279 | Input/Output: [(2 87 13 14) 2]
Test Case: 280 | Input/Output: [(20 1 53 73) 1]
Test Case: 281 | Input/Output: [(53 39 53 1) 1]
Test Case: 282 | Input/Output: [(45 38 35 62) 35]
Test Case: 283 | Input/Output: [(55 4 25 48) 4]
Test Case: 284 | Input/Output: [(0 49 10 50) 0]
Test Case: 285 | Input/Output: [(31 60 11 77) 11]
Test Case: 286 | Input/Output: [(66 44 89 46) 44]
Test Case: 287 | Input/Output: [(36 24 72 95) 24]
Test Case: 288 | Input/Output: [(67 19 4 41) 4]
Test Case: 289 | Input/Output: [(26 73 63 1) 1]
Test Case: 290 | Input/Output: [(35 25 40 78) 25]
Test Case: 291 | Input/Output: [(40 53 81 76) 40]
Test Case: 292 | Input/Output: [(7 32 81 67) 7]
Test Case: 293 | Input/Output: [(5 51 32 10) 5]
Test Case: 294 | Input/Output: [(72 70 94 6) 6]
Test Case: 295 | Input/Output: [(6 72 10 30) 6]
Test Case: 296 | Input/Output: [(13 78 66 11) 11]
Test Case: 297 | Input/Output: [(91 62 39 42) 39]
Test Case: 298 | Input/Output: [(54 42 21 94) 21]
Test Case: 299 | Input/Output: [(76 70 3 55) 3]
Test Case: 300 | Input/Output: [(31 57 44 15) 15]
Test Case: 301 | Input/Output: [(66 4 5 99) 4]
Test Case: 302 | Input/Output: [(38 31 13 52) 13]
Test Case: 303 | Input/Output: [(81 37 33 54) 33]
Test Case: 304 | Input/Output: [(64 0 26 17) 0]
Test Case: 305 | Input/Output: [(29 17 2 26) 2]
Test Case: 306 | Input/Output: [(37 8 19 40) 8]
Test Case: 307 | Input/Output: [(86 9 97 48) 9]
Test Case: 308 | Input/Output: [(70 81 46 9) 9]
Test Case: 309 | Input/Output: [(79 83 17 94) 17]
Test Case: 310 | Input/Output: [(25 82 57 56) 25]
Test Case: 311 | Input/Output: [(79 65 9 82) 9]
Test Case: 312 | Input/Output: [(84 22 68 20) 20]
Test Case: 313 | Input/Output: [(0 51 30 57) 0]
Test Case: 314 | Input/Output: [(10 49 6 83) 6]
Test Case: 315 | Input/Output: [(55 39 99 13) 13]
Test Case: 316 | Input/Output: [(14 34 100 80) 14]
Test Case: 317 | Input/Output: [(5 61 81 56) 5]
Test Case: 318 | Input/Output: [(91 2 89 72) 2]
Test Case: 319 | Input/Output: [(6 35 87 34) 6]
Test Case: 320 | Input/Output: [(79 45 31 39) 31]
Test Case: 321 | Input/Output: [(63 86 90 43) 43]
Test Case: 322 | Input/Output: [(90 76 6 12) 6]
Test Case: 323 | Input/Output: [(79 41 43 69) 41]
Test Case: 324 | Input/Output: [(20 76 43 91) 20]
Test Case: 325 | Input/Output: [(9 13 18 23) 9]
Test Case: 326 | Input/Output: [(54 55 54 39) 39]
Test Case: 327 | Input/Output: [(70 5 92 63) 5]
Test Case: 328 | Input/Output: [(49 27 84 2) 2]
Test Case: 329 | Input/Output: [(74 20 37 28) 20]
Test Case: 330 | Input/Output: [(26 5 19 91) 5]
Test Case: 331 | Input/Output: [(13 85 72 13) 13]
Test Case: 332 | Input/Output: [(84 67 72 60) 60]
Test Case: 333 | Input/Output: [(78 62 71 87) 62]
Test Case: 334 | Input/Output: [(76 21 33 3) 3]
Test Case: 335 | Input/Output: [(77 39 18 35) 18]
Test Case: 336 | Input/Output: [(15 56 39 68) 15]
Test Case: 337 | Input/Output: [(72 98 90 55) 55]
Test Case: 338 | Input/Output: [(22 6 4 49) 4]
Test Case: 339 | Input/Output: [(85 90 24 59) 24]
Test Case: 340 | Input/Output: [(60 91 23 13) 13]
Test Case: 341 | Input/Output: [(96 84 77 44) 44]
Test Case: 342 | Input/Output: [(59 64 74 68) 59]
Test Case: 343 | Input/Output: [(35 92 43 99) 35]
Test Case: 344 | Input/Output: [(86 95 35 47) 35]
Test Case: 345 | Input/Output: [(24 1 3 26) 1]
Test Case: 346 | Input/Output: [(94 39 80 12) 12]
Test Case: 347 | Input/Output: [(20 51 57 77) 20]
Test Case: 348 | Input/Output: [(65 96 40 94) 40]
Test Case: 349 | Input/Output: [(66 4 44 21) 4]
Test Case: 350 | Input/Output: [(66 41 93 61) 41]
Test Case: 351 | Input/Output: [(70 19 16 7) 7]
Test Case: 352 | Input/Output: [(95 71 42 90) 42]
Test Case: 353 | Input/Output: [(69 16 68 85) 16]
Test Case: 354 | Input/Output: [(45 6 26 41) 6]
Test Case: 355 | Input/Output: [(42 62 87 32) 32]
Test Case: 356 | Input/Output: [(55 30 60 9) 9]
Test Case: 357 | Input/Output: [(69 90 44 54) 44]
Test Case: 358 | Input/Output: [(88 59 30 52) 30]
Test Case: 359 | Input/Output: [(88 57 43 88) 43]
Test Case: 360 | Input/Output: [(82 33 14 93) 14]
Test Case: 361 | Input/Output: [(1 83 55 55) 1]
Test Case: 362 | Input/Output: [(64 12 25 63) 12]
Test Case: 363 | Input/Output: [(32 7 8 48) 7]
Test Case: 364 | Input/Output: [(93 99 38 40) 38]
Test Case: 365 | Input/Output: [(84 78 59 90) 59]
Test Case: 366 | Input/Output: [(23 4 50 96) 4]
Test Case: 367 | Input/Output: [(75 36 38 45) 36]
Test Case: 368 | Input/Output: [(61 33 87 5) 5]
Test Case: 369 | Input/Output: [(32 28 64 27) 27]
Test Case: 370 | Input/Output: [(46 77 73 68) 46]
Test Case: 371 | Input/Output: [(35 88 17 50) 17]
Test Case: 372 | Input/Output: [(96 96 56 88) 56]
Test Case: 373 | Input/Output: [(63 16 3 59) 3]
Test Case: 374 | Input/Output: [(77 37 96 58) 37]
Test Case: 375 | Input/Output: [(17 87 12 27) 12]
Test Case: 376 | Input/Output: [(91 42 94 51) 42]
Test Case: 377 | Input/Output: [(31 10 22 73) 10]
Test Case: 378 | Input/Output: [(53 39 82 47) 39]
Test Case: 379 | Input/Output: [(44 90 99 88) 44]
Test Case: 380 | Input/Output: [(21 2 100 57) 2]
Test Case: 381 | Input/Output: [(84 89 83 0) 0]
Test Case: 382 | Input/Output: [(45 9 96 51) 9]
Test Case: 383 | Input/Output: [(78 57 90 73) 57]
Test Case: 384 | Input/Output: [(80 81 31 51) 31]
Test Case: 385 | Input/Output: [(67 38 80 38) 38]
Test Case: 386 | Input/Output: [(72 7 87 56) 7]
Test Case: 387 | Input/Output: [(58 39 62 15) 15]
Test Case: 388 | Input/Output: [(0 9 66 53) 0]
Test Case: 389 | Input/Output: [(52 5 61 31) 5]
Test Case: 390 | Input/Output: [(76 37 56 94) 37]
Test Case: 391 | Input/Output: [(73 77 12 37) 12]
Test Case: 392 | Input/Output: [(1 43 20 93) 1]
Test Case: 393 | Input/Output: [(96 91 63 6) 6]
Test Case: 394 | Input/Output: [(82 57 0 3) 0]
Test Case: 395 | Input/Output: [(40 5 99 48) 5]
Test Case: 396 | Input/Output: [(76 6 10 80) 6]
Test Case: 397 | Input/Output: [(45 77 0 49) 0]
Test Case: 398 | Input/Output: [(64 87 49 51) 49]
Test Case: 399 | Input/Output: [(28 70 35 37) 28]
Test Case: 400 | Input/Output: [(-35 86 -95 -98) -98]
Test Case: 401 | Input/Output: [(63 43 -36 80) -36]
Test Case: 402 | Input/Output: [(-66 -89 -66 -31) -89]
Test Case: 403 | Input/Output: [(-13 -79 96 -45) -79]
Test Case: 404 | Input/Output: [(9 -59 -34 97) -59]
Test Case: 405 | Input/Output: [(79 -58 29 54) -58]
Test Case: 406 | Input/Output: [(-1 -7 24 -44) -44]
Test Case: 407 | Input/Output: [(-65 13 -50 -73) -73]
Test Case: 408 | Input/Output: [(-100 -26 -74 -97) -100]
Test Case: 409 | Input/Output: [(-40 91 13 11) -40]
Test Case: 410 | Input/Output: [(89 -16 -7 10) -16]
Test Case: 411 | Input/Output: [(-26 -14 61 -28) -28]
Test Case: 412 | Input/Output: [(-59 -63 10 -6) -63]
Test Case: 413 | Input/Output: [(80 51 64 61) 51]
Test Case: 414 | Input/Output: [(-64 -33 18 14) -64]
Test Case: 415 | Input/Output: [(-2 -1 -52 98) -52]
Test Case: 416 | Input/Output: [(-35 29 74 26) -35]
Test Case: 417 | Input/Output: [(57 -86 -27 -45) -86]
Test Case: 418 | Input/Output: [(-6 -9 -48 -4) -48]
Test Case: 419 | Input/Output: [(-100 92 -37 30) -100]
Test Case: 420 | Input/Output: [(-82 94 67 10) -82]
Test Case: 421 | Input/Output: [(60 93 -76 24) -76]
Test Case: 422 | Input/Output: [(-32 82 65 -39) -39]
Test Case: 423 | Input/Output: [(8 43 76 17) 8]
Test Case: 424 | Input/Output: [(-42 71 -2 58) -42]
Test Case: 425 | Input/Output: [(-42 -36 85 -37) -42]
Test Case: 426 | Input/Output: [(41 52 65 7) 7]
Test Case: 427 | Input/Output: [(-67 -98 -94 5) -98]
Test Case: 428 | Input/Output: [(-39 -85 -94 34) -94]
Test Case: 429 | Input/Output: [(-75 -79 -84 61) -84]
Test Case: 430 | Input/Output: [(49 48 35 -52) -52]
Test Case: 431 | Input/Output: [(0 -87 99 -45) -87]
Test Case: 432 | Input/Output: [(-88 35 2 -100) -100]
Test Case: 433 | Input/Output: [(-12 -77 20 76) -77]
Test Case: 434 | Input/Output: [(-43 39 33 -83) -83]
Test Case: 435 | Input/Output: [(36 -85 -88 57) -88]
Test Case: 436 | Input/Output: [(44 70 87 44) 44]
Test Case: 437 | Input/Output: [(-73 74 82 -83) -83]
Test Case: 438 | Input/Output: [(-45 -53 -64 42) -64]
Test Case: 439 | Input/Output: [(-51 89 90 -53) -53]
Test Case: 440 | Input/Output: [(-79 57 83 24) -79]
Test Case: 441 | Input/Output: [(55 -64 -34 50) -64]
Test Case: 442 | Input/Output: [(-85 -14 82 -29) -85]
Test Case: 443 | Input/Output: [(-92 -73 -37 -46) -92]
Test Case: 444 | Input/Output: [(-34 63 -83 -68) -83]
Test Case: 445 | Input/Output: [(-95 -16 -18 -25) -95]
Test Case: 446 | Input/Output: [(-54 88 77 34) -54]
Test Case: 447 | Input/Output: [(-84 -52 18 36) -84]
Test Case: 448 | Input/Output: [(89 64 -21 -81) -81]
Test Case: 449 | Input/Output: [(-74 41 53 -26) -74]
Test Case: 450 | Input/Output: [(-28 -16 -34 71) -34]
Test Case: 451 | Input/Output: [(81 -96 -86 11) -96]
Test Case: 452 | Input/Output: [(-41 13 -54 61) -54]
Test Case: 453 | Input/Output: [(-45 -60 -60 -60) -60]
Test Case: 454 | Input/Output: [(33 58 -3 53) -3]
Test Case: 455 | Input/Output: [(-94 27 -23 9) -94]
Test Case: 456 | Input/Output: [(91 -88 81 10) -88]
Test Case: 457 | Input/Output: [(-28 -91 61 -3) -91]
Test Case: 458 | Input/Output: [(13 -7 42 -10) -10]
Test Case: 459 | Input/Output: [(-27 -41 44 65) -41]
Test Case: 460 | Input/Output: [(68 -64 55 -72) -72]
Test Case: 461 | Input/Output: [(26 -7 -43 21) -43]
Test Case: 462 | Input/Output: [(-54 -66 12 80) -66]
Test Case: 463 | Input/Output: [(24 -63 75 -40) -63]
Test Case: 464 | Input/Output: [(-55 59 45 -66) -66]
Test Case: 465 | Input/Output: [(-36 43 -8 -70) -70]
Test Case: 466 | Input/Output: [(16 -36 72 74) -36]
Test Case: 467 | Input/Output: [(87 -49 71 -45) -49]
Test Case: 468 | Input/Output: [(-44 39 -32 -22) -44]
Test Case: 469 | Input/Output: [(74 43 90 -54) -54]
Test Case: 470 | Input/Output: [(-4 20 38 26) -4]
Test Case: 471 | Input/Output: [(31 52 -59 -22) -59]
Test Case: 472 | Input/Output: [(-12 87 -48 -37) -48]
Test Case: 473 | Input/Output: [(67 -17 92 -68) -68]
Test Case: 474 | Input/Output: [(49 -53 3 -11) -53]
Test Case: 475 | Input/Output: [(-100 -45 40 -5) -100]
Test Case: 476 | Input/Output: [(41 21 -5 -20) -20]
Test Case: 477 | Input/Output: [(-94 88 47 -28) -94]
Test Case: 478 | Input/Output: [(95 55 53 39) 39]
Test Case: 479 | Input/Output: [(75 76 -73 -35) -73]
Test Case: 480 | Input/Output: [(-24 47 -79 -25) -79]
Test Case: 481 | Input/Output: [(94 64 63 15) 15]
Test Case: 482 | Input/Output: [(97 55 -79 37) -79]
Test Case: 483 | Input/Output: [(-18 -66 -67 60) -67]
Test Case: 484 | Input/Output: [(90 2 -20 80) -20]
Test Case: 485 | Input/Output: [(-39 -51 -93 17) -93]
Test Case: 486 | Input/Output: [(-88 13 37 -94) -94]
Test Case: 487 | Input/Output: [(-89 66 15 -56) -89]
Test Case: 488 | Input/Output: [(-76 77 61 -50) -76]
Test Case: 489 | Input/Output: [(45 -12 82 32) -12]
Test Case: 490 | Input/Output: [(-43 73 -84 100) -84]
Test Case: 491 | Input/Output: [(37 -93 -63 -66) -93]
Test Case: 492 | Input/Output: [(-91 11 -26 -59) -91]
Test Case: 493 | Input/Output: [(7 82 -39 -98) -98]
Test Case: 494 | Input/Output: [(-8 -2 40 -92) -92]
Test Case: 495 | Input/Output: [(-95 90 -61 38) -95]
Test Case: 496 | Input/Output: [(-99 31 60 -96) -99]
Test Case: 497 | Input/Output: [(-67 -18 -26 90) -67]
Test Case: 498 | Input/Output: [(-65 -24 78 47) -65]
Test Case: 499 | Input/Output: [(86 -57 42 -81) -81]
Test Case: 500 | Input/Output: [(64 95 -27 -40) -40]
Test Case: 501 | Input/Output: [(-77 -15 -77 7) -77]
Test Case: 502 | Input/Output: [(-68 89 45 84) -68]
Test Case: 503 | Input/Output: [(-35 18 -54 -9) -54]
Test Case: 504 | Input/Output: [(-71 -97 -67 34) -97]
Test Case: 505 | Input/Output: [(75 -10 71 -49) -49]
Test Case: 506 | Input/Output: [(57 9 -29 -48) -48]
Test Case: 507 | Input/Output: [(-1 -6 -36 -91) -91]
Test Case: 508 | Input/Output: [(-78 -83 -10 28) -83]
Test Case: 509 | Input/Output: [(48 58 -5 -12) -12]
Test Case: 510 | Input/Output: [(3 -22 -64 -27) -64]
Test Case: 511 | Input/Output: [(-77 89 51 -45) -77]
Test Case: 512 | Input/Output: [(96 -54 -65 -17) -65]
Test Case: 513 | Input/Output: [(-93 49 -74 -63) -93]
Test Case: 514 | Input/Output: [(71 -90 57 44) -90]
Test Case: 515 | Input/Output: [(15 65 47 8) 8]
Test Case: 516 | Input/Output: [(88 67 86 -79) -79]
Test Case: 517 | Input/Output: [(-16 20 -72 11) -72]
Test Case: 518 | Input/Output: [(64 90 -77 79) -77]
Test Case: 519 | Input/Output: [(32 82 89 86) 32]
Test Case: 520 | Input/Output: [(61 52 -75 27) -75]
Test Case: 521 | Input/Output: [(-1 -39 -95 -16) -95]
Test Case: 522 | Input/Output: [(43 -88 -18 11) -88]
Test Case: 523 | Input/Output: [(61 -6 73 4) -6]
Test Case: 524 | Input/Output: [(51 -77 77 57) -77]
Test Case: 525 | Input/Output: [(-87 73 -80 -70) -87]
Test Case: 526 | Input/Output: [(51 41 18 41) 18]
Test Case: 527 | Input/Output: [(-57 -13 -50 -61) -61]
Test Case: 528 | Input/Output: [(-37 26 96 -6) -37]
Test Case: 529 | Input/Output: [(64 -63 100 86) -63]
Test Case: 530 | Input/Output: [(-59 50 -25 83) -59]
Test Case: 531 | Input/Output: [(-66 82 -88 54) -88]
Test Case: 532 | Input/Output: [(11 -98 22 11) -98]
Test Case: 533 | Input/Output: [(60 30 29 95) 29]
Test Case: 534 | Input/Output: [(-1 -5 5 -58) -58]
Test Case: 535 | Input/Output: [(-20 2 -41 -11) -41]
Test Case: 536 | Input/Output: [(6 -98 -88 -9) -98]
Test Case: 537 | Input/Output: [(-49 64 50 -40) -49]
Test Case: 538 | Input/Output: [(-88 -29 -50 -26) -88]
Test Case: 539 | Input/Output: [(72 -94 -95 33) -95]
Test Case: 540 | Input/Output: [(78 -100 30 -33) -100]
Test Case: 541 | Input/Output: [(25 19 83 26) 19]
Test Case: 542 | Input/Output: [(21 61 54 32) 21]
Test Case: 543 | Input/Output: [(63 -22 -76 -73) -76]
Test Case: 544 | Input/Output: [(78 -85 -8 -98) -98]
Test Case: 545 | Input/Output: [(-20 -53 68 92) -53]
Test Case: 546 | Input/Output: [(83 50 -73 -66) -73]
Test Case: 547 | Input/Output: [(-83 23 18 -36) -83]
Test Case: 548 | Input/Output: [(55 -59 -73 -8) -73]
Test Case: 549 | Input/Output: [(-87 -58 25 19) -87]
Test Case: 550 | Input/Output: [(35 100 -72 -96) -96]
Test Case: 551 | Input/Output: [(-68 87 17 -71) -71]
Test Case: 552 | Input/Output: [(-62 86 -36 45) -62]
Test Case: 553 | Input/Output: [(16 1 -64 65) -64]
Test Case: 554 | Input/Output: [(89 29 -64 -15) -64]
Test Case: 555 | Input/Output: [(89 -44 94 73) -44]
Test Case: 556 | Input/Output: [(-36 -60 31 -60) -60]
Test Case: 557 | Input/Output: [(94 -72 92 45) -72]
Test Case: 558 | Input/Output: [(-79 -51 -83 19) -83]
Test Case: 559 | Input/Output: [(28 -32 51 88) -32]
Test Case: 560 | Input/Output: [(66 79 10 41) 10]
Test Case: 561 | Input/Output: [(-35 13 -36 30) -36]
Test Case: 562 | Input/Output: [(-96 19 84 -70) -96]
Test Case: 563 | Input/Output: [(87 7 -80 87) -80]
Test Case: 564 | Input/Output: [(8 -9 64 30) -9]
Test Case: 565 | Input/Output: [(46 -7 -84 4) -84]
Test Case: 566 | Input/Output: [(-33 -98 0 17) -98]
Test Case: 567 | Input/Output: [(31 -36 -51 13) -51]
Test Case: 568 | Input/Output: [(-27 -1 13 28) -27]
Test Case: 569 | Input/Output: [(-16 45 20 -78) -78]
Test Case: 570 | Input/Output: [(-10 -97 67 -66) -97]
Test Case: 571 | Input/Output: [(16 -80 62 -57) -80]
Test Case: 572 | Input/Output: [(-91 -36 -20 -22) -91]
Test Case: 573 | Input/Output: [(69 21 45 45) 21]
Test Case: 574 | Input/Output: [(-11 43 -78 4) -78]
Test Case: 575 | Input/Output: [(-90 -1 57 -25) -90]
Test Case: 576 | Input/Output: [(-21 -44 38 57) -44]
Test Case: 577 | Input/Output: [(6 13 -91 -10) -91]
Test Case: 578 | Input/Output: [(51 -57 -100 76) -100]
Test Case: 579 | Input/Output: [(47 15 -24 -60) -60]
Test Case: 580 | Input/Output: [(3 8 -49 21) -49]
Test Case: 581 | Input/Output: [(-65 83 32 -23) -65]
Test Case: 582 | Input/Output: [(80 -58 -20 -55) -58]
Test Case: 583 | Input/Output: [(-10 77 -81 -44) -81]
Test Case: 584 | Input/Output: [(81 23 3 49) 3]
Test Case: 585 | Input/Output: [(-34 2 95 -15) -34]
Test Case: 586 | Input/Output: [(86 90 57 33) 33]
Test Case: 587 | Input/Output: [(72 11 -64 5) -64]
Test Case: 588 | Input/Output: [(84 -42 94 28) -42]
Test Case: 589 | Input/Output: [(16 96 30 76) 16]
Test Case: 590 | Input/Output: [(-29 -92 8 66) -92]
Test Case: 591 | Input/Output: [(-29 -8 62 36) -29]
Test Case: 592 | Input/Output: [(-44 -76 77 -51) -76]
Test Case: 593 | Input/Output: [(6 -11 45 74) -11]
Test Case: 594 | Input/Output: [(-32 -52 -24 -14) -52]
Test Case: 595 | Input/Output: [(68 50 72 -93) -93]
Test Case: 596 | Input/Output: [(72 -65 36 -41) -65]
Test Case: 597 | Input/Output: [(12 -52 51 2) -52]
Test Case: 598 | Input/Output: [(60 58 -21 -69) -69]
Test Case: 599 | Input/Output: [(-84 1 -80 71) -84]
Test Case: 600 | Input/Output: [(-17 -54 -53 -48) -54]
Test Case: 601 | Input/Output: [(4 44 -16 21) -16]
Test Case: 602 | Input/Output: [(-18 82 96 79) -18]
Test Case: 603 | Input/Output: [(-92 26 84 57) -92]
Test Case: 604 | Input/Output: [(99 -32 -6 62) -32]
Test Case: 605 | Input/Output: [(-70 29 -100 100) -100]
Test Case: 606 | Input/Output: [(79 61 -66 71) -66]
Test Case: 607 | Input/Output: [(81 0 6 -18) -18]
Test Case: 608 | Input/Output: [(40 -16 82 -89) -89]
Test Case: 609 | Input/Output: [(66 28 51 -99) -99]
Test Case: 610 | Input/Output: [(-84 -15 -64 52) -84]
Test Case: 611 | Input/Output: [(39 -88 -94 50) -94]
Test Case: 612 | Input/Output: [(60 50 85 -23) -23]
Test Case: 613 | Input/Output: [(-38 75 25 100) -38]
Test Case: 614 | Input/Output: [(60 75 7 69) 7]
Test Case: 615 | Input/Output: [(-7 32 85 -27) -27]
Test Case: 616 | Input/Output: [(36 0 -79 72) -79]
Test Case: 617 | Input/Output: [(30 -32 -90 -52) -90]
Test Case: 618 | Input/Output: [(8 -39 -26 46) -39]
Test Case: 619 | Input/Output: [(90 10 63 97) 10]
Test Case: 620 | Input/Output: [(68 47 -8 51) -8]
Test Case: 621 | Input/Output: [(-25 100 84 -11) -25]
Test Case: 622 | Input/Output: [(-69 58 -51 -30) -69]
Test Case: 623 | Input/Output: [(88 -59 -33 29) -59]
Test Case: 624 | Input/Output: [(32 20 12 8) 8]
Test Case: 625 | Input/Output: [(-48 0 51 -90) -90]
Test Case: 626 | Input/Output: [(64 59 27 63) 27]
Test Case: 627 | Input/Output: [(-17 -59 -71 -53) -71]
Test Case: 628 | Input/Output: [(-85 85 -3 -77) -85]
Test Case: 629 | Input/Output: [(-16 -72 -74 -6) -74]
Test Case: 630 | Input/Output: [(-58 -77 -22 -71) -77]
Test Case: 631 | Input/Output: [(-79 -51 -1 49) -79]
Test Case: 632 | Input/Output: [(-24 65 -91 -34) -91]
Test Case: 633 | Input/Output: [(3 -75 90 91) -75]
Test Case: 634 | Input/Output: [(-7 74 6 56) -7]
Test Case: 635 | Input/Output: [(-67 -26 -81 -40) -81]
Test Case: 636 | Input/Output: [(-49 19 -95 -38) -95]
Test Case: 637 | Input/Output: [(-90 -92 -39 100) -92]
Test Case: 638 | Input/Output: [(83 -49 83 -67) -67]
Test Case: 639 | Input/Output: [(-68 -100 -6 -80) -100]
Test Case: 640 | Input/Output: [(-21 -78 -75 44) -78]
Test Case: 641 | Input/Output: [(15 -43 -52 -28) -52]
Test Case: 642 | Input/Output: [(60 60 -26 93) -26]
Test Case: 643 | Input/Output: [(-1 -42 54 -38) -42]
Test Case: 644 | Input/Output: [(-44 81 58 -69) -69]
Test Case: 645 | Input/Output: [(-72 -69 -12 31) -72]
Test Case: 646 | Input/Output: [(-39 -87 -60 48) -87]
Test Case: 647 | Input/Output: [(86 72 68 -29) -29]
Test Case: 648 | Input/Output: [(-40 20 78 -80) -80]
Test Case: 649 | Input/Output: [(-55 -57 -32 10) -57]
Test Case: 650 | Input/Output: [(73 68 15 32) 15]
Test Case: 651 | Input/Output: [(65 9 57 10) 9]
Test Case: 652 | Input/Output: [(6 75 -26 -31) -31]
Test Case: 653 | Input/Output: [(-96 -67 -58 89) -96]
Test Case: 654 | Input/Output: [(-6 -5 -1 -66) -66]
Test Case: 655 | Input/Output: [(-99 64 -93 -24) -99]
Test Case: 656 | Input/Output: [(-94 -86 82 -45) -94]
Test Case: 657 | Input/Output: [(9 59 45 45) 9]
Test Case: 658 | Input/Output: [(-38 67 66 68) -38]
Test Case: 659 | Input/Output: [(83 45 35 -50) -50]
Test Case: 660 | Input/Output: [(18 -95 -43 -85) -95]
Test Case: 661 | Input/Output: [(97 -60 -27 -8) -60]
Test Case: 662 | Input/Output: [(-15 -51 22 -76) -76]
Test Case: 663 | Input/Output: [(73 79 58 33) 33]
Test Case: 664 | Input/Output: [(-82 -87 -52 98) -87]
Test Case: 665 | Input/Output: [(63 42 -87 -8) -87]
Test Case: 666 | Input/Output: [(-48 65 -63 -64) -64]
Test Case: 667 | Input/Output: [(25 24 2 -44) -44]
Test Case: 668 | Input/Output: [(-11 -4 28 76) -11]
Test Case: 669 | Input/Output: [(81 0 -34 57) -34]
Test Case: 670 | Input/Output: [(-6 83 75 -39) -39]
Test Case: 671 | Input/Output: [(34 12 79 -89) -89]
Test Case: 672 | Input/Output: [(30 -69 50 54) -69]
Test Case: 673 | Input/Output: [(33 -40 -100 17) -100]
Test Case: 674 | Input/Output: [(-22 -83 -12 -30) -83]
Test Case: 675 | Input/Output: [(41 -19 -27 2) -27]
Test Case: 676 | Input/Output: [(-84 -61 -30 5) -84]
Test Case: 677 | Input/Output: [(40 40 -85 -69) -85]
Test Case: 678 | Input/Output: [(92 10 -91 -86) -91]
Test Case: 679 | Input/Output: [(87 -67 -81 42) -81]
Test Case: 680 | Input/Output: [(9 3 -17 -53) -53]
Test Case: 681 | Input/Output: [(-78 14 97 -38) -78]
Test Case: 682 | Input/Output: [(54 88 -43 -70) -70]
Test Case: 683 | Input/Output: [(48 70 77 89) 48]
Test Case: 684 | Input/Output: [(34 8 -77 19) -77]
Test Case: 685 | Input/Output: [(60 10 -64 -22) -64]
Test Case: 686 | Input/Output: [(35 70 -8 -45) -45]
Test Case: 687 | Input/Output: [(10 -22 22 83) -22]
Test Case: 688 | Input/Output: [(56 -81 36 -26) -81]
Test Case: 689 | Input/Output: [(-92 1 92 53) -92]
Test Case: 690 | Input/Output: [(-79 82 -3 -41) -79]
Test Case: 691 | Input/Output: [(18 -86 5 -5) -86]
Test Case: 692 | Input/Output: [(-13 -8 -38 47) -38]
Test Case: 693 | Input/Output: [(30 33 -94 -79) -94]
Test Case: 694 | Input/Output: [(88 -86 -10 23) -86]
Test Case: 695 | Input/Output: [(24 -55 -47 -49) -55]
Test Case: 696 | Input/Output: [(-32 75 31 83) -32]
Test Case: 697 | Input/Output: [(65 -4 -32 -66) -66]
Test Case: 698 | Input/Output: [(-12 -31 -94 39) -94]
Test Case: 699 | Input/Output: [(17 21 51 97) 17]
Test Case: 700 | Input/Output: [(66 90 36 -16) -16]
Test Case: 701 | Input/Output: [(5 -56 89 -98) -98]
Test Case: 702 | Input/Output: [(-61 3 41 23) -61]
Test Case: 703 | Input/Output: [(-3 -56 70 -58) -58]
Test Case: 704 | Input/Output: [(-7 -86 48 45) -86]
Test Case: 705 | Input/Output: [(-30 -70 58 45) -70]
Test Case: 706 | Input/Output: [(75 7 -90 87) -90]
Test Case: 707 | Input/Output: [(-49 30 -60 -4) -60]
Test Case: 708 | Input/Output: [(-81 8 47 -25) -81]
Test Case: 709 | Input/Output: [(-85 42 16 83) -85]
Test Case: 710 | Input/Output: [(-39 84 -20 36) -39]
Test Case: 711 | Input/Output: [(82 -74 -34 71) -74]
Test Case: 712 | Input/Output: [(-47 59 -37 94) -47]
Test Case: 713 | Input/Output: [(6 -70 -84 -69) -84]
Test Case: 714 | Input/Output: [(-8 54 1 81) -8]
Test Case: 715 | Input/Output: [(-10 69 72 48) -10]
Test Case: 716 | Input/Output: [(84 -26 48 -75) -75]
Test Case: 717 | Input/Output: [(-15 11 76 43) -15]
Test Case: 718 | Input/Output: [(36 20 86 -20) -20]
Test Case: 719 | Input/Output: [(-22 5 74 70) -22]
Test Case: 720 | Input/Output: [(-68 -71 43 70) -71]
Test Case: 721 | Input/Output: [(-98 -93 100 13) -98]
Test Case: 722 | Input/Output: [(-12 74 -22 59) -22]
Test Case: 723 | Input/Output: [(-48 -36 93 48) -48]
Test Case: 724 | Input/Output: [(43 -21 -89 0) -89]
Test Case: 725 | Input/Output: [(29 53 64 -8) -8]
Test Case: 726 | Input/Output: [(-15 -31 -100 44) -100]
Test Case: 727 | Input/Output: [(-2 -4 -83 12) -83]
Test Case: 728 | Input/Output: [(95 -54 -92 -68) -92]
Test Case: 729 | Input/Output: [(42 100 -71 67) -71]
Test Case: 730 | Input/Output: [(-88 -85 -50 -91) -91]
Test Case: 731 | Input/Output: [(25 39 -33 -18) -33]
Test Case: 732 | Input/Output: [(99 57 75 55) 55]
Test Case: 733 | Input/Output: [(9 19 21 62) 9]
Test Case: 734 | Input/Output: [(32 -42 99 -12) -42]
Test Case: 735 | Input/Output: [(98 29 32 45) 29]
Test Case: 736 | Input/Output: [(55 -97 5 47) -97]
Test Case: 737 | Input/Output: [(-70 91 -13 -56) -70]
Test Case: 738 | Input/Output: [(-79 -68 -90 100) -90]
Test Case: 739 | Input/Output: [(17 5 20 -59) -59]
Test Case: 740 | Input/Output: [(80 79 -53 2) -53]
Test Case: 741 | Input/Output: [(84 -8 89 -50) -50]
Test Case: 742 | Input/Output: [(-86 -47 61 50) -86]
Test Case: 743 | Input/Output: [(-75 55 -80 -41) -80]
Test Case: 744 | Input/Output: [(12 -20 76 -57) -57]
Test Case: 745 | Input/Output: [(49 54 -45 -89) -89]
Test Case: 746 | Input/Output: [(41 -57 86 75) -57]
Test Case: 747 | Input/Output: [(-67 -99 -40 -15) -99]
Test Case: 748 | Input/Output: [(-35 57 -2 82) -35]
Test Case: 749 | Input/Output: [(-11 80 -18 -67) -67]
Test Case: 750 | Input/Output: [(-100 63 -18 82) -100]
Test Case: 751 | Input/Output: [(-70 51 -49 -98) -98]
Test Case: 752 | Input/Output: [(49 -25 -81 -66) -81]
Test Case: 753 | Input/Output: [(-18 -1 -17 55) -18]
Test Case: 754 | Input/Output: [(23 -75 -91 -72) -91]
Test Case: 755 | Input/Output: [(35 96 -31 -75) -75]
Test Case: 756 | Input/Output: [(54 -50 2 4) -50]
Test Case: 757 | Input/Output: [(79 13 7 -71) -71]
Test Case: 758 | Input/Output: [(88 60 5 17) 5]
Test Case: 759 | Input/Output: [(76 -82 71 -28) -82]
Test Case: 760 | Input/Output: [(69 72 -71 -85) -85]
Test Case: 761 | Input/Output: [(-48 -44 -69 14) -69]
Test Case: 762 | Input/Output: [(-45 -78 -37 100) -78]
Test Case: 763 | Input/Output: [(-42 -96 92 18) -96]
Test Case: 764 | Input/Output: [(25 46 -18 51) -18]
Test Case: 765 | Input/Output: [(96 -43 33 -34) -43]
Test Case: 766 | Input/Output: [(89 -76 10 88) -76]
Test Case: 767 | Input/Output: [(95 30 -53 -36) -53]
Test Case: 768 | Input/Output: [(23 -61 -60 -1) -61]
Test Case: 769 | Input/Output: [(-37 -80 46 -30) -80]
Test Case: 770 | Input/Output: [(-65 97 -10 -75) -75]
Test Case: 771 | Input/Output: [(70 -78 6 -75) -78]
Test Case: 772 | Input/Output: [(32 87 76 -66) -66]
Test Case: 773 | Input/Output: [(67 -27 46 -62) -62]
Test Case: 774 | Input/Output: [(-7 -29 -49 97) -49]
Test Case: 775 | Input/Output: [(-94 36 -70 -9) -94]
Test Case: 776 | Input/Output: [(-45 74 -54 55) -54]
Test Case: 777 | Input/Output: [(86 -60 -50 -24) -60]
Test Case: 778 | Input/Output: [(-2 -44 -38 17) -44]
Test Case: 779 | Input/Output: [(33 -5 -22 97) -22]
Test Case: 780 | Input/Output: [(70 -81 17 -51) -81]
Test Case: 781 | Input/Output: [(94 53 18 92) 18]
Test Case: 782 | Input/Output: [(34 -95 30 62) -95]
Test Case: 783 | Input/Output: [(-46 90 -9 -64) -64]
Test Case: 784 | Input/Output: [(75 60 -12 -81) -81]
Test Case: 785 | Input/Output: [(-86 91 -36 36) -86]
Test Case: 786 | Input/Output: [(-73 -82 35 63) -82]
Test Case: 787 | Input/Output: [(-2 -65 -39 14) -65]
Test Case: 788 | Input/Output: [(-98 23 20 72) -98]
Test Case: 789 | Input/Output: [(9 39 -3 11) -3]
Test Case: 790 | Input/Output: [(-13 89 36 -4) -13]
Test Case: 791 | Input/Output: [(73 -98 56 93) -98]
Test Case: 792 | Input/Output: [(60 -68 -64 -54) -68]
Test Case: 793 | Input/Output: [(-12 65 32 -75) -75]
Test Case: 794 | Input/Output: [(66 27 -20 83) -20]
Test Case: 795 | Input/Output: [(9 49 7 68) 7]
Test Case: 796 | Input/Output: [(-41 44 28 -32) -41]
Test Case: 797 | Input/Output: [(-43 82 55 -94) -94]
Test Case: 798 | Input/Output: [(100 -67 78 -15) -67]
Test Case: 799 | Input/Output: [(-54 -2 -91 22) -91]
Test Case: 800 | Input/Output: [(46 62 33 46) 33]
Test Case: 801 | Input/Output: [(7 -57 -24 -96) -96]
Test Case: 802 | Input/Output: [(31 -15 52 5) -15]
Test Case: 803 | Input/Output: [(-40 69 83 -59) -59]
Test Case: 804 | Input/Output: [(80 38 -1 77) -1]
Test Case: 805 | Input/Output: [(84 75 23 69) 23]
Test Case: 806 | Input/Output: [(18 77 17 2) 2]
Test Case: 807 | Input/Output: [(-86 -65 92 57) -86]
Test Case: 808 | Input/Output: [(-29 49 -90 -50) -90]
Test Case: 809 | Input/Output: [(74 3 42 42) 3]
Test Case: 810 | Input/Output: [(46 -10 -19 12) -19]
Test Case: 811 | Input/Output: [(-85 91 -27 63) -85]
Test Case: 812 | Input/Output: [(-19 65 30 -38) -38]
Test Case: 813 | Input/Output: [(-88 13 30 92) -88]
Test Case: 814 | Input/Output: [(40 48 39 -80) -80]
Test Case: 815 | Input/Output: [(3 -78 -35 -72) -78]
Test Case: 816 | Input/Output: [(72 -97 -23 -21) -97]
Test Case: 817 | Input/Output: [(-36 23 -38 11) -38]
Test Case: 818 | Input/Output: [(96 86 -97 -80) -97]
Test Case: 819 | Input/Output: [(59 -61 57 84) -61]
Test Case: 820 | Input/Output: [(85 50 -37 -45) -45]
Test Case: 821 | Input/Output: [(-77 -18 -32 -78) -78]
Test Case: 822 | Input/Output: [(31 -55 88 -1) -55]
Test Case: 823 | Input/Output: [(-64 -68 53 -12) -68]
Test Case: 824 | Input/Output: [(67 -16 -86 25) -86]
Test Case: 825 | Input/Output: [(95 -13 -3 26) -13]
Test Case: 826 | Input/Output: [(-42 92 86 38) -42]
Test Case: 827 | Input/Output: [(-13 64 -55 6) -55]
Test Case: 828 | Input/Output: [(-4 60 -60 -74) -74]
Test Case: 829 | Input/Output: [(-32 -71 -64 40) -71]
Test Case: 830 | Input/Output: [(56 31 46 -26) -26]
Test Case: 831 | Input/Output: [(-31 -55 51 32) -55]
Test Case: 832 | Input/Output: [(1 -62 -60 19) -62]
Test Case: 833 | Input/Output: [(68 -66 -71 -55) -71]
Test Case: 834 | Input/Output: [(50 0 99 45) 0]
Test Case: 835 | Input/Output: [(-95 80 4 8) -95]
Test Case: 836 | Input/Output: [(24 -10 99 -64) -64]
Test Case: 837 | Input/Output: [(-74 33 88 57) -74]
Test Case: 838 | Input/Output: [(62 -84 1 -13) -84]
Test Case: 839 | Input/Output: [(-20 -60 44 11) -60]
Test Case: 840 | Input/Output: [(-11 38 -4 83) -11]
Test Case: 841 | Input/Output: [(-18 81 37 83) -18]
Test Case: 842 | Input/Output: [(-42 -78 -39 42) -78]
Test Case: 843 | Input/Output: [(96 -99 -24 -51) -99]
Test Case: 844 | Input/Output: [(40 -100 -23 73) -100]
Test Case: 845 | Input/Output: [(-7 78 -41 60) -41]
Test Case: 846 | Input/Output: [(74 -13 -21 -65) -65]
Test Case: 847 | Input/Output: [(-68 56 26 32) -68]
Test Case: 848 | Input/Output: [(-33 -85 56 34) -85]
Test Case: 849 | Input/Output: [(41 45 -36 -97) -97]
Test Case: 850 | Input/Output: [(55 1 94 -20) -20]
Test Case: 851 | Input/Output: [(-75 87 23 -37) -75]
Test Case: 852 | Input/Output: [(89 -29 85 86) -29]
Test Case: 853 | Input/Output: [(-57 -49 -52 -81) -81]
Test Case: 854 | Input/Output: [(21 71 -8 -41) -41]
Test Case: 855 | Input/Output: [(-43 96 41 -68) -68]
Test Case: 856 | Input/Output: [(-35 -39 -71 47) -71]
Test Case: 857 | Input/Output: [(-37 17 -24 -4) -37]
Test Case: 858 | Input/Output: [(5 -12 43 -34) -34]
Test Case: 859 | Input/Output: [(-41 -7 -75 -48) -75]
Test Case: 860 | Input/Output: [(-64 -50 52 94) -64]
Test Case: 861 | Input/Output: [(20 92 -21 -91) -91]
Test Case: 862 | Input/Output: [(56 -8 29 -8) -8]
Test Case: 863 | Input/Output: [(-67 -54 14 -31) -67]
Test Case: 864 | Input/Output: [(-6 21 39 72) -6]
Test Case: 865 | Input/Output: [(94 -30 -71 -30) -71]
Test Case: 866 | Input/Output: [(-77 -81 -70 -18) -81]
Test Case: 867 | Input/Output: [(-18 40 -16 -99) -99]
Test Case: 868 | Input/Output: [(-66 9 -32 29) -66]
Test Case: 869 | Input/Output: [(75 -65 -14 97) -65]
Test Case: 870 | Input/Output: [(50 98 16 61) 16]
Test Case: 871 | Input/Output: [(-54 97 -21 7) -54]
Test Case: 872 | Input/Output: [(-17 -12 -44 33) -44]
Test Case: 873 | Input/Output: [(-24 -100 62 39) -100]
Test Case: 874 | Input/Output: [(-54 -98 -45 18) -98]
Test Case: 875 | Input/Output: [(-44 93 -34 -87) -87]
Test Case: 876 | Input/Output: [(41 -92 -6 48) -92]
Test Case: 877 | Input/Output: [(-55 -89 -23 79) -89]
Test Case: 878 | Input/Output: [(79 39 -81 33) -81]
Test Case: 879 | Input/Output: [(-15 1 93 32) -15]
Test Case: 880 | Input/Output: [(52 24 78 56) 24]
Test Case: 881 | Input/Output: [(51 69 -30 -61) -61]
Test Case: 882 | Input/Output: [(-97 -98 -57 3) -98]
Test Case: 883 | Input/Output: [(23 36 -80 48) -80]
Test Case: 884 | Input/Output: [(-40 69 91 -9) -40]
Test Case: 885 | Input/Output: [(-28 11 24 83) -28]
Test Case: 886 | Input/Output: [(84 33 -56 28) -56]
Test Case: 887 | Input/Output: [(95 66 -37 21) -37]
Test Case: 888 | Input/Output: [(12 28 -59 -9) -59]
Test Case: 889 | Input/Output: [(11 7 11 -51) -51]
Test Case: 890 | Input/Output: [(-80 89 -97 13) -97]
Test Case: 891 | Input/Output: [(-19 -77 93 -49) -77]
Test Case: 892 | Input/Output: [(-44 -12 -78 -70) -78]
Test Case: 893 | Input/Output: [(-78 -61 81 23) -78]
Test Case: 894 | Input/Output: [(35 -78 6 92) -78]
Test Case: 895 | Input/Output: [(-13 36 -95 -74) -95]
Test Case: 896 | Input/Output: [(-76 44 -50 -6) -76]
Test Case: 897 | Input/Output: [(-26 98 74 -34) -34]
Test Case: 898 | Input/Output: [(-27 1 -62 -80) -80]
Test Case: 899 | Input/Output: [(87 -10 -87 -30) -87]
Test Case: 900 | Input/Output: [(50 47 -100 -19) -100]
Test Case: 901 | Input/Output: [(-64 -56 61 18) -64]
Test Case: 902 | Input/Output: [(-86 14 96 -20) -86]
Test Case: 903 | Input/Output: [(44 38 42 -35) -35]
Test Case: 904 | Input/Output: [(28 83 39 -18) -18]
Test Case: 905 | Input/Output: [(-44 -19 56 60) -44]
Test Case: 906 | Input/Output: [(-36 -48 30 -52) -52]
Test Case: 907 | Input/Output: [(-56 -65 61 31) -65]
Test Case: 908 | Input/Output: [(-51 -63 79 52) -63]
Test Case: 909 | Input/Output: [(-100 6 63 -33) -100]
Test Case: 910 | Input/Output: [(53 58 97 -22) -22]
Test Case: 911 | Input/Output: [(74 -71 39 -79) -79]
Test Case: 912 | Input/Output: [(-72 4 4 -94) -94]
Test Case: 913 | Input/Output: [(82 13 78 -27) -27]
Test Case: 914 | Input/Output: [(90 96 64 -80) -80]
Test Case: 915 | Input/Output: [(76 -37 62 76) -37]
Test Case: 916 | Input/Output: [(-16 20 -61 -48) -61]
Test Case: 917 | Input/Output: [(-87 70 80 -55) -87]
Test Case: 918 | Input/Output: [(-40 -2 39 -29) -40]
Test Case: 919 | Input/Output: [(-5 18 80 -7) -7]
Test Case: 920 | Input/Output: [(-20 -65 68 44) -65]
Test Case: 921 | Input/Output: [(16 -2 -19 -88) -88]
Test Case: 922 | Input/Output: [(-83 16 -54 72) -83]
Test Case: 923 | Input/Output: [(-11 -30 -65 86) -65]
Test Case: 924 | Input/Output: [(-18 -14 57 22) -18]
Test Case: 925 | Input/Output: [(36 91 79 10) 10]
Test Case: 926 | Input/Output: [(69 -3 -1 20) -3]
Test Case: 927 | Input/Output: [(-16 -54 68 63) -54]
Test Case: 928 | Input/Output: [(66 61 96 71) 61]
Test Case: 929 | Input/Output: [(-53 33 -64 -11) -64]
Test Case: 930 | Input/Output: [(21 -23 -87 -29) -87]
Test Case: 931 | Input/Output: [(36 56 -64 -51) -64]
Test Case: 932 | Input/Output: [(-73 -66 20 35) -73]
Test Case: 933 | Input/Output: [(94 40 -53 -32) -53]
Test Case: 934 | Input/Output: [(-32 -12 -82 -99) -99]
Test Case: 935 | Input/Output: [(45 34 33 -54) -54]
Test Case: 936 | Input/Output: [(-88 79 87 89) -88]
Test Case: 937 | Input/Output: [(95 -67 -25 26) -67]
Test Case: 938 | Input/Output: [(-62 -85 0 18) -85]
Test Case: 939 | Input/Output: [(3 39 -73 -59) -73]
Test Case: 940 | Input/Output: [(8 76 100 28) 8]
Test Case: 941 | Input/Output: [(-34 41 91 64) -34]
Test Case: 942 | Input/Output: [(-77 -68 74 -62) -77]
Test Case: 943 | Input/Output: [(46 -38 91 -41) -41]
Test Case: 944 | Input/Output: [(-31 86 -76 79) -76]
Test Case: 945 | Input/Output: [(-53 -55 -26 -49) -55]
Test Case: 946 | Input/Output: [(41 -43 44 -72) -72]
Test Case: 947 | Input/Output: [(-23 17 90 65) -23]
Test Case: 948 | Input/Output: [(-95 -71 -29 -87) -95]
Test Case: 949 | Input/Output: [(-7 56 24 -23) -23]
Test Case: 950 | Input/Output: [(-90 93 99 40) -90]
Test Case: 951 | Input/Output: [(-40 -81 52 -30) -81]
Test Case: 952 | Input/Output: [(5 -81 44 36) -81]
Test Case: 953 | Input/Output: [(93 -91 93 25) -91]
Test Case: 954 | Input/Output: [(-15 -52 -41 9) -52]
Test Case: 955 | Input/Output: [(-45 -4 -82 -39) -82]
Test Case: 956 | Input/Output: [(-19 -26 78 -23) -26]
Test Case: 957 | Input/Output: [(-60 -26 -31 -39) -60]
Test Case: 958 | Input/Output: [(82 -15 -85 58) -85]
Test Case: 959 | Input/Output: [(53 -22 7 -50) -50]
Test Case: 960 | Input/Output: [(46 87 19 45) 19]
Test Case: 961 | Input/Output: [(-8 38 -43 -65) -65]
Test Case: 962 | Input/Output: [(-53 41 -7 -63) -63]
Test Case: 963 | Input/Output: [(72 71 -12 -38) -38]
Test Case: 964 | Input/Output: [(82 -8 78 27) -8]
Test Case: 965 | Input/Output: [(57 49 4 4) 4]
Test Case: 966 | Input/Output: [(8 -55 -61 -26) -61]
Test Case: 967 | Input/Output: [(28 -62 -50 82) -62]
Test Case: 968 | Input/Output: [(-27 -67 -34 1) -67]
Test Case: 969 | Input/Output: [(-21 -45 -52 88) -52]
Test Case: 970 | Input/Output: [(82 -67 -49 -7) -67]
Test Case: 971 | Input/Output: [(18 -36 19 -65) -65]
Test Case: 972 | Input/Output: [(64 -73 22 -59) -73]
Test Case: 973 | Input/Output: [(67 -46 -54 -48) -54]
Test Case: 974 | Input/Output: [(-64 22 72 50) -64]
Test Case: 975 | Input/Output: [(10 99 -77 96) -77]
Test Case: 976 | Input/Output: [(-93 -95 35 91) -95]
Test Case: 977 | Input/Output: [(23 18 26 -49) -49]
Test Case: 978 | Input/Output: [(-71 94 46 93) -71]
Test Case: 979 | Input/Output: [(-99 35 43 -21) -99]
Test Case: 980 | Input/Output: [(-16 30 57 -4) -16]
Test Case: 981 | Input/Output: [(47 45 30 -21) -21]
Test Case: 982 | Input/Output: [(83 37 37 2) 2]
Test Case: 983 | Input/Output: [(100 -35 -68 -71) -71]
Test Case: 984 | Input/Output: [(53 36 10 68) 10]
Test Case: 985 | Input/Output: [(17 21 95 42) 17]
Test Case: 986 | Input/Output: [(-72 -100 54 -3) -100]
Test Case: 987 | Input/Output: [(-29 -72 5 -42) -72]
Test Case: 988 | Input/Output: [(22 72 -52 18) -52]
Test Case: 989 | Input/Output: [(29 8 -71 -10) -71]
Test Case: 990 | Input/Output: [(9 55 26 56) 9]
Test Case: 991 | Input/Output: [(50 -61 99 -98) -98]
Test Case: 992 | Input/Output: [(37 -18 54 16) -18]
Test Case: 993 | Input/Output: [(94 -8 -15 57) -15]
Test Case: 994 | Input/Output: [(-56 24 39 31) -56]
Test Case: 995 | Input/Output: [(38 -70 46 -32) -70]
Test Case: 996 | Input/Output: [(-89 -54 78 0) -89]
Test Case: 997 | Input/Output: [(-91 100 -78 -97) -97]
Test Case: 998 | Input/Output: [(10 97 -6 88) -6]
Test Case: 999 | Input/Output: [(12 37 -68 69) -68]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x579dde54 clojush.problems.software.smallest$fn__7460@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@7e2a76be]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
random-screen = false
random-seed = 19 37 -47 0 -121 -64 16 86 -117 -61 -23 -100 59 73 -81 -5
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-4 -58 -4 -4] -58] [[0 0 80 0] 0] [[6 6 57 6] 6] [[-74 -74 -74 -55] -74] [[-80 -80 -80 -29] -80] [[89 89 -98 89] -98] [[-2 -2 -52 -2] -52] [[53 24 24 24] 24] [[91 91 20 91] 20] [[-11 -57 -57 -57] -57] [(26 26 26 26) 26] [(-15 -15 -15 -15) -15] [(54 54 54 54) 54] [(76 76 76 76) 76] [(61 61 61 61) 61] [(26 0 91 2) 0] [(16 22 43 95) 16] [(97 65 50 44) 44] [(89 24 84 52) 24] [(83 79 55 95) 55] [(75 31 37 2) 2] [(89 9 55 46) 9] [(54 22 81 72) 22] [(45 5 99 95) 5] [(27 90 51 54) 27] [(60 55 92 100) 55] [(82 82 5 49) 5] [(66 44 65 98) 44] [(88 30 39 56) 30] [(26 43 78 8) 8] [(41 88 93 41) 41] [(37 22 37 66) 22] [(64 42 1 88) 1] [(46 33 13 87) 13] [(26 90 72 54) 26] [(-37 -63 37 -95) -95] [(41 -79 90 53) -79] [(16 32 91 37) 16] [(1 -12 -67 -27) -67] [(24 38 -84 -65) -84] [(-25 59 -16 41) -25] [(33 29 -20 -8) -20] [(7 -95 -2 -80) -95] [(-86 -91 15 -68) -91] [(-51 8 -7 -31) -51] [(100 39 -3 10) -3] [(35 63 -96 31) -96] [(-9 10 26 22) -9] [(67 -12 27 12) -12] [(-17 46 9 -11) -17] [(17 53 72 -82) -82] [(-8 -78 -6 -100) -100] [(88 90 3 4) 3] [(-71 -36 -83 47) -83] [(-81 -74 -90 -88) -90] [(-90 7 -28 64) -90] [(-25 -55 -28 -27) -55] [(-77 84 -18 40) -77] [(-98 -93 20 -61) -98] [(17 -86 -37 -70) -86] [(-53 11 35 5) -53] [(3 -28 89 76) -28] [(-26 61 -46 -30) -46] [(-68 -80 -98 -96) -98] [(-72 -84 10 77) -84] [(13 20 48 39) 13] [(-91 67 -79 -37) -91] [(-98 -14 -21 10) -98] [(89 -27 98 -63) -63] [(-30 79 12 -5) -30] [(85 19 19 -51) -51] [(-27 39 -17 -87) -87] [(-81 -13 100 87) -81] [(98 90 -46 81) -46] [(-32 19 -4 58) -32] [(-84 0 -60 -4) -84] [(-64 -75 -18 96) -75] [(14 0 -58 -57) -58] [(18 -46 48 45) -46] [(78 76 65 -93) -93] [(-62 66 -8 67) -62] [(31 24 21 36) 21] [(34 -83 -32 7) -83] [(-44 69 99 91) -44] [(-99 1 30 36) -99] [(-42 -28 56 -99) -99] [(-24 -33 -87 -29) -87] [(-23 -1 -48 -2) -48] [(-8 -46 -1 97) -46] [(-14 -64 -19 -80) -80] [(13 -72 34 -98) -98] [(-64 -83 45 -60) -83] [(62 -95 98 69) -95] [(39 -24 -81 -23) -81] [(7 94 -68 -86) -86])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -4                 
Correct output: 0                   | Program output: 80                 
Correct output: 6                   | Program output: 57                 
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -52                
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 91                 
Correct output: 16                  | Program output: 43                 
Correct output: 44                  | Program output: 50                 
Correct output: 24                  | Program output: 84                 
Correct output: 55                  | Program output: 55                 
Correct output: 2                   | Program output: 37                 
Correct output: 9                   | Program output: 55                 
Correct output: 22                  | Program output: 81                 
Correct output: 5                   | Program output: 99                 
Correct output: 27                  | Program output: 51                 
Correct output: 55                  | Program output: 92                 
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 65                 
Correct output: 30                  | Program output: 39                 
Correct output: 8                   | Program output: 78                 
Correct output: 41                  | Program output: 93                 
Correct output: 22                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 13                  | Program output: 13                 
Correct output: 26                  | Program output: 72                 
Correct output: -95                 | Program output: 37                 
Correct output: -79                 | Program output: 90                 
Correct output: 16                  | Program output: 91                 
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: -16                
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -2                 
Correct output: -91                 | Program output: 15                 
Correct output: -51                 | Program output: -7                 
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -96                
Correct output: -9                  | Program output: 26                 
Correct output: -12                 | Program output: 27                 
Correct output: -17                 | Program output: 9                  
Correct output: -82                 | Program output: 72                 
Correct output: -100                | Program output: -6                 
Correct output: 3                   | Program output: 3                  
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -28                
Correct output: -55                 | Program output: -28                
Correct output: -77                 | Program output: -18                
Correct output: -98                 | Program output: 20                 
Correct output: -86                 | Program output: -37                
Correct output: -53                 | Program output: 35                 
Correct output: -28                 | Program output: 89                 
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: 10                 
Correct output: 13                  | Program output: 48                 
Correct output: -91                 | Program output: -79                
Correct output: -98                 | Program output: -21                
Correct output: -63                 | Program output: 98                 
Correct output: -30                 | Program output: 12                 
Correct output: -51                 | Program output: 19                 
Correct output: -87                 | Program output: -17                
Correct output: -81                 | Program output: 100                
Correct output: -46                 | Program output: -46                
Correct output: -32                 | Program output: -4                 
Correct output: -84                 | Program output: -60                
Correct output: -75                 | Program output: -18                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 48                 
Correct output: -93                 | Program output: 65                 
Correct output: -62                 | Program output: -8                 
Correct output: 21                  | Program output: 21                 
Correct output: -83                 | Program output: -32                
Correct output: -44                 | Program output: 99                 
Correct output: -99                 | Program output: 30                 
Correct output: -99                 | Program output: 56                 
Correct output: -87                 | Program output: -87                
Correct output: -48                 | Program output: -48                
Correct output: -46                 | Program output: -1                 
Correct output: -80                 | Program output: -19                
Correct output: -98                 | Program output: 34                 
Correct output: -83                 | Program output: 45                 
Correct output: -95                 | Program output: 98                 
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction 22} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 2, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup} {:close 2, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction print_newline} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and})
Lexicase best program: (integer_lt in3 exec_do*while (print_integer integer_yank) boolean_not boolean_and integer_yank integer_dup_times boolean_pop exec_k (integer_lte integer_dup boolean_stackdepth) (integer_gt exec_if (exec_do*while (integer_mult 22 integer_min boolean_or) integer_eq) () boolean_frominteger boolean_yankdup integer_pop in4 integer_dup_times integer_max integer_yankdup integer_min boolean_stackdepth integer_rot) boolean_swap exec_empty exec_k_when_autoconstructing (exec_do*count (exec_k_when_autoconstructing (integer_rot integer_flush) (exec_pop (exec_pop (exec_yank) boolean_flush boolean_and integer_add exec_dup () exec_dup_items)) exec_y_when_autoconstructing (exec_while (print_newline) exec_shove (integer_div exec_while (integer_inc exec_stackdepth boolean_xor) exec_do*times (boolean_invert_second_then_and))))) ())
Lexicase best errors: [1 0 1 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 78
Percent parens: 0.256
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction 22} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 2, :instruction integer_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 1, :instruction exec_dup} {:close 2, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_while} {:close 1, :instruction print_newline} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_invert_second_then_and})
Zero cases best program: (integer_lt in3 exec_do*while (print_integer integer_yank) boolean_not boolean_and integer_yank integer_dup_times boolean_pop exec_k (integer_lte integer_dup boolean_stackdepth) (integer_gt exec_if (exec_do*while (integer_mult 22 integer_min boolean_or) integer_eq) () boolean_frominteger boolean_yankdup integer_pop in4 integer_dup_times integer_max integer_yankdup integer_min boolean_stackdepth integer_rot) boolean_swap exec_empty exec_k_when_autoconstructing (exec_do*count (exec_k_when_autoconstructing (integer_rot integer_flush) (exec_pop (exec_pop (exec_yank) boolean_flush boolean_and integer_add exec_dup () exec_dup_items)) exec_y_when_autoconstructing (exec_while (print_newline) exec_shove (integer_div exec_while (integer_inc exec_stackdepth boolean_xor) exec_do*times (boolean_invert_second_then_and))))) ())
Zero cases best errors: [1 0 1 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 78
Percent parens: 0.256
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 2 5 2 5 5 5 14 2 2)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (2 2 5 2 5 5 5 14 2 2)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction integer_min} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_k} {:close 1, :instruction exec_noop} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_when} {:close 1, :instruction integer_eq} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_921} {:close 0, :instruction exec_do*count} {:close 2, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 1, :instruction tagged_276} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_685} {:close 0, :instruction exec_k} {:close 0, :instruction integer_max} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_do*range} {:close 1, :instruction tag_exec_308} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_s} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_shove})
Best program: (in3 exec_y_when_autoconstructing (boolean_dup_times exec_if (integer_dup) (boolean_invert_first_then_and in3 integer_gt print_integer) in2 exec_flush boolean_dup integer_eq) integer_min boolean_swap print_exec (integer_min exec_flush) exec_empty exec_k_when_autoconstructing (boolean_not exec_when (exec_empty integer_add boolean_swap exec_k () (exec_noop) boolean_eq) boolean_yank exec_when (integer_eq) integer_gte) (integer_stackdepth exec_dup (exec_if (integer_flush boolean_stackdepth exec_swap (integer_inc tagged_921 exec_do*count (integer_dup_times)) (exec_if (exec_rot (exec_do*while (exec_do*times (exec_swap (integer_lt) (integer_shove in3 exec_k_when_autoconstructing (integer_gt print_exec (boolean_invert_second_then_and) boolean_frominteger integer_eq exec_yankdup boolean_or boolean_and integer_gt) (exec_dup (tagged_276) integer_empty tagged_685 exec_k (integer_max integer_fromboolean exec_yankdup boolean_or exec_do*range () tag_exec_308 () integer_flush exec_s (integer_mod exec_rot (exec_shove ()) () ()) () ()) ()))))) () ()) ())) ())))
Errors: [1 0 1 0 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 76
Size: 117
Percent parens: 0.350
--- Population Statistics ---
Average total errors in population: 9.956
Median total errors in population: 10
Error averages by case: (0.998 0.998 0.995 0.998 0.995 0.995 0.995 0.986 0.998 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.143
Average program size in population (points): 70.412
Average percent parens in population: 0.275
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.27
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 453966
--- Timings ---
Current time: 1559314715975 milliseconds
Total Time:           2.3 seconds
Initialization:       0.1 seconds,  4.6%
Reproduction:         0.8 seconds, 33.5%
Fitness Testing:      1.4 seconds, 62.0%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -4                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: 89                 
Correct output: -52                 | Program output: -2                 
Correct output: 24                  | Program output: 53                 
Correct output: 20                  | Program output: 91                 
Correct output: -57                 | Program output: -11                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 26                 
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 97                 
Correct output: 24                  | Program output: 89                 
Correct output: 55                  | Program output: 83                 
Correct output: 2                   | Program output: 75                 
Correct output: 9                   | Program output: 89                 
Correct output: 22                  | Program output: 54                 
Correct output: 5                   | Program output: 45                 
Correct output: 27                  | Program output: 27                 
Correct output: 55                  | Program output: 60                 
Correct output: 5                   | Program output: 82                 
Correct output: 44                  | Program output: 66                 
Correct output: 30                  | Program output: 88                 
Correct output: 8                   | Program output: 26                 
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 37                 
Correct output: 1                   | Program output: 64                 
Correct output: 13                  | Program output: 46                 
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -37                
Correct output: -79                 | Program output: 41                 
Correct output: 16                  | Program output: 16                 
Correct output: -67                 | Program output: 1                  
Correct output: -84                 | Program output: 24                 
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: 33                 
Correct output: -95                 | Program output: 7                  
Correct output: -91                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: -3                  | Program output: 100                
Correct output: -96                 | Program output: 35                 
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: 67                 
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 17                 
Correct output: -100                | Program output: -8                 
Correct output: 3                   | Program output: 88                 
Correct output: -83                 | Program output: -71                
Correct output: -90                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -25                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: 17                 
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: 3                  
Correct output: -46                 | Program output: -26                
Correct output: -98                 | Program output: -68                
Correct output: -84                 | Program output: -72                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: 89                 
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: 85                 
Correct output: -87                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: 98                 
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -64                
Correct output: -58                 | Program output: 14                 
Correct output: -46                 | Program output: 18                 
Correct output: -93                 | Program output: 78                 
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 31                 
Correct output: -83                 | Program output: 34                 
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -42                
Correct output: -87                 | Program output: -24                
Correct output: -48                 | Program output: -23                
Correct output: -46                 | Program output: -8                 
Correct output: -80                 | Program output: -14                
Correct output: -98                 | Program output: 13                 
Correct output: -83                 | Program output: -64                
Correct output: -95                 | Program output: 62                 
Correct output: -81                 | Program output: 39                 
Correct output: -86                 | Program output: 7                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction 41} {:close 0, :instruction integer_add} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_boolean_207} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction -1} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_y} {:close 0, :instruction exec_when} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add})
Lexicase best program: (exec_if (boolean_rot boolean_xor) () integer_inc exec_yankdup boolean_shove exec_shove () integer_inc boolean_rot in1 integer_lte integer_yank integer_mult boolean_yank print_integer exec_yank exec_s_when_autoconstructing (in4 exec_s_when_autoconstructing (boolean_eq boolean_xor exec_pop (exec_k_when_autoconstructing (exec_noop exec_if (41 integer_add exec_yank) (boolean_invert_second_then_and integer_lte exec_do*while (in3 exec_s (exec_eq exec_k_when_autoconstructing (tag_boolean_207 boolean_pop boolean_xor integer_dup_times exec_dup_items integer_max) (exec_pop (-1 integer_rot exec_s_when_autoconstructing () (boolean_pop integer_sub exec_empty exec_do*count (exec_do*count () integer_yankdup exec_noop boolean_invert_second_then_and boolean_stackdepth exec_do*count (integer_min exec_stackdepth integer_rot boolean_flush) exec_empty integer_dec integer_dup_items in3 boolean_not integer_add integer_sub print_integer exec_eq exec_dup (boolean_xor integer_dec exec_y (boolean_not) integer_div integer_mod boolean_xor) exec_y (exec_when (exec_pop () exec_s_when_autoconstructing (boolean_frominteger integer_pop integer_dec exec_stackdepth) (integer_add) ())))) ()))) () ()))) ())) () ()) () ())
Lexicase best errors: [1 1 0 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 121
Percent parens: 0.298
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction 41} {:close 0, :instruction integer_add} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_boolean_207} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction -1} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_y} {:close 0, :instruction exec_when} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add})
Zero cases best program: (exec_if (boolean_rot boolean_xor) () integer_inc exec_yankdup boolean_shove exec_shove () integer_inc boolean_rot in1 integer_lte integer_yank integer_mult boolean_yank print_integer exec_yank exec_s_when_autoconstructing (in4 exec_s_when_autoconstructing (boolean_eq boolean_xor exec_pop (exec_k_when_autoconstructing (exec_noop exec_if (41 integer_add exec_yank) (boolean_invert_second_then_and integer_lte exec_do*while (in3 exec_s (exec_eq exec_k_when_autoconstructing (tag_boolean_207 boolean_pop boolean_xor integer_dup_times exec_dup_items integer_max) (exec_pop (-1 integer_rot exec_s_when_autoconstructing () (boolean_pop integer_sub exec_empty exec_do*count (exec_do*count () integer_yankdup exec_noop boolean_invert_second_then_and boolean_stackdepth exec_do*count (integer_min exec_stackdepth integer_rot boolean_flush) exec_empty integer_dec integer_dup_items in3 boolean_not integer_add integer_sub print_integer exec_eq exec_dup (boolean_xor integer_dec exec_y (boolean_not) integer_div integer_mod boolean_xor) exec_y (exec_when (exec_pop () exec_s_when_autoconstructing (boolean_frominteger integer_pop integer_dec exec_stackdepth) (integer_add) ())))) ()))) () ()))) ())) () ()) () ())
Zero cases best errors: [1 1 0 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 121
Percent parens: 0.298
--- Lexicase Population Statistics ---
Count of elite individuals by case: (85 85 290 92 85 85 290 382 290 92)
Population mean number of elite cases: 1.78
Count of perfect (error zero) individuals by case: (85 85 290 92 85 85 290 382 290 92)
Population mean number of perfect (error zero) cases: 1.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and})
Best program: (in1 print_integer boolean_and)
Errors: [1 1 0 1 1 1 0 0 0 1]
Total: 6
Mean: 0.6
Genome size: 3
Size: 4
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 8.224
Median total errors in population: 10
Error averages by case: (0.915 0.915 0.71 0.908 0.915 0.915 0.71 0.618 0.71 0.908)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.576
Average program size in population (points): 81.04
Average percent parens in population: 0.295
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.495
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 101
Genome diversity (% unique genomes):	 0.574
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 103
Syntactic diversity (% unique Push programs):	 0.572
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 795497
--- Timings ---
Current time: 1559314718345 milliseconds
Total Time:           4.7 seconds
Initialization:       0.1 seconds,  2.2%
Reproduction:         2.4 seconds, 51.5%
Fitness Testing:      1.9 seconds, 39.9%
Report:               0.3 seconds,  6.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 629
Test mean error for best: 0.62900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -58                 | Program output: -58                
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: 89                 
Correct output: -52                 | Program output: -2                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 91                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 22                 
Correct output: 44                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: 55                  | Program output: 79                 
Correct output: 2                   | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 27                  | Program output: 90                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 43                 
Correct output: 41                  | Program output: 88                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 42                 
Correct output: 13                  | Program output: 33                 
Correct output: 26                  | Program output: 90                 
Correct output: -95                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 32                 
Correct output: -67                 | Program output: -12                
Correct output: -84                 | Program output: 38                 
Correct output: -25                 | Program output: 59                 
Correct output: -20                 | Program output: 29                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: 8                  
Correct output: -3                  | Program output: 39                 
Correct output: -96                 | Program output: 63                 
Correct output: -9                  | Program output: 10                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: 46                 
Correct output: -82                 | Program output: 53                 
Correct output: -100                | Program output: -78                
Correct output: 3                   | Program output: 90                 
Correct output: -83                 | Program output: -36                
Correct output: -90                 | Program output: -74                
Correct output: -90                 | Program output: 7                  
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: 84                 
Correct output: -98                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: 11                 
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: 61                 
Correct output: -98                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: 13                  | Program output: 20                 
Correct output: -91                 | Program output: 67                 
Correct output: -98                 | Program output: -14                
Correct output: -63                 | Program output: -27                
Correct output: -30                 | Program output: 79                 
Correct output: -51                 | Program output: 19                 
Correct output: -87                 | Program output: 39                 
Correct output: -81                 | Program output: -13                
Correct output: -46                 | Program output: 90                 
Correct output: -32                 | Program output: 19                 
Correct output: -84                 | Program output: 0                  
Correct output: -75                 | Program output: -75                
Correct output: -58                 | Program output: 0                  
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: 76                 
Correct output: -62                 | Program output: 66                 
Correct output: 21                  | Program output: 24                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: 69                 
Correct output: -99                 | Program output: 1                  
Correct output: -99                 | Program output: -28                
Correct output: -87                 | Program output: -33                
Correct output: -48                 | Program output: -1                 
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -64                
Correct output: -98                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -24                
Correct output: -86                 | Program output: 94                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction integer_min} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_while} {:close 0, :instruction 18} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_254} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop})
Lexicase best program: (in3 exec_y_when_autoconstructing (boolean_dup_times in2 integer_dup) boolean_invert_first_then_and in3 integer_gt print_integer in2 exec_flush boolean_dup integer_eq integer_min boolean_swap print_exec (integer_min exec_flush) exec_empty exec_k_when_autoconstructing (boolean_not exec_when (exec_do*range (boolean_dup_times) exec_while (exec_dup_items) integer_dup integer_flush) boolean_dup_items exec_do*while () boolean_or integer_max boolean_pop integer_lte exec_while (18 integer_lt) boolean_frominteger in2) (integer_dup boolean_swap integer_eq integer_swap) boolean_invert_first_then_and tagged_254 boolean_dup integer_eq integer_sub exec_s (boolean_pop) () ())
Lexicase best errors: [0 1 1 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 63
Percent parens: 0.206
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in3} {:close 0, :instruction integer_gt} {:close 1, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_exec} {:close 0, :instruction integer_min} {:close 2, :instruction exec_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_while} {:close 0, :instruction 18} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction in2} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction tagged_254} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 1, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop})
Zero cases best program: (in3 exec_y_when_autoconstructing (boolean_dup_times in2 integer_dup) boolean_invert_first_then_and in3 integer_gt print_integer in2 exec_flush boolean_dup integer_eq integer_min boolean_swap print_exec (integer_min exec_flush) exec_empty exec_k_when_autoconstructing (boolean_not exec_when (exec_do*range (boolean_dup_times) exec_while (exec_dup_items) integer_dup integer_flush) boolean_dup_items exec_do*while () boolean_or integer_max boolean_pop integer_lte exec_while (18 integer_lt) boolean_frominteger in2) (integer_dup boolean_swap integer_eq integer_swap) boolean_invert_first_then_and tagged_254 boolean_dup integer_eq integer_sub exec_s (boolean_pop) () ())
Zero cases best errors: [0 1 1 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 63
Percent parens: 0.206
--- Lexicase Population Statistics ---
Count of elite individuals by case: (223 364 291 585 291 223 364 290 224 223)
Population mean number of elite cases: 3.08
Count of perfect (error zero) individuals by case: (223 364 291 585 291 223 364 290 224 223)
Population mean number of perfect (error zero) cases: 3.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*times} {:close 1, :instruction print_integer} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*range} {:close 2, :instruction integer_lte} {:close 0, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_max} {:close 1, :instruction integer_empty} {:close 1, :instruction boolean_eq} {:close 0, :instruction -17} {:close 0, :instruction integer_dup_items} {:close 0, :instruction 4} {:close 1, :instruction exec_while} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult})
Best program: (boolean_dup_times exec_yankdup integer_fromboolean boolean_shove boolean_yank exec_yankdup exec_when () in2 print_integer exec_yank exec_rot (integer_max boolean_invert_first_then_and integer_mult) (exec_do*times (print_integer) exec_pop (exec_do*range (integer_lte)) exec_when (exec_do*while (integer_max integer_empty) boolean_eq) -17 integer_dup_items 4 exec_while () exec_do*count (integer_add) integer_mult) ())
Errors: [0 1 1 0 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 31
Size: 43
Percent parens: 0.279
--- Population Statistics ---
Average total errors in population: 6.922
Median total errors in population: 7
Error averages by case: (0.777 0.636 0.709 0.415 0.709 0.777 0.636 0.71 0.776 0.777)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.936
Average program size in population (points): 67.079
Average percent parens in population: 0.298
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.991
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 64
Genome diversity (% unique genomes):	 0.609
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.604
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1189550
--- Timings ---
Current time: 1559314721893 milliseconds
Total Time:           7.8 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         4.8 seconds, 61.4%
Fitness Testing:      2.4 seconds, 30.7%
Report:               0.5 seconds,  6.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -4                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: 89                 
Correct output: -52                 | Program output: -2                 
Correct output: 24                  | Program output: 53                 
Correct output: 20                  | Program output: 91                 
Correct output: -57                 | Program output: -11                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 26                 
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 97                 
Correct output: 24                  | Program output: 89                 
Correct output: 55                  | Program output: 83                 
Correct output: 2                   | Program output: 75                 
Correct output: 9                   | Program output: 89                 
Correct output: 22                  | Program output: 54                 
Correct output: 5                   | Program output: 45                 
Correct output: 27                  | Program output: 27                 
Correct output: 55                  | Program output: 60                 
Correct output: 5                   | Program output: 82                 
Correct output: 44                  | Program output: 66                 
Correct output: 30                  | Program output: 88                 
Correct output: 8                   | Program output: 26                 
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 37                 
Correct output: 1                   | Program output: 64                 
Correct output: 13                  | Program output: 46                 
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -37                
Correct output: -79                 | Program output: 41                 
Correct output: 16                  | Program output: 16                 
Correct output: -67                 | Program output: 1                  
Correct output: -84                 | Program output: 24                 
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: 33                 
Correct output: -95                 | Program output: 7                  
Correct output: -91                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: -3                  | Program output: 100                
Correct output: -96                 | Program output: 35                 
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: 67                 
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 17                 
Correct output: -100                | Program output: -8                 
Correct output: 3                   | Program output: 88                 
Correct output: -83                 | Program output: -71                
Correct output: -90                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -25                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: 17                 
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: 3                  
Correct output: -46                 | Program output: -26                
Correct output: -98                 | Program output: -68                
Correct output: -84                 | Program output: -72                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: 89                 
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: 85                 
Correct output: -87                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: 98                 
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -64                
Correct output: -58                 | Program output: 14                 
Correct output: -46                 | Program output: 18                 
Correct output: -93                 | Program output: 78                 
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 31                 
Correct output: -83                 | Program output: 34                 
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -42                
Correct output: -87                 | Program output: -24                
Correct output: -48                 | Program output: -23                
Correct output: -46                 | Program output: -8                 
Correct output: -80                 | Program output: -14                
Correct output: -98                 | Program output: 13                 
Correct output: -83                 | Program output: -64                
Correct output: -95                 | Program output: 62                 
Correct output: -81                 | Program output: 39                 
Correct output: -86                 | Program output: 7                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction 10} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 2, :instruction exec_y} {:close 0, :instruction in1} {:close 1, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction tag_boolean_548} {:close 1, :instruction integer_dup} {:close 0, :instruction in2} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_eq} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction tagged_655} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction in3})
Lexicase best program: (10 integer_add exec_dup_items exec_rot (in1) (exec_dup_times (exec_y ()) in1 exec_y () integer_add print_exec (boolean_swap) integer_gte exec_noop exec_yank exec_dup (integer_min exec_k (boolean_invert_first_then_and) (exec_when () exec_if () (integer_gt exec_do*range (boolean_frominteger) exec_k (boolean_invert_first_then_and integer_empty tag_boolean_548 integer_dup) (in2 boolean_frominteger) boolean_dup) print_newline boolean_xor exec_eq) boolean_frominteger)) (in1 boolean_invert_second_then_and exec_noop integer_shove integer_dup_times boolean_eq exec_if () (print_integer integer_add exec_k_when_autoconstructing () (exec_pop (boolean_shove) in3 tagged_655 integer_gte exec_y_when_autoconstructing (in1) boolean_dup_times exec_dup (boolean_flush print_boolean integer_dup_items boolean_invert_first_then_and integer_div integer_stackdepth exec_y_when_autoconstructing (exec_yank exec_do*count (exec_eq) integer_max) integer_min integer_max in3)))))
Lexicase best errors: [1 0 0 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 95
Percent parens: 0.274
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction 10} {:close 0, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction in1} {:close 0, :instruction exec_dup_times} {:close 2, :instruction exec_y} {:close 0, :instruction in1} {:close 1, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction print_exec} {:close 1, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 1, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_when} {:close 1, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 0, :instruction tag_boolean_548} {:close 1, :instruction integer_dup} {:close 0, :instruction in2} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_eq} {:close 2, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_add} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 1, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction tagged_655} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_eq} {:close 1, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction in3})
Zero cases best program: (10 integer_add exec_dup_items exec_rot (in1) (exec_dup_times (exec_y ()) in1 exec_y () integer_add print_exec (boolean_swap) integer_gte exec_noop exec_yank exec_dup (integer_min exec_k (boolean_invert_first_then_and) (exec_when () exec_if () (integer_gt exec_do*range (boolean_frominteger) exec_k (boolean_invert_first_then_and integer_empty tag_boolean_548 integer_dup) (in2 boolean_frominteger) boolean_dup) print_newline boolean_xor exec_eq) boolean_frominteger)) (in1 boolean_invert_second_then_and exec_noop integer_shove integer_dup_times boolean_eq exec_if () (print_integer integer_add exec_k_when_autoconstructing () (exec_pop (boolean_shove) in3 tagged_655 integer_gte exec_y_when_autoconstructing (in1) boolean_dup_times exec_dup (boolean_flush print_boolean integer_dup_items boolean_invert_first_then_and integer_div integer_stackdepth exec_y_when_autoconstructing (exec_yank exec_do*count (exec_eq) integer_max) integer_min integer_max in3)))))
Zero cases best errors: [1 0 0 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 95
Percent parens: 0.274
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 677 237 441 1 888 237 889 1 237)
Population mean number of elite cases: 3.61
Count of perfect (error zero) individuals by case: (1 677 237 441 1 888 237 889 1 237)
Population mean number of perfect (error zero) cases: 3.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction tagged_727} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_mult} {:close 0, :instruction 22} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty})
Best program: (boolean_eq integer_dup exec_s (tag_exec_458 () in1 boolean_eq) (print_integer boolean_eq tagged_727 integer_add exec_k (integer_lte exec_pop (integer_mult 22 integer_min boolean_or) integer_eq integer_inc exec_swap (exec_s (exec_do*while (exec_if (integer_gt exec_s_when_autoconstructing () (integer_empty) ()) ())) () ()) ()) ()) ())
Errors: [1 0 0 1 1 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 26
Size: 45
Percent parens: 0.422
--- Population Statistics ---
Average total errors in population: 6.391
Median total errors in population: 6
Error averages by case: (0.999 0.323 0.763 0.559 0.999 0.112 0.763 0.111 0.999 0.763)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.02
Average program size in population (points): 55.796
Average percent parens in population: 0.299
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.47625
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 98
Genome diversity (% unique genomes):	 0.623
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 103
Syntactic diversity (% unique Push programs):	 0.613
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 1658044
--- Timings ---
Current time: 1559314725318 milliseconds
Total Time:          11.4 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         7.1 seconds, 62.5%
Fitness Testing:      2.9 seconds, 25.7%
Report:               1.2 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -4                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: 89                 
Correct output: -52                 | Program output: -2                 
Correct output: 24                  | Program output: 53                 
Correct output: 20                  | Program output: 91                 
Correct output: -57                 | Program output: -11                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 26                 
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 97                 
Correct output: 24                  | Program output: 89                 
Correct output: 55                  | Program output: 83                 
Correct output: 2                   | Program output: 75                 
Correct output: 9                   | Program output: 89                 
Correct output: 22                  | Program output: 54                 
Correct output: 5                   | Program output: 45                 
Correct output: 27                  | Program output: 27                 
Correct output: 55                  | Program output: 60                 
Correct output: 5                   | Program output: 82                 
Correct output: 44                  | Program output: 66                 
Correct output: 30                  | Program output: 88                 
Correct output: 8                   | Program output: 26                 
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 37                 
Correct output: 1                   | Program output: 64                 
Correct output: 13                  | Program output: 46                 
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -37                
Correct output: -79                 | Program output: 41                 
Correct output: 16                  | Program output: 16                 
Correct output: -67                 | Program output: 1                  
Correct output: -84                 | Program output: 24                 
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: 33                 
Correct output: -95                 | Program output: 7                  
Correct output: -91                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: -3                  | Program output: 100                
Correct output: -96                 | Program output: 35                 
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: 67                 
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 17                 
Correct output: -100                | Program output: -8                 
Correct output: 3                   | Program output: 88                 
Correct output: -83                 | Program output: -71                
Correct output: -90                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -25                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: 17                 
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: 3                  
Correct output: -46                 | Program output: -26                
Correct output: -98                 | Program output: -68                
Correct output: -84                 | Program output: -72                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: 89                 
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: 85                 
Correct output: -87                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: 98                 
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -64                
Correct output: -58                 | Program output: 14                 
Correct output: -46                 | Program output: 18                 
Correct output: -93                 | Program output: 78                 
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 31                 
Correct output: -83                 | Program output: 34                 
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -42                
Correct output: -87                 | Program output: -24                
Correct output: -48                 | Program output: -23                
Correct output: -46                 | Program output: -8                 
Correct output: -80                 | Program output: -14                
Correct output: -98                 | Program output: 13                 
Correct output: -83                 | Program output: -64                
Correct output: -95                 | Program output: 62                 
Correct output: -81                 | Program output: 39                 
Correct output: -86                 | Program output: 7                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and})
Lexicase best program: (in1 print_integer boolean_and)
Lexicase best errors: [1 1 0 1 0 1 1 0 1 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 4
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_and})
Zero cases best program: (in1 print_integer boolean_and)
Zero cases best errors: [1 1 0 1 0 1 1 0 1 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 4
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (148 212 513 212 725 4 4 510 4 148)
Population mean number of elite cases: 2.48
Count of perfect (error zero) individuals by case: (148 212 513 212 725 4 4 510 4 148)
Population mean number of perfect (error zero) cases: 2.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction 41} {:close 0, :instruction integer_add} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction tag_boolean_207} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction -1} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_y} {:close 0, :instruction exec_when} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_add})
Best program: (exec_if (boolean_rot boolean_xor) () integer_inc exec_yankdup boolean_shove exec_shove () integer_inc boolean_rot in1 integer_lte integer_yank integer_mult boolean_yank print_integer exec_yank exec_s_when_autoconstructing (in4 exec_s_when_autoconstructing (boolean_eq boolean_xor exec_pop (boolean_yank exec_noop exec_if (41 integer_add exec_yank) (boolean_invert_second_then_and integer_lte exec_do*while (in3 exec_s (exec_eq exec_k_when_autoconstructing (tag_boolean_207 boolean_pop boolean_xor integer_dup_times exec_dup_items integer_max) (exec_pop (-1 integer_rot exec_s_when_autoconstructing () (boolean_pop integer_sub exec_empty integer_min exec_do*count () integer_yankdup exec_noop boolean_invert_second_then_and boolean_stackdepth exec_do*count (integer_min exec_stackdepth integer_rot boolean_flush) exec_empty integer_dec integer_dup_items in3 boolean_not integer_add integer_sub print_integer exec_eq exec_dup (boolean_xor integer_dec exec_y (boolean_not) integer_div integer_dup_items boolean_xor) exec_y (exec_when (exec_pop () exec_s_when_autoconstructing (boolean_frominteger integer_pop integer_dec exec_stackdepth) (integer_add) ()))) ()))) () ())))) () ()) () ())
Errors: [1 1 0 1 0 1 1 0 1 1]
Total: 7
Mean: 0.7
Genome size: 85
Size: 118
Percent parens: 0.280
--- Population Statistics ---
Average total errors in population: 7.52
Median total errors in population: 7
Error averages by case: (0.852 0.788 0.487 0.788 0.275 0.996 0.996 0.49 0.996 0.852)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.92
Average program size in population (points): 56.033
Average percent parens in population: 0.267
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 6.243
Median age in population: 6.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 150
Genome diversity (% unique genomes):	 0.609
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 150
Syntactic diversity (% unique Push programs):	 0.603
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 1978587
--- Timings ---
Current time: 1559314728365 milliseconds
Total Time:          14.8 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         9.5 seconds, 64.6%
Fitness Testing:      3.3 seconds, 22.4%
Report:               1.8 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 638
Test mean error for best: 0.63800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -4                 
Correct output: 0                   | Program output: 80                 
Correct output: 6                   | Program output: 57                 
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -52                
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 91                 
Correct output: 16                  | Program output: 43                 
Correct output: 44                  | Program output: 50                 
Correct output: 24                  | Program output: 84                 
Correct output: 55                  | Program output: 55                 
Correct output: 2                   | Program output: 37                 
Correct output: 9                   | Program output: 55                 
Correct output: 22                  | Program output: 81                 
Correct output: 5                   | Program output: 99                 
Correct output: 27                  | Program output: 51                 
Correct output: 55                  | Program output: 92                 
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 65                 
Correct output: 30                  | Program output: 39                 
Correct output: 8                   | Program output: 78                 
Correct output: 41                  | Program output: 93                 
Correct output: 22                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 13                  | Program output: 13                 
Correct output: 26                  | Program output: 72                 
Correct output: -95                 | Program output: 37                 
Correct output: -79                 | Program output: 90                 
Correct output: 16                  | Program output: 91                 
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: -16                
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -2                 
Correct output: -91                 | Program output: 15                 
Correct output: -51                 | Program output: -7                 
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -96                
Correct output: -9                  | Program output: 26                 
Correct output: -12                 | Program output: 27                 
Correct output: -17                 | Program output: 9                  
Correct output: -82                 | Program output: 72                 
Correct output: -100                | Program output: -6                 
Correct output: 3                   | Program output: 3                  
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -28                
Correct output: -55                 | Program output: -28                
Correct output: -77                 | Program output: -18                
Correct output: -98                 | Program output: 20                 
Correct output: -86                 | Program output: -37                
Correct output: -53                 | Program output: 35                 
Correct output: -28                 | Program output: 3                  
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: 10                 
Correct output: 13                  | Program output: 48                 
Correct output: -91                 | Program output: -79                
Correct output: -98                 | Program output: -21                
Correct output: -63                 | Program output: 98                 
Correct output: -30                 | Program output: 12                 
Correct output: -51                 | Program output: 19                 
Correct output: -87                 | Program output: -17                
Correct output: -81                 | Program output: 100                
Correct output: -46                 | Program output: -46                
Correct output: -32                 | Program output: -4                 
Correct output: -84                 | Program output: -60                
Correct output: -75                 | Program output: -18                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 48                 
Correct output: -93                 | Program output: 65                 
Correct output: -62                 | Program output: -8                 
Correct output: 21                  | Program output: 21                 
Correct output: -83                 | Program output: -32                
Correct output: -44                 | Program output: 99                 
Correct output: -99                 | Program output: 30                 
Correct output: -99                 | Program output: 56                 
Correct output: -87                 | Program output: -87                
Correct output: -48                 | Program output: -48                
Correct output: -46                 | Program output: -1                 
Correct output: -80                 | Program output: -19                
Correct output: -98                 | Program output: 34                 
Correct output: -83                 | Program output: 45                 
Correct output: -95                 | Program output: 98                 
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_exec} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while})
Lexicase best program: (boolean_eq integer_dup exec_s (tag_exec_458 () in1 boolean_eq) (print_integer boolean_eq exec_y (integer_add in2 exec_flush exec_while (boolean_empty integer_min exec_empty exec_yank) integer_dec boolean_stackdepth integer_div print_exec (print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) boolean_eq exec_while () boolean_or) (boolean_shove exec_if (boolean_and) (integer_dup) exec_yankdup integer_swap integer_gte in3) integer_pop boolean_xor in4 exec_noop print_integer integer_inc exec_k_when_autoconstructing (in4 exec_do*while ()) ())
Lexicase best errors: [0 0 0 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 62
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_exec} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while})
Zero cases best program: (boolean_eq integer_dup exec_s (tag_exec_458 () in1 boolean_eq) (print_integer boolean_eq exec_y (integer_add in2 exec_flush exec_while (boolean_empty integer_min exec_empty exec_yank) integer_dec boolean_stackdepth integer_div print_exec (print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) boolean_eq exec_while () boolean_or) (boolean_shove exec_if (boolean_and) (integer_dup) exec_yankdup integer_swap integer_gte in3) integer_pop boolean_xor in4 exec_noop print_integer integer_inc exec_k_when_autoconstructing (in4 exec_do*while ()) ())
Zero cases best errors: [0 0 0 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 62
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (183 866 182 196 182 670 296 183 303 183)
Population mean number of elite cases: 3.24
Count of perfect (error zero) individuals by case: (183 866 182 196 182 670 296 183 303 183)
Population mean number of perfect (error zero) cases: 3.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_lt} {:close 0, :instruction print_exec} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while})
Best program: (boolean_eq integer_dup exec_s (tag_exec_458 () in1 boolean_eq) (print_integer boolean_eq exec_y (integer_add in2 exec_flush exec_while (boolean_empty integer_min exec_empty exec_yank) integer_dec boolean_stackdepth integer_div exec_while (boolean_empty integer_min exec_empty exec_yank) integer_dec boolean_stackdepth integer_lt print_exec (print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) boolean_eq exec_while () boolean_or) (boolean_shove exec_if (boolean_and) (integer_dup) exec_yankdup integer_swap integer_gte in3) integer_pop boolean_xor in4 exec_noop print_integer integer_inc exec_k_when_autoconstructing (in4 exec_do*while ()) ())
Errors: [0 0 0 1 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 56
Size: 71
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 6.756
Median total errors in population: 8
Error averages by case: (0.817 0.134 0.818 0.804 0.818 0.33 0.704 0.817 0.697 0.817)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.401
Average program size in population (points): 53.581
Average percent parens in population: 0.269
Minimum age in population: 5.0
Maximum age in population: 9.3125
Average age in population: 7.719125
Median age in population: 7.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 94
Genome diversity (% unique genomes):	 0.617
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 97
Syntactic diversity (% unique Push programs):	 0.604
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2320967
--- Timings ---
Current time: 1559314730993 milliseconds
Total Time:          17.3 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.5 seconds, 66.4%
Fitness Testing:      3.7 seconds, 21.3%
Report:               2.0 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -4                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: 89                 
Correct output: -52                 | Program output: -2                 
Correct output: 24                  | Program output: 53                 
Correct output: 20                  | Program output: 91                 
Correct output: -57                 | Program output: -11                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 26                 
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 97                 
Correct output: 24                  | Program output: 89                 
Correct output: 55                  | Program output: 83                 
Correct output: 2                   | Program output: 75                 
Correct output: 9                   | Program output: 89                 
Correct output: 22                  | Program output: 54                 
Correct output: 5                   | Program output: 45                 
Correct output: 27                  | Program output: 27                 
Correct output: 55                  | Program output: 60                 
Correct output: 5                   | Program output: 82                 
Correct output: 44                  | Program output: 66                 
Correct output: 30                  | Program output: 88                 
Correct output: 8                   | Program output: 26                 
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 37                 
Correct output: 1                   | Program output: 64                 
Correct output: 13                  | Program output: 46                 
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -37                
Correct output: -79                 | Program output: 41                 
Correct output: 16                  | Program output: 16                 
Correct output: -67                 | Program output: 1                  
Correct output: -84                 | Program output: 24                 
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: 33                 
Correct output: -95                 | Program output: 7                  
Correct output: -91                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: -3                  | Program output: 100                
Correct output: -96                 | Program output: 35                 
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: 67                 
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 17                 
Correct output: -100                | Program output: -8                 
Correct output: 3                   | Program output: 88                 
Correct output: -83                 | Program output: -71                
Correct output: -90                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -25                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: 17                 
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: 3                  
Correct output: -46                 | Program output: -26                
Correct output: -98                 | Program output: -68                
Correct output: -84                 | Program output: -72                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: 89                 
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: 85                 
Correct output: -87                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: 98                 
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -64                
Correct output: -58                 | Program output: 14                 
Correct output: -46                 | Program output: 18                 
Correct output: -93                 | Program output: 78                 
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 31                 
Correct output: -83                 | Program output: 34                 
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -42                
Correct output: -87                 | Program output: -24                
Correct output: -48                 | Program output: -23                
Correct output: -46                 | Program output: -8                 
Correct output: -80                 | Program output: -14                
Correct output: -98                 | Program output: 13                 
Correct output: -83                 | Program output: -64                
Correct output: -95                 | Program output: 62                 
Correct output: -81                 | Program output: 39                 
Correct output: -86                 | Program output: 7                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction 41} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while})
Lexicase best program: (exec_if (boolean_rot boolean_xor) () integer_inc exec_yankdup boolean_shove exec_shove () integer_inc boolean_rot in1 integer_lte integer_yank integer_mult boolean_yank print_integer exec_yank exec_s_when_autoconstructing (in4 exec_s_when_autoconstructing (boolean_eq boolean_xor exec_pop (boolean_yank exec_noop exec_if (41 integer_add boolean_or) (boolean_invert_second_then_and integer_lte exec_do*while ()))) () ()) () ())
Lexicase best errors: [1 1 1 1 0 0 0 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 45
Percent parens: 0.311
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_if} {:close 0, :instruction boolean_rot} {:close 2, :instruction boolean_xor} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction 41} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_do*while})
Zero cases best program: (exec_if (boolean_rot boolean_xor) () integer_inc exec_yankdup boolean_shove exec_shove () integer_inc boolean_rot in1 integer_lte integer_yank integer_mult boolean_yank print_integer exec_yank exec_s_when_autoconstructing (in4 exec_s_when_autoconstructing (boolean_eq boolean_xor exec_pop (boolean_yank exec_noop exec_if (41 integer_add boolean_or) (boolean_invert_second_then_and integer_lte exec_do*while ()))) () ()) () ())
Zero cases best errors: [1 1 1 1 0 0 0 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 45
Percent parens: 0.311
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 524 1000 1000 278 278 357 277 77 1000)
Population mean number of elite cases: 5.79
Count of perfect (error zero) individuals by case: (0 524 0 0 278 278 357 277 77 0)
Population mean number of perfect (error zero) cases: 1.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_exec} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while})
Best program: (boolean_eq integer_dup exec_s (tag_exec_458 () in1 boolean_eq) (print_integer boolean_eq exec_y (integer_add in2 exec_flush exec_while (boolean_empty integer_min exec_empty exec_yank) integer_dec boolean_stackdepth exec_empty exec_yank) integer_dec boolean_stackdepth integer_div print_exec (print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) (boolean_eq exec_while () boolean_or) boolean_shove exec_if (boolean_and) (integer_dup) integer_stackdepth integer_swap integer_gte in3 integer_pop boolean_xor in4 exec_noop print_integer integer_inc exec_k_when_autoconstructing (in4 exec_do*while ()) ())
Errors: [1 1 1 1 0 0 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 52
Size: 66
Percent parens: 0.212
--- Population Statistics ---
Average total errors in population: 8.209
Median total errors in population: 9
Error averages by case: (1.0 0.476 1.0 1.0 0.722 0.722 0.643 0.723 0.923 1.0)
Error minima by case: (1 0 1 1 0 0 0 0 0 1)
Average genome size in population (length): 42.819
Average program size in population (points): 56.282
Average percent parens in population: 0.241
Minimum age in population: 6.5
Maximum age in population: 11.0
Average age in population: 9.4919375
Median age in population: 9.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 129
Genome diversity (% unique genomes):	 0.615
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 129
Syntactic diversity (% unique Push programs):	 0.609
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 2570535
--- Timings ---
Current time: 1559314734020 milliseconds
Total Time:          20.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        14.0 seconds, 68.5%
Fitness Testing:      4.0 seconds, 19.8%
Report:               2.3 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -4                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: 89                 
Correct output: -52                 | Program output: -2                 
Correct output: 24                  | Program output: 53                 
Correct output: 20                  | Program output: 91                 
Correct output: -57                 | Program output: -11                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 26                 
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 97                 
Correct output: 24                  | Program output: 89                 
Correct output: 55                  | Program output: 83                 
Correct output: 2                   | Program output: 75                 
Correct output: 9                   | Program output: 89                 
Correct output: 22                  | Program output: 54                 
Correct output: 5                   | Program output: 45                 
Correct output: 27                  | Program output: 27                 
Correct output: 55                  | Program output: 60                 
Correct output: 5                   | Program output: 82                 
Correct output: 44                  | Program output: 66                 
Correct output: 30                  | Program output: 88                 
Correct output: 8                   | Program output: 26                 
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 37                 
Correct output: 1                   | Program output: 64                 
Correct output: 13                  | Program output: 46                 
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -37                
Correct output: -79                 | Program output: 41                 
Correct output: 16                  | Program output: 16                 
Correct output: -67                 | Program output: 1                  
Correct output: -84                 | Program output: 24                 
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: 33                 
Correct output: -95                 | Program output: 7                  
Correct output: -91                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: -3                  | Program output: 100                
Correct output: -96                 | Program output: 35                 
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: 67                 
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 17                 
Correct output: -100                | Program output: -8                 
Correct output: 3                   | Program output: 88                 
Correct output: -83                 | Program output: -71                
Correct output: -90                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -25                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: 17                 
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: 3                  
Correct output: -46                 | Program output: -26                
Correct output: -98                 | Program output: -68                
Correct output: -84                 | Program output: -72                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: 89                 
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: 85                 
Correct output: -87                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: 98                 
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -64                
Correct output: -58                 | Program output: 14                 
Correct output: -46                 | Program output: 18                 
Correct output: -93                 | Program output: 78                 
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 31                 
Correct output: -83                 | Program output: 34                 
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -42                
Correct output: -87                 | Program output: -24                
Correct output: -48                 | Program output: -23                
Correct output: -46                 | Program output: -8                 
Correct output: -80                 | Program output: -14                
Correct output: -98                 | Program output: 13                 
Correct output: -83                 | Program output: -64                
Correct output: -95                 | Program output: 62                 
Correct output: -81                 | Program output: 39                 
Correct output: -86                 | Program output: 7                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction print_exec} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while})
Lexicase best program: (boolean_eq integer_dup exec_s (tag_exec_458 () in1 boolean_eq) (print_integer boolean_eq exec_y (integer_add) in2 exec_flush exec_while (boolean_empty integer_min exec_empty exec_yank) integer_dec boolean_stackdepth integer_empty print_exec (print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) (boolean_eq exec_while () boolean_or) boolean_shove exec_if (boolean_and) (integer_dup) boolean_pop integer_swap integer_gte in3 integer_pop boolean_xor in4 exec_noop print_integer integer_inc exec_k_when_autoconstructing (in4 exec_do*while ()) ())
Lexicase best errors: [0 0 1 0 1 1 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 62
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction print_exec} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while})
Zero cases best program: (boolean_eq integer_dup exec_s (tag_exec_458 () in1 boolean_eq) (print_integer boolean_eq exec_y (integer_add) in2 exec_flush exec_while (boolean_empty integer_min exec_empty exec_yank) integer_dec boolean_stackdepth integer_empty print_exec (print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) (boolean_eq exec_while () boolean_or) boolean_shove exec_if (boolean_and) (integer_dup) boolean_pop integer_swap integer_gte in3 integer_pop boolean_xor in4 exec_noop print_integer integer_inc exec_k_when_autoconstructing (in4 exec_do*while ()) ())
Zero cases best errors: [0 0 1 0 1 1 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 62
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (875 592 1000 592 1000 143 731 140 138 1)
Population mean number of elite cases: 5.21
Count of perfect (error zero) individuals by case: (875 592 0 592 0 143 731 140 138 1)
Population mean number of perfect (error zero) cases: 3.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_exec} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_max} {:close 0, :instruction exec_pop} {:close 0, :instruction -1} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_min} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq})
Best program: (boolean_eq integer_dup exec_s (tag_exec_458 () in1 boolean_eq) (print_integer boolean_eq exec_y (integer_add in2 exec_flush exec_while (boolean_empty integer_min exec_empty exec_yank) integer_dec boolean_stackdepth integer_div print_exec (print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) exec_s_when_autoconstructing (exec_dup_items integer_max) (exec_pop (-1 integer_rot exec_s_when_autoconstructing () (boolean_pop integer_sub exec_empty exec_do*count (exec_do*count () integer_yankdup exec_noop boolean_invert_second_then_and boolean_stackdepth exec_do*count (integer_min exec_stackdepth integer_rot boolean_flush) integer_dup integer_dec integer_dup_items in3 boolean_not integer_add integer_sub print_integer exec_eq)) ())) ()) ())
Errors: [0 0 1 0 1 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 58
Size: 76
Percent parens: 0.237
--- Population Statistics ---
Average total errors in population: 6.788
Median total errors in population: 6
Error averages by case: (0.125 0.408 1.0 0.408 1.0 0.857 0.269 0.86 0.862 0.999)
Error minima by case: (0 0 1 0 1 0 0 0 0 0)
Average genome size in population (length): 38.926
Average program size in population (points): 52.266
Average percent parens in population: 0.260
Minimum age in population: 7.5
Maximum age in population: 12.59375
Average age in population: 10.91865625
Median age in population: 10.96875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 57
Genome diversity (% unique genomes):	 0.678
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.673
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 2823534
--- Timings ---
Current time: 1559314737329 milliseconds
Total Time:          23.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.7 seconds, 70.5%
Fitness Testing:      4.4 seconds, 18.4%
Report:               2.5 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -4                 
Correct output: 0                   | Program output: 80                 
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: 89                 
Correct output: -52                 | Program output: -52                
Correct output: 24                  | Program output: 53                 
Correct output: 20                  | Program output: 91                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 91                 
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 97                 
Correct output: 24                  | Program output: 89                 
Correct output: 55                  | Program output: 83                 
Correct output: 2                   | Program output: 75                 
Correct output: 9                   | Program output: 89                 
Correct output: 22                  | Program output: 54                 
Correct output: 5                   | Program output: 45                 
Correct output: 27                  | Program output: 27                 
Correct output: 55                  | Program output: 60                 
Correct output: 5                   | Program output: 82                 
Correct output: 44                  | Program output: 66                 
Correct output: 30                  | Program output: 88                 
Correct output: 8                   | Program output: 26                 
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 37                 
Correct output: 1                   | Program output: 64                 
Correct output: 13                  | Program output: 46                 
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: 37                 
Correct output: -79                 | Program output: 90                 
Correct output: 16                  | Program output: 16                 
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: 24                 
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: 33                 
Correct output: -95                 | Program output: -2                 
Correct output: -91                 | Program output: 15                 
Correct output: -51                 | Program output: -51                
Correct output: -3                  | Program output: 100                
Correct output: -96                 | Program output: 35                 
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: 27                 
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 17                 
Correct output: -100                | Program output: -6                 
Correct output: 3                   | Program output: 88                 
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -28                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: 20                 
Correct output: -86                 | Program output: -37                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: 89                 
Correct output: -46                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -21                
Correct output: -63                 | Program output: 98                 
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: 85                 
Correct output: -87                 | Program output: -27                
Correct output: -81                 | Program output: 100                
Correct output: -46                 | Program output: 98                 
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -60                
Correct output: -75                 | Program output: -18                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 48                 
Correct output: -93                 | Program output: 78                 
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 31                 
Correct output: -83                 | Program output: -32                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 30                 
Correct output: -99                 | Program output: 56                 
Correct output: -87                 | Program output: -87                
Correct output: -48                 | Program output: -48                
Correct output: -46                 | Program output: -1                 
Correct output: -80                 | Program output: -19                
Correct output: -98                 | Program output: 34                 
Correct output: -83                 | Program output: 45                 
Correct output: -95                 | Program output: 98                 
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: 7                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction in3})
Lexicase best program: (boolean_eq integer_dup exec_s (tag_exec_458 () in1 boolean_eq) (print_integer boolean_eq exec_y (integer_add in2 exec_flush exec_while (boolean_empty integer_min exec_empty exec_yank) integer_dec boolean_stackdepth integer_div exec_shove (print_newline integer_empty integer_swap in1) integer_gt integer_sub exec_noop) boolean_eq exec_while () boolean_or) (boolean_shove exec_if (in2) (exec_s_when_autoconstructing () (exec_yankdup integer_swap integer_gte in3) ())))
Lexicase best errors: [0 1 1 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 53
Percent parens: 0.264
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction in3})
Zero cases best program: (boolean_eq integer_dup exec_s (tag_exec_458 () in1 boolean_eq) (print_integer boolean_eq exec_y (integer_add in2 exec_flush exec_while (boolean_empty integer_min exec_empty exec_yank) integer_dec boolean_stackdepth integer_div exec_shove (print_newline integer_empty integer_swap in1) integer_gt integer_sub exec_noop) boolean_eq exec_while () boolean_or) (boolean_shove exec_if (in2) (exec_s_when_autoconstructing () (exec_yankdup integer_swap integer_gte in3) ())))
Zero cases best errors: [0 1 1 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 53
Percent parens: 0.264
--- Lexicase Population Statistics ---
Count of elite individuals by case: (359 4 128 134 399 761 901 622 399 151)
Population mean number of elite cases: 3.86
Count of perfect (error zero) individuals by case: (359 4 128 134 399 761 901 622 399 151)
Population mean number of perfect (error zero) cases: 3.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction in3})
Best program: (boolean_eq integer_dup exec_s (tag_exec_458 () in1 boolean_eq) (print_integer boolean_eq exec_y (integer_add in2 exec_flush exec_while (boolean_empty integer_min exec_empty exec_yank) integer_dec boolean_stackdepth integer_div exec_shove (print_newline integer_empty integer_swap in1) integer_gt integer_sub exec_noop) boolean_eq exec_while () boolean_or) (boolean_shove exec_if (in2) (exec_s_when_autoconstructing () (exec_yankdup integer_swap integer_gte in3) ())))
Errors: [0 1 1 1 0 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 39
Size: 53
Percent parens: 0.264
--- Population Statistics ---
Average total errors in population: 6.142
Median total errors in population: 6
Error averages by case: (0.641 0.996 0.872 0.866 0.601 0.239 0.099 0.378 0.601 0.849)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.94
Average program size in population (points): 51.583
Average percent parens in population: 0.250
Minimum age in population: 9.25
Maximum age in population: 14.1875
Average age in population: 12.533828125
Median age in population: 12.54296875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 88
Genome diversity (% unique genomes):	 0.692
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 91
Syntactic diversity (% unique Push programs):	 0.688
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3070657
--- Timings ---
Current time: 1559314739842 milliseconds
Total Time:          26.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.7 seconds, 71.2%
Fitness Testing:      4.7 seconds, 17.9%
Report:               2.8 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 667
Test mean error for best: 0.66700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -58                 | Program output: -4                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -55                
Correct output: -80                 | Program output: -29                
Correct output: -98                 | Program output: 89                 
Correct output: -52                 | Program output: -2                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 91                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 2                  
Correct output: 16                  | Program output: 95                 
Correct output: 44                  | Program output: 44                 
Correct output: 24                  | Program output: 52                 
Correct output: 55                  | Program output: 95                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 46                 
Correct output: 22                  | Program output: 72                 
Correct output: 5                   | Program output: 95                 
Correct output: 27                  | Program output: 54                 
Correct output: 55                  | Program output: 100                
Correct output: 5                   | Program output: 49                 
Correct output: 44                  | Program output: 98                 
Correct output: 30                  | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 66                 
Correct output: 1                   | Program output: 88                 
Correct output: 13                  | Program output: 87                 
Correct output: 26                  | Program output: 54                 
Correct output: -95                 | Program output: -95                
Correct output: -79                 | Program output: 53                 
Correct output: 16                  | Program output: 37                 
Correct output: -67                 | Program output: -27                
Correct output: -84                 | Program output: -65                
Correct output: -25                 | Program output: 41                 
Correct output: -20                 | Program output: -8                 
Correct output: -95                 | Program output: -80                
Correct output: -91                 | Program output: -68                
Correct output: -51                 | Program output: -31                
Correct output: -3                  | Program output: 10                 
Correct output: -96                 | Program output: 31                 
Correct output: -9                  | Program output: 22                 
Correct output: -12                 | Program output: 12                 
Correct output: -17                 | Program output: -11                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -100               
Correct output: 3                   | Program output: 4                  
Correct output: -83                 | Program output: 47                 
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: 64                 
Correct output: -55                 | Program output: -27                
Correct output: -77                 | Program output: 40                 
Correct output: -98                 | Program output: -61                
Correct output: -86                 | Program output: -70                
Correct output: -53                 | Program output: 5                  
Correct output: -28                 | Program output: 76                 
Correct output: -46                 | Program output: -30                
Correct output: -98                 | Program output: -96                
Correct output: -84                 | Program output: 77                 
Correct output: 13                  | Program output: 39                 
Correct output: -91                 | Program output: -37                
Correct output: -98                 | Program output: 10                 
Correct output: -63                 | Program output: -63                
Correct output: -30                 | Program output: -5                 
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: 87                 
Correct output: -46                 | Program output: 81                 
Correct output: -32                 | Program output: 58                 
Correct output: -84                 | Program output: -4                 
Correct output: -75                 | Program output: 96                 
Correct output: -58                 | Program output: -57                
Correct output: -46                 | Program output: 45                 
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 67                 
Correct output: 21                  | Program output: 36                 
Correct output: -83                 | Program output: 7                  
Correct output: -44                 | Program output: 91                 
Correct output: -99                 | Program output: 36                 
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -29                
Correct output: -48                 | Program output: -2                 
Correct output: -46                 | Program output: 97                 
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: -60                
Correct output: -95                 | Program output: 69                 
Correct output: -81                 | Program output: -23                
Correct output: -86                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_exec} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while})
Lexicase best program: (boolean_eq integer_dup exec_s (tag_exec_458 () in1 boolean_eq) (print_integer boolean_eq exec_y (integer_add in2 exec_flush exec_while (boolean_empty integer_min exec_empty exec_yank) integer_dec boolean_stackdepth integer_div print_exec (print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) boolean_eq exec_while () boolean_or) (boolean_shove exec_if (boolean_and) (integer_dup) exec_yankdup integer_swap integer_gte exec_eq) integer_pop boolean_xor in4 exec_noop print_integer integer_inc exec_k_when_autoconstructing (in4 exec_do*while ()) ())
Lexicase best errors: [1 1 0 0 1 0 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 62
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_exec} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while})
Zero cases best program: (boolean_eq integer_dup exec_s (tag_exec_458 () in1 boolean_eq) (print_integer boolean_eq exec_y (integer_add in2 exec_flush exec_while (boolean_empty integer_min exec_empty exec_yank) integer_dec boolean_stackdepth integer_div print_exec (print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) boolean_eq exec_while () boolean_or) (boolean_shove exec_if (boolean_and) (integer_dup) exec_yankdup integer_swap integer_gte exec_eq) integer_pop boolean_xor in4 exec_noop print_integer integer_inc exec_k_when_autoconstructing (in4 exec_do*while ()) ())
Zero cases best errors: [1 1 0 0 1 0 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 62
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (446 159 115 116 793 117 121 158 117 121)
Population mean number of elite cases: 2.26
Count of perfect (error zero) individuals by case: (446 159 115 116 793 117 121 158 117 121)
Population mean number of perfect (error zero) cases: 2.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction print_integer} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_xor})
Best program: (exec_rot (print_integer exec_eq integer_inc boolean_rot in1 integer_lte) (integer_yank integer_mult boolean_yank) (print_integer exec_yank exec_s_when_autoconstructing (in4 exec_s_when_autoconstructing (boolean_eq boolean_xor) () ()) () ()))
Errors: [1 1 0 0 1 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 17
Size: 27
Percent parens: 0.370
--- Population Statistics ---
Average total errors in population: 7.737
Median total errors in population: 8
Error averages by case: (0.554 0.841 0.885 0.884 0.207 0.883 0.879 0.842 0.883 0.879)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.146
Average program size in population (points): 52.214
Average percent parens in population: 0.254
Minimum age in population: 11.3125
Maximum age in population: 15.8359375
Average age in population: 14.73292578125
Median age in population: 14.65625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 234
Genome diversity (% unique genomes):	 0.534
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 235
Syntactic diversity (% unique Push programs):	 0.532
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 3289486
--- Timings ---
Current time: 1559314742395 milliseconds
Total Time:          28.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        20.7 seconds, 72.0%
Fitness Testing:      5.0 seconds, 17.3%
Report:               3.0 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -4                 
Correct output: 0                   | Program output: 80                 
Correct output: 6                   | Program output: 57                 
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -52                
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 91                 
Correct output: 16                  | Program output: 43                 
Correct output: 44                  | Program output: 50                 
Correct output: 24                  | Program output: 84                 
Correct output: 55                  | Program output: 55                 
Correct output: 2                   | Program output: 37                 
Correct output: 9                   | Program output: 55                 
Correct output: 22                  | Program output: 81                 
Correct output: 5                   | Program output: 99                 
Correct output: 27                  | Program output: 51                 
Correct output: 55                  | Program output: 92                 
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 65                 
Correct output: 30                  | Program output: 39                 
Correct output: 8                   | Program output: 78                 
Correct output: 41                  | Program output: 93                 
Correct output: 22                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 13                  | Program output: 13                 
Correct output: 26                  | Program output: 72                 
Correct output: -95                 | Program output: 37                 
Correct output: -79                 | Program output: 90                 
Correct output: 16                  | Program output: 91                 
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: -16                
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -2                 
Correct output: -91                 | Program output: 15                 
Correct output: -51                 | Program output: -7                 
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -96                
Correct output: -9                  | Program output: 26                 
Correct output: -12                 | Program output: 27                 
Correct output: -17                 | Program output: 9                  
Correct output: -82                 | Program output: 72                 
Correct output: -100                | Program output: -6                 
Correct output: 3                   | Program output: 3                  
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -28                
Correct output: -55                 | Program output: -28                
Correct output: -77                 | Program output: -18                
Correct output: -98                 | Program output: 20                 
Correct output: -86                 | Program output: -37                
Correct output: -53                 | Program output: 35                 
Correct output: -28                 | Program output: 89                 
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: 10                 
Correct output: 13                  | Program output: 48                 
Correct output: -91                 | Program output: -79                
Correct output: -98                 | Program output: -21                
Correct output: -63                 | Program output: 98                 
Correct output: -30                 | Program output: 12                 
Correct output: -51                 | Program output: 19                 
Correct output: -87                 | Program output: -17                
Correct output: -81                 | Program output: 100                
Correct output: -46                 | Program output: -46                
Correct output: -32                 | Program output: -4                 
Correct output: -84                 | Program output: -60                
Correct output: -75                 | Program output: -18                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 48                 
Correct output: -93                 | Program output: 65                 
Correct output: -62                 | Program output: -8                 
Correct output: 21                  | Program output: 21                 
Correct output: -83                 | Program output: -32                
Correct output: -44                 | Program output: 99                 
Correct output: -99                 | Program output: 30                 
Correct output: -99                 | Program output: 56                 
Correct output: -87                 | Program output: -87                
Correct output: -48                 | Program output: -48                
Correct output: -46                 | Program output: -1                 
Correct output: -80                 | Program output: -19                
Correct output: -98                 | Program output: 34                 
Correct output: -83                 | Program output: 45                 
Correct output: -95                 | Program output: 98                 
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_458} {:close 1, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while})
Lexicase best program: (boolean_eq integer_dup exec_s (tag_exec_458 () tag_exec_458 () in1 boolean_eq) (print_integer integer_dup exec_s (integer_yankdup) (in1 boolean_eq) (print_integer boolean_eq exec_y (integer_add in2 exec_flush exec_while (boolean_empty integer_min exec_empty exec_yank) integer_dec boolean_stackdepth integer_div integer_add exec_noop integer_empty boolean_flush in1) integer_gt integer_yank exec_noop) boolean_dup_times exec_while () boolean_or) (boolean_shove exec_if (boolean_and) (integer_add) exec_yankdup integer_swap integer_gte in3) integer_pop boolean_xor in4 exec_noop print_integer integer_inc exec_k_when_autoconstructing (in4 exec_do*while ()) ())
Lexicase best errors: [0 1 1 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 72
Percent parens: 0.236
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_458} {:close 1, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while})
Zero cases best program: (boolean_eq integer_dup exec_s (tag_exec_458 () tag_exec_458 () in1 boolean_eq) (print_integer integer_dup exec_s (integer_yankdup) (in1 boolean_eq) (print_integer boolean_eq exec_y (integer_add in2 exec_flush exec_while (boolean_empty integer_min exec_empty exec_yank) integer_dec boolean_stackdepth integer_div integer_add exec_noop integer_empty boolean_flush in1) integer_gt integer_yank exec_noop) boolean_dup_times exec_while () boolean_or) (boolean_shove exec_if (boolean_and) (integer_add) exec_yankdup integer_swap integer_gte in3) integer_pop boolean_xor in4 exec_noop print_integer integer_inc exec_k_when_autoconstructing (in4 exec_do*while ()) ())
Zero cases best errors: [0 1 1 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 72
Percent parens: 0.236
--- Lexicase Population Statistics ---
Count of elite individuals by case: (176 343 193 348 179 176 195 151 195 176)
Population mean number of elite cases: 2.13
Count of perfect (error zero) individuals by case: (176 343 193 348 179 176 195 151 195 176)
Population mean number of perfect (error zero) cases: 2.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4})
Best program: (boolean_dup_times boolean_eq integer_dup exec_s (tag_exec_458 () in1 boolean_eq) (print_integer boolean_invert_second_then_and exec_y (integer_add in2 exec_flush exec_while (boolean_empty integer_min exec_empty integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) boolean_eq exec_while () boolean_or) (boolean_shove exec_if (boolean_and) (integer_dup) integer_yank integer_swap integer_gte in3) integer_pop boolean_xor in4 exec_noop print_integer integer_inc exec_k_when_autoconstructing (in4) ())
Errors: [0 1 1 1 0 0 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 42
Size: 54
Percent parens: 0.222
--- Population Statistics ---
Average total errors in population: 7.868
Median total errors in population: 7
Error averages by case: (0.824 0.657 0.807 0.652 0.821 0.824 0.805 0.849 0.805 0.824)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.092
Average program size in population (points): 52.302
Average percent parens in population: 0.259
Minimum age in population: 12.3125
Maximum age in population: 17.642578125
Average age in population: 15.884125
Median age in population: 15.93359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 129
Genome diversity (% unique genomes):	 0.588
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 131
Syntactic diversity (% unique Push programs):	 0.585
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 3506975
--- Timings ---
Current time: 1559314745155 milliseconds
Total Time:          31.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.0 seconds, 72.8%
Fitness Testing:      5.3 seconds, 16.8%
Report:               3.2 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -4                 
Correct output: 0                   | Program output: 80                 
Correct output: 6                   | Program output: 57                 
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -52                
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 91                 
Correct output: 16                  | Program output: 43                 
Correct output: 44                  | Program output: 50                 
Correct output: 24                  | Program output: 84                 
Correct output: 55                  | Program output: 55                 
Correct output: 2                   | Program output: 37                 
Correct output: 9                   | Program output: 55                 
Correct output: 22                  | Program output: 81                 
Correct output: 5                   | Program output: 99                 
Correct output: 27                  | Program output: 51                 
Correct output: 55                  | Program output: 92                 
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 65                 
Correct output: 30                  | Program output: 39                 
Correct output: 8                   | Program output: 78                 
Correct output: 41                  | Program output: 93                 
Correct output: 22                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 13                  | Program output: 13                 
Correct output: 26                  | Program output: 72                 
Correct output: -95                 | Program output: 37                 
Correct output: -79                 | Program output: 90                 
Correct output: 16                  | Program output: 91                 
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: -16                
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -2                 
Correct output: -91                 | Program output: 15                 
Correct output: -51                 | Program output: -7                 
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -96                
Correct output: -9                  | Program output: 26                 
Correct output: -12                 | Program output: 27                 
Correct output: -17                 | Program output: 9                  
Correct output: -82                 | Program output: 72                 
Correct output: -100                | Program output: -6                 
Correct output: 3                   | Program output: 3                  
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -28                
Correct output: -55                 | Program output: -28                
Correct output: -77                 | Program output: -18                
Correct output: -98                 | Program output: 20                 
Correct output: -86                 | Program output: -37                
Correct output: -53                 | Program output: 35                 
Correct output: -28                 | Program output:                    
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: 10                 
Correct output: 13                  | Program output: 48                 
Correct output: -91                 | Program output: -79                
Correct output: -98                 | Program output: -21                
Correct output: -63                 | Program output: 98                 
Correct output: -30                 | Program output: 12                 
Correct output: -51                 | Program output: 19                 
Correct output: -87                 | Program output: -17                
Correct output: -81                 | Program output: 100                
Correct output: -46                 | Program output: -46                
Correct output: -32                 | Program output: -4                 
Correct output: -84                 | Program output: -60                
Correct output: -75                 | Program output: -18                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 48                 
Correct output: -93                 | Program output: 65                 
Correct output: -62                 | Program output: -8                 
Correct output: 21                  | Program output: 21                 
Correct output: -83                 | Program output: -32                
Correct output: -44                 | Program output: 99                 
Correct output: -99                 | Program output: 30                 
Correct output: -99                 | Program output: 56                 
Correct output: -87                 | Program output: -87                
Correct output: -48                 | Program output: -48                
Correct output: -46                 | Program output: -1                 
Correct output: -80                 | Program output: -19                
Correct output: -98                 | Program output: 34                 
Correct output: -83                 | Program output: 45                 
Correct output: -95                 | Program output: 98                 
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_exec} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while})
Lexicase best program: (boolean_eq integer_dup exec_s (tag_exec_458 () in1 boolean_eq) (print_integer boolean_eq exec_y (integer_add in2 exec_flush exec_while (boolean_empty integer_min exec_empty boolean_and) integer_dec boolean_stackdepth integer_div print_exec (print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) boolean_eq exec_while () boolean_or) (boolean_shove exec_if (boolean_and) (integer_dup) exec_yankdup integer_swap integer_gte in3) integer_pop boolean_xor integer_gt exec_noop print_integer integer_inc exec_k_when_autoconstructing (in4 exec_do*while ()) ())
Lexicase best errors: [0 0 0 0 0 1 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 62
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_exec} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction exec_do*while})
Zero cases best program: (boolean_eq integer_dup exec_s (tag_exec_458 () in1 boolean_eq) (print_integer boolean_eq exec_y (integer_add in2 exec_flush exec_while (boolean_empty integer_min exec_empty boolean_and) integer_dec boolean_stackdepth integer_div print_exec (print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) boolean_eq exec_while () boolean_or) (boolean_shove exec_if (boolean_and) (integer_dup) exec_yankdup integer_swap integer_gte in3) integer_pop boolean_xor integer_gt exec_noop print_integer integer_inc exec_k_when_autoconstructing (in4 exec_do*while ()) ())
Zero cases best errors: [0 0 0 0 0 1 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 62
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (256 871 259 258 256 310 612 4 877 7)
Population mean number of elite cases: 3.71
Count of perfect (error zero) individuals by case: (256 871 259 258 256 310 612 4 877 7)
Population mean number of perfect (error zero) cases: 3.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction print_exec} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*while})
Best program: (boolean_eq integer_dup exec_s (tag_exec_458 () in1 boolean_eq) (print_integer boolean_eq exec_y (integer_add in2 exec_flush exec_while (boolean_empty integer_min exec_empty exec_yank) integer_dec boolean_stackdepth integer_dup_items print_exec (integer_mult integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) boolean_eq exec_while () boolean_or) (boolean_shove exec_if (boolean_and) (boolean_and) exec_yankdup integer_swap integer_gte in3) integer_pop boolean_xor in4 exec_noop print_integer integer_inc exec_k_when_autoconstructing (exec_y (exec_do*while ())) ())
Errors: [0 0 0 0 0 1 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 48
Size: 63
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 6.29
Median total errors in population: 6
Error averages by case: (0.744 0.129 0.741 0.742 0.744 0.69 0.388 0.996 0.123 0.993)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.169
Average program size in population (points): 55.886
Average percent parens in population: 0.246
Minimum age in population: 13.3125
Maximum age in population: 19.1806640625
Average age in population: 17.5093193359375
Median age in population: 17.5390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 118
Genome diversity (% unique genomes):	 0.693
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 119
Syntactic diversity (% unique Push programs):	 0.69
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 3740335
--- Timings ---
Current time: 1559314748243 milliseconds
Total Time:          34.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.5 seconds, 73.7%
Fitness Testing:      5.6 seconds, 16.1%
Report:               3.4 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 527
Test mean error for best: 0.52700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -58                 | Program output: -58                
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: 89                 
Correct output: -52                 | Program output: -2                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 91                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 22                 
Correct output: 44                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: 55                  | Program output: 79                 
Correct output: 2                   | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 27                  | Program output: 90                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 43                 
Correct output: 41                  | Program output: 88                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 42                 
Correct output: 13                  | Program output: 33                 
Correct output: 26                  | Program output: 90                 
Correct output: -95                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 32                 
Correct output: -67                 | Program output: -12                
Correct output: -84                 | Program output: 38                 
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: 29                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -51                
Correct output: -3                  | Program output: 39                 
Correct output: -96                 | Program output: 63                 
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 53                 
Correct output: -100                | Program output: -78                
Correct output: 3                   | Program output: 90                 
Correct output: -83                 | Program output: -36                
Correct output: -90                 | Program output: -74                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -26                
Correct output: -98                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: 13                  | Program output: 20                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -14                
Correct output: -63                 | Program output: -27                
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: 19                 
Correct output: -87                 | Program output: -27                
Correct output: -81                 | Program output: -13                
Correct output: -46                 | Program output: 90                 
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: 0                  
Correct output: -75                 | Program output: -75                
Correct output: -58                 | Program output: 0                  
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: 76                 
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 24                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 1                  
Correct output: -99                 | Program output: -28                
Correct output: -87                 | Program output: -33                
Correct output: -48                 | Program output: -1                 
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -64                
Correct output: -98                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -24                
Correct output: -86                 | Program output: 94                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_newline} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_exec} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap})
Lexicase best program: (boolean_eq in2 exec_s (tag_exec_458 () in1 exec_s () (print_integer boolean_eq exec_y (integer_pop in2 exec_flush exec_while (boolean_empty print_newline exec_empty exec_yank) integer_dec boolean_stackdepth integer_div print_exec (print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) boolean_eq exec_while () boolean_or) (boolean_shove exec_if (boolean_and) (integer_dup) exec_yankdup integer_swap exec_if (in2) (integer_dup) exec_yankdup integer_swap)) () ())
Lexicase best errors: [1 1 1 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 58
Percent parens: 0.276
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_newline} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_exec} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap})
Zero cases best program: (boolean_eq in2 exec_s (tag_exec_458 () in1 exec_s () (print_integer boolean_eq exec_y (integer_pop in2 exec_flush exec_while (boolean_empty print_newline exec_empty exec_yank) integer_dec boolean_stackdepth integer_div print_exec (print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) boolean_eq exec_while () boolean_or) (boolean_shove exec_if (boolean_and) (integer_dup) exec_yankdup integer_swap exec_if (in2) (integer_dup) exec_yankdup integer_swap)) () ())
Zero cases best errors: [1 1 1 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 58
Percent parens: 0.276
--- Lexicase Population Statistics ---
Count of elite individuals by case: (168 168 378 377 168 244 87 711 181 152)
Population mean number of elite cases: 2.63
Count of perfect (error zero) individuals by case: (168 168 378 377 168 244 87 711 181 152)
Population mean number of perfect (error zero) cases: 2.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_newline} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_exec} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap})
Best program: (boolean_eq in2 exec_s (tag_exec_458 () in1 exec_s () (print_integer boolean_eq exec_y (integer_pop in2 exec_flush exec_while (boolean_empty print_newline exec_empty exec_yank) integer_dec boolean_stackdepth integer_div print_exec (print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) boolean_eq exec_while () boolean_or) (boolean_shove exec_if (boolean_and) (integer_dup) exec_yankdup integer_swap exec_if (in2) (integer_dup) exec_yankdup integer_swap)) () ())
Errors: [1 1 1 1 1 0 0 0 0 1]
Total: 6
Mean: 0.6
Genome size: 42
Size: 58
Percent parens: 0.276
--- Population Statistics ---
Average total errors in population: 7.366
Median total errors in population: 7
Error averages by case: (0.832 0.832 0.622 0.623 0.832 0.756 0.913 0.289 0.819 0.848)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.937
Average program size in population (points): 57.695
Average percent parens in population: 0.238
Minimum age in population: 16.61669921875
Maximum age in population: 20.8388671875
Average age in population: 19.05458642578125
Median age in population: 19.1474609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 54
Genome diversity (% unique genomes):	 0.679
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.675
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 3993515
--- Timings ---
Current time: 1559314750839 milliseconds
Total Time:          37.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        27.5 seconds, 73.9%
Fitness Testing:      5.9 seconds, 15.9%
Report:               3.7 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 660
Test mean error for best: 0.66000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -4                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: 89                 
Correct output: -52                 | Program output: -2                 
Correct output: 24                  | Program output: 53                 
Correct output: 20                  | Program output: 91                 
Correct output: -57                 | Program output: -11                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 26                 
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 97                 
Correct output: 24                  | Program output: 89                 
Correct output: 55                  | Program output: 83                 
Correct output: 2                   | Program output: 75                 
Correct output: 9                   | Program output: 89                 
Correct output: 22                  | Program output: 54                 
Correct output: 5                   | Program output: 45                 
Correct output: 27                  | Program output: 27                 
Correct output: 55                  | Program output: 60                 
Correct output: 5                   | Program output: 82                 
Correct output: 44                  | Program output: 66                 
Correct output: 30                  | Program output: 88                 
Correct output: 8                   | Program output: 26                 
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 37                 
Correct output: 1                   | Program output: 64                 
Correct output: 13                  | Program output: 46                 
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -37                
Correct output: -79                 | Program output: 41                 
Correct output: 16                  | Program output: 16                 
Correct output: -67                 | Program output: 1                  
Correct output: -84                 | Program output: 24                 
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: 33                 
Correct output: -95                 | Program output: 7                  
Correct output: -91                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: -3                  | Program output: 100                
Correct output: -96                 | Program output: 35                 
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: 67                 
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 17                 
Correct output: -100                | Program output: -8                 
Correct output: 3                   | Program output: 88                 
Correct output: -83                 | Program output: -71                
Correct output: -90                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -25                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: 17                 
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: 3                  
Correct output: -46                 | Program output: -26                
Correct output: -98                 | Program output: -68                
Correct output: -84                 | Program output: -72                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: 89                 
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: 85                 
Correct output: -87                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: 98                 
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -64                
Correct output: -58                 | Program output: 14                 
Correct output: -46                 | Program output: 18                 
Correct output: -93                 | Program output: 78                 
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 31                 
Correct output: -83                 | Program output: 34                 
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -42                
Correct output: -87                 | Program output: -24                
Correct output: -48                 | Program output: -23                
Correct output: -46                 | Program output: -8                 
Correct output: -80                 | Program output: -14                
Correct output: -98                 | Program output: 13                 
Correct output: -83                 | Program output: -64                
Correct output: -95                 | Program output: 62                 
Correct output: -81                 | Program output: 39                 
Correct output: -86                 | Program output: 7                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 1, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_exec} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte})
Lexicase best program: (boolean_eq integer_dup boolean_flush tag_exec_458 () in1 boolean_eq print_integer boolean_eq exec_y (integer_add in2 exec_flush exec_while (boolean_empty integer_min exec_empty exec_yank) integer_dec boolean_stackdepth integer_div print_exec (print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) boolean_eq exec_while () boolean_or boolean_shove exec_if (integer_gt integer_sub exec_noop) (boolean_eq exec_while () boolean_or) boolean_shove exec_if (boolean_and) (integer_dup) exec_yankdup integer_swap integer_gte)
Lexicase best errors: [0 0 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 57
Percent parens: 0.193
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 1, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_exec} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte})
Zero cases best program: (boolean_eq integer_dup boolean_flush tag_exec_458 () in1 boolean_eq print_integer boolean_eq exec_y (integer_add in2 exec_flush exec_while (boolean_empty integer_min exec_empty exec_yank) integer_dec boolean_stackdepth integer_div print_exec (print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) boolean_eq exec_while () boolean_or boolean_shove exec_if (integer_gt integer_sub exec_noop) (boolean_eq exec_while () boolean_or) boolean_shove exec_if (boolean_and) (integer_dup) exec_yankdup integer_swap integer_gte)
Zero cases best errors: [0 0 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 57
Percent parens: 0.193
--- Lexicase Population Statistics ---
Count of elite individuals by case: (463 287 464 464 216 463 216 890 272 463)
Population mean number of elite cases: 4.20
Count of perfect (error zero) individuals by case: (463 287 464 464 216 463 216 890 272 463)
Population mean number of perfect (error zero) cases: 4.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 1, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_exec} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction in4} {:close 0, :instruction exec_noop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 1, :instruction exec_k_when_autoconstructing})
Best program: (boolean_eq integer_dup boolean_flush tag_exec_458 () in1 boolean_eq print_integer boolean_eq exec_y (integer_add in2 exec_flush exec_while (boolean_empty integer_min exec_empty exec_yank) integer_dec boolean_stackdepth integer_div print_exec (print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) boolean_eq exec_while () boolean_or boolean_shove exec_if (integer_gt integer_sub exec_noop) (boolean_eq exec_while () boolean_or) boolean_shove exec_if (boolean_and) (integer_dup) exec_yankdup integer_swap integer_gte in3 integer_pop boolean_xor in4 exec_noop print_integer integer_inc exec_k_when_autoconstructing () ())
Errors: [0 0 0 0 1 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 54
Size: 67
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 5.802
Median total errors in population: 7
Error averages by case: (0.537 0.713 0.536 0.536 0.784 0.537 0.784 0.11 0.728 0.537)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.097
Average program size in population (points): 57.349
Average percent parens in population: 0.248
Minimum age in population: 17.61669921875
Maximum age in population: 22.294189453125
Average age in population: 20.59064428710938
Median age in population: 20.5628662109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 153
Genome diversity (% unique genomes):	 0.677
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 154
Syntactic diversity (% unique Push programs):	 0.676
Total error diversity:				 0.009
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 4245262
--- Timings ---
Current time: 1559314753791 milliseconds
Total Time:          40.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        29.9 seconds, 74.4%
Fitness Testing:      6.3 seconds, 15.6%
Report:               3.9 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 544
Test mean error for best: 0.54400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -4                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -2                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: -57                 | Program output: -11                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 91                 
Correct output: 16                  | Program output: 43                 
Correct output: 44                  | Program output: 50                 
Correct output: 24                  | Program output: 84                 
Correct output: 55                  | Program output: 55                 
Correct output: 2                   | Program output: 37                 
Correct output: 9                   | Program output: 55                 
Correct output: 22                  | Program output: 81                 
Correct output: 5                   | Program output: 99                 
Correct output: 27                  | Program output: 51                 
Correct output: 55                  | Program output: 92                 
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 65                 
Correct output: 30                  | Program output: 39                 
Correct output: 8                   | Program output: 78                 
Correct output: 41                  | Program output: 93                 
Correct output: 22                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 13                  | Program output: 13                 
Correct output: 26                  | Program output: 72                 
Correct output: -95                 | Program output: -37                
Correct output: -79                 | Program output: 90                 
Correct output: 16                  | Program output: 91                 
Correct output: -67                 | Program output: 1                  
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: 7                  
Correct output: -91                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -96                
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: 27                 
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 72                 
Correct output: -100                | Program output: -8                 
Correct output: 3                   | Program output: 3                  
Correct output: -83                 | Program output: -71                
Correct output: -90                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -25                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -37                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output:                    
Correct output: -46                 | Program output: -26                
Correct output: -98                 | Program output: -68                
Correct output: -84                 | Program output: -72                
Correct output: 13                  | Program output: 48                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: 98                 
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: 19                 
Correct output: -87                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -64                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 48                 
Correct output: -93                 | Program output: 65                 
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 21                 
Correct output: -83                 | Program output: -32                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -42                
Correct output: -87                 | Program output: -24                
Correct output: -48                 | Program output: -23                
Correct output: -46                 | Program output: -8                 
Correct output: -80                 | Program output: -14                
Correct output: -98                 | Program output: 34                 
Correct output: -83                 | Program output: -64                
Correct output: -95                 | Program output: 98                 
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: 7                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_exec} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction in1} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gte} {:close 1, :instruction in3})
Lexicase best program: (boolean_eq integer_dup exec_s (exec_s (tag_exec_458 () in1 boolean_eq) (print_integer boolean_eq exec_y (boolean_eq in2 exec_flush exec_while (boolean_empty integer_min exec_empty exec_yank) integer_dec boolean_stackdepth integer_div print_exec (boolean_empty integer_min exec_empty exec_yank) integer_dec boolean_stackdepth integer_div print_exec (print_newline integer_empty boolean_flush exec_yank) integer_dec boolean_stackdepth integer_div exec_shove (print_newline integer_empty integer_swap in1) exec_noop) boolean_eq exec_while () boolean_or) (boolean_shove exec_if (boolean_and) (integer_dup) exec_yankdup integer_swap integer_dup) exec_yankdup integer_swap integer_gte in3) (integer_pop integer_gte in3) ())
Lexicase best errors: [1 0 1 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 76
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_exec} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction in1} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gte} {:close 1, :instruction in3})
Zero cases best program: (boolean_eq integer_dup exec_s (exec_s (tag_exec_458 () in1 boolean_eq) (print_integer boolean_eq exec_y (boolean_eq in2 exec_flush exec_while (boolean_empty integer_min exec_empty exec_yank) integer_dec boolean_stackdepth integer_div print_exec (boolean_empty integer_min exec_empty exec_yank) integer_dec boolean_stackdepth integer_div print_exec (print_newline integer_empty boolean_flush exec_yank) integer_dec boolean_stackdepth integer_div exec_shove (print_newline integer_empty integer_swap in1) exec_noop) boolean_eq exec_while () boolean_or) (boolean_shove exec_if (boolean_and) (integer_dup) exec_yankdup integer_swap integer_dup) exec_yankdup integer_swap integer_gte in3) (integer_pop integer_gte in3) ())
Zero cases best errors: [1 0 1 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 76
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (10 769 250 12 12 13 11 582 769 898)
Population mean number of elite cases: 3.33
Count of perfect (error zero) individuals by case: (10 769 250 12 12 13 11 582 769 898)
Population mean number of perfect (error zero) cases: 3.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_exec} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction in1} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 1, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gte} {:close 1, :instruction in3})
Best program: (boolean_eq integer_dup exec_s (exec_s (tag_exec_458 () in1 boolean_eq) (print_integer boolean_eq exec_y (boolean_eq in2 exec_flush exec_while (boolean_empty integer_min exec_empty exec_yank) integer_dec boolean_stackdepth integer_div print_exec (boolean_empty integer_min exec_empty exec_yank) integer_dec boolean_stackdepth integer_div print_exec (print_newline integer_empty boolean_flush exec_yank) integer_dec boolean_stackdepth integer_div exec_shove (print_newline integer_empty integer_swap in1) exec_noop) boolean_eq exec_while () boolean_or) (boolean_shove exec_if (boolean_and) (integer_dup) exec_yankdup integer_swap integer_dup) exec_yankdup integer_swap integer_gte in3) (integer_pop integer_gte in3) ())
Errors: [1 0 1 0 0 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 60
Size: 76
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 6.674
Median total errors in population: 6
Error averages by case: (0.99 0.231 0.75 0.988 0.988 0.987 0.989 0.418 0.231 0.102)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.854
Average program size in population (points): 57.7
Average percent parens in population: 0.256
Minimum age in population: 19.0205078125
Maximum age in population: 23.9986572265625
Average age in population: 22.50781225585938
Median age in population: 22.6898193359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 147
Genome diversity (% unique genomes):	 0.669
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 147
Syntactic diversity (% unique Push programs):	 0.664
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 4481990
--- Timings ---
Current time: 1559314756511 milliseconds
Total Time:          42.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.0 seconds, 74.7%
Fitness Testing:      6.6 seconds, 15.4%
Report:               4.1 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 539
Test mean error for best: 0.53900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -58                
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 57                 
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -2                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 43                 
Correct output: 44                  | Program output: 50                 
Correct output: 24                  | Program output: 84                 
Correct output: 55                  | Program output: 55                 
Correct output: 2                   | Program output: 37                 
Correct output: 9                   | Program output: 55                 
Correct output: 22                  | Program output: 81                 
Correct output: 5                   | Program output: 99                 
Correct output: 27                  | Program output: 51                 
Correct output: 55                  | Program output: 92                 
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 65                 
Correct output: 30                  | Program output: 39                 
Correct output: 8                   | Program output: 78                 
Correct output: 41                  | Program output: 93                 
Correct output: 22                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 13                  | Program output: 13                 
Correct output: 26                  | Program output: 72                 
Correct output: -95                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 91                 
Correct output: -67                 | Program output: -12                
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: -16                
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -7                 
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -96                
Correct output: -9                  | Program output: 26                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: 9                  
Correct output: -82                 | Program output: 72                 
Correct output: -100                | Program output: -78                
Correct output: 3                   | Program output: 3                  
Correct output: -83                 | Program output: -36                
Correct output: -90                 | Program output: -74                
Correct output: -90                 | Program output: -28                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -18                
Correct output: -98                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: 35                 
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: 13                  | Program output: 48                 
Correct output: -91                 | Program output: -79                
Correct output: -98                 | Program output: -14                
Correct output: -63                 | Program output: -27                
Correct output: -30                 | Program output: 12                 
Correct output: -51                 | Program output: 19                 
Correct output: -87                 | Program output: -17                
Correct output: -81                 | Program output: -13                
Correct output: -46                 | Program output: -46                
Correct output: -32                 | Program output: -4                 
Correct output: -84                 | Program output: 0                  
Correct output: -75                 | Program output: -75                
Correct output: -58                 | Program output: 0                  
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: 65                 
Correct output: -62                 | Program output: -8                 
Correct output: 21                  | Program output: 21                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: 99                 
Correct output: -99                 | Program output: 1                  
Correct output: -99                 | Program output: -28                
Correct output: -87                 | Program output: -33                
Correct output: -48                 | Program output: -1                 
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -64                
Correct output: -98                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -24                
Correct output: -86                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_newline} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction in3})
Lexicase best program: (boolean_eq in2 exec_s (tag_exec_458 () in1 exec_s () (print_integer boolean_eq exec_y (in4) print_integer boolean_eq exec_y (integer_pop in2 exec_flush exec_while (boolean_empty print_newline exec_empty exec_yank) integer_dec boolean_empty integer_min exec_empty exec_yank) integer_dec boolean_stackdepth integer_div exec_shove (print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) (boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (integer_dup) exec_yankdup) integer_swap) (integer_gte in3) ())
Lexicase best errors: [0 0 1 0 1 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 63
Percent parens: 0.238
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_newline} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction in3})
Zero cases best program: (boolean_eq in2 exec_s (tag_exec_458 () in1 exec_s () (print_integer boolean_eq exec_y (in4) print_integer boolean_eq exec_y (integer_pop in2 exec_flush exec_while (boolean_empty print_newline exec_empty exec_yank) integer_dec boolean_empty integer_min exec_empty exec_yank) integer_dec boolean_stackdepth integer_div exec_shove (print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) (boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (integer_dup) exec_yankdup) integer_swap) (integer_gte in3) ())
Zero cases best errors: [0 0 1 0 1 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 63
Percent parens: 0.238
--- Lexicase Population Statistics ---
Count of elite individuals by case: (820 386 404 319 64 386 386 319 22 21)
Population mean number of elite cases: 3.13
Count of perfect (error zero) individuals by case: (820 386 404 319 64 386 386 319 22 21)
Population mean number of perfect (error zero) cases: 3.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction tag_exec_458} {:close 1, :instruction in1} {:close 1, :instruction boolean_eq} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_add} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction in3})
Best program: (boolean_eq integer_dup exec_s (tag_exec_458 (in1) boolean_eq) (print_integer boolean_eq exec_y (integer_add in2 exec_flush exec_while () boolean_empty integer_min exec_empty exec_yank) integer_dec boolean_stackdepth integer_div exec_shove (print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) (boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (integer_dup) exec_yankdup) integer_swap integer_gte in3)
Errors: [0 0 1 0 1 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 39
Size: 50
Percent parens: 0.220
--- Population Statistics ---
Average total errors in population: 6.873
Median total errors in population: 6
Error averages by case: (0.18 0.614 0.596 0.681 0.936 0.614 0.614 0.681 0.978 0.979)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.031
Average program size in population (points): 65.941
Average percent parens in population: 0.243
Minimum age in population: 21.3291015625
Maximum age in population: 25.7537841796875
Average age in population: 23.82809631347656
Median age in population: 23.943115234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 124
Genome diversity (% unique genomes):	 0.574
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 125
Syntactic diversity (% unique Push programs):	 0.573
Total error diversity:				 0.007
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 4779885
--- Timings ---
Current time: 1559314759140 milliseconds
Total Time:          45.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.0 seconds, 74.8%
Fitness Testing:      7.0 seconds, 15.3%
Report:               4.4 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 423
Test mean error for best: 0.42300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -58                
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: 89                 
Correct output: -52                 | Program output: -2                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 91                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: 55                  | Program output: 79                 
Correct output: 2                   | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 26                 
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 42                 
Correct output: 13                  | Program output: 33                 
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: -67                 | Program output: -12                
Correct output: -84                 | Program output: 24                 
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: 29                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -51                
Correct output: -3                  | Program output: 39                 
Correct output: -96                 | Program output: 35                 
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 17                 
Correct output: -100                | Program output: -78                
Correct output: 3                   | Program output: 88                 
Correct output: -83                 | Program output: -71                
Correct output: -90                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -26                
Correct output: -98                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -27                
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: 19                 
Correct output: -87                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: 90                 
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -75                
Correct output: -58                 | Program output: 0                  
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: 76                 
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 24                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -42                
Correct output: -87                 | Program output: -33                
Correct output: -48                 | Program output: -23                
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -64                
Correct output: -98                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -24                
Correct output: -86                 | Program output: 7                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_newline} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_exec} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap})
Lexicase best program: (boolean_eq in2 exec_s (tag_exec_458 () in1 integer_min) (print_integer boolean_eq exec_y (in4) print_integer boolean_eq exec_y (integer_pop in2 exec_flush exec_while (boolean_empty print_newline exec_empty exec_yank) integer_dec boolean_stackdepth integer_div print_exec (print_newline integer_empty boolean_flush integer_swap) integer_yank integer_sub exec_noop) boolean_eq exec_while () boolean_or) (boolean_shove exec_if (boolean_and) (integer_dup) exec_yankdup integer_swap exec_if (boolean_dup_times) (integer_dup) exec_yankdup integer_swap))
Lexicase best errors: [0 1 0 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 60
Percent parens: 0.233
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_newline} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_exec} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap})
Zero cases best program: (boolean_eq in2 exec_s (tag_exec_458 () in1 integer_min) (print_integer boolean_eq exec_y (in4) print_integer boolean_eq exec_y (integer_pop in2 exec_flush exec_while (boolean_empty print_newline exec_empty exec_yank) integer_dec boolean_stackdepth integer_div print_exec (print_newline integer_empty boolean_flush integer_swap) integer_yank integer_sub exec_noop) boolean_eq exec_while () boolean_or) (boolean_shove exec_if (boolean_and) (integer_dup) exec_yankdup integer_swap exec_if (boolean_dup_times) (integer_dup) exec_yankdup integer_swap))
Zero cases best errors: [0 1 0 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 60
Percent parens: 0.233
--- Lexicase Population Statistics ---
Count of elite individuals by case: (675 43 389 674 372 33 388 510 39 372)
Population mean number of elite cases: 3.49
Count of perfect (error zero) individuals by case: (675 43 389 674 372 33 388 510 39 372)
Population mean number of perfect (error zero) cases: 3.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_newline} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_exec} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap})
Best program: (boolean_eq in2 exec_s (tag_exec_458 () in1 integer_min) (print_integer boolean_eq exec_y (in4) print_integer boolean_eq exec_y (integer_pop in2 exec_flush exec_while (boolean_empty print_newline exec_empty exec_yank) integer_dec boolean_stackdepth integer_div print_exec (print_newline integer_empty boolean_flush integer_swap) integer_yank integer_sub exec_noop) boolean_eq exec_while () boolean_or) (boolean_shove exec_if (boolean_and) (integer_dup) exec_yankdup integer_swap exec_if (boolean_dup_times) (integer_dup) exec_yankdup integer_swap))
Errors: [0 1 0 0 0 1 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 46
Size: 60
Percent parens: 0.233
--- Population Statistics ---
Average total errors in population: 6.505
Median total errors in population: 8
Error averages by case: (0.325 0.957 0.611 0.326 0.628 0.967 0.612 0.49 0.961 0.628)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.149
Average program size in population (points): 57.35
Average percent parens in population: 0.230
Minimum age in population: 23.1123046875
Maximum age in population: 27.29443359375
Average age in population: 25.69800918579102
Median age in population: 25.91107177734375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 198
Genome diversity (% unique genomes):	 0.539
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 199
Syntactic diversity (% unique Push programs):	 0.537
Total error diversity:				 0.008
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 5342751
--- Timings ---
Current time: 1559314762427 milliseconds
Total Time:          48.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.0 seconds, 74.3%
Fitness Testing:      7.6 seconds, 15.8%
Report:               4.7 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 416
Test mean error for best: 0.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -58                
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: 89                 
Correct output: -52                 | Program output: -2                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 91                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: 55                  | Program output: 79                 
Correct output: 2                   | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 26                 
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 42                 
Correct output: 13                  | Program output: 33                 
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: -67                 | Program output: -12                
Correct output: -84                 | Program output: 24                 
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: 29                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -51                
Correct output: -3                  | Program output: 39                 
Correct output: -96                 | Program output: 35                 
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 17                 
Correct output: -100                | Program output: -78                
Correct output: 3                   | Program output: 88                 
Correct output: -83                 | Program output: -71                
Correct output: -90                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -26                
Correct output: -98                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -27                
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: 19                 
Correct output: -87                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: 90                 
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -75                
Correct output: -58                 | Program output: 0                  
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: 76                 
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 24                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -42                
Correct output: -87                 | Program output: -33                
Correct output: -48                 | Program output: -23                
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -64                
Correct output: -98                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -24                
Correct output: -86                 | Program output: 7                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_newline} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_exec} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap})
Lexicase best program: (boolean_eq in2 exec_s (tag_exec_458 () in1 integer_min) (print_integer boolean_eq exec_y (in4) print_integer exec_swap (exec_y (integer_pop in2 exec_flush exec_while (boolean_empty print_newline exec_empty exec_yank) integer_dec boolean_stackdepth integer_div print_exec (print_newline integer_empty boolean_flush integer_swap) integer_yank integer_yankdup exec_noop) boolean_eq exec_while () boolean_or) (boolean_shove exec_if (boolean_and) (integer_dup) exec_yankdup integer_swap exec_if (boolean_dup_times) (integer_dup) exec_yankdup integer_swap)) ())
Lexicase best errors: [1 0 0 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 62
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_newline} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_exec} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap})
Zero cases best program: (boolean_eq in2 exec_s (tag_exec_458 () in1 integer_min) (print_integer boolean_eq exec_y (in4) print_integer exec_swap (exec_y (integer_pop in2 exec_flush exec_while (boolean_empty print_newline exec_empty exec_yank) integer_dec boolean_stackdepth integer_div print_exec (print_newline integer_empty boolean_flush integer_swap) integer_yank integer_yankdup exec_noop) boolean_eq exec_while () boolean_or) (boolean_shove exec_if (boolean_and) (integer_dup) exec_yankdup integer_swap exec_if (boolean_dup_times) (integer_dup) exec_yankdup integer_swap)) ())
Zero cases best errors: [1 0 0 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 62
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (91 552 848 668 552 697 170 527 519 91)
Population mean number of elite cases: 4.72
Count of perfect (error zero) individuals by case: (91 552 848 668 552 697 170 527 519 91)
Population mean number of perfect (error zero) cases: 4.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_newline} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction in3})
Best program: (integer_rot in2 exec_s (tag_exec_458 () in1 integer_min) (print_integer boolean_eq exec_y (in4) print_integer boolean_eq exec_y (integer_pop in2 exec_flush exec_while (boolean_empty print_newline exec_while () boolean_empty integer_min exec_empty exec_yank) integer_dec boolean_stackdepth integer_div exec_shove (print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (integer_dup) exec_yankdup) (integer_swap) integer_gte in3)
Errors: [1 0 0 0 0 0 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 46
Size: 59
Percent parens: 0.220
--- Population Statistics ---
Average total errors in population: 5.285
Median total errors in population: 5
Error averages by case: (0.909 0.448 0.152 0.332 0.448 0.303 0.83 0.473 0.481 0.909)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.937
Average program size in population (points): 60.27
Average percent parens in population: 0.238
Minimum age in population: 25.32000732421875
Maximum age in population: 29.29443359375
Average age in population: 27.43369506835938
Median age in population: 27.41107177734375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 153
Genome diversity (% unique genomes):	 0.647
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 153
Syntactic diversity (% unique Push programs):	 0.646
Total error diversity:				 0.008
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 6045578
--- Timings ---
Current time: 1559314765872 milliseconds
Total Time:          51.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.9 seconds, 73.2%
Fitness Testing:      8.5 seconds, 16.3%
Report:               5.3 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 416
Test mean error for best: 0.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -58                
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: 89                 
Correct output: -52                 | Program output: -2                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 91                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: 55                  | Program output: 79                 
Correct output: 2                   | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 26                 
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 42                 
Correct output: 13                  | Program output: 33                 
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: -67                 | Program output: -12                
Correct output: -84                 | Program output: 24                 
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: 29                 
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -51                
Correct output: -3                  | Program output: 39                 
Correct output: -96                 | Program output: 35                 
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 17                 
Correct output: -100                | Program output: -78                
Correct output: 3                   | Program output: 88                 
Correct output: -83                 | Program output: -71                
Correct output: -90                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -26                
Correct output: -98                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -27                
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: 19                 
Correct output: -87                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: 90                 
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -75                
Correct output: -58                 | Program output: 0                  
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: 76                 
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 24                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -42                
Correct output: -87                 | Program output: -33                
Correct output: -48                 | Program output: -23                
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -64                
Correct output: -98                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -24                
Correct output: -86                 | Program output: 7                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_newline} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_exec} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap})
Lexicase best program: (boolean_eq in2 boolean_eq in2 exec_s (tag_exec_458 () in1 integer_min) (print_integer boolean_eq exec_y (in4) print_integer boolean_eq exec_y (integer_pop in2 exec_flush exec_while (boolean_empty print_newline exec_empty exec_yank) integer_dec boolean_stackdepth integer_div print_exec (print_newline integer_empty boolean_flush integer_swap) integer_yank integer_sub exec_noop) boolean_eq exec_while () boolean_or) (boolean_shove exec_if (boolean_and) (integer_dup) exec_yankdup integer_swap exec_if (boolean_dup_times) (integer_dup) exec_yankdup integer_swap))
Lexicase best errors: [1 1 0 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 62
Percent parens: 0.226
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_newline} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_exec} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap})
Zero cases best program: (boolean_eq in2 boolean_eq in2 exec_s (tag_exec_458 () in1 integer_min) (print_integer boolean_eq exec_y (in4) print_integer boolean_eq exec_y (integer_pop in2 exec_flush exec_while (boolean_empty print_newline exec_empty exec_yank) integer_dec boolean_stackdepth integer_div print_exec (print_newline integer_empty boolean_flush integer_swap) integer_yank integer_sub exec_noop) boolean_eq exec_while () boolean_or) (boolean_shove exec_if (boolean_and) (integer_dup) exec_yankdup integer_swap exec_if (boolean_dup_times) (integer_dup) exec_yankdup integer_swap))
Zero cases best errors: [1 1 0 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 62
Percent parens: 0.226
--- Lexicase Population Statistics ---
Count of elite individuals by case: (21 24 889 357 307 383 602 357 530 194)
Population mean number of elite cases: 3.66
Count of perfect (error zero) individuals by case: (21 24 889 357 307 383 602 357 530 194)
Population mean number of perfect (error zero) cases: 3.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction 55} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_swap})
Best program: (boolean_eq in2 exec_s (in1 integer_min) (print_integer boolean_eq exec_y (in4) print_integer boolean_eq exec_y (integer_pop in2 exec_flush exec_yank) integer_dec boolean_stackdepth integer_div 55 print_newline integer_empty boolean_flush in1) (integer_gt integer_sub exec_noop) boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (exec_swap () (exec_yankdup) integer_swap) integer_gte boolean_flush exec_yank integer_yank integer_sub exec_noop boolean_eq exec_while () boolean_or boolean_shove exec_if (boolean_and) (integer_dup) exec_yankdup integer_swap exec_if (boolean_dup_times) (integer_dup) exec_k (integer_swap) ())
Errors: [1 1 0 0 1 0 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 56
Size: 74
Percent parens: 0.243
--- Population Statistics ---
Average total errors in population: 6.336
Median total errors in population: 7
Error averages by case: (0.979 0.976 0.111 0.643 0.693 0.617 0.398 0.643 0.47 0.806)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.439
Average program size in population (points): 62.876
Average percent parens in population: 0.245
Minimum age in population: 26.7340087890625
Maximum age in population: 31.07359313964844
Average age in population: 29.04697827148438
Median age in population: 29.13359832763672
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 54
Genome diversity (% unique genomes):	 0.638
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.637
Total error diversity:				 0.007
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 6780857
--- Timings ---
Current time: 1559314769343 milliseconds
Total Time:          55.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.9 seconds, 72.1%
Fitness Testing:      9.3 seconds, 16.8%
Report:               6.0 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 569
Test mean error for best: 0.56900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -4                 
Correct output: 0                   | Program output: 80                 
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: 89                 
Correct output: -52                 | Program output: -52                
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 91                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 91                 
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: 55                  | Program output: 79                 
Correct output: 2                   | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 82                 
Correct output: 44                  | Program output: 44                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 26                 
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 42                 
Correct output: 13                  | Program output: 33                 
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: 37                 
Correct output: -79                 | Program output: 90                 
Correct output: 16                  | Program output: 16                 
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: 24                 
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: 29                 
Correct output: -95                 | Program output: -2                 
Correct output: -91                 | Program output: 15                 
Correct output: -51                 | Program output: -51                
Correct output: -3                  | Program output: 39                 
Correct output: -96                 | Program output: 35                 
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: 27                 
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 17                 
Correct output: -100                | Program output: -6                 
Correct output: 3                   | Program output: 88                 
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -28                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: 20                 
Correct output: -86                 | Program output: -37                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: 89                 
Correct output: -46                 | Program output: -26                
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: 10                 
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -21                
Correct output: -63                 | Program output: 98                 
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: 19                 
Correct output: -87                 | Program output: -27                
Correct output: -81                 | Program output: 100                
Correct output: -46                 | Program output: 90                 
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -60                
Correct output: -75                 | Program output: -18                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 48                 
Correct output: -93                 | Program output: 76                 
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 24                 
Correct output: -83                 | Program output: -32                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 30                 
Correct output: -99                 | Program output: 56                 
Correct output: -87                 | Program output: -87                
Correct output: -48                 | Program output: -48                
Correct output: -46                 | Program output: -1                 
Correct output: -80                 | Program output: -19                
Correct output: -98                 | Program output: 34                 
Correct output: -83                 | Program output: 45                 
Correct output: -95                 | Program output: 98                 
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: 7                  
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction in3})
Lexicase best program: (boolean_eq in2 exec_s (in1 integer_min) (print_integer boolean_eq exec_y (in4) boolean_eq in2 exec_s (in1 integer_min) (print_integer boolean_eq exec_y (in4) print_integer boolean_eq exec_y (integer_pop in2 exec_flush exec_yank) integer_dec boolean_stackdepth integer_div exec_shove (print_newline integer_empty boolean_flush in1) integer_gt integer_sub) (exec_noop) boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (exec_swap () (exec_yankdup) integer_swap) integer_gte in3) ())
Lexicase best errors: [0 0 1 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 63
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction in4} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction in3})
Zero cases best program: (boolean_eq in2 exec_s (in1 integer_min) (print_integer boolean_eq exec_y (in4) boolean_eq in2 exec_s (in1 integer_min) (print_integer boolean_eq exec_y (in4) print_integer boolean_eq exec_y (integer_pop in2 exec_flush exec_yank) integer_dec boolean_stackdepth integer_div exec_shove (print_newline integer_empty boolean_flush in1) integer_gt integer_sub) (exec_noop) boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (exec_swap () (exec_yankdup) integer_swap) integer_gte in3) ())
Zero cases best errors: [0 0 1 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 63
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (388 396 344 376 110 568 376 110 388 518)
Population mean number of elite cases: 3.57
Count of perfect (error zero) individuals by case: (388 396 344 376 110 568 376 110 388 518)
Population mean number of perfect (error zero) cases: 3.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_newline} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction in3})
Best program: (boolean_eq in2 exec_s (tag_exec_458 () in1 integer_min) (print_integer exec_dup_items exec_y (in4) print_integer boolean_eq integer_yank integer_pop in2 exec_flush exec_while (boolean_empty print_newline exec_empty exec_yank) integer_div exec_shove (print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) (boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (exec_swap () (exec_yankdup) integer_swap) integer_gte in3))
Errors: [0 0 1 0 0 1 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 41
Size: 54
Percent parens: 0.241
--- Population Statistics ---
Average total errors in population: 6.426
Median total errors in population: 7
Error averages by case: (0.612 0.604 0.656 0.624 0.89 0.432 0.624 0.89 0.612 0.482)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.383
Average program size in population (points): 62.143
Average percent parens in population: 0.238
Minimum age in population: 28.12284851074219
Maximum age in population: 32.43401336669922
Average age in population: 30.36062856292725
Median age in population: 30.35682678222656
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 89
Genome diversity (% unique genomes):	 0.683
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 90
Syntactic diversity (% unique Push programs):	 0.682
Total error diversity:				 0.008
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.085
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 7508358
--- Timings ---
Current time: 1559314772811 milliseconds
Total Time:          58.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.8 seconds, 71.2%
Fitness Testing:     10.2 seconds, 17.3%
Report:               6.7 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 328
Test mean error for best: 0.32800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -58                
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -2                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 50                 
Correct output: 24                  | Program output: 84                 
Correct output: 55                  | Program output: 55                 
Correct output: 2                   | Program output: 37                 
Correct output: 9                   | Program output: 55                 
Correct output: 22                  | Program output: 54                 
Correct output: 5                   | Program output: 45                 
Correct output: 27                  | Program output: 27                 
Correct output: 55                  | Program output: 60                 
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 65                 
Correct output: 30                  | Program output: 39                 
Correct output: 8                   | Program output: 26                 
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 13                  | Program output: 13                 
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: -67                 | Program output: -12                
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -51                
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -96                
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 17                 
Correct output: -100                | Program output: -78                
Correct output: 3                   | Program output: 3                  
Correct output: -83                 | Program output: -71                
Correct output: -90                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -27                
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: 19                 
Correct output: -87                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -75                
Correct output: -58                 | Program output: 0                  
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: 65                 
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 21                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -42                
Correct output: -87                 | Program output: -33                
Correct output: -48                 | Program output: -23                
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -64                
Correct output: -98                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -24                
Correct output: -86                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 2, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction in3})
Lexicase best program: (boolean_eq in2 exec_s (tag_exec_458 ()) (in1 integer_min print_integer boolean_eq exec_y (in4) print_integer boolean_eq exec_y (integer_pop in2 exec_flush print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) (boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (integer_dup) exec_yankdup) integer_swap integer_gte in3)
Lexicase best errors: [0 0 1 0 0 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 44
Percent parens: 0.227
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 2, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction in3})
Zero cases best program: (boolean_eq in2 exec_s (tag_exec_458 ()) (in1 integer_min print_integer boolean_eq exec_y (in4) print_integer boolean_eq exec_y (integer_pop in2 exec_flush print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) (boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (integer_dup) exec_yankdup) integer_swap integer_gte in3)
Zero cases best errors: [0 0 1 0 0 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 44
Percent parens: 0.227
--- Lexicase Population Statistics ---
Count of elite individuals by case: (230 473 53 473 234 902 358 588 699 54)
Population mean number of elite cases: 4.06
Count of perfect (error zero) individuals by case: (230 473 53 473 234 902 358 588 699 54)
Population mean number of perfect (error zero) cases: 4.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction in3})
Best program: (boolean_eq boolean_eq in2 exec_s (boolean_flush) (in1 integer_min print_integer boolean_eq exec_y (in4) print_integer boolean_eq exec_y (integer_pop in2 exec_flush print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) (boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (integer_dup) exec_yankdup) integer_swap integer_gte in3)
Errors: [0 0 1 0 0 0 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 35
Size: 44
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 5.936
Median total errors in population: 6
Error averages by case: (0.77 0.527 0.947 0.527 0.766 0.098 0.642 0.412 0.301 0.946)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.486
Average program size in population (points): 63.539
Average percent parens in population: 0.258
Minimum age in population: 29.90840148925781
Maximum age in population: 33.97383499145508
Average age in population: 32.12615310668945
Median age in population: 32.22312355041504
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 75
Genome diversity (% unique genomes):	 0.656
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 75
Syntactic diversity (% unique Push programs):	 0.655
Total error diversity:				 0.007
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 8385717
--- Timings ---
Current time: 1559314776427 milliseconds
Total Time:          62.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.7 seconds, 70.1%
Fitness Testing:     11.2 seconds, 17.9%
Report:               7.4 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 328
Test mean error for best: 0.32800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -58                
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -2                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 50                 
Correct output: 24                  | Program output: 84                 
Correct output: 55                  | Program output: 55                 
Correct output: 2                   | Program output: 37                 
Correct output: 9                   | Program output: 55                 
Correct output: 22                  | Program output: 54                 
Correct output: 5                   | Program output: 45                 
Correct output: 27                  | Program output: 27                 
Correct output: 55                  | Program output: 60                 
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 65                 
Correct output: 30                  | Program output: 39                 
Correct output: 8                   | Program output: 26                 
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 13                  | Program output: 13                 
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: -67                 | Program output: -12                
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -51                
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -96                
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 17                 
Correct output: -100                | Program output: -78                
Correct output: 3                   | Program output: 3                  
Correct output: -83                 | Program output: -71                
Correct output: -90                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -27                
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: 19                 
Correct output: -87                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -75                
Correct output: -58                 | Program output: 0                  
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: 65                 
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 21                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -42                
Correct output: -87                 | Program output: -33                
Correct output: -48                 | Program output: -23                
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -64                
Correct output: -98                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -24                
Correct output: -86                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 2, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction in3})
Lexicase best program: (boolean_eq in2 exec_s (tag_exec_458 ()) (in1 integer_min print_integer boolean_eq exec_y (in4) print_integer boolean_eq exec_y (integer_pop in2 exec_flush print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) (boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (integer_dup) exec_yankdup) integer_swap integer_gte in3)
Lexicase best errors: [0 1 1 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 44
Percent parens: 0.227
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 2, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction in3})
Zero cases best program: (boolean_eq in2 exec_s (tag_exec_458 ()) (in1 integer_min print_integer boolean_eq exec_y (in4) print_integer boolean_eq exec_y (integer_pop in2 exec_flush print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) (boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (integer_dup) exec_yankdup) integer_swap integer_gte in3)
Zero cases best errors: [0 1 1 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 44
Percent parens: 0.227
--- Lexicase Population Statistics ---
Count of elite individuals by case: (367 272 290 426 426 707 290 425 272 426)
Population mean number of elite cases: 3.90
Count of perfect (error zero) individuals by case: (367 272 290 426 426 707 290 425 272 426)
Population mean number of perfect (error zero) cases: 3.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 2, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction in3})
Best program: (boolean_eq in2 exec_s (tag_exec_458 ()) (in1 integer_min print_integer boolean_eq exec_y (in4) print_integer boolean_eq exec_y (integer_pop in2 exec_flush print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) (boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (integer_dup) exec_yankdup) integer_swap integer_gte in3)
Errors: [0 1 1 0 0 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 34
Size: 44
Percent parens: 0.227
--- Population Statistics ---
Average total errors in population: 6.099
Median total errors in population: 5
Error averages by case: (0.633 0.728 0.71 0.574 0.574 0.293 0.71 0.575 0.728 0.574)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.203
Average program size in population (points): 66.393
Average percent parens in population: 0.275
Minimum age in population: 31.16378784179688
Maximum age in population: 35.20303726196289
Average age in population: 33.55284963989258
Median age in population: 33.59070205688477
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 138
Genome diversity (% unique genomes):	 0.573
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 139
Syntactic diversity (% unique Push programs):	 0.572
Total error diversity:				 0.007
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 9179385
--- Timings ---
Current time: 1559314780002 milliseconds
Total Time:          65.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.7 seconds, 69.3%
Fitness Testing:     12.1 seconds, 18.3%
Report:               8.1 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 447
Test mean error for best: 0.44700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -4                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: 89                 
Correct output: -52                 | Program output: -2                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 91                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 2                  
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 44                 
Correct output: 24                  | Program output: 52                 
Correct output: 55                  | Program output: 83                 
Correct output: 2                   | Program output: 2                  
Correct output: 9                   | Program output: 46                 
Correct output: 22                  | Program output: 54                 
Correct output: 5                   | Program output: 45                 
Correct output: 27                  | Program output: 27                 
Correct output: 55                  | Program output: 60                 
Correct output: 5                   | Program output: 49                 
Correct output: 44                  | Program output: 66                 
Correct output: 30                  | Program output: 56                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 37                 
Correct output: 1                   | Program output: 64                 
Correct output: 13                  | Program output: 46                 
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -95                
Correct output: -79                 | Program output: 41                 
Correct output: 16                  | Program output: 16                 
Correct output: -67                 | Program output: -27                
Correct output: -84                 | Program output: -65                
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: -8                 
Correct output: -95                 | Program output: -80                
Correct output: -91                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: -3                  | Program output: 10                 
Correct output: -96                 | Program output: 31                 
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: 12                 
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -100                | Program output: -100               
Correct output: 3                   | Program output: 4                  
Correct output: -83                 | Program output: -71                
Correct output: -90                 | Program output: -88                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -27                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -70                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: 3                  
Correct output: -46                 | Program output: -30                
Correct output: -98                 | Program output: -96                
Correct output: -84                 | Program output: -72                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -63                
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: -51                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: 81                 
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -64                
Correct output: -58                 | Program output: -57                
Correct output: -46                 | Program output: 18                 
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 31                 
Correct output: -83                 | Program output: 7                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -99                
Correct output: -87                 | Program output: -29                
Correct output: -48                 | Program output: -23                
Correct output: -46                 | Program output: -8                 
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -83                 | Program output: -64                
Correct output: -95                 | Program output: 62                 
Correct output: -81                 | Program output: -23                
Correct output: -86                 | Program output: -86                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_458} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_newline} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap})
Lexicase best program: (boolean_eq exec_swap (exec_s (exec_if () (boolean_eq integer_dup exec_s (boolean_eq exec_if (integer_eq exec_s (tag_exec_458 () boolean_eq integer_dup exec_s (tag_exec_458 () in1 in4) (print_integer boolean_eq exec_y (integer_pop in2 exec_flush exec_while (boolean_empty print_newline exec_empty exec_yank) integer_dec boolean_stackdepth integer_div print_exec (boolean_stackdepth integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) boolean_eq exec_while () boolean_or) (boolean_shove exec_if (boolean_or) (boolean_shove exec_if (exec_if (boolean_or) (boolean_shove exec_if (integer_min exec_empty boolean_flush integer_swap) ())) ()))) () ()) ()) () ())) () ()) ())
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 89
Percent parens: 0.371
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_458} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_newline} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap})
Zero cases best program: (boolean_eq exec_swap (exec_s (exec_if () (boolean_eq integer_dup exec_s (boolean_eq exec_if (integer_eq exec_s (tag_exec_458 () boolean_eq integer_dup exec_s (tag_exec_458 () in1 in4) (print_integer boolean_eq exec_y (integer_pop in2 exec_flush exec_while (boolean_empty print_newline exec_empty exec_yank) integer_dec boolean_stackdepth integer_div print_exec (boolean_stackdepth integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) boolean_eq exec_while () boolean_or) (boolean_shove exec_if (boolean_or) (boolean_shove exec_if (exec_if (boolean_or) (boolean_shove exec_if (integer_min exec_empty boolean_flush integer_swap) ())) ()))) () ()) ()) () ())) () ()) ())
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 89
Percent parens: 0.371
--- Lexicase Population Statistics ---
Count of elite individuals by case: (247 899 76 851 810 893 695 664 467 459)
Population mean number of elite cases: 6.06
Count of perfect (error zero) individuals by case: (247 899 76 851 810 893 695 664 467 459)
Population mean number of perfect (error zero) cases: 6.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_if} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_458} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_s} {:close 1, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_newline} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_div} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 1, :instruction in3} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_times} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_swap})
Best program: (boolean_eq exec_swap (exec_s (exec_if () (boolean_eq integer_dup exec_s (boolean_eq exec_if (integer_eq exec_s (tag_exec_458 () boolean_eq integer_dup exec_s (tag_exec_458 () in1 in4) (print_integer boolean_eq exec_y (integer_pop in2 exec_flush exec_while (boolean_empty print_newline boolean_empty print_newline exec_empty exec_yank) integer_dec boolean_stackdepth integer_div print_exec (boolean_stackdepth integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) boolean_eq exec_while () boolean_or) (boolean_shove exec_if (boolean_or) (boolean_shove exec_if (exec_if (boolean_or) (boolean_shove exec_if (integer_min exec_empty boolean_flush integer_swap) (integer_yank integer_sub exec_noop boolean_eq exec_while () in3) exec_yankdup) integer_swap) (exec_if (boolean_dup_times) (integer_dup) exec_yankdup integer_swap)))) () ()) ()) () ())) () ()) ())
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 71
Size: 107
Percent parens: 0.336
--- Population Statistics ---
Average total errors in population: 3.939
Median total errors in population: 3
Error averages by case: (0.753 0.101 0.924 0.149 0.19 0.107 0.305 0.336 0.533 0.541)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.687
Average program size in population (points): 75.173
Average percent parens in population: 0.273
Minimum age in population: 33.1976261138916
Maximum age in population: 36.50239753723145
Average age in population: 34.53254878997803
Median age in population: 34.58612632751465
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 154
Genome diversity (% unique genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 160
Syntactic diversity (% unique Push programs):	 0.603
Total error diversity:				 0.01
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.072
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 10031329
--- Timings ---
Current time: 1559314783336 milliseconds
Total Time:          69.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.6 seconds, 68.5%
Fitness Testing:     13.0 seconds, 18.7%
Report:               8.8 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 418
Test mean error for best: 0.41800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -4                 
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -52                
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 26                 
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 50                 
Correct output: 24                  | Program output: 84                 
Correct output: 55                  | Program output: 55                 
Correct output: 2                   | Program output: 37                 
Correct output: 9                   | Program output: 55                 
Correct output: 22                  | Program output: 54                 
Correct output: 5                   | Program output: 45                 
Correct output: 27                  | Program output: 27                 
Correct output: 55                  | Program output: 60                 
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 65                 
Correct output: 30                  | Program output: 39                 
Correct output: 8                   | Program output: 26                 
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 13                  | Program output: 13                 
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -37                
Correct output: -79                 | Program output: 41                 
Correct output: 16                  | Program output: 16                 
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -2                 
Correct output: -91                 | Program output: -86                
Correct output: -51                 | Program output: -51                
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -96                
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: 27                 
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 17                 
Correct output: -100                | Program output: -8                 
Correct output: 3                   | Program output: 3                  
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -90                
Correct output: -55                 | Program output: -28                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -37                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: 3                  
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: -72                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: 89                 
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: 19                 
Correct output: -87                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -64                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 18                 
Correct output: -93                 | Program output: 65                 
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 21                 
Correct output: -83                 | Program output: -32                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -42                
Correct output: -87                 | Program output: -87                
Correct output: -48                 | Program output: -48                
Correct output: -46                 | Program output: -8                 
Correct output: -80                 | Program output: -19                
Correct output: -98                 | Program output: 13                 
Correct output: -83                 | Program output: -64                
Correct output: -95                 | Program output: 62                 
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 2, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 1, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction in3})
Lexicase best program: (boolean_eq in2 exec_s (tag_exec_458 ()) (in1 integer_min print_integer boolean_eq exec_y (in4) print_integer boolean_eq exec_y (integer_pop in2 exec_flush print_newline) integer_empty boolean_flush in1) (integer_gt integer_sub exec_noop) boolean_eq exec_while () boolean_or boolean_shove exec_if (in2 integer_dup) (exec_yankdup) integer_swap integer_gte in3)
Lexicase best errors: [0 0 0 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 44
Percent parens: 0.227
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 2, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 1, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction in3})
Zero cases best program: (boolean_eq in2 exec_s (tag_exec_458 ()) (in1 integer_min print_integer boolean_eq exec_y (in4) print_integer boolean_eq exec_y (integer_pop in2 exec_flush print_newline) integer_empty boolean_flush in1) (integer_gt integer_sub exec_noop) boolean_eq exec_while () boolean_or boolean_shove exec_if (in2 integer_dup) (exec_yankdup) integer_swap integer_gte in3)
Zero cases best errors: [0 0 0 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 44
Percent parens: 0.227
--- Lexicase Population Statistics ---
Count of elite individuals by case: (739 739 737 891 48 122 288 659 855 48)
Population mean number of elite cases: 5.13
Count of perfect (error zero) individuals by case: (739 739 737 891 48 122 288 659 855 48)
Population mean number of perfect (error zero) cases: 5.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 2, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction in3})
Best program: (boolean_eq in2 exec_s (tag_exec_458 ()) (in1 integer_min print_integer boolean_eq exec_y (in4) print_integer boolean_eq exec_y (integer_pop in2 exec_flush print_newline integer_empty boolean_flush in1 integer_gt integer_sub exec_noop) boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (integer_dup exec_yankdup) integer_swap) (integer_gte in3))
Errors: [0 0 0 0 1 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 34
Size: 44
Percent parens: 0.227
--- Population Statistics ---
Average total errors in population: 4.874
Median total errors in population: 4
Error averages by case: (0.261 0.261 0.263 0.109 0.952 0.878 0.712 0.341 0.145 0.952)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.732
Average program size in population (points): 80.25
Average percent parens in population: 0.319
Minimum age in population: 34.3194465637207
Maximum age in population: 37.88769865036011
Average age in population: 36.1378073797226
Median age in population: 36.23152446746826
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 85
Genome diversity (% unique genomes):	 0.611
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 88
Syntactic diversity (% unique Push programs):	 0.608
Total error diversity:				 0.009
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 10605602
--- Timings ---
Current time: 1559314786679 milliseconds
Total Time:          72.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.5 seconds, 68.3%
Fitness Testing:     13.7 seconds, 18.9%
Report:               9.2 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 395
Test mean error for best: 0.39500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -58                
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -52                
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 22                 
Correct output: 44                  | Program output: 50                 
Correct output: 24                  | Program output: 24                 
Correct output: 55                  | Program output: 55                 
Correct output: 2                   | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 22                  | Program output: 22                 
Correct output: 5                   | Program output: 5                  
Correct output: 27                  | Program output: 51                 
Correct output: 55                  | Program output: 55                 
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 44                 
Correct output: 30                  | Program output: 30                 
Correct output: 8                   | Program output: 43                 
Correct output: 41                  | Program output: 88                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 1                  
Correct output: 13                  | Program output: 13                 
Correct output: 26                  | Program output: 72                 
Correct output: -95                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 32                 
Correct output: -67                 | Program output: -67                
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: -16                
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -7                 
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -96                
Correct output: -9                  | Program output: 10                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: 9                  
Correct output: -82                 | Program output: 53                 
Correct output: -100                | Program output: -78                
Correct output: 3                   | Program output: 3                  
Correct output: -83                 | Program output: -83                
Correct output: -90                 | Program output: -90                
Correct output: -90                 | Program output: -28                
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -18                
Correct output: -98                 | Program output: -93                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: 11                 
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -98                
Correct output: -84                 | Program output: -84                
Correct output: 13                  | Program output: 20                 
Correct output: -91                 | Program output: -79                
Correct output: -98                 | Program output: -21                
Correct output: -63                 | Program output: -27                
Correct output: -30                 | Program output: 12                 
Correct output: -51                 | Program output: 19                 
Correct output: -87                 | Program output: -17                
Correct output: -81                 | Program output: -13                
Correct output: -46                 | Program output: -46                
Correct output: -32                 | Program output: -4                 
Correct output: -84                 | Program output: -60                
Correct output: -75                 | Program output: -75                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: 65                 
Correct output: -62                 | Program output: -8                 
Correct output: 21                  | Program output: 21                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: 69                 
Correct output: -99                 | Program output: 1                  
Correct output: -99                 | Program output: -28                
Correct output: -87                 | Program output: -87                
Correct output: -48                 | Program output: -48                
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -64                
Correct output: -98                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 2, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction in3})
Lexicase best program: (boolean_eq in2 exec_s (tag_exec_458 ()) (in1 integer_min print_integer boolean_eq exec_y (in4) print_integer boolean_eq exec_y (integer_pop in2 exec_flush print_newline integer_empty boolean_flush in1 integer_gt integer_sub exec_noop boolean_eq exec_while () integer_fromboolean exec_flush exec_if (in2) (integer_dup exec_yankdup) integer_swap) integer_gte in3) ())
Lexicase best errors: [0 0 0 1 0 1 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 44
Percent parens: 0.227
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 2, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction in3})
Zero cases best program: (boolean_eq in2 exec_s (tag_exec_458 ()) (in1 integer_min print_integer boolean_eq exec_y (in4) print_integer boolean_eq exec_y (integer_pop in2 exec_flush print_newline integer_empty boolean_flush in1 integer_gt integer_sub exec_noop boolean_eq exec_while () integer_fromboolean exec_flush exec_if (in2) (integer_dup exec_yankdup) integer_swap) integer_gte in3) ())
Zero cases best errors: [0 0 0 1 0 1 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 44
Percent parens: 0.227
--- Lexicase Population Statistics ---
Count of elite individuals by case: (654 918 787 301 504 1 680 473 781 1)
Population mean number of elite cases: 5.10
Count of perfect (error zero) individuals by case: (654 918 787 301 504 1 680 473 781 1)
Population mean number of perfect (error zero) cases: 5.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 2, :instruction tag_exec_458} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction in3})
Best program: (boolean_eq in2 exec_s (tag_exec_458 ()) (exec_k_when_autoconstructing (integer_min print_integer boolean_eq exec_y (in4) print_integer boolean_eq exec_y (integer_pop in2 exec_flush print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) (boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (integer_dup) exec_yankdup) integer_swap) (integer_gte in3))
Errors: [0 0 1 0 0 1 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 34
Size: 46
Percent parens: 0.261
--- Population Statistics ---
Average total errors in population: 4.9
Median total errors in population: 4
Error averages by case: (0.346 0.082 0.213 0.699 0.496 0.999 0.32 0.527 0.219 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.522
Average program size in population (points): 54.469
Average percent parens in population: 0.237
Minimum age in population: 35.3194465637207
Maximum age in population: 39.44166278839111
Average age in population: 37.89329090046883
Median age in population: 38.029261469841
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 97
Genome diversity (% unique genomes):	 0.543
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 99
Syntactic diversity (% unique Push programs):	 0.538
Total error diversity:				 0.006
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 11571319
--- Timings ---
Current time: 1559314790385 milliseconds
Total Time:          76.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.5 seconds, 67.5%
Fitness Testing:     14.8 seconds, 19.4%
Report:               9.9 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 330
Test mean error for best: 0.33000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 1
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 1
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 1
Test Case   59 | Error: 1
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 1
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 1
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 1
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 1
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 1
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 1
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 1
Test Case  368 | Error: 1
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 1
Test Case  485 | Error: 1
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 1
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 1
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 1
Test Case  726 | Error: 1
Test Case  727 | Error: 1
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 1
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 1
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 1
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 1
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 1
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -58                
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -2                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 50                 
Correct output: 24                  | Program output: 84                 
Correct output: 55                  | Program output: 55                 
Correct output: 2                   | Program output: 37                 
Correct output: 9                   | Program output: 9                  
Correct output: 22                  | Program output: 54                 
Correct output: 5                   | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: 55                  | Program output: 60                 
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 65                 
Correct output: 30                  | Program output: 39                 
Correct output: 8                   | Program output: 26                 
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 13                  | Program output: 13                 
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: -67                 | Program output: -12                
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -51                
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -96                
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 17                 
Correct output: -100                | Program output: -78                
Correct output: 3                   | Program output: 3                  
Correct output: -83                 | Program output: -71                
Correct output: -90                 | Program output: -81                
Correct output: -90                 | Program output:                    
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -27                
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: 19                 
Correct output: -87                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -75                
Correct output: -58                 | Program output: 0                  
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: 65                 
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 21                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -42                
Correct output: -87                 | Program output: -33                
Correct output: -48                 | Program output: -23                
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -64                
Correct output: -98                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -24                
Correct output: -86                 | Program output: -68                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 2, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction in3})
Lexicase best program: (boolean_eq in2 exec_s (tag_exec_458 ()) (in1 integer_min print_integer boolean_eq exec_y (in4) print_integer boolean_eq exec_y (integer_pop in2 exec_flush print_newline integer_empty boolean_flush in1 integer_gt integer_sub exec_noop) integer_sub exec_noop) (boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (integer_dup) exec_yankdup) exec_y (integer_pop in2 exec_flush print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop boolean_eq exec_while () exec_empty boolean_shove exec_if (in2) (exec_eq) exec_yankdup integer_swap integer_gte in3)
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 69
Percent parens: 0.203
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 2, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction in3})
Zero cases best program: (boolean_eq in2 exec_s (tag_exec_458 ()) (in1 integer_min print_integer boolean_eq exec_y (in4) print_integer boolean_eq exec_y (integer_pop in2 exec_flush print_newline integer_empty boolean_flush in1 integer_gt integer_sub exec_noop) integer_sub exec_noop) (boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (integer_dup) exec_yankdup) exec_y (integer_pop in2 exec_flush print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop boolean_eq exec_while () exec_empty boolean_shove exec_if (in2) (exec_eq) exec_yankdup integer_swap integer_gte in3)
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 69
Percent parens: 0.203
--- Lexicase Population Statistics ---
Count of elite individuals by case: (464 470 907 859 464 385 587 587 586 586)
Population mean number of elite cases: 5.89
Count of perfect (error zero) individuals by case: (464 470 907 859 464 385 587 587 586 586)
Population mean number of perfect (error zero) cases: 5.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_eq} {:close 0, :instruction in2} {:close 0, :instruction exec_s} {:close 2, :instruction tag_exec_458} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_flush} {:close 0, :instruction print_newline} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_noop} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 1, :instruction in2} {:close 1, :instruction exec_eq} {:close 1, :instruction exec_yankdup} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction in3})
Best program: (boolean_eq in2 exec_s (tag_exec_458 ()) (in1 integer_min print_integer boolean_eq exec_y (in4) print_integer boolean_eq exec_y (integer_pop in2 exec_flush print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) (boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (integer_dup) exec_yankdup) exec_y (integer_pop in2 exec_flush print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (exec_eq) exec_yankdup integer_swap integer_gte in3)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 53
Size: 67
Percent parens: 0.209
--- Population Statistics ---
Average total errors in population: 4.105
Median total errors in population: 3
Error averages by case: (0.536 0.53 0.093 0.141 0.536 0.615 0.413 0.413 0.414 0.414)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.607
Average program size in population (points): 55.09
Average percent parens in population: 0.229
Minimum age in population: 36.35682678222656
Maximum age in population: 41.19852721691132
Average age in population: 39.45395645987988
Median age in population: 39.48069626092911
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 116
Genome diversity (% unique genomes):	 0.616
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 117
Syntactic diversity (% unique Push programs):	 0.61
Total error diversity:				 0.01
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 12367670
--- Timings ---
Current time: 1559314793974 milliseconds
Total Time:          79.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.5 seconds, 66.9%
Fitness Testing:     15.7 seconds, 19.7%
Report:              10.6 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 25
Successful program: (boolean_eq in2 exec_s (tag_exec_458 ()) (in1 integer_min print_integer boolean_eq exec_y (in4) print_integer boolean_eq exec_y (integer_pop in2 exec_flush print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) (boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (integer_dup) exec_yankdup) exec_y (integer_pop in2 exec_flush print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (exec_eq) exec_yankdup integer_swap integer_gte in3)
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 67


Auto-simplifying with starting size: 67
step: 0
program: (boolean_eq in2 exec_s (tag_exec_458 ()) (in1 integer_min print_integer boolean_eq exec_y (in4) print_integer boolean_eq exec_y (integer_pop in2 exec_flush print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) (boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (integer_dup) exec_yankdup) exec_y (integer_pop in2 exec_flush print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (exec_eq) exec_yankdup integer_swap integer_gte in3)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 500
program: (boolean_eq in2 exec_s (tag_exec_458 ()) (in1 integer_min print_integer boolean_eq exec_y (in4) print_integer boolean_eq exec_y (integer_pop in2 exec_flush print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) (boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (integer_dup) exec_yankdup) exec_y (integer_pop in2 exec_flush print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (exec_eq) exec_yankdup integer_swap integer_gte in3)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 1000
program: (boolean_eq in2 exec_s (tag_exec_458 ()) (in1 integer_min print_integer boolean_eq exec_y (in4) print_integer boolean_eq exec_y (integer_pop in2 exec_flush print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) (boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (integer_dup) exec_yankdup) exec_y (integer_pop in2 exec_flush print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (exec_eq) exec_yankdup integer_swap integer_gte in3)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 1500
program: (boolean_eq in2 exec_s (tag_exec_458 ()) (in1 integer_min print_integer boolean_eq exec_y (in4) print_integer boolean_eq exec_y (integer_pop in2 exec_flush print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) (boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (integer_dup) exec_yankdup) exec_y (integer_pop in2 exec_flush print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (exec_eq) exec_yankdup integer_swap integer_gte in3)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 2000
program: (boolean_eq in2 exec_s (tag_exec_458 ()) (in1 integer_min print_integer boolean_eq exec_y (in4) print_integer boolean_eq exec_y (integer_pop in2 exec_flush print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) (boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (integer_dup) exec_yankdup) exec_y (integer_pop in2 exec_flush print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (exec_eq) exec_yankdup integer_swap integer_gte in3)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 2500
program: (boolean_eq in2 exec_s (tag_exec_458 ()) (in1 integer_min print_integer boolean_eq exec_y (in4) print_integer boolean_eq exec_y (integer_pop in2 exec_flush print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) (boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (integer_dup) exec_yankdup) exec_y (integer_pop in2 exec_flush print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (exec_eq) exec_yankdup integer_swap integer_gte in3)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 3000
program: (boolean_eq in2 exec_s (tag_exec_458 ()) (in1 integer_min print_integer boolean_eq exec_y (in4) print_integer boolean_eq exec_y (integer_pop in2 exec_flush print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) (boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (integer_dup) exec_yankdup) exec_y (integer_pop in2 exec_flush print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (exec_eq) exec_yankdup integer_swap integer_gte in3)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 3500
program: (boolean_eq in2 exec_s (tag_exec_458 ()) (in1 integer_min print_integer boolean_eq exec_y (in4) print_integer boolean_eq exec_y (integer_pop in2 exec_flush print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) (boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (integer_dup) exec_yankdup) exec_y (integer_pop in2 exec_flush print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (exec_eq) exec_yankdup integer_swap integer_gte in3)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 4000
program: (boolean_eq in2 exec_s (tag_exec_458 ()) (in1 integer_min print_integer boolean_eq exec_y (in4) print_integer boolean_eq exec_y (integer_pop in2 exec_flush print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) (boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (integer_dup) exec_yankdup) exec_y (integer_pop in2 exec_flush print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (exec_eq) exec_yankdup integer_swap integer_gte in3)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 4500
program: (boolean_eq in2 exec_s (tag_exec_458 ()) (in1 integer_min print_integer boolean_eq exec_y (in4) print_integer boolean_eq exec_y (integer_pop in2 exec_flush print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) (boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (integer_dup) exec_yankdup) exec_y (integer_pop in2 exec_flush print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (exec_eq) exec_yankdup integer_swap integer_gte in3)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

step: 5000
program: (boolean_eq in2 exec_s (tag_exec_458 ()) (in1 integer_min print_integer boolean_eq exec_y (in4) print_integer boolean_eq exec_y (integer_pop in2 exec_flush print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop) (boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (integer_dup) exec_yankdup) exec_y (integer_pop in2 exec_flush print_newline integer_empty boolean_flush in1) integer_gt integer_sub exec_noop boolean_eq exec_while () boolean_or boolean_shove exec_if (in2) (exec_eq) exec_yankdup integer_swap integer_gte in3)
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 67

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 330
Test mean error for best: 0.33000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 1
Test Case    7 | Error: 1
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 1
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 1
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 1
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 1
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 1
Test Case   59 | Error: 1
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 1
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 1
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 1
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 1
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 1
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 1
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 1
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 1
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 1
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 1
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 1
Test Case  295 | Error: 0
Test Case  296 | Error: 1
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 1
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 1
Test Case  326 | Error: 1
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 1
Test Case  333 | Error: 1
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 1
Test Case  338 | Error: 1
Test Case  339 | Error: 0
Test Case  340 | Error: 1
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 1
Test Case  368 | Error: 1
Test Case  369 | Error: 1
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 1
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 1
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 1
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 1
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 1
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 1
Test Case  461 | Error: 1
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 1
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 1
Test Case  485 | Error: 1
Test Case  486 | Error: 1
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 1
Test Case  494 | Error: 1
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 1
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 1
Test Case  507 | Error: 1
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 1
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 1
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 1
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 1
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 1
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 1
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 1
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 1
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 1
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 1
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 1
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 1
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 1
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 1
Test Case  667 | Error: 1
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 1
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 1
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 1
Test Case  680 | Error: 1
Test Case  681 | Error: 0
Test Case  682 | Error: 1
Test Case  683 | Error: 0
Test Case  684 | Error: 1
Test Case  685 | Error: 1
Test Case  686 | Error: 1
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 1
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 1
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 1
Test Case  726 | Error: 1
Test Case  727 | Error: 1
Test Case  728 | Error: 1
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 1
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 1
Test Case  740 | Error: 0
Test Case  741 | Error: 1
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 1
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 1
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 1
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 1
Test Case  774 | Error: 1
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 1
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 1
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 1
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 1
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 1
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 1
Test Case  850 | Error: 1
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 1
Test Case  859 | Error: 1
Test Case  860 | Error: 0
Test Case  861 | Error: 1
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 1
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 1
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 1
Test Case  912 | Error: 1
Test Case  913 | Error: 1
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 1
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 1
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 1
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 1
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 1
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 1
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 1
Test Case  982 | Error: 1
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 1
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -58                 | Program output: -58                
Correct output: 0                   | Program output: 0                  
Correct output: 6                   | Program output: 6                  
Correct output: -74                 | Program output: -74                
Correct output: -80                 | Program output: -80                
Correct output: -98                 | Program output: -98                
Correct output: -52                 | Program output: -2                 
Correct output: 24                  | Program output: 24                 
Correct output: 20                  | Program output: 20                 
Correct output: -57                 | Program output: -57                
Correct output: 26                  | Program output: 26                 
Correct output: -15                 | Program output: -15                
Correct output: 54                  | Program output: 54                 
Correct output: 76                  | Program output: 76                 
Correct output: 61                  | Program output: 61                 
Correct output: 0                   | Program output: 0                  
Correct output: 16                  | Program output: 16                 
Correct output: 44                  | Program output: 50                 
Correct output: 24                  | Program output: 84                 
Correct output: 55                  | Program output: 55                 
Correct output: 2                   | Program output: 37                 
Correct output: 9                   | Program output: 9                  
Correct output: 22                  | Program output: 54                 
Correct output: 5                   | Program output: 5                  
Correct output: 27                  | Program output: 27                 
Correct output: 55                  | Program output: 60                 
Correct output: 5                   | Program output: 5                  
Correct output: 44                  | Program output: 65                 
Correct output: 30                  | Program output: 39                 
Correct output: 8                   | Program output: 26                 
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 13                  | Program output: 13                 
Correct output: 26                  | Program output: 26                 
Correct output: -95                 | Program output: -63                
Correct output: -79                 | Program output: -79                
Correct output: 16                  | Program output: 16                 
Correct output: -67                 | Program output: -12                
Correct output: -84                 | Program output: -84                
Correct output: -25                 | Program output: -25                
Correct output: -20                 | Program output: -20                
Correct output: -95                 | Program output: -95                
Correct output: -91                 | Program output: -91                
Correct output: -51                 | Program output: -51                
Correct output: -3                  | Program output: -3                 
Correct output: -96                 | Program output: -96                
Correct output: -9                  | Program output: -9                 
Correct output: -12                 | Program output: -12                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 17                 
Correct output: -100                | Program output: -78                
Correct output: 3                   | Program output: 3                  
Correct output: -83                 | Program output: -71                
Correct output: -90                 | Program output: -81                
Correct output: -90                 | Program output:                    
Correct output: -55                 | Program output: -55                
Correct output: -77                 | Program output: -77                
Correct output: -98                 | Program output: -98                
Correct output: -86                 | Program output: -86                
Correct output: -53                 | Program output: -53                
Correct output: -28                 | Program output: -28                
Correct output: -46                 | Program output: -46                
Correct output: -98                 | Program output: -80                
Correct output: -84                 | Program output: -84                
Correct output: 13                  | Program output: 13                 
Correct output: -91                 | Program output: -91                
Correct output: -98                 | Program output: -98                
Correct output: -63                 | Program output: -27                
Correct output: -30                 | Program output: -30                
Correct output: -51                 | Program output: 19                 
Correct output: -87                 | Program output: -27                
Correct output: -81                 | Program output: -81                
Correct output: -46                 | Program output: -46                
Correct output: -32                 | Program output: -32                
Correct output: -84                 | Program output: -84                
Correct output: -75                 | Program output: -75                
Correct output: -58                 | Program output: 0                  
Correct output: -46                 | Program output: -46                
Correct output: -93                 | Program output: 65                 
Correct output: -62                 | Program output: -62                
Correct output: 21                  | Program output: 21                 
Correct output: -83                 | Program output: -83                
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -99                 | Program output: -42                
Correct output: -87                 | Program output: -33                
Correct output: -48                 | Program output: -23                
Correct output: -46                 | Program output: -46                
Correct output: -80                 | Program output: -64                
Correct output: -98                 | Program output: -72                
Correct output: -83                 | Program output: -83                
Correct output: -95                 | Program output: -95                
Correct output: -81                 | Program output: -24                
Correct output: -86                 | Program output: -68                
;;******************************
