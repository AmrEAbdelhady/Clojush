Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x579dde54 clojush.problems.software.smallest$fn__7460@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@7e2a76be]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[57 57 84 57] 57] [[-97 12 12 12] -97] [[3 3 -45 3] -45] [[-34 42 -34 -34] -34] [[72 72 72 -58] -58] [[76 76 76 -60] -60] [[-63 -63 -63 17] -63] [[-93 23 23 23] -93] [[6 -57 6 6] -57] [[63 76 63 63] 63] [(-44 -44 -44 -44) -44] [(-30 -30 -30 -30) -30] [(-5 -5 -5 -5) -5] [(-28 -28 -28 -28) -28] [(43 43 43 43) 43] [(92 56 49 70) 49] [(5 91 91 44) 5] [(38 1 55 14) 1] [(32 79 17 63) 17] [(27 48 34 50) 27] [(46 11 68 18) 11] [(94 16 54 46) 16] [(11 58 68 43) 11] [(60 59 25 73) 25] [(27 27 80 13) 13] [(92 75 34 35) 34] [(83 8 89 48) 8] [(50 6 51 49) 6] [(56 12 34 50) 12] [(42 48 93 1) 1] [(97 87 18 19) 18] [(42 79 26 37) 26] [(56 40 48 45) 40] [(36 28 78 53) 28] [(58 88 42 58) 42] [(100 82 99 -41) -41] [(-12 52 -83 59) -83] [(-30 -71 75 40) -71] [(-88 76 -44 87) -88] [(45 -7 -45 1) -45] [(26 82 -21 -7) -21] [(-72 75 81 -95) -95] [(42 -78 19 -73) -78] [(98 -45 82 95) -45] [(38 -30 3 72) -30] [(-91 0 49 -57) -91] [(-65 -39 26 93) -65] [(79 -58 67 -99) -99] [(1 54 -44 -37) -44] [(1 -79 -92 -98) -98] [(-2 90 -40 85) -40] [(67 76 9 -100) -100] [(34 -83 61 -94) -94] [(33 -17 -79 -39) -79] [(81 -43 41 90) -43] [(-76 58 12 -70) -76] [(-3 -41 62 64) -41] [(-47 28 8 -77) -77] [(46 33 -96 -30) -96] [(20 60 10 91) 10] [(-36 -9 48 92) -36] [(96 92 -85 45) -85] [(-83 -2 84 11) -83] [(-22 60 70 71) -22] [(49 50 -74 14) -74] [(72 70 89 -100) -100] [(56 -78 4 34) -78] [(54 -29 14 -25) -29] [(-98 -70 88 7) -98] [(-99 93 -8 45) -99] [(-59 -26 -72 -80) -80] [(-63 64 -34 -6) -63] [(3 -62 48 -69) -69] [(93 92 -69 -54) -69] [(79 24 89 49) 24] [(14 59 78 -28) -28] [(-15 56 63 59) -15] [(40 -36 -43 -37) -43] [(-20 31 -70 -2) -70] [(-29 -31 94 84) -31] [(-14 -25 33 -26) -26] [(-1 -57 50 -18) -57] [(-19 56 -93 -97) -97] [(-78 49 -73 -95) -95] [(-45 43 -77 32) -77] [(-30 15 -32 -48) -48] [(-3 38 -50 47) -50] [(39 -73 51 -86) -86] [(12 -30 42 -46) -46] [(-77 49 67 -86) -86] [(-39 -15 13 80) -39] [(-58 42 43 -30) -58] [(-28 41 -84 34) -84] [(-26 68 -46 -66) -66] [(-65 17 89 99) -65])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[57 57 84 57] 57]
Train Case:   6 | Input/Output: [[-97 12 12 12] -97]
Train Case:   7 | Input/Output: [[3 3 -45 3] -45]
Train Case:   8 | Input/Output: [[-34 42 -34 -34] -34]
Train Case:   9 | Input/Output: [[72 72 72 -58] -58]
Train Case:  10 | Input/Output: [[76 76 76 -60] -60]
Train Case:  11 | Input/Output: [[-63 -63 -63 17] -63]
Train Case:  12 | Input/Output: [[-93 23 23 23] -93]
Train Case:  13 | Input/Output: [[6 -57 6 6] -57]
Train Case:  14 | Input/Output: [[63 76 63 63] 63]
Train Case:  15 | Input/Output: [(-44 -44 -44 -44) -44]
Train Case:  16 | Input/Output: [(-30 -30 -30 -30) -30]
Train Case:  17 | Input/Output: [(-5 -5 -5 -5) -5]
Train Case:  18 | Input/Output: [(-28 -28 -28 -28) -28]
Train Case:  19 | Input/Output: [(43 43 43 43) 43]
Train Case:  20 | Input/Output: [(92 56 49 70) 49]
Train Case:  21 | Input/Output: [(5 91 91 44) 5]
Train Case:  22 | Input/Output: [(38 1 55 14) 1]
Train Case:  23 | Input/Output: [(32 79 17 63) 17]
Train Case:  24 | Input/Output: [(27 48 34 50) 27]
Train Case:  25 | Input/Output: [(46 11 68 18) 11]
Train Case:  26 | Input/Output: [(94 16 54 46) 16]
Train Case:  27 | Input/Output: [(11 58 68 43) 11]
Train Case:  28 | Input/Output: [(60 59 25 73) 25]
Train Case:  29 | Input/Output: [(27 27 80 13) 13]
Train Case:  30 | Input/Output: [(92 75 34 35) 34]
Train Case:  31 | Input/Output: [(83 8 89 48) 8]
Train Case:  32 | Input/Output: [(50 6 51 49) 6]
Train Case:  33 | Input/Output: [(56 12 34 50) 12]
Train Case:  34 | Input/Output: [(42 48 93 1) 1]
Train Case:  35 | Input/Output: [(97 87 18 19) 18]
Train Case:  36 | Input/Output: [(42 79 26 37) 26]
Train Case:  37 | Input/Output: [(56 40 48 45) 40]
Train Case:  38 | Input/Output: [(36 28 78 53) 28]
Train Case:  39 | Input/Output: [(58 88 42 58) 42]
Train Case:  40 | Input/Output: [(100 82 99 -41) -41]
Train Case:  41 | Input/Output: [(-12 52 -83 59) -83]
Train Case:  42 | Input/Output: [(-30 -71 75 40) -71]
Train Case:  43 | Input/Output: [(-88 76 -44 87) -88]
Train Case:  44 | Input/Output: [(45 -7 -45 1) -45]
Train Case:  45 | Input/Output: [(26 82 -21 -7) -21]
Train Case:  46 | Input/Output: [(-72 75 81 -95) -95]
Train Case:  47 | Input/Output: [(42 -78 19 -73) -78]
Train Case:  48 | Input/Output: [(98 -45 82 95) -45]
Train Case:  49 | Input/Output: [(38 -30 3 72) -30]
Train Case:  50 | Input/Output: [(-91 0 49 -57) -91]
Train Case:  51 | Input/Output: [(-65 -39 26 93) -65]
Train Case:  52 | Input/Output: [(79 -58 67 -99) -99]
Train Case:  53 | Input/Output: [(1 54 -44 -37) -44]
Train Case:  54 | Input/Output: [(1 -79 -92 -98) -98]
Train Case:  55 | Input/Output: [(-2 90 -40 85) -40]
Train Case:  56 | Input/Output: [(67 76 9 -100) -100]
Train Case:  57 | Input/Output: [(34 -83 61 -94) -94]
Train Case:  58 | Input/Output: [(33 -17 -79 -39) -79]
Train Case:  59 | Input/Output: [(81 -43 41 90) -43]
Train Case:  60 | Input/Output: [(-76 58 12 -70) -76]
Train Case:  61 | Input/Output: [(-3 -41 62 64) -41]
Train Case:  62 | Input/Output: [(-47 28 8 -77) -77]
Train Case:  63 | Input/Output: [(46 33 -96 -30) -96]
Train Case:  64 | Input/Output: [(20 60 10 91) 10]
Train Case:  65 | Input/Output: [(-36 -9 48 92) -36]
Train Case:  66 | Input/Output: [(96 92 -85 45) -85]
Train Case:  67 | Input/Output: [(-83 -2 84 11) -83]
Train Case:  68 | Input/Output: [(-22 60 70 71) -22]
Train Case:  69 | Input/Output: [(49 50 -74 14) -74]
Train Case:  70 | Input/Output: [(72 70 89 -100) -100]
Train Case:  71 | Input/Output: [(56 -78 4 34) -78]
Train Case:  72 | Input/Output: [(54 -29 14 -25) -29]
Train Case:  73 | Input/Output: [(-98 -70 88 7) -98]
Train Case:  74 | Input/Output: [(-99 93 -8 45) -99]
Train Case:  75 | Input/Output: [(-59 -26 -72 -80) -80]
Train Case:  76 | Input/Output: [(-63 64 -34 -6) -63]
Train Case:  77 | Input/Output: [(3 -62 48 -69) -69]
Train Case:  78 | Input/Output: [(93 92 -69 -54) -69]
Train Case:  79 | Input/Output: [(79 24 89 49) 24]
Train Case:  80 | Input/Output: [(14 59 78 -28) -28]
Train Case:  81 | Input/Output: [(-15 56 63 59) -15]
Train Case:  82 | Input/Output: [(40 -36 -43 -37) -43]
Train Case:  83 | Input/Output: [(-20 31 -70 -2) -70]
Train Case:  84 | Input/Output: [(-29 -31 94 84) -31]
Train Case:  85 | Input/Output: [(-14 -25 33 -26) -26]
Train Case:  86 | Input/Output: [(-1 -57 50 -18) -57]
Train Case:  87 | Input/Output: [(-19 56 -93 -97) -97]
Train Case:  88 | Input/Output: [(-78 49 -73 -95) -95]
Train Case:  89 | Input/Output: [(-45 43 -77 32) -77]
Train Case:  90 | Input/Output: [(-30 15 -32 -48) -48]
Train Case:  91 | Input/Output: [(-3 38 -50 47) -50]
Train Case:  92 | Input/Output: [(39 -73 51 -86) -86]
Train Case:  93 | Input/Output: [(12 -30 42 -46) -46]
Train Case:  94 | Input/Output: [(-77 49 67 -86) -86]
Train Case:  95 | Input/Output: [(-39 -15 13 80) -39]
Train Case:  96 | Input/Output: [(-58 42 43 -30) -58]
Train Case:  97 | Input/Output: [(-28 41 -84 34) -84]
Train Case:  98 | Input/Output: [(-26 68 -46 -66) -66]
Train Case:  99 | Input/Output: [(-65 17 89 99) -65]
Test Case:   0 | Input/Output: [[-25 67 -25 -25] -25]
Test Case:   1 | Input/Output: [[27 27 -59 27] -59]
Test Case:   2 | Input/Output: [[-94 -94 -94 -53] -94]
Test Case:   3 | Input/Output: [[50 1 50 50] 1]
Test Case:   4 | Input/Output: [[73 73 73 48] 48]
Test Case:   5 | Input/Output: [[-88 3 3 3] -88]
Test Case:   6 | Input/Output: [[4 -57 -57 -57] -57]
Test Case:   7 | Input/Output: [[35 -8 35 35] -8]
Test Case:   8 | Input/Output: [[-85 33 33 33] -85]
Test Case:   9 | Input/Output: [[56 -28 56 56] -28]
Test Case:  10 | Input/Output: [[0 0 0 -8] -8]
Test Case:  11 | Input/Output: [[25 25 25 76] 25]
Test Case:  12 | Input/Output: [[62 -87 -87 -87] -87]
Test Case:  13 | Input/Output: [[31 31 -90 31] -90]
Test Case:  14 | Input/Output: [[-97 -97 -97 -64] -97]
Test Case:  15 | Input/Output: [[-70 -70 73 -70] -70]
Test Case:  16 | Input/Output: [[-41 1 1 1] -41]
Test Case:  17 | Input/Output: [[-60 29 -60 -60] -60]
Test Case:  18 | Input/Output: [[45 1 1 1] 1]
Test Case:  19 | Input/Output: [[82 -55 82 82] -55]
Test Case:  20 | Input/Output: [[-99 -99 68 -99] -99]
Test Case:  21 | Input/Output: [[33 33 -26 33] -26]
Test Case:  22 | Input/Output: [[85 -8 -8 -8] -8]
Test Case:  23 | Input/Output: [[23 23 23 17] 17]
Test Case:  24 | Input/Output: [[-95 -81 -81 -81] -95]
Test Case:  25 | Input/Output: [[40 96 96 96] 40]
Test Case:  26 | Input/Output: [[24 24 -57 24] -57]
Test Case:  27 | Input/Output: [[39 39 89 39] 39]
Test Case:  28 | Input/Output: [[94 78 94 94] 78]
Test Case:  29 | Input/Output: [[-14 -14 -70 -14] -70]
Test Case:  30 | Input/Output: [[35 35 35 2] 2]
Test Case:  31 | Input/Output: [[88 88 16 88] 16]
Test Case:  32 | Input/Output: [[70 70 70 2] 2]
Test Case:  33 | Input/Output: [[86 -10 86 86] -10]
Test Case:  34 | Input/Output: [[-23 5 -23 -23] -23]
Test Case:  35 | Input/Output: [[44 44 44 -91] -91]
Test Case:  36 | Input/Output: [[-89 -89 -89 -77] -89]
Test Case:  37 | Input/Output: [[19 19 19 92] 19]
Test Case:  38 | Input/Output: [[36 36 34 36] 34]
Test Case:  39 | Input/Output: [[44 44 44 85] 44]
Test Case:  40 | Input/Output: [[-44 25 -44 -44] -44]
Test Case:  41 | Input/Output: [[-52 -52 18 -52] -52]
Test Case:  42 | Input/Output: [[-93 -93 -93 -94] -94]
Test Case:  43 | Input/Output: [[99 99 52 99] 52]
Test Case:  44 | Input/Output: [[-18 -71 -18 -18] -71]
Test Case:  45 | Input/Output: [[-62 -62 -64 -62] -64]
Test Case:  46 | Input/Output: [[-30 -85 -30 -30] -85]
Test Case:  47 | Input/Output: [[92 87 87 87] 87]
Test Case:  48 | Input/Output: [[-60 -3 -60 -60] -60]
Test Case:  49 | Input/Output: [[-45 50 -45 -45] -45]
Test Case:  50 | Input/Output: [[-40 -40 -4 -40] -40]
Test Case:  51 | Input/Output: [[-79 -79 -78 -79] -79]
Test Case:  52 | Input/Output: [[63 14 63 63] 14]
Test Case:  53 | Input/Output: [[11 22 22 22] 11]
Test Case:  54 | Input/Output: [[97 -41 97 97] -41]
Test Case:  55 | Input/Output: [[-97 -35 -97 -97] -97]
Test Case:  56 | Input/Output: [[-92 -65 -92 -92] -92]
Test Case:  57 | Input/Output: [[-60 -60 -60 0] -60]
Test Case:  58 | Input/Output: [[-59 -70 -70 -70] -70]
Test Case:  59 | Input/Output: [[-54 -54 95 -54] -54]
Test Case:  60 | Input/Output: [[-37 19 -37 -37] -37]
Test Case:  61 | Input/Output: [[20 74 20 20] 20]
Test Case:  62 | Input/Output: [[-26 64 -26 -26] -26]
Test Case:  63 | Input/Output: [[61 -86 61 61] -86]
Test Case:  64 | Input/Output: [[-99 -84 -84 -84] -99]
Test Case:  65 | Input/Output: [[-54 -54 -54 42] -54]
Test Case:  66 | Input/Output: [[13 13 -16 13] -16]
Test Case:  67 | Input/Output: [[88 88 75 88] 75]
Test Case:  68 | Input/Output: [[-37 -37 -65 -37] -65]
Test Case:  69 | Input/Output: [[-55 16 16 16] -55]
Test Case:  70 | Input/Output: [[-64 11 11 11] -64]
Test Case:  71 | Input/Output: [[-83 87 87 87] -83]
Test Case:  72 | Input/Output: [[-11 -11 -11 -23] -23]
Test Case:  73 | Input/Output: [[46 -88 46 46] -88]
Test Case:  74 | Input/Output: [[-18 -83 -18 -18] -83]
Test Case:  75 | Input/Output: [[45 45 45 85] 45]
Test Case:  76 | Input/Output: [[76 76 76 -15] -15]
Test Case:  77 | Input/Output: [[-36 0 -36 -36] -36]
Test Case:  78 | Input/Output: [[72 72 72 20] 20]
Test Case:  79 | Input/Output: [[48 91 91 91] 48]
Test Case:  80 | Input/Output: [[32 32 -35 32] -35]
Test Case:  81 | Input/Output: [[69 55 69 69] 55]
Test Case:  82 | Input/Output: [[-95 30 -95 -95] -95]
Test Case:  83 | Input/Output: [[-78 -78 -80 -78] -80]
Test Case:  84 | Input/Output: [[18 18 18 13] 13]
Test Case:  85 | Input/Output: [[-23 44 -23 -23] -23]
Test Case:  86 | Input/Output: [[-38 -38 69 -38] -38]
Test Case:  87 | Input/Output: [[42 69 42 42] 42]
Test Case:  88 | Input/Output: [[25 -98 -98 -98] -98]
Test Case:  89 | Input/Output: [[23 -91 -91 -91] -91]
Test Case:  90 | Input/Output: [[16 16 16 70] 16]
Test Case:  91 | Input/Output: [[-42 -42 -42 75] -42]
Test Case:  92 | Input/Output: [[-62 -62 -62 -20] -62]
Test Case:  93 | Input/Output: [[26 30 26 26] 26]
Test Case:  94 | Input/Output: [[16 16 -39 16] -39]
Test Case:  95 | Input/Output: [[32 32 -84 32] -84]
Test Case:  96 | Input/Output: [[87 87 87 -31] -31]
Test Case:  97 | Input/Output: [[-33 -51 -33 -33] -51]
Test Case:  98 | Input/Output: [[-55 -55 -55 -15] -55]
Test Case:  99 | Input/Output: [[88 88 88 -56] -56]
Test Case: 100 | Input/Output: [(87 87 87 87) 87]
Test Case: 101 | Input/Output: [(59 59 59 59) 59]
Test Case: 102 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 103 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 104 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 105 | Input/Output: [(60 60 60 60) 60]
Test Case: 106 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 107 | Input/Output: [(67 67 67 67) 67]
Test Case: 108 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 109 | Input/Output: [(89 89 89 89) 89]
Test Case: 110 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 111 | Input/Output: [(39 39 39 39) 39]
Test Case: 112 | Input/Output: [(54 54 54 54) 54]
Test Case: 113 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 114 | Input/Output: [(16 16 16 16) 16]
Test Case: 115 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 116 | Input/Output: [(-84 -84 -84 -84) -84]
Test Case: 117 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 118 | Input/Output: [(-92 -92 -92 -92) -92]
Test Case: 119 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 120 | Input/Output: [(55 55 55 55) 55]
Test Case: 121 | Input/Output: [(39 39 39 39) 39]
Test Case: 122 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 123 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 124 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 125 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 126 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 127 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 128 | Input/Output: [(82 82 82 82) 82]
Test Case: 129 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 130 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 131 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 132 | Input/Output: [(92 92 92 92) 92]
Test Case: 133 | Input/Output: [(97 97 97 97) 97]
Test Case: 134 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 135 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 136 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 137 | Input/Output: [(-34 -34 -34 -34) -34]
Test Case: 138 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 139 | Input/Output: [(-36 -36 -36 -36) -36]
Test Case: 140 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 141 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 142 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 143 | Input/Output: [(67 67 67 67) 67]
Test Case: 144 | Input/Output: [(49 49 49 49) 49]
Test Case: 145 | Input/Output: [(71 71 71 71) 71]
Test Case: 146 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 147 | Input/Output: [(49 49 49 49) 49]
Test Case: 148 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 149 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 150 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 151 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 152 | Input/Output: [(69 69 69 69) 69]
Test Case: 153 | Input/Output: [(91 91 91 91) 91]
Test Case: 154 | Input/Output: [(21 21 21 21) 21]
Test Case: 155 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 156 | Input/Output: [(72 72 72 72) 72]
Test Case: 157 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 158 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 159 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 160 | Input/Output: [(96 96 96 96) 96]
Test Case: 161 | Input/Output: [(23 23 23 23) 23]
Test Case: 162 | Input/Output: [(94 94 94 94) 94]
Test Case: 163 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 164 | Input/Output: [(34 34 34 34) 34]
Test Case: 165 | Input/Output: [(3 3 3 3) 3]
Test Case: 166 | Input/Output: [(56 56 56 56) 56]
Test Case: 167 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 168 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 169 | Input/Output: [(10 10 10 10) 10]
Test Case: 170 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 171 | Input/Output: [(28 28 28 28) 28]
Test Case: 172 | Input/Output: [(44 44 44 44) 44]
Test Case: 173 | Input/Output: [(64 64 64 64) 64]
Test Case: 174 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 175 | Input/Output: [(64 64 64 64) 64]
Test Case: 176 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 177 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 178 | Input/Output: [(86 86 86 86) 86]
Test Case: 179 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 180 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 181 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 182 | Input/Output: [(22 22 22 22) 22]
Test Case: 183 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 184 | Input/Output: [(78 78 78 78) 78]
Test Case: 185 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 186 | Input/Output: [(97 97 97 97) 97]
Test Case: 187 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 188 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 189 | Input/Output: [(16 16 16 16) 16]
Test Case: 190 | Input/Output: [(32 32 32 32) 32]
Test Case: 191 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 192 | Input/Output: [(9 9 9 9) 9]
Test Case: 193 | Input/Output: [(40 40 40 40) 40]
Test Case: 194 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 195 | Input/Output: [(46 46 46 46) 46]
Test Case: 196 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 197 | Input/Output: [(28 28 28 28) 28]
Test Case: 198 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 199 | Input/Output: [(69 69 69 69) 69]
Test Case: 200 | Input/Output: [(25 8 98 77) 8]
Test Case: 201 | Input/Output: [(75 63 40 74) 40]
Test Case: 202 | Input/Output: [(78 10 91 2) 2]
Test Case: 203 | Input/Output: [(67 91 46 99) 46]
Test Case: 204 | Input/Output: [(58 32 97 26) 26]
Test Case: 205 | Input/Output: [(51 45 5 7) 5]
Test Case: 206 | Input/Output: [(79 52 1 96) 1]
Test Case: 207 | Input/Output: [(12 5 36 14) 5]
Test Case: 208 | Input/Output: [(12 25 23 96) 12]
Test Case: 209 | Input/Output: [(57 34 27 17) 17]
Test Case: 210 | Input/Output: [(53 45 27 52) 27]
Test Case: 211 | Input/Output: [(64 53 100 20) 20]
Test Case: 212 | Input/Output: [(78 23 5 92) 5]
Test Case: 213 | Input/Output: [(34 63 43 46) 34]
Test Case: 214 | Input/Output: [(27 79 39 10) 10]
Test Case: 215 | Input/Output: [(2 39 88 34) 2]
Test Case: 216 | Input/Output: [(2 42 85 97) 2]
Test Case: 217 | Input/Output: [(6 40 74 86) 6]
Test Case: 218 | Input/Output: [(66 87 57 66) 57]
Test Case: 219 | Input/Output: [(79 86 3 6) 3]
Test Case: 220 | Input/Output: [(24 93 64 73) 24]
Test Case: 221 | Input/Output: [(76 71 5 68) 5]
Test Case: 222 | Input/Output: [(43 97 52 47) 43]
Test Case: 223 | Input/Output: [(36 76 83 80) 36]
Test Case: 224 | Input/Output: [(30 20 97 15) 15]
Test Case: 225 | Input/Output: [(41 8 28 59) 8]
Test Case: 226 | Input/Output: [(54 61 10 53) 10]
Test Case: 227 | Input/Output: [(94 92 72 44) 44]
Test Case: 228 | Input/Output: [(76 98 91 6) 6]
Test Case: 229 | Input/Output: [(56 84 57 72) 56]
Test Case: 230 | Input/Output: [(23 83 88 30) 23]
Test Case: 231 | Input/Output: [(4 36 65 15) 4]
Test Case: 232 | Input/Output: [(56 55 83 8) 8]
Test Case: 233 | Input/Output: [(14 46 17 71) 14]
Test Case: 234 | Input/Output: [(19 16 63 44) 16]
Test Case: 235 | Input/Output: [(38 8 43 1) 1]
Test Case: 236 | Input/Output: [(28 96 75 95) 28]
Test Case: 237 | Input/Output: [(24 9 7 62) 7]
Test Case: 238 | Input/Output: [(99 52 35 14) 14]
Test Case: 239 | Input/Output: [(56 1 53 85) 1]
Test Case: 240 | Input/Output: [(56 78 22 4) 4]
Test Case: 241 | Input/Output: [(93 42 74 93) 42]
Test Case: 242 | Input/Output: [(60 10 44 27) 10]
Test Case: 243 | Input/Output: [(44 79 23 70) 23]
Test Case: 244 | Input/Output: [(57 70 10 15) 10]
Test Case: 245 | Input/Output: [(38 72 39 1) 1]
Test Case: 246 | Input/Output: [(23 96 7 40) 7]
Test Case: 247 | Input/Output: [(4 29 37 23) 4]
Test Case: 248 | Input/Output: [(80 26 8 5) 5]
Test Case: 249 | Input/Output: [(13 87 91 48) 13]
Test Case: 250 | Input/Output: [(40 40 13 59) 13]
Test Case: 251 | Input/Output: [(52 20 92 29) 20]
Test Case: 252 | Input/Output: [(4 10 16 52) 4]
Test Case: 253 | Input/Output: [(80 67 81 55) 55]
Test Case: 254 | Input/Output: [(27 99 87 17) 17]
Test Case: 255 | Input/Output: [(66 83 90 67) 66]
Test Case: 256 | Input/Output: [(87 26 1 14) 1]
Test Case: 257 | Input/Output: [(6 56 4 10) 4]
Test Case: 258 | Input/Output: [(90 13 17 51) 13]
Test Case: 259 | Input/Output: [(75 68 39 51) 39]
Test Case: 260 | Input/Output: [(35 94 28 4) 4]
Test Case: 261 | Input/Output: [(84 35 55 54) 35]
Test Case: 262 | Input/Output: [(1 73 50 21) 1]
Test Case: 263 | Input/Output: [(70 47 22 69) 22]
Test Case: 264 | Input/Output: [(68 45 87 76) 45]
Test Case: 265 | Input/Output: [(10 50 23 13) 10]
Test Case: 266 | Input/Output: [(71 24 65 49) 24]
Test Case: 267 | Input/Output: [(52 77 39 54) 39]
Test Case: 268 | Input/Output: [(71 66 60 67) 60]
Test Case: 269 | Input/Output: [(51 57 52 1) 1]
Test Case: 270 | Input/Output: [(18 43 92 68) 18]
Test Case: 271 | Input/Output: [(14 53 16 2) 2]
Test Case: 272 | Input/Output: [(62 66 15 20) 15]
Test Case: 273 | Input/Output: [(36 67 62 8) 8]
Test Case: 274 | Input/Output: [(45 22 23 98) 22]
Test Case: 275 | Input/Output: [(68 95 48 51) 48]
Test Case: 276 | Input/Output: [(74 12 91 53) 12]
Test Case: 277 | Input/Output: [(42 16 53 63) 16]
Test Case: 278 | Input/Output: [(4 11 43 69) 4]
Test Case: 279 | Input/Output: [(62 83 65 93) 62]
Test Case: 280 | Input/Output: [(70 93 57 90) 57]
Test Case: 281 | Input/Output: [(29 33 51 37) 29]
Test Case: 282 | Input/Output: [(91 85 30 29) 29]
Test Case: 283 | Input/Output: [(77 7 80 65) 7]
Test Case: 284 | Input/Output: [(61 59 91 59) 59]
Test Case: 285 | Input/Output: [(61 93 37 53) 37]
Test Case: 286 | Input/Output: [(67 16 87 62) 16]
Test Case: 287 | Input/Output: [(5 3 10 84) 3]
Test Case: 288 | Input/Output: [(12 9 3 59) 3]
Test Case: 289 | Input/Output: [(30 38 56 89) 30]
Test Case: 290 | Input/Output: [(61 12 82 74) 12]
Test Case: 291 | Input/Output: [(59 8 7 71) 7]
Test Case: 292 | Input/Output: [(97 7 14 17) 7]
Test Case: 293 | Input/Output: [(92 90 16 76) 16]
Test Case: 294 | Input/Output: [(80 31 18 37) 18]
Test Case: 295 | Input/Output: [(85 74 62 41) 41]
Test Case: 296 | Input/Output: [(7 5 49 22) 5]
Test Case: 297 | Input/Output: [(29 96 67 63) 29]
Test Case: 298 | Input/Output: [(76 100 34 97) 34]
Test Case: 299 | Input/Output: [(91 85 43 66) 43]
Test Case: 300 | Input/Output: [(30 72 84 81) 30]
Test Case: 301 | Input/Output: [(8 68 76 82) 8]
Test Case: 302 | Input/Output: [(88 50 83 49) 49]
Test Case: 303 | Input/Output: [(81 21 53 54) 21]
Test Case: 304 | Input/Output: [(5 9 20 45) 5]
Test Case: 305 | Input/Output: [(17 48 42 80) 17]
Test Case: 306 | Input/Output: [(45 37 79 76) 37]
Test Case: 307 | Input/Output: [(83 23 0 73) 0]
Test Case: 308 | Input/Output: [(13 60 35 55) 13]
Test Case: 309 | Input/Output: [(58 98 10 17) 10]
Test Case: 310 | Input/Output: [(91 6 100 52) 6]
Test Case: 311 | Input/Output: [(36 70 46 42) 36]
Test Case: 312 | Input/Output: [(29 10 84 100) 10]
Test Case: 313 | Input/Output: [(18 5 48 95) 5]
Test Case: 314 | Input/Output: [(82 48 75 51) 48]
Test Case: 315 | Input/Output: [(69 80 79 65) 65]
Test Case: 316 | Input/Output: [(38 48 24 30) 24]
Test Case: 317 | Input/Output: [(66 89 84 73) 66]
Test Case: 318 | Input/Output: [(31 94 58 10) 10]
Test Case: 319 | Input/Output: [(95 24 34 64) 24]
Test Case: 320 | Input/Output: [(16 81 27 33) 16]
Test Case: 321 | Input/Output: [(15 12 34 88) 12]
Test Case: 322 | Input/Output: [(6 25 48 54) 6]
Test Case: 323 | Input/Output: [(1 46 98 83) 1]
Test Case: 324 | Input/Output: [(32 56 39 72) 32]
Test Case: 325 | Input/Output: [(89 73 58 51) 51]
Test Case: 326 | Input/Output: [(98 80 1 31) 1]
Test Case: 327 | Input/Output: [(3 17 81 17) 3]
Test Case: 328 | Input/Output: [(85 93 81 71) 71]
Test Case: 329 | Input/Output: [(22 89 1 39) 1]
Test Case: 330 | Input/Output: [(45 76 1 74) 1]
Test Case: 331 | Input/Output: [(16 95 57 96) 16]
Test Case: 332 | Input/Output: [(32 41 47 42) 32]
Test Case: 333 | Input/Output: [(32 86 18 0) 0]
Test Case: 334 | Input/Output: [(23 41 41 76) 23]
Test Case: 335 | Input/Output: [(46 57 82 1) 1]
Test Case: 336 | Input/Output: [(10 12 89 59) 10]
Test Case: 337 | Input/Output: [(94 40 21 13) 13]
Test Case: 338 | Input/Output: [(60 12 59 27) 12]
Test Case: 339 | Input/Output: [(15 77 16 3) 3]
Test Case: 340 | Input/Output: [(22 82 70 0) 0]
Test Case: 341 | Input/Output: [(48 66 19 56) 19]
Test Case: 342 | Input/Output: [(64 27 93 45) 27]
Test Case: 343 | Input/Output: [(35 50 21 74) 21]
Test Case: 344 | Input/Output: [(39 55 90 58) 39]
Test Case: 345 | Input/Output: [(18 13 44 7) 7]
Test Case: 346 | Input/Output: [(50 76 3 68) 3]
Test Case: 347 | Input/Output: [(100 4 97 47) 4]
Test Case: 348 | Input/Output: [(37 0 40 44) 0]
Test Case: 349 | Input/Output: [(29 98 90 49) 29]
Test Case: 350 | Input/Output: [(59 2 75 26) 2]
Test Case: 351 | Input/Output: [(44 33 10 86) 10]
Test Case: 352 | Input/Output: [(0 9 53 62) 0]
Test Case: 353 | Input/Output: [(58 71 87 45) 45]
Test Case: 354 | Input/Output: [(76 20 94 66) 20]
Test Case: 355 | Input/Output: [(59 1 76 25) 1]
Test Case: 356 | Input/Output: [(25 30 61 88) 25]
Test Case: 357 | Input/Output: [(40 20 99 80) 20]
Test Case: 358 | Input/Output: [(22 29 68 42) 22]
Test Case: 359 | Input/Output: [(65 34 3 28) 3]
Test Case: 360 | Input/Output: [(60 26 32 26) 26]
Test Case: 361 | Input/Output: [(65 73 78 91) 65]
Test Case: 362 | Input/Output: [(71 2 12 79) 2]
Test Case: 363 | Input/Output: [(4 74 44 84) 4]
Test Case: 364 | Input/Output: [(57 22 79 55) 22]
Test Case: 365 | Input/Output: [(40 65 29 70) 29]
Test Case: 366 | Input/Output: [(7 89 14 21) 7]
Test Case: 367 | Input/Output: [(87 75 90 46) 46]
Test Case: 368 | Input/Output: [(75 79 96 87) 75]
Test Case: 369 | Input/Output: [(74 9 89 27) 9]
Test Case: 370 | Input/Output: [(93 32 85 15) 15]
Test Case: 371 | Input/Output: [(85 43 92 40) 40]
Test Case: 372 | Input/Output: [(88 97 3 92) 3]
Test Case: 373 | Input/Output: [(12 44 13 11) 11]
Test Case: 374 | Input/Output: [(55 47 36 28) 28]
Test Case: 375 | Input/Output: [(71 53 63 79) 53]
Test Case: 376 | Input/Output: [(7 21 14 33) 7]
Test Case: 377 | Input/Output: [(66 24 70 3) 3]
Test Case: 378 | Input/Output: [(39 39 96 74) 39]
Test Case: 379 | Input/Output: [(63 40 4 46) 4]
Test Case: 380 | Input/Output: [(68 77 88 50) 50]
Test Case: 381 | Input/Output: [(4 82 11 62) 4]
Test Case: 382 | Input/Output: [(92 43 93 100) 43]
Test Case: 383 | Input/Output: [(97 70 31 3) 3]
Test Case: 384 | Input/Output: [(48 29 61 48) 29]
Test Case: 385 | Input/Output: [(34 80 49 93) 34]
Test Case: 386 | Input/Output: [(50 77 91 35) 35]
Test Case: 387 | Input/Output: [(81 87 54 59) 54]
Test Case: 388 | Input/Output: [(65 76 82 49) 49]
Test Case: 389 | Input/Output: [(23 89 66 86) 23]
Test Case: 390 | Input/Output: [(77 50 19 80) 19]
Test Case: 391 | Input/Output: [(82 63 92 30) 30]
Test Case: 392 | Input/Output: [(3 66 81 100) 3]
Test Case: 393 | Input/Output: [(78 54 35 82) 35]
Test Case: 394 | Input/Output: [(88 86 92 69) 69]
Test Case: 395 | Input/Output: [(43 81 15 6) 6]
Test Case: 396 | Input/Output: [(91 1 19 22) 1]
Test Case: 397 | Input/Output: [(38 96 59 7) 7]
Test Case: 398 | Input/Output: [(37 59 66 36) 36]
Test Case: 399 | Input/Output: [(13 59 44 76) 13]
Test Case: 400 | Input/Output: [(-100 -27 -80 -97) -100]
Test Case: 401 | Input/Output: [(95 -24 61 18) -24]
Test Case: 402 | Input/Output: [(-97 34 9 -49) -97]
Test Case: 403 | Input/Output: [(90 83 92 78) 78]
Test Case: 404 | Input/Output: [(-77 40 -10 95) -77]
Test Case: 405 | Input/Output: [(70 -13 -11 29) -13]
Test Case: 406 | Input/Output: [(13 -6 88 -39) -39]
Test Case: 407 | Input/Output: [(-41 83 -78 -78) -78]
Test Case: 408 | Input/Output: [(-31 -96 76 -12) -96]
Test Case: 409 | Input/Output: [(-100 -61 63 0) -100]
Test Case: 410 | Input/Output: [(-17 100 44 -87) -87]
Test Case: 411 | Input/Output: [(-93 80 69 45) -93]
Test Case: 412 | Input/Output: [(-55 51 79 -68) -68]
Test Case: 413 | Input/Output: [(-41 86 -23 93) -41]
Test Case: 414 | Input/Output: [(97 -81 -46 -35) -81]
Test Case: 415 | Input/Output: [(6 -16 -15 35) -16]
Test Case: 416 | Input/Output: [(43 -90 64 -95) -95]
Test Case: 417 | Input/Output: [(70 -42 -45 -87) -87]
Test Case: 418 | Input/Output: [(-41 44 -85 26) -85]
Test Case: 419 | Input/Output: [(-63 32 14 58) -63]
Test Case: 420 | Input/Output: [(9 -25 -37 59) -37]
Test Case: 421 | Input/Output: [(21 -31 -82 2) -82]
Test Case: 422 | Input/Output: [(34 -4 -46 92) -46]
Test Case: 423 | Input/Output: [(-1 14 2 16) -1]
Test Case: 424 | Input/Output: [(-56 7 -83 -3) -83]
Test Case: 425 | Input/Output: [(44 6 59 21) 6]
Test Case: 426 | Input/Output: [(-10 40 33 -15) -15]
Test Case: 427 | Input/Output: [(94 -48 34 91) -48]
Test Case: 428 | Input/Output: [(-3 -28 -61 -55) -61]
Test Case: 429 | Input/Output: [(-46 28 -2 14) -46]
Test Case: 430 | Input/Output: [(50 72 -70 -48) -70]
Test Case: 431 | Input/Output: [(-57 -23 58 2) -57]
Test Case: 432 | Input/Output: [(-71 -60 88 -57) -71]
Test Case: 433 | Input/Output: [(38 -35 -11 70) -35]
Test Case: 434 | Input/Output: [(-1 -71 55 -18) -71]
Test Case: 435 | Input/Output: [(-49 4 18 -57) -57]
Test Case: 436 | Input/Output: [(45 -76 95 80) -76]
Test Case: 437 | Input/Output: [(-7 -50 83 16) -50]
Test Case: 438 | Input/Output: [(-65 75 90 44) -65]
Test Case: 439 | Input/Output: [(-88 -4 10 -100) -100]
Test Case: 440 | Input/Output: [(24 18 -2 61) -2]
Test Case: 441 | Input/Output: [(-5 50 -1 -30) -30]
Test Case: 442 | Input/Output: [(57 -4 -34 68) -34]
Test Case: 443 | Input/Output: [(36 4 92 -46) -46]
Test Case: 444 | Input/Output: [(17 -9 9 26) -9]
Test Case: 445 | Input/Output: [(0 77 -16 -94) -94]
Test Case: 446 | Input/Output: [(-61 31 -69 -51) -69]
Test Case: 447 | Input/Output: [(-42 66 -33 -82) -82]
Test Case: 448 | Input/Output: [(-7 -49 42 46) -49]
Test Case: 449 | Input/Output: [(-7 32 -40 -44) -44]
Test Case: 450 | Input/Output: [(-32 49 68 63) -32]
Test Case: 451 | Input/Output: [(100 -55 -27 8) -55]
Test Case: 452 | Input/Output: [(-62 -20 82 -97) -97]
Test Case: 453 | Input/Output: [(-24 -75 41 -71) -75]
Test Case: 454 | Input/Output: [(-55 51 -13 -49) -55]
Test Case: 455 | Input/Output: [(-71 61 65 -15) -71]
Test Case: 456 | Input/Output: [(22 3 85 87) 3]
Test Case: 457 | Input/Output: [(-96 -52 -52 32) -96]
Test Case: 458 | Input/Output: [(-91 28 -94 -25) -94]
Test Case: 459 | Input/Output: [(-45 18 16 38) -45]
Test Case: 460 | Input/Output: [(28 -61 -20 59) -61]
Test Case: 461 | Input/Output: [(30 -38 -47 -28) -47]
Test Case: 462 | Input/Output: [(54 -42 76 47) -42]
Test Case: 463 | Input/Output: [(-43 -15 -11 -48) -48]
Test Case: 464 | Input/Output: [(25 -82 26 92) -82]
Test Case: 465 | Input/Output: [(-62 -55 67 96) -62]
Test Case: 466 | Input/Output: [(65 -87 69 5) -87]
Test Case: 467 | Input/Output: [(63 -2 -77 -92) -92]
Test Case: 468 | Input/Output: [(99 -60 86 -39) -60]
Test Case: 469 | Input/Output: [(37 30 49 -3) -3]
Test Case: 470 | Input/Output: [(-86 -28 84 -71) -86]
Test Case: 471 | Input/Output: [(-24 -19 71 -3) -24]
Test Case: 472 | Input/Output: [(-80 -39 24 51) -80]
Test Case: 473 | Input/Output: [(-41 73 -21 2) -41]
Test Case: 474 | Input/Output: [(-32 -75 47 -24) -75]
Test Case: 475 | Input/Output: [(-39 12 -4 89) -39]
Test Case: 476 | Input/Output: [(-85 20 -68 9) -85]
Test Case: 477 | Input/Output: [(-26 67 85 92) -26]
Test Case: 478 | Input/Output: [(-17 13 -54 -65) -65]
Test Case: 479 | Input/Output: [(-21 99 -96 14) -96]
Test Case: 480 | Input/Output: [(34 64 -84 -1) -84]
Test Case: 481 | Input/Output: [(-92 -52 29 -59) -92]
Test Case: 482 | Input/Output: [(16 62 63 -79) -79]
Test Case: 483 | Input/Output: [(74 -99 -100 -68) -100]
Test Case: 484 | Input/Output: [(93 22 10 -52) -52]
Test Case: 485 | Input/Output: [(36 28 47 44) 28]
Test Case: 486 | Input/Output: [(27 10 23 -44) -44]
Test Case: 487 | Input/Output: [(74 -14 1 -97) -97]
Test Case: 488 | Input/Output: [(-65 43 24 -80) -80]
Test Case: 489 | Input/Output: [(-33 -59 -2 100) -59]
Test Case: 490 | Input/Output: [(40 98 80 -91) -91]
Test Case: 491 | Input/Output: [(-5 -87 4 -2) -87]
Test Case: 492 | Input/Output: [(40 0 2 -70) -70]
Test Case: 493 | Input/Output: [(58 -75 -3 47) -75]
Test Case: 494 | Input/Output: [(-37 -78 -60 20) -78]
Test Case: 495 | Input/Output: [(-6 79 85 -88) -88]
Test Case: 496 | Input/Output: [(-65 14 50 -4) -65]
Test Case: 497 | Input/Output: [(84 -40 -80 35) -80]
Test Case: 498 | Input/Output: [(23 5 -33 -70) -70]
Test Case: 499 | Input/Output: [(55 38 -5 -51) -51]
Test Case: 500 | Input/Output: [(15 -100 -50 -64) -100]
Test Case: 501 | Input/Output: [(82 -68 39 32) -68]
Test Case: 502 | Input/Output: [(0 61 29 27) 0]
Test Case: 503 | Input/Output: [(74 -18 -16 74) -18]
Test Case: 504 | Input/Output: [(86 -16 -16 94) -16]
Test Case: 505 | Input/Output: [(-57 48 62 11) -57]
Test Case: 506 | Input/Output: [(47 -61 76 34) -61]
Test Case: 507 | Input/Output: [(6 0 -27 71) -27]
Test Case: 508 | Input/Output: [(-84 25 -24 -81) -84]
Test Case: 509 | Input/Output: [(48 -89 -56 46) -89]
Test Case: 510 | Input/Output: [(90 -66 -68 -24) -68]
Test Case: 511 | Input/Output: [(-15 -62 -4 -75) -75]
Test Case: 512 | Input/Output: [(-74 97 14 -11) -74]
Test Case: 513 | Input/Output: [(59 -92 9 -92) -92]
Test Case: 514 | Input/Output: [(-11 -12 57 -1) -12]
Test Case: 515 | Input/Output: [(13 -64 50 92) -64]
Test Case: 516 | Input/Output: [(13 -72 43 34) -72]
Test Case: 517 | Input/Output: [(98 -55 5 40) -55]
Test Case: 518 | Input/Output: [(8 42 -89 67) -89]
Test Case: 519 | Input/Output: [(77 27 96 -58) -58]
Test Case: 520 | Input/Output: [(90 59 63 -77) -77]
Test Case: 521 | Input/Output: [(36 41 23 30) 23]
Test Case: 522 | Input/Output: [(-16 -10 35 -46) -46]
Test Case: 523 | Input/Output: [(-72 -55 93 -64) -72]
Test Case: 524 | Input/Output: [(-58 70 -38 -18) -58]
Test Case: 525 | Input/Output: [(-90 -94 93 25) -94]
Test Case: 526 | Input/Output: [(10 33 -81 -81) -81]
Test Case: 527 | Input/Output: [(91 -31 -93 45) -93]
Test Case: 528 | Input/Output: [(-95 21 -73 26) -95]
Test Case: 529 | Input/Output: [(-64 -98 34 -32) -98]
Test Case: 530 | Input/Output: [(90 53 -20 75) -20]
Test Case: 531 | Input/Output: [(64 -90 24 81) -90]
Test Case: 532 | Input/Output: [(29 56 -88 -55) -88]
Test Case: 533 | Input/Output: [(92 66 -88 3) -88]
Test Case: 534 | Input/Output: [(-89 -5 -79 -33) -89]
Test Case: 535 | Input/Output: [(-45 64 -78 -57) -78]
Test Case: 536 | Input/Output: [(-76 33 -24 0) -76]
Test Case: 537 | Input/Output: [(56 -6 22 18) -6]
Test Case: 538 | Input/Output: [(-67 -82 -70 -6) -82]
Test Case: 539 | Input/Output: [(78 1 -29 -98) -98]
Test Case: 540 | Input/Output: [(-46 -91 -79 -30) -91]
Test Case: 541 | Input/Output: [(-13 -28 53 29) -28]
Test Case: 542 | Input/Output: [(46 -8 7 33) -8]
Test Case: 543 | Input/Output: [(-84 4 -58 -80) -84]
Test Case: 544 | Input/Output: [(86 -66 -73 -6) -73]
Test Case: 545 | Input/Output: [(75 -11 -61 -52) -61]
Test Case: 546 | Input/Output: [(-48 2 94 -94) -94]
Test Case: 547 | Input/Output: [(-91 -49 -70 -81) -91]
Test Case: 548 | Input/Output: [(-97 14 93 45) -97]
Test Case: 549 | Input/Output: [(-30 43 90 61) -30]
Test Case: 550 | Input/Output: [(-65 -48 26 -14) -65]
Test Case: 551 | Input/Output: [(84 80 -81 83) -81]
Test Case: 552 | Input/Output: [(-95 -60 31 -94) -95]
Test Case: 553 | Input/Output: [(13 47 38 -63) -63]
Test Case: 554 | Input/Output: [(36 -33 28 24) -33]
Test Case: 555 | Input/Output: [(89 -85 -2 -93) -93]
Test Case: 556 | Input/Output: [(-17 -86 -9 -94) -94]
Test Case: 557 | Input/Output: [(-14 -15 -71 -50) -71]
Test Case: 558 | Input/Output: [(-40 62 -46 33) -46]
Test Case: 559 | Input/Output: [(83 -23 53 8) -23]
Test Case: 560 | Input/Output: [(-92 4 -70 -51) -92]
Test Case: 561 | Input/Output: [(23 22 -25 91) -25]
Test Case: 562 | Input/Output: [(-13 -16 60 22) -16]
Test Case: 563 | Input/Output: [(-19 -4 -22 24) -22]
Test Case: 564 | Input/Output: [(87 22 46 -92) -92]
Test Case: 565 | Input/Output: [(80 32 93 -88) -88]
Test Case: 566 | Input/Output: [(-21 -84 75 -67) -84]
Test Case: 567 | Input/Output: [(97 52 -26 -43) -43]
Test Case: 568 | Input/Output: [(-7 80 42 -2) -7]
Test Case: 569 | Input/Output: [(-4 21 48 -90) -90]
Test Case: 570 | Input/Output: [(66 -87 -94 37) -94]
Test Case: 571 | Input/Output: [(-55 -97 2 -6) -97]
Test Case: 572 | Input/Output: [(27 28 -7 -33) -33]
Test Case: 573 | Input/Output: [(-41 48 30 63) -41]
Test Case: 574 | Input/Output: [(-19 14 40 8) -19]
Test Case: 575 | Input/Output: [(46 -68 78 -7) -68]
Test Case: 576 | Input/Output: [(-79 -39 89 -73) -79]
Test Case: 577 | Input/Output: [(-48 58 0 -31) -48]
Test Case: 578 | Input/Output: [(-72 -8 19 -1) -72]
Test Case: 579 | Input/Output: [(40 -42 -13 37) -42]
Test Case: 580 | Input/Output: [(-22 -99 -90 -39) -99]
Test Case: 581 | Input/Output: [(-51 50 52 -29) -51]
Test Case: 582 | Input/Output: [(-26 29 89 -55) -55]
Test Case: 583 | Input/Output: [(7 15 -53 21) -53]
Test Case: 584 | Input/Output: [(-2 21 -65 53) -65]
Test Case: 585 | Input/Output: [(38 -95 -28 19) -95]
Test Case: 586 | Input/Output: [(-12 17 41 -98) -98]
Test Case: 587 | Input/Output: [(96 -73 100 -72) -73]
Test Case: 588 | Input/Output: [(6 -59 100 0) -59]
Test Case: 589 | Input/Output: [(57 -40 22 88) -40]
Test Case: 590 | Input/Output: [(-74 20 -12 -31) -74]
Test Case: 591 | Input/Output: [(-28 -82 43 -56) -82]
Test Case: 592 | Input/Output: [(-66 31 -48 -23) -66]
Test Case: 593 | Input/Output: [(-37 -17 69 -65) -65]
Test Case: 594 | Input/Output: [(85 -84 29 87) -84]
Test Case: 595 | Input/Output: [(-24 -28 -68 44) -68]
Test Case: 596 | Input/Output: [(-48 39 -96 54) -96]
Test Case: 597 | Input/Output: [(-58 -63 55 -87) -87]
Test Case: 598 | Input/Output: [(7 -92 -57 -95) -95]
Test Case: 599 | Input/Output: [(-69 51 84 -97) -97]
Test Case: 600 | Input/Output: [(33 23 17 31) 17]
Test Case: 601 | Input/Output: [(-94 51 45 81) -94]
Test Case: 602 | Input/Output: [(79 -61 63 22) -61]
Test Case: 603 | Input/Output: [(-3 -67 -19 -96) -96]
Test Case: 604 | Input/Output: [(85 10 80 93) 10]
Test Case: 605 | Input/Output: [(19 62 -34 80) -34]
Test Case: 606 | Input/Output: [(-7 -10 -72 -53) -72]
Test Case: 607 | Input/Output: [(11 76 5 -55) -55]
Test Case: 608 | Input/Output: [(-58 93 -87 61) -87]
Test Case: 609 | Input/Output: [(26 94 34 -99) -99]
Test Case: 610 | Input/Output: [(86 -79 51 -2) -79]
Test Case: 611 | Input/Output: [(-7 -64 80 -15) -64]
Test Case: 612 | Input/Output: [(9 -72 -57 83) -72]
Test Case: 613 | Input/Output: [(12 56 -61 67) -61]
Test Case: 614 | Input/Output: [(47 47 -57 -89) -89]
Test Case: 615 | Input/Output: [(-98 -44 -12 -15) -98]
Test Case: 616 | Input/Output: [(-65 74 40 -60) -65]
Test Case: 617 | Input/Output: [(-33 0 50 -68) -68]
Test Case: 618 | Input/Output: [(-33 -43 75 -7) -43]
Test Case: 619 | Input/Output: [(36 -48 27 90) -48]
Test Case: 620 | Input/Output: [(40 91 59 26) 26]
Test Case: 621 | Input/Output: [(-12 -86 -88 -99) -99]
Test Case: 622 | Input/Output: [(56 -38 -62 -95) -95]
Test Case: 623 | Input/Output: [(-27 74 3 -91) -91]
Test Case: 624 | Input/Output: [(-34 84 -19 32) -34]
Test Case: 625 | Input/Output: [(83 -5 -64 62) -64]
Test Case: 626 | Input/Output: [(56 -11 -99 -31) -99]
Test Case: 627 | Input/Output: [(5 86 58 21) 5]
Test Case: 628 | Input/Output: [(34 -93 41 9) -93]
Test Case: 629 | Input/Output: [(-47 -4 -29 14) -47]
Test Case: 630 | Input/Output: [(18 62 -64 55) -64]
Test Case: 631 | Input/Output: [(-98 -46 -94 -28) -98]
Test Case: 632 | Input/Output: [(68 -57 -57 -87) -87]
Test Case: 633 | Input/Output: [(-56 -38 12 84) -56]
Test Case: 634 | Input/Output: [(19 72 8 -32) -32]
Test Case: 635 | Input/Output: [(41 -45 -95 -49) -95]
Test Case: 636 | Input/Output: [(88 -16 79 43) -16]
Test Case: 637 | Input/Output: [(35 -97 95 -76) -97]
Test Case: 638 | Input/Output: [(-44 -74 80 42) -74]
Test Case: 639 | Input/Output: [(57 50 83 41) 41]
Test Case: 640 | Input/Output: [(91 -38 17 -17) -38]
Test Case: 641 | Input/Output: [(23 7 97 -4) -4]
Test Case: 642 | Input/Output: [(66 -99 -35 -35) -99]
Test Case: 643 | Input/Output: [(20 31 53 67) 20]
Test Case: 644 | Input/Output: [(-61 -83 56 96) -83]
Test Case: 645 | Input/Output: [(30 30 -58 98) -58]
Test Case: 646 | Input/Output: [(-83 30 76 14) -83]
Test Case: 647 | Input/Output: [(64 -32 -78 87) -78]
Test Case: 648 | Input/Output: [(75 95 94 67) 67]
Test Case: 649 | Input/Output: [(-40 24 57 70) -40]
Test Case: 650 | Input/Output: [(-53 -67 -57 27) -67]
Test Case: 651 | Input/Output: [(11 46 86 42) 11]
Test Case: 652 | Input/Output: [(65 -17 1 -40) -40]
Test Case: 653 | Input/Output: [(11 31 85 -99) -99]
Test Case: 654 | Input/Output: [(6 21 21 88) 6]
Test Case: 655 | Input/Output: [(-15 -67 55 96) -67]
Test Case: 656 | Input/Output: [(56 -25 -6 73) -25]
Test Case: 657 | Input/Output: [(29 -18 -61 84) -61]
Test Case: 658 | Input/Output: [(-76 -98 50 9) -98]
Test Case: 659 | Input/Output: [(-84 78 -37 -28) -84]
Test Case: 660 | Input/Output: [(30 81 -14 78) -14]
Test Case: 661 | Input/Output: [(-41 -69 21 -84) -84]
Test Case: 662 | Input/Output: [(-93 48 -28 -2) -93]
Test Case: 663 | Input/Output: [(95 82 100 -50) -50]
Test Case: 664 | Input/Output: [(83 97 -16 83) -16]
Test Case: 665 | Input/Output: [(-23 24 -4 9) -23]
Test Case: 666 | Input/Output: [(52 88 52 20) 20]
Test Case: 667 | Input/Output: [(-39 -60 -61 -12) -61]
Test Case: 668 | Input/Output: [(-5 -52 39 -86) -86]
Test Case: 669 | Input/Output: [(-6 -98 40 -72) -98]
Test Case: 670 | Input/Output: [(-52 100 14 -67) -67]
Test Case: 671 | Input/Output: [(-58 58 28 22) -58]
Test Case: 672 | Input/Output: [(-97 -45 -91 -8) -97]
Test Case: 673 | Input/Output: [(-2 -89 -82 -48) -89]
Test Case: 674 | Input/Output: [(79 -12 43 -69) -69]
Test Case: 675 | Input/Output: [(17 -63 91 8) -63]
Test Case: 676 | Input/Output: [(38 -77 13 68) -77]
Test Case: 677 | Input/Output: [(1 25 -60 -43) -60]
Test Case: 678 | Input/Output: [(61 59 -24 -44) -44]
Test Case: 679 | Input/Output: [(47 -33 60 -60) -60]
Test Case: 680 | Input/Output: [(79 63 1 81) 1]
Test Case: 681 | Input/Output: [(-58 -60 -32 -60) -60]
Test Case: 682 | Input/Output: [(-52 -87 16 -62) -87]
Test Case: 683 | Input/Output: [(-99 23 -48 67) -99]
Test Case: 684 | Input/Output: [(-90 -64 87 61) -90]
Test Case: 685 | Input/Output: [(21 -1 41 12) -1]
Test Case: 686 | Input/Output: [(-4 -64 29 -41) -64]
Test Case: 687 | Input/Output: [(41 94 -93 9) -93]
Test Case: 688 | Input/Output: [(-90 -76 -71 -96) -96]
Test Case: 689 | Input/Output: [(-92 -48 42 26) -92]
Test Case: 690 | Input/Output: [(74 -27 79 -79) -79]
Test Case: 691 | Input/Output: [(4 41 -49 -93) -93]
Test Case: 692 | Input/Output: [(-27 17 -96 -12) -96]
Test Case: 693 | Input/Output: [(42 11 -44 -2) -44]
Test Case: 694 | Input/Output: [(98 -7 -46 46) -46]
Test Case: 695 | Input/Output: [(70 -18 -69 51) -69]
Test Case: 696 | Input/Output: [(99 -45 92 -52) -52]
Test Case: 697 | Input/Output: [(66 -28 26 -33) -33]
Test Case: 698 | Input/Output: [(-30 89 64 26) -30]
Test Case: 699 | Input/Output: [(-39 -91 99 -15) -91]
Test Case: 700 | Input/Output: [(17 40 -6 -45) -45]
Test Case: 701 | Input/Output: [(82 1 76 -57) -57]
Test Case: 702 | Input/Output: [(32 -67 -35 -100) -100]
Test Case: 703 | Input/Output: [(-36 32 -58 -74) -74]
Test Case: 704 | Input/Output: [(5 26 -13 92) -13]
Test Case: 705 | Input/Output: [(-91 29 97 -21) -91]
Test Case: 706 | Input/Output: [(50 -49 4 -71) -71]
Test Case: 707 | Input/Output: [(-14 39 -85 -78) -85]
Test Case: 708 | Input/Output: [(12 -94 -70 -33) -94]
Test Case: 709 | Input/Output: [(-5 -77 -68 6) -77]
Test Case: 710 | Input/Output: [(27 34 78 18) 18]
Test Case: 711 | Input/Output: [(4 25 79 -59) -59]
Test Case: 712 | Input/Output: [(68 31 -10 20) -10]
Test Case: 713 | Input/Output: [(-54 76 73 -48) -54]
Test Case: 714 | Input/Output: [(-34 -79 17 19) -79]
Test Case: 715 | Input/Output: [(50 47 -90 93) -90]
Test Case: 716 | Input/Output: [(-91 -18 -13 -69) -91]
Test Case: 717 | Input/Output: [(-69 -73 -54 -52) -73]
Test Case: 718 | Input/Output: [(-61 99 99 -86) -86]
Test Case: 719 | Input/Output: [(-42 -1 -48 -70) -70]
Test Case: 720 | Input/Output: [(-64 68 54 -33) -64]
Test Case: 721 | Input/Output: [(13 -54 32 65) -54]
Test Case: 722 | Input/Output: [(50 -64 43 -23) -64]
Test Case: 723 | Input/Output: [(40 96 10 -31) -31]
Test Case: 724 | Input/Output: [(28 93 -29 40) -29]
Test Case: 725 | Input/Output: [(-4 -88 79 -47) -88]
Test Case: 726 | Input/Output: [(-48 -79 58 -42) -79]
Test Case: 727 | Input/Output: [(-89 75 73 -11) -89]
Test Case: 728 | Input/Output: [(65 81 -5 -44) -44]
Test Case: 729 | Input/Output: [(-33 -65 89 -36) -65]
Test Case: 730 | Input/Output: [(12 -3 -46 13) -46]
Test Case: 731 | Input/Output: [(14 -92 -73 -62) -92]
Test Case: 732 | Input/Output: [(-1 -78 77 -79) -79]
Test Case: 733 | Input/Output: [(35 64 38 -63) -63]
Test Case: 734 | Input/Output: [(-63 44 -11 -92) -92]
Test Case: 735 | Input/Output: [(98 25 89 -15) -15]
Test Case: 736 | Input/Output: [(-54 66 -53 31) -54]
Test Case: 737 | Input/Output: [(63 31 11 -43) -43]
Test Case: 738 | Input/Output: [(56 80 -35 26) -35]
Test Case: 739 | Input/Output: [(-62 -8 44 -75) -75]
Test Case: 740 | Input/Output: [(20 -13 12 88) -13]
Test Case: 741 | Input/Output: [(88 -91 -71 91) -91]
Test Case: 742 | Input/Output: [(74 -17 23 34) -17]
Test Case: 743 | Input/Output: [(42 -35 -37 21) -37]
Test Case: 744 | Input/Output: [(-39 -67 -95 -65) -95]
Test Case: 745 | Input/Output: [(2 -62 23 60) -62]
Test Case: 746 | Input/Output: [(-30 -85 11 -69) -85]
Test Case: 747 | Input/Output: [(4 7 -32 -15) -32]
Test Case: 748 | Input/Output: [(100 92 -54 -36) -54]
Test Case: 749 | Input/Output: [(-39 83 87 -46) -46]
Test Case: 750 | Input/Output: [(94 26 -85 19) -85]
Test Case: 751 | Input/Output: [(-47 -89 85 72) -89]
Test Case: 752 | Input/Output: [(44 -48 -35 -55) -55]
Test Case: 753 | Input/Output: [(-42 68 -5 -51) -51]
Test Case: 754 | Input/Output: [(-63 -89 22 28) -89]
Test Case: 755 | Input/Output: [(-97 51 35 -29) -97]
Test Case: 756 | Input/Output: [(-40 -79 -10 -92) -92]
Test Case: 757 | Input/Output: [(-41 -79 -23 15) -79]
Test Case: 758 | Input/Output: [(60 -51 -100 17) -100]
Test Case: 759 | Input/Output: [(-23 -14 -43 9) -43]
Test Case: 760 | Input/Output: [(84 1 90 -60) -60]
Test Case: 761 | Input/Output: [(19 -93 95 2) -93]
Test Case: 762 | Input/Output: [(11 36 -5 -28) -28]
Test Case: 763 | Input/Output: [(67 4 -70 64) -70]
Test Case: 764 | Input/Output: [(-39 86 -38 5) -39]
Test Case: 765 | Input/Output: [(89 -73 47 92) -73]
Test Case: 766 | Input/Output: [(-75 -54 65 32) -75]
Test Case: 767 | Input/Output: [(36 -11 70 46) -11]
Test Case: 768 | Input/Output: [(29 22 -19 -8) -19]
Test Case: 769 | Input/Output: [(-57 30 67 15) -57]
Test Case: 770 | Input/Output: [(-35 62 11 -54) -54]
Test Case: 771 | Input/Output: [(-39 -47 96 78) -47]
Test Case: 772 | Input/Output: [(97 -34 -42 -76) -76]
Test Case: 773 | Input/Output: [(83 -22 36 -33) -33]
Test Case: 774 | Input/Output: [(-48 21 49 -63) -63]
Test Case: 775 | Input/Output: [(32 55 -25 3) -25]
Test Case: 776 | Input/Output: [(15 -93 14 38) -93]
Test Case: 777 | Input/Output: [(-99 49 39 -3) -99]
Test Case: 778 | Input/Output: [(-57 20 24 90) -57]
Test Case: 779 | Input/Output: [(51 -37 61 5) -37]
Test Case: 780 | Input/Output: [(-90 -89 43 83) -90]
Test Case: 781 | Input/Output: [(62 93 83 -99) -99]
Test Case: 782 | Input/Output: [(20 20 -36 -26) -36]
Test Case: 783 | Input/Output: [(-83 38 70 3) -83]
Test Case: 784 | Input/Output: [(96 -9 19 7) -9]
Test Case: 785 | Input/Output: [(-28 -68 10 -4) -68]
Test Case: 786 | Input/Output: [(-96 -12 65 28) -96]
Test Case: 787 | Input/Output: [(-46 79 -12 17) -46]
Test Case: 788 | Input/Output: [(16 44 -57 20) -57]
Test Case: 789 | Input/Output: [(-92 -26 93 2) -92]
Test Case: 790 | Input/Output: [(39 87 -16 -30) -30]
Test Case: 791 | Input/Output: [(45 -44 -42 55) -44]
Test Case: 792 | Input/Output: [(-96 92 -87 90) -96]
Test Case: 793 | Input/Output: [(-3 -30 99 -62) -62]
Test Case: 794 | Input/Output: [(-100 73 -8 56) -100]
Test Case: 795 | Input/Output: [(-6 -92 72 69) -92]
Test Case: 796 | Input/Output: [(-38 -62 -59 -35) -62]
Test Case: 797 | Input/Output: [(-66 32 76 -20) -66]
Test Case: 798 | Input/Output: [(-52 47 54 -58) -58]
Test Case: 799 | Input/Output: [(-81 -22 48 -37) -81]
Test Case: 800 | Input/Output: [(6 -3 27 68) -3]
Test Case: 801 | Input/Output: [(15 38 -87 52) -87]
Test Case: 802 | Input/Output: [(-79 29 -52 64) -79]
Test Case: 803 | Input/Output: [(77 -95 -73 99) -95]
Test Case: 804 | Input/Output: [(53 -36 36 -36) -36]
Test Case: 805 | Input/Output: [(62 63 -86 -39) -86]
Test Case: 806 | Input/Output: [(34 47 -47 8) -47]
Test Case: 807 | Input/Output: [(-10 -97 -71 11) -97]
Test Case: 808 | Input/Output: [(97 56 14 10) 10]
Test Case: 809 | Input/Output: [(-19 -51 -5 85) -51]
Test Case: 810 | Input/Output: [(-89 -84 89 55) -89]
Test Case: 811 | Input/Output: [(-39 59 -88 -47) -88]
Test Case: 812 | Input/Output: [(-34 -83 97 43) -83]
Test Case: 813 | Input/Output: [(-33 -52 -11 -88) -88]
Test Case: 814 | Input/Output: [(-68 -61 97 70) -68]
Test Case: 815 | Input/Output: [(-36 -57 56 -58) -58]
Test Case: 816 | Input/Output: [(40 -37 -44 -19) -44]
Test Case: 817 | Input/Output: [(30 46 -20 -51) -51]
Test Case: 818 | Input/Output: [(83 48 -4 1) -4]
Test Case: 819 | Input/Output: [(-88 -4 36 -39) -88]
Test Case: 820 | Input/Output: [(-97 -23 48 -64) -97]
Test Case: 821 | Input/Output: [(-48 42 31 62) -48]
Test Case: 822 | Input/Output: [(-47 -70 -80 -5) -80]
Test Case: 823 | Input/Output: [(-30 24 60 18) -30]
Test Case: 824 | Input/Output: [(-51 -22 23 68) -51]
Test Case: 825 | Input/Output: [(-31 -26 -1 -30) -31]
Test Case: 826 | Input/Output: [(96 -62 12 -79) -79]
Test Case: 827 | Input/Output: [(8 -20 100 97) -20]
Test Case: 828 | Input/Output: [(62 -3 36 61) -3]
Test Case: 829 | Input/Output: [(91 33 -62 75) -62]
Test Case: 830 | Input/Output: [(34 -27 47 -54) -54]
Test Case: 831 | Input/Output: [(49 -16 67 34) -16]
Test Case: 832 | Input/Output: [(-76 31 82 87) -76]
Test Case: 833 | Input/Output: [(-65 12 -17 -36) -65]
Test Case: 834 | Input/Output: [(-80 1 52 0) -80]
Test Case: 835 | Input/Output: [(81 -59 -66 59) -66]
Test Case: 836 | Input/Output: [(39 -55 100 -23) -55]
Test Case: 837 | Input/Output: [(6 97 -68 -77) -77]
Test Case: 838 | Input/Output: [(19 -58 -90 -64) -90]
Test Case: 839 | Input/Output: [(-15 18 -83 -66) -83]
Test Case: 840 | Input/Output: [(27 -13 30 -14) -14]
Test Case: 841 | Input/Output: [(1 54 81 17) 1]
Test Case: 842 | Input/Output: [(18 -55 -6 -31) -55]
Test Case: 843 | Input/Output: [(-88 15 -45 17) -88]
Test Case: 844 | Input/Output: [(-27 96 32 22) -27]
Test Case: 845 | Input/Output: [(-1 9 -6 -25) -25]
Test Case: 846 | Input/Output: [(-8 -8 23 -62) -62]
Test Case: 847 | Input/Output: [(-16 60 38 -64) -64]
Test Case: 848 | Input/Output: [(-88 -67 -71 -13) -88]
Test Case: 849 | Input/Output: [(-55 99 17 -27) -55]
Test Case: 850 | Input/Output: [(-18 -77 24 -23) -77]
Test Case: 851 | Input/Output: [(-12 -1 72 -57) -57]
Test Case: 852 | Input/Output: [(-35 -4 -32 47) -35]
Test Case: 853 | Input/Output: [(-21 -79 -44 77) -79]
Test Case: 854 | Input/Output: [(44 96 -49 11) -49]
Test Case: 855 | Input/Output: [(62 -7 27 77) -7]
Test Case: 856 | Input/Output: [(-63 78 70 63) -63]
Test Case: 857 | Input/Output: [(31 56 18 -73) -73]
Test Case: 858 | Input/Output: [(38 -83 31 -28) -83]
Test Case: 859 | Input/Output: [(41 36 -18 29) -18]
Test Case: 860 | Input/Output: [(62 73 90 64) 62]
Test Case: 861 | Input/Output: [(73 95 68 -62) -62]
Test Case: 862 | Input/Output: [(-57 53 -21 39) -57]
Test Case: 863 | Input/Output: [(58 99 78 -72) -72]
Test Case: 864 | Input/Output: [(53 -49 -35 -49) -49]
Test Case: 865 | Input/Output: [(48 41 -38 -31) -38]
Test Case: 866 | Input/Output: [(-86 -77 -98 22) -98]
Test Case: 867 | Input/Output: [(40 18 53 98) 18]
Test Case: 868 | Input/Output: [(1 38 -95 28) -95]
Test Case: 869 | Input/Output: [(51 -20 86 65) -20]
Test Case: 870 | Input/Output: [(1 -73 -4 30) -73]
Test Case: 871 | Input/Output: [(-42 56 -14 45) -42]
Test Case: 872 | Input/Output: [(19 49 -64 -84) -84]
Test Case: 873 | Input/Output: [(37 1 -95 48) -95]
Test Case: 874 | Input/Output: [(63 -100 37 4) -100]
Test Case: 875 | Input/Output: [(92 -45 -75 49) -75]
Test Case: 876 | Input/Output: [(-15 -86 -85 -87) -87]
Test Case: 877 | Input/Output: [(48 27 67 55) 27]
Test Case: 878 | Input/Output: [(-38 3 -59 15) -59]
Test Case: 879 | Input/Output: [(97 63 -38 33) -38]
Test Case: 880 | Input/Output: [(16 -35 -100 3) -100]
Test Case: 881 | Input/Output: [(18 -91 1 -22) -91]
Test Case: 882 | Input/Output: [(-10 -44 71 48) -44]
Test Case: 883 | Input/Output: [(-52 -71 -20 55) -71]
Test Case: 884 | Input/Output: [(-59 92 35 52) -59]
Test Case: 885 | Input/Output: [(-48 82 32 -100) -100]
Test Case: 886 | Input/Output: [(84 68 65 -83) -83]
Test Case: 887 | Input/Output: [(31 35 75 -66) -66]
Test Case: 888 | Input/Output: [(30 -29 -62 -81) -81]
Test Case: 889 | Input/Output: [(-70 -2 -69 -21) -70]
Test Case: 890 | Input/Output: [(-38 87 45 15) -38]
Test Case: 891 | Input/Output: [(-76 67 -28 66) -76]
Test Case: 892 | Input/Output: [(77 -39 -32 -73) -73]
Test Case: 893 | Input/Output: [(12 71 30 94) 12]
Test Case: 894 | Input/Output: [(90 -74 -12 31) -74]
Test Case: 895 | Input/Output: [(71 45 -87 2) -87]
Test Case: 896 | Input/Output: [(-84 -70 -19 -8) -84]
Test Case: 897 | Input/Output: [(-18 -89 79 -38) -89]
Test Case: 898 | Input/Output: [(-58 -34 44 6) -58]
Test Case: 899 | Input/Output: [(88 93 -65 -42) -65]
Test Case: 900 | Input/Output: [(97 -13 -67 84) -67]
Test Case: 901 | Input/Output: [(-48 -21 -18 5) -48]
Test Case: 902 | Input/Output: [(2 -41 -60 -68) -68]
Test Case: 903 | Input/Output: [(31 7 5 33) 5]
Test Case: 904 | Input/Output: [(-83 83 71 -42) -83]
Test Case: 905 | Input/Output: [(-7 81 -68 50) -68]
Test Case: 906 | Input/Output: [(-83 -74 54 -37) -83]
Test Case: 907 | Input/Output: [(-99 -26 59 -30) -99]
Test Case: 908 | Input/Output: [(-22 -65 -15 51) -65]
Test Case: 909 | Input/Output: [(63 50 57 -66) -66]
Test Case: 910 | Input/Output: [(34 65 39 -65) -65]
Test Case: 911 | Input/Output: [(75 -57 53 -14) -57]
Test Case: 912 | Input/Output: [(47 72 -39 -96) -96]
Test Case: 913 | Input/Output: [(99 -80 23 96) -80]
Test Case: 914 | Input/Output: [(88 41 8 37) 8]
Test Case: 915 | Input/Output: [(4 17 -49 -98) -98]
Test Case: 916 | Input/Output: [(47 98 -8 32) -8]
Test Case: 917 | Input/Output: [(-75 -80 44 12) -80]
Test Case: 918 | Input/Output: [(23 46 87 66) 23]
Test Case: 919 | Input/Output: [(83 70 26 22) 22]
Test Case: 920 | Input/Output: [(87 -30 -27 -35) -35]
Test Case: 921 | Input/Output: [(-73 73 -44 -3) -73]
Test Case: 922 | Input/Output: [(64 -69 -79 -64) -79]
Test Case: 923 | Input/Output: [(-15 -1 87 -35) -35]
Test Case: 924 | Input/Output: [(95 -95 -25 76) -95]
Test Case: 925 | Input/Output: [(-34 58 -64 10) -64]
Test Case: 926 | Input/Output: [(15 -38 -30 -37) -38]
Test Case: 927 | Input/Output: [(99 41 -3 -52) -52]
Test Case: 928 | Input/Output: [(-15 -56 28 91) -56]
Test Case: 929 | Input/Output: [(-86 35 -79 78) -86]
Test Case: 930 | Input/Output: [(78 85 -38 49) -38]
Test Case: 931 | Input/Output: [(67 89 92 -10) -10]
Test Case: 932 | Input/Output: [(39 -91 -45 47) -91]
Test Case: 933 | Input/Output: [(-59 89 -91 -13) -91]
Test Case: 934 | Input/Output: [(-100 52 70 -27) -100]
Test Case: 935 | Input/Output: [(-53 -39 35 82) -53]
Test Case: 936 | Input/Output: [(2 -40 73 7) -40]
Test Case: 937 | Input/Output: [(97 -54 83 -80) -80]
Test Case: 938 | Input/Output: [(-17 23 -23 -23) -23]
Test Case: 939 | Input/Output: [(21 59 79 82) 21]
Test Case: 940 | Input/Output: [(73 30 92 5) 5]
Test Case: 941 | Input/Output: [(-64 98 69 -65) -65]
Test Case: 942 | Input/Output: [(-66 -46 -39 79) -66]
Test Case: 943 | Input/Output: [(-57 -89 90 -36) -89]
Test Case: 944 | Input/Output: [(-30 -54 -47 -64) -64]
Test Case: 945 | Input/Output: [(82 -52 17 -42) -52]
Test Case: 946 | Input/Output: [(-74 -55 65 -28) -74]
Test Case: 947 | Input/Output: [(94 88 52 -32) -32]
Test Case: 948 | Input/Output: [(-76 66 -36 -46) -76]
Test Case: 949 | Input/Output: [(-78 -25 47 -70) -78]
Test Case: 950 | Input/Output: [(-6 -96 78 64) -96]
Test Case: 951 | Input/Output: [(19 68 -71 -34) -71]
Test Case: 952 | Input/Output: [(9 -99 88 -3) -99]
Test Case: 953 | Input/Output: [(70 94 40 -82) -82]
Test Case: 954 | Input/Output: [(-2 -87 74 -96) -96]
Test Case: 955 | Input/Output: [(7 6 -2 -65) -65]
Test Case: 956 | Input/Output: [(-19 18 -81 7) -81]
Test Case: 957 | Input/Output: [(-36 -23 -15 92) -36]
Test Case: 958 | Input/Output: [(-32 32 -10 2) -32]
Test Case: 959 | Input/Output: [(-49 12 -79 -59) -79]
Test Case: 960 | Input/Output: [(72 -63 -33 31) -63]
Test Case: 961 | Input/Output: [(-5 59 43 -80) -80]
Test Case: 962 | Input/Output: [(-16 -63 16 -27) -63]
Test Case: 963 | Input/Output: [(80 -52 -82 8) -82]
Test Case: 964 | Input/Output: [(69 91 58 22) 22]
Test Case: 965 | Input/Output: [(85 99 73 8) 8]
Test Case: 966 | Input/Output: [(91 74 -1 54) -1]
Test Case: 967 | Input/Output: [(22 69 79 8) 8]
Test Case: 968 | Input/Output: [(47 96 70 -3) -3]
Test Case: 969 | Input/Output: [(-14 58 -45 -87) -87]
Test Case: 970 | Input/Output: [(66 23 -38 -3) -38]
Test Case: 971 | Input/Output: [(-41 80 10 75) -41]
Test Case: 972 | Input/Output: [(84 72 82 76) 72]
Test Case: 973 | Input/Output: [(18 24 -63 61) -63]
Test Case: 974 | Input/Output: [(-8 -71 21 -58) -71]
Test Case: 975 | Input/Output: [(55 50 -14 -73) -73]
Test Case: 976 | Input/Output: [(-25 63 39 -45) -45]
Test Case: 977 | Input/Output: [(48 -5 -78 44) -78]
Test Case: 978 | Input/Output: [(-59 -97 -5 -33) -97]
Test Case: 979 | Input/Output: [(40 -78 -94 39) -94]
Test Case: 980 | Input/Output: [(4 84 54 -32) -32]
Test Case: 981 | Input/Output: [(-8 96 44 -43) -43]
Test Case: 982 | Input/Output: [(33 78 100 -14) -14]
Test Case: 983 | Input/Output: [(96 63 -49 83) -49]
Test Case: 984 | Input/Output: [(-99 31 94 9) -99]
Test Case: 985 | Input/Output: [(-78 -6 -74 71) -78]
Test Case: 986 | Input/Output: [(67 42 35 -1) -1]
Test Case: 987 | Input/Output: [(21 -79 64 -48) -79]
Test Case: 988 | Input/Output: [(-12 100 49 -87) -87]
Test Case: 989 | Input/Output: [(-27 62 -80 56) -80]
Test Case: 990 | Input/Output: [(-48 91 80 -20) -48]
Test Case: 991 | Input/Output: [(-10 -13 52 -45) -45]
Test Case: 992 | Input/Output: [(93 96 -3 84) -3]
Test Case: 993 | Input/Output: [(-33 -47 50 -15) -47]
Test Case: 994 | Input/Output: [(-59 -82 14 17) -82]
Test Case: 995 | Input/Output: [(-87 62 -55 -17) -87]
Test Case: 996 | Input/Output: [(-76 91 99 31) -76]
Test Case: 997 | Input/Output: [(50 -85 79 -92) -92]
Test Case: 998 | Input/Output: [(38 -3 4 70) -3]
Test Case: 999 | Input/Output: [(39 -33 -30 -4) -33]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x579dde54 clojush.problems.software.smallest$fn__7460@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@7e2a76be]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
random-screen = false
random-seed = 75 -57 121 -82 8 105 -108 23 81 113 92 -34 97 42 86 4
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[57 57 84 57] 57] [[-97 12 12 12] -97] [[3 3 -45 3] -45] [[-34 42 -34 -34] -34] [[72 72 72 -58] -58] [[76 76 76 -60] -60] [[-63 -63 -63 17] -63] [[-93 23 23 23] -93] [[6 -57 6 6] -57] [[63 76 63 63] 63] [(-44 -44 -44 -44) -44] [(-30 -30 -30 -30) -30] [(-5 -5 -5 -5) -5] [(-28 -28 -28 -28) -28] [(43 43 43 43) 43] [(92 56 49 70) 49] [(5 91 91 44) 5] [(38 1 55 14) 1] [(32 79 17 63) 17] [(27 48 34 50) 27] [(46 11 68 18) 11] [(94 16 54 46) 16] [(11 58 68 43) 11] [(60 59 25 73) 25] [(27 27 80 13) 13] [(92 75 34 35) 34] [(83 8 89 48) 8] [(50 6 51 49) 6] [(56 12 34 50) 12] [(42 48 93 1) 1] [(97 87 18 19) 18] [(42 79 26 37) 26] [(56 40 48 45) 40] [(36 28 78 53) 28] [(58 88 42 58) 42] [(100 82 99 -41) -41] [(-12 52 -83 59) -83] [(-30 -71 75 40) -71] [(-88 76 -44 87) -88] [(45 -7 -45 1) -45] [(26 82 -21 -7) -21] [(-72 75 81 -95) -95] [(42 -78 19 -73) -78] [(98 -45 82 95) -45] [(38 -30 3 72) -30] [(-91 0 49 -57) -91] [(-65 -39 26 93) -65] [(79 -58 67 -99) -99] [(1 54 -44 -37) -44] [(1 -79 -92 -98) -98] [(-2 90 -40 85) -40] [(67 76 9 -100) -100] [(34 -83 61 -94) -94] [(33 -17 -79 -39) -79] [(81 -43 41 90) -43] [(-76 58 12 -70) -76] [(-3 -41 62 64) -41] [(-47 28 8 -77) -77] [(46 33 -96 -30) -96] [(20 60 10 91) 10] [(-36 -9 48 92) -36] [(96 92 -85 45) -85] [(-83 -2 84 11) -83] [(-22 60 70 71) -22] [(49 50 -74 14) -74] [(72 70 89 -100) -100] [(56 -78 4 34) -78] [(54 -29 14 -25) -29] [(-98 -70 88 7) -98] [(-99 93 -8 45) -99] [(-59 -26 -72 -80) -80] [(-63 64 -34 -6) -63] [(3 -62 48 -69) -69] [(93 92 -69 -54) -69] [(79 24 89 49) 24] [(14 59 78 -28) -28] [(-15 56 63 59) -15] [(40 -36 -43 -37) -43] [(-20 31 -70 -2) -70] [(-29 -31 94 84) -31] [(-14 -25 33 -26) -26] [(-1 -57 50 -18) -57] [(-19 56 -93 -97) -97] [(-78 49 -73 -95) -95] [(-45 43 -77 32) -77] [(-30 15 -32 -48) -48] [(-3 38 -50 47) -50] [(39 -73 51 -86) -86] [(12 -30 42 -46) -46] [(-77 49 67 -86) -86] [(-39 -15 13 80) -39] [(-58 42 43 -30) -58] [(-28 41 -84 34) -84] [(-26 68 -46 -66) -66] [(-65 17 89 99) -65])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 92                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 38                 
Correct output: 17                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 46                 
Correct output: 16                  | Program output: 94                 
Correct output: 11                  | Program output: 11                 
Correct output: 25                  | Program output: 60                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 92                 
Correct output: 8                   | Program output: 83                 
Correct output: 6                   | Program output: 50                 
Correct output: 12                  | Program output: 56                 
Correct output: 1                   | Program output: 42                 
Correct output: 18                  | Program output: 97                 
Correct output: 26                  | Program output: 42                 
Correct output: 40                  | Program output: 56                 
Correct output: 28                  | Program output: 36                 
Correct output: 42                  | Program output: 58                 
Correct output: -41                 | Program output: 100                
Correct output: -83                 | Program output: -12                
Correct output: -71                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -45                 | Program output: 45                 
Correct output: -21                 | Program output: 26                 
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: 42                 
Correct output: -45                 | Program output: 98                 
Correct output: -30                 | Program output: 38                 
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: 79                 
Correct output: -44                 | Program output: 1                  
Correct output: -98                 | Program output: 1                  
Correct output: -40                 | Program output: -2                 
Correct output: -100                | Program output: 67                 
Correct output: -94                 | Program output: 34                 
Correct output: -79                 | Program output: 33                 
Correct output: -43                 | Program output: 81                 
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -3                 
Correct output: -77                 | Program output: -47                
Correct output: -96                 | Program output: 46                 
Correct output: 10                  | Program output: 20                 
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 96                 
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: 49                 
Correct output: -100                | Program output: 72                 
Correct output: -78                 | Program output: 56                 
Correct output: -29                 | Program output: 54                 
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -59                
Correct output: -63                 | Program output: -63                
Correct output: -69                 | Program output: 3                  
Correct output: -69                 | Program output: 93                 
Correct output: 24                  | Program output: 79                 
Correct output: -28                 | Program output: 14                 
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: 40                 
Correct output: -70                 | Program output: -20                
Correct output: -31                 | Program output: -29                
Correct output: -26                 | Program output: -14                
Correct output: -57                 | Program output: -1                 
Correct output: -97                 | Program output: -19                
Correct output: -95                 | Program output: -78                
Correct output: -77                 | Program output: -45                
Correct output: -48                 | Program output: -30                
Correct output: -50                 | Program output: -3                 
Correct output: -86                 | Program output: 39                 
Correct output: -46                 | Program output: 12                 
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -28                
Correct output: -66                 | Program output: -26                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_while} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_103} {:close 0, :instruction exec_k} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 2, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_flush} {:close 1, :instruction in4} {:close 2, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction tag_exec_776} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_rot} {:close 0, :instruction in2})
Lexicase best program: (boolean_or integer_dup_items integer_lt integer_dup_items boolean_invert_second_then_and exec_y (exec_do*range (integer_gt integer_lt integer_mod integer_mult boolean_swap exec_empty boolean_dup_items boolean_shove boolean_rot exec_while (exec_stackdepth) tag_integer_103 exec_k (exec_if (exec_dup_times (integer_dup_items)) (in1 exec_k_when_autoconstructing (print_integer integer_stackdepth) (integer_flush) in4) integer_add) () exec_empty integer_div) exec_stackdepth integer_sub boolean_not exec_do*times (integer_stackdepth exec_dup_times (boolean_shove integer_max exec_noop exec_yankdup) exec_y_when_autoconstructing () print_integer integer_eq exec_pop (integer_flush) tag_exec_776 (exec_yank integer_max exec_dup (in4 exec_yank integer_mod) exec_k_when_autoconstructing (integer_dec boolean_dup_items integer_empty integer_add boolean_flush) () exec_do*range () exec_rot (in2) () ()))))
Lexicase best errors: [1 0 1 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 86
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_while} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction tag_integer_103} {:close 0, :instruction exec_k} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 2, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_flush} {:close 1, :instruction in4} {:close 2, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_div} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_max} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_yankdup} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_flush} {:close 0, :instruction tag_exec_776} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_mod} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_add} {:close 2, :instruction boolean_flush} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_rot} {:close 0, :instruction in2})
Zero cases best program: (boolean_or integer_dup_items integer_lt integer_dup_items boolean_invert_second_then_and exec_y (exec_do*range (integer_gt integer_lt integer_mod integer_mult boolean_swap exec_empty boolean_dup_items boolean_shove boolean_rot exec_while (exec_stackdepth) tag_integer_103 exec_k (exec_if (exec_dup_times (integer_dup_items)) (in1 exec_k_when_autoconstructing (print_integer integer_stackdepth) (integer_flush) in4) integer_add) () exec_empty integer_div) exec_stackdepth integer_sub boolean_not exec_do*times (integer_stackdepth exec_dup_times (boolean_shove integer_max exec_noop exec_yankdup) exec_y_when_autoconstructing () print_integer integer_eq exec_pop (integer_flush) tag_exec_776 (exec_yank integer_max exec_dup (in4 exec_yank integer_mod) exec_k_when_autoconstructing (integer_dec boolean_dup_items integer_empty integer_add boolean_flush) () exec_do*range () exec_rot (in2) () ()))))
Zero cases best errors: [1 0 1 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 86
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 5 2 1 8 5 2 2 5 5)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (2 5 2 1 8 5 2 2 5 5)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_fromboolean})
Best program: (exec_s () (integer_max boolean_frominteger boolean_or boolean_xor boolean_invert_second_then_and in1 print_integer) (integer_gt boolean_pop integer_inc integer_fromboolean))
Errors: [1 0 1 1 0 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 12
Size: 16
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 9.963
Median total errors in population: 10
Error averages by case: (0.998 0.995 0.998 0.999 0.992 0.995 0.998 0.998 0.995 0.995)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.932
Average program size in population (points): 68.794
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.282
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 471085
--- Timings ---
Current time: 1559314618138 milliseconds
Total Time:           2.7 seconds
Initialization:       0.1 seconds,  4.1%
Reproduction:         0.8 seconds, 29.4%
Fitness Testing:      1.8 seconds, 66.5%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 92                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 38                 
Correct output: 17                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 46                 
Correct output: 16                  | Program output: 94                 
Correct output: 11                  | Program output: 11                 
Correct output: 25                  | Program output: 60                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 92                 
Correct output: 8                   | Program output: 83                 
Correct output: 6                   | Program output: 50                 
Correct output: 12                  | Program output: 56                 
Correct output: 1                   | Program output: 42                 
Correct output: 18                  | Program output: 97                 
Correct output: 26                  | Program output: 42                 
Correct output: 40                  | Program output: 56                 
Correct output: 28                  | Program output: 36                 
Correct output: 42                  | Program output: 58                 
Correct output: -41                 | Program output: 100                
Correct output: -83                 | Program output: -12                
Correct output: -71                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -45                 | Program output: 45                 
Correct output: -21                 | Program output: 26                 
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: 42                 
Correct output: -45                 | Program output: 98                 
Correct output: -30                 | Program output: 38                 
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: 79                 
Correct output: -44                 | Program output: 1                  
Correct output: -98                 | Program output: 1                  
Correct output: -40                 | Program output: -2                 
Correct output: -100                | Program output: 67                 
Correct output: -94                 | Program output: 34                 
Correct output: -79                 | Program output: 33                 
Correct output: -43                 | Program output: 81                 
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -3                 
Correct output: -77                 | Program output: -47                
Correct output: -96                 | Program output: 46                 
Correct output: 10                  | Program output: 20                 
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 96                 
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: 49                 
Correct output: -100                | Program output: 72                 
Correct output: -78                 | Program output: 56                 
Correct output: -29                 | Program output: 54                 
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -59                
Correct output: -63                 | Program output: -63                
Correct output: -69                 | Program output: 3                  
Correct output: -69                 | Program output: 93                 
Correct output: 24                  | Program output: 79                 
Correct output: -28                 | Program output: 14                 
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: 40                 
Correct output: -70                 | Program output: -20                
Correct output: -31                 | Program output: -29                
Correct output: -26                 | Program output: -14                
Correct output: -57                 | Program output: -1                 
Correct output: -97                 | Program output: -19                
Correct output: -95                 | Program output: -78                
Correct output: -77                 | Program output: -45                
Correct output: -48                 | Program output: -30                
Correct output: -50                 | Program output: -3                 
Correct output: -86                 | Program output: 39                 
Correct output: -46                 | Program output: 12                 
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -28                
Correct output: -66                 | Program output: -26                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 1, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in3} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min})
Lexicase best program: (boolean_shove print_integer exec_if (integer_max integer_pop integer_gt exec_if (exec_eq boolean_yankdup integer_empty exec_yank integer_dup) (boolean_pop boolean_swap integer_add integer_mod boolean_yankdup)) (integer_dup_items in1 print_integer) boolean_and boolean_shove boolean_yank boolean_xor integer_div exec_s (exec_flush exec_stackdepth boolean_frominteger boolean_or integer_yank boolean_invert_second_then_and integer_mod) (integer_lte integer_shove) (integer_rot exec_k () (exec_dup_times (integer_min integer_lt exec_when (exec_k (exec_dup () exec_when (exec_swap (exec_do*while (integer_yankdup exec_dup (exec_when (exec_do*times () boolean_eq boolean_dup_times) boolean_pop boolean_yankdup))) (exec_k_when_autoconstructing (boolean_flush exec_do*range () exec_s (exec_s_when_autoconstructing (exec_pop () print_integer exec_rot (exec_k_when_autoconstructing (exec_do*range (boolean_shove boolean_dup boolean_or) integer_empty boolean_eq) (exec_y (in4 integer_dup_times exec_while (exec_stackdepth) boolean_not integer_empty exec_y (exec_s (boolean_xor integer_min integer_max) (exec_stackdepth exec_s_when_autoconstructing (integer_empty boolean_flush exec_dup_times (boolean_not) integer_fromboolean) (integer_empty boolean_invert_second_then_and boolean_dup_times in3) (boolean_dup_times) boolean_and integer_min) ())))) () ()) () ()) () ()) ()))) ())))))
Lexicase best errors: [1 1 0 0 1 1 1 0 1 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 143
Percent parens: 0.336
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_max} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_yank} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mod} {:close 2, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 3, :instruction boolean_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_do*range} {:close 0, :instruction exec_s} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_while} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 1, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in3} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min})
Zero cases best program: (boolean_shove print_integer exec_if (integer_max integer_pop integer_gt exec_if (exec_eq boolean_yankdup integer_empty exec_yank integer_dup) (boolean_pop boolean_swap integer_add integer_mod boolean_yankdup)) (integer_dup_items in1 print_integer) boolean_and boolean_shove boolean_yank boolean_xor integer_div exec_s (exec_flush exec_stackdepth boolean_frominteger boolean_or integer_yank boolean_invert_second_then_and integer_mod) (integer_lte integer_shove) (integer_rot exec_k () (exec_dup_times (integer_min integer_lt exec_when (exec_k (exec_dup () exec_when (exec_swap (exec_do*while (integer_yankdup exec_dup (exec_when (exec_do*times () boolean_eq boolean_dup_times) boolean_pop boolean_yankdup))) (exec_k_when_autoconstructing (boolean_flush exec_do*range () exec_s (exec_s_when_autoconstructing (exec_pop () print_integer exec_rot (exec_k_when_autoconstructing (exec_do*range (boolean_shove boolean_dup boolean_or) integer_empty boolean_eq) (exec_y (in4 integer_dup_times exec_while (exec_stackdepth) boolean_not integer_empty exec_y (exec_s (boolean_xor integer_min integer_max) (exec_stackdepth exec_s_when_autoconstructing (integer_empty boolean_flush exec_dup_times (boolean_not) integer_fromboolean) (integer_empty boolean_invert_second_then_and boolean_dup_times in3) (boolean_dup_times) boolean_and integer_min) ())))) () ()) () ()) () ()) ()))) ())))))
Zero cases best errors: [1 1 0 0 1 1 1 0 1 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 143
Percent parens: 0.336
--- Lexicase Population Statistics ---
Count of elite individuals by case: (4 287 420 408 78 94 288 409 78 78)
Population mean number of elite cases: 2.14
Count of perfect (error zero) individuals by case: (4 287 420 408 78 94 288 409 78 78)
Population mean number of perfect (error zero) cases: 2.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_fromboolean})
Best program: (exec_s () (integer_max boolean_frominteger boolean_or boolean_xor boolean_invert_second_then_and in1 print_integer) (integer_gt boolean_pop integer_inc integer_fromboolean))
Errors: [1 1 0 0 1 1 1 0 1 1]
Total: 7
Mean: 0.7
Genome size: 12
Size: 16
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.856
Median total errors in population: 8
Error averages by case: (0.996 0.713 0.58 0.592 0.922 0.906 0.712 0.591 0.922 0.922)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.071
Average program size in population (points): 71.484
Average percent parens in population: 0.294
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.491
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 82
Genome diversity (% unique genomes):	 0.536
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 82
Syntactic diversity (% unique Push programs):	 0.532
Total error diversity:				 0.004
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 967720
--- Timings ---
Current time: 1559314620714 milliseconds
Total Time:           5.3 seconds
Initialization:       0.1 seconds,  2.0%
Reproduction:         2.4 seconds, 44.3%
Fitness Testing:      2.5 seconds, 47.5%
Report:               0.3 seconds,  6.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 92                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 38                 
Correct output: 17                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 46                 
Correct output: 16                  | Program output: 94                 
Correct output: 11                  | Program output: 11                 
Correct output: 25                  | Program output: 60                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 92                 
Correct output: 8                   | Program output: 83                 
Correct output: 6                   | Program output: 50                 
Correct output: 12                  | Program output: 56                 
Correct output: 1                   | Program output: 42                 
Correct output: 18                  | Program output: 97                 
Correct output: 26                  | Program output: 42                 
Correct output: 40                  | Program output: 56                 
Correct output: 28                  | Program output: 36                 
Correct output: 42                  | Program output: 58                 
Correct output: -41                 | Program output: 100                
Correct output: -83                 | Program output: -12                
Correct output: -71                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -45                 | Program output: 45                 
Correct output: -21                 | Program output: 26                 
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: 42                 
Correct output: -45                 | Program output: 98                 
Correct output: -30                 | Program output: 38                 
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: 79                 
Correct output: -44                 | Program output: 1                  
Correct output: -98                 | Program output: 1                  
Correct output: -40                 | Program output: -2                 
Correct output: -100                | Program output: 67                 
Correct output: -94                 | Program output: 34                 
Correct output: -79                 | Program output: 33                 
Correct output: -43                 | Program output: 81                 
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -3                 
Correct output: -77                 | Program output: -47                
Correct output: -96                 | Program output: 46                 
Correct output: 10                  | Program output: 20                 
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 96                 
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: 49                 
Correct output: -100                | Program output: 72                 
Correct output: -78                 | Program output: 56                 
Correct output: -29                 | Program output: 54                 
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -59                
Correct output: -63                 | Program output: -63                
Correct output: -69                 | Program output: 3                  
Correct output: -69                 | Program output: 93                 
Correct output: 24                  | Program output: 79                 
Correct output: -28                 | Program output: 14                 
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: 40                 
Correct output: -70                 | Program output: -20                
Correct output: -31                 | Program output: -29                
Correct output: -26                 | Program output: -14                
Correct output: -57                 | Program output: -1                 
Correct output: -97                 | Program output: -19                
Correct output: -95                 | Program output: -78                
Correct output: -77                 | Program output: -45                
Correct output: -48                 | Program output: -30                
Correct output: -50                 | Program output: -3                 
Correct output: -86                 | Program output: 39                 
Correct output: -46                 | Program output: 12                 
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -28                
Correct output: -66                 | Program output: -26                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_fromboolean})
Lexicase best program: (exec_s () (integer_max boolean_frominteger boolean_or boolean_xor boolean_invert_second_then_and in1 print_integer) (integer_gt boolean_pop integer_inc integer_fromboolean))
Lexicase best errors: [1 1 0 1 1 0 1 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 16
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_s} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_fromboolean})
Zero cases best program: (exec_s () (integer_max boolean_frominteger boolean_or boolean_xor boolean_invert_second_then_and in1 print_integer) (integer_gt boolean_pop integer_inc integer_fromboolean))
Zero cases best errors: [1 1 0 1 1 0 1 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 16
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (286 175 243 177 286 240 287 240 417 175)
Population mean number of elite cases: 2.53
Count of perfect (error zero) individuals by case: (286 175 243 177 286 240 287 240 417 175)
Population mean number of perfect (error zero) cases: 2.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_pop} {:close 0, :instruction integer_div} {:close 1, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction tagged_351} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_empty} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_when} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction print_exec} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush} {:close 0, :instruction in4} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 1, :instruction boolean_rot} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_gte})
Best program: (boolean_pop integer_div in1 print_integer integer_eq exec_s_when_autoconstructing (integer_shove in3 exec_k (boolean_stackdepth tagged_351 integer_max boolean_dup_items integer_mod exec_s (boolean_rot integer_rot boolean_xor boolean_empty) (boolean_yankdup) (exec_noop exec_swap (integer_rot integer_eq exec_dup_times (integer_pop) boolean_swap integer_gt exec_yank) (integer_dup_items integer_empty integer_dup_times boolean_dup integer_yank) boolean_stackdepth exec_do*count (integer_empty integer_div in3 integer_mod exec_noop in1 exec_stackdepth integer_mult) exec_dup (exec_flush integer_swap) integer_empty exec_empty integer_pop integer_gt exec_dup_times (integer_dup_times boolean_xor boolean_dup_times exec_if () (boolean_stackdepth exec_k_when_autoconstructing (boolean_dup boolean_yankdup) (exec_when (exec_noop) integer_lte integer_dup_times integer_gt exec_dup (boolean_dup) exec_flush exec_y_when_autoconstructing (in2 print_exec () integer_div boolean_eq) boolean_dup_times integer_lte integer_max boolean_flush in4 integer_yankdup integer_gt boolean_invert_second_then_and exec_y_when_autoconstructing (integer_pop boolean_rot) boolean_xor) integer_sub integer_gte)))) ()) () ())
Errors: [1 1 0 1 1 0 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 87
Size: 111
Percent parens: 0.216
--- Population Statistics ---
Average total errors in population: 7.474
Median total errors in population: 7
Error averages by case: (0.714 0.825 0.757 0.823 0.714 0.76 0.713 0.76 0.583 0.825)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.667
Average program size in population (points): 62.806
Average percent parens in population: 0.298
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.032
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 92
Genome diversity (% unique genomes):	 0.604
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 97
Syntactic diversity (% unique Push programs):	 0.598
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1598167
--- Timings ---
Current time: 1559314624085 milliseconds
Total Time:           8.5 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         4.4 seconds, 52.1%
Fitness Testing:      3.4 seconds, 39.7%
Report:               0.6 seconds,  6.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 673
Test mean error for best: 0.67300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 84                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 55                 
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 68                 
Correct output: 16                  | Program output: 54                 
Correct output: 11                  | Program output: 68                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 80                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 89                 
Correct output: 6                   | Program output: 51                 
Correct output: 12                  | Program output: 34                 
Correct output: 1                   | Program output: 93                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 48                 
Correct output: 28                  | Program output: 78                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: 75                 
Correct output: -88                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: 81                 
Correct output: -78                 | Program output: 19                 
Correct output: -45                 | Program output: 82                 
Correct output: -30                 | Program output: 3                  
Correct output: -91                 | Program output: 49                 
Correct output: -65                 | Program output: 26                 
Correct output: -99                 | Program output: 67                 
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: 9                  
Correct output: -94                 | Program output: 61                 
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: 41                 
Correct output: -76                 | Program output: 12                 
Correct output: -41                 | Program output: 62                 
Correct output: -77                 | Program output: 8                  
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: 48                 
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 84                 
Correct output: -22                 | Program output: 70                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 89                 
Correct output: -78                 | Program output: 4                  
Correct output: -29                 | Program output: 14                 
Correct output: -98                 | Program output: 88                 
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -72                
Correct output: -63                 | Program output: -34                
Correct output: -69                 | Program output: 48                 
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 89                 
Correct output: -28                 | Program output: 78                 
Correct output: -15                 | Program output: 63                 
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: 94                 
Correct output: -26                 | Program output: 33                 
Correct output: -57                 | Program output: 50                 
Correct output: -97                 | Program output: -93                
Correct output: -95                 | Program output: -73                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -32                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: 51                 
Correct output: -46                 | Program output: 42                 
Correct output: -86                 | Program output: 67                 
Correct output: -39                 | Program output: 13                 
Correct output: -58                 | Program output: 43                 
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -46                
Correct output: -65                 | Program output: 89                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_k} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 3, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty})
Lexicase best program: (integer_max boolean_pop integer_mod in4 integer_sub exec_k () (integer_eq) integer_shove exec_stackdepth integer_min boolean_or exec_s () () () print_integer integer_swap exec_s (integer_gte in3 boolean_dup_times integer_pop) (boolean_swap integer_gt exec_yank) (integer_dup_items integer_empty boolean_or boolean_dup integer_yank) boolean_stackdepth exec_do*count (integer_empty integer_div in3 integer_mod exec_noop in1 exec_stackdepth exec_s_when_autoconstructing () (exec_dup (exec_flush integer_swap) integer_empty exec_empty) ()))
Lexicase best errors: [0 0 0 1 1 1 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 56
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_k} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 3, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_noop} {:close 0, :instruction in1} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty})
Zero cases best program: (integer_max boolean_pop integer_mod in4 integer_sub exec_k () (integer_eq) integer_shove exec_stackdepth integer_min boolean_or exec_s () () () print_integer integer_swap exec_s (integer_gte in3 boolean_dup_times integer_pop) (boolean_swap integer_gt exec_yank) (integer_dup_items integer_empty boolean_or boolean_dup integer_yank) boolean_stackdepth exec_do*count (integer_empty integer_div in3 integer_mod exec_noop in1 exec_stackdepth exec_s_when_autoconstructing () (exec_dup (exec_flush integer_swap) integer_empty exec_empty) ()))
Zero cases best errors: [0 0 0 1 1 1 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 56
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (862 51 51 195 382 188 4 51 811 195)
Population mean number of elite cases: 2.79
Count of perfect (error zero) individuals by case: (862 51 51 195 382 188 4 51 811 195)
Population mean number of perfect (error zero) cases: 2.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_dup_times})
Best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (in3 print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop boolean_dup integer_rot) (exec_while () exec_k_when_autoconstructing (integer_inc boolean_or integer_empty exec_empty) (boolean_dup_times)))) ()) ()))
Errors: [0 1 1 0 0 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 29
Size: 46
Percent parens: 0.370
--- Population Statistics ---
Average total errors in population: 7.21
Median total errors in population: 8
Error averages by case: (0.138 0.949 0.949 0.805 0.618 0.812 0.996 0.949 0.189 0.805)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.306
Average program size in population (points): 66.195
Average percent parens in population: 0.289
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.748
Median age in population: 5.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 106
Genome diversity (% unique genomes):	 0.7
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 106
Syntactic diversity (% unique Push programs):	 0.695
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2179353
--- Timings ---
Current time: 1559314627494 milliseconds
Total Time:          12.1 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.9 seconds, 57.2%
Fitness Testing:      4.0 seconds, 33.0%
Report:               1.1 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: 17                 
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 70                 
Correct output: 5                   | Program output: 44                 
Correct output: 1                   | Program output: 14                 
Correct output: 17                  | Program output: 63                 
Correct output: 27                  | Program output: 50                 
Correct output: 11                  | Program output: 18                 
Correct output: 16                  | Program output: 46                 
Correct output: 11                  | Program output: 43                 
Correct output: 25                  | Program output: 73                 
Correct output: 13                  | Program output: 13                 
Correct output: 34                  | Program output: 35                 
Correct output: 8                   | Program output: 48                 
Correct output: 6                   | Program output: 49                 
Correct output: 12                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 19                 
Correct output: 26                  | Program output: 37                 
Correct output: 40                  | Program output: 45                 
Correct output: 28                  | Program output: 53                 
Correct output: 42                  | Program output: 58                 
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: 59                 
Correct output: -71                 | Program output: 40                 
Correct output: -88                 | Program output: 87                 
Correct output: -45                 | Program output: 1                  
Correct output: -21                 | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: -73                
Correct output: -45                 | Program output: 95                 
Correct output: -30                 | Program output: 72                 
Correct output: -91                 | Program output: -57                
Correct output: -65                 | Program output: 93                 
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: 85                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -39                
Correct output: -43                 | Program output: 90                 
Correct output: -76                 | Program output: -70                
Correct output: -41                 | Program output: 64                 
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -30                
Correct output: 10                  | Program output: 91                 
Correct output: -36                 | Program output: 92                 
Correct output: -85                 | Program output: 45                 
Correct output: -83                 | Program output: 11                 
Correct output: -22                 | Program output: 71                 
Correct output: -74                 | Program output: 14                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: 34                 
Correct output: -29                 | Program output: -25                
Correct output: -98                 | Program output: 7                  
Correct output: -99                 | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -6                 
Correct output: -69                 | Program output: -69                
Correct output: -69                 | Program output: -54                
Correct output: 24                  | Program output: 49                 
Correct output: -28                 | Program output: -28                
Correct output: -15                 | Program output: 59                 
Correct output: -43                 | Program output: -37                
Correct output: -70                 | Program output: -2                 
Correct output: -31                 | Program output: 84                 
Correct output: -26                 | Program output: -26                
Correct output: -57                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: 32                 
Correct output: -48                 | Program output: -48                
Correct output: -50                 | Program output: 47                 
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: -46                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: 80                 
Correct output: -58                 | Program output: -30                
Correct output: -84                 | Program output: 34                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_k} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 3, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction tagged_810} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction exec_if})
Lexicase best program: (integer_add boolean_pop exec_yank in4 integer_sub exec_k () (integer_eq) integer_shove boolean_pop integer_min integer_min boolean_or exec_s () () () print_integer integer_swap exec_s (integer_gte in3 exec_if (in1 tagged_810 exec_shove (exec_swap (boolean_yankdup boolean_frominteger boolean_and boolean_dup_items boolean_dup_times) (in4 exec_if () ()))) ()) () ())
Lexicase best errors: [1 0 0 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 46
Percent parens: 0.348
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_k} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 3, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_s} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction tagged_810} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction exec_if})
Zero cases best program: (integer_add boolean_pop exec_yank in4 integer_sub exec_k () (integer_eq) integer_shove boolean_pop integer_min integer_min boolean_or exec_s () () () print_integer integer_swap exec_s (integer_gte in3 exec_if (in1 tagged_810 exec_shove (exec_swap (boolean_yankdup boolean_frominteger boolean_and boolean_dup_items boolean_dup_times) (in4 exec_if () ()))) ()) () ())
Zero cases best errors: [1 0 0 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 46
Percent parens: 0.348
--- Lexicase Population Statistics ---
Count of elite individuals by case: (183 390 388 389 183 523 328 902 329 390)
Population mean number of elite cases: 4.01
Count of perfect (error zero) individuals by case: (183 390 388 389 183 523 328 902 329 390)
Population mean number of perfect (error zero) cases: 4.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_max} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction in4} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_k} {:close 1, :instruction integer_eq} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 3, :instruction exec_s} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction tagged_810} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction exec_if})
Best program: (integer_max boolean_pop integer_mod in4 integer_sub exec_k () (integer_eq) integer_shove boolean_xor integer_min boolean_or exec_s () () () print_integer integer_swap in3 integer_gte in3 exec_if (in1 tagged_810 exec_shove (exec_swap (boolean_yankdup boolean_frominteger boolean_and boolean_dup_items boolean_dup_times in4 exec_if () ()) ())) ())
Errors: [1 0 0 0 1 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 29
Size: 42
Percent parens: 0.310
--- Population Statistics ---
Average total errors in population: 5.995
Median total errors in population: 6
Error averages by case: (0.817 0.61 0.612 0.611 0.817 0.477 0.672 0.098 0.671 0.61)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.034
Average program size in population (points): 64.635
Average percent parens in population: 0.291
Minimum age in population: 4.0
Maximum age in population: 7.875
Average age in population: 6.442625
Median age in population: 6.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 69
Genome diversity (% unique genomes):	 0.646
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.634
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.076
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2624558
--- Timings ---
Current time: 1559314630557 milliseconds
Total Time:          15.2 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         9.2 seconds, 60.9%
Fitness Testing:      4.5 seconds, 29.4%
Report:               1.4 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 673
Test mean error for best: 0.67300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 84                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 55                 
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 68                 
Correct output: 16                  | Program output: 54                 
Correct output: 11                  | Program output: 68                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 80                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 89                 
Correct output: 6                   | Program output: 51                 
Correct output: 12                  | Program output: 34                 
Correct output: 1                   | Program output: 93                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 48                 
Correct output: 28                  | Program output: 78                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: 75                 
Correct output: -88                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: 81                 
Correct output: -78                 | Program output: 19                 
Correct output: -45                 | Program output: 82                 
Correct output: -30                 | Program output: 3                  
Correct output: -91                 | Program output: 49                 
Correct output: -65                 | Program output: 26                 
Correct output: -99                 | Program output: 67                 
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: 9                  
Correct output: -94                 | Program output: 61                 
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: 41                 
Correct output: -76                 | Program output: 12                 
Correct output: -41                 | Program output: 62                 
Correct output: -77                 | Program output: 8                  
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: 48                 
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 84                 
Correct output: -22                 | Program output: 70                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 89                 
Correct output: -78                 | Program output: 4                  
Correct output: -29                 | Program output: 14                 
Correct output: -98                 | Program output: 88                 
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -72                
Correct output: -63                 | Program output: -34                
Correct output: -69                 | Program output: 48                 
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 89                 
Correct output: -28                 | Program output: 78                 
Correct output: -15                 | Program output: 63                 
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: 94                 
Correct output: -26                 | Program output: 33                 
Correct output: -57                 | Program output: 50                 
Correct output: -97                 | Program output: -93                
Correct output: -95                 | Program output: -73                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -32                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: 51                 
Correct output: -46                 | Program output: 42                 
Correct output: -86                 | Program output: 67                 
Correct output: -39                 | Program output: 13                 
Correct output: -58                 | Program output: 43                 
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -46                
Correct output: -65                 | Program output: 89                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction print_exec} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tagged_17} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_701} {:close 0, :instruction exec_noop} {:close 0, :instruction print_newline} {:close 0, :instruction tagged_577} {:close 1, :instruction tag_exec_98} {:close 0, :instruction print_exec})
Lexicase best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (in3 print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop boolean_dup integer_rot) (exec_while () exec_k_when_autoconstructing (integer_inc boolean_or exec_rot (exec_empty) (integer_mod exec_dup_items integer_dup) (integer_gte boolean_not) exec_yank exec_dup () boolean_stackdepth) (exec_eq print_exec (exec_while (print_integer exec_swap (integer_fromboolean tagged_17 exec_yankdup) (boolean_eq) exec_shove (exec_eq integer_lt exec_s_when_autoconstructing (exec_y_when_autoconstructing (integer_add exec_stackdepth tagged_701 exec_noop print_newline tagged_577 tag_exec_98 () print_exec ())) () ()))))))) ()) ()))
Lexicase best errors: [0 0 1 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 90
Percent parens: 0.356
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_gte} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction print_exec} {:close 0, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction tagged_17} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_701} {:close 0, :instruction exec_noop} {:close 0, :instruction print_newline} {:close 0, :instruction tagged_577} {:close 1, :instruction tag_exec_98} {:close 0, :instruction print_exec})
Zero cases best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (in3 print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop boolean_dup integer_rot) (exec_while () exec_k_when_autoconstructing (integer_inc boolean_or exec_rot (exec_empty) (integer_mod exec_dup_items integer_dup) (integer_gte boolean_not) exec_yank exec_dup () boolean_stackdepth) (exec_eq print_exec (exec_while (print_integer exec_swap (integer_fromboolean tagged_17 exec_yankdup) (boolean_eq) exec_shove (exec_eq integer_lt exec_s_when_autoconstructing (exec_y_when_autoconstructing (integer_add exec_stackdepth tagged_701 exec_noop print_newline tagged_577 tag_exec_98 () print_exec ())) () ()))))))) ()) ()))
Zero cases best errors: [0 0 1 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 90
Percent parens: 0.356
--- Lexicase Population Statistics ---
Count of elite individuals by case: (394 153 214 153 153 892 1000 1000 153 160)
Population mean number of elite cases: 4.27
Count of perfect (error zero) individuals by case: (394 153 214 153 153 892 0 0 153 160)
Population mean number of perfect (error zero) cases: 2.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_div} {:close 0, :instruction exec_s} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction tag_boolean_224} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_mod} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_k} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_when} {:close 0, :instruction exec_k} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 1, :instruction exec_do*times} {:close 0, :instruction boolean_eq} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 3, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_do*range} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_eq} {:close 0, :instruction exec_y} {:close 0, :instruction in4} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_max} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_y} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_min} {:close 1, :instruction integer_max} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 1, :instruction boolean_not} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in3} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_min})
Best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (in3 print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop print_integer) (boolean_and boolean_shove boolean_yank boolean_xor integer_div exec_s (exec_flush exec_stackdepth boolean_frominteger integer_min tag_boolean_224 boolean_invert_second_then_and integer_mod) (integer_lte integer_shove) (integer_rot exec_k () (exec_dup_times (integer_min integer_lt exec_when (exec_k (exec_dup () exec_when (exec_swap (exec_do*while (integer_yankdup exec_dup (exec_when (exec_do*times () boolean_eq boolean_dup_times) boolean_pop boolean_invert_first_then_and))) (exec_k_when_autoconstructing (boolean_flush exec_do*range () boolean_dup exec_s_when_autoconstructing (exec_pop () print_integer exec_dup_times (exec_k_when_autoconstructing (exec_do*range (boolean_shove boolean_dup boolean_or) integer_empty boolean_eq) (exec_y (in4 integer_dup_times integer_max exec_stackdepth) boolean_not integer_empty exec_y (integer_rot boolean_xor integer_min integer_max) exec_stackdepth exec_s_when_autoconstructing (exec_dup (boolean_flush exec_dup_times (boolean_not) integer_fromboolean) integer_empty boolean_invert_second_then_and boolean_dup_times in3) (boolean_dup_times) (boolean_and integer_min)))) () ()) ()))) ()))))))) ()) ()))
Errors: [0 0 1 0 0 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 96
Size: 145
Percent parens: 0.338
--- Population Statistics ---
Average total errors in population: 7.728
Median total errors in population: 8
Error averages by case: (0.606 0.847 0.786 0.847 0.847 0.108 1.0 1.0 0.847 0.84)
Error minima by case: (0 0 0 0 0 0 1 1 0 0)
Average genome size in population (length): 47.446
Average program size in population (points): 66.978
Average percent parens in population: 0.289
Minimum age in population: 5.0
Maximum age in population: 9.75
Average age in population: 7.9390625
Median age in population: 8.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 85
Genome diversity (% unique genomes):	 0.668
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 88
Syntactic diversity (% unique Push programs):	 0.659
Total error diversity:				 0.004
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.079
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3022434
--- Timings ---
Current time: 1559314633428 milliseconds
Total Time:          18.0 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.4 seconds, 63.1%
Fitness Testing:      4.9 seconds, 27.2%
Report:               1.6 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: 17                 
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 70                 
Correct output: 5                   | Program output: 44                 
Correct output: 1                   | Program output: 14                 
Correct output: 17                  | Program output: 63                 
Correct output: 27                  | Program output: 50                 
Correct output: 11                  | Program output: 18                 
Correct output: 16                  | Program output: 46                 
Correct output: 11                  | Program output: 43                 
Correct output: 25                  | Program output: 73                 
Correct output: 13                  | Program output: 13                 
Correct output: 34                  | Program output: 35                 
Correct output: 8                   | Program output: 48                 
Correct output: 6                   | Program output: 49                 
Correct output: 12                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 19                 
Correct output: 26                  | Program output: 37                 
Correct output: 40                  | Program output: 45                 
Correct output: 28                  | Program output: 53                 
Correct output: 42                  | Program output: 58                 
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: 59                 
Correct output: -71                 | Program output: 40                 
Correct output: -88                 | Program output: 87                 
Correct output: -45                 | Program output: 1                  
Correct output: -21                 | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: -73                
Correct output: -45                 | Program output: 95                 
Correct output: -30                 | Program output: 72                 
Correct output: -91                 | Program output: -57                
Correct output: -65                 | Program output: 93                 
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: 85                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -39                
Correct output: -43                 | Program output: 90                 
Correct output: -76                 | Program output: -70                
Correct output: -41                 | Program output: 64                 
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -30                
Correct output: 10                  | Program output: 91                 
Correct output: -36                 | Program output: 92                 
Correct output: -85                 | Program output: 45                 
Correct output: -83                 | Program output: 11                 
Correct output: -22                 | Program output: 71                 
Correct output: -74                 | Program output: 14                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: 34                 
Correct output: -29                 | Program output: -25                
Correct output: -98                 | Program output: 7                  
Correct output: -99                 | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -6                 
Correct output: -69                 | Program output: -69                
Correct output: -69                 | Program output: -54                
Correct output: 24                  | Program output: 49                 
Correct output: -28                 | Program output: -28                
Correct output: -15                 | Program output: 59                 
Correct output: -43                 | Program output: -37                
Correct output: -70                 | Program output: -2                 
Correct output: -31                 | Program output: 84                 
Correct output: -26                 | Program output: -26                
Correct output: -57                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: 32                 
Correct output: -48                 | Program output: -48                
Correct output: -50                 | Program output: 47                 
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: -46                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: 80                 
Correct output: -58                 | Program output: -30                
Correct output: -84                 | Program output: 34                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction exec_if})
Lexicase best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop boolean_dup integer_rot) (exec_while () exec_k_when_autoconstructing (integer_inc boolean_or exec_rot (boolean_dup_items boolean_dup_times in4 exec_if () ()) () ()) ()))) ()) ())))
Lexicase best errors: [1 1 0 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 54
Percent parens: 0.426
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction exec_if})
Zero cases best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop boolean_dup integer_rot) (exec_while () exec_k_when_autoconstructing (integer_inc boolean_or exec_rot (boolean_dup_items boolean_dup_times in4 exec_if () ()) () ()) ()))) ()) ())))
Zero cases best errors: [1 1 0 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 54
Percent parens: 0.426
--- Lexicase Population Statistics ---
Count of elite individuals by case: (760 1000 878 2 2 1000 881 2 119 760)
Population mean number of elite cases: 5.40
Count of perfect (error zero) individuals by case: (760 0 878 2 2 0 881 2 119 760)
Population mean number of perfect (error zero) cases: 3.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction exec_if})
Best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop boolean_dup integer_rot) (exec_while () exec_k_when_autoconstructing (integer_inc boolean_or exec_rot (boolean_dup_items boolean_dup_times in4 exec_if () ()) () ()) ()))) ()) ())))
Errors: [1 1 0 0 0 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 31
Size: 54
Percent parens: 0.426
--- Population Statistics ---
Average total errors in population: 6.596
Median total errors in population: 6
Error averages by case: (0.24 1.0 0.122 0.998 0.998 1.0 0.119 0.998 0.881 0.24)
Error minima by case: (0 1 0 0 0 1 0 0 0 0)
Average genome size in population (length): 46.187
Average program size in population (points): 66.18
Average percent parens in population: 0.305
Minimum age in population: 6.0
Maximum age in population: 11.3125
Average age in population: 9.2615625
Median age in population: 9.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 30
Genome diversity (% unique genomes):	 0.667
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.665
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3326923
--- Timings ---
Current time: 1559314636380 milliseconds
Total Time:          20.9 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.6 seconds, 65.2%
Fitness Testing:      5.2 seconds, 25.0%
Report:               1.9 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: 17                 
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 70                 
Correct output: 5                   | Program output: 44                 
Correct output: 1                   | Program output: 14                 
Correct output: 17                  | Program output: 63                 
Correct output: 27                  | Program output: 50                 
Correct output: 11                  | Program output: 18                 
Correct output: 16                  | Program output: 46                 
Correct output: 11                  | Program output: 43                 
Correct output: 25                  | Program output: 73                 
Correct output: 13                  | Program output: 13                 
Correct output: 34                  | Program output: 35                 
Correct output: 8                   | Program output: 48                 
Correct output: 6                   | Program output: 49                 
Correct output: 12                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 19                 
Correct output: 26                  | Program output: 37                 
Correct output: 40                  | Program output: 45                 
Correct output: 28                  | Program output: 53                 
Correct output: 42                  | Program output: 58                 
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: 59                 
Correct output: -71                 | Program output: 40                 
Correct output: -88                 | Program output: 87                 
Correct output: -45                 | Program output: 1                  
Correct output: -21                 | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: -73                
Correct output: -45                 | Program output: 95                 
Correct output: -30                 | Program output: 72                 
Correct output: -91                 | Program output: -57                
Correct output: -65                 | Program output: 93                 
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: 85                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -39                
Correct output: -43                 | Program output: 90                 
Correct output: -76                 | Program output: -70                
Correct output: -41                 | Program output: 64                 
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -30                
Correct output: 10                  | Program output: 91                 
Correct output: -36                 | Program output: 92                 
Correct output: -85                 | Program output: 45                 
Correct output: -83                 | Program output: 11                 
Correct output: -22                 | Program output: 71                 
Correct output: -74                 | Program output: 14                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: 34                 
Correct output: -29                 | Program output: -25                
Correct output: -98                 | Program output: 7                  
Correct output: -99                 | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -6                 
Correct output: -69                 | Program output: -69                
Correct output: -69                 | Program output: -54                
Correct output: 24                  | Program output: 49                 
Correct output: -28                 | Program output: -28                
Correct output: -15                 | Program output: 59                 
Correct output: -43                 | Program output: -37                
Correct output: -70                 | Program output: -2                 
Correct output: -31                 | Program output: 84                 
Correct output: -26                 | Program output: -26                
Correct output: -57                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: 32                 
Correct output: -48                 | Program output: -48                
Correct output: -50                 | Program output: 47                 
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: -46                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: 80                 
Correct output: -58                 | Program output: -30                
Correct output: -84                 | Program output: 34                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction exec_if})
Lexicase best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop boolean_dup integer_rot) (exec_while () exec_k_when_autoconstructing (integer_inc boolean_or exec_rot (boolean_dup_items boolean_dup_times in4 exec_if () ()) () ()) ()))) ()) ())))
Lexicase best errors: [0 0 1 1 1 1 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 54
Percent parens: 0.426
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction exec_if})
Zero cases best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop boolean_dup integer_rot) (exec_while () exec_k_when_autoconstructing (integer_inc boolean_or exec_rot (boolean_dup_items boolean_dup_times in4 exec_if () ()) () ()) ()))) ()) ())))
Zero cases best errors: [0 0 1 1 1 1 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 54
Percent parens: 0.426
--- Lexicase Population Statistics ---
Count of elite individuals by case: (422 846 1 157 157 266 266 1 422 422)
Population mean number of elite cases: 2.96
Count of perfect (error zero) individuals by case: (422 846 1 157 157 266 266 1 422 422)
Population mean number of perfect (error zero) cases: 2.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4})
Best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop boolean_dup integer_rot) (exec_while () exec_k_when_autoconstructing (integer_inc boolean_or exec_rot (boolean_dup_items boolean_dup_times in4) () ()) ()))) ()) ())))
Errors: [0 0 1 1 1 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 30
Size: 51
Percent parens: 0.412
--- Population Statistics ---
Average total errors in population: 7.04
Median total errors in population: 7
Error averages by case: (0.578 0.154 0.999 0.843 0.843 0.734 0.734 0.999 0.578 0.578)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.074
Average program size in population (points): 56.528
Average percent parens in population: 0.364
Minimum age in population: 7.0
Maximum age in population: 12.515625
Average age in population: 10.93496875
Median age in population: 10.859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 318
Genome diversity (% unique genomes):	 0.585
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 319
Syntactic diversity (% unique Push programs):	 0.579
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3757815
--- Timings ---
Current time: 1559314638892 milliseconds
Total Time:          23.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        15.3 seconds, 65.3%
Fitness Testing:      5.7 seconds, 24.2%
Report:               2.3 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: 42                 
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 76                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 56                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 79                 
Correct output: 27                  | Program output: 48                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 58                 
Correct output: 25                  | Program output: 59                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 75                 
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 48                 
Correct output: 18                  | Program output: 87                 
Correct output: 26                  | Program output: 79                 
Correct output: 40                  | Program output: 40                 
Correct output: 28                  | Program output: 28                 
Correct output: 42                  | Program output: 88                 
Correct output: -41                 | Program output: 82                 
Correct output: -83                 | Program output: 52                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: 76                 
Correct output: -45                 | Program output: -7                 
Correct output: -21                 | Program output: 82                 
Correct output: -95                 | Program output: 75                 
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: 0                  
Correct output: -65                 | Program output: -39                
Correct output: -99                 | Program output: -58                
Correct output: -44                 | Program output: 54                 
Correct output: -98                 | Program output: -79                
Correct output: -40                 | Program output: 90                 
Correct output: -100                | Program output: 76                 
Correct output: -94                 | Program output: -83                
Correct output: -79                 | Program output: -17                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output: 58                 
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: 28                 
Correct output: -96                 | Program output: 33                 
Correct output: 10                  | Program output: 60                 
Correct output: -36                 | Program output: -9                 
Correct output: -85                 | Program output: 92                 
Correct output: -83                 | Program output: -2                 
Correct output: -22                 | Program output: 60                 
Correct output: -74                 | Program output: 50                 
Correct output: -100                | Program output: 70                 
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -70                
Correct output: -99                 | Program output: 93                 
Correct output: -80                 | Program output: -26                
Correct output: -63                 | Program output: 64                 
Correct output: -69                 | Program output: -62                
Correct output: -69                 | Program output: 92                 
Correct output: 24                  | Program output: 24                 
Correct output: -28                 | Program output: 59                 
Correct output: -15                 | Program output: 56                 
Correct output: -43                 | Program output: -36                
Correct output: -70                 | Program output: 31                 
Correct output: -31                 | Program output: -31                
Correct output: -26                 | Program output: -25                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: 56                 
Correct output: -95                 | Program output: 49                 
Correct output: -77                 | Program output: 43                 
Correct output: -48                 | Program output: 15                 
Correct output: -50                 | Program output: 38                 
Correct output: -86                 | Program output: -73                
Correct output: -46                 | Program output: -30                
Correct output: -86                 | Program output: 49                 
Correct output: -39                 | Program output: -15                
Correct output: -58                 | Program output: 42                 
Correct output: -84                 | Program output: 41                 
Correct output: -66                 | Program output: 68                 
Correct output: -65                 | Program output: 17                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 1, :instruction exec_if})
Lexicase best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop boolean_dup integer_rot) (exec_while () exec_k_when_autoconstructing (boolean_or boolean_or exec_rot (boolean_dup_items boolean_dup_times in2 exec_if () ()) () ()) ()))) ()) ())))
Lexicase best errors: [0 1 1 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 54
Percent parens: 0.426
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 1, :instruction exec_if})
Zero cases best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop boolean_dup integer_rot) (exec_while () exec_k_when_autoconstructing (boolean_or boolean_or exec_rot (boolean_dup_items boolean_dup_times in2 exec_if () ()) () ()) ()))) ()) ())))
Zero cases best errors: [0 1 1 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 54
Percent parens: 0.426
--- Lexicase Population Statistics ---
Count of elite individuals by case: (157 278 204 157 204 690 157 158 208 277)
Population mean number of elite cases: 2.49
Count of perfect (error zero) individuals by case: (157 278 204 157 204 690 157 158 208 277)
Population mean number of perfect (error zero) cases: 2.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 1, :instruction exec_if})
Best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop boolean_dup integer_rot) (exec_while () exec_k_when_autoconstructing (boolean_or boolean_or exec_rot (boolean_dup_items boolean_dup_times in2 exec_if () ()) () ()) ()))) ()) ())))
Errors: [0 1 1 0 1 1 0 0 1 1]
Total: 6
Mean: 0.6
Genome size: 31
Size: 54
Percent parens: 0.426
--- Population Statistics ---
Average total errors in population: 7.51
Median total errors in population: 7
Error averages by case: (0.843 0.722 0.796 0.843 0.796 0.31 0.843 0.842 0.792 0.723)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.39
Average program size in population (points): 54.398
Average percent parens in population: 0.366
Minimum age in population: 8.0
Maximum age in population: 14.0546875
Average age in population: 12.5183671875
Median age in population: 12.578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 166
Genome diversity (% unique genomes):	 0.608
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 167
Syntactic diversity (% unique Push programs):	 0.6
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 4203490
--- Timings ---
Current time: 1559314641956 milliseconds
Total Time:          26.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.5 seconds, 66.2%
Fitness Testing:      6.1 seconds, 23.1%
Report:               2.7 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 673
Test mean error for best: 0.67300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 84                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 55                 
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 68                 
Correct output: 16                  | Program output: 54                 
Correct output: 11                  | Program output: 68                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 80                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 89                 
Correct output: 6                   | Program output: 51                 
Correct output: 12                  | Program output: 34                 
Correct output: 1                   | Program output: 93                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 48                 
Correct output: 28                  | Program output: 78                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: 75                 
Correct output: -88                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: 81                 
Correct output: -78                 | Program output: 19                 
Correct output: -45                 | Program output: 82                 
Correct output: -30                 | Program output: 3                  
Correct output: -91                 | Program output: 49                 
Correct output: -65                 | Program output: 26                 
Correct output: -99                 | Program output: 67                 
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: 9                  
Correct output: -94                 | Program output: 61                 
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: 41                 
Correct output: -76                 | Program output: 12                 
Correct output: -41                 | Program output: 62                 
Correct output: -77                 | Program output: 8                  
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: 48                 
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 84                 
Correct output: -22                 | Program output: 70                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 89                 
Correct output: -78                 | Program output: 4                  
Correct output: -29                 | Program output: 14                 
Correct output: -98                 | Program output: 88                 
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -72                
Correct output: -63                 | Program output: -34                
Correct output: -69                 | Program output: 48                 
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 89                 
Correct output: -28                 | Program output: 78                 
Correct output: -15                 | Program output: 63                 
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: 94                 
Correct output: -26                 | Program output: 33                 
Correct output: -57                 | Program output: 50                 
Correct output: -97                 | Program output: -93                
Correct output: -95                 | Program output: -73                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -32                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: 51                 
Correct output: -46                 | Program output: 42                 
Correct output: -86                 | Program output: 67                 
Correct output: -39                 | Program output: 13                 
Correct output: -58                 | Program output: 43                 
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -46                
Correct output: -65                 | Program output: 89                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_417} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items})
Lexicase best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (in3 print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop boolean_dup integer_rot) (exec_while () exec_k_when_autoconstructing (integer_inc boolean_or exec_rot (integer_yankdup) (integer_mod exec_dup_items boolean_empty) (exec_empty exec_dup_items boolean_eq integer_div integer_yank boolean_or integer_dup_items) exec_stackdepth tagged_417 boolean_flush) (boolean_yank integer_dup_items)))) ()) ()))
Lexicase best errors: [0 1 1 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 63
Percent parens: 0.317
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_417} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items})
Zero cases best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (in3 print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop boolean_dup integer_rot) (exec_while () exec_k_when_autoconstructing (integer_inc boolean_or exec_rot (integer_yankdup) (integer_mod exec_dup_items boolean_empty) (exec_empty exec_dup_items boolean_eq integer_div integer_yank boolean_or integer_dup_items) exec_stackdepth tagged_417 boolean_flush) (boolean_yank integer_dup_items)))) ()) ()))
Zero cases best errors: [0 1 1 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 63
Percent parens: 0.317
--- Lexicase Population Statistics ---
Count of elite individuals by case: (315 350 195 206 862 108 108 206 195 108)
Population mean number of elite cases: 2.65
Count of perfect (error zero) individuals by case: (315 350 195 206 862 108 108 206 195 108)
Population mean number of perfect (error zero) cases: 2.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction exec_if} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_pop} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 2, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_417} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items})
Best program: (integer_rot boolean_shove in3 exec_k_when_autoconstructing (boolean_shove exec_k_when_autoconstructing (print_integer) (exec_do*range (exec_y_when_autoconstructing () integer_add integer_lte integer_fromboolean integer_max boolean_or integer_eq in1 exec_while (exec_if (exec_s_when_autoconstructing () (integer_lte integer_dup_items exec_if (boolean_stackdepth print_newline boolean_dup_times boolean_swap integer_stackdepth) (integer_min exec_pop (boolean_invert_second_then_and integer_dup_times integer_empty exec_pop (integer_empty)) boolean_pop integer_gt print_boolean boolean_yank boolean_dup boolean_not print_exec ()) exec_dup_items integer_pop integer_lte boolean_or boolean_invert_second_then_and) (print_newline exec_k (exec_empty exec_flush boolean_eq integer_div integer_yank boolean_or integer_dup_items) (exec_stackdepth tagged_417 boolean_flush boolean_yank integer_dup_items))) ())))) ())
Errors: [0 1 1 1 0 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 60
Size: 80
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.347
Median total errors in population: 7
Error averages by case: (0.685 0.65 0.805 0.794 0.138 0.892 0.892 0.794 0.805 0.892)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.394
Average program size in population (points): 52.267
Average percent parens in population: 0.374
Minimum age in population: 9.0
Maximum age in population: 15.671875
Average age in population: 14.07473046875
Median age in population: 14.0859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 196
Genome diversity (% unique genomes):	 0.584
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 201
Syntactic diversity (% unique Push programs):	 0.573
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4670346
--- Timings ---
Current time: 1559314645009 milliseconds
Total Time:          29.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        19.9 seconds, 67.0%
Fitness Testing:      6.6 seconds, 22.2%
Report:               3.1 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: 42                 
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 76                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 56                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 79                 
Correct output: 27                  | Program output: 48                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 58                 
Correct output: 25                  | Program output: 59                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 75                 
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 48                 
Correct output: 18                  | Program output: 87                 
Correct output: 26                  | Program output: 79                 
Correct output: 40                  | Program output: 40                 
Correct output: 28                  | Program output: 28                 
Correct output: 42                  | Program output: 88                 
Correct output: -41                 | Program output: 82                 
Correct output: -83                 | Program output: 52                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: 76                 
Correct output: -45                 | Program output: -7                 
Correct output: -21                 | Program output: 82                 
Correct output: -95                 | Program output: 75                 
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: 0                  
Correct output: -65                 | Program output: -39                
Correct output: -99                 | Program output: -58                
Correct output: -44                 | Program output: 54                 
Correct output: -98                 | Program output: -79                
Correct output: -40                 | Program output: 90                 
Correct output: -100                | Program output: 76                 
Correct output: -94                 | Program output: -83                
Correct output: -79                 | Program output: -17                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output: 58                 
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: 28                 
Correct output: -96                 | Program output: 33                 
Correct output: 10                  | Program output: 60                 
Correct output: -36                 | Program output: -9                 
Correct output: -85                 | Program output: 92                 
Correct output: -83                 | Program output: -2                 
Correct output: -22                 | Program output: 60                 
Correct output: -74                 | Program output: 50                 
Correct output: -100                | Program output: 70                 
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -70                
Correct output: -99                 | Program output: 93                 
Correct output: -80                 | Program output: -26                
Correct output: -63                 | Program output: 64                 
Correct output: -69                 | Program output: -62                
Correct output: -69                 | Program output: 92                 
Correct output: 24                  | Program output: 24                 
Correct output: -28                 | Program output: 59                 
Correct output: -15                 | Program output: 56                 
Correct output: -43                 | Program output: -36                
Correct output: -70                 | Program output: 31                 
Correct output: -31                 | Program output: -31                
Correct output: -26                 | Program output: -25                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: 56                 
Correct output: -95                 | Program output: 49                 
Correct output: -77                 | Program output: 43                 
Correct output: -48                 | Program output: 15                 
Correct output: -50                 | Program output: 38                 
Correct output: -86                 | Program output: -73                
Correct output: -46                 | Program output: -30                
Correct output: -86                 | Program output: 49                 
Correct output: -39                 | Program output: -15                
Correct output: -58                 | Program output: 42                 
Correct output: -84                 | Program output: 41                 
Correct output: -66                 | Program output: 68                 
Correct output: -65                 | Program output: 17                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 1, :instruction exec_if})
Lexicase best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop boolean_dup integer_rot exec_while () exec_k_when_autoconstructing (boolean_or boolean_or) (exec_rot (boolean_dup_items boolean_dup_times in2 exec_if () ()) () ())) ())) ()) ())))
Lexicase best errors: [0 1 1 0 1 1 0 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 54
Percent parens: 0.426
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 1, :instruction exec_if})
Zero cases best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop boolean_dup integer_rot exec_while () exec_k_when_autoconstructing (boolean_or boolean_or) (exec_rot (boolean_dup_items boolean_dup_times in2 exec_if () ()) () ())) ())) ()) ())))
Zero cases best errors: [0 1 1 0 1 1 0 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 54
Percent parens: 0.426
--- Lexicase Population Statistics ---
Count of elite individuals by case: (697 261 353 83 179 179 83 179 261 83)
Population mean number of elite cases: 2.36
Count of perfect (error zero) individuals by case: (697 261 353 83 179 179 83 179 261 83)
Population mean number of perfect (error zero) cases: 2.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 1, :instruction exec_if})
Best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_k_when_autoconstructing () (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop boolean_dup integer_rot) (exec_while () exec_k_when_autoconstructing (boolean_or boolean_or exec_rot (boolean_dup_items boolean_dup_times in2 exec_if () ()) () ()) ()))) ()) ()))) ())
Errors: [0 1 1 0 1 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 31
Size: 56
Percent parens: 0.446
--- Population Statistics ---
Average total errors in population: 7.642
Median total errors in population: 7
Error averages by case: (0.303 0.739 0.647 0.917 0.821 0.821 0.917 0.821 0.739 0.917)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.318
Average program size in population (points): 52.586
Average percent parens in population: 0.341
Minimum age in population: 10.0
Maximum age in population: 17.4453125
Average age in population: 15.43966796875
Median age in population: 15.53515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 55
Genome diversity (% unique genomes):	 0.658
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.644
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 5044839
--- Timings ---
Current time: 1559314648085 milliseconds
Total Time:          32.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.2 seconds, 68.1%
Fitness Testing:      7.0 seconds, 21.5%
Report:               3.3 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 673
Test mean error for best: 0.67300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 84                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 55                 
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 68                 
Correct output: 16                  | Program output: 54                 
Correct output: 11                  | Program output: 68                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 80                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 89                 
Correct output: 6                   | Program output: 51                 
Correct output: 12                  | Program output: 34                 
Correct output: 1                   | Program output: 93                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 48                 
Correct output: 28                  | Program output: 78                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: 75                 
Correct output: -88                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: 81                 
Correct output: -78                 | Program output: 19                 
Correct output: -45                 | Program output: 82                 
Correct output: -30                 | Program output: 3                  
Correct output: -91                 | Program output: 49                 
Correct output: -65                 | Program output: 26                 
Correct output: -99                 | Program output: 67                 
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: 9                  
Correct output: -94                 | Program output: 61                 
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: 41                 
Correct output: -76                 | Program output: 12                 
Correct output: -41                 | Program output: 62                 
Correct output: -77                 | Program output: 8                  
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: 48                 
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 84                 
Correct output: -22                 | Program output: 70                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 89                 
Correct output: -78                 | Program output: 4                  
Correct output: -29                 | Program output: 14                 
Correct output: -98                 | Program output: 88                 
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -72                
Correct output: -63                 | Program output: -34                
Correct output: -69                 | Program output: 48                 
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 89                 
Correct output: -28                 | Program output: 78                 
Correct output: -15                 | Program output: 63                 
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: 94                 
Correct output: -26                 | Program output: 33                 
Correct output: -57                 | Program output: 50                 
Correct output: -97                 | Program output: -93                
Correct output: -95                 | Program output: -73                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -32                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: 51                 
Correct output: -46                 | Program output: 42                 
Correct output: -86                 | Program output: 67                 
Correct output: -39                 | Program output: 13                 
Correct output: -58                 | Program output: 43                 
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -46                
Correct output: -65                 | Program output: 89                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction exec_if} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction exec_if})
Lexicase best program: (integer_rot boolean_shove in3 exec_k_when_autoconstructing (boolean_shove print_integer print_integer) (exec_do*range (exec_y_when_autoconstructing () integer_add integer_lte integer_fromboolean integer_max boolean_or in1 exec_while (exec_if (exec_s_when_autoconstructing () (integer_lte boolean_and exec_if (boolean_stackdepth integer_rot) (boolean_dup) exec_k_when_autoconstructing (integer_inc boolean_or exec_rot (boolean_dup_items boolean_dup_times in4 exec_if () ()) () ()) ()) ()) ()))))
Lexicase best errors: [0 0 0 1 1 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 52
Percent parens: 0.385
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction exec_if} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_rot} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction exec_if})
Zero cases best program: (integer_rot boolean_shove in3 exec_k_when_autoconstructing (boolean_shove print_integer print_integer) (exec_do*range (exec_y_when_autoconstructing () integer_add integer_lte integer_fromboolean integer_max boolean_or in1 exec_while (exec_if (exec_s_when_autoconstructing () (integer_lte boolean_and exec_if (boolean_stackdepth integer_rot) (boolean_dup) exec_k_when_autoconstructing (integer_inc boolean_or exec_rot (boolean_dup_items boolean_dup_times in4 exec_if () ()) () ()) ()) ()) ()))))
Zero cases best errors: [0 0 0 1 1 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 52
Percent parens: 0.385
--- Lexicase Population Statistics ---
Count of elite individuals by case: (107 546 107 291 206 107 837 287 231 206)
Population mean number of elite cases: 2.92
Count of perfect (error zero) individuals by case: (107 546 107 291 206 107 837 287 231 206)
Population mean number of perfect (error zero) cases: 2.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction exec_if} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction integer_min} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_div} {:close 2, :instruction integer_empty} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 2, :instruction print_exec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_newline} {:close 0, :instruction exec_k} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_dup_items} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_div} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_dup_items} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction tagged_417} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_dup_items})
Best program: (boolean_xor boolean_shove in3 exec_k_when_autoconstructing (boolean_shove print_integer print_integer) (exec_do*range (exec_y_when_autoconstructing () integer_add boolean_dup_times integer_fromboolean integer_max boolean_or integer_eq in1 exec_while (exec_if (exec_s_when_autoconstructing () (integer_lte boolean_and exec_if (boolean_stackdepth print_newline exec_if (boolean_swap integer_stackdepth) (integer_min) exec_dup () boolean_invert_second_then_and integer_dup_times integer_empty integer_div integer_empty) () boolean_pop integer_gt print_boolean boolean_yank boolean_dup boolean_not print_exec ()) (exec_dup_items integer_pop integer_lte boolean_or boolean_invert_second_then_and) print_newline exec_k (exec_empty exec_dup_items) (boolean_eq) integer_div exec_do*while (boolean_or integer_dup_items) exec_stackdepth tagged_417 boolean_flush) (boolean_yank integer_dup_items)))))
Errors: [0 0 0 1 1 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 60
Size: 80
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 7.075
Median total errors in population: 7
Error averages by case: (0.893 0.454 0.893 0.709 0.794 0.893 0.163 0.713 0.769 0.794)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.799
Average program size in population (points): 51.559
Average percent parens in population: 0.376
Minimum age in population: 14.08203125
Maximum age in population: 18.72265625
Average age in population: 16.9508349609375
Median age in population: 17.01123046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 98
Genome diversity (% unique genomes):	 0.641
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 105
Syntactic diversity (% unique Push programs):	 0.628
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 5501593
--- Timings ---
Current time: 1559314650996 milliseconds
Total Time:          35.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.4 seconds, 68.5%
Fitness Testing:      7.5 seconds, 21.0%
Report:               3.6 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: 42                 
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 76                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 56                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 79                 
Correct output: 27                  | Program output: 48                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 58                 
Correct output: 25                  | Program output: 59                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 75                 
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 48                 
Correct output: 18                  | Program output: 87                 
Correct output: 26                  | Program output: 79                 
Correct output: 40                  | Program output: 40                 
Correct output: 28                  | Program output: 28                 
Correct output: 42                  | Program output: 88                 
Correct output: -41                 | Program output: 82                 
Correct output: -83                 | Program output: 52                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: 76                 
Correct output: -45                 | Program output: -7                 
Correct output: -21                 | Program output: 82                 
Correct output: -95                 | Program output: 75                 
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: 0                  
Correct output: -65                 | Program output: -39                
Correct output: -99                 | Program output: -58                
Correct output: -44                 | Program output: 54                 
Correct output: -98                 | Program output: -79                
Correct output: -40                 | Program output: 90                 
Correct output: -100                | Program output: 76                 
Correct output: -94                 | Program output: -83                
Correct output: -79                 | Program output: -17                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output: 58                 
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: 28                 
Correct output: -96                 | Program output: 33                 
Correct output: 10                  | Program output: 60                 
Correct output: -36                 | Program output: -9                 
Correct output: -85                 | Program output: 92                 
Correct output: -83                 | Program output: -2                 
Correct output: -22                 | Program output: 60                 
Correct output: -74                 | Program output: 50                 
Correct output: -100                | Program output: 70                 
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -70                
Correct output: -99                 | Program output: 93                 
Correct output: -80                 | Program output: -26                
Correct output: -63                 | Program output: 64                 
Correct output: -69                 | Program output: -62                
Correct output: -69                 | Program output: 92                 
Correct output: 24                  | Program output: 24                 
Correct output: -28                 | Program output: 59                 
Correct output: -15                 | Program output: 56                 
Correct output: -43                 | Program output: -36                
Correct output: -70                 | Program output: 31                 
Correct output: -31                 | Program output: -31                
Correct output: -26                 | Program output: -25                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: 56                 
Correct output: -95                 | Program output: 49                 
Correct output: -77                 | Program output: 43                 
Correct output: -48                 | Program output: 15                 
Correct output: -50                 | Program output: 38                 
Correct output: -86                 | Program output: -73                
Correct output: -46                 | Program output: -30                
Correct output: -86                 | Program output: 49                 
Correct output: -39                 | Program output: -15                
Correct output: -58                 | Program output: 42                 
Correct output: -84                 | Program output: 41                 
Correct output: -66                 | Program output: 68                 
Correct output: -65                 | Program output: 17                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 1, :instruction exec_if})
Lexicase best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (boolean_swap tagged_478 exec_k_when_autoconstructing (integer_pop boolean_dup integer_rot) (exec_while () exec_k_when_autoconstructing (integer_inc in2 exec_if () ()) ())) ()) ())))
Lexicase best errors: [0 1 1 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 46
Percent parens: 0.413
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction in2} {:close 1, :instruction exec_if})
Zero cases best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (boolean_swap tagged_478 exec_k_when_autoconstructing (integer_pop boolean_dup integer_rot) (exec_while () exec_k_when_autoconstructing (integer_inc in2 exec_if () ()) ())) ()) ())))
Zero cases best errors: [0 1 1 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 46
Percent parens: 0.413
--- Lexicase Population Statistics ---
Count of elite individuals by case: (167 353 103 168 103 870 168 352 870 167)
Population mean number of elite cases: 3.32
Count of perfect (error zero) individuals by case: (167 353 103 168 103 870 168 352 870 167)
Population mean number of perfect (error zero) cases: 3.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction 87} {:close 0, :instruction integer_yank} {:close 0, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 1, :instruction integer_swap})
Best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer exec_if (exec_if (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop boolean_dup integer_rot) (exec_while () exec_k_when_autoconstructing (boolean_or boolean_or exec_rot (boolean_dup_items boolean_dup_times in2 integer_swap) () ()) ()))) ()) ()))))
Errors: [0 1 1 0 1 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 31
Size: 52
Percent parens: 0.404
--- Population Statistics ---
Average total errors in population: 6.679
Median total errors in population: 6
Error averages by case: (0.833 0.647 0.897 0.832 0.897 0.13 0.832 0.648 0.13 0.833)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.187
Average program size in population (points): 51.293
Average percent parens in population: 0.346
Minimum age in population: 15.08203125
Maximum age in population: 20.37451171875
Average age in population: 18.44119775390625
Median age in population: 18.523681640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 45
Genome diversity (% unique genomes):	 0.685
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.671
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5876685
--- Timings ---
Current time: 1559314654468 milliseconds
Total Time:          39.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        27.2 seconds, 69.7%
Fitness Testing:      7.9 seconds, 20.2%
Report:               3.8 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 673
Test mean error for best: 0.67300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 84                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 55                 
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 68                 
Correct output: 16                  | Program output: 54                 
Correct output: 11                  | Program output: 68                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 80                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 89                 
Correct output: 6                   | Program output: 51                 
Correct output: 12                  | Program output: 34                 
Correct output: 1                   | Program output: 93                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 48                 
Correct output: 28                  | Program output: 78                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: 75                 
Correct output: -88                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: 81                 
Correct output: -78                 | Program output: 19                 
Correct output: -45                 | Program output: 82                 
Correct output: -30                 | Program output: 3                  
Correct output: -91                 | Program output: 49                 
Correct output: -65                 | Program output: 26                 
Correct output: -99                 | Program output: 67                 
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: 9                  
Correct output: -94                 | Program output: 61                 
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: 41                 
Correct output: -76                 | Program output: 12                 
Correct output: -41                 | Program output: 62                 
Correct output: -77                 | Program output: 8                  
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: 48                 
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 84                 
Correct output: -22                 | Program output: 70                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 89                 
Correct output: -78                 | Program output: 4                  
Correct output: -29                 | Program output: 14                 
Correct output: -98                 | Program output: 88                 
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -72                
Correct output: -63                 | Program output: -34                
Correct output: -69                 | Program output: 48                 
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 89                 
Correct output: -28                 | Program output: 78                 
Correct output: -15                 | Program output: 63                 
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: 94                 
Correct output: -26                 | Program output: 33                 
Correct output: -57                 | Program output: 50                 
Correct output: -97                 | Program output: -93                
Correct output: -95                 | Program output: -73                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -32                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: 51                 
Correct output: -46                 | Program output: 42                 
Correct output: -86                 | Program output: 67                 
Correct output: -39                 | Program output: 13                 
Correct output: -58                 | Program output: 43                 
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -46                
Correct output: -65                 | Program output: 89                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction 74} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 1, :instruction exec_if})
Lexicase best program: (integer_rot boolean_shove in3 exec_k_when_autoconstructing (boolean_rot) (print_integer exec_if () (exec_do*range (exec_y_when_autoconstructing () exec_eq 74 print_boolean exec_y_when_autoconstructing (integer_eq) boolean_pop boolean_swap boolean_and) exec_do*times (exec_y (integer_sub exec_do*range (boolean_invert_second_then_and) boolean_dup_times boolean_dup_times in2 exec_if () ())))))
Lexicase best errors: [0 1 1 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 39
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction print_integer} {:close 1, :instruction exec_if} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_eq} {:close 0, :instruction 74} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_y} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 1, :instruction exec_if})
Zero cases best program: (integer_rot boolean_shove in3 exec_k_when_autoconstructing (boolean_rot) (print_integer exec_if () (exec_do*range (exec_y_when_autoconstructing () exec_eq 74 print_boolean exec_y_when_autoconstructing (integer_eq) boolean_pop boolean_swap boolean_and) exec_do*times (exec_y (integer_sub exec_do*range (boolean_invert_second_then_and) boolean_dup_times boolean_dup_times in2 exec_if () ())))))
Zero cases best errors: [0 1 1 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 39
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (237 417 418 238 237 238 3 190 190 847)
Population mean number of elite cases: 3.02
Count of perfect (error zero) individuals by case: (237 417 418 238 237 238 3 190 190 847)
Population mean number of perfect (error zero) cases: 3.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot})
Best program: (integer_rot boolean_shove in3 exec_k_when_autoconstructing (boolean_shove print_integer print_integer) (exec_do*range (exec_y_when_autoconstructing () integer_fromboolean integer_max boolean_or integer_eq in1 exec_shove (tagged_478 exec_k_when_autoconstructing (integer_add boolean_dup integer_rot) (exec_while () exec_k_when_autoconstructing (boolean_or boolean_or exec_rot (boolean_dup_items integer_rot) (exec_while () exec_k_when_autoconstructing (integer_inc boolean_or exec_rot () () ()) ()) ()) ())))))
Errors: [0 1 1 0 0 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 32
Size: 52
Percent parens: 0.385
--- Population Statistics ---
Average total errors in population: 6.985
Median total errors in population: 7
Error averages by case: (0.763 0.583 0.582 0.762 0.763 0.762 0.997 0.81 0.81 0.153)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.239
Average program size in population (points): 53.614
Average percent parens in population: 0.398
Minimum age in population: 16.08203125
Maximum age in population: 22.010986328125
Average age in population: 19.93382250976562
Median age in population: 20.001708984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 86
Genome diversity (% unique genomes):	 0.635
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.617
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 6328380
--- Timings ---
Current time: 1559314657571 milliseconds
Total Time:          42.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        29.5 seconds, 70.0%
Fitness Testing:      8.3 seconds, 19.7%
Report:               4.2 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: 17                 
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 70                 
Correct output: 5                   | Program output: 44                 
Correct output: 1                   | Program output: 14                 
Correct output: 17                  | Program output: 63                 
Correct output: 27                  | Program output: 50                 
Correct output: 11                  | Program output: 18                 
Correct output: 16                  | Program output: 46                 
Correct output: 11                  | Program output: 43                 
Correct output: 25                  | Program output: 73                 
Correct output: 13                  | Program output: 13                 
Correct output: 34                  | Program output: 35                 
Correct output: 8                   | Program output: 48                 
Correct output: 6                   | Program output: 49                 
Correct output: 12                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 19                 
Correct output: 26                  | Program output: 37                 
Correct output: 40                  | Program output: 45                 
Correct output: 28                  | Program output: 53                 
Correct output: 42                  | Program output: 58                 
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: 59                 
Correct output: -71                 | Program output: 40                 
Correct output: -88                 | Program output: 87                 
Correct output: -45                 | Program output: 1                  
Correct output: -21                 | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: -73                
Correct output: -45                 | Program output: 95                 
Correct output: -30                 | Program output: 72                 
Correct output: -91                 | Program output: -57                
Correct output: -65                 | Program output: 93                 
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: 85                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -39                
Correct output: -43                 | Program output: 90                 
Correct output: -76                 | Program output: -70                
Correct output: -41                 | Program output: 64                 
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -30                
Correct output: 10                  | Program output: 91                 
Correct output: -36                 | Program output: 92                 
Correct output: -85                 | Program output: 45                 
Correct output: -83                 | Program output: 11                 
Correct output: -22                 | Program output: 71                 
Correct output: -74                 | Program output: 14                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: 34                 
Correct output: -29                 | Program output: -25                
Correct output: -98                 | Program output: 7                  
Correct output: -99                 | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -6                 
Correct output: -69                 | Program output: -69                
Correct output: -69                 | Program output: -54                
Correct output: 24                  | Program output: 49                 
Correct output: -28                 | Program output: -28                
Correct output: -15                 | Program output: 59                 
Correct output: -43                 | Program output: -37                
Correct output: -70                 | Program output: -2                 
Correct output: -31                 | Program output: 84                 
Correct output: -26                 | Program output: -26                
Correct output: -57                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: 32                 
Correct output: -48                 | Program output: -48                
Correct output: -50                 | Program output: 47                 
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: -46                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: 80                 
Correct output: -58                 | Program output: -30                
Correct output: -84                 | Program output: 34                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction exec_if})
Lexicase best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop boolean_dup integer_rot) (exec_while () exec_k_when_autoconstructing (boolean_swap boolean_or exec_rot (boolean_dup_items boolean_dup_times in2 boolean_frominteger boolean_and boolean_dup_items boolean_dup_times in4 exec_if () ()) () ()) ()))) ()) ())))
Lexicase best errors: [0 1 1 0 1 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 59
Percent parens: 0.390
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction exec_if})
Zero cases best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop boolean_dup integer_rot) (exec_while () exec_k_when_autoconstructing (boolean_swap boolean_or exec_rot (boolean_dup_items boolean_dup_times in2 boolean_frominteger boolean_and boolean_dup_items boolean_dup_times in4 exec_if () ()) () ()) ()))) ()) ())))
Zero cases best errors: [0 1 1 0 1 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 59
Percent parens: 0.390
--- Lexicase Population Statistics ---
Count of elite individuals by case: (195 177 384 195 176 271 197 195 95 195)
Population mean number of elite cases: 2.08
Count of perfect (error zero) individuals by case: (195 177 384 195 176 271 197 195 95 195)
Population mean number of perfect (error zero) cases: 2.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction exec_if})
Best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (integer_swap exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop boolean_dup integer_rot) (exec_while () exec_k_when_autoconstructing (integer_inc boolean_or exec_rot (boolean_dup_items boolean_dup_times in4 exec_if () ()) () ()) ()))) ()) ())))
Errors: [0 1 1 0 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 31
Size: 54
Percent parens: 0.426
--- Population Statistics ---
Average total errors in population: 7.92
Median total errors in population: 9
Error averages by case: (0.805 0.823 0.616 0.805 0.824 0.729 0.803 0.805 0.905 0.805)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.648
Average program size in population (points): 52.886
Average percent parens in population: 0.382
Minimum age in population: 18.46484375
Maximum age in population: 23.365234375
Average age in population: 21.36666882324219
Median age in population: 21.43280029296875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 31
Genome diversity (% unique genomes):	 0.676
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.663
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 6725557
--- Timings ---
Current time: 1559314660630 milliseconds
Total Time:          45.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.8 seconds, 70.5%
Fitness Testing:      8.7 seconds, 19.3%
Report:               4.5 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: 42                 
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 76                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 56                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 79                 
Correct output: 27                  | Program output: 48                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 58                 
Correct output: 25                  | Program output: 59                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 75                 
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 48                 
Correct output: 18                  | Program output: 87                 
Correct output: 26                  | Program output: 79                 
Correct output: 40                  | Program output: 40                 
Correct output: 28                  | Program output: 28                 
Correct output: 42                  | Program output: 88                 
Correct output: -41                 | Program output: 82                 
Correct output: -83                 | Program output: 52                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: 76                 
Correct output: -45                 | Program output: -7                 
Correct output: -21                 | Program output: 82                 
Correct output: -95                 | Program output: 75                 
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: 0                  
Correct output: -65                 | Program output: -39                
Correct output: -99                 | Program output: -58                
Correct output: -44                 | Program output: 54                 
Correct output: -98                 | Program output: -79                
Correct output: -40                 | Program output: 90                 
Correct output: -100                | Program output: 76                 
Correct output: -94                 | Program output: -83                
Correct output: -79                 | Program output: -17                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output: 58                 
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: 28                 
Correct output: -96                 | Program output: 33                 
Correct output: 10                  | Program output: 60                 
Correct output: -36                 | Program output: -9                 
Correct output: -85                 | Program output: 92                 
Correct output: -83                 | Program output: -2                 
Correct output: -22                 | Program output: 60                 
Correct output: -74                 | Program output: 50                 
Correct output: -100                | Program output: 70                 
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -70                
Correct output: -99                 | Program output: 93                 
Correct output: -80                 | Program output: -26                
Correct output: -63                 | Program output: 64                 
Correct output: -69                 | Program output: -62                
Correct output: -69                 | Program output: 92                 
Correct output: 24                  | Program output: 24                 
Correct output: -28                 | Program output: 59                 
Correct output: -15                 | Program output: 56                 
Correct output: -43                 | Program output: -36                
Correct output: -70                 | Program output: 31                 
Correct output: -31                 | Program output: -31                
Correct output: -26                 | Program output: -25                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: 56                 
Correct output: -95                 | Program output: 49                 
Correct output: -77                 | Program output: 43                 
Correct output: -48                 | Program output: 15                 
Correct output: -50                 | Program output: 38                 
Correct output: -86                 | Program output: -73                
Correct output: -46                 | Program output: -30                
Correct output: -86                 | Program output: 49                 
Correct output: -39                 | Program output: -15                
Correct output: -58                 | Program output: 42                 
Correct output: -84                 | Program output: 41                 
Correct output: -66                 | Program output: 68                 
Correct output: -65                 | Program output: 17                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tagged_951} {:close 0, :instruction in2} {:close 1, :instruction exec_if})
Lexicase best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop boolean_dup integer_rot) (exec_while () exec_k_when_autoconstructing (boolean_or boolean_or exec_rot (boolean_dup_items tagged_951 in2 exec_if () ()) () ()) ()))) ()) ())))
Lexicase best errors: [1 1 1 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 54
Percent parens: 0.426
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction tagged_951} {:close 0, :instruction in2} {:close 1, :instruction exec_if})
Zero cases best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop boolean_dup integer_rot) (exec_while () exec_k_when_autoconstructing (boolean_or boolean_or exec_rot (boolean_dup_items tagged_951 in2 exec_if () ()) () ()) ()))) ()) ())))
Zero cases best errors: [1 1 1 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 54
Percent parens: 0.426
--- Lexicase Population Statistics ---
Count of elite individuals by case: (129 94 129 213 93 342 396 129 213 213)
Population mean number of elite cases: 1.95
Count of perfect (error zero) individuals by case: (129 94 129 213 93 342 396 129 213 213)
Population mean number of perfect (error zero) cases: 1.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 1, :instruction exec_if})
Best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop boolean_dup integer_rot) (exec_while () exec_k_when_autoconstructing (boolean_or boolean_or exec_rot (boolean_dup_items boolean_dup_times in2 exec_if () ()) () ()) ()))) ()) ())))
Errors: [1 1 1 0 1 0 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 31
Size: 54
Percent parens: 0.426
--- Population Statistics ---
Average total errors in population: 8.049
Median total errors in population: 9
Error averages by case: (0.871 0.906 0.871 0.787 0.907 0.658 0.604 0.871 0.787 0.787)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.383
Average program size in population (points): 53.022
Average percent parens in population: 0.407
Minimum age in population: 19.46484375
Maximum age in population: 24.9364013671875
Average age in population: 22.89732403564453
Median age in population: 22.93634033203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 28
Genome diversity (% unique genomes):	 0.679
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.66
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 7193013
--- Timings ---
Current time: 1559314663798 milliseconds
Total Time:          48.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.1 seconds, 70.7%
Fitness Testing:      9.2 seconds, 19.0%
Report:               4.9 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: 42                 
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 76                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 56                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 79                 
Correct output: 27                  | Program output: 48                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 58                 
Correct output: 25                  | Program output: 59                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 75                 
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 48                 
Correct output: 18                  | Program output: 87                 
Correct output: 26                  | Program output: 79                 
Correct output: 40                  | Program output: 40                 
Correct output: 28                  | Program output: 28                 
Correct output: 42                  | Program output: 88                 
Correct output: -41                 | Program output: 82                 
Correct output: -83                 | Program output: 52                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: 76                 
Correct output: -45                 | Program output: -7                 
Correct output: -21                 | Program output: 82                 
Correct output: -95                 | Program output: 75                 
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: 0                  
Correct output: -65                 | Program output: -39                
Correct output: -99                 | Program output: -58                
Correct output: -44                 | Program output: 54                 
Correct output: -98                 | Program output: -79                
Correct output: -40                 | Program output: 90                 
Correct output: -100                | Program output: 76                 
Correct output: -94                 | Program output: -83                
Correct output: -79                 | Program output: -17                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output: 58                 
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: 28                 
Correct output: -96                 | Program output: 33                 
Correct output: 10                  | Program output: 60                 
Correct output: -36                 | Program output: -9                 
Correct output: -85                 | Program output: 92                 
Correct output: -83                 | Program output: -2                 
Correct output: -22                 | Program output: 60                 
Correct output: -74                 | Program output: 50                 
Correct output: -100                | Program output: 70                 
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -70                
Correct output: -99                 | Program output: 93                 
Correct output: -80                 | Program output: -26                
Correct output: -63                 | Program output: 64                 
Correct output: -69                 | Program output: -62                
Correct output: -69                 | Program output: 92                 
Correct output: 24                  | Program output: 24                 
Correct output: -28                 | Program output: 59                 
Correct output: -15                 | Program output: 56                 
Correct output: -43                 | Program output: -36                
Correct output: -70                 | Program output: 31                 
Correct output: -31                 | Program output: -31                
Correct output: -26                 | Program output: -25                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: 56                 
Correct output: -95                 | Program output: 49                 
Correct output: -77                 | Program output: 43                 
Correct output: -48                 | Program output: 15                 
Correct output: -50                 | Program output: 38                 
Correct output: -86                 | Program output: -73                
Correct output: -46                 | Program output: -30                
Correct output: -86                 | Program output: 49                 
Correct output: -39                 | Program output: -15                
Correct output: -58                 | Program output: 42                 
Correct output: -84                 | Program output: 41                 
Correct output: -66                 | Program output: 68                 
Correct output: -65                 | Program output: 17                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 1, :instruction exec_if})
Lexicase best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop) (boolean_dup integer_rot) exec_while () exec_k_when_autoconstructing (boolean_or boolean_or exec_rot (boolean_dup_items boolean_dup_times in2 exec_if () ()) () ()) ())) ()) ())))
Lexicase best errors: [0 0 1 0 1 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 54
Percent parens: 0.426
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 1, :instruction exec_if})
Zero cases best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop) (boolean_dup integer_rot) exec_while () exec_k_when_autoconstructing (boolean_or boolean_or exec_rot (boolean_dup_items boolean_dup_times in2 exec_if () ()) () ()) ())) ()) ())))
Zero cases best errors: [0 0 1 0 1 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 54
Percent parens: 0.426
--- Lexicase Population Statistics ---
Count of elite individuals by case: (866 275 86 275 202 86 275 202 86 275)
Population mean number of elite cases: 2.63
Count of perfect (error zero) individuals by case: (866 275 86 275 202 86 275 202 86 275)
Population mean number of perfect (error zero) cases: 2.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 1, :instruction exec_if})
Best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_dup_items exec_if (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop) (boolean_dup integer_rot) exec_while () exec_k_when_autoconstructing (boolean_or boolean_or exec_rot (boolean_dup_items boolean_dup_times in2 exec_if () ()) () ()) ())) ())))
Errors: [0 0 1 0 1 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 31
Size: 52
Percent parens: 0.404
--- Population Statistics ---
Average total errors in population: 7.372
Median total errors in population: 7
Error averages by case: (0.134 0.725 0.914 0.725 0.798 0.914 0.725 0.798 0.914 0.725)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.263
Average program size in population (points): 51.518
Average percent parens in population: 0.390
Minimum age in population: 20.853515625
Maximum age in population: 26.30734252929688
Average age in population: 24.36916259765625
Median age in population: 24.4501953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 52
Genome diversity (% unique genomes):	 0.663
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.648
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 7574710
--- Timings ---
Current time: 1559314666867 milliseconds
Total Time:          51.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.4 seconds, 70.9%
Fitness Testing:      9.6 seconds, 18.6%
Report:               5.3 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: 42                 
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 76                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 56                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 79                 
Correct output: 27                  | Program output: 48                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 58                 
Correct output: 25                  | Program output: 59                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 75                 
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 48                 
Correct output: 18                  | Program output: 87                 
Correct output: 26                  | Program output: 79                 
Correct output: 40                  | Program output: 40                 
Correct output: 28                  | Program output: 28                 
Correct output: 42                  | Program output: 88                 
Correct output: -41                 | Program output: 82                 
Correct output: -83                 | Program output: 52                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: 76                 
Correct output: -45                 | Program output: -7                 
Correct output: -21                 | Program output: 82                 
Correct output: -95                 | Program output: 75                 
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: 0                  
Correct output: -65                 | Program output: -39                
Correct output: -99                 | Program output: -58                
Correct output: -44                 | Program output: 54                 
Correct output: -98                 | Program output: -79                
Correct output: -40                 | Program output: 90                 
Correct output: -100                | Program output: 76                 
Correct output: -94                 | Program output: -83                
Correct output: -79                 | Program output: -17                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output: 58                 
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: 28                 
Correct output: -96                 | Program output: 33                 
Correct output: 10                  | Program output: 60                 
Correct output: -36                 | Program output: -9                 
Correct output: -85                 | Program output: 92                 
Correct output: -83                 | Program output: -2                 
Correct output: -22                 | Program output: 60                 
Correct output: -74                 | Program output: 50                 
Correct output: -100                | Program output: 70                 
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -70                
Correct output: -99                 | Program output: 93                 
Correct output: -80                 | Program output: -26                
Correct output: -63                 | Program output: 64                 
Correct output: -69                 | Program output: -62                
Correct output: -69                 | Program output: 92                 
Correct output: 24                  | Program output: 24                 
Correct output: -28                 | Program output: 59                 
Correct output: -15                 | Program output: 56                 
Correct output: -43                 | Program output: -36                
Correct output: -70                 | Program output: 31                 
Correct output: -31                 | Program output: -31                
Correct output: -26                 | Program output: -25                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: 56                 
Correct output: -95                 | Program output: 49                 
Correct output: -77                 | Program output: 43                 
Correct output: -48                 | Program output: 15                 
Correct output: -50                 | Program output: 38                 
Correct output: -86                 | Program output: -73                
Correct output: -46                 | Program output: -30                
Correct output: -86                 | Program output: 49                 
Correct output: -39                 | Program output: -15                
Correct output: -58                 | Program output: 42                 
Correct output: -84                 | Program output: 41                 
Correct output: -66                 | Program output: 68                 
Correct output: -65                 | Program output: 17                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_dup_items} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 3, :instruction in2})
Lexicase best program: (87 integer_dup_items tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer exec_if () (exec_if (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop) (boolean_dup integer_rot) exec_while () exec_k_when_autoconstructing (boolean_or boolean_or exec_rot (boolean_dup_items integer_eq in2 in2) () ()) ())) ())))))
Lexicase best errors: [1 0 1 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 52
Percent parens: 0.404
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_dup_items} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 1, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction in2} {:close 3, :instruction in2})
Zero cases best program: (87 integer_dup_items tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer exec_if () (exec_if (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop) (boolean_dup integer_rot) exec_while () exec_k_when_autoconstructing (boolean_or boolean_or exec_rot (boolean_dup_items integer_eq in2 in2) () ()) ())) ())))))
Zero cases best errors: [1 0 1 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 52
Percent parens: 0.404
--- Lexicase Population Statistics ---
Count of elite individuals by case: (447 865 246 199 3 415 245 415 3 417)
Population mean number of elite cases: 3.26
Count of perfect (error zero) individuals by case: (447 865 246 199 3 415 245 415 3 417)
Population mean number of perfect (error zero) cases: 3.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction 87} {:close 1, :instruction exec_dup} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 1, :instruction exec_if})
Best program: (87 exec_dup () tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (exec_shove (tagged_478 exec_k_when_autoconstructing (exec_k_when_autoconstructing (boolean_or boolean_or exec_rot (boolean_dup_items in4 in2 exec_if () ()) () ()) ()) ())) ()) ())))
Errors: [1 0 1 1 1 0 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 27
Size: 50
Percent parens: 0.460
--- Population Statistics ---
Average total errors in population: 6.745
Median total errors in population: 6
Error averages by case: (0.553 0.135 0.754 0.801 0.997 0.585 0.755 0.585 0.997 0.583)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.148
Average program size in population (points): 52.244
Average percent parens in population: 0.402
Minimum age in population: 21.853515625
Maximum age in population: 27.92584228515625
Average age in population: 25.89571118164062
Median age in population: 25.97841644287109
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 19
Genome diversity (% unique genomes):	 0.668
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.655
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 8046287
--- Timings ---
Current time: 1559314670001 milliseconds
Total Time:          54.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        38.7 seconds, 71.1%
Fitness Testing:     10.0 seconds, 18.4%
Report:               5.6 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: 17                 
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 70                 
Correct output: 5                   | Program output: 44                 
Correct output: 1                   | Program output: 14                 
Correct output: 17                  | Program output: 63                 
Correct output: 27                  | Program output: 50                 
Correct output: 11                  | Program output: 18                 
Correct output: 16                  | Program output: 46                 
Correct output: 11                  | Program output: 43                 
Correct output: 25                  | Program output: 73                 
Correct output: 13                  | Program output: 13                 
Correct output: 34                  | Program output: 35                 
Correct output: 8                   | Program output: 48                 
Correct output: 6                   | Program output: 49                 
Correct output: 12                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 19                 
Correct output: 26                  | Program output: 37                 
Correct output: 40                  | Program output: 45                 
Correct output: 28                  | Program output: 53                 
Correct output: 42                  | Program output: 58                 
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: 59                 
Correct output: -71                 | Program output: 40                 
Correct output: -88                 | Program output: 87                 
Correct output: -45                 | Program output: 1                  
Correct output: -21                 | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: -73                
Correct output: -45                 | Program output: 95                 
Correct output: -30                 | Program output: 72                 
Correct output: -91                 | Program output: -57                
Correct output: -65                 | Program output: 93                 
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: 85                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -39                
Correct output: -43                 | Program output: 90                 
Correct output: -76                 | Program output: -70                
Correct output: -41                 | Program output: 64                 
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -30                
Correct output: 10                  | Program output: 91                 
Correct output: -36                 | Program output: 92                 
Correct output: -85                 | Program output: 45                 
Correct output: -83                 | Program output: 11                 
Correct output: -22                 | Program output: 71                 
Correct output: -74                 | Program output: 14                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: 34                 
Correct output: -29                 | Program output: -25                
Correct output: -98                 | Program output: 7                  
Correct output: -99                 | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -6                 
Correct output: -69                 | Program output: -69                
Correct output: -69                 | Program output: -54                
Correct output: 24                  | Program output: 49                 
Correct output: -28                 | Program output: -28                
Correct output: -15                 | Program output: 59                 
Correct output: -43                 | Program output: -37                
Correct output: -70                 | Program output: -2                 
Correct output: -31                 | Program output: 84                 
Correct output: -26                 | Program output: -26                
Correct output: -57                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: 32                 
Correct output: -48                 | Program output: -48                
Correct output: -50                 | Program output: 47                 
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: -46                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: 80                 
Correct output: -58                 | Program output: -30                
Correct output: -84                 | Program output: 34                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction 87} {:close 1, :instruction exec_while} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction exec_if})
Lexicase best program: (87 exec_while () tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop boolean_dup integer_rot) (exec_while () exec_k_when_autoconstructing (integer_inc boolean_or exec_rot (boolean_dup_items boolean_dup_times in4 exec_if () ()) () ()) ()))) ()) ())))
Lexicase best errors: [1 1 0 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 55
Percent parens: 0.436
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction 87} {:close 1, :instruction exec_while} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction exec_if})
Zero cases best program: (87 exec_while () tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop boolean_dup integer_rot) (exec_while () exec_k_when_autoconstructing (integer_inc boolean_or exec_rot (boolean_dup_items boolean_dup_times in4 exec_if () ()) () ()) ()))) ()) ())))
Zero cases best errors: [1 1 0 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 55
Percent parens: 0.436
--- Lexicase Population Statistics ---
Count of elite individuals by case: (136 278 208 207 851 136 208 229 277 851)
Population mean number of elite cases: 3.38
Count of perfect (error zero) individuals by case: (136 278 208 207 851 136 208 229 277 851)
Population mean number of perfect (error zero) cases: 3.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction exec_if})
Best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop boolean_dup integer_rot) (exec_while () boolean_stackdepth integer_inc boolean_or exec_rot (boolean_dup_items boolean_dup_times in4 exec_if () ()) () ()))) ()) ())))
Errors: [1 1 0 0 0 1 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 31
Size: 52
Percent parens: 0.404
--- Population Statistics ---
Average total errors in population: 6.619
Median total errors in population: 6
Error averages by case: (0.864 0.722 0.792 0.793 0.149 0.864 0.792 0.771 0.723 0.149)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.454
Average program size in population (points): 53.661
Average percent parens in population: 0.394
Minimum age in population: 22.853515625
Maximum age in population: 29.15262603759766
Average age in population: 27.55884093475342
Median age in population: 27.62893676757812
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 53
Genome diversity (% unique genomes):	 0.675
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.666
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 8506662
--- Timings ---
Current time: 1559314673097 milliseconds
Total Time:          57.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.0 seconds, 71.2%
Fitness Testing:     10.5 seconds, 18.2%
Report:               6.0 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 673
Test mean error for best: 0.67300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 84                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 55                 
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 68                 
Correct output: 16                  | Program output: 54                 
Correct output: 11                  | Program output: 68                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 80                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 89                 
Correct output: 6                   | Program output: 51                 
Correct output: 12                  | Program output: 34                 
Correct output: 1                   | Program output: 93                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 48                 
Correct output: 28                  | Program output: 78                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: 75                 
Correct output: -88                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: 81                 
Correct output: -78                 | Program output: 19                 
Correct output: -45                 | Program output: 82                 
Correct output: -30                 | Program output: 3                  
Correct output: -91                 | Program output: 49                 
Correct output: -65                 | Program output: 26                 
Correct output: -99                 | Program output: 67                 
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: 9                  
Correct output: -94                 | Program output: 61                 
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: 41                 
Correct output: -76                 | Program output: 12                 
Correct output: -41                 | Program output: 62                 
Correct output: -77                 | Program output: 8                  
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: 48                 
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 84                 
Correct output: -22                 | Program output: 70                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 89                 
Correct output: -78                 | Program output: 4                  
Correct output: -29                 | Program output: 14                 
Correct output: -98                 | Program output: 88                 
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -72                
Correct output: -63                 | Program output: -34                
Correct output: -69                 | Program output: 48                 
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 89                 
Correct output: -28                 | Program output: 78                 
Correct output: -15                 | Program output: 63                 
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: 94                 
Correct output: -26                 | Program output: 33                 
Correct output: -57                 | Program output: 50                 
Correct output: -97                 | Program output: -93                
Correct output: -95                 | Program output: -73                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -32                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: 51                 
Correct output: -46                 | Program output: 42                 
Correct output: -86                 | Program output: 67                 
Correct output: -39                 | Program output: 13                 
Correct output: -58                 | Program output: 43                 
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -46                
Correct output: -65                 | Program output: 89                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction exec_if} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 2, :instruction exec_if})
Lexicase best program: (integer_rot boolean_shove in3 exec_k_when_autoconstructing (boolean_shove print_integer print_integer) (exec_do*range (exec_y_when_autoconstructing () integer_add integer_lte integer_fromboolean integer_max boolean_or integer_eq in1 exec_while (exec_if (exec_s_when_autoconstructing () (integer_lte boolean_and exec_if (boolean_stackdepth print_newline boolean_dup_times boolean_swap integer_stackdepth) (exec_k_when_autoconstructing (integer_pop boolean_dup integer_rot) (exec_while () exec_k_when_autoconstructing (boolean_or boolean_or exec_rot (boolean_dup_items boolean_dup_times in2 exec_if () ()) () ()) ()))) ()) ()))))
Lexicase best errors: [0 1 0 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 63
Percent parens: 0.365
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction exec_if} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 2, :instruction exec_if})
Zero cases best program: (integer_rot boolean_shove in3 exec_k_when_autoconstructing (boolean_shove print_integer print_integer) (exec_do*range (exec_y_when_autoconstructing () integer_add integer_lte integer_fromboolean integer_max boolean_or integer_eq in1 exec_while (exec_if (exec_s_when_autoconstructing () (integer_lte boolean_and exec_if (boolean_stackdepth print_newline boolean_dup_times boolean_swap integer_stackdepth) (exec_k_when_autoconstructing (integer_pop boolean_dup integer_rot) (exec_while () exec_k_when_autoconstructing (boolean_or boolean_or exec_rot (boolean_dup_items boolean_dup_times in2 exec_if () ()) () ()) ()))) ()) ()))))
Zero cases best errors: [0 1 0 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 63
Percent parens: 0.365
--- Lexicase Population Statistics ---
Count of elite individuals by case: (238 186 238 239 116 848 186 542 239 116)
Population mean number of elite cases: 2.95
Count of perfect (error zero) individuals by case: (238 186 238 239 116 848 186 542 239 116)
Population mean number of perfect (error zero) cases: 2.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_add} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_swap} {:close 1, :instruction -84} {:close 0, :instruction exec_while} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_yank} {:close 0, :instruction in2} {:close 1, :instruction exec_if})
Best program: (integer_rot boolean_shove in3 exec_k_when_autoconstructing (boolean_shove print_integer print_integer) (exec_do*range (exec_y_when_autoconstructing () integer_add integer_lte integer_fromboolean integer_max boolean_or integer_swap -84) exec_while (integer_pop boolean_dup integer_rot) exec_while () exec_k_when_autoconstructing (boolean_or boolean_or exec_rot (boolean_dup_items boolean_yank in2 exec_if () ()) () ()) ()))
Errors: [0 1 0 0 1 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 29
Size: 43
Percent parens: 0.326
--- Population Statistics ---
Average total errors in population: 7.052
Median total errors in population: 6
Error averages by case: (0.762 0.814 0.762 0.761 0.884 0.152 0.814 0.458 0.761 0.884)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.312
Average program size in population (points): 51.873
Average percent parens in population: 0.394
Minimum age in population: 25.807861328125
Maximum age in population: 31.06015396118164
Average age in population: 28.94248161315918
Median age in population: 29.00628662109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 21
Genome diversity (% unique genomes):	 0.727
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.714
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 8948753
--- Timings ---
Current time: 1559314676071 milliseconds
Total Time:          60.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.3 seconds, 71.3%
Fitness Testing:     10.9 seconds, 18.0%
Report:               6.4 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 673
Test mean error for best: 0.67300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 84                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 55                 
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 68                 
Correct output: 16                  | Program output: 54                 
Correct output: 11                  | Program output: 68                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 80                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 89                 
Correct output: 6                   | Program output: 51                 
Correct output: 12                  | Program output: 34                 
Correct output: 1                   | Program output: 93                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 48                 
Correct output: 28                  | Program output: 78                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: 75                 
Correct output: -88                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: 81                 
Correct output: -78                 | Program output: 19                 
Correct output: -45                 | Program output: 82                 
Correct output: -30                 | Program output: 3                  
Correct output: -91                 | Program output: 49                 
Correct output: -65                 | Program output: 26                 
Correct output: -99                 | Program output: 67                 
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: 9                  
Correct output: -94                 | Program output: 61                 
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: 41                 
Correct output: -76                 | Program output: 12                 
Correct output: -41                 | Program output: 62                 
Correct output: -77                 | Program output: 8                  
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: 48                 
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 84                 
Correct output: -22                 | Program output: 70                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 89                 
Correct output: -78                 | Program output: 4                  
Correct output: -29                 | Program output: 14                 
Correct output: -98                 | Program output: 88                 
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -72                
Correct output: -63                 | Program output: -34                
Correct output: -69                 | Program output: 48                 
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 89                 
Correct output: -28                 | Program output: 78                 
Correct output: -15                 | Program output: 63                 
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: 94                 
Correct output: -26                 | Program output: 33                 
Correct output: -57                 | Program output: 50                 
Correct output: -97                 | Program output: -93                
Correct output: -95                 | Program output: -73                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -32                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: 51                 
Correct output: -46                 | Program output: 42                 
Correct output: -86                 | Program output: 67                 
Correct output: -39                 | Program output: 13                 
Correct output: -58                 | Program output: 43                 
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -46                
Correct output: -65                 | Program output: 89                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush})
Lexicase best program: (integer_rot boolean_shove in3 exec_k_when_autoconstructing (boolean_shove print_integer print_integer) (exec_do*range (boolean_eq) integer_lt integer_lte integer_fromboolean integer_max boolean_or in1 boolean_or exec_swap (integer_rot integer_eq exec_dup_times (integer_pop) boolean_swap integer_gt exec_yank) (integer_dup_items integer_empty boolean_or boolean_dup exec_shove () exec_yank integer_inc integer_div integer_div in3 integer_mod integer_shove in1 integer_sub exec_flush) exec_dup (exec_flush integer_swap integer_empty exec_empty in2 integer_gt exec_dup_times (integer_mod boolean_xor boolean_dup_times exec_if () (boolean_stackdepth exec_k_when_autoconstructing (boolean_dup boolean_yankdup) (exec_shove (exec_noop) integer_lte integer_dup_times integer_gt exec_dup (boolean_dup) exec_flush exec_y_when_autoconstructing (in2 exec_rot () (integer_div boolean_eq) (boolean_dup_times integer_lte integer_max boolean_flush))))))))
Lexicase best errors: [1 0 1 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 92
Percent parens: 0.217
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_div} {:close 0, :instruction integer_div} {:close 0, :instruction in3} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_div} {:close 1, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_flush})
Zero cases best program: (integer_rot boolean_shove in3 exec_k_when_autoconstructing (boolean_shove print_integer print_integer) (exec_do*range (boolean_eq) integer_lt integer_lte integer_fromboolean integer_max boolean_or in1 boolean_or exec_swap (integer_rot integer_eq exec_dup_times (integer_pop) boolean_swap integer_gt exec_yank) (integer_dup_items integer_empty boolean_or boolean_dup exec_shove () exec_yank integer_inc integer_div integer_div in3 integer_mod integer_shove in1 integer_sub exec_flush) exec_dup (exec_flush integer_swap integer_empty exec_empty in2 integer_gt exec_dup_times (integer_mod boolean_xor boolean_dup_times exec_if () (boolean_stackdepth exec_k_when_autoconstructing (boolean_dup boolean_yankdup) (exec_shove (exec_noop) integer_lte integer_dup_times integer_gt exec_dup (boolean_dup) exec_flush exec_y_when_autoconstructing (in2 exec_rot () (integer_div boolean_eq) (boolean_dup_times integer_lte integer_max boolean_flush))))))))
Zero cases best errors: [1 0 1 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 92
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (205 475 187 475 475 205 877 187 10 10)
Population mean number of elite cases: 3.11
Count of perfect (error zero) individuals by case: (205 475 187 475 475 205 877 187 10 10)
Population mean number of perfect (error zero) cases: 3.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 2, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in2} {:close 1, :instruction exec_if})
Best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (integer_gt) () in3 print_boolean exec_k_when_autoconstructing () (print_integer) boolean_dup_items exec_if (exec_shove (tagged_478 integer_mod exec_k_when_autoconstructing (integer_pop boolean_dup integer_rot) (exec_while () exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop boolean_dup integer_rot integer_mult) (exec_k_when_autoconstructing (boolean_or boolean_or exec_rot (boolean_dup_items boolean_dup_times in2 exec_if () ()) () ()) ()))))) ())
Errors: [1 0 1 0 0 1 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 35
Size: 56
Percent parens: 0.375
--- Population Statistics ---
Average total errors in population: 6.894
Median total errors in population: 7
Error averages by case: (0.795 0.525 0.813 0.525 0.525 0.795 0.123 0.813 0.99 0.99)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.107
Average program size in population (points): 49.85
Average percent parens in population: 0.374
Minimum age in population: 27.30410766601562
Maximum age in population: 32.48427391052246
Average age in population: 30.47985948944092
Median age in population: 30.57546520233154
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 32
Genome diversity (% unique genomes):	 0.678
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.667
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 9312779
--- Timings ---
Current time: 1559314678982 milliseconds
Total Time:          63.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.6 seconds, 71.7%
Fitness Testing:     11.3 seconds, 17.8%
Report:               6.6 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: 17                 
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 70                 
Correct output: 5                   | Program output: 44                 
Correct output: 1                   | Program output: 14                 
Correct output: 17                  | Program output: 63                 
Correct output: 27                  | Program output: 50                 
Correct output: 11                  | Program output: 18                 
Correct output: 16                  | Program output: 46                 
Correct output: 11                  | Program output: 43                 
Correct output: 25                  | Program output: 73                 
Correct output: 13                  | Program output: 13                 
Correct output: 34                  | Program output: 35                 
Correct output: 8                   | Program output: 48                 
Correct output: 6                   | Program output: 49                 
Correct output: 12                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 19                 
Correct output: 26                  | Program output: 37                 
Correct output: 40                  | Program output: 45                 
Correct output: 28                  | Program output: 53                 
Correct output: 42                  | Program output: 58                 
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: 59                 
Correct output: -71                 | Program output: 40                 
Correct output: -88                 | Program output: 87                 
Correct output: -45                 | Program output: 1                  
Correct output: -21                 | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: -73                
Correct output: -45                 | Program output: 95                 
Correct output: -30                 | Program output: 72                 
Correct output: -91                 | Program output: -57                
Correct output: -65                 | Program output: 93                 
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: 85                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -39                
Correct output: -43                 | Program output: 90                 
Correct output: -76                 | Program output: -70                
Correct output: -41                 | Program output: 64                 
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -30                
Correct output: 10                  | Program output: 91                 
Correct output: -36                 | Program output: 92                 
Correct output: -85                 | Program output: 45                 
Correct output: -83                 | Program output: 11                 
Correct output: -22                 | Program output: 71                 
Correct output: -74                 | Program output: 14                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: 34                 
Correct output: -29                 | Program output: -25                
Correct output: -98                 | Program output: 7                  
Correct output: -99                 | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -6                 
Correct output: -69                 | Program output: -69                
Correct output: -69                 | Program output: -54                
Correct output: 24                  | Program output: 49                 
Correct output: -28                 | Program output: -28                
Correct output: -15                 | Program output: 59                 
Correct output: -43                 | Program output: -37                
Correct output: -70                 | Program output: -2                 
Correct output: -31                 | Program output: 84                 
Correct output: -26                 | Program output: -26                
Correct output: -57                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: 32                 
Correct output: -48                 | Program output: -48                
Correct output: -50                 | Program output: 47                 
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: -46                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: 80                 
Correct output: -58                 | Program output: -30                
Correct output: -84                 | Program output: 34                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction exec_if})
Lexicase best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop boolean_dup integer_rot) (exec_while () exec_k_when_autoconstructing (boolean_or in2 exec_if () ()) ()))) ()) ())))
Lexicase best errors: [1 0 1 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 47
Percent parens: 0.426
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction in2} {:close 0, :instruction exec_if})
Zero cases best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop boolean_dup integer_rot) (exec_while () exec_k_when_autoconstructing (boolean_or in2 exec_if () ()) ()))) ()) ())))
Zero cases best errors: [1 0 1 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 47
Percent parens: 0.426
--- Lexicase Population Statistics ---
Count of elite individuals by case: (306 181 172 172 180 181 206 180 180 306)
Population mean number of elite cases: 2.06
Count of perfect (error zero) individuals by case: (306 181 172 172 180 181 206 180 180 306)
Population mean number of perfect (error zero) cases: 2.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 1, :instruction exec_if})
Best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (integer_yankdup)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (boolean_or integer_eq in4 exec_if () ()) ()) ())))
Errors: [1 1 0 0 1 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 20
Size: 34
Percent parens: 0.412
--- Population Statistics ---
Average total errors in population: 7.936
Median total errors in population: 8
Error averages by case: (0.694 0.819 0.828 0.828 0.82 0.819 0.794 0.82 0.82 0.694)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.736
Average program size in population (points): 49.742
Average percent parens in population: 0.381
Minimum age in population: 28.46414184570312
Maximum age in population: 34.13263607025146
Average age in population: 32.03309406852722
Median age in population: 32.07929658889771
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 20
Genome diversity (% unique genomes):	 0.693
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.682
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 9709784
--- Timings ---
Current time: 1559314682103 milliseconds
Total Time:          66.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        48.0 seconds, 72.0%
Fitness Testing:     11.7 seconds, 17.6%
Report:               6.9 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: 17                 
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 70                 
Correct output: 5                   | Program output: 44                 
Correct output: 1                   | Program output: 14                 
Correct output: 17                  | Program output: 63                 
Correct output: 27                  | Program output: 50                 
Correct output: 11                  | Program output: 18                 
Correct output: 16                  | Program output: 46                 
Correct output: 11                  | Program output: 43                 
Correct output: 25                  | Program output: 73                 
Correct output: 13                  | Program output: 13                 
Correct output: 34                  | Program output: 35                 
Correct output: 8                   | Program output: 48                 
Correct output: 6                   | Program output: 49                 
Correct output: 12                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 19                 
Correct output: 26                  | Program output: 37                 
Correct output: 40                  | Program output: 45                 
Correct output: 28                  | Program output: 53                 
Correct output: 42                  | Program output: 58                 
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: 59                 
Correct output: -71                 | Program output: 40                 
Correct output: -88                 | Program output: 87                 
Correct output: -45                 | Program output: 1                  
Correct output: -21                 | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: -73                
Correct output: -45                 | Program output: 95                 
Correct output: -30                 | Program output: 72                 
Correct output: -91                 | Program output: -57                
Correct output: -65                 | Program output: 93                 
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: 85                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -39                
Correct output: -43                 | Program output: 90                 
Correct output: -76                 | Program output: -70                
Correct output: -41                 | Program output: 64                 
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -30                
Correct output: 10                  | Program output: 91                 
Correct output: -36                 | Program output: 92                 
Correct output: -85                 | Program output: 45                 
Correct output: -83                 | Program output: 11                 
Correct output: -22                 | Program output: 71                 
Correct output: -74                 | Program output: 14                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: 34                 
Correct output: -29                 | Program output: -25                
Correct output: -98                 | Program output: 7                  
Correct output: -99                 | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -6                 
Correct output: -69                 | Program output: -69                
Correct output: -69                 | Program output: -54                
Correct output: 24                  | Program output: 49                 
Correct output: -28                 | Program output: -28                
Correct output: -15                 | Program output: 59                 
Correct output: -43                 | Program output: -37                
Correct output: -70                 | Program output: -2                 
Correct output: -31                 | Program output: 84                 
Correct output: -26                 | Program output: -26                
Correct output: -57                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: 32                 
Correct output: -48                 | Program output: -48                
Correct output: -50                 | Program output: 47                 
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: -46                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: 80                 
Correct output: -58                 | Program output: -30                
Correct output: -84                 | Program output: 34                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction 87} {:close 0, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction exec_if})
Lexicase best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (boolean_dup exec_shove (boolean_dup_items boolean_dup_times in4 exec_if () ())) ())))
Lexicase best errors: [0 0 1 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 34
Percent parens: 0.382
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction 87} {:close 0, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction exec_if})
Zero cases best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (boolean_dup exec_shove (boolean_dup_items boolean_dup_times in4 exec_if () ())) ())))
Zero cases best errors: [0 0 1 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 34
Percent parens: 0.382
--- Lexicase Population Statistics ---
Count of elite individuals by case: (309 309 298 1 297 208 309 309 820 1)
Population mean number of elite cases: 2.86
Count of perfect (error zero) individuals by case: (309 309 298 1 297 208 309 309 820 1)
Population mean number of perfect (error zero) cases: 2.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction integer_swap})
Best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (boolean_or integer_eq exec_while () exec_k_when_autoconstructing (integer_inc boolean_or exec_rot (boolean_dup_items boolean_dup_times in4 integer_swap) () ()) ()) ()) ())))
Errors: [0 0 1 1 1 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 27
Size: 45
Percent parens: 0.400
--- Population Statistics ---
Average total errors in population: 7.139
Median total errors in population: 7
Error averages by case: (0.691 0.691 0.702 0.999 0.703 0.792 0.691 0.691 0.18 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.265
Average program size in population (points): 48.187
Average percent parens in population: 0.391
Minimum age in population: 30.86833190917969
Maximum age in population: 35.30427694320679
Average age in population: 33.5035376329422
Median age in population: 33.55790281295776
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 34
Genome diversity (% unique genomes):	 0.617
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.607
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 10147001
--- Timings ---
Current time: 1559314685090 milliseconds
Total Time:          69.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        50.3 seconds, 72.1%
Fitness Testing:     12.2 seconds, 17.5%
Report:               7.1 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: 17                 
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 70                 
Correct output: 5                   | Program output: 44                 
Correct output: 1                   | Program output: 14                 
Correct output: 17                  | Program output: 63                 
Correct output: 27                  | Program output: 50                 
Correct output: 11                  | Program output: 18                 
Correct output: 16                  | Program output: 46                 
Correct output: 11                  | Program output: 43                 
Correct output: 25                  | Program output: 73                 
Correct output: 13                  | Program output: 13                 
Correct output: 34                  | Program output: 35                 
Correct output: 8                   | Program output: 48                 
Correct output: 6                   | Program output: 49                 
Correct output: 12                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 19                 
Correct output: 26                  | Program output: 37                 
Correct output: 40                  | Program output: 45                 
Correct output: 28                  | Program output: 53                 
Correct output: 42                  | Program output: 58                 
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: 59                 
Correct output: -71                 | Program output: 40                 
Correct output: -88                 | Program output: 87                 
Correct output: -45                 | Program output: 1                  
Correct output: -21                 | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: -73                
Correct output: -45                 | Program output: 95                 
Correct output: -30                 | Program output: 72                 
Correct output: -91                 | Program output: -57                
Correct output: -65                 | Program output: 93                 
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: 85                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -39                
Correct output: -43                 | Program output: 90                 
Correct output: -76                 | Program output: -70                
Correct output: -41                 | Program output: 64                 
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -30                
Correct output: 10                  | Program output: 91                 
Correct output: -36                 | Program output: 92                 
Correct output: -85                 | Program output: 45                 
Correct output: -83                 | Program output: 11                 
Correct output: -22                 | Program output: 71                 
Correct output: -74                 | Program output: 14                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: 34                 
Correct output: -29                 | Program output: -25                
Correct output: -98                 | Program output: 7                  
Correct output: -99                 | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -6                 
Correct output: -69                 | Program output: -69                
Correct output: -69                 | Program output: -54                
Correct output: 24                  | Program output: 49                 
Correct output: -28                 | Program output: -28                
Correct output: -15                 | Program output: 59                 
Correct output: -43                 | Program output: -37                
Correct output: -70                 | Program output: -2                 
Correct output: -31                 | Program output: 84                 
Correct output: -26                 | Program output: -26                
Correct output: -57                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: 32                 
Correct output: -48                 | Program output: -48                
Correct output: -50                 | Program output: 47                 
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: -46                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: 80                 
Correct output: -58                 | Program output: -30                
Correct output: -84                 | Program output: 34                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction 87} {:close 0, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction exec_if})
Lexicase best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (boolean_dup exec_dup_items boolean_dup_items boolean_dup_times in4 exec_if () ()) ())))
Lexicase best errors: [0 0 1 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 33
Percent parens: 0.364
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction 87} {:close 0, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction exec_if})
Zero cases best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (boolean_dup exec_dup_items boolean_dup_items boolean_dup_times in4 exec_if () ()) ())))
Zero cases best errors: [0 0 1 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 33
Percent parens: 0.364
--- Lexicase Population Statistics ---
Count of elite individuals by case: (353 839 92 353 199 644 353 199 353 92)
Population mean number of elite cases: 3.48
Count of perfect (error zero) individuals by case: (353 839 92 353 199 644 353 199 353 92)
Population mean number of perfect (error zero) cases: 3.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction integer_add} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction exec_if})
Best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (integer_add) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (boolean_dup exec_shove (integer_lte boolean_and boolean_stackdepth boolean_dup_items boolean_dup_times in4 exec_if () ())) ())))
Errors: [0 0 1 0 1 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 24
Size: 37
Percent parens: 0.351
--- Population Statistics ---
Average total errors in population: 6.523
Median total errors in population: 6
Error averages by case: (0.647 0.161 0.908 0.647 0.801 0.356 0.647 0.801 0.647 0.908)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.378
Average program size in population (points): 47.206
Average percent parens in population: 0.398
Minimum age in population: 32.06961631774902
Maximum age in population: 36.9067747592926
Average age in population: 35.24783259487152
Median age in population: 35.40589654445648
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 150
Genome diversity (% unique genomes):	 0.594
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 151
Syntactic diversity (% unique Push programs):	 0.582
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 10615614
--- Timings ---
Current time: 1559314687994 milliseconds
Total Time:          72.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        52.4 seconds, 72.2%
Fitness Testing:     12.6 seconds, 17.4%
Report:               7.4 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: 17                 
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 70                 
Correct output: 5                   | Program output: 44                 
Correct output: 1                   | Program output: 14                 
Correct output: 17                  | Program output: 63                 
Correct output: 27                  | Program output: 50                 
Correct output: 11                  | Program output: 18                 
Correct output: 16                  | Program output: 46                 
Correct output: 11                  | Program output: 43                 
Correct output: 25                  | Program output: 73                 
Correct output: 13                  | Program output: 13                 
Correct output: 34                  | Program output: 35                 
Correct output: 8                   | Program output: 48                 
Correct output: 6                   | Program output: 49                 
Correct output: 12                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 19                 
Correct output: 26                  | Program output: 37                 
Correct output: 40                  | Program output: 45                 
Correct output: 28                  | Program output: 53                 
Correct output: 42                  | Program output: 58                 
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: 59                 
Correct output: -71                 | Program output: 40                 
Correct output: -88                 | Program output: 87                 
Correct output: -45                 | Program output: 1                  
Correct output: -21                 | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: -73                
Correct output: -45                 | Program output: 95                 
Correct output: -30                 | Program output: 72                 
Correct output: -91                 | Program output: -57                
Correct output: -65                 | Program output: 93                 
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: 85                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -39                
Correct output: -43                 | Program output: 90                 
Correct output: -76                 | Program output: -70                
Correct output: -41                 | Program output: 64                 
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -30                
Correct output: 10                  | Program output: 91                 
Correct output: -36                 | Program output: 92                 
Correct output: -85                 | Program output: 45                 
Correct output: -83                 | Program output: 11                 
Correct output: -22                 | Program output: 71                 
Correct output: -74                 | Program output: 14                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: 34                 
Correct output: -29                 | Program output: -25                
Correct output: -98                 | Program output: 7                  
Correct output: -99                 | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -6                 
Correct output: -69                 | Program output: -69                
Correct output: -69                 | Program output: -54                
Correct output: 24                  | Program output: 49                 
Correct output: -28                 | Program output: -28                
Correct output: -15                 | Program output: 59                 
Correct output: -43                 | Program output: -37                
Correct output: -70                 | Program output: -2                 
Correct output: -31                 | Program output: 84                 
Correct output: -26                 | Program output: -26                
Correct output: -57                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: 32                 
Correct output: -48                 | Program output: -48                
Correct output: -50                 | Program output: 47                 
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: -46                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: 80                 
Correct output: -58                 | Program output: -30                
Correct output: -84                 | Program output: 34                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in4} {:close 1, :instruction exec_if})
Lexicase best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing (print_integer) (exec_if (exec_if (boolean_or exec_rot (boolean_dup_items) (boolean_dup_times in4) (exec_if () ())) ()) ()))))
Lexicase best errors: [0 0 1 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 39
Percent parens: 0.436
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in4} {:close 1, :instruction exec_if})
Zero cases best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing (print_integer) (exec_if (exec_if (boolean_or exec_rot (boolean_dup_items) (boolean_dup_times in4) (exec_if () ())) ()) ()))))
Zero cases best errors: [0 0 1 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 39
Percent parens: 0.436
--- Lexicase Population Statistics ---
Count of elite individuals by case: (866 411 245 410 410 210 411 411 1 412)
Population mean number of elite cases: 3.79
Count of perfect (error zero) individuals by case: (866 411 245 410 410 210 411 411 1 412)
Population mean number of perfect (error zero) cases: 3.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in4} {:close 1, :instruction boolean_or})
Best program: (integer_yank tag_integer_865 boolean_flush integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing (print_integer) (exec_if (exec_if (boolean_or exec_rot (boolean_dup_items) (boolean_dup_times in4) (boolean_or)) ()) ()))))
Errors: [0 0 1 0 0 1 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 24
Size: 39
Percent parens: 0.385
--- Population Statistics ---
Average total errors in population: 6.213
Median total errors in population: 8
Error averages by case: (0.134 0.589 0.755 0.59 0.59 0.79 0.589 0.589 0.999 0.588)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.552
Average program size in population (points): 44.84
Average percent parens in population: 0.385
Minimum age in population: 33.06961631774902
Maximum age in population: 38.64257860183716
Average age in population: 36.82263488781452
Median age in population: 36.86167246103287
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 116
Genome diversity (% unique genomes):	 0.56
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 121
Syntactic diversity (% unique Push programs):	 0.545
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 11048201
--- Timings ---
Current time: 1559314690983 milliseconds
Total Time:          75.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.7 seconds, 72.3%
Fitness Testing:     13.1 seconds, 17.3%
Report:               7.7 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: 17                 
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 70                 
Correct output: 5                   | Program output: 44                 
Correct output: 1                   | Program output: 14                 
Correct output: 17                  | Program output: 63                 
Correct output: 27                  | Program output: 50                 
Correct output: 11                  | Program output: 18                 
Correct output: 16                  | Program output: 46                 
Correct output: 11                  | Program output: 43                 
Correct output: 25                  | Program output: 73                 
Correct output: 13                  | Program output: 13                 
Correct output: 34                  | Program output: 35                 
Correct output: 8                   | Program output: 48                 
Correct output: 6                   | Program output: 49                 
Correct output: 12                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 19                 
Correct output: 26                  | Program output: 37                 
Correct output: 40                  | Program output: 45                 
Correct output: 28                  | Program output: 53                 
Correct output: 42                  | Program output: 58                 
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: 59                 
Correct output: -71                 | Program output: 40                 
Correct output: -88                 | Program output: 87                 
Correct output: -45                 | Program output: 1                  
Correct output: -21                 | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: -73                
Correct output: -45                 | Program output: 95                 
Correct output: -30                 | Program output: 72                 
Correct output: -91                 | Program output: -57                
Correct output: -65                 | Program output: 93                 
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: 85                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -39                
Correct output: -43                 | Program output: 90                 
Correct output: -76                 | Program output: -70                
Correct output: -41                 | Program output: 64                 
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -30                
Correct output: 10                  | Program output: 91                 
Correct output: -36                 | Program output: 92                 
Correct output: -85                 | Program output: 45                 
Correct output: -83                 | Program output: 11                 
Correct output: -22                 | Program output: 71                 
Correct output: -74                 | Program output: 14                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: 34                 
Correct output: -29                 | Program output: -25                
Correct output: -98                 | Program output: 7                  
Correct output: -99                 | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -6                 
Correct output: -69                 | Program output: -69                
Correct output: -69                 | Program output: -54                
Correct output: 24                  | Program output: 49                 
Correct output: -28                 | Program output: -28                
Correct output: -15                 | Program output: 59                 
Correct output: -43                 | Program output: -37                
Correct output: -70                 | Program output: -2                 
Correct output: -31                 | Program output: 84                 
Correct output: -26                 | Program output: -26                
Correct output: -57                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: 32                 
Correct output: -48                 | Program output: -48                
Correct output: -50                 | Program output: 47                 
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: -46                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: 80                 
Correct output: -58                 | Program output: -30                
Correct output: -84                 | Program output: 34                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4})
Lexicase best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer exec_shove (exec_if (integer_yankdup tagged_478 exec_k_when_autoconstructing (integer_pop boolean_dup exec_k_when_autoconstructing (integer_pop boolean_dup integer_rot) (exec_while () exec_k_when_autoconstructing (boolean_or boolean_or boolean_or exec_rot (boolean_dup_items boolean_dup_times in4) () ()) ())) ()) ()))))) ()) ())
Lexicase best errors: [1 1 0 1 0 0 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 64
Percent parens: 0.391
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4})
Zero cases best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer exec_shove (exec_if (integer_yankdup tagged_478 exec_k_when_autoconstructing (integer_pop boolean_dup exec_k_when_autoconstructing (integer_pop boolean_dup integer_rot) (exec_while () exec_k_when_autoconstructing (boolean_or boolean_or boolean_or exec_rot (boolean_dup_items boolean_dup_times in4) () ()) ())) ()) ()))))) ()) ())
Zero cases best errors: [1 1 0 1 0 0 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 64
Percent parens: 0.391
--- Lexicase Population Statistics ---
Count of elite individuals by case: (79 122 570 80 866 571 79 95 570 122)
Population mean number of elite cases: 3.15
Count of perfect (error zero) individuals by case: (79 122 570 80 866 571 79 95 570 122)
Population mean number of perfect (error zero) cases: 3.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4} {:close 1, :instruction exec_if})
Best program: (87 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (integer_yankdup)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (boolean_dup exec_shove (boolean_dup_items boolean_dup_times in4 exec_if () ())) ())))
Errors: [1 1 0 1 0 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 21
Size: 34
Percent parens: 0.382
--- Population Statistics ---
Average total errors in population: 6.846
Median total errors in population: 6
Error averages by case: (0.921 0.878 0.43 0.92 0.134 0.429 0.921 0.905 0.43 0.878)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.676
Average program size in population (points): 43.759
Average percent parens in population: 0.390
Minimum age in population: 35.05246067047119
Maximum age in population: 40.05702531337738
Average age in population: 38.34982811808586
Median age in population: 38.47709977626801
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 59
Genome diversity (% unique genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.566
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 11460019
--- Timings ---
Current time: 1559314693641 milliseconds
Total Time:          78.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.7 seconds, 72.4%
Fitness Testing:     13.5 seconds, 17.2%
Report:               8.0 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 92                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 38                 
Correct output: 17                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 46                 
Correct output: 16                  | Program output: 94                 
Correct output: 11                  | Program output: 11                 
Correct output: 25                  | Program output: 60                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 92                 
Correct output: 8                   | Program output: 83                 
Correct output: 6                   | Program output: 50                 
Correct output: 12                  | Program output: 56                 
Correct output: 1                   | Program output: 42                 
Correct output: 18                  | Program output: 97                 
Correct output: 26                  | Program output: 42                 
Correct output: 40                  | Program output: 56                 
Correct output: 28                  | Program output: 36                 
Correct output: 42                  | Program output: 58                 
Correct output: -41                 | Program output: 100                
Correct output: -83                 | Program output: -12                
Correct output: -71                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -45                 | Program output: 45                 
Correct output: -21                 | Program output: 26                 
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: 42                 
Correct output: -45                 | Program output: 98                 
Correct output: -30                 | Program output: 38                 
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: 79                 
Correct output: -44                 | Program output: 1                  
Correct output: -98                 | Program output: 1                  
Correct output: -40                 | Program output: -2                 
Correct output: -100                | Program output: 67                 
Correct output: -94                 | Program output: 34                 
Correct output: -79                 | Program output: 33                 
Correct output: -43                 | Program output: 81                 
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -3                 
Correct output: -77                 | Program output: -47                
Correct output: -96                 | Program output: 46                 
Correct output: 10                  | Program output: 20                 
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 96                 
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: 49                 
Correct output: -100                | Program output: 72                 
Correct output: -78                 | Program output: 56                 
Correct output: -29                 | Program output: 54                 
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -59                
Correct output: -63                 | Program output: -63                
Correct output: -69                 | Program output: 3                  
Correct output: -69                 | Program output: 93                 
Correct output: 24                  | Program output: 79                 
Correct output: -28                 | Program output: 14                 
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: 40                 
Correct output: -70                 | Program output: -20                
Correct output: -31                 | Program output: -29                
Correct output: -26                 | Program output: -14                
Correct output: -57                 | Program output: -1                 
Correct output: -97                 | Program output: -19                
Correct output: -95                 | Program output: -78                
Correct output: -77                 | Program output: -45                
Correct output: -48                 | Program output: -30                
Correct output: -50                 | Program output: -3                 
Correct output: -86                 | Program output: 39                 
Correct output: -46                 | Program output: 12                 
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -28                
Correct output: -66                 | Program output: -26                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 2, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or})
Lexicase best program: (in1 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (boolean_or integer_eq in1 boolean_pop exec_dup (exec_s_when_autoconstructing () (integer_lte boolean_dup integer_rot) (exec_while ()) exec_k_when_autoconstructing (boolean_or) ())) ()) ())))
Lexicase best errors: [1 1 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 47
Percent parens: 0.404
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 2, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or})
Zero cases best program: (in1 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (boolean_or integer_eq in1 boolean_pop exec_dup (exec_s_when_autoconstructing () (integer_lte boolean_dup integer_rot) (exec_while ()) exec_k_when_autoconstructing (boolean_or) ())) ()) ())))
Zero cases best errors: [1 1 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 47
Percent parens: 0.404
--- Lexicase Population Statistics ---
Count of elite individuals by case: (284 284 294 85 255 255 832 835 835 85)
Population mean number of elite cases: 4.04
Count of perfect (error zero) individuals by case: (284 284 294 85 255 255 832 835 835 85)
Population mean number of perfect (error zero) cases: 4.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_if} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in4})
Best program: (in1 integer_yank tag_integer_865 boolean_flush exec_swap (in1 print_boolean exec_k_when_autoconstructing () (print_integer exec_if (exec_if () (exec_rot (boolean_dup_items boolean_dup_times in4) () ())) ())) ())
Errors: [1 1 0 0 1 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 15
Size: 27
Percent parens: 0.444
--- Population Statistics ---
Average total errors in population: 5.956
Median total errors in population: 5
Error averages by case: (0.716 0.716 0.706 0.915 0.745 0.745 0.168 0.165 0.165 0.915)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.055
Average program size in population (points): 43.353
Average percent parens in population: 0.376
Minimum age in population: 36.70936989784241
Maximum age in population: 41.60584002733231
Average age in population: 40.00510921451449
Median age in population: 40.10668203234673
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 144
Genome diversity (% unique genomes):	 0.587
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 158
Syntactic diversity (% unique Push programs):	 0.567
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 11865459
--- Timings ---
Current time: 1559314696227 milliseconds
Total Time:          80.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.6 seconds, 72.5%
Fitness Testing:     13.9 seconds, 17.2%
Report:               8.3 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 92                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 38                 
Correct output: 17                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 46                 
Correct output: 16                  | Program output: 94                 
Correct output: 11                  | Program output: 11                 
Correct output: 25                  | Program output: 60                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 92                 
Correct output: 8                   | Program output: 83                 
Correct output: 6                   | Program output: 50                 
Correct output: 12                  | Program output: 56                 
Correct output: 1                   | Program output: 42                 
Correct output: 18                  | Program output: 97                 
Correct output: 26                  | Program output: 42                 
Correct output: 40                  | Program output: 56                 
Correct output: 28                  | Program output: 36                 
Correct output: 42                  | Program output: 58                 
Correct output: -41                 | Program output: 100                
Correct output: -83                 | Program output: -12                
Correct output: -71                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -45                 | Program output: 45                 
Correct output: -21                 | Program output: 26                 
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: 42                 
Correct output: -45                 | Program output: 98                 
Correct output: -30                 | Program output: 38                 
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: 79                 
Correct output: -44                 | Program output: 1                  
Correct output: -98                 | Program output: 1                  
Correct output: -40                 | Program output: -2                 
Correct output: -100                | Program output: 67                 
Correct output: -94                 | Program output: 34                 
Correct output: -79                 | Program output: 33                 
Correct output: -43                 | Program output: 81                 
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -3                 
Correct output: -77                 | Program output: -47                
Correct output: -96                 | Program output: 46                 
Correct output: 10                  | Program output: 20                 
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 96                 
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: 49                 
Correct output: -100                | Program output: 72                 
Correct output: -78                 | Program output: 56                 
Correct output: -29                 | Program output: 54                 
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -59                
Correct output: -63                 | Program output: -63                
Correct output: -69                 | Program output: 3                  
Correct output: -69                 | Program output: 93                 
Correct output: 24                  | Program output: 79                 
Correct output: -28                 | Program output: 14                 
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: 40                 
Correct output: -70                 | Program output: -20                
Correct output: -31                 | Program output: -29                
Correct output: -26                 | Program output: -14                
Correct output: -57                 | Program output: -1                 
Correct output: -97                 | Program output: -19                
Correct output: -95                 | Program output: -78                
Correct output: -77                 | Program output: -45                
Correct output: -48                 | Program output: -30                
Correct output: -50                 | Program output: -3                 
Correct output: -86                 | Program output: 39                 
Correct output: -46                 | Program output: 12                 
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -28                
Correct output: -66                 | Program output: -26                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 2, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction boolean_or})
Lexicase best program: (in1 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (boolean_or integer_eq in1 boolean_pop exec_dup (exec_s_when_autoconstructing () (integer_lte boolean_dup integer_rot) (exec_while ()) in1 boolean_or)) ()) ())))
Lexicase best errors: [0 1 1 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 45
Percent parens: 0.378
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 2, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction boolean_or})
Zero cases best program: (in1 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (boolean_or integer_eq in1 boolean_pop exec_dup (exec_s_when_autoconstructing () (integer_lte boolean_dup integer_rot) (exec_while ()) in1 boolean_or)) ()) ())))
Zero cases best errors: [0 1 1 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 45
Percent parens: 0.378
--- Lexicase Population Statistics ---
Count of elite individuals by case: (332 268 1000 231 831 332 231 1000 600 831)
Population mean number of elite cases: 5.66
Count of perfect (error zero) individuals by case: (332 268 0 231 831 332 231 0 600 831)
Population mean number of perfect (error zero) cases: 3.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 2, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or})
Best program: (in1 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (boolean_or integer_eq in1 boolean_pop exec_dup (exec_s_when_autoconstructing () (integer_lte boolean_dup integer_rot) (exec_while ()) exec_k_when_autoconstructing (boolean_or) ())) ()) ())))
Errors: [0 1 1 1 0 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 28
Size: 47
Percent parens: 0.404
--- Population Statistics ---
Average total errors in population: 6.344
Median total errors in population: 6
Error averages by case: (0.668 0.732 1.0 0.769 0.169 0.668 0.769 1.0 0.4 0.169)
Error minima by case: (0 0 1 0 0 0 0 1 0 0)
Average genome size in population (length): 26.438
Average program size in population (points): 43.763
Average percent parens in population: 0.395
Minimum age in population: 38.21331429481506
Maximum age in population: 43.17212957143784
Average age in population: 41.40481510397792
Median age in population: 41.49270340055227
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 92
Genome diversity (% unique genomes):	 0.581
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 108
Syntactic diversity (% unique Push programs):	 0.559
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 12322044
--- Timings ---
Current time: 1559314699481 milliseconds
Total Time:          84.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.1 seconds, 72.7%
Fitness Testing:     14.4 seconds, 17.1%
Report:               8.5 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 92                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 38                 
Correct output: 17                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 46                 
Correct output: 16                  | Program output: 94                 
Correct output: 11                  | Program output: 11                 
Correct output: 25                  | Program output: 60                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 92                 
Correct output: 8                   | Program output: 83                 
Correct output: 6                   | Program output: 50                 
Correct output: 12                  | Program output: 56                 
Correct output: 1                   | Program output: 42                 
Correct output: 18                  | Program output: 97                 
Correct output: 26                  | Program output: 42                 
Correct output: 40                  | Program output: 56                 
Correct output: 28                  | Program output: 36                 
Correct output: 42                  | Program output: 58                 
Correct output: -41                 | Program output: 100                
Correct output: -83                 | Program output: -12                
Correct output: -71                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -45                 | Program output: 45                 
Correct output: -21                 | Program output: 26                 
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: 42                 
Correct output: -45                 | Program output: 98                 
Correct output: -30                 | Program output: 38                 
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: 79                 
Correct output: -44                 | Program output: 1                  
Correct output: -98                 | Program output: 1                  
Correct output: -40                 | Program output: -2                 
Correct output: -100                | Program output: 67                 
Correct output: -94                 | Program output: 34                 
Correct output: -79                 | Program output: 33                 
Correct output: -43                 | Program output: 81                 
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -3                 
Correct output: -77                 | Program output: -47                
Correct output: -96                 | Program output: 46                 
Correct output: 10                  | Program output: 20                 
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 96                 
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: 49                 
Correct output: -100                | Program output: 72                 
Correct output: -78                 | Program output: 56                 
Correct output: -29                 | Program output: 54                 
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -59                
Correct output: -63                 | Program output: -63                
Correct output: -69                 | Program output: 3                  
Correct output: -69                 | Program output: 93                 
Correct output: 24                  | Program output: 79                 
Correct output: -28                 | Program output: 14                 
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: 40                 
Correct output: -70                 | Program output: -20                
Correct output: -31                 | Program output: -29                
Correct output: -26                 | Program output: -14                
Correct output: -57                 | Program output: -1                 
Correct output: -97                 | Program output: -19                
Correct output: -95                 | Program output: -78                
Correct output: -77                 | Program output: -45                
Correct output: -48                 | Program output: -30                
Correct output: -50                 | Program output: -3                 
Correct output: -86                 | Program output: 39                 
Correct output: -46                 | Program output: 12                 
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -28                
Correct output: -66                 | Program output: -26                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup})
Lexicase best program: (87 integer_yank tag_integer_865 boolean_flush exec_while (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (boolean_dup boolean_dup_times) () exec_dup (print_boolean exec_k_when_autoconstructing () (integer_fromboolean integer_max boolean_or integer_eq in1) exec_while (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop) (boolean_dup integer_rot) integer_inc) boolean_dup))))
Lexicase best errors: [0 1 0 1 1 1 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 50
Percent parens: 0.320
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_while} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_while} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction boolean_dup})
Zero cases best program: (87 integer_yank tag_integer_865 boolean_flush exec_while (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (boolean_dup boolean_dup_times) () exec_dup (print_boolean exec_k_when_autoconstructing () (integer_fromboolean integer_max boolean_or integer_eq in1) exec_while (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop) (boolean_dup integer_rot) integer_inc) boolean_dup))))
Zero cases best errors: [0 1 0 1 1 1 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 50
Percent parens: 0.320
--- Lexicase Population Statistics ---
Count of elite individuals by case: (364 1000 364 283 1000 180 650 180 1000 544)
Population mean number of elite cases: 5.57
Count of perfect (error zero) individuals by case: (364 0 364 283 0 180 650 180 0 544)
Population mean number of perfect (error zero) cases: 2.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_xor} {:close 1, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 2, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or})
Best program: (in1 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (boolean_or boolean_xor in1) (boolean_pop exec_dup (exec_s_when_autoconstructing () (integer_lte boolean_dup integer_rot) (exec_while ()) exec_k_when_autoconstructing (boolean_or) ()))) ())))
Errors: [0 1 0 1 1 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 28
Size: 47
Percent parens: 0.404
--- Population Statistics ---
Average total errors in population: 7.435
Median total errors in population: 7
Error averages by case: (0.636 1.0 0.636 0.717 1.0 0.82 0.35 0.82 1.0 0.456)
Error minima by case: (0 1 0 0 1 0 0 0 1 0)
Average genome size in population (length): 26.42
Average program size in population (points): 43.721
Average percent parens in population: 0.394
Minimum age in population: 39.34480333328247
Maximum age in population: 44.76285956054926
Average age in population: 42.88453750509024
Median age in population: 42.9317819327116
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 88
Genome diversity (% unique genomes):	 0.605
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 109
Syntactic diversity (% unique Push programs):	 0.582
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 12783561
--- Timings ---
Current time: 1559314702409 milliseconds
Total Time:          86.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.2 seconds, 72.7%
Fitness Testing:     14.8 seconds, 17.0%
Report:               8.8 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 92                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 38                 
Correct output: 17                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 46                 
Correct output: 16                  | Program output: 94                 
Correct output: 11                  | Program output: 11                 
Correct output: 25                  | Program output: 60                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 92                 
Correct output: 8                   | Program output: 83                 
Correct output: 6                   | Program output: 50                 
Correct output: 12                  | Program output: 56                 
Correct output: 1                   | Program output: 42                 
Correct output: 18                  | Program output: 97                 
Correct output: 26                  | Program output: 42                 
Correct output: 40                  | Program output: 56                 
Correct output: 28                  | Program output: 36                 
Correct output: 42                  | Program output: 58                 
Correct output: -41                 | Program output: 100                
Correct output: -83                 | Program output: -12                
Correct output: -71                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -45                 | Program output: 45                 
Correct output: -21                 | Program output: 26                 
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: 42                 
Correct output: -45                 | Program output: 98                 
Correct output: -30                 | Program output: 38                 
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: 79                 
Correct output: -44                 | Program output: 1                  
Correct output: -98                 | Program output: 1                  
Correct output: -40                 | Program output: -2                 
Correct output: -100                | Program output: 67                 
Correct output: -94                 | Program output: 34                 
Correct output: -79                 | Program output: 33                 
Correct output: -43                 | Program output: 81                 
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -3                 
Correct output: -77                 | Program output: -47                
Correct output: -96                 | Program output: 46                 
Correct output: 10                  | Program output: 20                 
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 96                 
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: 49                 
Correct output: -100                | Program output: 72                 
Correct output: -78                 | Program output: 56                 
Correct output: -29                 | Program output: 54                 
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -59                
Correct output: -63                 | Program output: -63                
Correct output: -69                 | Program output: 3                  
Correct output: -69                 | Program output: 93                 
Correct output: 24                  | Program output: 79                 
Correct output: -28                 | Program output: 14                 
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: 40                 
Correct output: -70                 | Program output: -20                
Correct output: -31                 | Program output: -29                
Correct output: -26                 | Program output: -14                
Correct output: -57                 | Program output: -1                 
Correct output: -97                 | Program output: -19                
Correct output: -95                 | Program output: -78                
Correct output: -77                 | Program output: -45                
Correct output: -48                 | Program output: -30                
Correct output: -50                 | Program output: -3                 
Correct output: -86                 | Program output: 39                 
Correct output: -46                 | Program output: 12                 
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -28                
Correct output: -66                 | Program output: -26                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte})
Lexicase best program: (in1 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (boolean_or integer_eq in1 boolean_pop exec_dup (exec_s_when_autoconstructing () (integer_lte) ())) ()) ())))
Lexicase best errors: [0 1 0 0 0 1 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 39
Percent parens: 0.410
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte})
Zero cases best program: (in1 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (boolean_or integer_eq in1 boolean_pop exec_dup (exec_s_when_autoconstructing () (integer_lte) ())) ()) ())))
Zero cases best errors: [0 1 0 0 0 1 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 39
Percent parens: 0.410
--- Lexicase Population Statistics ---
Count of elite individuals by case: (406 142 406 404 404 281 281 278 142 406)
Population mean number of elite cases: 3.15
Count of perfect (error zero) individuals by case: (406 142 406 404 404 281 281 278 142 406)
Population mean number of perfect (error zero) cases: 3.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 2, :instruction exec_while} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_or})
Best program: (in1 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (boolean_or integer_eq in1 boolean_pop exec_dup (exec_s_when_autoconstructing () (integer_lte boolean_dup integer_rot) (exec_while ()) integer_add boolean_or)) ()) ())))
Errors: [0 1 0 0 0 1 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 28
Size: 45
Percent parens: 0.378
--- Population Statistics ---
Average total errors in population: 6.85
Median total errors in population: 7
Error averages by case: (0.594 0.858 0.594 0.596 0.596 0.719 0.719 0.722 0.858 0.594)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.383
Average program size in population (points): 43.749
Average percent parens in population: 0.396
Minimum age in population: 40.34480333328247
Maximum age in population: 46.47161320224404
Average age in population: 44.38782732576132
Median age in population: 44.46972129307687
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 58
Genome diversity (% unique genomes):	 0.646
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.627
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 13247490
--- Timings ---
Current time: 1559314705609 milliseconds
Total Time:          90.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.6 seconds, 72.7%
Fitness Testing:     15.3 seconds, 16.9%
Report:               9.2 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: 17                 
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 70                 
Correct output: 5                   | Program output: 44                 
Correct output: 1                   | Program output: 14                 
Correct output: 17                  | Program output: 63                 
Correct output: 27                  | Program output: 50                 
Correct output: 11                  | Program output: 18                 
Correct output: 16                  | Program output: 46                 
Correct output: 11                  | Program output: 43                 
Correct output: 25                  | Program output: 73                 
Correct output: 13                  | Program output: 13                 
Correct output: 34                  | Program output: 35                 
Correct output: 8                   | Program output: 48                 
Correct output: 6                   | Program output: 49                 
Correct output: 12                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 19                 
Correct output: 26                  | Program output: 37                 
Correct output: 40                  | Program output: 45                 
Correct output: 28                  | Program output: 53                 
Correct output: 42                  | Program output: 58                 
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: 59                 
Correct output: -71                 | Program output: 40                 
Correct output: -88                 | Program output: 87                 
Correct output: -45                 | Program output: 1                  
Correct output: -21                 | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: -73                
Correct output: -45                 | Program output: 95                 
Correct output: -30                 | Program output: 72                 
Correct output: -91                 | Program output: -57                
Correct output: -65                 | Program output: 93                 
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: 85                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -39                
Correct output: -43                 | Program output: 90                 
Correct output: -76                 | Program output: -70                
Correct output: -41                 | Program output: 64                 
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -30                
Correct output: 10                  | Program output: 91                 
Correct output: -36                 | Program output: 92                 
Correct output: -85                 | Program output: 45                 
Correct output: -83                 | Program output: 11                 
Correct output: -22                 | Program output: 71                 
Correct output: -74                 | Program output: 14                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: 34                 
Correct output: -29                 | Program output: -25                
Correct output: -98                 | Program output: 7                  
Correct output: -99                 | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -6                 
Correct output: -69                 | Program output: -69                
Correct output: -69                 | Program output: -54                
Correct output: 24                  | Program output: 49                 
Correct output: -28                 | Program output: -28                
Correct output: -15                 | Program output: 59                 
Correct output: -43                 | Program output: -37                
Correct output: -70                 | Program output: -2                 
Correct output: -31                 | Program output: 84                 
Correct output: -26                 | Program output: -26                
Correct output: -57                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: 32                 
Correct output: -48                 | Program output: -48                
Correct output: -50                 | Program output: 47                 
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: -46                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: 80                 
Correct output: -58                 | Program output: -30                
Correct output: -84                 | Program output: 34                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in4} {:close 1, :instruction exec_if})
Lexicase best program: (integer_rot 87 integer_yank tag_integer_865 boolean_flush tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer exec_if (boolean_and) (exec_shove (exec_rot (boolean_dup_items) (boolean_dup_times in4) (exec_if () ())))))))
Lexicase best errors: [0 1 1 1 1 0 0 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 41
Percent parens: 0.390
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction in4} {:close 1, :instruction exec_if})
Zero cases best program: (integer_rot 87 integer_yank tag_integer_865 boolean_flush tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer exec_if (boolean_and) (exec_shove (exec_rot (boolean_dup_items) (boolean_dup_times in4) (exec_if () ())))))))
Zero cases best errors: [0 1 1 1 1 0 0 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 41
Percent parens: 0.390
--- Lexicase Population Statistics ---
Count of elite individuals by case: (249 1 1 1 166 249 249 418 166 837)
Population mean number of elite cases: 2.34
Count of perfect (error zero) individuals by case: (249 1 1 1 166 249 249 418 166 837)
Population mean number of perfect (error zero) cases: 2.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 1, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction in4} {:close 1, :instruction exec_if})
Best program: (in1 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if () (exec_empty boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (boolean_or integer_eq in1 boolean_pop exec_dup (exec_s_when_autoconstructing () (integer_lte boolean_dup exec_k_when_autoconstructing (boolean_yankdup boolean_frominteger boolean_and boolean_dup_items boolean_dup_times integer_fromboolean integer_fromboolean in4 exec_if () ()) ()) ())) ()) ())))
Errors: [0 1 1 1 1 0 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 34
Size: 54
Percent parens: 0.370
--- Population Statistics ---
Average total errors in population: 7.663
Median total errors in population: 8
Error averages by case: (0.751 0.999 0.999 0.999 0.834 0.751 0.751 0.582 0.834 0.163)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.372
Average program size in population (points): 43.676
Average percent parens in population: 0.395
Minimum age in population: 42.84263855218887
Maximum age in population: 47.68290858715773
Average age in population: 45.8816513939891
Median age in population: 45.98224984481931
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 36
Genome diversity (% unique genomes):	 0.675
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.652
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 13707633
--- Timings ---
Current time: 1559314708764 milliseconds
Total Time:          93.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.8 seconds, 72.8%
Fitness Testing:     15.7 seconds, 16.9%
Report:               9.5 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: 42                 
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 76                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 56                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 79                 
Correct output: 27                  | Program output: 48                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 58                 
Correct output: 25                  | Program output: 59                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 75                 
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 48                 
Correct output: 18                  | Program output: 87                 
Correct output: 26                  | Program output: 79                 
Correct output: 40                  | Program output: 40                 
Correct output: 28                  | Program output: 28                 
Correct output: 42                  | Program output: 88                 
Correct output: -41                 | Program output: 82                 
Correct output: -83                 | Program output: 52                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: 76                 
Correct output: -45                 | Program output: -7                 
Correct output: -21                 | Program output: 82                 
Correct output: -95                 | Program output: 75                 
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: 0                  
Correct output: -65                 | Program output: -39                
Correct output: -99                 | Program output: -58                
Correct output: -44                 | Program output: 54                 
Correct output: -98                 | Program output: -79                
Correct output: -40                 | Program output: 90                 
Correct output: -100                | Program output: 76                 
Correct output: -94                 | Program output: -83                
Correct output: -79                 | Program output: -17                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output: 58                 
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: 28                 
Correct output: -96                 | Program output: 33                 
Correct output: 10                  | Program output: 60                 
Correct output: -36                 | Program output: -9                 
Correct output: -85                 | Program output: 92                 
Correct output: -83                 | Program output: -2                 
Correct output: -22                 | Program output: 60                 
Correct output: -74                 | Program output: 50                 
Correct output: -100                | Program output: 70                 
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -70                
Correct output: -99                 | Program output: 93                 
Correct output: -80                 | Program output: -26                
Correct output: -63                 | Program output: 64                 
Correct output: -69                 | Program output: -62                
Correct output: -69                 | Program output: 92                 
Correct output: 24                  | Program output: 24                 
Correct output: -28                 | Program output: 59                 
Correct output: -15                 | Program output: 56                 
Correct output: -43                 | Program output: -36                
Correct output: -70                 | Program output: 31                 
Correct output: -31                 | Program output: -31                
Correct output: -26                 | Program output: -25                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: 56                 
Correct output: -95                 | Program output: 49                 
Correct output: -77                 | Program output: 43                 
Correct output: -48                 | Program output: 15                 
Correct output: -50                 | Program output: 38                 
Correct output: -86                 | Program output: -73                
Correct output: -46                 | Program output: -30                
Correct output: -86                 | Program output: 49                 
Correct output: -39                 | Program output: -15                
Correct output: -58                 | Program output: 42                 
Correct output: -84                 | Program output: 41                 
Correct output: -66                 | Program output: 68                 
Correct output: -65                 | Program output: 17                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction 87} {:close 1, :instruction boolean_dup} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Lexicase best program: (integer_rot 87 boolean_dup tag_integer_865 boolean_flush tag_integer_865 boolean_or exec_swap (in1 boolean_frominteger exec_if (exec_empty) (boolean_dup_times)) (exec_dup (integer_dup_times exec_k_when_autoconstructing () (print_integer exec_if (exec_if () (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop in2 exec_pop ()) ()))) ()))))
Lexicase best errors: [1 0 0 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 41
Percent parens: 0.390
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction 87} {:close 1, :instruction boolean_dup} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Zero cases best program: (integer_rot 87 boolean_dup tag_integer_865 boolean_flush tag_integer_865 boolean_or exec_swap (in1 boolean_frominteger exec_if (exec_empty) (boolean_dup_times)) (exec_dup (integer_dup_times exec_k_when_autoconstructing () (print_integer exec_if (exec_if () (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop in2 exec_pop ()) ()))) ()))))
Zero cases best errors: [1 0 0 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 41
Percent parens: 0.390
--- Lexicase Population Statistics ---
Count of elite individuals by case: (272 570 203 202 581 286 853 858 95 286)
Population mean number of elite cases: 4.21
Count of perfect (error zero) individuals by case: (272 570 203 202 581 286 853 858 95 286)
Population mean number of perfect (error zero) cases: 4.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction boolean_dup} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Best program: (in1 boolean_dup tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (boolean_or integer_eq in1 exec_k_when_autoconstructing (integer_pop in2 exec_pop ()) ()) ()) ())))
Errors: [1 0 0 0 0 1 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 23
Size: 38
Percent parens: 0.395
--- Population Statistics ---
Average total errors in population: 5.794
Median total errors in population: 5
Error averages by case: (0.728 0.43 0.797 0.798 0.419 0.714 0.147 0.142 0.905 0.714)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.789
Average program size in population (points): 41.427
Average percent parens in population: 0.401
Minimum age in population: 44.27755220234394
Maximum age in population: 49.07754620257765
Average age in population: 47.01446865801699
Median age in population: 47.07417464721948
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 212
Genome diversity (% unique genomes):	 0.564
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 216
Syntactic diversity (% unique Push programs):	 0.543
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 14068092
--- Timings ---
Current time: 1559314711380 milliseconds
Total Time:          96.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.8 seconds, 72.7%
Fitness Testing:     16.1 seconds, 16.8%
Report:              10.0 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 644
Test mean error for best: 0.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: 42                 
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 76                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 56                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 79                 
Correct output: 27                  | Program output: 48                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 58                 
Correct output: 25                  | Program output: 59                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 75                 
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 48                 
Correct output: 18                  | Program output: 87                 
Correct output: 26                  | Program output: 79                 
Correct output: 40                  | Program output: 40                 
Correct output: 28                  | Program output: 28                 
Correct output: 42                  | Program output: 88                 
Correct output: -41                 | Program output: 82                 
Correct output: -83                 | Program output: 52                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: 76                 
Correct output: -45                 | Program output: -7                 
Correct output: -21                 | Program output: 82                 
Correct output: -95                 | Program output: 75                 
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: 0                  
Correct output: -65                 | Program output: -39                
Correct output: -99                 | Program output: -58                
Correct output: -44                 | Program output: 54                 
Correct output: -98                 | Program output: -79                
Correct output: -40                 | Program output: 90                 
Correct output: -100                | Program output: 76                 
Correct output: -94                 | Program output: -83                
Correct output: -79                 | Program output: -17                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output: 58                 
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: 28                 
Correct output: -96                 | Program output: 33                 
Correct output: 10                  | Program output: 60                 
Correct output: -36                 | Program output: -9                 
Correct output: -85                 | Program output: 92                 
Correct output: -83                 | Program output: -2                 
Correct output: -22                 | Program output: 60                 
Correct output: -74                 | Program output: 50                 
Correct output: -100                | Program output: 70                 
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -70                
Correct output: -99                 | Program output: 93                 
Correct output: -80                 | Program output: -26                
Correct output: -63                 | Program output: 64                 
Correct output: -69                 | Program output: -62                
Correct output: -69                 | Program output: 92                 
Correct output: 24                  | Program output: 24                 
Correct output: -28                 | Program output: 59                 
Correct output: -15                 | Program output: 56                 
Correct output: -43                 | Program output: -36                
Correct output: -70                 | Program output: 31                 
Correct output: -31                 | Program output: -31                
Correct output: -26                 | Program output: -25                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: 56                 
Correct output: -95                 | Program output: 49                 
Correct output: -77                 | Program output: 43                 
Correct output: -48                 | Program output: 15                 
Correct output: -50                 | Program output: 38                 
Correct output: -86                 | Program output: -73                
Correct output: -46                 | Program output: -30                
Correct output: -86                 | Program output: 49                 
Correct output: -39                 | Program output: -15                
Correct output: -58                 | Program output: 42                 
Correct output: -84                 | Program output: 41                 
Correct output: -66                 | Program output: 68                 
Correct output: -65                 | Program output: 17                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction integer_lte})
Lexicase best program: (boolean_invert_second_then_and 87 integer_yank tag_integer_865 boolean_flush tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (integer_yank exec_k_when_autoconstructing () (print_integer exec_if (exec_if () (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop in2 integer_lte) ()))) ()))))
Lexicase best errors: [0 0 0 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 40
Percent parens: 0.375
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction integer_lte})
Zero cases best program: (boolean_invert_second_then_and 87 integer_yank tag_integer_865 boolean_flush tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (integer_yank exec_k_when_autoconstructing () (print_integer exec_if (exec_if () (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop in2 integer_lte) ()))) ()))))
Zero cases best errors: [0 0 0 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 40
Percent parens: 0.375
--- Lexicase Population Statistics ---
Count of elite individuals by case: (840 316 841 146 317 316 146 317 316 140)
Population mean number of elite cases: 3.69
Count of perfect (error zero) individuals by case: (840 316 841 146 317 316 146 317 316 140)
Population mean number of perfect (error zero) cases: 3.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Best program: (in1 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer exec_if (exec_if () (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop in2 exec_pop ()) ()))) ()))) ())
Errors: [0 0 0 1 0 0 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 25
Size: 43
Percent parens: 0.419
--- Population Statistics ---
Average total errors in population: 6.305
Median total errors in population: 7
Error averages by case: (0.16 0.684 0.159 0.854 0.683 0.684 0.854 0.683 0.684 0.86)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.115
Average program size in population (points): 41.835
Average percent parens in population: 0.399
Minimum age in population: 46.01943787932396
Maximum age in population: 50.66068983217701
Average age in population: 48.58249041249929
Median age in population: 48.67400077637285
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 83
Genome diversity (% unique genomes):	 0.626
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 86
Syntactic diversity (% unique Push programs):	 0.599
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 14449102
--- Timings ---
Current time: 1559314714515 milliseconds
Total Time:          99.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.2 seconds, 72.9%
Fitness Testing:     16.5 seconds, 16.6%
Report:              10.3 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 673
Test mean error for best: 0.67300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 84                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 55                 
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 68                 
Correct output: 16                  | Program output: 54                 
Correct output: 11                  | Program output: 68                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 80                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 89                 
Correct output: 6                   | Program output: 51                 
Correct output: 12                  | Program output: 34                 
Correct output: 1                   | Program output: 93                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 48                 
Correct output: 28                  | Program output: 78                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: 75                 
Correct output: -88                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: 81                 
Correct output: -78                 | Program output: 19                 
Correct output: -45                 | Program output: 82                 
Correct output: -30                 | Program output: 3                  
Correct output: -91                 | Program output: 49                 
Correct output: -65                 | Program output: 26                 
Correct output: -99                 | Program output: 67                 
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: 9                  
Correct output: -94                 | Program output: 61                 
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: 41                 
Correct output: -76                 | Program output: 12                 
Correct output: -41                 | Program output: 62                 
Correct output: -77                 | Program output: 8                  
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: 48                 
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 84                 
Correct output: -22                 | Program output: 70                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 89                 
Correct output: -78                 | Program output: 4                  
Correct output: -29                 | Program output: 14                 
Correct output: -98                 | Program output: 88                 
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -72                
Correct output: -63                 | Program output: -34                
Correct output: -69                 | Program output: 48                 
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 89                 
Correct output: -28                 | Program output: 78                 
Correct output: -15                 | Program output: 63                 
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: 94                 
Correct output: -26                 | Program output: 33                 
Correct output: -57                 | Program output: 50                 
Correct output: -97                 | Program output: -93                
Correct output: -95                 | Program output: -73                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -32                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: 51                 
Correct output: -46                 | Program output: 42                 
Correct output: -86                 | Program output: 67                 
Correct output: -39                 | Program output: 13                 
Correct output: -58                 | Program output: 43                 
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -46                
Correct output: -65                 | Program output: 89                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Lexicase best program: (87 integer_yank tag_integer_865 exec_when (exec_swap (in1 tag_integer_340 exec_if (exec_empty) (integer_yankdup)) (in3 print_boolean exec_k_when_autoconstructing () (print_integer) print_integer exec_if (exec_if () (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop in2 exec_pop ()) ()))) ())))
Lexicase best errors: [1 0 1 0 1 1 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 39
Percent parens: 0.410
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Zero cases best program: (87 integer_yank tag_integer_865 exec_when (exec_swap (in1 tag_integer_340 exec_if (exec_empty) (integer_yankdup)) (in3 print_boolean exec_k_when_autoconstructing () (print_integer) print_integer exec_if (exec_if () (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop in2 exec_pop ()) ()))) ())))
Zero cases best errors: [1 0 1 0 1 1 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 39
Percent parens: 0.410
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 210 111 210 517 111 210 517 1000 111)
Population mean number of elite cases: 4.00
Count of perfect (error zero) individuals by case: (0 210 111 210 517 111 210 517 0 111)
Population mean number of perfect (error zero) cases: 2.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction 87} {:close 0, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Best program: (87 integer_yank tag_integer_865 exec_when (exec_swap (in1 tag_integer_340 exec_if (exec_empty) (integer_yankdup)) (in3 print_boolean exec_k_when_autoconstructing () (print_integer) print_integer exec_if (exec_if () (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop in2 exec_pop ()) ()))) ())))
Errors: [1 0 1 0 1 1 0 1 1 1]
Total: 7
Mean: 0.7
Genome size: 23
Size: 39
Percent parens: 0.410
--- Population Statistics ---
Average total errors in population: 8.003
Median total errors in population: 8
Error averages by case: (1.0 0.79 0.889 0.79 0.483 0.889 0.79 0.483 1.0 0.889)
Error minima by case: (1 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 24.724
Average program size in population (points): 41.008
Average percent parens in population: 0.396
Minimum age in population: 47.46003521978855
Maximum age in population: 51.92964262911119
Average age in population: 49.96254110658844
Median age in population: 50.02174106740858
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 75
Genome diversity (% unique genomes):	 0.6
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 79
Syntactic diversity (% unique Push programs):	 0.571
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 14801169
--- Timings ---
Current time: 1559314717341 milliseconds
Total Time:         102.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.4 seconds, 73.0%
Fitness Testing:     16.9 seconds, 16.5%
Report:              10.6 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 673
Test mean error for best: 0.67300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 84                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 55                 
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 68                 
Correct output: 16                  | Program output: 54                 
Correct output: 11                  | Program output: 68                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 80                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 89                 
Correct output: 6                   | Program output: 51                 
Correct output: 12                  | Program output: 34                 
Correct output: 1                   | Program output: 93                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 48                 
Correct output: 28                  | Program output: 78                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: 75                 
Correct output: -88                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: 81                 
Correct output: -78                 | Program output: 19                 
Correct output: -45                 | Program output: 82                 
Correct output: -30                 | Program output: 3                  
Correct output: -91                 | Program output: 49                 
Correct output: -65                 | Program output: 26                 
Correct output: -99                 | Program output: 67                 
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: 9                  
Correct output: -94                 | Program output: 61                 
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: 41                 
Correct output: -76                 | Program output: 12                 
Correct output: -41                 | Program output: 62                 
Correct output: -77                 | Program output: 8                  
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: 48                 
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 84                 
Correct output: -22                 | Program output: 70                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 89                 
Correct output: -78                 | Program output: 4                  
Correct output: -29                 | Program output: 14                 
Correct output: -98                 | Program output: 88                 
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -72                
Correct output: -63                 | Program output: -34                
Correct output: -69                 | Program output: 48                 
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 89                 
Correct output: -28                 | Program output: 78                 
Correct output: -15                 | Program output: 63                 
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: 94                 
Correct output: -26                 | Program output: 33                 
Correct output: -57                 | Program output: 50                 
Correct output: -97                 | Program output: -93                
Correct output: -95                 | Program output: -73                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -32                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: 51                 
Correct output: -46                 | Program output: 42                 
Correct output: -86                 | Program output: 67                 
Correct output: -39                 | Program output: 13                 
Correct output: -58                 | Program output: 43                 
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -46                
Correct output: -65                 | Program output: 89                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 2, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Lexicase best program: (87 integer_yank tag_integer_865 exec_when (exec_swap (in1 tag_integer_340 exec_if (boolean_dup_items) (integer_yankdup)) (in3 print_boolean exec_k_when_autoconstructing () (print_integer) print_integer exec_if (exec_if () (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop in2 exec_pop ()) ()))) ())))
Lexicase best errors: [0 1 0 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 39
Percent parens: 0.410
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction boolean_dup_items} {:close 2, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Zero cases best program: (87 integer_yank tag_integer_865 exec_when (exec_swap (in1 tag_integer_340 exec_if (boolean_dup_items) (integer_yankdup)) (in3 print_boolean exec_k_when_autoconstructing () (print_integer) print_integer exec_if (exec_if () (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop in2 exec_pop ()) ()))) ())))
Zero cases best errors: [0 1 0 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 39
Percent parens: 0.410
--- Lexicase Population Statistics ---
Count of elite individuals by case: (347 209 882 347 1000 347 347 325 209 325)
Population mean number of elite cases: 4.34
Count of perfect (error zero) individuals by case: (347 209 882 347 0 347 347 325 209 325)
Population mean number of perfect (error zero) cases: 3.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction integer_gte} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Best program: (87 integer_yank tag_integer_865 exec_when (exec_swap (in1 tag_integer_340 exec_if (exec_empty) (integer_gte)) (in3 print_boolean exec_k_when_autoconstructing () (print_integer) print_integer exec_if (exec_if () (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop in2 exec_pop ()) ()))) ())))
Errors: [0 1 0 0 1 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 23
Size: 39
Percent parens: 0.410
--- Population Statistics ---
Average total errors in population: 6.662
Median total errors in population: 7
Error averages by case: (0.653 0.791 0.118 0.653 1.0 0.653 0.653 0.675 0.791 0.675)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 24.613
Average program size in population (points): 40.902
Average percent parens in population: 0.398
Minimum age in population: 48.91401126980782
Maximum age in population: 53.53277875808999
Average age in population: 51.50919220793608
Median age in population: 51.5606003976427
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 85
Genome diversity (% unique genomes):	 0.572
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 92
Syntactic diversity (% unique Push programs):	 0.549
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 15153378
--- Timings ---
Current time: 1559314720018 milliseconds
Total Time:         104.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.5 seconds, 73.1%
Fitness Testing:     17.2 seconds, 16.5%
Report:              10.8 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 673
Test mean error for best: 0.67300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 84                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 55                 
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 68                 
Correct output: 16                  | Program output: 54                 
Correct output: 11                  | Program output: 68                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 80                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 89                 
Correct output: 6                   | Program output: 51                 
Correct output: 12                  | Program output: 34                 
Correct output: 1                   | Program output: 93                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 48                 
Correct output: 28                  | Program output: 78                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: 75                 
Correct output: -88                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: 81                 
Correct output: -78                 | Program output: 19                 
Correct output: -45                 | Program output: 82                 
Correct output: -30                 | Program output: 3                  
Correct output: -91                 | Program output: 49                 
Correct output: -65                 | Program output: 26                 
Correct output: -99                 | Program output: 67                 
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: 9                  
Correct output: -94                 | Program output: 61                 
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: 41                 
Correct output: -76                 | Program output: 12                 
Correct output: -41                 | Program output: 62                 
Correct output: -77                 | Program output: 8                  
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: 48                 
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 84                 
Correct output: -22                 | Program output: 70                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 89                 
Correct output: -78                 | Program output: 4                  
Correct output: -29                 | Program output: 14                 
Correct output: -98                 | Program output: 88                 
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -72                
Correct output: -63                 | Program output: -34                
Correct output: -69                 | Program output: 48                 
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 89                 
Correct output: -28                 | Program output: 78                 
Correct output: -15                 | Program output: 63                 
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: 94                 
Correct output: -26                 | Program output: 33                 
Correct output: -57                 | Program output: 50                 
Correct output: -97                 | Program output: -93                
Correct output: -95                 | Program output: -73                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -32                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: 51                 
Correct output: -46                 | Program output: 42                 
Correct output: -86                 | Program output: 67                 
Correct output: -39                 | Program output: 13                 
Correct output: -58                 | Program output: 43                 
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -46                
Correct output: -65                 | Program output: 89                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Lexicase best program: (87 integer_yank tag_integer_865 exec_when (exec_swap (in1 tag_integer_340 exec_if (exec_empty) (integer_yankdup)) (in3 print_boolean exec_k_when_autoconstructing () (print_integer) print_integer exec_if (exec_if () (exec_shove (exec_flush exec_k_when_autoconstructing (integer_pop in2 exec_pop ()) ()))) ())))
Lexicase best errors: [0 1 0 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 39
Percent parens: 0.410
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Zero cases best program: (87 integer_yank tag_integer_865 exec_when (exec_swap (in1 tag_integer_340 exec_if (exec_empty) (integer_yankdup)) (in3 print_boolean exec_k_when_autoconstructing () (print_integer) print_integer exec_if (exec_if () (exec_shove (exec_flush exec_k_when_autoconstructing (integer_pop in2 exec_pop ()) ()))) ())))
Zero cases best errors: [0 1 0 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 39
Percent parens: 0.410
--- Lexicase Population Statistics ---
Count of elite individuals by case: (638 1000 637 197 866 228 441 441 867 198)
Population mean number of elite cases: 5.51
Count of perfect (error zero) individuals by case: (638 0 637 197 866 228 441 441 867 198)
Population mean number of perfect (error zero) cases: 4.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_flush} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Best program: (87 integer_yank tag_integer_865 exec_when (exec_swap (exec_flush tag_integer_340 exec_if (exec_empty) (integer_yankdup)) (in3 print_boolean exec_k_when_autoconstructing () (print_integer) print_integer exec_if (exec_if () (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop in2 exec_pop ()) ()))) ())))
Errors: [0 1 0 1 0 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 23
Size: 39
Percent parens: 0.410
--- Population Statistics ---
Average total errors in population: 5.487
Median total errors in population: 4
Error averages by case: (0.362 1.0 0.363 0.803 0.134 0.772 0.559 0.559 0.133 0.802)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.142
Average program size in population (points): 40.174
Average percent parens in population: 0.398
Minimum age in population: 49.92627543397248
Maximum age in population: 55.44963705312693
Average age in population: 52.99624100823246
Median age in population: 53.05574057047488
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 91
Genome diversity (% unique genomes):	 0.611
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 99
Syntactic diversity (% unique Push programs):	 0.593
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 15475139
--- Timings ---
Current time: 1559314722597 milliseconds
Total Time:         107.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        78.6 seconds, 73.2%
Fitness Testing:     17.6 seconds, 16.4%
Report:              11.0 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 92                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 38                 
Correct output: 17                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 46                 
Correct output: 16                  | Program output: 94                 
Correct output: 11                  | Program output: 11                 
Correct output: 25                  | Program output: 60                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 92                 
Correct output: 8                   | Program output: 83                 
Correct output: 6                   | Program output: 50                 
Correct output: 12                  | Program output: 56                 
Correct output: 1                   | Program output: 42                 
Correct output: 18                  | Program output: 97                 
Correct output: 26                  | Program output: 42                 
Correct output: 40                  | Program output: 56                 
Correct output: 28                  | Program output: 36                 
Correct output: 42                  | Program output: 58                 
Correct output: -41                 | Program output: 100                
Correct output: -83                 | Program output: -12                
Correct output: -71                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -45                 | Program output: 45                 
Correct output: -21                 | Program output: 26                 
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: 42                 
Correct output: -45                 | Program output: 98                 
Correct output: -30                 | Program output: 38                 
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: 79                 
Correct output: -44                 | Program output: 1                  
Correct output: -98                 | Program output: 1                  
Correct output: -40                 | Program output: -2                 
Correct output: -100                | Program output: 67                 
Correct output: -94                 | Program output: 34                 
Correct output: -79                 | Program output: 33                 
Correct output: -43                 | Program output: 81                 
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -3                 
Correct output: -77                 | Program output: -47                
Correct output: -96                 | Program output: 46                 
Correct output: 10                  | Program output: 20                 
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 96                 
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: 49                 
Correct output: -100                | Program output: 72                 
Correct output: -78                 | Program output: 56                 
Correct output: -29                 | Program output: 54                 
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -59                
Correct output: -63                 | Program output: -63                
Correct output: -69                 | Program output: 3                  
Correct output: -69                 | Program output: 93                 
Correct output: 24                  | Program output: 79                 
Correct output: -28                 | Program output: 14                 
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: 40                 
Correct output: -70                 | Program output: -20                
Correct output: -31                 | Program output: -29                
Correct output: -26                 | Program output: -14                
Correct output: -57                 | Program output: -1                 
Correct output: -97                 | Program output: -19                
Correct output: -95                 | Program output: -78                
Correct output: -77                 | Program output: -45                
Correct output: -48                 | Program output: -30                
Correct output: -50                 | Program output: -3                 
Correct output: -86                 | Program output: 39                 
Correct output: -46                 | Program output: 12                 
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -28                
Correct output: -66                 | Program output: -26                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 2, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or})
Lexicase best program: (exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (boolean_or integer_eq in1 boolean_pop exec_dup (exec_s_when_autoconstructing () (integer_lte boolean_dup integer_rot) (exec_while ()) exec_k_when_autoconstructing (boolean_or) ())) ()) ())))
Lexicase best errors: [0 1 1 1 1 0 0 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 43
Percent parens: 0.442
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 2, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or})
Zero cases best program: (exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (boolean_or integer_eq in1 boolean_pop exec_dup (exec_s_when_autoconstructing () (integer_lte boolean_dup integer_rot) (exec_while ()) exec_k_when_autoconstructing (boolean_or) ())) ()) ())))
Zero cases best errors: [0 1 1 1 1 0 0 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 43
Percent parens: 0.442
--- Lexicase Population Statistics ---
Count of elite individuals by case: (375 125 1000 1000 1000 375 869 1000 367 367)
Population mean number of elite cases: 6.48
Count of perfect (error zero) individuals by case: (375 125 0 0 0 375 869 0 367 367)
Population mean number of perfect (error zero) cases: 2.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction 87} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction exec_pop} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_s_when_autoconstructing})
Best program: (87 integer_yank boolean_frominteger exec_pop () integer_rot boolean_flush exec_swap (in1 tag_integer_340 exec_if (integer_yank) (exec_swap (in1 tag_integer_340 exec_if (exec_empty) (integer_yankdup)) (exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) boolean_dup integer_eq in1 boolean_pop exec_dup (exec_s_when_autoconstructing () () ()))))) ())
Errors: [0 1 1 1 1 0 0 1 1 1]
Total: 7
Mean: 0.7
Genome size: 27
Size: 44
Percent parens: 0.386
--- Population Statistics ---
Average total errors in population: 7.522
Median total errors in population: 7
Error averages by case: (0.625 0.875 1.0 1.0 1.0 0.625 0.131 1.0 0.633 0.633)
Error minima by case: (0 0 1 1 1 0 0 1 0 0)
Average genome size in population (length): 24.373
Average program size in population (points): 40.478
Average percent parens in population: 0.397
Minimum age in population: 51.05169822461903
Maximum age in population: 56.68886895928881
Average age in population: 54.52012014261086
Median age in population: 54.56792622864305
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 54
Genome diversity (% unique genomes):	 0.627
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.609
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 15826102
--- Timings ---
Current time: 1559314725513 milliseconds
Total Time:         110.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        80.9 seconds, 73.4%
Fitness Testing:     17.9 seconds, 16.3%
Report:              11.2 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 673
Test mean error for best: 0.67300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 84                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 55                 
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 68                 
Correct output: 16                  | Program output: 54                 
Correct output: 11                  | Program output: 68                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 80                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 89                 
Correct output: 6                   | Program output: 51                 
Correct output: 12                  | Program output: 34                 
Correct output: 1                   | Program output: 93                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 48                 
Correct output: 28                  | Program output: 78                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: 75                 
Correct output: -88                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: 81                 
Correct output: -78                 | Program output: 19                 
Correct output: -45                 | Program output: 82                 
Correct output: -30                 | Program output: 3                  
Correct output: -91                 | Program output: 49                 
Correct output: -65                 | Program output: 26                 
Correct output: -99                 | Program output: 67                 
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: 9                  
Correct output: -94                 | Program output: 61                 
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: 41                 
Correct output: -76                 | Program output: 12                 
Correct output: -41                 | Program output: 62                 
Correct output: -77                 | Program output: 8                  
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: 48                 
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 84                 
Correct output: -22                 | Program output: 70                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 89                 
Correct output: -78                 | Program output: 4                  
Correct output: -29                 | Program output: 14                 
Correct output: -98                 | Program output: 88                 
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -72                
Correct output: -63                 | Program output: -34                
Correct output: -69                 | Program output: 48                 
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 89                 
Correct output: -28                 | Program output: 78                 
Correct output: -15                 | Program output: 63                 
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: 94                 
Correct output: -26                 | Program output: 33                 
Correct output: -57                 | Program output: 50                 
Correct output: -97                 | Program output: -93                
Correct output: -95                 | Program output: -73                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -32                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: 51                 
Correct output: -46                 | Program output: 42                 
Correct output: -86                 | Program output: 67                 
Correct output: -39                 | Program output: 13                 
Correct output: -58                 | Program output: 43                 
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -46                
Correct output: -65                 | Program output: 89                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction in2})
Lexicase best program: (87 integer_yank tag_integer_865 exec_if (exec_empty) (integer_yankdup) in3 integer_mult exec_k_when_autoconstructing () (print_integer) print_integer exec_if (exec_if () (integer_empty tagged_478 exec_k_when_autoconstructing (integer_pop in2) ())) ())
Lexicase best errors: [1 0 1 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 29
Percent parens: 0.379
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_if} {:close 0, :instruction integer_empty} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction in2})
Zero cases best program: (87 integer_yank tag_integer_865 exec_if (exec_empty) (integer_yankdup) in3 integer_mult exec_k_when_autoconstructing () (print_integer) print_integer exec_if (exec_if () (integer_empty tagged_478 exec_k_when_autoconstructing (integer_pop in2) ())) ())
Zero cases best errors: [1 0 1 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 29
Percent parens: 0.379
--- Lexicase Population Statistics ---
Count of elite individuals by case: (175 363 339 1000 364 339 364 364 881 175)
Population mean number of elite cases: 4.36
Count of perfect (error zero) individuals by case: (175 363 339 0 364 339 364 364 881 175)
Population mean number of perfect (error zero) cases: 3.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_505} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Best program: (87 integer_yank tag_integer_865 exec_when (exec_swap (in1 tag_integer_340 exec_if (exec_empty) (integer_yankdup)) (in3 print_boolean exec_k_when_autoconstructing () (print_integer) print_integer print_boolean exec_k_when_autoconstructing () (print_integer) print_integer exec_if (exec_if () (exec_shove (tagged_505 exec_k_when_autoconstructing (integer_pop in2 exec_pop ()) ()))) ())))
Errors: [1 0 1 1 0 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 27
Size: 45
Percent parens: 0.400
--- Population Statistics ---
Average total errors in population: 6.636
Median total errors in population: 7
Error averages by case: (0.825 0.637 0.661 1.0 0.636 0.661 0.636 0.636 0.119 0.825)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 24.193
Average program size in population (points): 40.143
Average percent parens in population: 0.397
Minimum age in population: 52.65591083094478
Maximum age in population: 57.87951041477208
Average age in population: 56.0068005329951
Median age in population: 56.09331123772427
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 27
Genome diversity (% unique genomes):	 0.657
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.629
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 16171711
--- Timings ---
Current time: 1559314728196 milliseconds
Total Time:         112.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        82.9 seconds, 73.5%
Fitness Testing:     18.3 seconds, 16.2%
Report:              11.5 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 92                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 38                 
Correct output: 17                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 46                 
Correct output: 16                  | Program output: 94                 
Correct output: 11                  | Program output: 11                 
Correct output: 25                  | Program output: 60                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 92                 
Correct output: 8                   | Program output: 83                 
Correct output: 6                   | Program output: 50                 
Correct output: 12                  | Program output: 56                 
Correct output: 1                   | Program output: 42                 
Correct output: 18                  | Program output: 97                 
Correct output: 26                  | Program output: 42                 
Correct output: 40                  | Program output: 56                 
Correct output: 28                  | Program output: 36                 
Correct output: 42                  | Program output: 58                 
Correct output: -41                 | Program output: 100                
Correct output: -83                 | Program output: -12                
Correct output: -71                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -45                 | Program output: 45                 
Correct output: -21                 | Program output: 26                 
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: 42                 
Correct output: -45                 | Program output: 98                 
Correct output: -30                 | Program output: 38                 
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: 79                 
Correct output: -44                 | Program output: 1                  
Correct output: -98                 | Program output: 1                  
Correct output: -40                 | Program output: -2                 
Correct output: -100                | Program output: 67                 
Correct output: -94                 | Program output: 34                 
Correct output: -79                 | Program output: 33                 
Correct output: -43                 | Program output: 81                 
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -3                 
Correct output: -77                 | Program output: -47                
Correct output: -96                 | Program output: 46                 
Correct output: 10                  | Program output: 20                 
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 96                 
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: 49                 
Correct output: -100                | Program output: 72                 
Correct output: -78                 | Program output: 56                 
Correct output: -29                 | Program output: 54                 
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -59                
Correct output: -63                 | Program output: -63                
Correct output: -69                 | Program output: 3                  
Correct output: -69                 | Program output: 93                 
Correct output: 24                  | Program output: 79                 
Correct output: -28                 | Program output: 14                 
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: 40                 
Correct output: -70                 | Program output: -20                
Correct output: -31                 | Program output: -29                
Correct output: -26                 | Program output: -14                
Correct output: -57                 | Program output: -1                 
Correct output: -97                 | Program output: -19                
Correct output: -95                 | Program output: -78                
Correct output: -77                 | Program output: -45                
Correct output: -48                 | Program output: -30                
Correct output: -50                 | Program output: -3                 
Correct output: -86                 | Program output: 39                 
Correct output: -46                 | Program output: 12                 
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -28                
Correct output: -66                 | Program output: -26                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 2, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 2, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or})
Lexicase best program: (integer_rot boolean_pop integer_yank tag_integer_865 exec_if (exec_empty exec_while ()) (exec_dup (print_boolean exec_k_when_autoconstructing (print_integer) (exec_if (integer_yank boolean_or) (integer_eq in1 boolean_pop exec_dup (exec_s_when_autoconstructing () (integer_lte boolean_dup integer_rot) (exec_while ()) exec_k_when_autoconstructing (boolean_or) ()))))))
Lexicase best errors: [0 1 1 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 41
Percent parens: 0.390
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_if} {:close 0, :instruction exec_empty} {:close 2, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_rot} {:close 2, :instruction exec_while} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_or})
Zero cases best program: (integer_rot boolean_pop integer_yank tag_integer_865 exec_if (exec_empty exec_while ()) (exec_dup (print_boolean exec_k_when_autoconstructing (print_integer) (exec_if (integer_yank boolean_or) (integer_eq in1 boolean_pop exec_dup (exec_s_when_autoconstructing () (integer_lte boolean_dup integer_rot) (exec_while ()) exec_k_when_autoconstructing (boolean_or) ()))))))
Zero cases best errors: [0 1 1 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 41
Percent parens: 0.390
--- Lexicase Population Statistics ---
Count of elite individuals by case: (221 1 1 200 221 675 222 454 454 221)
Population mean number of elite cases: 2.67
Count of perfect (error zero) individuals by case: (221 1 1 200 221 675 222 454 454 221)
Population mean number of perfect (error zero) cases: 2.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_rot})
Best program: (in1 integer_yank tag_integer_865 boolean_flush exec_swap (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) (in1 tag_integer_340 exec_if (exec_empty) (boolean_dup_times)) exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (boolean_empty integer_eq in1 boolean_pop exec_dup (exec_s_when_autoconstructing () (integer_lte integer_rot) ())) ()) ()))
Errors: [0 1 1 1 0 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 29
Size: 47
Percent parens: 0.383
--- Population Statistics ---
Average total errors in population: 7.33
Median total errors in population: 7
Error averages by case: (0.779 0.999 0.999 0.8 0.779 0.325 0.778 0.546 0.546 0.779)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.171
Average program size in population (points): 39.96
Average percent parens in population: 0.394
Minimum age in population: 53.79294824413955
Maximum age in population: 59.6327940611518
Average age in population: 57.54616757825675
Median age in population: 57.62985677437973
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 31
Genome diversity (% unique genomes):	 0.648
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.621
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 16497120
--- Timings ---
Current time: 1559314730956 milliseconds
Total Time:         115.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        85.0 seconds, 73.6%
Fitness Testing:     18.6 seconds, 16.1%
Report:              11.7 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: 17                 
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 70                 
Correct output: 5                   | Program output: 44                 
Correct output: 1                   | Program output: 14                 
Correct output: 17                  | Program output: 63                 
Correct output: 27                  | Program output: 50                 
Correct output: 11                  | Program output: 18                 
Correct output: 16                  | Program output: 46                 
Correct output: 11                  | Program output: 43                 
Correct output: 25                  | Program output: 73                 
Correct output: 13                  | Program output: 13                 
Correct output: 34                  | Program output: 35                 
Correct output: 8                   | Program output: 48                 
Correct output: 6                   | Program output: 49                 
Correct output: 12                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 19                 
Correct output: 26                  | Program output: 37                 
Correct output: 40                  | Program output: 45                 
Correct output: 28                  | Program output: 53                 
Correct output: 42                  | Program output: 58                 
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: 59                 
Correct output: -71                 | Program output: 40                 
Correct output: -88                 | Program output: 87                 
Correct output: -45                 | Program output: 1                  
Correct output: -21                 | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: -73                
Correct output: -45                 | Program output: 95                 
Correct output: -30                 | Program output: 72                 
Correct output: -91                 | Program output: -57                
Correct output: -65                 | Program output: 93                 
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: 85                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -39                
Correct output: -43                 | Program output: 90                 
Correct output: -76                 | Program output: -70                
Correct output: -41                 | Program output: 64                 
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -30                
Correct output: 10                  | Program output: 91                 
Correct output: -36                 | Program output: 92                 
Correct output: -85                 | Program output: 45                 
Correct output: -83                 | Program output: 11                 
Correct output: -22                 | Program output: 71                 
Correct output: -74                 | Program output: 14                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: 34                 
Correct output: -29                 | Program output: -25                
Correct output: -98                 | Program output: 7                  
Correct output: -99                 | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -6                 
Correct output: -69                 | Program output: -69                
Correct output: -69                 | Program output: -54                
Correct output: 24                  | Program output: 49                 
Correct output: -28                 | Program output: -28                
Correct output: -15                 | Program output: 59                 
Correct output: -43                 | Program output: -37                
Correct output: -70                 | Program output: -2                 
Correct output: -31                 | Program output: 84                 
Correct output: -26                 | Program output: -26                
Correct output: -57                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: 32                 
Correct output: -48                 | Program output: -48                
Correct output: -50                 | Program output: 47                 
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: -46                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: 80                 
Correct output: -58                 | Program output: -30                
Correct output: -84                 | Program output: 34                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Lexicase best program: (exec_do*while (integer_yank) integer_yank tag_integer_865 exec_when (exec_swap (in1 tag_integer_865) (exec_when (exec_swap (in1 tag_integer_451 exec_if (exec_empty) (integer_yankdup)) (in4 print_boolean exec_k_when_autoconstructing () (print_integer) print_integer exec_if (exec_if () (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop in2 exec_pop ()) ()))) ())))))
Lexicase best errors: [0 0 0 1 1 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 48
Percent parens: 0.417
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Zero cases best program: (exec_do*while (integer_yank) integer_yank tag_integer_865 exec_when (exec_swap (in1 tag_integer_865) (exec_when (exec_swap (in1 tag_integer_451 exec_if (exec_empty) (integer_yankdup)) (in4 print_boolean exec_k_when_autoconstructing () (print_integer) print_integer exec_if (exec_if () (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop in2 exec_pop ()) ()))) ())))))
Zero cases best errors: [0 0 0 1 1 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 48
Percent parens: 0.417
--- Lexicase Population Statistics ---
Count of elite individuals by case: (194 867 193 204 205 194 204 194 372 194)
Population mean number of elite cases: 2.82
Count of perfect (error zero) individuals by case: (194 867 193 204 205 194 204 194 372 194)
Population mean number of perfect (error zero) cases: 2.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Best program: (exec_do*while (integer_yank) tag_integer_865 exec_when (exec_swap (in1 tag_integer_451 exec_if (exec_empty) (integer_yankdup)) (in4 print_boolean exec_k_when_autoconstructing () (print_integer) print_integer exec_if (exec_if () (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop in2 exec_pop ()) ()))) ())))
Errors: [0 0 0 1 1 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 23
Size: 40
Percent parens: 0.425
--- Population Statistics ---
Average total errors in population: 7.179
Median total errors in population: 8
Error averages by case: (0.806 0.133 0.807 0.796 0.795 0.806 0.796 0.806 0.628 0.806)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.928
Average program size in population (points): 39.965
Average percent parens in population: 0.401
Minimum age in population: 56.09159681759775
Maximum age in population: 61.17662920307339
Average age in population: 59.41558780071582
Median age in population: 59.48991154763644
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 149
Genome diversity (% unique genomes):	 0.617
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 151
Syntactic diversity (% unique Push programs):	 0.603
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 16828891
--- Timings ---
Current time: 1559314733583 milliseconds
Total Time:         118.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        87.1 seconds, 73.7%
Fitness Testing:     19.0 seconds, 16.0%
Report:              12.0 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 673
Test mean error for best: 0.67300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 84                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 55                 
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 68                 
Correct output: 16                  | Program output: 54                 
Correct output: 11                  | Program output: 68                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 80                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 89                 
Correct output: 6                   | Program output: 51                 
Correct output: 12                  | Program output: 34                 
Correct output: 1                   | Program output: 93                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 48                 
Correct output: 28                  | Program output: 78                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: 75                 
Correct output: -88                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: 81                 
Correct output: -78                 | Program output: 19                 
Correct output: -45                 | Program output: 82                 
Correct output: -30                 | Program output: 3                  
Correct output: -91                 | Program output: 49                 
Correct output: -65                 | Program output: 26                 
Correct output: -99                 | Program output: 67                 
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: 9                  
Correct output: -94                 | Program output: 61                 
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: 41                 
Correct output: -76                 | Program output: 12                 
Correct output: -41                 | Program output: 62                 
Correct output: -77                 | Program output: 8                  
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: 48                 
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 84                 
Correct output: -22                 | Program output: 70                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 89                 
Correct output: -78                 | Program output: 4                  
Correct output: -29                 | Program output: 14                 
Correct output: -98                 | Program output: 88                 
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -72                
Correct output: -63                 | Program output: -34                
Correct output: -69                 | Program output: 48                 
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 89                 
Correct output: -28                 | Program output: 78                 
Correct output: -15                 | Program output: 63                 
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: 94                 
Correct output: -26                 | Program output: 33                 
Correct output: -57                 | Program output: 50                 
Correct output: -97                 | Program output: -93                
Correct output: -95                 | Program output: -73                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -32                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: 51                 
Correct output: -46                 | Program output: 42                 
Correct output: -86                 | Program output: 67                 
Correct output: -39                 | Program output: 13                 
Correct output: -58                 | Program output: 43                 
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -46                
Correct output: -65                 | Program output: 89                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Lexicase best program: (exec_do*while (integer_yank) tag_integer_865 exec_when (exec_swap (in1 tag_integer_451 exec_if (exec_empty) (integer_yankdup)) (in4 print_boolean exec_k_when_autoconstructing () (exec_do*count () print_integer exec_if (exec_if () (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop in2 exec_pop ()) ()))) ()))))
Lexicase best errors: [1 0 1 0 1 1 0 0 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 41
Percent parens: 0.439
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Zero cases best program: (exec_do*while (integer_yank) tag_integer_865 exec_when (exec_swap (in1 tag_integer_451 exec_if (exec_empty) (integer_yankdup)) (in4 print_boolean exec_k_when_autoconstructing () (exec_do*count () print_integer exec_if (exec_if () (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop in2 exec_pop ()) ()))) ()))))
Zero cases best errors: [1 0 1 0 1 1 0 0 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 41
Percent parens: 0.439
--- Lexicase Population Statistics ---
Count of elite individuals by case: (295 573 77 881 231 2 573 505 2 231)
Population mean number of elite cases: 3.37
Count of perfect (error zero) individuals by case: (295 573 77 881 231 2 573 505 2 231)
Population mean number of perfect (error zero) cases: 3.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 0, :instruction exec_pop})
Best program: (integer_fromboolean integer_yank tag_integer_865 exec_when (exec_swap (in1 tag_integer_340 exec_if (exec_empty) (integer_yankdup)) (in3 print_boolean exec_k_when_autoconstructing () (print_integer) exec_do*count (exec_if (exec_if (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop in2 exec_pop ()) ())) ()) ()))))
Errors: [1 1 1 0 0 1 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 23
Size: 40
Percent parens: 0.425
--- Population Statistics ---
Average total errors in population: 6.63
Median total errors in population: 6
Error averages by case: (0.705 0.427 0.923 0.119 0.769 0.998 0.427 0.495 0.998 0.769)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.16
Average program size in population (points): 39.73
Average percent parens in population: 0.416
Minimum age in population: 57.2945753952954
Maximum age in population: 62.97463503994732
Average age in population: 61.48488978682771
Median age in population: 61.68797936601277
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 207
Genome diversity (% unique genomes):	 0.528
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 212
Syntactic diversity (% unique Push programs):	 0.517
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 17236137
--- Timings ---
Current time: 1559314736456 milliseconds
Total Time:         121.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        89.4 seconds, 73.8%
Fitness Testing:     19.4 seconds, 16.0%
Report:              12.3 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: 17                 
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 70                 
Correct output: 5                   | Program output: 44                 
Correct output: 1                   | Program output: 14                 
Correct output: 17                  | Program output: 63                 
Correct output: 27                  | Program output: 50                 
Correct output: 11                  | Program output: 18                 
Correct output: 16                  | Program output: 46                 
Correct output: 11                  | Program output: 43                 
Correct output: 25                  | Program output: 73                 
Correct output: 13                  | Program output: 13                 
Correct output: 34                  | Program output: 35                 
Correct output: 8                   | Program output: 48                 
Correct output: 6                   | Program output: 49                 
Correct output: 12                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 19                 
Correct output: 26                  | Program output: 37                 
Correct output: 40                  | Program output: 45                 
Correct output: 28                  | Program output: 53                 
Correct output: 42                  | Program output: 58                 
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: 59                 
Correct output: -71                 | Program output: 40                 
Correct output: -88                 | Program output: 87                 
Correct output: -45                 | Program output: 1                  
Correct output: -21                 | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: -73                
Correct output: -45                 | Program output: 95                 
Correct output: -30                 | Program output: 72                 
Correct output: -91                 | Program output: -57                
Correct output: -65                 | Program output: 93                 
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: 85                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -39                
Correct output: -43                 | Program output: 90                 
Correct output: -76                 | Program output: -70                
Correct output: -41                 | Program output: 64                 
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -30                
Correct output: 10                  | Program output: 91                 
Correct output: -36                 | Program output: 92                 
Correct output: -85                 | Program output: 45                 
Correct output: -83                 | Program output: 11                 
Correct output: -22                 | Program output: 71                 
Correct output: -74                 | Program output: 14                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: 34                 
Correct output: -29                 | Program output: -25                
Correct output: -98                 | Program output: 7                  
Correct output: -99                 | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -6                 
Correct output: -69                 | Program output: -69                
Correct output: -69                 | Program output: -54                
Correct output: 24                  | Program output: 49                 
Correct output: -28                 | Program output: -28                
Correct output: -15                 | Program output: 59                 
Correct output: -43                 | Program output: -37                
Correct output: -70                 | Program output: -2                 
Correct output: -31                 | Program output: 84                 
Correct output: -26                 | Program output: -26                
Correct output: -57                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: 32                 
Correct output: -48                 | Program output: -48                
Correct output: -50                 | Program output: 47                 
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: -46                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: 80                 
Correct output: -58                 | Program output: -30                
Correct output: -84                 | Program output: 34                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Lexicase best program: (exec_do*while () integer_yank tag_integer_865 exec_when (exec_swap (in1 tag_integer_451 exec_if (exec_empty) (integer_yankdup)) (in4 print_boolean exec_k_when_autoconstructing () (print_integer) print_integer exec_if (exec_if () (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop in2 exec_pop ()) ()))) ())))
Lexicase best errors: [1 1 0 0 0 0 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 40
Percent parens: 0.425
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Zero cases best program: (exec_do*while () integer_yank tag_integer_865 exec_when (exec_swap (in1 tag_integer_451 exec_if (exec_empty) (integer_yankdup)) (in4 print_boolean exec_k_when_autoconstructing () (print_integer) print_integer exec_if (exec_if () (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop in2 exec_pop ()) ()))) ())))
Zero cases best errors: [1 1 0 0 0 0 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 40
Percent parens: 0.425
--- Lexicase Population Statistics ---
Count of elite individuals by case: (164 164 351 351 350 351 261 260 350 168)
Population mean number of elite cases: 2.77
Count of perfect (error zero) individuals by case: (164 164 351 351 350 351 261 260 350 168)
Population mean number of perfect (error zero) cases: 2.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Best program: (exec_do*while (integer_yank) tag_integer_865 exec_when (exec_swap (in1 tag_integer_451 exec_if (exec_empty) (integer_yankdup)) (in4 print_boolean exec_k_when_autoconstructing () (print_integer) print_integer exec_if (exec_if () (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop in2 exec_pop ()) ()))) ())))
Errors: [1 1 0 0 0 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 23
Size: 40
Percent parens: 0.425
--- Population Statistics ---
Average total errors in population: 7.23
Median total errors in population: 7
Error averages by case: (0.836 0.836 0.649 0.649 0.65 0.649 0.739 0.74 0.65 0.832)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.927
Average program size in population (points): 40.158
Average percent parens in population: 0.403
Minimum age in population: 58.2945753952954
Maximum age in population: 64.82389756729572
Average age in population: 62.97754912424052
Median age in population: 63.0280494115932
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 89
Genome diversity (% unique genomes):	 0.543
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 91
Syntactic diversity (% unique Push programs):	 0.529
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 17592166
--- Timings ---
Current time: 1559314739961 milliseconds
Total Time:         124.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        92.3 seconds, 74.1%
Fitness Testing:     19.7 seconds, 15.8%
Report:              12.5 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 673
Test mean error for best: 0.67300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 84                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 55                 
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 68                 
Correct output: 16                  | Program output: 54                 
Correct output: 11                  | Program output: 68                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 80                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 89                 
Correct output: 6                   | Program output: 51                 
Correct output: 12                  | Program output: 34                 
Correct output: 1                   | Program output: 93                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 48                 
Correct output: 28                  | Program output: 78                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: 75                 
Correct output: -88                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: 81                 
Correct output: -78                 | Program output: 19                 
Correct output: -45                 | Program output: 82                 
Correct output: -30                 | Program output: 3                  
Correct output: -91                 | Program output: 49                 
Correct output: -65                 | Program output: 26                 
Correct output: -99                 | Program output: 67                 
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: 9                  
Correct output: -94                 | Program output: 61                 
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: 41                 
Correct output: -76                 | Program output: 12                 
Correct output: -41                 | Program output: 62                 
Correct output: -77                 | Program output: 8                  
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: 48                 
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 84                 
Correct output: -22                 | Program output: 70                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 89                 
Correct output: -78                 | Program output: 4                  
Correct output: -29                 | Program output: 14                 
Correct output: -98                 | Program output: 88                 
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -72                
Correct output: -63                 | Program output: -34                
Correct output: -69                 | Program output: 48                 
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 89                 
Correct output: -28                 | Program output: 78                 
Correct output: -15                 | Program output: 63                 
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: 94                 
Correct output: -26                 | Program output: 33                 
Correct output: -57                 | Program output: 50                 
Correct output: -97                 | Program output: -93                
Correct output: -95                 | Program output: -73                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -32                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: 51                 
Correct output: -46                 | Program output: 42                 
Correct output: -86                 | Program output: 67                 
Correct output: -39                 | Program output: 13                 
Correct output: -58                 | Program output: 43                 
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -46                
Correct output: -65                 | Program output: 89                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction 87} {:close 0, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction 96} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Lexicase best program: (87 integer_yank tag_integer_865 exec_when (exec_swap (integer_dup_items tag_integer_340 exec_if (exec_empty) (96)) (in3 boolean_swap exec_k_when_autoconstructing () (print_integer) print_integer exec_if (exec_if (exec_shove (tagged_478 exec_k_when_autoconstructing () (integer_pop in2 exec_pop ()))) ()) ())))
Lexicase best errors: [1 0 0 0 1 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 39
Percent parens: 0.410
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction 87} {:close 0, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction 96} {:close 0, :instruction in3} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Zero cases best program: (87 integer_yank tag_integer_865 exec_when (exec_swap (integer_dup_items tag_integer_340 exec_if (exec_empty) (96)) (in3 boolean_swap exec_k_when_autoconstructing () (print_integer) print_integer exec_if (exec_if (exec_shove (tagged_478 exec_k_when_autoconstructing () (integer_pop in2 exec_pop ()))) ()) ())))
Zero cases best errors: [1 0 0 0 1 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 39
Percent parens: 0.410
--- Lexicase Population Statistics ---
Count of elite individuals by case: (10 183 183 187 452 187 896 187 11 246)
Population mean number of elite cases: 2.54
Count of perfect (error zero) individuals by case: (10 183 183 187 452 187 896 187 11 246)
Population mean number of perfect (error zero) cases: 2.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (87 integer_yank tag_integer_865 exec_when (exec_swap (in1 tag_integer_340 exec_if (exec_empty) (integer_yankdup)) (in3 print_boolean exec_k_when_autoconstructing () (print_integer) print_integer exec_if (exec_if (exec_shove (tagged_478 exec_k_when_autoconstructing () ())) ()) ())))
Errors: [1 0 0 0 1 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 20
Size: 35
Percent parens: 0.429
--- Population Statistics ---
Average total errors in population: 7.458
Median total errors in population: 8
Error averages by case: (0.99 0.817 0.817 0.813 0.548 0.813 0.104 0.813 0.989 0.754)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.873
Average program size in population (points): 40.117
Average percent parens in population: 0.404
Minimum age in population: 61.51676162538934
Maximum age in population: 66.57874977060692
Average age in population: 64.6475308291274
Median age in population: 64.73022348735458
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 84
Genome diversity (% unique genomes):	 0.549
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 86
Syntactic diversity (% unique Push programs):	 0.536
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 17993651
--- Timings ---
Current time: 1559314742723 milliseconds
Total Time:         127.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        94.5 seconds, 74.2%
Fitness Testing:     20.1 seconds, 15.8%
Report:              12.7 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Smallest problem report - generation 43
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: 17                 
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 70                 
Correct output: 5                   | Program output: 44                 
Correct output: 1                   | Program output: 14                 
Correct output: 17                  | Program output: 63                 
Correct output: 27                  | Program output: 50                 
Correct output: 11                  | Program output: 18                 
Correct output: 16                  | Program output: 46                 
Correct output: 11                  | Program output: 43                 
Correct output: 25                  | Program output: 73                 
Correct output: 13                  | Program output: 13                 
Correct output: 34                  | Program output: 35                 
Correct output: 8                   | Program output: 48                 
Correct output: 6                   | Program output: 49                 
Correct output: 12                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 19                 
Correct output: 26                  | Program output: 37                 
Correct output: 40                  | Program output: 45                 
Correct output: 28                  | Program output: 53                 
Correct output: 42                  | Program output: 58                 
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: 59                 
Correct output: -71                 | Program output: 40                 
Correct output: -88                 | Program output: 87                 
Correct output: -45                 | Program output: 1                  
Correct output: -21                 | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: -73                
Correct output: -45                 | Program output: 95                 
Correct output: -30                 | Program output: 72                 
Correct output: -91                 | Program output: -57                
Correct output: -65                 | Program output: 93                 
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: 85                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -39                
Correct output: -43                 | Program output: 90                 
Correct output: -76                 | Program output: -70                
Correct output: -41                 | Program output: 64                 
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -30                
Correct output: 10                  | Program output: 91                 
Correct output: -36                 | Program output: 92                 
Correct output: -85                 | Program output: 45                 
Correct output: -83                 | Program output: 11                 
Correct output: -22                 | Program output: 71                 
Correct output: -74                 | Program output: 14                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: 34                 
Correct output: -29                 | Program output: -25                
Correct output: -98                 | Program output: 7                  
Correct output: -99                 | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -6                 
Correct output: -69                 | Program output: -69                
Correct output: -69                 | Program output: -54                
Correct output: 24                  | Program output: 49                 
Correct output: -28                 | Program output: -28                
Correct output: -15                 | Program output: 59                 
Correct output: -43                 | Program output: -37                
Correct output: -70                 | Program output: -2                 
Correct output: -31                 | Program output: 84                 
Correct output: -26                 | Program output: -26                
Correct output: -57                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: 32                 
Correct output: -48                 | Program output: -48                
Correct output: -50                 | Program output: 47                 
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: -46                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: 80                 
Correct output: -58                 | Program output: -30                
Correct output: -84                 | Program output: 34                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in1} {:close 0, :instruction in1} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Lexicase best program: (in1 in1 integer_yank tag_integer_865 boolean_flush integer_swap in1 tag_integer_340 exec_if (boolean_flush exec_swap (exec_swap (in1 tag_integer_451 exec_if (exec_empty) (integer_yankdup)) (in4 print_boolean exec_k_when_autoconstructing () (print_integer)) print_integer exec_if (exec_if () (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop in2 exec_pop ()) ()))) ()) ()) ())
Lexicase best errors: [0 0 1 0 0 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 49
Percent parens: 0.388
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in1} {:close 0, :instruction in1} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_340} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Zero cases best program: (in1 in1 integer_yank tag_integer_865 boolean_flush integer_swap in1 tag_integer_340 exec_if (boolean_flush exec_swap (exec_swap (in1 tag_integer_451 exec_if (exec_empty) (integer_yankdup)) (in4 print_boolean exec_k_when_autoconstructing () (print_integer)) print_integer exec_if (exec_if () (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop in2 exec_pop ()) ()))) ()) ()) ())
Zero cases best errors: [0 0 1 0 0 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 49
Percent parens: 0.388
--- Lexicase Population Statistics ---
Count of elite individuals by case: (896 896 539 805 96 200 509 89 62 62)
Population mean number of elite cases: 4.15
Count of perfect (error zero) individuals by case: (896 896 539 805 96 200 509 89 62 62)
Population mean number of perfect (error zero) cases: 4.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Best program: (exec_do*while (boolean_yankdup tag_integer_865) exec_when (exec_swap (in1 tag_integer_451 exec_if (exec_empty) (integer_yankdup)) (in4 print_boolean exec_k_when_autoconstructing () (print_integer) print_integer exec_if (exec_if () (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop in2 exec_pop ()) ()))) ())))
Errors: [0 0 1 0 0 1 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 23
Size: 40
Percent parens: 0.425
--- Population Statistics ---
Average total errors in population: 5.846
Median total errors in population: 5
Error averages by case: (0.104 0.104 0.461 0.195 0.904 0.8 0.491 0.911 0.938 0.938)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.715
Average program size in population (points): 37.37
Average percent parens in population: 0.392
Minimum age in population: 62.51676162538934
Maximum age in population: 67.978284869233
Average age in population: 66.0739579053778
Median age in population: 66.16970912243869
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 27
Genome diversity (% unique genomes):	 0.535
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.519
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 18276683
--- Timings ---
Current time: 1559314745727 milliseconds
Total Time:         130.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        97.0 seconds, 74.4%
Fitness Testing:     20.4 seconds, 15.6%
Report:              12.9 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: 17                 
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 70                 
Correct output: 5                   | Program output: 44                 
Correct output: 1                   | Program output: 14                 
Correct output: 17                  | Program output: 63                 
Correct output: 27                  | Program output: 50                 
Correct output: 11                  | Program output: 18                 
Correct output: 16                  | Program output: 46                 
Correct output: 11                  | Program output: 43                 
Correct output: 25                  | Program output: 73                 
Correct output: 13                  | Program output: 13                 
Correct output: 34                  | Program output: 35                 
Correct output: 8                   | Program output: 48                 
Correct output: 6                   | Program output: 49                 
Correct output: 12                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 19                 
Correct output: 26                  | Program output: 37                 
Correct output: 40                  | Program output: 45                 
Correct output: 28                  | Program output: 53                 
Correct output: 42                  | Program output: 58                 
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: 59                 
Correct output: -71                 | Program output: 40                 
Correct output: -88                 | Program output: 87                 
Correct output: -45                 | Program output: 1                  
Correct output: -21                 | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: -73                
Correct output: -45                 | Program output: 95                 
Correct output: -30                 | Program output: 72                 
Correct output: -91                 | Program output: -57                
Correct output: -65                 | Program output: 93                 
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: 85                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -39                
Correct output: -43                 | Program output: 90                 
Correct output: -76                 | Program output: -70                
Correct output: -41                 | Program output: 64                 
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -30                
Correct output: 10                  | Program output: 91                 
Correct output: -36                 | Program output: 92                 
Correct output: -85                 | Program output: 45                 
Correct output: -83                 | Program output: 11                 
Correct output: -22                 | Program output: 71                 
Correct output: -74                 | Program output: 14                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: 34                 
Correct output: -29                 | Program output: -25                
Correct output: -98                 | Program output: 7                  
Correct output: -99                 | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -6                 
Correct output: -69                 | Program output: -69                
Correct output: -69                 | Program output: -54                
Correct output: 24                  | Program output: 49                 
Correct output: -28                 | Program output: -28                
Correct output: -15                 | Program output: 59                 
Correct output: -43                 | Program output: -37                
Correct output: -70                 | Program output: -2                 
Correct output: -31                 | Program output: 84                 
Correct output: -26                 | Program output: -26                
Correct output: -57                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: 32                 
Correct output: -48                 | Program output: -48                
Correct output: -50                 | Program output: 47                 
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: -46                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: 80                 
Correct output: -58                 | Program output: -30                
Correct output: -84                 | Program output: 34                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_if})
Lexicase best program: (exec_do*while (integer_yank) tag_integer_865 exec_when (exec_swap (in1 tag_integer_451 exec_if (exec_empty) (integer_yankdup)) (in4 print_boolean exec_k_when_autoconstructing () (print_integer) print_integer exec_if (exec_if () ()) ())))
Lexicase best errors: [1 0 1 1 0 0 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 30
Percent parens: 0.433
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_if})
Zero cases best program: (exec_do*while (integer_yank) tag_integer_865 exec_when (exec_swap (in1 tag_integer_451 exec_if (exec_empty) (integer_yankdup)) (in4 print_boolean exec_k_when_autoconstructing () (print_integer) print_integer exec_if (exec_if () ()) ())))
Zero cases best errors: [1 0 1 1 0 0 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 30
Percent parens: 0.433
--- Lexicase Population Statistics ---
Count of elite individuals by case: (112 435 111 111 890 435 343 196 435 148)
Population mean number of elite cases: 3.22
Count of perfect (error zero) individuals by case: (112 435 111 111 890 435 343 196 435 148)
Population mean number of perfect (error zero) cases: 3.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Best program: (in4 print_boolean exec_k_when_autoconstructing () (print_integer print_integer exec_if (exec_if () (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop in2 exec_pop ()) ()))) ()))
Errors: [1 0 1 1 0 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 13
Size: 24
Percent parens: 0.458
--- Population Statistics ---
Average total errors in population: 6.784
Median total errors in population: 6
Error averages by case: (0.888 0.565 0.889 0.889 0.11 0.565 0.657 0.804 0.565 0.852)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.884
Average program size in population (points): 38.385
Average percent parens in population: 0.403
Minimum age in population: 63.51676162538934
Maximum age in population: 69.50217286158272
Average age in population: 67.53098478811299
Median age in population: 67.59982827922704
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 60
Genome diversity (% unique genomes):	 0.548
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.532
Total error diversity:				 0.004
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 18582686
--- Timings ---
Current time: 1559314748204 milliseconds
Total Time:         132.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        99.0 seconds, 74.5%
Fitness Testing:     20.7 seconds, 15.6%
Report:              13.1 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Smallest problem report - generation 45
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 92                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 38                 
Correct output: 17                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 46                 
Correct output: 16                  | Program output: 94                 
Correct output: 11                  | Program output: 11                 
Correct output: 25                  | Program output: 60                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 92                 
Correct output: 8                   | Program output: 83                 
Correct output: 6                   | Program output: 50                 
Correct output: 12                  | Program output: 56                 
Correct output: 1                   | Program output: 42                 
Correct output: 18                  | Program output: 97                 
Correct output: 26                  | Program output: 42                 
Correct output: 40                  | Program output: 56                 
Correct output: 28                  | Program output: 36                 
Correct output: 42                  | Program output: 58                 
Correct output: -41                 | Program output: 100                
Correct output: -83                 | Program output: -12                
Correct output: -71                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -45                 | Program output: 45                 
Correct output: -21                 | Program output: 26                 
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: 42                 
Correct output: -45                 | Program output: 98                 
Correct output: -30                 | Program output: 38                 
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: 79                 
Correct output: -44                 | Program output: 1                  
Correct output: -98                 | Program output: 1                  
Correct output: -40                 | Program output: -2                 
Correct output: -100                | Program output: 67                 
Correct output: -94                 | Program output: 34                 
Correct output: -79                 | Program output: 33                 
Correct output: -43                 | Program output: 81                 
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -3                 
Correct output: -77                 | Program output: -47                
Correct output: -96                 | Program output: 46                 
Correct output: 10                  | Program output: 20                 
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 96                 
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: 49                 
Correct output: -100                | Program output: 72                 
Correct output: -78                 | Program output: 56                 
Correct output: -29                 | Program output: 54                 
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -59                
Correct output: -63                 | Program output: -63                
Correct output: -69                 | Program output: 3                  
Correct output: -69                 | Program output: 93                 
Correct output: 24                  | Program output: 79                 
Correct output: -28                 | Program output: 14                 
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: 40                 
Correct output: -70                 | Program output: -20                
Correct output: -31                 | Program output: -29                
Correct output: -26                 | Program output: -14                
Correct output: -57                 | Program output: -1                 
Correct output: -97                 | Program output: -19                
Correct output: -95                 | Program output: -78                
Correct output: -77                 | Program output: -45                
Correct output: -48                 | Program output: -30                
Correct output: -50                 | Program output: -3                 
Correct output: -86                 | Program output: 39                 
Correct output: -46                 | Program output: 12                 
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -28                
Correct output: -66                 | Program output: -26                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_pop})
Lexicase best program: (exec_do*while (integer_yank) tag_integer_865 exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (boolean_or integer_eq in1 boolean_pop exec_dup (exec_if () (exec_shove (tagged_478 exec_k_when_autoconstructing (exec_when (integer_sub exec_pop ())) ())))) ()) ())) ()))
Lexicase best errors: [0 0 1 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 45
Percent parens: 0.444
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_pop})
Zero cases best program: (exec_do*while (integer_yank) tag_integer_865 exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (boolean_or integer_eq in1 boolean_pop exec_dup (exec_if () (exec_shove (tagged_478 exec_k_when_autoconstructing (exec_when (integer_sub exec_pop ())) ())))) ()) ())) ()))
Zero cases best errors: [0 0 1 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 45
Percent parens: 0.444
--- Lexicase Population Statistics ---
Count of elite individuals by case: (14 14 421 369 413 17 93 369 415 413)
Population mean number of elite cases: 2.54
Count of perfect (error zero) individuals by case: (14 14 421 369 413 17 93 369 415 413)
Population mean number of perfect (error zero) cases: 2.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_pop})
Best program: (exec_do*while (integer_yank) tag_integer_865 exec_when (exec_swap (print_integer) (exec_if (exec_if (boolean_or integer_eq in1 boolean_pop exec_dup (exec_pop ())) ()) ())))
Errors: [0 0 1 1 0 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 14
Size: 25
Percent parens: 0.440
--- Population Statistics ---
Average total errors in population: 7.462
Median total errors in population: 8
Error averages by case: (0.986 0.986 0.579 0.631 0.587 0.983 0.907 0.631 0.585 0.587)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.993
Average program size in population (points): 41.96
Average percent parens in population: 0.427
Minimum age in population: 65.62518428957264
Maximum age in population: 70.53276361318399
Average age in population: 68.49948803459922
Median age in population: 68.53625492876017
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 329
Genome diversity (% unique genomes):	 0.467
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 331
Syntactic diversity (% unique Push programs):	 0.458
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 18995521
--- Timings ---
Current time: 1559314751536 milliseconds
Total Time:         136.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       101.7 seconds, 74.6%
Fitness Testing:     21.1 seconds, 15.5%
Report:              13.3 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Smallest problem report - generation 46
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: 17                 
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 70                 
Correct output: 5                   | Program output: 44                 
Correct output: 1                   | Program output: 14                 
Correct output: 17                  | Program output: 63                 
Correct output: 27                  | Program output: 50                 
Correct output: 11                  | Program output: 18                 
Correct output: 16                  | Program output: 46                 
Correct output: 11                  | Program output: 43                 
Correct output: 25                  | Program output: 73                 
Correct output: 13                  | Program output: 13                 
Correct output: 34                  | Program output: 35                 
Correct output: 8                   | Program output: 48                 
Correct output: 6                   | Program output: 49                 
Correct output: 12                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 19                 
Correct output: 26                  | Program output: 37                 
Correct output: 40                  | Program output: 45                 
Correct output: 28                  | Program output: 53                 
Correct output: 42                  | Program output: 58                 
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: 59                 
Correct output: -71                 | Program output: 40                 
Correct output: -88                 | Program output: 87                 
Correct output: -45                 | Program output: 1                  
Correct output: -21                 | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: -73                
Correct output: -45                 | Program output: 95                 
Correct output: -30                 | Program output: 72                 
Correct output: -91                 | Program output: -57                
Correct output: -65                 | Program output: 93                 
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: 85                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -39                
Correct output: -43                 | Program output: 90                 
Correct output: -76                 | Program output: -70                
Correct output: -41                 | Program output: 64                 
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -30                
Correct output: 10                  | Program output: 91                 
Correct output: -36                 | Program output: 92                 
Correct output: -85                 | Program output: 45                 
Correct output: -83                 | Program output: 11                 
Correct output: -22                 | Program output: 71                 
Correct output: -74                 | Program output: 14                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: 34                 
Correct output: -29                 | Program output: -25                
Correct output: -98                 | Program output: 7                  
Correct output: -99                 | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -6                 
Correct output: -69                 | Program output: -69                
Correct output: -69                 | Program output: -54                
Correct output: 24                  | Program output: 49                 
Correct output: -28                 | Program output: -28                
Correct output: -15                 | Program output: 59                 
Correct output: -43                 | Program output: -37                
Correct output: -70                 | Program output: -2                 
Correct output: -31                 | Program output: 84                 
Correct output: -26                 | Program output: -26                
Correct output: -57                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: 32                 
Correct output: -48                 | Program output: -48                
Correct output: -50                 | Program output: 47                 
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: -46                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: 80                 
Correct output: -58                 | Program output: -30                
Correct output: -84                 | Program output: 34                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_div} {:close 1, :instruction tag_integer_947} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Lexicase best program: (87 integer_yank tag_integer_865 exec_swap (integer_div) (tag_integer_947) in4 integer_fromboolean exec_k_when_autoconstructing () (print_integer) print_integer integer_shove exec_if () (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop in2 exec_pop ()) ())))
Lexicase best errors: [0 1 0 1 1 0 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 30
Percent parens: 0.367
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction 87} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_div} {:close 1, :instruction tag_integer_947} {:close 0, :instruction in4} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Zero cases best program: (87 integer_yank tag_integer_865 exec_swap (integer_div) (tag_integer_947) in4 integer_fromboolean exec_k_when_autoconstructing () (print_integer) print_integer integer_shove exec_if () (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop in2 exec_pop ()) ())))
Zero cases best errors: [0 1 0 1 1 0 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 30
Percent parens: 0.367
--- Lexicase Population Statistics ---
Count of elite individuals by case: (189 102 190 102 622 190 797 591 282 102)
Population mean number of elite cases: 3.17
Count of perfect (error zero) individuals by case: (189 102 190 102 622 190 797 591 282 102)
Population mean number of perfect (error zero) cases: 3.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 2, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Best program: (exec_do*while (integer_yank) tag_integer_865 exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean exec_k_when_autoconstructing () (integer_yankdup)) in4 print_boolean exec_k_when_autoconstructing () (print_integer) print_integer exec_if (exec_if () (exec_shove (tagged_478 exec_k_when_autoconstructing (integer_pop in2 exec_pop ()) ()))) ()) ()))
Errors: [0 1 0 1 1 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 24
Size: 42
Percent parens: 0.429
--- Population Statistics ---
Average total errors in population: 6.833
Median total errors in population: 7
Error averages by case: (0.811 0.898 0.81 0.898 0.378 0.81 0.203 0.409 0.718 0.898)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.909
Average program size in population (points): 40.541
Average percent parens in population: 0.433
Minimum age in population: 67.86325661479987
Maximum age in population: 71.98933890940776
Average age in population: 69.97603715780377
Median age in population: 70.03625492876017
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 126
Genome diversity (% unique genomes):	 0.467
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 128
Syntactic diversity (% unique Push programs):	 0.453
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 19413548
--- Timings ---
Current time: 1559314754238 milliseconds
Total Time:         138.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       103.7 seconds, 74.7%
Fitness Testing:     21.6 seconds, 15.5%
Report:              13.5 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Smallest problem report - generation 47
Test total error for best: 543
Test mean error for best: 0.54300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 76                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 56                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 79                 
Correct output: 27                  | Program output: 48                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 58                 
Correct output: 25                  | Program output: 59                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 75                 
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 48                 
Correct output: 18                  | Program output: 87                 
Correct output: 26                  | Program output: 79                 
Correct output: 40                  | Program output: 40                 
Correct output: 28                  | Program output: 28                 
Correct output: 42                  | Program output: 88                 
Correct output: -41                 | Program output: 82                 
Correct output: -83                 | Program output: -12                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -45                 | Program output: -7                 
Correct output: -21                 | Program output: 82                 
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: 0                  
Correct output: -65                 | Program output: -39                
Correct output: -99                 | Program output: -58                
Correct output: -44                 | Program output: 54                 
Correct output: -98                 | Program output: -79                
Correct output: -40                 | Program output: -2                 
Correct output: -100                | Program output: 76                 
Correct output: -94                 | Program output: -83                
Correct output: -79                 | Program output: -17                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -47                
Correct output: -96                 | Program output: 33                 
Correct output: 10                  | Program output: 60                 
Correct output: -36                 | Program output: -9                 
Correct output: -85                 | Program output: 92                 
Correct output: -83                 | Program output: -2                 
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: 50                 
Correct output: -100                | Program output: 70                 
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -70                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -26                
Correct output: -63                 | Program output: -63                
Correct output: -69                 | Program output: -62                
Correct output: -69                 | Program output: 92                 
Correct output: 24                  | Program output: 24                 
Correct output: -28                 | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -36                
Correct output: -70                 | Program output: -20                
Correct output: -31                 | Program output: -31                
Correct output: -26                 | Program output: -25                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -19                
Correct output: -95                 | Program output: -78                
Correct output: -77                 | Program output: -45                
Correct output: -48                 | Program output: -30                
Correct output: -50                 | Program output: -3                 
Correct output: -86                 | Program output: -73                
Correct output: -46                 | Program output: -30                
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output: -15                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -28                
Correct output: -66                 | Program output: -26                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Lexicase best program: (exec_do*while (boolean_frominteger) tag_integer_865 exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (boolean_or integer_eq exec_k_when_autoconstructing (boolean_pop exec_dup (exec_if () (exec_shove (tagged_478 exec_k_when_autoconstructing (exec_when (in2 exec_pop ())) ())))) ()) ()) ())) ()))
Lexicase best errors: [0 0 0 0 1 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 47
Percent parens: 0.468
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Zero cases best program: (exec_do*while (boolean_frominteger) tag_integer_865 exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (boolean_or integer_eq exec_k_when_autoconstructing (boolean_pop exec_dup (exec_if () (exec_shove (tagged_478 exec_k_when_autoconstructing (exec_when (in2 exec_pop ())) ())))) ()) ()) ())) ()))
Zero cases best errors: [0 0 0 0 1 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 47
Percent parens: 0.468
--- Lexicase Population Statistics ---
Count of elite individuals by case: (291 878 308 308 263 324 107 194 299 298)
Population mean number of elite cases: 3.27
Count of perfect (error zero) individuals by case: (291 878 308 308 263 324 107 194 299 298)
Population mean number of perfect (error zero) cases: 3.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Best program: (exec_do*while (integer_yank) tag_integer_865 exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (boolean_or integer_eq in1 boolean_pop exec_dup (exec_if () (exec_shove (tagged_478 exec_k_when_autoconstructing (exec_when (in2 exec_pop ())) ())))) ()) ())) ()))
Errors: [0 0 0 0 1 1 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 25
Size: 45
Percent parens: 0.444
--- Population Statistics ---
Average total errors in population: 6.73
Median total errors in population: 8
Error averages by case: (0.709 0.122 0.692 0.692 0.737 0.676 0.893 0.806 0.701 0.702)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.663
Average program size in population (points): 40.987
Average percent parens in population: 0.421
Minimum age in population: 69.11763055263123
Maximum age in population: 73.41991547510995
Average age in population: 71.56271566278454
Median age in population: 71.6122118838446
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 122
Genome diversity (% unique genomes):	 0.517
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 122
Syntactic diversity (% unique Push programs):	 0.505
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 19784712
--- Timings ---
Current time: 1559314756964 milliseconds
Total Time:         141.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       105.6 seconds, 74.7%
Fitness Testing:     22.0 seconds, 15.5%
Report:              13.7 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Smallest problem report - generation 48
Test total error for best: 524
Test mean error for best: 0.52400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 92                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 32                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 46                 
Correct output: 16                  | Program output: 94                 
Correct output: 11                  | Program output: 11                 
Correct output: 25                  | Program output: 60                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 92                 
Correct output: 8                   | Program output: 83                 
Correct output: 6                   | Program output: 50                 
Correct output: 12                  | Program output: 56                 
Correct output: 1                   | Program output: 42                 
Correct output: 18                  | Program output: 97                 
Correct output: 26                  | Program output: 42                 
Correct output: 40                  | Program output: 56                 
Correct output: 28                  | Program output: 36                 
Correct output: 42                  | Program output: 58                 
Correct output: -41                 | Program output: 100                
Correct output: -83                 | Program output: -12                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -45                 | Program output: -7                 
Correct output: -21                 | Program output: 26                 
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: 0                  
Correct output: -65                 | Program output: -39                
Correct output: -99                 | Program output: -58                
Correct output: -44                 | Program output: 1                  
Correct output: -98                 | Program output: -79                
Correct output: -40                 | Program output: -2                 
Correct output: -100                | Program output: 67                 
Correct output: -94                 | Program output: -83                
Correct output: -79                 | Program output: -17                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -47                
Correct output: -96                 | Program output: 46                 
Correct output: 10                  | Program output: 20                 
Correct output: -36                 | Program output: -9                 
Correct output: -85                 | Program output: 96                 
Correct output: -83                 | Program output: -2                 
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: 49                 
Correct output: -100                | Program output: 72                 
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -70                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -26                
Correct output: -63                 | Program output: -63                
Correct output: -69                 | Program output: -62                
Correct output: -69                 | Program output: 93                 
Correct output: 24                  | Program output: 79                 
Correct output: -28                 | Program output: 14                 
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -36                
Correct output: -70                 | Program output: -20                
Correct output: -31                 | Program output: -31                
Correct output: -26                 | Program output: -25                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -19                
Correct output: -95                 | Program output: -78                
Correct output: -77                 | Program output: -45                
Correct output: -48                 | Program output: -30                
Correct output: -50                 | Program output: -3                 
Correct output: -86                 | Program output: -73                
Correct output: -46                 | Program output: -30                
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output: -15                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -28                
Correct output: -66                 | Program output: -26                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 2, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Lexicase best program: (exec_do*while (integer_yank) tag_integer_865 exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (boolean_or integer_eq exec_dup (exec_if () () exec_shove (tagged_478 exec_k_when_autoconstructing () (exec_when (in2 exec_pop ()))))) ()) ())) ()))
Lexicase best errors: [1 1 1 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 43
Percent parens: 0.465
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 0, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 2, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Zero cases best program: (exec_do*while (integer_yank) tag_integer_865 exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (boolean_or integer_eq exec_dup (exec_if () () exec_shove (tagged_478 exec_k_when_autoconstructing () (exec_when (in2 exec_pop ()))))) ()) ())) ()))
Zero cases best errors: [1 1 1 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 43
Percent parens: 0.465
--- Lexicase Population Statistics ---
Count of elite individuals by case: (88 98 88 882 849 23 97 344 784 686)
Population mean number of elite cases: 3.94
Count of perfect (error zero) individuals by case: (88 98 88 882 849 23 97 344 784 686)
Population mean number of perfect (error zero) cases: 3.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Best program: (exec_do*while (integer_yank) tag_integer_865 exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (boolean_or integer_eq exec_dup (exec_if () (exec_shove (tagged_478 exec_k_when_autoconstructing (exec_when (in2 exec_pop ())) ())))) ()) ())) ()))
Errors: [1 1 1 0 0 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 23
Size: 43
Percent parens: 0.465
--- Population Statistics ---
Average total errors in population: 6.061
Median total errors in population: 6
Error averages by case: (0.912 0.902 0.912 0.118 0.151 0.977 0.903 0.656 0.216 0.314)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.618
Average program size in population (points): 44.104
Average percent parens in population: 0.440
Minimum age in population: 70.53625492876017
Maximum age in population: 75.16649852294981
Average age in population: 72.88960588199006
Median age in population: 72.98058762210147
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 185
Genome diversity (% unique genomes):	 0.488
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 185
Syntactic diversity (% unique Push programs):	 0.475
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 20333315
--- Timings ---
Current time: 1559314759794 milliseconds
Total Time:         144.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       107.5 seconds, 74.5%
Fitness Testing:     22.5 seconds, 15.6%
Report:              14.1 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Smallest problem report - generation 49
Test total error for best: 545
Test mean error for best: 0.54500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 84                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 68                 
Correct output: 16                  | Program output: 54                 
Correct output: 11                  | Program output: 68                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 80                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 89                 
Correct output: 6                   | Program output: 51                 
Correct output: 12                  | Program output: 34                 
Correct output: 1                   | Program output: 93                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 48                 
Correct output: 28                  | Program output: 78                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -44                
Correct output: -45                 | Program output: -7                 
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: 81                 
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: 0                  
Correct output: -65                 | Program output: -39                
Correct output: -99                 | Program output: -58                
Correct output: -44                 | Program output: 54                 
Correct output: -98                 | Program output: -79                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: 9                  
Correct output: -94                 | Program output: -83                
Correct output: -79                 | Program output: -17                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output: 12                 
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: 8                  
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: -9                 
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -2                 
Correct output: -22                 | Program output: 70                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 89                 
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -70                
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -26                
Correct output: -63                 | Program output: -34                
Correct output: -69                 | Program output: -62                
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 89                 
Correct output: -28                 | Program output: 78                 
Correct output: -15                 | Program output: 63                 
Correct output: -43                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: -31                
Correct output: -26                 | Program output: -25                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -93                
Correct output: -95                 | Program output: -73                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -32                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -73                
Correct output: -46                 | Program output: -30                
Correct output: -86                 | Program output: 67                 
Correct output: -39                 | Program output: -15                
Correct output: -58                 | Program output: 43                 
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -46                
Correct output: -65                 | Program output: 89                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction tag_boolean_66} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Lexicase best program: (exec_do*while (integer_yank) tag_integer_865 exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean tag_boolean_66) print_integer) (exec_if (exec_if (boolean_or integer_eq in1 boolean_pop exec_dup (exec_if () (exec_shove (in3 exec_k_when_autoconstructing (exec_when (in2 in1 boolean_pop exec_dup (exec_if () (exec_shove (tagged_478 exec_k_when_autoconstructing (exec_when (in2 exec_pop ())) ()))))) ())))) ()) ())))
Lexicase best errors: [0 1 1 0 0 0 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 59
Percent parens: 0.424
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction tag_boolean_66} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Zero cases best program: (exec_do*while (integer_yank) tag_integer_865 exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean tag_boolean_66) print_integer) (exec_if (exec_if (boolean_or integer_eq in1 boolean_pop exec_dup (exec_if () (exec_shove (in3 exec_k_when_autoconstructing (exec_when (in2 in1 boolean_pop exec_dup (exec_if () (exec_shove (tagged_478 exec_k_when_autoconstructing (exec_when (in2 exec_pop ())) ()))))) ())))) ()) ())))
Zero cases best errors: [0 1 1 0 0 0 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 59
Percent parens: 0.424
--- Lexicase Population Statistics ---
Count of elite individuals by case: (227 278 21 246 465 161 278 212 232 212)
Population mean number of elite cases: 2.33
Count of perfect (error zero) individuals by case: (227 278 21 246 465 161 278 212 232 212)
Population mean number of perfect (error zero) cases: 2.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction tagged_478} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 1, :instruction exec_pop})
Best program: (exec_do*while (integer_yank) tag_integer_865 exec_when (exec_swap (exec_s_when_autoconstructing (tag_integer_451 exec_dup (print_boolean exec_k_when_autoconstructing () (print_integer) exec_if (exec_if (boolean_or integer_eq in1 boolean_pop exec_dup (exec_if () (exec_shove (in3 exec_k_when_autoconstructing (exec_when (in2 in1 boolean_pop exec_dup (exec_if () (exec_shove (tagged_478 exec_k_when_autoconstructing (exec_when (in2 exec_pop ())) ()))))) ())))) ()) ())) () ()) ()))
Errors: [0 1 1 0 0 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 34
Size: 64
Percent parens: 0.469
--- Population Statistics ---
Average total errors in population: 7.668
Median total errors in population: 8
Error averages by case: (0.773 0.722 0.979 0.754 0.535 0.839 0.722 0.788 0.768 0.788)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.902
Average program size in population (points): 43.781
Average percent parens in population: 0.429
Minimum age in population: 71.53625492876017
Maximum age in population: 76.45070317129127
Average age in population: 74.5321934076812
Median age in population: 74.67867449910511
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 52
Genome diversity (% unique genomes):	 0.527
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.513
Total error diversity:				 0.006
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.074
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 20809372
--- Timings ---
Current time: 1559314762816 milliseconds
Total Time:         147.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       109.4 seconds, 74.4%
Fitness Testing:     23.0 seconds, 15.7%
Report:              14.5 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Smallest problem report - generation 50
Test total error for best: 433
Test mean error for best: 0.43300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 44                 
Correct output: 1                   | Program output: 14                 
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 18                 
Correct output: 16                  | Program output: 46                 
Correct output: 11                  | Program output: 43                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 13                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 48                 
Correct output: 6                   | Program output: 49                 
Correct output: 12                  | Program output: 34                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 45                 
Correct output: 28                  | Program output: 53                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: 40                 
Correct output: -88                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: -73                
Correct output: -45                 | Program output: 82                 
Correct output: -30                 | Program output: 3                  
Correct output: -91                 | Program output: -57                
Correct output: -65                 | Program output: 26                 
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: 41                 
Correct output: -76                 | Program output: -70                
Correct output: -41                 | Program output: 62                 
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: 48                 
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 11                 
Correct output: -22                 | Program output: 70                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: 4                  
Correct output: -29                 | Program output: -25                
Correct output: -98                 | Program output: 7                  
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -34                
Correct output: -69                 | Program output: -69                
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 49                 
Correct output: -28                 | Program output: -28                
Correct output: -15                 | Program output: 59                 
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: 84                 
Correct output: -26                 | Program output: -26                
Correct output: -57                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -48                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: -46                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: 13                 
Correct output: -58                 | Program output: -30                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: 89                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_795} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_min} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_shove})
Lexicase best program: (exec_do*while (integer_yank) tag_integer_795 exec_when (exec_swap (in1 tag_integer_451 exec_if (exec_empty) (integer_yankdup)) (in4 print_boolean exec_k_when_autoconstructing () (exec_empty) integer_yankdup)) in3 print_boolean integer_min exec_if () (print_integer boolean_shove))
Lexicase best errors: [0 0 1 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 32
Percent parens: 0.344
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_795} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_min} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_shove})
Zero cases best program: (exec_do*while (integer_yank) tag_integer_795 exec_when (exec_swap (in1 tag_integer_451 exec_if (exec_empty) (integer_yankdup)) (in4 print_boolean exec_k_when_autoconstructing () (exec_empty) integer_yankdup)) in3 print_boolean integer_min exec_if () (print_integer boolean_shove))
Zero cases best errors: [0 0 1 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 32
Percent parens: 0.344
--- Lexicase Population Statistics ---
Count of elite individuals by case: (431 671 163 685 335 671 248 588 248 588)
Population mean number of elite cases: 4.63
Count of perfect (error zero) individuals by case: (431 671 163 685 335 671 248 588 248 588)
Population mean number of perfect (error zero) cases: 4.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_795} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_if} {:close 1, :instruction exec_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_empty} {:close 2, :instruction integer_yankdup} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_min} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_shove})
Best program: (exec_do*while (integer_yank) tag_integer_795 exec_when (exec_swap (in1 tag_integer_451 exec_if (exec_empty) (integer_yankdup)) (in4 print_boolean exec_k_when_autoconstructing () (exec_empty) integer_yankdup)) in3 print_boolean integer_min exec_if () (print_integer boolean_shove))
Errors: [0 0 1 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 21
Size: 32
Percent parens: 0.344
--- Population Statistics ---
Average total errors in population: 5.372
Median total errors in population: 5
Error averages by case: (0.569 0.329 0.837 0.315 0.665 0.329 0.752 0.412 0.752 0.412)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.635
Average program size in population (points): 47.68
Average percent parens in population: 0.411
Minimum age in population: 75.8715780534687
Maximum age in population: 77.97317022867738
Average age in population: 76.92366056013967
Median age in population: 76.98321919385675
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 217
Genome diversity (% unique genomes):	 0.339
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 221
Syntactic diversity (% unique Push programs):	 0.328
Total error diversity:				 0.009
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.079
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 21490028
--- Timings ---
Current time: 1559314765628 milliseconds
Total Time:         150.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       111.3 seconds, 74.1%
Fitness Testing:     23.7 seconds, 15.8%
Report:              15.1 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Smallest problem report - generation 51
Test total error for best: 451
Test mean error for best: 0.45100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 38                 
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 46                 
Correct output: 16                  | Program output: 54                 
Correct output: 11                  | Program output: 11                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 83                 
Correct output: 6                   | Program output: 50                 
Correct output: 12                  | Program output: 34                 
Correct output: 1                   | Program output: 42                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 48                 
Correct output: 28                  | Program output: 36                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: 19                 
Correct output: -45                 | Program output: 82                 
Correct output: -30                 | Program output: 3                  
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: 67                 
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: 9                  
Correct output: -94                 | Program output: 34                 
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: 41                 
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -3                 
Correct output: -77                 | Program output: -47                
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 72                 
Correct output: -78                 | Program output: 4                  
Correct output: -29                 | Program output: 14                 
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: -69                 | Program output: 3                  
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 79                 
Correct output: -28                 | Program output: 14                 
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: -29                
Correct output: -26                 | Program output: -14                
Correct output: -57                 | Program output: -1                 
Correct output: -97                 | Program output: -93                
Correct output: -95                 | Program output: -78                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -32                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: 39                 
Correct output: -46                 | Program output: 12                 
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -46                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction tag_boolean_66} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_min} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_shove})
Lexicase best program: (exec_do*while (integer_yank) exec_dup () exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean tag_boolean_66) print_integer) (boolean_shove exec_if (boolean_or integer_eq in1 in3 print_boolean integer_min) (exec_if () (print_integer boolean_shove)))))
Lexicase best errors: [1 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 33
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction tag_boolean_66} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_min} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_shove})
Zero cases best program: (exec_do*while (integer_yank) exec_dup () exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean tag_boolean_66) print_integer) (boolean_shove exec_if (boolean_or integer_eq in1 in3 print_boolean integer_min) (exec_if () (print_integer boolean_shove)))))
Zero cases best errors: [1 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 33
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (373 851 11 676 19 19 459 10 372 10)
Population mean number of elite cases: 2.80
Count of perfect (error zero) individuals by case: (373 851 11 676 19 19 459 10 372 10)
Population mean number of perfect (error zero) cases: 2.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction tag_boolean_66} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_min} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_shove})
Best program: (exec_do*while (integer_yank) exec_dup () exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean tag_boolean_66) print_integer) (boolean_shove exec_if (boolean_or integer_eq in1 in3 print_boolean integer_min) (exec_if () (print_integer boolean_shove)))))
Errors: [1 0 0 0 0 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 22
Size: 33
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 7.2
Median total errors in population: 7
Error averages by case: (0.627 0.149 0.989 0.324 0.981 0.981 0.541 0.99 0.628 0.99)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.237
Average program size in population (points): 41.482
Average percent parens in population: 0.381
Minimum age in population: 76.8715780534687
Maximum age in population: 79.76813104582234
Average age in population: 78.43444003595047
Median age in population: 78.54644739301428
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 339
Genome diversity (% unique genomes):	 0.359
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 350
Syntactic diversity (% unique Push programs):	 0.343
Total error diversity:				 0.008
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 21953472
--- Timings ---
Current time: 1559314768239 milliseconds
Total Time:         152.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       113.2 seconds, 74.1%
Fitness Testing:     24.2 seconds, 15.8%
Report:              15.3 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Smallest problem report - generation 52
Test total error for best: 451
Test mean error for best: 0.45100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 38                 
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 46                 
Correct output: 16                  | Program output: 54                 
Correct output: 11                  | Program output: 11                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 83                 
Correct output: 6                   | Program output: 50                 
Correct output: 12                  | Program output: 34                 
Correct output: 1                   | Program output: 42                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 48                 
Correct output: 28                  | Program output: 36                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: 19                 
Correct output: -45                 | Program output: 82                 
Correct output: -30                 | Program output: 3                  
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: 67                 
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: 9                  
Correct output: -94                 | Program output: 34                 
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: 41                 
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -3                 
Correct output: -77                 | Program output: -47                
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 72                 
Correct output: -78                 | Program output: 4                  
Correct output: -29                 | Program output: 14                 
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: -69                 | Program output: 3                  
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 79                 
Correct output: -28                 | Program output: 14                 
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: -29                
Correct output: -26                 | Program output: -14                
Correct output: -57                 | Program output: -1                 
Correct output: -97                 | Program output: -93                
Correct output: -95                 | Program output: -78                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -32                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: 39                 
Correct output: -46                 | Program output: 12                 
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -46                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction tag_boolean_66} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_min} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_shove})
Lexicase best program: (exec_do*while (integer_yank) exec_dup () exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean tag_boolean_66) print_integer) (boolean_shove exec_if (boolean_or integer_eq in1 in3 print_boolean integer_min) (exec_if () (print_integer boolean_shove)))))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 33
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction tag_boolean_66} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_min} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_shove})
Zero cases best program: (exec_do*while (integer_yank) exec_dup () exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean tag_boolean_66) print_integer) (boolean_shove exec_if (boolean_or integer_eq in1 in3 print_boolean integer_min) (exec_if () (print_integer boolean_shove)))))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 33
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (802 605 877 879 606 605 911 10 877 802)
Population mean number of elite cases: 6.97
Count of perfect (error zero) individuals by case: (802 605 877 879 606 605 911 10 877 802)
Population mean number of perfect (error zero) cases: 6.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction tag_boolean_66} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_eq} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 1, :instruction integer_min} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_shove})
Best program: (exec_do*while (integer_yank) exec_dup () exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean tag_boolean_66) print_integer) (boolean_shove exec_if (boolean_or integer_eq in1 in3 print_boolean integer_min) (exec_if () (print_integer boolean_shove)))))
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 22
Size: 33
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 3.026
Median total errors in population: 1
Error averages by case: (0.198 0.395 0.123 0.121 0.394 0.395 0.089 0.99 0.123 0.198)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.469
Average program size in population (points): 41.139
Average percent parens in population: 0.368
Minimum age in population: 78.8715780534687
Maximum age in population: 81.4021044710095
Average age in population: 80.42080299045266
Median age in population: 80.27058564110268
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 472
Genome diversity (% unique genomes):	 0.311
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 477
Syntactic diversity (% unique Push programs):	 0.301
Total error diversity:				 0.009
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 22387680
--- Timings ---
Current time: 1559314770845 milliseconds
Total Time:         155.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       115.2 seconds, 74.1%
Fitness Testing:     24.7 seconds, 15.9%
Report:              15.6 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Smallest problem report - generation 53
Test total error for best: 555
Test mean error for best: 0.55500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 76                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 56                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 79                 
Correct output: 27                  | Program output: 48                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 58                 
Correct output: 25                  | Program output: 59                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 75                 
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 48                 
Correct output: 18                  | Program output: 87                 
Correct output: 26                  | Program output: 79                 
Correct output: 40                  | Program output: 40                 
Correct output: 28                  | Program output: 28                 
Correct output: 42                  | Program output: 88                 
Correct output: -41                 | Program output: 82                 
Correct output: -83                 | Program output: -12                
Correct output: -71                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -45                 | Program output: -7                 
Correct output: -21                 | Program output: 82                 
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -58                
Correct output: -44                 | Program output: 54                 
Correct output: -98                 | Program output: -79                
Correct output: -40                 | Program output: -2                 
Correct output: -100                | Program output: 76                 
Correct output: -94                 | Program output: -83                
Correct output: -79                 | Program output: -17                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -3                 
Correct output: -77                 | Program output: -47                
Correct output: -96                 | Program output: 33                 
Correct output: 10                  | Program output: 60                 
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 92                 
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: 50                 
Correct output: -100                | Program output: 70                 
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -59                
Correct output: -63                 | Program output: -63                
Correct output: -69                 | Program output: -62                
Correct output: -69                 | Program output: 92                 
Correct output: 24                  | Program output: 24                 
Correct output: -28                 | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -36                
Correct output: -70                 | Program output: -20                
Correct output: -31                 | Program output: -29                
Correct output: -26                 | Program output: -14                
Correct output: -57                 | Program output: -1                 
Correct output: -97                 | Program output: -19                
Correct output: -95                 | Program output: -78                
Correct output: -77                 | Program output: -45                
Correct output: -48                 | Program output: -30                
Correct output: -50                 | Program output: -3                 
Correct output: -86                 | Program output: -73                
Correct output: -46                 | Program output: -30                
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -28                
Correct output: -66                 | Program output: -26                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction -56} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction in1})
Lexicase best program: (-56 integer_yank tag_integer_865 exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean exec_if () (print_integer) exec_dup (exec_if () (exec_shove (in3 exec_k_when_autoconstructing (exec_when (in2 in1)) ()))))) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 33
Percent parens: 0.424
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction -56} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction in1})
Zero cases best program: (-56 integer_yank tag_integer_865 exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean exec_if () (print_integer) exec_dup (exec_if () (exec_shove (in3 exec_k_when_autoconstructing (exec_when (in2 in1)) ()))))) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 33
Percent parens: 0.424
--- Lexicase Population Statistics ---
Count of elite individuals by case: (138 137 898 137 137 899 137 915 137 1000)
Population mean number of elite cases: 4.53
Count of perfect (error zero) individuals by case: (138 137 898 137 137 899 137 915 137 0)
Population mean number of perfect (error zero) cases: 3.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction in1})
Best program: (exec_do*while (integer_yank) tag_integer_865 exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean exec_if () (print_integer) exec_dup (exec_if () (exec_shove (in3 exec_k_when_autoconstructing (exec_when (in2 in1)) ()))))) ()))
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 19
Size: 34
Percent parens: 0.441
--- Population Statistics ---
Average total errors in population: 6.465
Median total errors in population: 7
Error averages by case: (0.862 0.863 0.102 0.863 0.863 0.101 0.863 0.085 0.863 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 0 1)
Average genome size in population (length): 21.486
Average program size in population (points): 33.144
Average percent parens in population: 0.351
Minimum age in population: 80.50737096551774
Maximum age in population: 83.27263417428811
Average age in population: 82.07505722317956
Median age in population: 82.14316387756676
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 479
Genome diversity (% unique genomes):	 0.337
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 482
Syntactic diversity (% unique Push programs):	 0.329
Total error diversity:				 0.006
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 22674881
--- Timings ---
Current time: 1559314773336 milliseconds
Total Time:         157.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       117.1 seconds, 74.1%
Fitness Testing:     25.0 seconds, 15.8%
Report:              15.8 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Smallest problem report - generation 54
Test total error for best: 548
Test mean error for best: 0.54800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 84                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 55                 
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 68                 
Correct output: 16                  | Program output: 54                 
Correct output: 11                  | Program output: 68                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 80                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 89                 
Correct output: 6                   | Program output: 51                 
Correct output: 12                  | Program output: 34                 
Correct output: 1                   | Program output: 93                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 48                 
Correct output: 28                  | Program output: 78                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -44                
Correct output: -45                 | Program output: -7                 
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: 81                 
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: 0                  
Correct output: -65                 | Program output: -39                
Correct output: -99                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -79                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: 9                  
Correct output: -94                 | Program output: -83                
Correct output: -79                 | Program output: -17                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output: 12                 
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: 8                  
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: -9                 
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -2                 
Correct output: -22                 | Program output: 70                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 89                 
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -70                
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -26                
Correct output: -63                 | Program output: -34                
Correct output: -69                 | Program output: -62                
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 89                 
Correct output: -28                 | Program output: 78                 
Correct output: -15                 | Program output: 63                 
Correct output: -43                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: -31                
Correct output: -26                 | Program output: -25                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -93                
Correct output: -95                 | Program output: -73                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -32                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -73                
Correct output: -46                 | Program output: -30                
Correct output: -86                 | Program output: 67                 
Correct output: -39                 | Program output: -15                
Correct output: -58                 | Program output: 43                 
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -46                
Correct output: -65                 | Program output: 89                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2})
Lexicase best program: (exec_do*while (integer_yank) tag_integer_865 exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean exec_if () (print_integer) exec_dup (exec_if () (exec_shove (in3 exec_k_when_autoconstructing (exec_when (in2)) ()))))) ()))
Lexicase best errors: [0 0 1 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 33
Percent parens: 0.455
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2})
Zero cases best program: (exec_do*while (integer_yank) tag_integer_865 exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean exec_if () (print_integer) exec_dup (exec_if () (exec_shove (in3 exec_k_when_autoconstructing (exec_when (in2)) ()))))) ()))
Zero cases best errors: [0 0 1 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 33
Percent parens: 0.455
--- Lexicase Population Statistics ---
Count of elite individuals by case: (877 10 905 33 10 919 11 2 905 2)
Population mean number of elite cases: 3.67
Count of perfect (error zero) individuals by case: (877 10 905 33 10 919 11 2 905 2)
Population mean number of perfect (error zero) cases: 3.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2})
Best program: (exec_do*while (integer_yank) tag_integer_865 exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean exec_if () (print_integer) exec_dup (exec_if () (exec_shove (in3 exec_k_when_autoconstructing (exec_when (in2)) ()))))) ()))
Errors: [0 0 1 0 0 0 0 1 1 0]
Total: 3
Mean: 0.3
Genome size: 18
Size: 33
Percent parens: 0.455
--- Population Statistics ---
Average total errors in population: 6.326
Median total errors in population: 6
Error averages by case: (0.123 0.99 0.095 0.967 0.99 0.081 0.989 0.998 0.095 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.211
Average program size in population (points): 34.277
Average percent parens in population: 0.439
Minimum age in population: 82.25737096551774
Maximum age in population: 85.01500256990293
Average age in population: 83.67633989458584
Median age in population: 83.75737096551774
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 605
Genome diversity (% unique genomes):	 0.24
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 612
Syntactic diversity (% unique Push programs):	 0.232
Total error diversity:				 0.008
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 23124293
--- Timings ---
Current time: 1559314775716 milliseconds
Total Time:         160.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       118.7 seconds, 74.0%
Fitness Testing:     25.4 seconds, 15.9%
Report:              16.1 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Smallest problem report - generation 55
Test total error for best: 555
Test mean error for best: 0.55500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 76                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 56                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 79                 
Correct output: 27                  | Program output: 48                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 58                 
Correct output: 25                  | Program output: 59                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 75                 
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 48                 
Correct output: 18                  | Program output: 87                 
Correct output: 26                  | Program output: 79                 
Correct output: 40                  | Program output: 40                 
Correct output: 28                  | Program output: 28                 
Correct output: 42                  | Program output: 88                 
Correct output: -41                 | Program output: 82                 
Correct output: -83                 | Program output: -12                
Correct output: -71                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -45                 | Program output: -7                 
Correct output: -21                 | Program output: 82                 
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -58                
Correct output: -44                 | Program output: 54                 
Correct output: -98                 | Program output: -79                
Correct output: -40                 | Program output: -2                 
Correct output: -100                | Program output: 76                 
Correct output: -94                 | Program output: -83                
Correct output: -79                 | Program output: -17                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -3                 
Correct output: -77                 | Program output: -47                
Correct output: -96                 | Program output: 33                 
Correct output: 10                  | Program output: 60                 
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 92                 
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: 50                 
Correct output: -100                | Program output: 70                 
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -59                
Correct output: -63                 | Program output: -63                
Correct output: -69                 | Program output: -62                
Correct output: -69                 | Program output: 92                 
Correct output: 24                  | Program output: 24                 
Correct output: -28                 | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -36                
Correct output: -70                 | Program output: -20                
Correct output: -31                 | Program output: -29                
Correct output: -26                 | Program output: -14                
Correct output: -57                 | Program output: -1                 
Correct output: -97                 | Program output: -19                
Correct output: -95                 | Program output: -78                
Correct output: -77                 | Program output: -45                
Correct output: -48                 | Program output: -30                
Correct output: -50                 | Program output: -3                 
Correct output: -86                 | Program output: -73                
Correct output: -46                 | Program output: -30                
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -28                
Correct output: -66                 | Program output: -26                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 1, :instruction exec_if} {:close 1, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction in1})
Lexicase best program: (integer_rot integer_yank tag_integer_865 exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean exec_if () (print_integer) exec_dup (exec_if () (exec_shove (in3 exec_k_when_autoconstructing (exec_when (in2 exec_if () (exec_shove () in3 exec_k_when_autoconstructing (exec_when (in2 in1)) ()))) ()))))) ()))
Lexicase best errors: [0 1 0 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 45
Percent parens: 0.444
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 1, :instruction exec_if} {:close 1, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction in1})
Zero cases best program: (integer_rot integer_yank tag_integer_865 exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean exec_if () (print_integer) exec_dup (exec_if () (exec_shove (in3 exec_k_when_autoconstructing (exec_when (in2 exec_if () (exec_shove () in3 exec_k_when_autoconstructing (exec_when (in2 in1)) ()))) ()))))) ()))
Zero cases best errors: [0 1 0 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 45
Percent parens: 0.444
--- Lexicase Population Statistics ---
Count of elite individuals by case: (533 118 241 359 118 359 914 214 214 638)
Population mean number of elite cases: 3.71
Count of perfect (error zero) individuals by case: (533 118 241 359 118 359 914 214 214 638)
Population mean number of perfect (error zero) cases: 3.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction in1})
Best program: (exec_do*while (integer_yank) tag_integer_865 exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean exec_if () (print_integer) exec_dup (exec_if () (exec_shove (in3 exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_when (in2 in1)) ()) ()))))) ()))
Errors: [0 1 0 0 1 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 20
Size: 37
Percent parens: 0.459
--- Population Statistics ---
Average total errors in population: 6.292
Median total errors in population: 7
Error averages by case: (0.467 0.882 0.759 0.641 0.882 0.641 0.086 0.786 0.786 0.362)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 18.56
Average program size in population (points): 33.674
Average percent parens in population: 0.448
Minimum age in population: 84.10381919352999
Maximum age in population: 86.35381919352999
Average age in population: 85.38989672171202
Median age in population: 85.35381919352999
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 324
Genome diversity (% unique genomes):	 0.28
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 327
Syntactic diversity (% unique Push programs):	 0.269
Total error diversity:				 0.008
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 23554629
--- Timings ---
Current time: 1559314778352 milliseconds
Total Time:         162.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       120.5 seconds, 74.0%
Fitness Testing:     25.9 seconds, 15.9%
Report:              16.4 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Smallest problem report - generation 56
Test total error for best: 543
Test mean error for best: 0.54300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 84                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 68                 
Correct output: 16                  | Program output: 54                 
Correct output: 11                  | Program output: 68                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 80                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 89                 
Correct output: 6                   | Program output: 51                 
Correct output: 12                  | Program output: 34                 
Correct output: 1                   | Program output: 93                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 48                 
Correct output: 28                  | Program output: 78                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -44                
Correct output: -45                 | Program output: -7                 
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: 81                 
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: 0                  
Correct output: -65                 | Program output: -39                
Correct output: -99                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -79                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: 9                  
Correct output: -94                 | Program output: -83                
Correct output: -79                 | Program output: -17                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output: 12                 
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: 8                  
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: -9                 
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -2                 
Correct output: -22                 | Program output: 70                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 89                 
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -70                
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -26                
Correct output: -63                 | Program output: -34                
Correct output: -69                 | Program output: -62                
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 89                 
Correct output: -28                 | Program output: 78                 
Correct output: -15                 | Program output: 63                 
Correct output: -43                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: -31                
Correct output: -26                 | Program output: -25                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -93                
Correct output: -95                 | Program output: -73                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -32                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -73                
Correct output: -46                 | Program output: -30                
Correct output: -86                 | Program output: 67                 
Correct output: -39                 | Program output: -15                
Correct output: -58                 | Program output: 43                 
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -46                
Correct output: -65                 | Program output: 89                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2})
Lexicase best program: (exec_do*while (integer_yank) tag_integer_865 exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean exec_if () (print_integer) exec_dup (exec_if () (exec_shove (in3 exec_k_when_autoconstructing (exec_when (in2)) ()))))) ()))
Lexicase best errors: [0 1 1 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 33
Percent parens: 0.455
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2})
Zero cases best program: (exec_do*while (integer_yank) tag_integer_865 exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean exec_if () (print_integer) exec_dup (exec_if () (exec_shove (in3 exec_k_when_autoconstructing (exec_when (in2)) ()))))) ()))
Zero cases best errors: [0 1 1 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 33
Percent parens: 0.455
--- Lexicase Population Statistics ---
Count of elite individuals by case: (218 305 568 55 166 305 166 157 320 448)
Population mean number of elite cases: 2.71
Count of perfect (error zero) individuals by case: (218 305 568 55 166 305 166 157 320 448)
Population mean number of perfect (error zero) cases: 2.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2})
Best program: (exec_do*while (integer_yank) tag_integer_865 exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean exec_if (print_integer exec_dup (exec_if (exec_shove (in3 exec_k_when_autoconstructing (exec_when (in2)) ())) ())) ())) ()))
Errors: [0 1 1 0 0 1 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 18
Size: 33
Percent parens: 0.455
--- Population Statistics ---
Average total errors in population: 7.292
Median total errors in population: 8
Error averages by case: (0.782 0.695 0.432 0.945 0.834 0.695 0.834 0.843 0.68 0.552)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.19
Average program size in population (points): 36.844
Average percent parens in population: 0.451
Minimum age in population: 85.10381919352999
Maximum age in population: 88.12793125053305
Average age in population: 86.56437257749721
Median age in population: 86.70026742154225
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 188
Genome diversity (% unique genomes):	 0.306
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 188
Syntactic diversity (% unique Push programs):	 0.297
Total error diversity:				 0.007
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 24046337
--- Timings ---
Current time: 1559314781072 milliseconds
Total Time:         165.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       122.4 seconds, 73.9%
Fitness Testing:     26.4 seconds, 16.0%
Report:              16.7 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Smallest problem report - generation 57
Test total error for best: 400
Test mean error for best: 0.40000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 58                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 48                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 40                 
Correct output: 28                  | Program output: 28                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: 82                 
Correct output: -83                 | Program output: -12                
Correct output: -71                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -92                
Correct output: -40                 | Program output: -2                 
Correct output: -100                | Program output: 9                  
Correct output: -94                 | Program output: -83                
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -3                 
Correct output: -77                 | Program output: -47                
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 70                 
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -59                
Correct output: -63                 | Program output: -63                
Correct output: -69                 | Program output: -62                
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 24                 
Correct output: -28                 | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -20                
Correct output: -31                 | Program output: -29                
Correct output: -26                 | Program output: -14                
Correct output: -57                 | Program output: -1                 
Correct output: -97                 | Program output: -19                
Correct output: -95                 | Program output: -78                
Correct output: -77                 | Program output: -45                
Correct output: -48                 | Program output: -30                
Correct output: -50                 | Program output: -3                 
Correct output: -86                 | Program output: -73                
Correct output: -46                 | Program output: -30                
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -28                
Correct output: -66                 | Program output: -26                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 1, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Lexicase best program: (exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean exec_if () (print_integer exec_dup (exec_if () (exec_shove (in3 exec_k_when_autoconstructing (exec_when (in2 exec_if () (integer_gt) in3 exec_k_when_autoconstructing (exec_when (in2) in1) ())) ())))))) ()))
Lexicase best errors: [0 0 1 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 41
Percent parens: 0.463
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 1, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Zero cases best program: (exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean exec_if () (print_integer exec_dup (exec_if () (exec_shove (in3 exec_k_when_autoconstructing (exec_when (in2 exec_if () (integer_gt) in3 exec_k_when_autoconstructing (exec_when (in2) in1) ())) ())))))) ()))
Zero cases best errors: [0 0 1 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 41
Percent parens: 0.463
--- Lexicase Population Statistics ---
Count of elite individuals by case: (791 335 267 269 546 334 297 562 908 920)
Population mean number of elite cases: 5.23
Count of perfect (error zero) individuals by case: (791 335 267 269 546 334 297 562 908 920)
Population mean number of perfect (error zero) cases: 5.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 1, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Best program: (exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean exec_if () (print_integer exec_dup (exec_if () (exec_shove (in3 exec_k_when_autoconstructing (exec_when (in2 exec_if () (integer_gt) in3 exec_k_when_autoconstructing (exec_when (in2) in1) ())) ())))))) ()))
Errors: [0 0 1 1 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 22
Size: 41
Percent parens: 0.463
--- Population Statistics ---
Average total errors in population: 4.771
Median total errors in population: 4
Error averages by case: (0.209 0.665 0.733 0.731 0.454 0.666 0.703 0.438 0.092 0.08)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.864
Average program size in population (points): 36.91
Average percent parens in population: 0.461
Minimum age in population: 86.35381919352999
Maximum age in population: 89.55337522203152
Average age in population: 88.051463666884
Median age in population: 88.14220713652692
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 206
Genome diversity (% unique genomes):	 0.33
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 206
Syntactic diversity (% unique Push programs):	 0.32
Total error diversity:				 0.009
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 24538478
--- Timings ---
Current time: 1559314783946 milliseconds
Total Time:         168.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       124.3 seconds, 73.8%
Fitness Testing:     27.0 seconds, 16.0%
Report:              17.0 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Smallest problem report - generation 58
Test total error for best: 400
Test mean error for best: 0.40000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 58                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 48                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 40                 
Correct output: 28                  | Program output: 28                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: 82                 
Correct output: -83                 | Program output: -12                
Correct output: -71                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -92                
Correct output: -40                 | Program output: -2                 
Correct output: -100                | Program output: 9                  
Correct output: -94                 | Program output: -83                
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -3                 
Correct output: -77                 | Program output: -47                
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 70                 
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -59                
Correct output: -63                 | Program output: -63                
Correct output: -69                 | Program output: -62                
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 24                 
Correct output: -28                 | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -20                
Correct output: -31                 | Program output: -29                
Correct output: -26                 | Program output: -14                
Correct output: -57                 | Program output: -1                 
Correct output: -97                 | Program output: -19                
Correct output: -95                 | Program output: -78                
Correct output: -77                 | Program output: -45                
Correct output: -48                 | Program output: -30                
Correct output: -50                 | Program output: -3                 
Correct output: -86                 | Program output: -73                
Correct output: -46                 | Program output: -30                
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -28                
Correct output: -66                 | Program output: -26                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 1, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Lexicase best program: (exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean exec_if () (print_integer exec_dup (exec_if () (exec_shove (in3 exec_k_when_autoconstructing (exec_when (in2 exec_if () (integer_gt) in3 exec_k_when_autoconstructing (exec_when (in2) in1) ())) ())))))) ()))
Lexicase best errors: [1 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 41
Percent parens: 0.463
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 1, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Zero cases best program: (exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean exec_if () (print_integer exec_dup (exec_if () (exec_shove (in3 exec_k_when_autoconstructing (exec_when (in2 exec_if () (integer_gt) in3 exec_k_when_autoconstructing (exec_when (in2) in1) ())) ())))))) ()))
Zero cases best errors: [1 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 41
Percent parens: 0.463
--- Lexicase Population Statistics ---
Count of elite individuals by case: (398 471 456 904 397 698 493 611 612 689)
Population mean number of elite cases: 5.73
Count of perfect (error zero) individuals by case: (398 471 456 904 397 698 493 611 612 689)
Population mean number of perfect (error zero) cases: 5.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 1, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Best program: (in1 tag_integer_451 exec_dup (print_boolean exec_if () (print_integer exec_dup (exec_if () (exec_shove (in3 exec_k_when_autoconstructing (exec_when (in2 exec_if () (integer_gt) in3 exec_k_when_autoconstructing (exec_when (in2) in1) ())) ()))))))
Errors: [1 0 0 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 20
Size: 36
Percent parens: 0.444
--- Population Statistics ---
Average total errors in population: 4.271
Median total errors in population: 5
Error averages by case: (0.602 0.529 0.544 0.096 0.603 0.302 0.507 0.389 0.388 0.311)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.612
Average program size in population (points): 38.56
Average percent parens in population: 0.465
Minimum age in population: 87.35381919352999
Maximum age in population: 91.19043125053305
Average age in population: 89.5393650418703
Median age in population: 89.4909948146615
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 380
Genome diversity (% unique genomes):	 0.295
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 380
Syntactic diversity (% unique Push programs):	 0.291
Total error diversity:				 0.008
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 25084737
--- Timings ---
Current time: 1559314786858 milliseconds
Total Time:         171.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       126.3 seconds, 73.7%
Fitness Testing:     27.5 seconds, 16.1%
Report:              17.4 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Smallest problem report - generation 59
Test total error for best: 400
Test mean error for best: 0.40000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 58                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 48                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 40                 
Correct output: 28                  | Program output: 28                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: 82                 
Correct output: -83                 | Program output: -12                
Correct output: -71                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -92                
Correct output: -40                 | Program output: -2                 
Correct output: -100                | Program output: 9                  
Correct output: -94                 | Program output: -83                
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -3                 
Correct output: -77                 | Program output: -47                
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 70                 
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -59                
Correct output: -63                 | Program output: -63                
Correct output: -69                 | Program output: -62                
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 24                 
Correct output: -28                 | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -20                
Correct output: -31                 | Program output: -29                
Correct output: -26                 | Program output: -14                
Correct output: -57                 | Program output: -1                 
Correct output: -97                 | Program output: -19                
Correct output: -95                 | Program output: -78                
Correct output: -77                 | Program output: -45                
Correct output: -48                 | Program output: -30                
Correct output: -50                 | Program output: -3                 
Correct output: -86                 | Program output: -73                
Correct output: -46                 | Program output: -30                
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -28                
Correct output: -66                 | Program output: -26                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 1, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Lexicase best program: (exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean exec_if () (print_integer exec_dup (exec_if () (exec_shove (in3 exec_k_when_autoconstructing (exec_when (in2 exec_if () (integer_gt) in3 exec_k_when_autoconstructing (exec_when (in2) in1) ())) ())))))) ()))
Lexicase best errors: [0 1 1 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 41
Percent parens: 0.463
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 1, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Zero cases best program: (exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean exec_if () (print_integer exec_dup (exec_if () (exec_shove (in3 exec_k_when_autoconstructing (exec_when (in2 exec_if () (integer_gt) in3 exec_k_when_autoconstructing (exec_when (in2) in1) ())) ())))))) ()))
Zero cases best errors: [0 1 1 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 41
Percent parens: 0.463
--- Lexicase Population Statistics ---
Count of elite individuals by case: (675 180 332 547 18 676 189 335 546 701)
Population mean number of elite cases: 4.20
Count of perfect (error zero) individuals by case: (675 180 332 547 18 676 189 335 546 701)
Population mean number of perfect (error zero) cases: 4.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 1, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Best program: (exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean exec_if () (print_integer exec_dup (exec_if () (exec_shove (in3 exec_k_when_autoconstructing (exec_when (in2 exec_if () (integer_gt) in3 exec_k_when_autoconstructing (exec_when (in2) in1) ())) ())))))) ()))
Errors: [0 1 1 0 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 22
Size: 41
Percent parens: 0.463
--- Population Statistics ---
Average total errors in population: 5.801
Median total errors in population: 5
Error averages by case: (0.325 0.82 0.668 0.453 0.982 0.324 0.811 0.665 0.454 0.299)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.899
Average program size in population (points): 38.868
Average percent parens in population: 0.462
Minimum age in population: 88.35381919352999
Maximum age in population: 92.6687782362823
Average age in population: 91.03633710823311
Median age in population: 91.14220713652692
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 379
Genome diversity (% unique genomes):	 0.341
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 379
Syntactic diversity (% unique Push programs):	 0.334
Total error diversity:				 0.006
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 25633972
--- Timings ---
Current time: 1559314789731 milliseconds
Total Time:         174.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       128.1 seconds, 73.6%
Fitness Testing:     28.1 seconds, 16.1%
Report:              17.8 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Smallest problem report - generation 60
Test total error for best: 534
Test mean error for best: 0.53400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 76                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 56                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 79                 
Correct output: 27                  | Program output: 48                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 58                 
Correct output: 25                  | Program output: 59                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 75                 
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 48                 
Correct output: 18                  | Program output: 87                 
Correct output: 26                  | Program output: 79                 
Correct output: 40                  | Program output: 40                 
Correct output: 28                  | Program output: 28                 
Correct output: 42                  | Program output: 88                 
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: 52                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: 76                 
Correct output: -45                 | Program output: -7                 
Correct output: -21                 | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: -73                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: -57                
Correct output: -65                 | Program output: -39                
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: 90                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -39                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output: -70                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -30                
Correct output: 10                  | Program output: 60                 
Correct output: -36                 | Program output: -9                 
Correct output: -85                 | Program output: 92                 
Correct output: -83                 | Program output: -2                 
Correct output: -22                 | Program output: 60                 
Correct output: -74                 | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -25                
Correct output: -98                 | Program output: -70                
Correct output: -99                 | Program output: 93                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -6                 
Correct output: -69                 | Program output: -69                
Correct output: -69                 | Program output: -54                
Correct output: 24                  | Program output: 24                 
Correct output: -28                 | Program output: -28                
Correct output: -15                 | Program output: 56                 
Correct output: -43                 | Program output: -37                
Correct output: -70                 | Program output: -2                 
Correct output: -31                 | Program output: -31                
Correct output: -26                 | Program output: -26                
Correct output: -57                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: 43                 
Correct output: -48                 | Program output: -48                
Correct output: -50                 | Program output: 38                 
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: -46                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: -15                
Correct output: -58                 | Program output: -30                
Correct output: -84                 | Program output: 41                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: 17                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction in4})
Lexicase best program: (tag_integer_451 exec_dup (print_boolean exec_if () (print_integer) exec_dup (exec_if () (exec_shove (in3 exec_k_when_autoconstructing (exec_when (in2 in4)) ())))))
Lexicase best errors: [0 0 0 0 1 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 24
Percent parens: 0.458
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction in4})
Zero cases best program: (tag_integer_451 exec_dup (print_boolean exec_if () (print_integer) exec_dup (exec_if () (exec_shove (in3 exec_k_when_autoconstructing (exec_when (in2 in4)) ())))))
Zero cases best errors: [0 0 0 0 1 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 24
Percent parens: 0.458
--- Lexicase Population Statistics ---
Count of elite individuals by case: (396 885 411 338 369 292 222 278 411 538)
Population mean number of elite cases: 4.14
Count of perfect (error zero) individuals by case: (396 885 411 338 369 292 222 278 411 538)
Population mean number of perfect (error zero) cases: 4.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction in4})
Best program: (exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean print_boolean exec_if () (print_integer) exec_dup (exec_if () (exec_shove (in3 exec_k_when_autoconstructing (exec_when (in2 in4)) ()))))) ()))
Errors: [0 0 0 0 1 0 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 17
Size: 31
Percent parens: 0.452
--- Population Statistics ---
Average total errors in population: 5.86
Median total errors in population: 6
Error averages by case: (0.604 0.115 0.589 0.662 0.631 0.708 0.778 0.722 0.589 0.462)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.342
Average program size in population (points): 38.162
Average percent parens in population: 0.467
Minimum age in population: 89.45026742154225
Maximum age in population: 94.20661121490615
Average age in population: 92.44656134940826
Median age in population: 92.46922220778075
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 100
Genome diversity (% unique genomes):	 0.438
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 100
Syntactic diversity (% unique Push programs):	 0.429
Total error diversity:				 0.007
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.079
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 26167431
--- Timings ---
Current time: 1559314792491 milliseconds
Total Time:         177.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       130.0 seconds, 73.4%
Fitness Testing:     28.7 seconds, 16.2%
Report:              18.2 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Smallest problem report - generation 61
Test total error for best: 554
Test mean error for best: 0.55400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output:                    
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output:                    
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output:                    
Correct output: -60                 | Program output:                    
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output:                    
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output:                    
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output:                    
Correct output: 49                  | Program output:                    
Correct output: 5                   | Program output:                    
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output:                    
Correct output: 27                  | Program output:                    
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 58                 
Correct output: 25                  | Program output:                    
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output:                    
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 48                 
Correct output: 18                  | Program output:                    
Correct output: 26                  | Program output:                    
Correct output: 40                  | Program output: 40                 
Correct output: 28                  | Program output: 28                 
Correct output: 42                  | Program output:                    
Correct output: -41                 | Program output: 82                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -30                
Correct output: -88                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output:                    
Correct output: -94                 | Program output: -83                
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output:                    
Correct output: -41                 | Program output: -3                 
Correct output: -77                 | Program output:                    
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output:                    
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 70                 
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -72                
Correct output: -63                 | Program output: -34                
Correct output: -69                 | Program output: -62                
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 24                 
Correct output: -28                 | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: -29                
Correct output: -26                 | Program output: -14                
Correct output: -57                 | Program output: -1                 
Correct output: -97                 | Program output: -93                
Correct output: -95                 | Program output: -73                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -32                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -73                
Correct output: -46                 | Program output: -30                
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -46                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 1, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Lexicase best program: (exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean exec_if () (print_integer exec_dup (exec_if () (exec_shove (in3 exec_k_when_autoconstructing (integer_max in2 exec_if () (integer_gt) in3 exec_k_when_autoconstructing (exec_when (in2) in1) ()) ())))))) ()))
Lexicase best errors: [1 0 0 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 40
Percent parens: 0.450
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 1, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Zero cases best program: (exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean exec_if () (print_integer exec_dup (exec_if () (exec_shove (in3 exec_k_when_autoconstructing (integer_max in2 exec_if () (integer_gt) in3 exec_k_when_autoconstructing (exec_when (in2) in1) ()) ())))))) ()))
Zero cases best errors: [1 0 0 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 40
Percent parens: 0.450
--- Lexicase Population Statistics ---
Count of elite individuals by case: (247 897 396 246 908 374 396 576 759 696)
Population mean number of elite cases: 5.49
Count of perfect (error zero) individuals by case: (247 897 396 246 908 374 396 576 759 696)
Population mean number of perfect (error zero) cases: 5.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction exec_shove} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 1, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction in1})
Best program: (exec_when (exec_shove (in1 tag_integer_451 exec_dup (print_boolean exec_if () (print_integer exec_dup (exec_if () (exec_shove (in3 exec_k_when_autoconstructing (exec_when (in2 exec_if () (integer_gt) in3 exec_k_when_autoconstructing () (exec_when (in2 in1)))) ()))))))))
Errors: [1 0 0 1 0 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 22
Size: 40
Percent parens: 0.450
--- Population Statistics ---
Average total errors in population: 4.505
Median total errors in population: 3
Error averages by case: (0.753 0.103 0.604 0.754 0.092 0.626 0.604 0.424 0.241 0.304)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 21.493
Average program size in population (points): 39.88
Average percent parens in population: 0.459
Minimum age in population: 91.45026742154225
Maximum age in population: 95.62362792571653
Average age in population: 93.89149553372758
Median age in population: 93.93197409168748
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 114
Genome diversity (% unique genomes):	 0.445
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 114
Syntactic diversity (% unique Push programs):	 0.438
Total error diversity:				 0.008
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.099
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 26801529
--- Timings ---
Current time: 1559314795402 milliseconds
Total Time:         179.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       131.9 seconds, 73.3%
Fitness Testing:     29.3 seconds, 16.3%
Report:              18.5 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Smallest problem report - generation 62
Test total error for best: 530
Test mean error for best: 0.53000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 76                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 56                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 79                 
Correct output: 27                  | Program output: 48                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 58                 
Correct output: 25                  | Program output: 59                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 75                 
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 87                 
Correct output: 26                  | Program output: 79                 
Correct output: 40                  | Program output: 40                 
Correct output: 28                  | Program output: 28                 
Correct output: 42                  | Program output: 88                 
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: 52                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: 76                 
Correct output: -45                 | Program output: 1                  
Correct output: -21                 | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: -73                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: -57                
Correct output: -65                 | Program output: -39                
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: 90                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -39                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output: -70                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -30                
Correct output: 10                  | Program output: 60                 
Correct output: -36                 | Program output: -9                 
Correct output: -85                 | Program output: 92                 
Correct output: -83                 | Program output: -2                 
Correct output: -22                 | Program output: 60                 
Correct output: -74                 | Program output: 50                 
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -25                
Correct output: -98                 | Program output: -70                
Correct output: -99                 | Program output: 93                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -6                 
Correct output: -69                 | Program output: -69                
Correct output: -69                 | Program output: -54                
Correct output: 24                  | Program output: 24                 
Correct output: -28                 | Program output: -28                
Correct output: -15                 | Program output: 56                 
Correct output: -43                 | Program output: -37                
Correct output: -70                 | Program output: -2                 
Correct output: -31                 | Program output: -31                
Correct output: -26                 | Program output: -26                
Correct output: -57                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: 43                 
Correct output: -48                 | Program output: -48                
Correct output: -50                 | Program output: 38                 
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: -46                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: -15                
Correct output: -58                 | Program output: -30                
Correct output: -84                 | Program output: 41                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: 17                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction tag_integer_865} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction in4})
Lexicase best program: (exec_do*while (in2) tag_integer_865 integer_lt exec_swap (in1 tag_integer_451 exec_dup (print_boolean exec_if (print_integer exec_dup (exec_if () (exec_shove (in3 exec_k_when_autoconstructing (exec_when (in2 in4)) ())))) ())) ())
Lexicase best errors: [0 0 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 33
Percent parens: 0.424
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction in2} {:close 1, :instruction tag_integer_865} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction in4})
Zero cases best program: (exec_do*while (in2) tag_integer_865 integer_lt exec_swap (in1 tag_integer_451 exec_dup (print_boolean exec_if (print_integer exec_dup (exec_if () (exec_shove (in3 exec_k_when_autoconstructing (exec_when (in2 in4)) ())))) ())) ())
Zero cases best errors: [0 0 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 33
Percent parens: 0.424
--- Lexicase Population Statistics ---
Count of elite individuals by case: (493 464 689 405 556 464 310 74 729 415)
Population mean number of elite cases: 4.60
Count of perfect (error zero) individuals by case: (493 464 689 405 556 464 310 74 729 415)
Population mean number of perfect (error zero) cases: 4.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction in4})
Best program: (exec_do*while (integer_yank tag_integer_865) exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean exec_if (print_integer exec_dup (exec_if () (exec_shove (in3 exec_k_when_autoconstructing (exec_when (in2 in4)) ())))) ())) ()))
Errors: [0 0 0 1 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 19
Size: 34
Percent parens: 0.441
--- Population Statistics ---
Average total errors in population: 5.401
Median total errors in population: 6
Error averages by case: (0.507 0.536 0.311 0.595 0.444 0.536 0.69 0.926 0.271 0.585)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 20.8
Average program size in population (points): 38.439
Average percent parens in population: 0.458
Minimum age in population: 93.10996680041073
Maximum age in population: 97.16947194174864
Average age in population: 95.38738105502561
Median age in population: 95.41321339223985
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 83
Genome diversity (% unique genomes):	 0.443
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 83
Syntactic diversity (% unique Push programs):	 0.434
Total error diversity:				 0.009
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.095
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 27350103
--- Timings ---
Current time: 1559314798287 milliseconds
Total Time:         182.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       133.9 seconds, 73.2%
Fitness Testing:     29.9 seconds, 16.4%
Report:              18.9 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Smallest problem report - generation 63
Test total error for best: 657
Test mean error for best: 0.65700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 84                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: 17                 
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 55                 
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 68                 
Correct output: 16                  | Program output: 54                 
Correct output: 11                  | Program output: 68                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 80                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 89                 
Correct output: 6                   | Program output: 51                 
Correct output: 12                  | Program output: 34                 
Correct output: 1                   | Program output: 93                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 48                 
Correct output: 28                  | Program output: 78                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: 40                 
Correct output: -88                 | Program output: -44                
Correct output: -45                 | Program output: 1                  
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: 81                 
Correct output: -78                 | Program output: -73                
Correct output: -45                 | Program output: 95                 
Correct output: -30                 | Program output: 72                 
Correct output: -91                 | Program output: -57                
Correct output: -65                 | Program output: 93                 
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: 9                  
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -39                
Correct output: -43                 | Program output: 90                 
Correct output: -76                 | Program output: 12                 
Correct output: -41                 | Program output: 64                 
Correct output: -77                 | Program output: 8                  
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 11                 
Correct output: -22                 | Program output: 70                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 89                 
Correct output: -78                 | Program output: 34                 
Correct output: -29                 | Program output: -25                
Correct output: -98                 | Program output: 7                  
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -34                
Correct output: -69                 | Program output: -69                
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 89                 
Correct output: -28                 | Program output: 78                 
Correct output: -15                 | Program output: 63                 
Correct output: -43                 | Program output: -37                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: 84                 
Correct output: -26                 | Program output: -26                
Correct output: -57                 | Program output: -18                
Correct output: -97                 | Program output: -93                
Correct output: -95                 | Program output: -73                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -32                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: -46                
Correct output: -86                 | Program output: 67                 
Correct output: -39                 | Program output: 80                 
Correct output: -58                 | Program output: 43                 
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -46                
Correct output: -65                 | Program output: 89                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 1, :instruction exec_if} {:close 0, :instruction in4})
Lexicase best program: (exec_do*while (integer_yank) tag_integer_865 exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean exec_if () (print_integer) integer_eq exec_if () (exec_shove (in3 exec_k_when_autoconstructing (in2 exec_if () (exec_shove (in3 exec_k_when_autoconstructing (exec_when (in2 exec_if () (in4))) ()))) ())))) ()))
Lexicase best errors: [0 1 0 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 46
Percent parens: 0.457
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in2} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 1, :instruction exec_if} {:close 0, :instruction in4})
Zero cases best program: (exec_do*while (integer_yank) tag_integer_865 exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean exec_if () (print_integer) integer_eq exec_if () (exec_shove (in3 exec_k_when_autoconstructing (in2 exec_if () (exec_shove (in3 exec_k_when_autoconstructing (exec_when (in2 exec_if () (in4))) ()))) ())))) ()))
Zero cases best errors: [0 1 0 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 46
Percent parens: 0.457
--- Lexicase Population Statistics ---
Count of elite individuals by case: (277 622 36 910 3 277 713 713 753 277)
Population mean number of elite cases: 4.58
Count of perfect (error zero) individuals by case: (277 622 36 910 3 277 713 713 753 277)
Population mean number of perfect (error zero) cases: 4.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*while} {:close 1, :instruction integer_yank} {:close 1, :instruction tag_integer_865} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_boolean} {:close 1, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction in4})
Best program: (exec_do*while (integer_yank) tag_integer_865 exec_when (exec_swap (in1 tag_integer_451 exec_dup (print_boolean exec_if () (print_integer) exec_dup (boolean_dup_items exec_shove (in3 exec_k_when_autoconstructing (exec_when (in2 in4)) ())))) ()))
Errors: [0 1 0 0 1 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 19
Size: 32
Percent parens: 0.406
--- Population Statistics ---
Average total errors in population: 5.419
Median total errors in population: 5
Error averages by case: (0.723 0.378 0.964 0.09 0.997 0.723 0.287 0.287 0.247 0.723)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 19.907
Average program size in population (points): 35.751
Average percent parens in population: 0.442
Minimum age in population: 94.38272974340767
Maximum age in population: 98.82834424890461
Average age in population: 96.73154361983137
Median age in population: 96.79101823787919
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 106
Genome diversity (% unique genomes):	 0.342
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 106
Syntactic diversity (% unique Push programs):	 0.336
Total error diversity:				 0.008
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 27830874
--- Timings ---
Current time: 1559314801004 milliseconds
Total Time:         185.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       135.8 seconds, 73.2%
Fitness Testing:     30.4 seconds, 16.4%
Report:              19.2 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Smallest problem report - generation 64
Test total error for best: 461
Test mean error for best: 0.46100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 76                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 56                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 79                 
Correct output: 27                  | Program output: 48                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 58                 
Correct output: 25                  | Program output: 59                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 75                 
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 48                 
Correct output: 18                  | Program output: 87                 
Correct output: 26                  | Program output: 79                 
Correct output: 40                  | Program output: 40                 
Correct output: 28                  | Program output: 28                 
Correct output: 42                  | Program output: 88                 
Correct output: -41                 | Program output: 82                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: 38                 
Correct output: -91                 | Program output: 0                  
Correct output: -65                 | Program output: -39                
Correct output: -99                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -79                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: 76                 
Correct output: -94                 | Program output: -83                
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -47                
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 60                 
Correct output: -36                 | Program output: -9                 
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -2                 
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 70                 
Correct output: -78                 | Program output: 56                 
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -70                
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -72                
Correct output: -63                 | Program output: -34                
Correct output: -69                 | Program output: -62                
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 24                 
Correct output: -28                 | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: -31                
Correct output: -26                 | Program output: -25                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -93                
Correct output: -95                 | Program output: -73                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -32                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -73                
Correct output: -46                 | Program output: -30                
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output: -15                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -46                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Lexicase best program: (exec_when (exec_swap (in1 exec_when () exec_swap (in1 tag_integer_451 exec_dup (exec_yank exec_if () (print_integer exec_dup (exec_if () (exec_shove (in3 exec_dup (exec_if () (exec_shove (exec_when () in2 exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_when (in2) in1) ())))))))))) ()) ()))
Lexicase best errors: [0 0 0 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 51
Percent parens: 0.471
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Zero cases best program: (exec_when (exec_swap (in1 exec_when () exec_swap (in1 tag_integer_451 exec_dup (exec_yank exec_if () (print_integer exec_dup (exec_if () (exec_shove (in3 exec_dup (exec_if () (exec_shove (exec_when () in2 exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_when (in2) in1) ())))))))))) ()) ()))
Zero cases best errors: [0 0 0 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 51
Percent parens: 0.471
--- Lexicase Population Statistics ---
Count of elite individuals by case: (460 433 888 598 509 265 187 18 431 600)
Population mean number of elite cases: 4.39
Count of perfect (error zero) individuals by case: (460 433 888 598 509 265 187 18 431 600)
Population mean number of perfect (error zero) cases: 4.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Best program: (exec_when (exec_swap (in1 exec_when () exec_swap (in1 tag_integer_451 exec_dup (exec_yank exec_if () (print_integer exec_dup (exec_if () (exec_shove (in3 exec_dup (exec_if () (exec_shove (exec_when () in2 exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_when (in2) in1) ())))))))))) ()) ()))
Errors: [0 0 0 0 1 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 27
Size: 51
Percent parens: 0.471
--- Population Statistics ---
Average total errors in population: 5.611
Median total errors in population: 6
Error averages by case: (0.54 0.567 0.112 0.402 0.491 0.735 0.813 0.982 0.569 0.4)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.66
Average program size in population (points): 41.148
Average percent parens in population: 0.446
Minimum age in population: 95.76380260489468
Maximum age in population: 100.2424675950657
Average age in population: 98.11295349741916
Median age in population: 98.22126502725324
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 142
Genome diversity (% unique genomes):	 0.357
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 142
Syntactic diversity (% unique Push programs):	 0.351
Total error diversity:				 0.009
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.099
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 28388684
--- Timings ---
Current time: 1559314804104 milliseconds
Total Time:         188.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       137.7 seconds, 73.1%
Fitness Testing:     31.0 seconds, 16.5%
Report:              19.6 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Smallest problem report - generation 65
Test total error for best: 439
Test mean error for best: 0.43900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 58                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 48                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 40                 
Correct output: 28                  | Program output: 28                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: 82                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: 75                 
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: 0                  
Correct output: -65                 | Program output: -39                
Correct output: -99                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: 9                  
Correct output: -94                 | Program output: -83                
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output: 12                 
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: 8                  
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: -9                 
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -2                 
Correct output: -22                 | Program output: 60                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 70                 
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -70                
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -72                
Correct output: -63                 | Program output: -34                
Correct output: -69                 | Program output: -62                
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 24                 
Correct output: -28                 | Program output: 59                 
Correct output: -15                 | Program output: 56                 
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: -31                
Correct output: -26                 | Program output: -25                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -93                
Correct output: -95                 | Program output: -73                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -32                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -73                
Correct output: -46                 | Program output: -30                
Correct output: -86                 | Program output: 49                 
Correct output: -39                 | Program output: -15                
Correct output: -58                 | Program output: 42                 
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -46                
Correct output: -65                 | Program output: 17                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Lexicase best program: (exec_when () exec_swap (in1 tag_integer_451 exec_dup (exec_yank exec_if () (print_integer boolean_dup_times exec_if () (exec_shove (in3 exec_k_when_autoconstructing (exec_when () in2 exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_when (in2) in1) ())) ()))))) ())
Lexicase best errors: [0 0 1 1 1 1 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 40
Percent parens: 0.450
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Zero cases best program: (exec_when () exec_swap (in1 tag_integer_451 exec_dup (exec_yank exec_if () (print_integer boolean_dup_times exec_if () (exec_shove (in3 exec_k_when_autoconstructing (exec_when () in2 exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_when (in2) in1) ())) ()))))) ())
Zero cases best errors: [0 0 1 1 1 1 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 40
Percent parens: 0.450
--- Lexicase Population Statistics ---
Count of elite individuals by case: (360 545 46 1000 48 1000 796 702 890 1000)
Population mean number of elite cases: 6.39
Count of perfect (error zero) individuals by case: (360 545 46 0 48 0 796 702 890 0)
Population mean number of perfect (error zero) cases: 3.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Best program: (exec_when () exec_swap (in1 tag_integer_451 exec_dup (exec_yank exec_if () (print_integer boolean_dup_times exec_if (exec_shove (in3 exec_k_when_autoconstructing (exec_when () in2 exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_when (in2) in1) ())) ())) ()))) ())
Errors: [0 0 1 1 1 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 22
Size: 40
Percent parens: 0.450
--- Population Statistics ---
Average total errors in population: 6.613
Median total errors in population: 6
Error averages by case: (0.64 0.455 0.954 1.0 0.952 1.0 0.204 0.298 0.11 1.0)
Error minima by case: (0 0 0 1 0 1 0 0 0 1)
Average genome size in population (length): 24.992
Average program size in population (points): 46.118
Average percent parens in population: 0.456
Minimum age in population: 97.39846358634345
Maximum age in population: 101.8322940024291
Average age in population: 99.61775103071682
Median age in population: 99.64081330090097
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 188
Genome diversity (% unique genomes):	 0.365
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 188
Syntactic diversity (% unique Push programs):	 0.364
Total error diversity:				 0.006
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.13
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 29148704
--- Timings ---
Current time: 1559314807110 milliseconds
Total Time:         191.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       139.6 seconds, 72.8%
Fitness Testing:     31.8 seconds, 16.6%
Report:              20.2 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Smallest problem report - generation 66
Test total error for best: 461
Test mean error for best: 0.46100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 76                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 56                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 79                 
Correct output: 27                  | Program output: 48                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 58                 
Correct output: 25                  | Program output: 59                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 75                 
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 48                 
Correct output: 18                  | Program output: 87                 
Correct output: 26                  | Program output: 79                 
Correct output: 40                  | Program output: 40                 
Correct output: 28                  | Program output: 28                 
Correct output: 42                  | Program output: 88                 
Correct output: -41                 | Program output: 82                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: 38                 
Correct output: -91                 | Program output: 0                  
Correct output: -65                 | Program output: -39                
Correct output: -99                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -79                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: 76                 
Correct output: -94                 | Program output: -83                
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -47                
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 60                 
Correct output: -36                 | Program output: -9                 
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -2                 
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 70                 
Correct output: -78                 | Program output: 56                 
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -70                
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -72                
Correct output: -63                 | Program output: -34                
Correct output: -69                 | Program output: -62                
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 24                 
Correct output: -28                 | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: -31                
Correct output: -26                 | Program output: -25                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -93                
Correct output: -95                 | Program output: -73                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -32                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -73                
Correct output: -46                 | Program output: -30                
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output: -15                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -46                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Lexicase best program: (exec_when (exec_swap (in1 exec_when () exec_swap (in1 tag_integer_451 exec_dup (exec_yank exec_if () (print_integer exec_dup (exec_if () (exec_shove (in3 exec_dup (exec_if () (exec_shove (exec_k_when_autoconstructing (exec_when () in2 exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_when (in2) in1) ())) ()))))))))) ()) ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 54
Percent parens: 0.481
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Zero cases best program: (exec_when (exec_swap (in1 exec_when () exec_swap (in1 tag_integer_451 exec_dup (exec_yank exec_if () (print_integer exec_dup (exec_if () (exec_shove (in3 exec_dup (exec_if () (exec_shove (exec_k_when_autoconstructing (exec_when () in2 exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_when (in2) in1) ())) ()))))))))) ()) ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 54
Percent parens: 0.481
--- Lexicase Population Statistics ---
Count of elite individuals by case: (768 58 454 714 714 714 454 534 704 1)
Population mean number of elite cases: 5.11
Count of perfect (error zero) individuals by case: (768 58 454 714 714 714 454 534 704 1)
Population mean number of perfect (error zero) cases: 5.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Best program: (exec_when (exec_swap (in1 exec_when () exec_swap (in1 tag_integer_451 exec_dup (exec_yank exec_if () (print_integer exec_dup (exec_if () (exec_shove (in3 exec_dup (exec_if () (exec_shove (exec_k_when_autoconstructing (exec_when () in2 exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_when (in2) in1) ())) ()))))))))) ()) ()))
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 28
Size: 54
Percent parens: 0.481
--- Population Statistics ---
Average total errors in population: 4.885
Median total errors in population: 5
Error averages by case: (0.232 0.942 0.546 0.286 0.286 0.286 0.546 0.466 0.296 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.76
Average program size in population (points): 45.406
Average percent parens in population: 0.452
Minimum age in population: 98.9536121568595
Maximum age in population: 103.1964714950349
Average age in population: 101.414868708476
Median age in population: 101.3909782028821
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 192
Genome diversity (% unique genomes):	 0.383
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 193
Syntactic diversity (% unique Push programs):	 0.381
Total error diversity:				 0.01
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.113
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 29823176
--- Timings ---
Current time: 1559314810340 milliseconds
Total Time:         194.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       141.5 seconds, 72.7%
Fitness Testing:     32.5 seconds, 16.7%
Report:              20.5 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Smallest problem report - generation 67
Test total error for best: 554
Test mean error for best: 0.55400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 14                 
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 18                 
Correct output: 16                  | Program output: 46                 
Correct output: 11                  | Program output: 43                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 13                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 48                 
Correct output: 6                   | Program output: 49                 
Correct output: 12                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 45                 
Correct output: 28                  | Program output: 53                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: 40                 
Correct output: -88                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: -73                
Correct output: -45                 | Program output: 95                 
Correct output: -30                 | Program output: 72                 
Correct output: -91                 | Program output: -57                
Correct output: -65                 | Program output: 93                 
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: 9                  
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: 90                 
Correct output: -76                 | Program output: 12                 
Correct output: -41                 | Program output: 64                 
Correct output: -77                 | Program output: 8                  
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 11                 
Correct output: -22                 | Program output: 71                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: 34                 
Correct output: -29                 | Program output: -25                
Correct output: -98                 | Program output: 7                  
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -72                
Correct output: -63                 | Program output: -34                
Correct output: -69                 | Program output: -69                
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 49                 
Correct output: -28                 | Program output: -28                
Correct output: -15                 | Program output: 59                 
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: 84                 
Correct output: -26                 | Program output: -26                
Correct output: -57                 | Program output: -18                
Correct output: -97                 | Program output: -93                
Correct output: -95                 | Program output: -73                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -32                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: -46                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: 80                 
Correct output: -58                 | Program output: -30                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -46                
Correct output: -65                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in4} {:close 0, :instruction in1})
Lexicase best program: (exec_when () exec_swap (in1 tag_integer_451 exec_dup (exec_yank exec_if () (print_integer exec_dup (boolean_invert_second_then_and) exec_shove (in3 exec_swap (exec_when () in2 exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_when (in4) in1) ())) ())))) ())
Lexicase best errors: [1 1 1 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 39
Percent parens: 0.436
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in4} {:close 0, :instruction in1})
Zero cases best program: (exec_when () exec_swap (in1 tag_integer_451 exec_dup (exec_yank exec_if () (print_integer exec_dup (boolean_invert_second_then_and) exec_shove (in3 exec_swap (exec_when () in2 exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_when (in4) in1) ())) ())))) ())
Zero cases best errors: [1 1 1 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 39
Percent parens: 0.436
--- Lexicase Population Statistics ---
Count of elite individuals by case: (694 12 30 131 801 860 41 777 9 131)
Population mean number of elite cases: 3.49
Count of perfect (error zero) individuals by case: (694 12 30 131 801 860 41 777 9 131)
Population mean number of perfect (error zero) cases: 3.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_gt} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in4} {:close 0, :instruction in1})
Best program: (integer_gt exec_swap (in1 tag_integer_451 exec_dup (exec_yank exec_if () (print_integer exec_dup (boolean_invert_second_then_and) exec_shove (in3 exec_swap (exec_when () in2 exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_when (in4) in1) ())) ())))) ())
Errors: [1 1 1 0 0 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 22
Size: 38
Percent parens: 0.421
--- Population Statistics ---
Average total errors in population: 6.514
Median total errors in population: 6
Error averages by case: (0.306 0.988 0.97 0.869 0.199 0.14 0.959 0.223 0.991 0.869)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.037
Average program size in population (points): 51.525
Average percent parens in population: 0.474
Minimum age in population: 102.4748198370576
Maximum age in population: 104.1024744359289
Average age in population: 103.4856773547084
Median age in population: 103.1024744359289
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 519
Genome diversity (% unique genomes):	 0.343
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 520
Syntactic diversity (% unique Push programs):	 0.341
Total error diversity:				 0.006
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.124
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 30697333
--- Timings ---
Current time: 1559314813487 milliseconds
Total Time:         198.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       143.4 seconds, 72.4%
Fitness Testing:     33.5 seconds, 16.9%
Report:              21.1 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Smallest problem report - generation 68
Test total error for best: 521
Test mean error for best: 0.52100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output:                    
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output:                    
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 14                 
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 18                 
Correct output: 16                  | Program output: 46                 
Correct output: 11                  | Program output: 43                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 13                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 48                 
Correct output: 6                   | Program output: 49                 
Correct output: 12                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 45                 
Correct output: 28                  | Program output: 53                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -30                
Correct output: -88                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: -73                
Correct output: -45                 | Program output: 95                 
Correct output: -30                 | Program output: 72                 
Correct output: -91                 | Program output: -57                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output:                    
Correct output: -98                 | Program output:                    
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: 9                  
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: 90                 
Correct output: -76                 | Program output:                    
Correct output: -41                 | Program output: -3                 
Correct output: -77                 | Program output:                    
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: 34                 
Correct output: -29                 | Program output: -25                
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -72                
Correct output: -63                 | Program output: -34                
Correct output: -69                 | Program output: -69                
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 49                 
Correct output: -28                 | Program output: -28                
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: -29                
Correct output: -26                 | Program output: -26                
Correct output: -57                 | Program output: -18                
Correct output: -97                 | Program output: -93                
Correct output: -95                 | Program output: -73                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -32                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: -46                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: -39                
Correct output: -58                 | Program output: -30                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -46                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 1, :instruction in4} {:close 0, :instruction in1})
Lexicase best program: (exec_when () exec_swap (in1 tag_integer_451 exec_dup (print_integer exec_dup (exec_if () (exec_shove (exec_if (integer_gt) (in3 exec_k_when_autoconstructing (integer_lte in4) (in1))))))) ())
Lexicase best errors: [1 0 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 29
Percent parens: 0.448
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 1, :instruction in4} {:close 0, :instruction in1})
Zero cases best program: (exec_when () exec_swap (in1 tag_integer_451 exec_dup (print_integer exec_dup (exec_if () (exec_shove (exec_if (integer_gt) (in3 exec_k_when_autoconstructing (integer_lte in4) (in1))))))) ())
Zero cases best errors: [1 0 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 29
Percent parens: 0.448
--- Lexicase Population Statistics ---
Count of elite individuals by case: (462 904 360 125 161 377 222 870 160 667)
Population mean number of elite cases: 4.31
Count of perfect (error zero) individuals by case: (462 904 360 125 161 377 222 870 160 667)
Population mean number of perfect (error zero) cases: 4.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in4} {:close 0, :instruction in1})
Best program: (exec_when (exec_swap (in1 exec_when () exec_swap (in1 tag_integer_451 exec_dup (exec_yank exec_if () (print_integer exec_dup (exec_if () (exec_shove (exec_shove (in3 exec_swap (exec_when () in2 exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_when (in4) in1) ())) ()))))))) ()) ()))
Errors: [0 0 0 1 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 26
Size: 49
Percent parens: 0.469
--- Population Statistics ---
Average total errors in population: 5.692
Median total errors in population: 6
Error averages by case: (0.538 0.096 0.64 0.875 0.839 0.623 0.778 0.13 0.84 0.333)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.251
Average program size in population (points): 44.177
Average percent parens in population: 0.451
Minimum age in population: 103.4748198370576
Maximum age in population: 106.1024744359289
Average age in population: 105.0679074041092
Median age in population: 105.1024744359289
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 186
Genome diversity (% unique genomes):	 0.343
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 186
Syntactic diversity (% unique Push programs):	 0.34
Total error diversity:				 0.008
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.102
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 31209668
--- Timings ---
Current time: 1559314816373 milliseconds
Total Time:         200.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       145.3 seconds, 72.3%
Fitness Testing:     34.0 seconds, 16.9%
Report:              21.4 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
;;******************************
;; -*- Smallest problem report - generation 69
Test total error for best: 468
Test mean error for best: 0.46800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 70                 
Correct output: 5                   | Program output: 44                 
Correct output: 1                   | Program output: 14                 
Correct output: 17                  | Program output: 63                 
Correct output: 27                  | Program output: 50                 
Correct output: 11                  | Program output: 18                 
Correct output: 16                  | Program output: 46                 
Correct output: 11                  | Program output: 43                 
Correct output: 25                  | Program output: 73                 
Correct output: 13                  | Program output: 13                 
Correct output: 34                  | Program output: 35                 
Correct output: 8                   | Program output: 48                 
Correct output: 6                   | Program output: 49                 
Correct output: 12                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 19                 
Correct output: 26                  | Program output: 37                 
Correct output: 40                  | Program output: 45                 
Correct output: 28                  | Program output: 53                 
Correct output: 42                  | Program output: 58                 
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -30                
Correct output: -88                 | Program output: -44                
Correct output: -45                 | Program output: 1                  
Correct output: -21                 | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: -73                
Correct output: -45                 | Program output: 95                 
Correct output: -30                 | Program output: 38                 
Correct output: -91                 | Program output: -57                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -39                
Correct output: -43                 | Program output: 90                 
Correct output: -76                 | Program output: -70                
Correct output: -41                 | Program output: -3                 
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -30                
Correct output: 10                  | Program output: 91                 
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: 56                 
Correct output: -29                 | Program output: -25                
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -34                
Correct output: -69                 | Program output: -69                
Correct output: -69                 | Program output: -54                
Correct output: 24                  | Program output: 49                 
Correct output: -28                 | Program output: -28                
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -37                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: -29                
Correct output: -26                 | Program output: -26                
Correct output: -57                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -48                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: -46                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: -39                
Correct output: -58                 | Program output: -30                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in4} {:close 0, :instruction in1})
Lexicase best program: (exec_when (exec_swap (in1 exec_when () exec_swap (in1 tag_integer_451 exec_dup (exec_yank exec_if () (print_integer exec_dup (exec_if () (exec_shove (in3 exec_dup (exec_if () (exec_shove (exec_k_when_autoconstructing (exec_when () exec_s (exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_when (in4) in1) ())) () ()) ()))))))))) ()) ()))
Lexicase best errors: [0 0 0 0 0 1 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 57
Percent parens: 0.509
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in4} {:close 0, :instruction in1})
Zero cases best program: (exec_when (exec_swap (in1 exec_when () exec_swap (in1 tag_integer_451 exec_dup (exec_yank exec_if () (print_integer exec_dup (exec_if () (exec_shove (in3 exec_dup (exec_if () (exec_shove (exec_k_when_autoconstructing (exec_when () exec_s (exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_when (in4) in1) ())) () ()) ()))))))))) ()) ()))
Zero cases best errors: [0 0 0 0 0 1 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 57
Percent parens: 0.509
--- Lexicase Population Statistics ---
Count of elite individuals by case: (14 300 327 562 300 474 405 475 563 14)
Population mean number of elite cases: 3.43
Count of perfect (error zero) individuals by case: (14 300 327 562 300 474 405 475 563 14)
Population mean number of perfect (error zero) cases: 3.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction exec_s} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in4} {:close 0, :instruction in1})
Best program: (exec_when (exec_swap (in1 exec_when () exec_swap (in1 tag_integer_451 exec_dup (exec_yank exec_if () (print_integer exec_dup (exec_if () (exec_shove (in3 exec_dup (exec_if () (exec_shove (exec_k_when_autoconstructing (exec_when () exec_s (exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_when (in4) in1) ())) () ()) ()))))))))) ()) ()))
Errors: [0 0 0 0 0 1 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 28
Size: 57
Percent parens: 0.509
--- Population Statistics ---
Average total errors in population: 6.566
Median total errors in population: 6
Error averages by case: (0.986 0.7 0.673 0.438 0.7 0.526 0.595 0.525 0.437 0.986)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.927
Average program size in population (points): 43.015
Average percent parens in population: 0.466
Minimum age in population: 104.7886471364932
Maximum age in population: 108.02401761107
Average age in population: 107.0150109919284
Median age in population: 106.7886471364932
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 169
Genome diversity (% unique genomes):	 0.348
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 169
Syntactic diversity (% unique Push programs):	 0.347
Total error diversity:				 0.009
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.126
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 31800382
--- Timings ---
Current time: 1559314819469 milliseconds
Total Time:         203.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       147.1 seconds, 72.2%
Fitness Testing:     34.7 seconds, 17.0%
Report:              21.9 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
;;******************************
;; -*- Smallest problem report - generation 70
Test total error for best: 406
Test mean error for best: 0.40600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output:                    
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output:                    
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 44                 
Correct output: 1                   | Program output: 14                 
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 18                 
Correct output: 16                  | Program output: 46                 
Correct output: 11                  | Program output: 43                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 13                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 48                 
Correct output: 6                   | Program output: 49                 
Correct output: 12                  | Program output: 34                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 45                 
Correct output: 28                  | Program output: 53                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -30                
Correct output: -88                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: -73                
Correct output: -45                 | Program output: 82                 
Correct output: -30                 | Program output: 3                  
Correct output: -91                 | Program output: -57                
Correct output: -65                 | Program output:                    
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output:                    
Correct output: -98                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: 41                 
Correct output: -76                 | Program output: -70                
Correct output: -41                 | Program output:                    
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output:                    
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output:                    
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: 4                  
Correct output: -29                 | Program output: -25                
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -34                
Correct output: -69                 | Program output: -69                
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 49                 
Correct output: -28                 | Program output: -28                
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: -29                
Correct output: -26                 | Program output: -26                
Correct output: -57                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -48                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: -46                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output:                    
Correct output: -58                 | Program output: -30                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output:                    
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in4} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in4} {:close 0, :instruction in1})
Lexicase best program: (exec_when (exec_swap (in1 exec_when () exec_swap (in1 tag_integer_451 exec_dup (exec_yank exec_if () (print_integer exec_dup (exec_if () (exec_shove (exec_shove (in3 exec_k_when_autoconstructing (exec_when (in4) exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_when (in4) in1) ())) ()))))))) ()) ()))
Lexicase best errors: [0 1 1 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 49
Percent parens: 0.469
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in4} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in4} {:close 0, :instruction in1})
Zero cases best program: (exec_when (exec_swap (in1 exec_when () exec_swap (in1 tag_integer_451 exec_dup (exec_yank exec_if () (print_integer exec_dup (exec_if () (exec_shove (exec_shove (in3 exec_k_when_autoconstructing (exec_when (in4) exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_when (in4) in1) ())) ()))))))) ()) ()))
Zero cases best errors: [0 1 1 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 49
Percent parens: 0.469
--- Lexicase Population Statistics ---
Count of elite individuals by case: (807 2 1 133 640 511 500 811 371 625)
Population mean number of elite cases: 4.40
Count of perfect (error zero) individuals by case: (807 2 1 133 640 511 500 811 371 625)
Population mean number of perfect (error zero) cases: 4.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in4} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in4} {:close 0, :instruction in1})
Best program: (exec_when (exec_swap (in1 exec_when () exec_swap (in1 tag_integer_451 exec_dup (exec_yank exec_if () (print_integer exec_dup (exec_if () (exec_shove (exec_shove (in3 exec_k_when_autoconstructing (exec_when (in4) exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_when (in4) in1) ())) ()))))))) ()) ()))
Errors: [0 1 1 0 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 26
Size: 49
Percent parens: 0.469
--- Population Statistics ---
Average total errors in population: 5.599
Median total errors in population: 4
Error averages by case: (0.193 0.998 0.999 0.867 0.36 0.489 0.5 0.189 0.629 0.375)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.807
Average program size in population (points): 53.053
Average percent parens in population: 0.493
Minimum age in population: 107.9455607862111
Maximum age in population: 109.7886471364932
Average age in population: 108.7326743374539
Median age in population: 108.7886471364932
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 364
Genome diversity (% unique genomes):	 0.343
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 364
Syntactic diversity (% unique Push programs):	 0.343
Total error diversity:				 0.008
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.125
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 32618083
--- Timings ---
Current time: 1559314822752 milliseconds
Total Time:         207.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       149.1 seconds, 72.0%
Fitness Testing:     35.6 seconds, 17.2%
Report:              22.4 seconds, 10.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
;;******************************
;; -*- Smallest problem report - generation 71
Test total error for best: 597
Test mean error for best: 0.59700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 76                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 56                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 79                 
Correct output: 27                  | Program output: 48                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 58                 
Correct output: 25                  | Program output: 59                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 75                 
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 48                 
Correct output: 18                  | Program output: 87                 
Correct output: 26                  | Program output: 79                 
Correct output: 40                  | Program output: 40                 
Correct output: 28                  | Program output: 28                 
Correct output: 42                  | Program output: 88                 
Correct output: -41                 | Program output: 82                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -30                
Correct output: -88                 | Program output: -44                
Correct output: -45                 | Program output: -7                 
Correct output: -21                 | Program output: 82                 
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: 76                 
Correct output: -94                 | Program output: -83                
Correct output: -79                 | Program output: -17                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output: 12                 
Correct output: -41                 | Program output: -3                 
Correct output: -77                 | Program output: 8                  
Correct output: -96                 | Program output: 33                 
Correct output: 10                  | Program output: 60                 
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 92                 
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: 50                 
Correct output: -100                | Program output: 70                 
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -72                
Correct output: -63                 | Program output: -34                
Correct output: -69                 | Program output: -62                
Correct output: -69                 | Program output: 92                 
Correct output: 24                  | Program output: 24                 
Correct output: -28                 | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: -29                
Correct output: -26                 | Program output: -14                
Correct output: -57                 | Program output: -1                 
Correct output: -97                 | Program output: -93                
Correct output: -95                 | Program output: -73                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -32                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -73                
Correct output: -46                 | Program output: -30                
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -46                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in1})
Lexicase best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_dup (exec_if () (exec_shove (exec_if (integer_gt) (in3 exec_k_when_autoconstructing (in3 exec_k_when_autoconstructing (in3 exec_swap (exec_when () in2 exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_when (exec_swap (exec_when () in2 exec_if (in1) ()) ())) ())) ()) ()) ())))))))
Lexicase best errors: [0 1 1 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 58
Percent parens: 0.483
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in1})
Zero cases best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_dup (exec_if () (exec_shove (exec_if (integer_gt) (in3 exec_k_when_autoconstructing (in3 exec_k_when_autoconstructing (in3 exec_swap (exec_when () in2 exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_when (exec_swap (exec_when () in2 exec_if (in1) ()) ())) ())) ()) ()) ())))))))
Zero cases best errors: [0 1 1 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 58
Percent parens: 0.483
--- Lexicase Population Statistics ---
Count of elite individuals by case: (259 111 45 409 259 556 130 831 42 895)
Population mean number of elite cases: 3.54
Count of perfect (error zero) individuals by case: (259 111 45 409 259 556 130 831 42 895)
Population mean number of perfect (error zero) cases: 3.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in1})
Best program: (exec_when () exec_swap (in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_dup (exec_if (exec_shove (exec_if (integer_gt) (in3 exec_k_when_autoconstructing (in3 exec_swap (exec_when (in2 exec_if (in1) ())) ()) ()))) ())))) ())
Errors: [0 1 1 0 0 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 20
Size: 40
Percent parens: 0.500
--- Population Statistics ---
Average total errors in population: 6.463
Median total errors in population: 6
Error averages by case: (0.741 0.889 0.955 0.591 0.741 0.444 0.87 0.169 0.958 0.105)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.198
Average program size in population (points): 46.138
Average percent parens in population: 0.476
Minimum age in population: 109.3671039613522
Maximum age in population: 111.7886471364932
Average age in population: 111.0741823245441
Median age in population: 110.7886471364932
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 303
Genome diversity (% unique genomes):	 0.349
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 303
Syntactic diversity (% unique Push programs):	 0.348
Total error diversity:				 0.007
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.129
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 33290314
--- Timings ---
Current time: 1559314825748 milliseconds
Total Time:         210.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       151.0 seconds, 71.8%
Fitness Testing:     36.3 seconds, 17.3%
Report:              22.9 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
;;******************************
;; -*- Smallest problem report - generation 72
Test total error for best: 445
Test mean error for best: 0.44500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 58                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 48                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 40                 
Correct output: 28                  | Program output: 28                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: 82                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -30                
Correct output: -88                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: 9                  
Correct output: -94                 | Program output: -83                
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output: 12                 
Correct output: -41                 | Program output: -3                 
Correct output: -77                 | Program output: 8                  
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 70                 
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -72                
Correct output: -63                 | Program output: -34                
Correct output: -69                 | Program output: -62                
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 24                 
Correct output: -28                 | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: -29                
Correct output: -26                 | Program output: -14                
Correct output: -57                 | Program output: -1                 
Correct output: -97                 | Program output: -93                
Correct output: -95                 | Program output: -73                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -32                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -73                
Correct output: -46                 | Program output: -30                
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -46                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in1})
Lexicase best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_dup (exec_if () (exec_shove (exec_if (integer_gt) (in3 exec_k_when_autoconstructing (in3 exec_k_when_autoconstructing (in3 exec_swap (exec_when () in2 exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_when (exec_swap (exec_when () in2 exec_if (in1) ()) ())) ())) ()) ()) ())))))))
Lexicase best errors: [0 0 0 0 1 0 0 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 58
Percent parens: 0.483
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in1})
Zero cases best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_dup (exec_if () (exec_shove (exec_if (integer_gt) (in3 exec_k_when_autoconstructing (in3 exec_k_when_autoconstructing (in3 exec_swap (exec_when () in2 exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_when (exec_swap (exec_when () in2 exec_if (in1) ()) ())) ())) ()) ()) ())))))))
Zero cases best errors: [0 0 0 0 1 0 0 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 58
Percent parens: 0.483
--- Lexicase Population Statistics ---
Count of elite individuals by case: (778 456 316 356 16 703 879 891 13 146)
Population mean number of elite cases: 4.55
Count of perfect (error zero) individuals by case: (778 456 316 356 16 703 879 891 13 146)
Population mean number of perfect (error zero) cases: 4.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in1})
Best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_dup (exec_if () (exec_shove (exec_if (integer_gt) (in3 exec_k_when_autoconstructing (in3 exec_k_when_autoconstructing (in3 exec_swap (exec_when () in2 exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_when (exec_swap (exec_when () in2 exec_if (in1) ()) ())) ())) ()) ()) ())))))))
Errors: [0 0 0 0 1 0 0 0 1 1]
Total: 3
Mean: 0.3
Genome size: 30
Size: 58
Percent parens: 0.483
--- Population Statistics ---
Average total errors in population: 5.446
Median total errors in population: 5
Error averages by case: (0.222 0.544 0.684 0.644 0.984 0.297 0.121 0.109 0.987 0.854)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 24.289
Average program size in population (points): 46.125
Average percent parens in population: 0.474
Minimum age in population: 111.0153755489227
Maximum age in population: 113.7573971364932
Average age in population: 112.4755290682757
Median age in population: 112.6636471364932
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 97
Genome diversity (% unique genomes):	 0.362
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 97
Syntactic diversity (% unique Push programs):	 0.36
Total error diversity:				 0.008
Error (vector) diversity:			 0.051
Behavioral diversity:				 0.123
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 33908042
--- Timings ---
Current time: 1559314828833 milliseconds
Total Time:         213.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       152.8 seconds, 71.7%
Fitness Testing:     36.9 seconds, 17.3%
Report:              23.3 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
;;******************************
;; -*- Smallest problem report - generation 73
Test total error for best: 400
Test mean error for best: 0.40000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 58                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 48                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 40                 
Correct output: 28                  | Program output: 28                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: 82                 
Correct output: -83                 | Program output: -12                
Correct output: -71                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -92                
Correct output: -40                 | Program output: -2                 
Correct output: -100                | Program output: 9                  
Correct output: -94                 | Program output: -83                
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -3                 
Correct output: -77                 | Program output: -47                
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 70                 
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -59                
Correct output: -63                 | Program output: -63                
Correct output: -69                 | Program output: -62                
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 24                 
Correct output: -28                 | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -20                
Correct output: -31                 | Program output: -29                
Correct output: -26                 | Program output: -14                
Correct output: -57                 | Program output: -1                 
Correct output: -97                 | Program output: -19                
Correct output: -95                 | Program output: -78                
Correct output: -77                 | Program output: -45                
Correct output: -48                 | Program output: -30                
Correct output: -50                 | Program output: -3                 
Correct output: -86                 | Program output: -73                
Correct output: -46                 | Program output: -30                
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -28                
Correct output: -66                 | Program output: -26                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in1})
Lexicase best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_dup (exec_if () (exec_shove (exec_if (integer_gt) (in3 exec_k_when_autoconstructing (in3 exec_k_when_autoconstructing (in3 exec_swap (exec_when () in2 exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_when (exec_swap (exec_when () in2 exec_if (in1) ()) ())) ())) ()) ()) ())))))))
Lexicase best errors: [0 0 1 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 58
Percent parens: 0.483
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in1})
Zero cases best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_dup (exec_if () (exec_shove (exec_if (integer_gt) (in3 exec_k_when_autoconstructing (in3 exec_k_when_autoconstructing (in3 exec_swap (exec_when () in2 exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_when (exec_swap (exec_when () in2 exec_if (in1) ()) ())) ())) ()) ()) ())))))))
Zero cases best errors: [0 0 1 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 58
Percent parens: 0.483
--- Lexicase Population Statistics ---
Count of elite individuals by case: (375 668 2 439 12 675 2 669 3 546)
Population mean number of elite cases: 3.39
Count of perfect (error zero) individuals by case: (375 668 2 439 12 675 2 669 3 546)
Population mean number of perfect (error zero) cases: 3.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_dup (exec_if () (exec_shove (exec_if (integer_gt) (in3 exec_k_when_autoconstructing (in3 exec_k_when_autoconstructing (in3 exec_swap (exec_when () in2 exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_when (in2) in1) ())) ()) ()) ())))))))
Errors: [0 0 1 0 1 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 27
Size: 50
Percent parens: 0.460
--- Population Statistics ---
Average total errors in population: 6.609
Median total errors in population: 6
Error averages by case: (0.625 0.332 0.998 0.561 0.988 0.325 0.998 0.331 0.997 0.454)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 23.564
Average program size in population (points): 45.21
Average percent parens in population: 0.479
Minimum age in population: 112.6636471364932
Maximum age in population: 115.620761342708
Average age in population: 113.8269647395851
Median age in population: 113.8336934458153
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 194
Genome diversity (% unique genomes):	 0.336
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 194
Syntactic diversity (% unique Push programs):	 0.332
Total error diversity:				 0.007
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.108
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 34581167
--- Timings ---
Current time: 1559314831985 milliseconds
Total Time:         216.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       154.8 seconds, 71.5%
Fitness Testing:     37.7 seconds, 17.4%
Report:              23.8 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 74
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 74
;;******************************
;; -*- Smallest problem report - generation 74
Test total error for best: 427
Test mean error for best: 0.42700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 70                 
Correct output: 5                   | Program output: 44                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 63                 
Correct output: 27                  | Program output: 50                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 58                 
Correct output: 25                  | Program output: 73                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 35                 
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 48                 
Correct output: 18                  | Program output: 19                 
Correct output: 26                  | Program output: 37                 
Correct output: 40                  | Program output: 40                 
Correct output: 28                  | Program output: 28                 
Correct output: 42                  | Program output: 58                 
Correct output: -41                 | Program output: 82                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -30                
Correct output: -88                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -83                
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output: -70                
Correct output: -41                 | Program output: -3                 
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 91                 
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 70                 
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -72                
Correct output: -63                 | Program output: -34                
Correct output: -69                 | Program output: -62                
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 24                 
Correct output: -28                 | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: -29                
Correct output: -26                 | Program output: -14                
Correct output: -57                 | Program output: -1                 
Correct output: -97                 | Program output: -93                
Correct output: -95                 | Program output: -73                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -32                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -73                
Correct output: -46                 | Program output: -30                
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -46                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in1})
Lexicase best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_dup (exec_if () (exec_shove (exec_if (integer_gt) (in3 exec_k_when_autoconstructing (in3 in4 in3 exec_swap (exec_when () in2 exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_when (exec_swap (exec_when () in2 exec_if (in1) ()) ())) ())) ()) ())))))))
Lexicase best errors: [1 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 56
Percent parens: 0.464
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in1})
Zero cases best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_dup (exec_if () (exec_shove (exec_if (integer_gt) (in3 exec_k_when_autoconstructing (in3 in4 in3 exec_swap (exec_when () in2 exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_when (exec_swap (exec_when () in2 exec_if (in1) ()) ())) ())) ()) ())))))))
Zero cases best errors: [1 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 56
Percent parens: 0.464
--- Lexicase Population Statistics ---
Count of elite individuals by case: (522 386 720 441 522 397 905 276 720 732)
Population mean number of elite cases: 5.62
Count of perfect (error zero) individuals by case: (522 386 720 441 522 397 905 276 720 732)
Population mean number of perfect (error zero) cases: 5.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in1})
Best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_dup (exec_if () (exec_shove (exec_if (integer_gt) (in3 exec_k_when_autoconstructing (in3 in4 in3 exec_swap (exec_when () in2 exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_when (exec_swap (exec_when () in2 exec_if (in1) ()) ())) ())) ()) ())))))))
Errors: [1 0 0 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 30
Size: 56
Percent parens: 0.464
--- Population Statistics ---
Average total errors in population: 4.379
Median total errors in population: 3
Error averages by case: (0.478 0.614 0.28 0.559 0.478 0.603 0.095 0.724 0.28 0.268)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.292
Average program size in population (points): 57.132
Average percent parens in population: 0.470
Minimum age in population: 113.6636471364932
Maximum age in population: 117.1314827911543
Average age in population: 115.5758338003654
Median age in population: 115.5123836442617
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 266
Genome diversity (% unique genomes):	 0.412
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 267
Syntactic diversity (% unique Push programs):	 0.41
Total error diversity:				 0.009
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.126
--- Run Statistics ---
Number of program evaluations used so far: 75000
Number of point (instruction) evaluations so far: 35335962
--- Timings ---
Current time: 1559314835223 milliseconds
Total Time:         219.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       156.7 seconds, 71.4%
Fitness Testing:     38.4 seconds, 17.5%
Report:              24.3 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 74
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 75
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 75
;;******************************
;; -*- Smallest problem report - generation 75
Test total error for best: 505
Test mean error for best: 0.50500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output:                    
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output:                    
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 58                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 34                 
Correct output: 1                   | Program output: 48                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 40                 
Correct output: 28                  | Program output: 28                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: 82                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: 82                 
Correct output: -30                 | Program output: 3                  
Correct output: -91                 | Program output: 0                  
Correct output: -65                 | Program output:                    
Correct output: -99                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -79                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: 76                 
Correct output: -94                 | Program output: -83                
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: 41                 
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output:                    
Correct output: -77                 | Program output: -47                
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output:                    
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -2                 
Correct output: -22                 | Program output:                    
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 70                 
Correct output: -78                 | Program output: 4                  
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -70                
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -26                
Correct output: -63                 | Program output: -34                
Correct output: -69                 | Program output: -62                
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 24                 
Correct output: -28                 | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: -31                
Correct output: -26                 | Program output: -25                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output:                    
Correct output: -95                 | Program output:                    
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output:                    
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -73                
Correct output: -46                 | Program output: -30                
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output:                    
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output:                    
Correct output: -65                 | Program output:                    
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction in4} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Lexicase best program: (exec_do*times (integer_empty in1 exec_when () exec_swap (in1 tag_integer_451 exec_dup (exec_yank exec_if (print_integer exec_dup (exec_if () (exec_shove (exec_shove (in3 exec_when (in4) exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_when (in2) in1) ())))))) ())) ()))
Lexicase best errors: [1 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 44
Percent parens: 0.432
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction in4} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Zero cases best program: (exec_do*times (integer_empty in1 exec_when () exec_swap (in1 tag_integer_451 exec_dup (exec_yank exec_if (print_integer exec_dup (exec_if () (exec_shove (exec_shove (in3 exec_when (in4) exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_when (in2) in1) ())))))) ())) ()))
Zero cases best errors: [1 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 44
Percent parens: 0.432
--- Lexicase Population Statistics ---
Count of elite individuals by case: (313 374 373 42 671 573 18 285 296 573)
Population mean number of elite cases: 3.52
Count of perfect (error zero) individuals by case: (313 374 373 42 671 573 18 285 296 573)
Population mean number of perfect (error zero) cases: 3.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction in4} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Best program: (exec_do*times (integer_empty in1 exec_when () exec_swap (in1 tag_integer_451 exec_dup (exec_yank exec_if (print_integer exec_dup (exec_if () (exec_shove (exec_shove (in3 exec_when (in4) exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_when (in2) in1) ())))))) ())) ()))
Errors: [1 0 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 25
Size: 44
Percent parens: 0.432
--- Population Statistics ---
Average total errors in population: 6.482
Median total errors in population: 6
Error averages by case: (0.687 0.626 0.627 0.958 0.329 0.427 0.982 0.715 0.704 0.427)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.187
Average program size in population (points): 56.881
Average percent parens in population: 0.469
Minimum age in population: 114.6636471364932
Maximum age in population: 118.4908577911543
Average age in population: 117.2718151114664
Median age in population: 117.2115194380469
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 259
Genome diversity (% unique genomes):	 0.402
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 260
Syntactic diversity (% unique Push programs):	 0.4
Total error diversity:				 0.009
Error (vector) diversity:			 0.05
Behavioral diversity:				 0.148
--- Run Statistics ---
Number of program evaluations used so far: 76000
Number of point (instruction) evaluations so far: 36152132
--- Timings ---
Current time: 1559314838426 milliseconds
Total Time:         222.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       158.6 seconds, 71.1%
Fitness Testing:     39.3 seconds, 17.6%
Report:              24.9 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 75
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 76
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 76
;;******************************
;; -*- Smallest problem report - generation 76
Test total error for best: 400
Test mean error for best: 0.40000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 58                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 48                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 40                 
Correct output: 28                  | Program output: 28                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: 82                 
Correct output: -83                 | Program output: -12                
Correct output: -71                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -58                
Correct output: -44                 | Program output: 54                 
Correct output: -98                 | Program output: -79                
Correct output: -40                 | Program output: -2                 
Correct output: -100                | Program output: 9                  
Correct output: -94                 | Program output: -83                
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -3                 
Correct output: -77                 | Program output: -47                
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 70                 
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -59                
Correct output: -63                 | Program output: -63                
Correct output: -69                 | Program output: 3                  
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 24                 
Correct output: -28                 | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -20                
Correct output: -31                 | Program output: -29                
Correct output: -26                 | Program output: -14                
Correct output: -57                 | Program output: -1                 
Correct output: -97                 | Program output: -19                
Correct output: -95                 | Program output: -78                
Correct output: -77                 | Program output: -45                
Correct output: -48                 | Program output: -30                
Correct output: -50                 | Program output: -3                 
Correct output: -86                 | Program output: -73                
Correct output: -46                 | Program output: -30                
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -28                
Correct output: -66                 | Program output: -26                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 2, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 1, :instruction in4} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Lexicase best program: (exec_when () exec_swap (in1 tag_integer_451 exec_dup (exec_if () () print_integer exec_dup (exec_if () (exec_shove (exec_dup (exec_if () (exec_shove (in4) exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_when (in2) in1) ())))))))) ())
Lexicase best errors: [0 1 1 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 41
Percent parens: 0.488
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 2, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 1, :instruction in4} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Zero cases best program: (exec_when () exec_swap (in1 tag_integer_451 exec_dup (exec_if () () print_integer exec_dup (exec_if () (exec_shove (exec_dup (exec_if () (exec_shove (in4) exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_when (in2) in1) ())))))))) ())
Zero cases best errors: [0 1 1 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 41
Percent parens: 0.488
--- Lexicase Population Statistics ---
Count of elite individuals by case: (32 260 56 746 485 120 659 633 162 867)
Population mean number of elite cases: 4.02
Count of perfect (error zero) individuals by case: (32 260 56 746 485 120 659 633 162 867)
Population mean number of perfect (error zero) cases: 4.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 2, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 1, :instruction in4} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Best program: (exec_when () exec_swap (in1 tag_integer_451 exec_dup (exec_if () () print_integer exec_dup (exec_if () (exec_shove (exec_dup (exec_if () (exec_shove (in4) exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_when (in2) in1) ())))))))) ())
Errors: [0 1 1 0 0 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 21
Size: 41
Percent parens: 0.488
--- Population Statistics ---
Average total errors in population: 5.98
Median total errors in population: 5
Error averages by case: (0.968 0.74 0.944 0.254 0.515 0.88 0.341 0.367 0.838 0.133)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.566
Average program size in population (points): 49.982
Average percent parens in population: 0.446
Minimum age in population: 117.5967837138238
Maximum age in population: 120.252805127489
Average age in population: 118.6897854226476
Median age in population: 118.9388091751585
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 320
Genome diversity (% unique genomes):	 0.367
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 320
Syntactic diversity (% unique Push programs):	 0.366
Total error diversity:				 0.008
Error (vector) diversity:			 0.075
Behavioral diversity:				 0.166
--- Run Statistics ---
Number of program evaluations used so far: 77000
Number of point (instruction) evaluations so far: 36854054
--- Timings ---
Current time: 1559314841713 milliseconds
Total Time:         226.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       160.5 seconds, 71.0%
Fitness Testing:     40.0 seconds, 17.7%
Report:              25.4 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 76
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 77
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 77
;;******************************
;; -*- Smallest problem report - generation 77
Test total error for best: 471
Test mean error for best: 0.47100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: 3                  
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 14                 
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 18                 
Correct output: 16                  | Program output: 46                 
Correct output: 11                  | Program output: 43                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 13                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 48                 
Correct output: 6                   | Program output: 49                 
Correct output: 12                  | Program output: 50                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 45                 
Correct output: 28                  | Program output: 53                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: 40                 
Correct output: -88                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: -73                
Correct output: -45                 | Program output: 95                 
Correct output: -30                 | Program output: 72                 
Correct output: -91                 | Program output: -57                
Correct output: -65                 | Program output: 93                 
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: 90                 
Correct output: -76                 | Program output: -70                
Correct output: -41                 | Program output: 64                 
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: 92                 
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: 11                 
Correct output: -22                 | Program output: 71                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: 34                 
Correct output: -29                 | Program output: -25                
Correct output: -98                 | Program output: 7                  
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -34                
Correct output: -69                 | Program output: -69                
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 49                 
Correct output: -28                 | Program output: -28                
Correct output: -15                 | Program output: 59                 
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: 84                 
Correct output: -26                 | Program output: -26                
Correct output: -57                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -48                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: -46                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: 80                 
Correct output: -58                 | Program output: -30                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: 99                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction in4} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction in4})
Lexicase best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_dup (exec_if () (exec_shove (integer_rot in4) exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_when (in3 exec_k_when_autoconstructing (exec_k_when_autoconstructing (in2) (in4)) ())) ()) ()))))))
Lexicase best errors: [0 0 0 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 43
Percent parens: 0.465
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction in4} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction in4})
Zero cases best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_dup (exec_if () (exec_shove (integer_rot in4) exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_when (in3 exec_k_when_autoconstructing (exec_k_when_autoconstructing (in2) (in4)) ())) ()) ()))))))
Zero cases best errors: [0 0 0 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 43
Percent parens: 0.465
--- Lexicase Population Statistics ---
Count of elite individuals by case: (133 254 548 343 548 593 279 164 254 864)
Population mean number of elite cases: 3.98
Count of perfect (error zero) individuals by case: (133 254 548 343 548 593 279 164 254 864)
Population mean number of perfect (error zero) cases: 3.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction in4} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in2} {:close 0, :instruction in4})
Best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_dup (exec_if () (exec_shove (integer_rot in4) exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_k_when_autoconstructing (exec_when (in3 exec_k_when_autoconstructing (exec_k_when_autoconstructing (in2) (in4)) ())) ()) ()))))))
Errors: [0 0 0 1 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 23
Size: 43
Percent parens: 0.465
--- Population Statistics ---
Average total errors in population: 6.02
Median total errors in population: 5
Error averages by case: (0.867 0.746 0.452 0.657 0.452 0.407 0.721 0.836 0.746 0.136)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.434
Average program size in population (points): 48.806
Average percent parens in population: 0.457
Minimum age in population: 118.7857381880469
Maximum age in population: 121.9349236642122
Average age in population: 120.3421548936344
Median age in population: 120.3802154251585
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 169
Genome diversity (% unique genomes):	 0.381
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 169
Syntactic diversity (% unique Push programs):	 0.377
Total error diversity:				 0.009
Error (vector) diversity:			 0.052
Behavioral diversity:				 0.153
--- Run Statistics ---
Number of program evaluations used so far: 78000
Number of point (instruction) evaluations so far: 37672969
--- Timings ---
Current time: 1559314844955 milliseconds
Total Time:         229.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       162.5 seconds, 70.8%
Fitness Testing:     40.9 seconds, 17.8%
Report:              26.0 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 77
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 78
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 78
;;******************************
;; -*- Smallest problem report - generation 78
Test total error for best: 505
Test mean error for best: 0.50500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output:                    
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output:                    
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 58                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 34                 
Correct output: 1                   | Program output: 48                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 40                 
Correct output: 28                  | Program output: 28                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: 82                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: 82                 
Correct output: -30                 | Program output: 3                  
Correct output: -91                 | Program output: 0                  
Correct output: -65                 | Program output:                    
Correct output: -99                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -79                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: 76                 
Correct output: -94                 | Program output: -83                
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: 41                 
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output:                    
Correct output: -77                 | Program output: -47                
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output:                    
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -2                 
Correct output: -22                 | Program output:                    
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 70                 
Correct output: -78                 | Program output: 4                  
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -70                
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -26                
Correct output: -63                 | Program output: -34                
Correct output: -69                 | Program output: -62                
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 24                 
Correct output: -28                 | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: -31                
Correct output: -26                 | Program output: -25                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output:                    
Correct output: -95                 | Program output:                    
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output:                    
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -73                
Correct output: -46                 | Program output: -30                
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output:                    
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output:                    
Correct output: -65                 | Program output:                    
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction in4} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Lexicase best program: (exec_when () print_integer exec_do*times (exec_swap (in1 exec_when () exec_swap (in1 tag_integer_451 exec_dup (exec_yank exec_if (print_integer exec_dup (exec_if () (exec_shove (exec_shove (in3 exec_k_when_autoconstructing (exec_swap (exec_when (in4) exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_when (in2) in1) ())) ()) ()))))) ())) ()) ()))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 55
Percent parens: 0.473
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction in4} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Zero cases best program: (exec_when () print_integer exec_do*times (exec_swap (in1 exec_when () exec_swap (in1 tag_integer_451 exec_dup (exec_yank exec_if (print_integer exec_dup (exec_if () (exec_shove (exec_shove (in3 exec_k_when_autoconstructing (exec_swap (exec_when (in4) exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_when (in2) in1) ())) ()) ()))))) ())) ()) ()))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 55
Percent parens: 0.473
--- Lexicase Population Statistics ---
Count of elite individuals by case: (241 348 347 660 578 842 660 842 195 178)
Population mean number of elite cases: 4.89
Count of perfect (error zero) individuals by case: (241 348 347 660 578 842 660 842 195 178)
Population mean number of perfect (error zero) cases: 4.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction in4} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Best program: (exec_when () print_integer exec_do*times (exec_swap (in1 exec_when () exec_swap (in1 tag_integer_451 exec_dup (exec_yank exec_if (print_integer exec_dup (exec_if () (exec_shove (exec_shove (in3 exec_k_when_autoconstructing (exec_swap (exec_when (in4) exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_when (in2) in1) ())) ()) ()))))) ())) ()) ()))
Errors: [0 0 0 0 1 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 29
Size: 55
Percent parens: 0.473
--- Population Statistics ---
Average total errors in population: 5.109
Median total errors in population: 5
Error averages by case: (0.759 0.652 0.653 0.34 0.422 0.158 0.34 0.158 0.805 0.822)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.764
Average program size in population (points): 48.718
Average percent parens in population: 0.469
Minimum age in population: 120.5967837138238
Maximum age in population: 123.2761751113785
Average age in population: 122.0706673967681
Median age in population: 122.1460949353103
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 267
Genome diversity (% unique genomes):	 0.366
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 271
Syntactic diversity (% unique Push programs):	 0.361
Total error diversity:				 0.009
Error (vector) diversity:			 0.052
Behavioral diversity:				 0.154
--- Run Statistics ---
Number of program evaluations used so far: 79000
Number of point (instruction) evaluations so far: 38397091
--- Timings ---
Current time: 1559314848092 milliseconds
Total Time:         232.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       164.3 seconds, 70.7%
Fitness Testing:     41.6 seconds, 17.9%
Report:              26.4 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 78
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 79
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 79
;;******************************
;; -*- Smallest problem report - generation 79
Test total error for best: 505
Test mean error for best: 0.50500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output:                    
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output:                    
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 58                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 34                 
Correct output: 1                   | Program output: 48                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 40                 
Correct output: 28                  | Program output: 28                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: 82                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: 82                 
Correct output: -30                 | Program output: 3                  
Correct output: -91                 | Program output: 0                  
Correct output: -65                 | Program output:                    
Correct output: -99                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -79                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: 76                 
Correct output: -94                 | Program output: -83                
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: 41                 
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output:                    
Correct output: -77                 | Program output: -47                
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output:                    
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -2                 
Correct output: -22                 | Program output:                    
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 70                 
Correct output: -78                 | Program output: 4                  
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -70                
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -26                
Correct output: -63                 | Program output: -34                
Correct output: -69                 | Program output: -62                
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 24                 
Correct output: -28                 | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: -31                
Correct output: -26                 | Program output: -25                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output:                    
Correct output: -95                 | Program output:                    
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output:                    
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -73                
Correct output: -46                 | Program output: -30                
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output:                    
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output:                    
Correct output: -65                 | Program output:                    
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction in4} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Lexicase best program: (exec_do*times (integer_empty in1 exec_when () exec_swap (in1 tag_integer_451 exec_dup (exec_yank exec_if (print_integer exec_dup (exec_if () (exec_shove (exec_shove (in3 exec_when (in4) exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_when (in2) in1) ())))))) ())) ()))
Lexicase best errors: [1 0 0 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 44
Percent parens: 0.432
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction integer_empty} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction in4} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Zero cases best program: (exec_do*times (integer_empty in1 exec_when () exec_swap (in1 tag_integer_451 exec_dup (exec_yank exec_if (print_integer exec_dup (exec_if () (exec_shove (exec_shove (in3 exec_when (in4) exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_when (in2) in1) ())))))) ())) ()))
Zero cases best errors: [1 0 0 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 44
Percent parens: 0.432
--- Lexicase Population Statistics ---
Count of elite individuals by case: (233 677 413 361 851 293 512 335 335 409)
Population mean number of elite cases: 4.42
Count of perfect (error zero) individuals by case: (233 677 413 361 851 293 512 335 335 409)
Population mean number of perfect (error zero) cases: 4.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction in4} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Best program: (exec_do*times (integer_gt in1 exec_when () exec_swap (in1 tag_integer_451 exec_dup (exec_yank exec_if (print_integer exec_dup (exec_if () (exec_shove (exec_shove (in3 exec_when (in4) exec_if (integer_gt) (in3 exec_k_when_autoconstructing (exec_when (in2) in1) ())))))) ())) ()))
Errors: [1 0 0 1 0 1 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 25
Size: 44
Percent parens: 0.432
--- Population Statistics ---
Average total errors in population: 5.581
Median total errors in population: 6
Error averages by case: (0.767 0.323 0.587 0.639 0.149 0.707 0.488 0.665 0.665 0.591)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.206
Average program size in population (points): 49.581
Average percent parens in population: 0.469
Minimum age in population: 121.7384995694911
Maximum age in population: 124.6815238992272
Average age in population: 123.2978715616896
Median age in population: 123.4228569070397
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 139
Genome diversity (% unique genomes):	 0.432
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 139
Syntactic diversity (% unique Push programs):	 0.428
Total error diversity:				 0.008
Error (vector) diversity:			 0.052
Behavioral diversity:				 0.144
--- Run Statistics ---
Number of program evaluations used so far: 80000
Number of point (instruction) evaluations so far: 39144245
--- Timings ---
Current time: 1559314851189 milliseconds
Total Time:         235.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       166.2 seconds, 70.5%
Fitness Testing:     42.4 seconds, 18.0%
Report:              26.9 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 79
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 80
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 80
;;******************************
;; -*- Smallest problem report - generation 80
Test total error for best: 471
Test mean error for best: 0.47100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 84                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 54                 
Correct output: 11                  | Program output: 68                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 51                 
Correct output: 12                  | Program output: 34                 
Correct output: 1                   | Program output: 48                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 48                 
Correct output: 28                  | Program output: 78                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: 82                 
Correct output: -83                 | Program output: -12                
Correct output: -71                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: 3                  
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -79                
Correct output: -40                 | Program output: -2                 
Correct output: -100                | Program output: 76                 
Correct output: -94                 | Program output: -83                
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: 41                 
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -3                 
Correct output: -77                 | Program output: -47                
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 70                 
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -59                
Correct output: -63                 | Program output: -63                
Correct output: -69                 | Program output: -62                
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 24                 
Correct output: -28                 | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -36                
Correct output: -70                 | Program output: -20                
Correct output: -31                 | Program output: -29                
Correct output: -26                 | Program output: -14                
Correct output: -57                 | Program output: -1                 
Correct output: -97                 | Program output: -19                
Correct output: -95                 | Program output: -78                
Correct output: -77                 | Program output: -45                
Correct output: -48                 | Program output: -30                
Correct output: -50                 | Program output: -3                 
Correct output: -86                 | Program output: -73                
Correct output: -46                 | Program output: -30                
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -28                
Correct output: -66                 | Program output: -26                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_add} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Lexicase best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (integer_add) (in2 in4) exec_if (integer_gt) (in3 exec_when (in2) in1)) ()) ())))))))
Lexicase best errors: [0 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 43
Percent parens: 0.442
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_add} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Zero cases best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (integer_add) (in2 in4) exec_if (integer_gt) (in3 exec_when (in2) in1)) ()) ())))))))
Zero cases best errors: [0 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 43
Percent parens: 0.442
--- Lexicase Population Statistics ---
Count of elite individuals by case: (491 144 797 253 239 596 811 145 435 664)
Population mean number of elite cases: 4.57
Count of perfect (error zero) individuals by case: (491 144 797 253 239 596 811 145 435 664)
Population mean number of perfect (error zero) cases: 4.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_add} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (integer_add) (in2 in4) exec_if (integer_gt) (in3 exec_when (in2) in1)) ()) ())))))))
Errors: [0 0 0 1 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 24
Size: 43
Percent parens: 0.442
--- Population Statistics ---
Average total errors in population: 5.425
Median total errors in population: 5
Error averages by case: (0.509 0.856 0.203 0.747 0.761 0.404 0.189 0.855 0.565 0.336)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.078
Average program size in population (points): 50.568
Average percent parens in population: 0.462
Minimum age in population: 122.7384995694911
Maximum age in population: 126.1748269110673
Average age in population: 124.6083338919266
Median age in population: 124.6839581621542
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 140
Genome diversity (% unique genomes):	 0.396
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 140
Syntactic diversity (% unique Push programs):	 0.395
Total error diversity:				 0.009
Error (vector) diversity:			 0.067
Behavioral diversity:				 0.168
--- Run Statistics ---
Number of program evaluations used so far: 81000
Number of point (instruction) evaluations so far: 39900066
--- Timings ---
Current time: 1559314854342 milliseconds
Total Time:         238.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       168.1 seconds, 70.4%
Fitness Testing:     43.2 seconds, 18.1%
Report:              27.3 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 80
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 81
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 81
;;******************************
;; -*- Smallest problem report - generation 81
Test total error for best: 471
Test mean error for best: 0.47100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 84                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 54                 
Correct output: 11                  | Program output: 68                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 51                 
Correct output: 12                  | Program output: 34                 
Correct output: 1                   | Program output: 48                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 48                 
Correct output: 28                  | Program output: 78                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: 82                 
Correct output: -83                 | Program output: -12                
Correct output: -71                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: 3                  
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -79                
Correct output: -40                 | Program output: -2                 
Correct output: -100                | Program output: 76                 
Correct output: -94                 | Program output: -83                
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: 41                 
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -3                 
Correct output: -77                 | Program output: -47                
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 70                 
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -59                
Correct output: -63                 | Program output: -63                
Correct output: -69                 | Program output: -62                
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 24                 
Correct output: -28                 | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -36                
Correct output: -70                 | Program output: -20                
Correct output: -31                 | Program output: -29                
Correct output: -26                 | Program output: -14                
Correct output: -57                 | Program output: -1                 
Correct output: -97                 | Program output: -19                
Correct output: -95                 | Program output: -78                
Correct output: -77                 | Program output: -45                
Correct output: -48                 | Program output: -30                
Correct output: -50                 | Program output: -3                 
Correct output: -86                 | Program output: -73                
Correct output: -46                 | Program output: -30                
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -28                
Correct output: -66                 | Program output: -26                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_add} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Lexicase best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (integer_add) (in2 in4) exec_if (integer_gt) (in3 exec_when (in2) in1)) ()) ())))))))
Lexicase best errors: [0 0 1 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 43
Percent parens: 0.442
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_add} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Zero cases best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (integer_add) (in2 in4) exec_if (integer_gt) (in3 exec_when (in2) in1)) ()) ())))))))
Zero cases best errors: [0 0 1 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 43
Percent parens: 0.442
--- Lexicase Population Statistics ---
Count of elite individuals by case: (819 831 16 896 721 108 722 737 893 641)
Population mean number of elite cases: 6.38
Count of perfect (error zero) individuals by case: (819 831 16 896 721 108 722 737 893 641)
Population mean number of perfect (error zero) cases: 6.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_add} {:close 0, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (integer_add) (in2 in4) exec_if (integer_gt) (in3 exec_when (in2) in1)) ()) ())))))))
Errors: [0 0 1 0 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 24
Size: 43
Percent parens: 0.442
--- Population Statistics ---
Average total errors in population: 3.616
Median total errors in population: 2
Error averages by case: (0.181 0.169 0.984 0.104 0.279 0.892 0.278 0.263 0.107 0.359)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 25.51
Average program size in population (points): 46.112
Average percent parens in population: 0.446
Minimum age in population: 124.3280706055743
Maximum age in population: 127.5505255748871
Average age in population: 125.463125098457
Median age in population: 125.5335746804772
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 459
Genome diversity (% unique genomes):	 0.327
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 462
Syntactic diversity (% unique Push programs):	 0.322
Total error diversity:				 0.009
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.114
--- Run Statistics ---
Number of program evaluations used so far: 82000
Number of point (instruction) evaluations so far: 40621528
--- Timings ---
Current time: 1559314857440 milliseconds
Total Time:         241.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       170.0 seconds, 70.3%
Fitness Testing:     44.0 seconds, 18.2%
Report:              27.8 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 81
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 82
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 82
;;******************************
;; -*- Smallest problem report - generation 82
Test total error for best: 455
Test mean error for best: 0.45500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 76                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 56                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 79                 
Correct output: 27                  | Program output: 48                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 58                 
Correct output: 25                  | Program output: 59                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 48                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 40                 
Correct output: 28                  | Program output: 28                 
Correct output: 42                  | Program output: 88                 
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: -73                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: -57                
Correct output: -65                 | Program output: -39                
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -39                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output: -70                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -30                
Correct output: 10                  | Program output: 60                 
Correct output: -36                 | Program output: -9                 
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -2                 
Correct output: -22                 | Program output: 60                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -25                
Correct output: -98                 | Program output: -70                
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -6                 
Correct output: -69                 | Program output: -69                
Correct output: -69                 | Program output: -54                
Correct output: 24                  | Program output: 24                 
Correct output: -28                 | Program output: -28                
Correct output: -15                 | Program output: 56                 
Correct output: -43                 | Program output: -37                
Correct output: -70                 | Program output: -2                 
Correct output: -31                 | Program output: -31                
Correct output: -26                 | Program output: -26                
Correct output: -57                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -48                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: -46                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: -15                
Correct output: -58                 | Program output: -30                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: 17                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in4})
Lexicase best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (integer_add in2) (in4) exec_if (integer_gt in3 exec_when (in2) in4) ()) ()) ())))))))
Lexicase best errors: [0 0 0 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 43
Percent parens: 0.442
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in4})
Zero cases best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (integer_add in2) (in4) exec_if (integer_gt in3 exec_when (in2) in4) ()) ()) ())))))))
Zero cases best errors: [0 0 0 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 43
Percent parens: 0.442
--- Lexicase Population Statistics ---
Count of elite individuals by case: (350 156 749 757 120 266 382 121 354 301)
Population mean number of elite cases: 3.56
Count of perfect (error zero) individuals by case: (350 156 749 757 120 266 382 121 354 301)
Population mean number of perfect (error zero) cases: 3.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in4})
Best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (integer_add in2) (in4) exec_if (integer_gt in3 exec_when (in2) in4) ()) ()) ())))))))
Errors: [0 0 0 1 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 24
Size: 43
Percent parens: 0.442
--- Population Statistics ---
Average total errors in population: 6.444
Median total errors in population: 6
Error averages by case: (0.65 0.844 0.251 0.243 0.88 0.734 0.618 0.879 0.646 0.699)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.233
Average program size in population (points): 50.531
Average percent parens in population: 0.441
Minimum age in population: 125.5335746804772
Maximum age in population: 128.5118659674459
Average age in population: 127.076346456872
Median age in population: 127.1695311391195
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 192
Genome diversity (% unique genomes):	 0.402
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 193
Syntactic diversity (% unique Push programs):	 0.399
Total error diversity:				 0.009
Error (vector) diversity:			 0.058
Behavioral diversity:				 0.173
--- Run Statistics ---
Number of program evaluations used so far: 83000
Number of point (instruction) evaluations so far: 41330301
--- Timings ---
Current time: 1559314860526 milliseconds
Total Time:         244.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       171.9 seconds, 70.2%
Fitness Testing:     44.7 seconds, 18.2%
Report:              28.3 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 82
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 83
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 83
;;******************************
;; -*- Smallest problem report - generation 83
Test total error for best: 455
Test mean error for best: 0.45500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 76                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 56                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 79                 
Correct output: 27                  | Program output: 48                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 58                 
Correct output: 25                  | Program output: 59                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 48                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 40                 
Correct output: 28                  | Program output: 28                 
Correct output: 42                  | Program output: 88                 
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: -73                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: -57                
Correct output: -65                 | Program output: -39                
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -39                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output: -70                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -30                
Correct output: 10                  | Program output: 60                 
Correct output: -36                 | Program output: -9                 
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -2                 
Correct output: -22                 | Program output: 60                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -25                
Correct output: -98                 | Program output: -70                
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -6                 
Correct output: -69                 | Program output: -69                
Correct output: -69                 | Program output: -54                
Correct output: 24                  | Program output: 24                 
Correct output: -28                 | Program output: -28                
Correct output: -15                 | Program output: 56                 
Correct output: -43                 | Program output: -37                
Correct output: -70                 | Program output: -2                 
Correct output: -31                 | Program output: -31                
Correct output: -26                 | Program output: -26                
Correct output: -57                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -48                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: -46                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: -15                
Correct output: -58                 | Program output: -30                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: 17                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in4})
Lexicase best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (integer_add in2) (in4) exec_if (integer_gt in3 exec_when (in2) in4) ()) ()) ())))))))
Lexicase best errors: [0 1 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 43
Percent parens: 0.442
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in4})
Zero cases best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (integer_add in2) (in4) exec_if (integer_gt in3 exec_when (in2) in4) ()) ()) ())))))))
Zero cases best errors: [0 1 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 43
Percent parens: 0.442
--- Lexicase Population Statistics ---
Count of elite individuals by case: (752 174 881 579 47 576 881 661 872 497)
Population mean number of elite cases: 5.92
Count of perfect (error zero) individuals by case: (752 174 881 579 47 576 881 661 872 497)
Population mean number of perfect (error zero) cases: 5.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in4})
Best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (integer_add in2) (in4) exec_if (integer_gt in3 exec_when (in2) in4) ()) ()) ())))))))
Errors: [0 1 0 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 24
Size: 43
Percent parens: 0.442
--- Population Statistics ---
Average total errors in population: 4.08
Median total errors in population: 3
Error averages by case: (0.248 0.826 0.119 0.421 0.953 0.424 0.119 0.339 0.128 0.503)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.26
Average program size in population (points): 46.555
Average percent parens in population: 0.436
Minimum age in population: 126.5335746804772
Maximum age in population: 130.2777841320518
Average age in population: 127.8284847158275
Median age in population: 127.9425637951378
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 269
Genome diversity (% unique genomes):	 0.369
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 271
Syntactic diversity (% unique Push programs):	 0.363
Total error diversity:				 0.009
Error (vector) diversity:			 0.042
Behavioral diversity:				 0.12
--- Run Statistics ---
Number of program evaluations used so far: 84000
Number of point (instruction) evaluations so far: 42044377
--- Timings ---
Current time: 1559314863581 milliseconds
Total Time:         248.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       173.7 seconds, 70.0%
Fitness Testing:     45.4 seconds, 18.3%
Report:              28.7 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 83
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 84
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 84
;;******************************
;; -*- Smallest problem report - generation 84
Test total error for best: 461
Test mean error for best: 0.46100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 84                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 56                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 48                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 68                 
Correct output: 25                  | Program output: 59                 
Correct output: 13                  | Program output: 80                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 93                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 40                 
Correct output: 28                  | Program output: 28                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: 52                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: 76                 
Correct output: -45                 | Program output: -7                 
Correct output: -21                 | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: -73                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: -57                
Correct output: -65                 | Program output: -39                
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -39                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output: -70                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -30                
Correct output: 10                  | Program output: 60                 
Correct output: -36                 | Program output: -9                 
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -2                 
Correct output: -22                 | Program output: 60                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -25                
Correct output: -98                 | Program output: -70                
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -6                 
Correct output: -69                 | Program output: -69                
Correct output: -69                 | Program output: -54                
Correct output: 24                  | Program output: 24                 
Correct output: -28                 | Program output: -28                
Correct output: -15                 | Program output: 56                 
Correct output: -43                 | Program output: -37                
Correct output: -70                 | Program output: -2                 
Correct output: -31                 | Program output: -31                
Correct output: -26                 | Program output: -26                
Correct output: -57                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -48                
Correct output: -50                 | Program output: 38                 
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: -46                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: -15                
Correct output: -58                 | Program output: -30                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: 17                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in4})
Lexicase best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (boolean_empty in2) (in4) exec_if (integer_gt in3 exec_when (in2) in4) ()) ()) ())))))))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 43
Percent parens: 0.442
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_empty} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in4})
Zero cases best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (boolean_empty in2) (in4) exec_if (integer_gt in3 exec_when (in2) in4) ()) ()) ())))))))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 43
Percent parens: 0.442
--- Lexicase Population Statistics ---
Count of elite individuals by case: (427 470 609 406 607 365 556 267 465 476)
Population mean number of elite cases: 4.65
Count of perfect (error zero) individuals by case: (427 470 609 406 607 365 556 267 465 476)
Population mean number of perfect (error zero) cases: 4.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_add} {:close 1, :instruction in2} {:close 1, :instruction in4} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in4})
Best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (exec_swap (exec_swap (integer_add in2) (in4) exec_if (integer_gt in3 exec_when (in2) in4) ()) ()) ()) ())))))))
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 24
Size: 45
Percent parens: 0.467
--- Population Statistics ---
Average total errors in population: 5.352
Median total errors in population: 6
Error averages by case: (0.573 0.53 0.391 0.594 0.393 0.635 0.444 0.733 0.535 0.524)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.55
Average program size in population (points): 48.767
Average percent parens in population: 0.435
Minimum age in population: 127.5335746804772
Maximum age in population: 131.3654388939168
Average age in population: 129.3114320966586
Median age in population: 129.3515529097983
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 245
Genome diversity (% unique genomes):	 0.384
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 251
Syntactic diversity (% unique Push programs):	 0.378
Total error diversity:				 0.01
Error (vector) diversity:			 0.064
Behavioral diversity:				 0.147
--- Run Statistics ---
Number of program evaluations used so far: 85000
Number of point (instruction) evaluations so far: 42753068
--- Timings ---
Current time: 1559314866609 milliseconds
Total Time:         251.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       175.5 seconds, 69.9%
Fitness Testing:     46.2 seconds, 18.4%
Report:              29.2 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 84
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 85
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 85
;;******************************
;; -*- Smallest problem report - generation 85
Test total error for best: 548
Test mean error for best: 0.54800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: 17                 
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 70                 
Correct output: 5                   | Program output: 44                 
Correct output: 1                   | Program output: 38                 
Correct output: 17                  | Program output: 63                 
Correct output: 27                  | Program output: 50                 
Correct output: 11                  | Program output: 46                 
Correct output: 16                  | Program output: 94                 
Correct output: 11                  | Program output: 11                 
Correct output: 25                  | Program output: 73                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 35                 
Correct output: 8                   | Program output: 83                 
Correct output: 6                   | Program output: 50                 
Correct output: 12                  | Program output: 56                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 19                 
Correct output: 26                  | Program output: 37                 
Correct output: 40                  | Program output: 56                 
Correct output: 28                  | Program output: 36                 
Correct output: 42                  | Program output: 58                 
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: 59                 
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: 87                 
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: -73                
Correct output: -45                 | Program output: 98                 
Correct output: -30                 | Program output: 38                 
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -39                
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: 85                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: 81                 
Correct output: -76                 | Program output: 12                 
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: 8                  
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 91                 
Correct output: -36                 | Program output: -9                 
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -2                 
Correct output: -22                 | Program output: 60                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: 56                 
Correct output: -29                 | Program output: -25                
Correct output: -98                 | Program output: -70                
Correct output: -99                 | Program output: 45                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -6                 
Correct output: -69                 | Program output: -69                
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 79                 
Correct output: -28                 | Program output: -28                
Correct output: -15                 | Program output: 56                 
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -2                 
Correct output: -31                 | Program output: -31                
Correct output: -26                 | Program output: -14                
Correct output: -57                 | Program output: -1                 
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: 32                 
Correct output: -48                 | Program output: -48                
Correct output: -50                 | Program output: 47                 
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: -46                
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output: -15                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: 34                 
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: 17                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction in1})
Lexicase best program: (exec_when (print_integer exec_do*times (exec_swap (in1 exec_when () exec_swap (in1 tag_integer_451 exec_dup (exec_yank exec_if (print_integer) (exec_dup (exec_if () (exec_shove (in3 exec_k_when_autoconstructing (in3 in4 in3 exec_swap (integer_rot) (in2 exec_if (integer_gt) (exec_when (in2 in1)))) ())))))) ()) ())))
Lexicase best errors: [0 1 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 51
Percent parens: 0.431
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction in1})
Zero cases best program: (exec_when (print_integer exec_do*times (exec_swap (in1 exec_when () exec_swap (in1 tag_integer_451 exec_dup (exec_yank exec_if (print_integer) (exec_dup (exec_if () (exec_shove (in3 exec_k_when_autoconstructing (in3 in4 in3 exec_swap (integer_rot) (in2 exec_if (integer_gt) (exec_when (in2 in1)))) ())))))) ()) ())))
Zero cases best errors: [0 1 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 51
Percent parens: 0.431
--- Lexicase Population Statistics ---
Count of elite individuals by case: (901 6 691 688 191 592 690 692 813 4)
Population mean number of elite cases: 5.27
Count of perfect (error zero) individuals by case: (901 6 691 688 191 592 690 692 813 4)
Population mean number of perfect (error zero) cases: 5.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction in1})
Best program: (exec_when (print_integer exec_do*times (exec_swap (in1 exec_when () exec_swap (in1 tag_integer_451 exec_dup (exec_yank exec_if (print_integer) (exec_dup (exec_if () (exec_shove (in3 exec_k_when_autoconstructing (in3 in4 in3 exec_swap (integer_rot) (in2 exec_if (integer_gt) (exec_when (in2 in1)))) ())))))) ()) ())))
Errors: [0 1 0 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 29
Size: 51
Percent parens: 0.431
--- Population Statistics ---
Average total errors in population: 4.732
Median total errors in population: 4
Error averages by case: (0.099 0.994 0.309 0.312 0.809 0.408 0.31 0.308 0.187 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.006
Average program size in population (points): 46.558
Average percent parens in population: 0.441
Minimum age in population: 128.5335746804772
Maximum age in population: 132.4195311391195
Average age in population: 130.7874151071893
Median age in population: 130.8515529097983
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 157
Genome diversity (% unique genomes):	 0.371
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 160
Syntactic diversity (% unique Push programs):	 0.365
Total error diversity:				 0.009
Error (vector) diversity:			 0.049
Behavioral diversity:				 0.153
--- Run Statistics ---
Number of program evaluations used so far: 86000
Number of point (instruction) evaluations so far: 43464123
--- Timings ---
Current time: 1559314869703 milliseconds
Total Time:         254.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       177.4 seconds, 69.8%
Fitness Testing:     47.0 seconds, 18.5%
Report:              29.7 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 85
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 86
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 86
;;******************************
;; -*- Smallest problem report - generation 86
Test total error for best: 427
Test mean error for best: 0.42700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 70                 
Correct output: 5                   | Program output: 44                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 63                 
Correct output: 27                  | Program output: 50                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 58                 
Correct output: 25                  | Program output: 73                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 35                 
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 48                 
Correct output: 18                  | Program output: 19                 
Correct output: 26                  | Program output: 37                 
Correct output: 40                  | Program output: 40                 
Correct output: 28                  | Program output: 28                 
Correct output: 42                  | Program output: 58                 
Correct output: -41                 | Program output: 82                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -30                
Correct output: -88                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -92                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -83                
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output: -70                
Correct output: -41                 | Program output: -3                 
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 91                 
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 70                 
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -72                
Correct output: -63                 | Program output: -34                
Correct output: -69                 | Program output: -62                
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 24                 
Correct output: -28                 | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: -29                
Correct output: -26                 | Program output: -14                
Correct output: -57                 | Program output: -1                 
Correct output: -97                 | Program output: -93                
Correct output: -95                 | Program output: -73                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -32                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -73                
Correct output: -46                 | Program output: -30                
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -46                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction in1})
Lexicase best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 exec_noop integer_rot) (in2 exec_if (integer_gt) (exec_when (in2 in1)))) ()) ()) ())))))))
Lexicase best errors: [0 0 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 49
Percent parens: 0.429
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction in1})
Zero cases best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 exec_noop integer_rot) (in2 exec_if (integer_gt) (exec_when (in2 in1)))) ()) ()) ())))))))
Zero cases best errors: [0 0 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 49
Percent parens: 0.429
--- Lexicase Population Statistics ---
Count of elite individuals by case: (667 247 69 60 594 245 247 83 84 70)
Population mean number of elite cases: 2.37
Count of perfect (error zero) individuals by case: (667 247 69 60 594 245 247 83 84 70)
Population mean number of perfect (error zero) cases: 2.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction in1})
Best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 exec_noop integer_rot) (in2 exec_if (integer_gt) (exec_when (in2 in1)))) ()) ()) ())))))))
Errors: [0 0 0 0 0 0 0 1 1 0]
Total: 2
Mean: 0.2
Genome size: 28
Size: 49
Percent parens: 0.429
--- Population Statistics ---
Average total errors in population: 7.634
Median total errors in population: 8
Error averages by case: (0.333 0.753 0.931 0.94 0.406 0.755 0.753 0.917 0.916 0.93)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.909
Average program size in population (points): 49.452
Average percent parens in population: 0.436
Minimum age in population: 131.3970583524681
Maximum age in population: 134.1922838604544
Average age in population: 132.7697234524196
Median age in population: 132.8288001884635
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 303
Genome diversity (% unique genomes):	 0.381
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 304
Syntactic diversity (% unique Push programs):	 0.378
Total error diversity:				 0.009
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.162
--- Run Statistics ---
Number of program evaluations used so far: 87000
Number of point (instruction) evaluations so far: 44193127
--- Timings ---
Current time: 1559314872881 milliseconds
Total Time:         257.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       179.2 seconds, 69.7%
Fitness Testing:     47.7 seconds, 18.6%
Report:              30.1 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 86
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 87
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 87
;;******************************
;; -*- Smallest problem report - generation 87
Test total error for best: 400
Test mean error for best: 0.40000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 58                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 48                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 40                 
Correct output: 28                  | Program output: 28                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: 82                 
Correct output: -83                 | Program output: -12                
Correct output: -71                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -92                
Correct output: -40                 | Program output: -2                 
Correct output: -100                | Program output: 9                  
Correct output: -94                 | Program output: -83                
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -3                 
Correct output: -77                 | Program output: -47                
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 70                 
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -59                
Correct output: -63                 | Program output: -63                
Correct output: -69                 | Program output: -62                
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 24                 
Correct output: -28                 | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -20                
Correct output: -31                 | Program output: -29                
Correct output: -26                 | Program output: -14                
Correct output: -57                 | Program output: -1                 
Correct output: -97                 | Program output: -19                
Correct output: -95                 | Program output: -78                
Correct output: -77                 | Program output: -45                
Correct output: -48                 | Program output: -30                
Correct output: -50                 | Program output: -3                 
Correct output: -86                 | Program output: -73                
Correct output: -46                 | Program output: -30                
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -28                
Correct output: -66                 | Program output: -26                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Lexicase best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_shove (in3 exec_k_when_autoconstructing (in3 in4) (in3 exec_swap (integer_rot in2 exec_if (integer_gt exec_when (in2) in1) ()) ()))))))))
Lexicase best errors: [0 0 0 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 41
Percent parens: 0.415
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Zero cases best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_shove (in3 exec_k_when_autoconstructing (in3 in4) (in3 exec_swap (integer_rot in2 exec_if (integer_gt exec_when (in2) in1) ()) ()))))))))
Zero cases best errors: [0 0 0 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 41
Percent parens: 0.415
--- Lexicase Population Statistics ---
Count of elite individuals by case: (571 459 306 840 683 567 381 558 24 306)
Population mean number of elite cases: 4.70
Count of perfect (error zero) individuals by case: (571 459 306 840 683 567 381 558 24 306)
Population mean number of perfect (error zero) cases: 4.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction integer_rot} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction in2} {:close 1, :instruction exec_if} {:close 2, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 exec_noop integer_rot) (in2 exec_if (integer_gt) (in3 exec_swap (integer_rot) (in2 exec_if () (integer_gt)) exec_when (in2) in1))) ()) ()) ())))))))
Errors: [0 0 0 0 0 0 1 0 1 0]
Total: 2
Mean: 0.2
Genome size: 34
Size: 59
Percent parens: 0.424
--- Population Statistics ---
Average total errors in population: 5.305
Median total errors in population: 5
Error averages by case: (0.429 0.541 0.694 0.16 0.317 0.433 0.619 0.442 0.976 0.694)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.701
Average program size in population (points): 46.99
Average percent parens in population: 0.433
Minimum age in population: 133.2605420244589
Maximum age in population: 135.3288001884635
Average age in population: 134.1858208221717
Median age in population: 134.3288001884635
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 302
Genome diversity (% unique genomes):	 0.348
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 306
Syntactic diversity (% unique Push programs):	 0.345
Total error diversity:				 0.009
Error (vector) diversity:			 0.054
Behavioral diversity:				 0.115
--- Run Statistics ---
Number of program evaluations used so far: 88000
Number of point (instruction) evaluations so far: 44835900
--- Timings ---
Current time: 1559314876047 milliseconds
Total Time:         260.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       181.1 seconds, 69.6%
Fitness Testing:     48.5 seconds, 18.6%
Report:              30.7 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 87
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 88
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 88
;;******************************
;; -*- Smallest problem report - generation 88
Test total error for best: 413
Test mean error for best: 0.41300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 58                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 48                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 40                 
Correct output: 28                  | Program output: 28                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: 82                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -30                
Correct output: -88                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -7                 
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -58                
Correct output: -44                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -83                
Correct output: -79                 | Program output: -39                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output: -70                
Correct output: -41                 | Program output: -3                 
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -30                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 70                 
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -6                 
Correct output: -69                 | Program output: -62                
Correct output: -69                 | Program output: -54                
Correct output: 24                  | Program output: 24                 
Correct output: -28                 | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -37                
Correct output: -70                 | Program output: -2                 
Correct output: -31                 | Program output: -29                
Correct output: -26                 | Program output: -14                
Correct output: -57                 | Program output: -1                 
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -48                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -73                
Correct output: -46                 | Program output: -30                
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Lexicase best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 in2 exec_if (integer_gt) (exec_when (in2) in1)) ()) ()) ()) ())))))))))
Lexicase best errors: [0 0 1 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 52
Percent parens: 0.462
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 1, :instruction in2} {:close 0, :instruction in1})
Zero cases best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 in2 exec_if (integer_gt) (exec_when (in2) in1)) ()) ()) ()) ())))))))))
Zero cases best errors: [0 0 1 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 52
Percent parens: 0.462
--- Lexicase Population Statistics ---
Count of elite individuals by case: (844 828 22 35 845 919 895 917 657 844)
Population mean number of elite cases: 6.81
Count of perfect (error zero) individuals by case: (844 828 22 35 845 919 895 917 657 844)
Population mean number of perfect (error zero) cases: 6.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction in1})
Best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 exec_noop exec_do*while () in2 exec_if (integer_gt) (exec_when (in2 in1))) ()) ()) ()) ())))))))
Errors: [0 0 1 1 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 28
Size: 50
Percent parens: 0.440
--- Population Statistics ---
Average total errors in population: 3.194
Median total errors in population: 2
Error averages by case: (0.156 0.172 0.978 0.965 0.155 0.081 0.105 0.083 0.343 0.156)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.777
Average program size in population (points): 47.54
Average percent parens in population: 0.435
Minimum age in population: 134.3970583524681
Maximum age in population: 136.8288001884635
Average age in population: 135.9700856879644
Median age in population: 135.8032383687972
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 255
Genome diversity (% unique genomes):	 0.356
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 255
Syntactic diversity (% unique Push programs):	 0.35
Total error diversity:				 0.009
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 89000
Number of point (instruction) evaluations so far: 45643056
--- Timings ---
Current time: 1559314879262 milliseconds
Total Time:         263.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       182.9 seconds, 69.4%
Fitness Testing:     49.3 seconds, 18.7%
Report:              31.3 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 88
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 89
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 89
;;******************************
;; -*- Smallest problem report - generation 89
Test total error for best: 413
Test mean error for best: 0.41300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 58                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 48                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 40                 
Correct output: 28                  | Program output: 28                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: 82                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -30                
Correct output: -88                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -7                 
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -58                
Correct output: -44                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -83                
Correct output: -79                 | Program output: -39                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output: -70                
Correct output: -41                 | Program output: -3                 
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -30                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 70                 
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -6                 
Correct output: -69                 | Program output: -62                
Correct output: -69                 | Program output: -54                
Correct output: 24                  | Program output: 24                 
Correct output: -28                 | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -37                
Correct output: -70                 | Program output: -2                 
Correct output: -31                 | Program output: -29                
Correct output: -26                 | Program output: -14                
Correct output: -57                 | Program output: -1                 
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -48                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -73                
Correct output: -46                 | Program output: -30                
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction in1})
Lexicase best program: (exec_when () print_integer in3 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 exec_noop exec_do*while () in2 exec_if (integer_gt) (exec_when (in2 in1))) ()) ()) ()) ())))))))
Lexicase best errors: [1 0 1 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 50
Percent parens: 0.440
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in3} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction in1})
Zero cases best program: (exec_when () print_integer in3 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 exec_noop exec_do*while () in2 exec_if (integer_gt) (exec_when (in2 in1))) ()) ()) ()) ())))))))
Zero cases best errors: [1 0 1 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 50
Percent parens: 0.440
--- Lexicase Population Statistics ---
Count of elite individuals by case: (126 266 168 715 402 765 643 266 500 618)
Population mean number of elite cases: 4.47
Count of perfect (error zero) individuals by case: (126 266 168 715 402 765 643 266 500 618)
Population mean number of perfect (error zero) cases: 4.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction in1})
Best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 exec_noop exec_do*while () in2 exec_if (integer_gt) (exec_when (in2 in1))) ()) ()) ()) ())))))))
Errors: [1 0 1 0 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 28
Size: 50
Percent parens: 0.440
--- Population Statistics ---
Average total errors in population: 5.531
Median total errors in population: 5
Error averages by case: (0.874 0.734 0.832 0.285 0.598 0.235 0.357 0.734 0.5 0.382)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 26.346
Average program size in population (points): 46.731
Average percent parens in population: 0.428
Minimum age in population: 135.3970583524681
Maximum age in population: 138.7904574589641
Average age in population: 137.7429558444639
Median age in population: 137.7776765491309
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 102
Genome diversity (% unique genomes):	 0.383
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 104
Syntactic diversity (% unique Push programs):	 0.377
Total error diversity:				 0.008
Error (vector) diversity:			 0.045
Behavioral diversity:				 0.112
--- Run Statistics ---
Number of program evaluations used so far: 90000
Number of point (instruction) evaluations so far: 46439507
--- Timings ---
Current time: 1559314882455 milliseconds
Total Time:         266.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       184.8 seconds, 69.2%
Fitness Testing:     50.1 seconds, 18.8%
Report:              31.8 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 89
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 90
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 90
;;******************************
;; -*- Smallest problem report - generation 90
Test total error for best: 558
Test mean error for best: 0.55800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 84                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 55                 
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 68                 
Correct output: 16                  | Program output: 54                 
Correct output: 11                  | Program output: 68                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 80                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 89                 
Correct output: 6                   | Program output: 51                 
Correct output: 12                  | Program output: 34                 
Correct output: 1                   | Program output: 93                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 48                 
Correct output: 28                  | Program output: 78                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: 99                 
Correct output: -83                 | Program output: -12                
Correct output: -71                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: 19                 
Correct output: -45                 | Program output: 82                 
Correct output: -30                 | Program output: 3                  
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: 67                 
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -92                
Correct output: -40                 | Program output: -2                 
Correct output: -100                | Program output: 9                  
Correct output: -94                 | Program output: 61                 
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: 41                 
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -3                 
Correct output: -77                 | Program output: -47                
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 89                 
Correct output: -78                 | Program output: 4                  
Correct output: -29                 | Program output: 14                 
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -59                
Correct output: -63                 | Program output: -63                
Correct output: -69                 | Program output: 48                 
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 89                 
Correct output: -28                 | Program output: 78                 
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -20                
Correct output: -31                 | Program output: -29                
Correct output: -26                 | Program output: -14                
Correct output: -57                 | Program output: -1                 
Correct output: -97                 | Program output: -19                
Correct output: -95                 | Program output: -78                
Correct output: -77                 | Program output: -45                
Correct output: -48                 | Program output: -30                
Correct output: -50                 | Program output: -3                 
Correct output: -86                 | Program output: 51                 
Correct output: -46                 | Program output: 42                 
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -28                
Correct output: -66                 | Program output: -26                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_do*while} {:close 0, :instruction in1})
Lexicase best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 exec_noop exec_do*while () in1) ()) ()) ()) ()) ())))))))
Lexicase best errors: [0 0 0 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 47
Percent parens: 0.447
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 1, :instruction exec_do*while} {:close 0, :instruction in1})
Zero cases best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 exec_noop exec_do*while () in1) ()) ()) ()) ()) ())))))))
Zero cases best errors: [0 0 0 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 47
Percent parens: 0.447
--- Lexicase Population Statistics ---
Count of elite individuals by case: (933 30 370 32 402 30 476 402 533 467)
Population mean number of elite cases: 3.67
Count of perfect (error zero) individuals by case: (933 30 370 32 402 30 476 402 533 467)
Population mean number of perfect (error zero) cases: 3.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction in1})
Best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 in1 exec_do*while () in2 exec_if (exec_do*while () in2 exec_if (integer_gt) (exec_when (boolean_yankdup in1))) ()) ()) ()) ()) ())))))))
Errors: [0 0 0 0 0 0 1 0 1 1]
Total: 3
Mean: 0.3
Genome size: 31
Size: 56
Percent parens: 0.446
--- Population Statistics ---
Average total errors in population: 6.325
Median total errors in population: 6
Error averages by case: (0.067 0.97 0.63 0.968 0.598 0.97 0.524 0.598 0.467 0.533)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 27.275
Average program size in population (points): 48.524
Average percent parens in population: 0.438
Minimum age in population: 136.3970583524681
Maximum age in population: 140.7776765491309
Average age in population: 138.9458267862726
Median age in population: 139.0532383687972
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 121
Genome diversity (% unique genomes):	 0.405
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 122
Syntactic diversity (% unique Push programs):	 0.398
Total error diversity:				 0.008
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.095
--- Run Statistics ---
Number of program evaluations used so far: 91000
Number of point (instruction) evaluations so far: 47255433
--- Timings ---
Current time: 1559314885710 milliseconds
Total Time:         270.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       186.6 seconds, 69.1%
Fitness Testing:     51.0 seconds, 18.9%
Report:              32.3 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 90
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 91
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 91
;;******************************
;; -*- Smallest problem report - generation 91
Test total error for best: 426
Test mean error for best: 0.42600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 48                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 54                 
Correct output: 11                  | Program output: 58                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 27                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 34                 
Correct output: 1                   | Program output: 48                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 48                 
Correct output: 28                  | Program output: 28                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -7                 
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: -73                
Correct output: -45                 | Program output: 82                 
Correct output: -30                 | Program output: 3                  
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -37                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -83                
Correct output: -79                 | Program output: -39                
Correct output: -43                 | Program output: 41                 
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -3                 
Correct output: -77                 | Program output: -47                
Correct output: -96                 | Program output: -30                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 70                 
Correct output: -78                 | Program output: 4                  
Correct output: -29                 | Program output: -25                
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -63                
Correct output: -69                 | Program output: -62                
Correct output: -69                 | Program output: -54                
Correct output: 24                  | Program output: 24                 
Correct output: -28                 | Program output: 59                 
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -37                
Correct output: -70                 | Program output: -2                 
Correct output: -31                 | Program output: -29                
Correct output: -26                 | Program output: -14                
Correct output: -57                 | Program output: -1                 
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -78                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -48                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -73                
Correct output: -46                 | Program output: -30                
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction in1})
Lexicase best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 in1 exec_do*while () integer_gt) (exec_when (in2 in1))) ()) ()) ())))))))
Lexicase best errors: [1 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 46
Percent parens: 0.435
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction in1})
Zero cases best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 in1 exec_do*while () integer_gt) (exec_when (in2 in1))) ()) ()) ())))))))
Zero cases best errors: [1 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 46
Percent parens: 0.435
--- Lexicase Population Statistics ---
Count of elite individuals by case: (16 474 483 369 272 641 379 586 525 915)
Population mean number of elite cases: 4.66
Count of perfect (error zero) individuals by case: (16 474 483 369 272 641 379 586 525 915)
Population mean number of perfect (error zero) cases: 4.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction in1})
Best program: (exec_when () print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 in1 exec_do*while () integer_gt) (exec_when (in2 in1))) ()) ()) ())))))))
Errors: [1 0 0 0 0 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 26
Size: 46
Percent parens: 0.435
--- Population Statistics ---
Average total errors in population: 5.34
Median total errors in population: 5
Error averages by case: (0.984 0.526 0.517 0.631 0.728 0.359 0.621 0.414 0.475 0.085)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.405
Average program size in population (points): 51.988
Average percent parens in population: 0.434
Minimum age in population: 139.0873674507995
Maximum age in population: 142.3593479138806
Average age in population: 140.6929813700728
Median age in population: 140.7968479138806
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 137
Genome diversity (% unique genomes):	 0.418
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 139
Syntactic diversity (% unique Push programs):	 0.409
Total error diversity:				 0.009
Error (vector) diversity:			 0.052
Behavioral diversity:				 0.13
--- Run Statistics ---
Number of program evaluations used so far: 92000
Number of point (instruction) evaluations so far: 48110789
--- Timings ---
Current time: 1559314888952 milliseconds
Total Time:         273.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       188.5 seconds, 68.9%
Fitness Testing:     51.8 seconds, 19.0%
Report:              32.9 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 91
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 92
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 92
;;******************************
;; -*- Smallest problem report - generation 92
Test total error for best: 422
Test mean error for best: 0.42200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 44                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 63                 
Correct output: 27                  | Program output: 50                 
Correct output: 11                  | Program output: 68                 
Correct output: 16                  | Program output: 54                 
Correct output: 11                  | Program output: 43                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 13                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 89                 
Correct output: 6                   | Program output: 51                 
Correct output: 12                  | Program output: 34                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 37                 
Correct output: 40                  | Program output: 48                 
Correct output: 28                  | Program output: 78                 
Correct output: 42                  | Program output: 58                 
Correct output: -41                 | Program output: 99                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -44                
Correct output: -45                 | Program output: -7                 
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -79                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -83                
Correct output: -79                 | Program output: -17                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -47                
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 91                 
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 89                 
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -72                
Correct output: -63                 | Program output: -34                
Correct output: -69                 | Program output: -62                
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: -31                
Correct output: -26                 | Program output: -25                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -93                
Correct output: -95                 | Program output: -73                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -32                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -73                
Correct output: -46                 | Program output: -30                
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -46                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction in2})
Lexicase best program: (exec_when (print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 in1 exec_do*while () in3 in1 exec_do*while () in2 exec_if (integer_gt) (exec_when (in2))) ()) ()) ()) ()))))))))))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 58
Percent parens: 0.448
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction in2})
Zero cases best program: (exec_when (print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 in1 exec_do*while () in3 in1 exec_do*while () in2 exec_if (integer_gt) (exec_when (in2))) ()) ()) ()) ()))))))))))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 58
Percent parens: 0.448
--- Lexicase Population Statistics ---
Count of elite individuals by case: (864 625 543 503 522 862 225 30 548 49)
Population mean number of elite cases: 4.77
Count of perfect (error zero) individuals by case: (864 625 543 503 522 862 225 30 548 49)
Population mean number of perfect (error zero) cases: 4.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction in2})
Best program: (exec_when (print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 in1 exec_do*while () in3 in1 exec_do*while () in2 exec_if (integer_gt) (exec_when (in2))) ()) ()) ()) ()))))))))))
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 32
Size: 58
Percent parens: 0.448
--- Population Statistics ---
Average total errors in population: 5.229
Median total errors in population: 5
Error averages by case: (0.136 0.375 0.457 0.497 0.478 0.138 0.775 0.97 0.452 0.951)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 28.676
Average program size in population (points): 52.04
Average percent parens in population: 0.447
Minimum age in population: 140.3288001884635
Maximum age in population: 143.1910192786303
Average age in population: 142.0619174533342
Median age in population: 142.0777467765892
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 232
Genome diversity (% unique genomes):	 0.404
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 233
Syntactic diversity (% unique Push programs):	 0.396
Total error diversity:				 0.01
Error (vector) diversity:			 0.056
Behavioral diversity:				 0.146
--- Run Statistics ---
Number of program evaluations used so far: 93000
Number of point (instruction) evaluations so far: 49001280
--- Timings ---
Current time: 1559314892394 milliseconds
Total Time:         276.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       190.3 seconds, 68.8%
Fitness Testing:     52.8 seconds, 19.1%
Report:              33.4 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 92
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 93
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 93
;;******************************
;; -*- Smallest problem report - generation 93
Test total error for best: 426
Test mean error for best: 0.42600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 84                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: 72                 
Correct output: -60                 | Program output: 76                 
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 70                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 18                 
Correct output: 16                  | Program output: 46                 
Correct output: 11                  | Program output: 68                 
Correct output: 25                  | Program output: 73                 
Correct output: 13                  | Program output: 80                 
Correct output: 34                  | Program output: 35                 
Correct output: 8                   | Program output: 48                 
Correct output: 6                   | Program output: 49                 
Correct output: 12                  | Program output: 50                 
Correct output: 1                   | Program output: 93                 
Correct output: 18                  | Program output: 19                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 45                 
Correct output: 28                  | Program output: 53                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -44                
Correct output: -45                 | Program output: -7                 
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -79                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: 9                  
Correct output: -94                 | Program output: -83                
Correct output: -79                 | Program output: -17                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -47                
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -72                
Correct output: -63                 | Program output: -34                
Correct output: -69                 | Program output: -62                
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 49                 
Correct output: -28                 | Program output: 78                 
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: -31                
Correct output: -26                 | Program output: -25                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -93                
Correct output: -95                 | Program output: -73                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -32                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -73                
Correct output: -46                 | Program output: -30                
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -46                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction in2})
Lexicase best program: (exec_when (print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 exec_noop in3 in1 exec_do*while () in3 in1 exec_do*while () in2 exec_if (integer_gt) (exec_when (in2))) ()) ()) ()) ()))))))))))
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 58
Percent parens: 0.448
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction in2})
Zero cases best program: (exec_when (print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 exec_noop in3 in1 exec_do*while () in3 in1 exec_do*while () in2 exec_if (integer_gt) (exec_when (in2))) ()) ()) ()) ()))))))))))
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 58
Percent parens: 0.448
--- Lexicase Population Statistics ---
Count of elite individuals by case: (648 117 748 747 514 720 242 650 911 512)
Population mean number of elite cases: 5.81
Count of perfect (error zero) individuals by case: (648 117 748 747 514 720 242 650 911 512)
Population mean number of perfect (error zero) cases: 5.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction in2})
Best program: (exec_when (print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 boolean_invert_first_then_and in1 exec_do*while () in3 in1 exec_do*while () in2 exec_if (integer_gt) (exec_when (in2))) ()) ()) ()) ()))))))))))
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 32
Size: 58
Percent parens: 0.448
--- Population Statistics ---
Average total errors in population: 4.191
Median total errors in population: 4
Error averages by case: (0.352 0.883 0.252 0.253 0.486 0.28 0.758 0.35 0.089 0.488)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 30.442
Average program size in population (points): 54.936
Average percent parens in population: 0.445
Minimum age in population: 142.9797481372566
Maximum age in population: 144.5141933647149
Average age in population: 143.8393171666386
Median age in population: 144.0164932530269
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 367
Genome diversity (% unique genomes):	 0.378
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 368
Syntactic diversity (% unique Push programs):	 0.375
Total error diversity:				 0.01
Error (vector) diversity:			 0.063
Behavioral diversity:				 0.134
--- Run Statistics ---
Number of program evaluations used so far: 94000
Number of point (instruction) evaluations so far: 50033367
--- Timings ---
Current time: 1559314895917 milliseconds
Total Time:         280.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       192.2 seconds, 68.6%
Fitness Testing:     53.8 seconds, 19.2%
Report:              34.1 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 93
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 94
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 94
;;******************************
;; -*- Smallest problem report - generation 94
Test total error for best: 362
Test mean error for best: 0.36200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 84                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 68                 
Correct output: 16                  | Program output: 54                 
Correct output: 11                  | Program output: 68                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 80                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 89                 
Correct output: 6                   | Program output: 51                 
Correct output: 12                  | Program output: 34                 
Correct output: 1                   | Program output: 42                 
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 48                 
Correct output: 28                  | Program output: 78                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: 82                 
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -45                 | Program output: -7                 
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -58                
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -79                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -83                
Correct output: -79                 | Program output: -17                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -47                
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: 70                 
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -72                
Correct output: -63                 | Program output: -63                
Correct output: -69                 | Program output: -62                
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -36                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: -31                
Correct output: -26                 | Program output: -25                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -93                
Correct output: -95                 | Program output: -78                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -32                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -73                
Correct output: -46                 | Program output: -30                
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -46                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction in2})
Lexicase best program: (exec_when (print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 in1 exec_do*while () integer_min in1 exec_do*while () in2 exec_if (integer_gt) (exec_when (in2))) ()) ()) ()) ()))))))))))
Lexicase best errors: [0 0 0 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 58
Percent parens: 0.448
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction in2})
Zero cases best program: (exec_when (print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 in1 exec_do*while () integer_min in1 exec_do*while () in2 exec_if (integer_gt) (exec_when (in2))) ()) ()) ()) ()))))))))))
Zero cases best errors: [0 0 0 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 58
Percent parens: 0.448
--- Lexicase Population Statistics ---
Count of elite individuals by case: (900 649 527 828 703 840 220 26 650 277)
Population mean number of elite cases: 5.62
Count of perfect (error zero) individuals by case: (900 649 527 828 703 840 220 26 650 277)
Population mean number of perfect (error zero) cases: 5.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction in2})
Best program: (exec_when (print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 in1 exec_do*while () integer_min in1 exec_do*while () in2 exec_if (integer_gt) (exec_when (in2))) ()) ()) ()) ()))))))))))
Errors: [0 0 0 0 0 0 1 1 0 0]
Total: 2
Mean: 0.2
Genome size: 32
Size: 58
Percent parens: 0.448
--- Population Statistics ---
Average total errors in population: 4.38
Median total errors in population: 4
Error averages by case: (0.1 0.351 0.473 0.172 0.297 0.16 0.78 0.974 0.35 0.723)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.499
Average program size in population (points): 57.48
Average percent parens in population: 0.434
Minimum age in population: 144.5141933647149
Maximum age in population: 146.5141933647149
Average age in population: 145.4611327870067
Median age in population: 145.5141933647149
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 151
Genome diversity (% unique genomes):	 0.425
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 151
Syntactic diversity (% unique Push programs):	 0.423
Total error diversity:				 0.009
Error (vector) diversity:			 0.07
Behavioral diversity:				 0.14
--- Run Statistics ---
Number of program evaluations used so far: 95000
Number of point (instruction) evaluations so far: 51135122
--- Timings ---
Current time: 1559314899484 milliseconds
Total Time:         283.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       194.0 seconds, 68.4%
Fitness Testing:     54.9 seconds, 19.3%
Report:              34.7 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 94
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 95
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 95
;;******************************
;; -*- Smallest problem report - generation 95
Test total error for best: 332
Test mean error for best: 0.33200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 84                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 91                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 68                 
Correct output: 16                  | Program output: 54                 
Correct output: 11                  | Program output: 68                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 80                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 89                 
Correct output: 6                   | Program output: 51                 
Correct output: 12                  | Program output: 34                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 48                 
Correct output: 28                  | Program output: 78                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: -12                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -88                
Correct output: -45                 | Program output: -7                 
Correct output: -21                 | Program output: -7                 
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -58                
Correct output: -44                 | Program output: -37                
Correct output: -98                 | Program output: -79                
Correct output: -40                 | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -83                
Correct output: -79                 | Program output: -17                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -30                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: 92                 
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -63                
Correct output: -69                 | Program output: -62                
Correct output: -69                 | Program output: -54                
Correct output: 24                  | Program output: 89                 
Correct output: -28                 | Program output: -28                
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -36                
Correct output: -70                 | Program output: -20                
Correct output: -31                 | Program output: -31                
Correct output: -26                 | Program output: -25                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: -45                
Correct output: -48                 | Program output: -48                
Correct output: -50                 | Program output: -3                 
Correct output: -86                 | Program output: -73                
Correct output: -46                 | Program output: -30                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -28                
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction in2})
Lexicase best program: (exec_when (print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 in1 integer_rot) (integer_min in1 exec_do*while () in2 exec_if (integer_gt) (exec_when (in2)))) ()) ()) ()))))))))))
Lexicase best errors: [0 0 1 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 57
Percent parens: 0.439
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction in2})
Zero cases best program: (exec_when (print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 in1 integer_rot) (integer_min in1 exec_do*while () in2 exec_if (integer_gt) (exec_when (in2)))) ()) ()) ()))))))))))
Zero cases best errors: [0 0 1 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 57
Percent parens: 0.439
--- Lexicase Population Statistics ---
Count of elite individuals by case: (385 480 59 505 536 130 601 536 885 454)
Population mean number of elite cases: 4.57
Count of perfect (error zero) individuals by case: (385 480 59 505 536 130 601 536 885 454)
Population mean number of perfect (error zero) cases: 4.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction in2})
Best program: (exec_when (print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 in1 integer_rot) (integer_min in1 exec_do*while () in2 exec_if (integer_gt) (exec_when (in2)))) ()) ()) ()))))))))))
Errors: [0 0 1 0 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 32
Size: 57
Percent parens: 0.439
--- Population Statistics ---
Average total errors in population: 5.429
Median total errors in population: 5
Error averages by case: (0.615 0.52 0.941 0.495 0.464 0.87 0.399 0.464 0.115 0.546)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.796
Average program size in population (points): 60.878
Average percent parens in population: 0.445
Minimum age in population: 145.5141933647149
Maximum age in population: 148.5141933647149
Average age in population: 147.1544601916714
Median age in population: 147.2653433088709
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 130
Genome diversity (% unique genomes):	 0.454
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 130
Syntactic diversity (% unique Push programs):	 0.454
Total error diversity:				 0.009
Error (vector) diversity:			 0.085
Behavioral diversity:				 0.174
--- Run Statistics ---
Number of program evaluations used so far: 96000
Number of point (instruction) evaluations so far: 52206250
--- Timings ---
Current time: 1559314903069 milliseconds
Total Time:         287.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       195.9 seconds, 68.2%
Fitness Testing:     55.9 seconds, 19.5%
Report:              35.3 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 95
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 96
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 96
;;******************************
;; -*- Smallest problem report - generation 96
Test total error for best: 361
Test mean error for best: 0.36100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 56                 
Correct output: 5                   | Program output: 44                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 63                 
Correct output: 27                  | Program output: 48                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 43                 
Correct output: 25                  | Program output: 59                 
Correct output: 13                  | Program output: 13                 
Correct output: 34                  | Program output: 35                 
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 19                 
Correct output: 26                  | Program output: 37                 
Correct output: 40                  | Program output: 40                 
Correct output: 28                  | Program output: 28                 
Correct output: 42                  | Program output: 58                 
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: -12                
Correct output: -71                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: -72                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: 1                  
Correct output: -98                 | Program output: 1                  
Correct output: -40                 | Program output: -2                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -3                 
Correct output: -77                 | Program output: -47                
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 60                 
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -59                
Correct output: -63                 | Program output: -63                
Correct output: -69                 | Program output: -69                
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 24                 
Correct output: -28                 | Program output: -28                
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -20                
Correct output: -31                 | Program output: -29                
Correct output: -26                 | Program output: -14                
Correct output: -57                 | Program output: -1                 
Correct output: -97                 | Program output: -19                
Correct output: -95                 | Program output: -78                
Correct output: -77                 | Program output: -45                
Correct output: -48                 | Program output: -30                
Correct output: -50                 | Program output: -3                 
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: -46                
Correct output: -86                 | Program output: -77                
Correct output: -39                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -28                
Correct output: -66                 | Program output: -26                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 2, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction in2})
Lexicase best program: (exec_when (print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in4 in4 exec_swap (in1 exec_do*while () in3 in1 exec_do*while ()) (in2 exec_if (integer_gt) (exec_when (in2)))) ()) ()) ()) ()))))))))))
Lexicase best errors: [0 0 0 1 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 60
Percent parens: 0.467
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 2, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction in2})
Zero cases best program: (exec_when (print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in4 in4 exec_swap (in1 exec_do*while () in3 in1 exec_do*while ()) (in2 exec_if (integer_gt) (exec_when (in2)))) ()) ()) ()) ()))))))))))
Zero cases best errors: [0 0 0 1 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 60
Percent parens: 0.467
--- Lexicase Population Statistics ---
Count of elite individuals by case: (178 97 696 802 628 291 481 291 192 44)
Population mean number of elite cases: 3.70
Count of perfect (error zero) individuals by case: (178 97 696 802 628 291 481 291 192 44)
Population mean number of perfect (error zero) cases: 3.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction in4} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 2, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction in2})
Best program: (exec_when (print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_dup (exec_if () (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in4 in4 exec_swap (in1 exec_do*while () in3 in1 exec_do*while ()) (in2 exec_if (integer_gt) (exec_when (in2)))) ()) ()) ()) ()))))))))))
Errors: [0 0 0 1 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 32
Size: 60
Percent parens: 0.467
--- Population Statistics ---
Average total errors in population: 6.3
Median total errors in population: 6
Error averages by case: (0.822 0.903 0.304 0.198 0.372 0.709 0.519 0.709 0.808 0.956)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.89
Average program size in population (points): 56.719
Average percent parens in population: 0.437
Minimum age in population: 146.5141933647149
Maximum age in population: 150.3897683367929
Average age in population: 149.0748316742038
Median age in population: 149.0141933647149
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 198
Genome diversity (% unique genomes):	 0.416
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 199
Syntactic diversity (% unique Push programs):	 0.414
Total error diversity:				 0.009
Error (vector) diversity:			 0.064
Behavioral diversity:				 0.158
--- Run Statistics ---
Number of program evaluations used so far: 97000
Number of point (instruction) evaluations so far: 53216061
--- Timings ---
Current time: 1559314906632 milliseconds
Total Time:         290.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       197.8 seconds, 68.0%
Fitness Testing:     57.0 seconds, 19.6%
Report:              36.0 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 96
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 97
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 97
;;******************************
;; -*- Smallest problem report - generation 97
Test total error for best: 219
Test mean error for best: 0.21900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 14                 
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 18                 
Correct output: 16                  | Program output: 46                 
Correct output: 11                  | Program output: 11                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 13                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 48                 
Correct output: 6                   | Program output: 49                 
Correct output: 12                  | Program output: 34                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 45                 
Correct output: 28                  | Program output: 36                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: -73                
Correct output: -45                 | Program output: 82                 
Correct output: -30                 | Program output: 3                  
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: 41                 
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -3                 
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: 4                  
Correct output: -29                 | Program output: -25                
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -63                
Correct output: -69                 | Program output: -69                
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 49                 
Correct output: -28                 | Program output: -28                
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: -29                
Correct output: -26                 | Program output: -26                
Correct output: -57                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -48                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: -46                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction in2})
Lexicase best program: (exec_when (print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 exec_if (exec_do*while () integer_min in3 in1 integer_rot) (integer_min exec_while (exec_do*while () in2 exec_if (integer_gt) (exec_when (in2))))) ()) ()) ()) ()))))))
Lexicase best errors: [0 1 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 55
Percent parens: 0.418
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction in2})
Zero cases best program: (exec_when (print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 exec_if (exec_do*while () integer_min in3 in1 integer_rot) (integer_min exec_while (exec_do*while () in2 exec_if (integer_gt) (exec_when (in2))))) ()) ()) ()) ()))))))
Zero cases best errors: [0 1 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 55
Percent parens: 0.418
--- Lexicase Population Statistics ---
Count of elite individuals by case: (287 702 473 155 456 680 672 850 809 379)
Population mean number of elite cases: 5.46
Count of perfect (error zero) individuals by case: (287 702 473 155 456 680 672 850 809 379)
Population mean number of perfect (error zero) cases: 5.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction in2})
Best program: (exec_when (print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 exec_if (exec_do*while () integer_min in3 in1 integer_rot) (integer_min exec_while (exec_do*while () exec_rot (exec_if (integer_gt) (exec_when (in2))) () ()))) ()) ()) ()) ()))))))
Errors: [0 1 0 0 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 32
Size: 58
Percent parens: 0.448
--- Population Statistics ---
Average total errors in population: 4.537
Median total errors in population: 4
Error averages by case: (0.713 0.298 0.527 0.845 0.544 0.32 0.328 0.15 0.191 0.621)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.343
Average program size in population (points): 57.767
Average percent parens in population: 0.439
Minimum age in population: 147.5141933647149
Maximum age in population: 151.9208745937734
Average age in population: 149.6849126137091
Median age in population: 149.9208745937734
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 199
Genome diversity (% unique genomes):	 0.425
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 199
Syntactic diversity (% unique Push programs):	 0.424
Total error diversity:				 0.009
Error (vector) diversity:			 0.078
Behavioral diversity:				 0.127
--- Run Statistics ---
Number of program evaluations used so far: 98000
Number of point (instruction) evaluations so far: 54154006
--- Timings ---
Current time: 1559314909806 milliseconds
Total Time:         294.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       199.7 seconds, 67.8%
Fitness Testing:     57.9 seconds, 19.7%
Report:              36.6 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 97
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 98
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 98
;;******************************
;; -*- Smallest problem report - generation 98
Test total error for best: 219
Test mean error for best: 0.21900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: -97                
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: -93                
Correct output: -57                 | Program output: 6                  
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 5                  
Correct output: 1                   | Program output: 14                 
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 27                 
Correct output: 11                  | Program output: 18                 
Correct output: 16                  | Program output: 46                 
Correct output: 11                  | Program output: 11                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 13                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 48                 
Correct output: 6                   | Program output: 49                 
Correct output: 12                  | Program output: 34                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 45                 
Correct output: 28                  | Program output: 36                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -30                
Correct output: -88                 | Program output: -88                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: -73                
Correct output: -45                 | Program output: 82                 
Correct output: -30                 | Program output: 3                  
Correct output: -91                 | Program output: -91                
Correct output: -65                 | Program output: -65                
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: 41                 
Correct output: -76                 | Program output: -76                
Correct output: -41                 | Program output: -3                 
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: -36                
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -83                
Correct output: -22                 | Program output: -22                
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: 4                  
Correct output: -29                 | Program output: -25                
Correct output: -98                 | Program output: -98                
Correct output: -99                 | Program output: -99                
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -63                
Correct output: -69                 | Program output: -69                
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 49                 
Correct output: -28                 | Program output: -28                
Correct output: -15                 | Program output: -15                
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: -29                
Correct output: -26                 | Program output: -26                
Correct output: -57                 | Program output: -18                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -48                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: -46                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: -39                
Correct output: -58                 | Program output: -58                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: -65                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction in2})
Lexicase best program: (exec_when (print_integer tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 exec_if (exec_do*while () integer_min in3 in1 integer_rot) (integer_min exec_while (exec_do*while () in2 exec_if (integer_gt) (exec_when (in2))))) ()) ()) ()) ()))))))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 54
Percent parens: 0.426
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction in2})
Zero cases best program: (exec_when (print_integer tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 exec_if (exec_do*while () integer_min in3 in1 integer_rot) (integer_min exec_while (exec_do*while () in2 exec_if (integer_gt) (exec_when (in2))))) ()) ()) ()) ()))))))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 54
Percent parens: 0.426
--- Lexicase Population Statistics ---
Count of elite individuals by case: (680 614 930 744 590 722 290 747 676 675)
Population mean number of elite cases: 6.67
Count of perfect (error zero) individuals by case: (680 614 930 744 590 722 290 747 676 675)
Population mean number of perfect (error zero) cases: 6.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction exec_if} {:close 1, :instruction exec_do*while} {:close 0, :instruction integer_min} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction in2})
Best program: (exec_when (print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 exec_if (exec_do*while () integer_min in3 in1 integer_rot) (integer_min exec_while (exec_do*while () in2 exec_if (integer_gt) (exec_when (in2))))) ()) ()) ()) ()))))))
Errors: [0 0 0 0 1 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 32
Size: 55
Percent parens: 0.418
--- Population Statistics ---
Average total errors in population: 3.332
Median total errors in population: 3
Error averages by case: (0.32 0.386 0.07 0.256 0.41 0.278 0.71 0.253 0.324 0.325)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.391
Average program size in population (points): 55.985
Average percent parens in population: 0.420
Minimum age in population: 149.2653433088709
Maximum age in population: 153.7644808507539
Average age in population: 151.990383681491
Median age in population: 152.0617152083027
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 99
Genome diversity (% unique genomes):	 0.48
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 99
Syntactic diversity (% unique Push programs):	 0.478
Total error diversity:				 0.01
Error (vector) diversity:			 0.068
Behavioral diversity:				 0.122
--- Run Statistics ---
Number of program evaluations used so far: 99000
Number of point (instruction) evaluations so far: 54924603
--- Timings ---
Current time: 1559314912851 milliseconds
Total Time:         297.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       201.5 seconds, 67.8%
Fitness Testing:     58.7 seconds, 19.7%
Report:              37.0 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 98
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 99
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 99
;;******************************
;; -*- Smallest problem report - generation 99
Test total error for best: 213
Test mean error for best: 0.21300
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 1
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 1
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 1
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 1
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 1
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 1
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 1
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 44                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 43                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 13                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 40                 
Correct output: 28                  | Program output: 28                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: -57                
Correct output: -65                 | Program output: -39                
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output: -70                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: -9                 
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -2                 
Correct output: -22                 | Program output: 60                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -70                
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -34                
Correct output: -69                 | Program output: -69                
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 24                 
Correct output: -28                 | Program output: -28                
Correct output: -15                 | Program output: 56                 
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: -31                
Correct output: -26                 | Program output: -26                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -48                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: -46                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: -15                
Correct output: -58                 | Program output: -30                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: 17                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction in2})
Lexicase best program: (exec_when (print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_shove (exec_if () (exec_k_when_autoconstructing (in3 exec_if () (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 in1 integer_rot) (integer_rot) integer_min in1 exec_do*while () in2 exec_if (integer_rot) (integer_min exec_while (exec_do*while () in2 exec_if (integer_gt exec_when (in2)) ()))) ()) ()) ()))))) ())))))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 75
Percent parens: 0.440
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction in2})
Zero cases best program: (exec_when (print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_shove (exec_if () (exec_k_when_autoconstructing (in3 exec_if () (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 in1 integer_rot) (integer_rot) integer_min in1 exec_do*while () in2 exec_if (integer_rot) (integer_min exec_while (exec_do*while () in2 exec_if (integer_gt exec_when (in2)) ()))) ()) ()) ()))))) ())))))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 75
Percent parens: 0.440
--- Lexicase Population Statistics ---
Count of elite individuals by case: (400 815 513 761 916 791 792 132 764 509)
Population mean number of elite cases: 6.39
Count of perfect (error zero) individuals by case: (400 815 513 761 916 791 792 132 764 509)
Population mean number of perfect (error zero) cases: 6.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction tag_integer_451} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 1, :instruction exec_if} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_if} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_swap} {:close 0, :instruction in3} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction in1} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction exec_while} {:close 1, :instruction exec_do*while} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_when} {:close 0, :instruction in2})
Best program: (exec_when (print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_shove (exec_if () (exec_k_when_autoconstructing (in3 exec_if () (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 in1 integer_rot) (integer_rot) integer_min in1 exec_do*while () in2 exec_if (integer_rot) (integer_min exec_while (exec_do*while () in2 exec_if (integer_gt exec_when (in2)) ()))) ()) ()) ()))))) ())))))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 42
Size: 75
Percent parens: 0.440
--- Population Statistics ---
Average total errors in population: 3.607
Median total errors in population: 3
Error averages by case: (0.6 0.185 0.487 0.239 0.084 0.209 0.208 0.868 0.236 0.491)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.464
Average program size in population (points): 56.352
Average percent parens in population: 0.423
Minimum age in population: 150.9208745937734
Maximum age in population: 155.366294901038
Average age in population: 153.3217848539872
Median age in population: 153.4092097474057
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 171
Genome diversity (% unique genomes):	 0.462
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 171
Syntactic diversity (% unique Push programs):	 0.46
Total error diversity:				 0.011
Error (vector) diversity:			 0.056
Behavioral diversity:				 0.116
--- Run Statistics ---
Number of program evaluations used so far: 100000
Number of point (instruction) evaluations so far: 55764136
--- Timings ---
Current time: 1559314916294 milliseconds
Total Time:         300.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       203.4 seconds, 67.7%
Fitness Testing:     59.6 seconds, 19.8%
Report:              37.3 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 99
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 99
Successful program: (exec_when (print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_shove (exec_if () (exec_k_when_autoconstructing (in3 exec_if () (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 in1 integer_rot) (integer_rot) integer_min in1 exec_do*while () in2 exec_if (integer_rot) (integer_min exec_while (exec_do*while () in2 exec_if (integer_gt exec_when (in2)) ()))) ()) ()) ()))))) ())))))))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 75


Auto-simplifying with starting size: 75
step: 0
program: (exec_when (print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_shove (exec_if () (exec_k_when_autoconstructing (in3 exec_if () (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 in1 integer_rot) (integer_rot) integer_min in1 exec_do*while () in2 exec_if (integer_rot) (integer_min exec_while (exec_do*while () in2 exec_if (integer_gt exec_when (in2)) ()))) ()) ()) ()))))) ())))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 75

step: 500
program: (exec_when (print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_shove (exec_if () (exec_k_when_autoconstructing (in3 exec_if () (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 in1 integer_rot) (integer_rot) integer_min in1 exec_do*while () in2 exec_if (integer_rot) (integer_min exec_while (exec_do*while () in2 exec_if (integer_gt exec_when (in2)) ()))) ()) ()) ()))))) ())))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 75

step: 1000
program: (exec_when (print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_shove (exec_if () (exec_k_when_autoconstructing (in3 exec_if () (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 in1 integer_rot) (integer_rot) integer_min in1 exec_do*while () in2 exec_if (integer_rot) (integer_min exec_while (exec_do*while () in2 exec_if (integer_gt exec_when (in2)) ()))) ()) ()) ()))))) ())))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 75

step: 1500
program: (exec_when (print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_shove (exec_if () (exec_k_when_autoconstructing (in3 exec_if () (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 in1 integer_rot) (integer_rot) integer_min in1 exec_do*while () in2 exec_if (integer_rot) (integer_min exec_while (exec_do*while () in2 exec_if (integer_gt exec_when (in2)) ()))) ()) ()) ()))))) ())))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 75

step: 2000
program: (exec_when (print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_shove (exec_if () (exec_k_when_autoconstructing (in3 exec_if () (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 in1 integer_rot) (integer_rot) integer_min in1 exec_do*while () in2 exec_if (integer_rot) (integer_min exec_while (exec_do*while () in2 exec_if (integer_gt exec_when (in2)) ()))) ()) ()) ()))))) ())))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 75

step: 2500
program: (exec_when (print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_shove (exec_if () (exec_k_when_autoconstructing (in3 exec_if () (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 in1 integer_rot) (integer_rot) integer_min in1 exec_do*while () in2 exec_if (integer_rot) (integer_min exec_while (exec_do*while () in2 exec_if (integer_gt exec_when (in2)) ()))) ()) ()) ()))))) ())))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 75

step: 3000
program: (exec_when (print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_shove (exec_if () (exec_k_when_autoconstructing (in3 exec_if () (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 in1 integer_rot) (integer_rot) integer_min in1 exec_do*while () in2 exec_if (integer_rot) (integer_min exec_while (exec_do*while () in2 exec_if (integer_gt exec_when (in2)) ()))) ()) ()) ()))))) ())))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 75

step: 3500
program: (exec_when (print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_shove (exec_if () (exec_k_when_autoconstructing (in3 exec_if () (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 in1 integer_rot) (integer_rot) integer_min in1 exec_do*while () in2 exec_if (integer_rot) (integer_min exec_while (exec_do*while () in2 exec_if (integer_gt exec_when (in2)) ()))) ()) ()) ()))))) ())))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 75

step: 4000
program: (exec_when (print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_shove (exec_if () (exec_k_when_autoconstructing (in3 exec_if () (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 in1 integer_rot) (integer_rot) integer_min in1 exec_do*while () in2 exec_if (integer_rot) (integer_min exec_while (exec_do*while () in2 exec_if (integer_gt exec_when (in2)) ()))) ()) ()) ()))))) ())))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 75

step: 4500
program: (exec_when (print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_shove (exec_if () (exec_k_when_autoconstructing (in3 exec_if () (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 in1 integer_rot) (integer_rot) integer_min in1 exec_do*while () in2 exec_if (integer_rot) (integer_min exec_while (exec_do*while () in2 exec_if (integer_gt exec_when (in2)) ()))) ()) ()) ()))))) ())))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 75

step: 5000
program: (exec_when (print_integer in1 tag_integer_451 exec_dup (exec_if () (print_integer exec_shove (exec_shove (exec_if () (exec_k_when_autoconstructing (in3 exec_if () (exec_dup (exec_if () (exec_shove (exec_if (exec_k_when_autoconstructing (in3 exec_swap (in3 exec_k_when_autoconstructing (in3 in4 in3 in1 integer_rot) (integer_rot) integer_min in1 exec_do*while () in2 exec_if (integer_rot) (integer_min exec_while (exec_do*while () in2 exec_if (integer_gt exec_when (in2)) ()))) ()) ()) ()))))) ())))))))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 75

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 99
Test total error for best: 213
Test mean error for best: 0.21300
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 1
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 1
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 1
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 1
Test Case   70 | Error: 1
Test Case   71 | Error: 1
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 1
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 1
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 1
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 1
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 1
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 0
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 1
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 1
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 1
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 1
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 1
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 1
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 1
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 1
Test Case  362 | Error: 0
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 1
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 0
Test Case  411 | Error: 1
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 1
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 1
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 1
Test Case  473 | Error: 1
Test Case  474 | Error: 0
Test Case  475 | Error: 1
Test Case  476 | Error: 1
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 1
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 1
Test Case  549 | Error: 1
Test Case  550 | Error: 1
Test Case  551 | Error: 0
Test Case  552 | Error: 1
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 1
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 1
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 1
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 1
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 1
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 1
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 1
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 1
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 1
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 1
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 1
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 1
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 1
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 1
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 1
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 1
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 1
Test Case  820 | Error: 1
Test Case  821 | Error: 1
Test Case  822 | Error: 0
Test Case  823 | Error: 1
Test Case  824 | Error: 1
Test Case  825 | Error: 1
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 1
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 1
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 1
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 1
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 1
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 1
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 1
Test Case  891 | Error: 1
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 1
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 1
Test Case  907 | Error: 1
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 1
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 1
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 1
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 1
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 1
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 1
Test Case  985 | Error: 1
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 57                  | Program output: 57                 
Correct output: -97                 | Program output: 12                 
Correct output: -45                 | Program output: -45                
Correct output: -34                 | Program output: -34                
Correct output: -58                 | Program output: -58                
Correct output: -60                 | Program output: -60                
Correct output: -63                 | Program output: -63                
Correct output: -93                 | Program output: 23                 
Correct output: -57                 | Program output: -57                
Correct output: 63                  | Program output: 63                 
Correct output: -44                 | Program output: -44                
Correct output: -30                 | Program output: -30                
Correct output: -5                  | Program output: -5                 
Correct output: -28                 | Program output: -28                
Correct output: 43                  | Program output: 43                 
Correct output: 49                  | Program output: 49                 
Correct output: 5                   | Program output: 44                 
Correct output: 1                   | Program output: 1                  
Correct output: 17                  | Program output: 17                 
Correct output: 27                  | Program output: 34                 
Correct output: 11                  | Program output: 11                 
Correct output: 16                  | Program output: 16                 
Correct output: 11                  | Program output: 43                 
Correct output: 25                  | Program output: 25                 
Correct output: 13                  | Program output: 13                 
Correct output: 34                  | Program output: 34                 
Correct output: 8                   | Program output: 8                  
Correct output: 6                   | Program output: 6                  
Correct output: 12                  | Program output: 12                 
Correct output: 1                   | Program output: 1                  
Correct output: 18                  | Program output: 18                 
Correct output: 26                  | Program output: 26                 
Correct output: 40                  | Program output: 40                 
Correct output: 28                  | Program output: 28                 
Correct output: 42                  | Program output: 42                 
Correct output: -41                 | Program output: -41                
Correct output: -83                 | Program output: -83                
Correct output: -71                 | Program output: -71                
Correct output: -88                 | Program output: -44                
Correct output: -45                 | Program output: -45                
Correct output: -21                 | Program output: -21                
Correct output: -95                 | Program output: -95                
Correct output: -78                 | Program output: -78                
Correct output: -45                 | Program output: -45                
Correct output: -30                 | Program output: -30                
Correct output: -91                 | Program output: -57                
Correct output: -65                 | Program output: -39                
Correct output: -99                 | Program output: -99                
Correct output: -44                 | Program output: -44                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: -40                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -79                 | Program output: -79                
Correct output: -43                 | Program output: -43                
Correct output: -76                 | Program output: -70                
Correct output: -41                 | Program output: -41                
Correct output: -77                 | Program output: -77                
Correct output: -96                 | Program output: -96                
Correct output: 10                  | Program output: 10                 
Correct output: -36                 | Program output: -9                 
Correct output: -85                 | Program output: -85                
Correct output: -83                 | Program output: -2                 
Correct output: -22                 | Program output: 60                 
Correct output: -74                 | Program output: -74                
Correct output: -100                | Program output: -100               
Correct output: -78                 | Program output: -78                
Correct output: -29                 | Program output: -29                
Correct output: -98                 | Program output: -70                
Correct output: -99                 | Program output: -8                 
Correct output: -80                 | Program output: -80                
Correct output: -63                 | Program output: -34                
Correct output: -69                 | Program output: -69                
Correct output: -69                 | Program output: -69                
Correct output: 24                  | Program output: 24                 
Correct output: -28                 | Program output: -28                
Correct output: -15                 | Program output: 56                 
Correct output: -43                 | Program output: -43                
Correct output: -70                 | Program output: -70                
Correct output: -31                 | Program output: -31                
Correct output: -26                 | Program output: -26                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -97                
Correct output: -95                 | Program output: -95                
Correct output: -77                 | Program output: -77                
Correct output: -48                 | Program output: -48                
Correct output: -50                 | Program output: -50                
Correct output: -86                 | Program output: -86                
Correct output: -46                 | Program output: -46                
Correct output: -86                 | Program output: -86                
Correct output: -39                 | Program output: -15                
Correct output: -58                 | Program output: -30                
Correct output: -84                 | Program output: -84                
Correct output: -66                 | Program output: -66                
Correct output: -65                 | Program output: 17                 
;;******************************
