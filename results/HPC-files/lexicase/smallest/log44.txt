Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-87 -86 -87 -87] -87] [[-88 -61 -88 -88] -88] [[-55 18 18 18] -55] [[-51 0 -51 -51] -51] [[14 -42 14 14] -42] [[89 -12 89 89] -12] [[77 24 24 24] 24] [[-73 -73 -73 55] -73] [[15 15 15 2] 2] [[-6 -6 -6 -75] -75] [(1 1 1 1) 1] [(-99 -99 -99 -99) -99] [(19 19 19 19) 19] [(57 57 57 57) 57] [(-16 -16 -16 -16) -16] [(52 17 72 88) 17] [(33 38 84 30) 30] [(63 90 94 17) 17] [(72 43 16 28) 16] [(54 97 98 95) 54] [(39 60 68 85) 39] [(50 18 18 31) 18] [(38 55 40 9) 9] [(17 99 26 92) 17] [(22 76 69 51) 22] [(6 1 73 100) 1] [(73 19 83 79) 19] [(96 86 15 86) 15] [(29 58 39 64) 29] [(11 2 19 38) 2] [(87 90 56 86) 56] [(25 1 99 81) 1] [(37 6 50 75) 6] [(57 62 14 83) 14] [(17 81 65 32) 17] [(47 25 46 -32) -32] [(62 -78 -52 -99) -99] [(2 76 99 -70) -70] [(-17 -15 -38 82) -38] [(-75 80 -94 -89) -94] [(76 42 -82 100) -82] [(-53 -1 -68 -9) -68] [(73 -95 -60 35) -95] [(87 -5 -44 85) -44] [(81 6 -23 41) -23] [(75 13 63 -4) -4] [(-40 49 -26 36) -40] [(72 48 60 -55) -55] [(-27 -65 -79 74) -79] [(-38 81 9 86) -38] [(-10 -49 50 36) -49] [(-95 -19 53 -52) -95] [(-95 73 -14 51) -95] [(-100 -26 97 -52) -100] [(15 62 100 41) 15] [(56 -30 -79 -49) -79] [(-43 32 -94 70) -94] [(89 -36 -77 -86) -86] [(49 4 -67 -35) -67] [(-83 -30 -29 78) -83] [(-76 59 -1 -5) -76] [(-8 84 41 -30) -30] [(-61 -51 10 85) -61] [(-38 49 9 75) -38] [(-83 19 -65 -23) -83] [(0 -59 98 51) -59] [(-14 25 28 -33) -33] [(-36 7 66 -92) -92] [(-53 -14 37 37) -53] [(60 66 92 91) 60] [(27 -48 -33 28) -48] [(-31 84 -61 -10) -61] [(-57 89 91 30) -57] [(54 36 -76 -48) -76] [(-59 56 -15 81) -59] [(92 1 73 10) 1] [(-33 -4 -88 82) -88] [(9 -15 -36 6) -36] [(-26 -80 -80 -59) -80] [(72 67 -33 59) -33] [(-54 -50 23 -72) -72] [(41 -69 -16 -62) -69] [(-80 -14 94 -29) -80] [(75 94 73 -34) -34] [(-2 -84 68 -22) -84] [(95 -65 -31 -51) -65] [(-89 -67 -87 74) -89] [(-87 10 -20 74) -87] [(-84 35 55 3) -84] [(1 -44 78 85) -44] [(-55 52 -25 -71) -71] [(-35 74 29 -45) -45] [(-50 96 53 -92) -92] [(49 -45 -84 89) -84] [(91 -45 -29 -3) -45])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-87 -86 -87 -87] -87]
Train Case:   6 | Input/Output: [[-88 -61 -88 -88] -88]
Train Case:   7 | Input/Output: [[-55 18 18 18] -55]
Train Case:   8 | Input/Output: [[-51 0 -51 -51] -51]
Train Case:   9 | Input/Output: [[14 -42 14 14] -42]
Train Case:  10 | Input/Output: [[89 -12 89 89] -12]
Train Case:  11 | Input/Output: [[77 24 24 24] 24]
Train Case:  12 | Input/Output: [[-73 -73 -73 55] -73]
Train Case:  13 | Input/Output: [[15 15 15 2] 2]
Train Case:  14 | Input/Output: [[-6 -6 -6 -75] -75]
Train Case:  15 | Input/Output: [(1 1 1 1) 1]
Train Case:  16 | Input/Output: [(-99 -99 -99 -99) -99]
Train Case:  17 | Input/Output: [(19 19 19 19) 19]
Train Case:  18 | Input/Output: [(57 57 57 57) 57]
Train Case:  19 | Input/Output: [(-16 -16 -16 -16) -16]
Train Case:  20 | Input/Output: [(52 17 72 88) 17]
Train Case:  21 | Input/Output: [(33 38 84 30) 30]
Train Case:  22 | Input/Output: [(63 90 94 17) 17]
Train Case:  23 | Input/Output: [(72 43 16 28) 16]
Train Case:  24 | Input/Output: [(54 97 98 95) 54]
Train Case:  25 | Input/Output: [(39 60 68 85) 39]
Train Case:  26 | Input/Output: [(50 18 18 31) 18]
Train Case:  27 | Input/Output: [(38 55 40 9) 9]
Train Case:  28 | Input/Output: [(17 99 26 92) 17]
Train Case:  29 | Input/Output: [(22 76 69 51) 22]
Train Case:  30 | Input/Output: [(6 1 73 100) 1]
Train Case:  31 | Input/Output: [(73 19 83 79) 19]
Train Case:  32 | Input/Output: [(96 86 15 86) 15]
Train Case:  33 | Input/Output: [(29 58 39 64) 29]
Train Case:  34 | Input/Output: [(11 2 19 38) 2]
Train Case:  35 | Input/Output: [(87 90 56 86) 56]
Train Case:  36 | Input/Output: [(25 1 99 81) 1]
Train Case:  37 | Input/Output: [(37 6 50 75) 6]
Train Case:  38 | Input/Output: [(57 62 14 83) 14]
Train Case:  39 | Input/Output: [(17 81 65 32) 17]
Train Case:  40 | Input/Output: [(47 25 46 -32) -32]
Train Case:  41 | Input/Output: [(62 -78 -52 -99) -99]
Train Case:  42 | Input/Output: [(2 76 99 -70) -70]
Train Case:  43 | Input/Output: [(-17 -15 -38 82) -38]
Train Case:  44 | Input/Output: [(-75 80 -94 -89) -94]
Train Case:  45 | Input/Output: [(76 42 -82 100) -82]
Train Case:  46 | Input/Output: [(-53 -1 -68 -9) -68]
Train Case:  47 | Input/Output: [(73 -95 -60 35) -95]
Train Case:  48 | Input/Output: [(87 -5 -44 85) -44]
Train Case:  49 | Input/Output: [(81 6 -23 41) -23]
Train Case:  50 | Input/Output: [(75 13 63 -4) -4]
Train Case:  51 | Input/Output: [(-40 49 -26 36) -40]
Train Case:  52 | Input/Output: [(72 48 60 -55) -55]
Train Case:  53 | Input/Output: [(-27 -65 -79 74) -79]
Train Case:  54 | Input/Output: [(-38 81 9 86) -38]
Train Case:  55 | Input/Output: [(-10 -49 50 36) -49]
Train Case:  56 | Input/Output: [(-95 -19 53 -52) -95]
Train Case:  57 | Input/Output: [(-95 73 -14 51) -95]
Train Case:  58 | Input/Output: [(-100 -26 97 -52) -100]
Train Case:  59 | Input/Output: [(15 62 100 41) 15]
Train Case:  60 | Input/Output: [(56 -30 -79 -49) -79]
Train Case:  61 | Input/Output: [(-43 32 -94 70) -94]
Train Case:  62 | Input/Output: [(89 -36 -77 -86) -86]
Train Case:  63 | Input/Output: [(49 4 -67 -35) -67]
Train Case:  64 | Input/Output: [(-83 -30 -29 78) -83]
Train Case:  65 | Input/Output: [(-76 59 -1 -5) -76]
Train Case:  66 | Input/Output: [(-8 84 41 -30) -30]
Train Case:  67 | Input/Output: [(-61 -51 10 85) -61]
Train Case:  68 | Input/Output: [(-38 49 9 75) -38]
Train Case:  69 | Input/Output: [(-83 19 -65 -23) -83]
Train Case:  70 | Input/Output: [(0 -59 98 51) -59]
Train Case:  71 | Input/Output: [(-14 25 28 -33) -33]
Train Case:  72 | Input/Output: [(-36 7 66 -92) -92]
Train Case:  73 | Input/Output: [(-53 -14 37 37) -53]
Train Case:  74 | Input/Output: [(60 66 92 91) 60]
Train Case:  75 | Input/Output: [(27 -48 -33 28) -48]
Train Case:  76 | Input/Output: [(-31 84 -61 -10) -61]
Train Case:  77 | Input/Output: [(-57 89 91 30) -57]
Train Case:  78 | Input/Output: [(54 36 -76 -48) -76]
Train Case:  79 | Input/Output: [(-59 56 -15 81) -59]
Train Case:  80 | Input/Output: [(92 1 73 10) 1]
Train Case:  81 | Input/Output: [(-33 -4 -88 82) -88]
Train Case:  82 | Input/Output: [(9 -15 -36 6) -36]
Train Case:  83 | Input/Output: [(-26 -80 -80 -59) -80]
Train Case:  84 | Input/Output: [(72 67 -33 59) -33]
Train Case:  85 | Input/Output: [(-54 -50 23 -72) -72]
Train Case:  86 | Input/Output: [(41 -69 -16 -62) -69]
Train Case:  87 | Input/Output: [(-80 -14 94 -29) -80]
Train Case:  88 | Input/Output: [(75 94 73 -34) -34]
Train Case:  89 | Input/Output: [(-2 -84 68 -22) -84]
Train Case:  90 | Input/Output: [(95 -65 -31 -51) -65]
Train Case:  91 | Input/Output: [(-89 -67 -87 74) -89]
Train Case:  92 | Input/Output: [(-87 10 -20 74) -87]
Train Case:  93 | Input/Output: [(-84 35 55 3) -84]
Train Case:  94 | Input/Output: [(1 -44 78 85) -44]
Train Case:  95 | Input/Output: [(-55 52 -25 -71) -71]
Train Case:  96 | Input/Output: [(-35 74 29 -45) -45]
Train Case:  97 | Input/Output: [(-50 96 53 -92) -92]
Train Case:  98 | Input/Output: [(49 -45 -84 89) -84]
Train Case:  99 | Input/Output: [(91 -45 -29 -3) -45]
Test Case:   0 | Input/Output: [[-68 -68 -97 -68] -97]
Test Case:   1 | Input/Output: [[71 -76 -76 -76] -76]
Test Case:   2 | Input/Output: [[-77 -77 38 -77] -77]
Test Case:   3 | Input/Output: [[41 41 58 41] 41]
Test Case:   4 | Input/Output: [[3 3 -52 3] -52]
Test Case:   5 | Input/Output: [[10 10 74 10] 10]
Test Case:   6 | Input/Output: [[63 -45 -45 -45] -45]
Test Case:   7 | Input/Output: [[2 100 2 2] 2]
Test Case:   8 | Input/Output: [[-51 -42 -42 -42] -51]
Test Case:   9 | Input/Output: [[51 51 51 3] 3]
Test Case:  10 | Input/Output: [[-46 -46 2 -46] -46]
Test Case:  11 | Input/Output: [[40 40 -89 40] -89]
Test Case:  12 | Input/Output: [[-11 -56 -56 -56] -56]
Test Case:  13 | Input/Output: [[-90 -90 92 -90] -90]
Test Case:  14 | Input/Output: [[-13 -13 -13 86] -13]
Test Case:  15 | Input/Output: [[42 42 46 42] 42]
Test Case:  16 | Input/Output: [[78 -81 -81 -81] -81]
Test Case:  17 | Input/Output: [[-7 61 -7 -7] -7]
Test Case:  18 | Input/Output: [[3 3 3 -96] -96]
Test Case:  19 | Input/Output: [[-68 -68 -68 -70] -70]
Test Case:  20 | Input/Output: [[-71 -71 -25 -71] -71]
Test Case:  21 | Input/Output: [[83 83 13 83] 13]
Test Case:  22 | Input/Output: [[81 81 -5 81] -5]
Test Case:  23 | Input/Output: [[63 63 -63 63] -63]
Test Case:  24 | Input/Output: [[77 77 77 -95] -95]
Test Case:  25 | Input/Output: [[63 37 63 63] 37]
Test Case:  26 | Input/Output: [[34 -21 34 34] -21]
Test Case:  27 | Input/Output: [[-59 75 -59 -59] -59]
Test Case:  28 | Input/Output: [[5 5 -28 5] -28]
Test Case:  29 | Input/Output: [[9 -99 9 9] -99]
Test Case:  30 | Input/Output: [[-81 -81 58 -81] -81]
Test Case:  31 | Input/Output: [[16 16 16 16] 16]
Test Case:  32 | Input/Output: [[-32 -26 -26 -26] -32]
Test Case:  33 | Input/Output: [[-36 -36 -81 -36] -81]
Test Case:  34 | Input/Output: [[-72 -72 -72 79] -72]
Test Case:  35 | Input/Output: [[-53 -15 -15 -15] -53]
Test Case:  36 | Input/Output: [[1 41 1 1] 1]
Test Case:  37 | Input/Output: [[96 -50 96 96] -50]
Test Case:  38 | Input/Output: [[46 46 88 46] 46]
Test Case:  39 | Input/Output: [[9 9 9 64] 9]
Test Case:  40 | Input/Output: [[85 -89 85 85] -89]
Test Case:  41 | Input/Output: [[67 67 66 67] 66]
Test Case:  42 | Input/Output: [[-43 -27 -43 -43] -43]
Test Case:  43 | Input/Output: [[44 54 54 54] 44]
Test Case:  44 | Input/Output: [[96 -41 -41 -41] -41]
Test Case:  45 | Input/Output: [[-18 -18 63 -18] -18]
Test Case:  46 | Input/Output: [[-77 -77 -56 -77] -77]
Test Case:  47 | Input/Output: [[43 43 -61 43] -61]
Test Case:  48 | Input/Output: [[-37 -69 -69 -69] -69]
Test Case:  49 | Input/Output: [[94 94 -81 94] -81]
Test Case:  50 | Input/Output: [[94 94 94 43] 43]
Test Case:  51 | Input/Output: [[86 86 86 97] 86]
Test Case:  52 | Input/Output: [[-96 36 36 36] -96]
Test Case:  53 | Input/Output: [[23 23 23 62] 23]
Test Case:  54 | Input/Output: [[86 -5 86 86] -5]
Test Case:  55 | Input/Output: [[-17 4 -17 -17] -17]
Test Case:  56 | Input/Output: [[-86 74 -86 -86] -86]
Test Case:  57 | Input/Output: [[-9 18 -9 -9] -9]
Test Case:  58 | Input/Output: [[-40 -40 -57 -40] -57]
Test Case:  59 | Input/Output: [[-50 -50 -56 -50] -56]
Test Case:  60 | Input/Output: [[-48 -48 -48 5] -48]
Test Case:  61 | Input/Output: [[40 26 40 40] 26]
Test Case:  62 | Input/Output: [[-12 -12 -12 45] -12]
Test Case:  63 | Input/Output: [[8 8 8 -75] -75]
Test Case:  64 | Input/Output: [[2 2 -14 2] -14]
Test Case:  65 | Input/Output: [[87 45 45 45] 45]
Test Case:  66 | Input/Output: [[-79 -5 -5 -5] -79]
Test Case:  67 | Input/Output: [[-44 -44 -44 32] -44]
Test Case:  68 | Input/Output: [[71 27 71 71] 27]
Test Case:  69 | Input/Output: [[-64 12 12 12] -64]
Test Case:  70 | Input/Output: [[-83 52 52 52] -83]
Test Case:  71 | Input/Output: [[76 76 76 -43] -43]
Test Case:  72 | Input/Output: [[54 3 54 54] 3]
Test Case:  73 | Input/Output: [[6 60 6 6] 6]
Test Case:  74 | Input/Output: [[71 71 -59 71] -59]
Test Case:  75 | Input/Output: [[-98 -98 -98 54] -98]
Test Case:  76 | Input/Output: [[-12 -47 -47 -47] -47]
Test Case:  77 | Input/Output: [[-42 89 -42 -42] -42]
Test Case:  78 | Input/Output: [[-33 -33 74 -33] -33]
Test Case:  79 | Input/Output: [[3 -60 3 3] -60]
Test Case:  80 | Input/Output: [[44 44 -80 44] -80]
Test Case:  81 | Input/Output: [[47 -37 -37 -37] -37]
Test Case:  82 | Input/Output: [[99 45 99 99] 45]
Test Case:  83 | Input/Output: [[-67 -23 -67 -67] -67]
Test Case:  84 | Input/Output: [[36 -49 -49 -49] -49]
Test Case:  85 | Input/Output: [[-23 -69 -69 -69] -69]
Test Case:  86 | Input/Output: [[-29 -29 -100 -29] -100]
Test Case:  87 | Input/Output: [[-51 67 -51 -51] -51]
Test Case:  88 | Input/Output: [[82 82 82 33] 33]
Test Case:  89 | Input/Output: [[-37 25 25 25] -37]
Test Case:  90 | Input/Output: [[77 77 -97 77] -97]
Test Case:  91 | Input/Output: [[-68 -68 -68 -98] -98]
Test Case:  92 | Input/Output: [[57 42 42 42] 42]
Test Case:  93 | Input/Output: [[-80 57 57 57] -80]
Test Case:  94 | Input/Output: [[95 -12 95 95] -12]
Test Case:  95 | Input/Output: [[45 39 45 45] 39]
Test Case:  96 | Input/Output: [[-92 -92 72 -92] -92]
Test Case:  97 | Input/Output: [[-12 68 68 68] -12]
Test Case:  98 | Input/Output: [[-63 -63 44 -63] -63]
Test Case:  99 | Input/Output: [[-35 -92 -92 -92] -92]
Test Case: 100 | Input/Output: [(56 56 56 56) 56]
Test Case: 101 | Input/Output: [(38 38 38 38) 38]
Test Case: 102 | Input/Output: [(50 50 50 50) 50]
Test Case: 103 | Input/Output: [(8 8 8 8) 8]
Test Case: 104 | Input/Output: [(42 42 42 42) 42]
Test Case: 105 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 106 | Input/Output: [(49 49 49 49) 49]
Test Case: 107 | Input/Output: [(7 7 7 7) 7]
Test Case: 108 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 109 | Input/Output: [(23 23 23 23) 23]
Test Case: 110 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 111 | Input/Output: [(35 35 35 35) 35]
Test Case: 112 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 113 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 114 | Input/Output: [(21 21 21 21) 21]
Test Case: 115 | Input/Output: [(44 44 44 44) 44]
Test Case: 116 | Input/Output: [(31 31 31 31) 31]
Test Case: 117 | Input/Output: [(90 90 90 90) 90]
Test Case: 118 | Input/Output: [(16 16 16 16) 16]
Test Case: 119 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 120 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 121 | Input/Output: [(28 28 28 28) 28]
Test Case: 122 | Input/Output: [(71 71 71 71) 71]
Test Case: 123 | Input/Output: [(-81 -81 -81 -81) -81]
Test Case: 124 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 125 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 126 | Input/Output: [(46 46 46 46) 46]
Test Case: 127 | Input/Output: [(35 35 35 35) 35]
Test Case: 128 | Input/Output: [(41 41 41 41) 41]
Test Case: 129 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 130 | Input/Output: [(91 91 91 91) 91]
Test Case: 131 | Input/Output: [(24 24 24 24) 24]
Test Case: 132 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 133 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 134 | Input/Output: [(86 86 86 86) 86]
Test Case: 135 | Input/Output: [(54 54 54 54) 54]
Test Case: 136 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 137 | Input/Output: [(63 63 63 63) 63]
Test Case: 138 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 139 | Input/Output: [(49 49 49 49) 49]
Test Case: 140 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 141 | Input/Output: [(2 2 2 2) 2]
Test Case: 142 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 143 | Input/Output: [(97 97 97 97) 97]
Test Case: 144 | Input/Output: [(12 12 12 12) 12]
Test Case: 145 | Input/Output: [(7 7 7 7) 7]
Test Case: 146 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 147 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 148 | Input/Output: [(73 73 73 73) 73]
Test Case: 149 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 150 | Input/Output: [(43 43 43 43) 43]
Test Case: 151 | Input/Output: [(24 24 24 24) 24]
Test Case: 152 | Input/Output: [(67 67 67 67) 67]
Test Case: 153 | Input/Output: [(46 46 46 46) 46]
Test Case: 154 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 155 | Input/Output: [(18 18 18 18) 18]
Test Case: 156 | Input/Output: [(55 55 55 55) 55]
Test Case: 157 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 158 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 159 | Input/Output: [(70 70 70 70) 70]
Test Case: 160 | Input/Output: [(21 21 21 21) 21]
Test Case: 161 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 162 | Input/Output: [(11 11 11 11) 11]
Test Case: 163 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 164 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 165 | Input/Output: [(43 43 43 43) 43]
Test Case: 166 | Input/Output: [(79 79 79 79) 79]
Test Case: 167 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 168 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 169 | Input/Output: [(8 8 8 8) 8]
Test Case: 170 | Input/Output: [(82 82 82 82) 82]
Test Case: 171 | Input/Output: [(-19 -19 -19 -19) -19]
Test Case: 172 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 173 | Input/Output: [(44 44 44 44) 44]
Test Case: 174 | Input/Output: [(-43 -43 -43 -43) -43]
Test Case: 175 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 176 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 177 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 178 | Input/Output: [(94 94 94 94) 94]
Test Case: 179 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 180 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 181 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 182 | Input/Output: [(21 21 21 21) 21]
Test Case: 183 | Input/Output: [(2 2 2 2) 2]
Test Case: 184 | Input/Output: [(56 56 56 56) 56]
Test Case: 185 | Input/Output: [(4 4 4 4) 4]
Test Case: 186 | Input/Output: [(45 45 45 45) 45]
Test Case: 187 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 188 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 189 | Input/Output: [(63 63 63 63) 63]
Test Case: 190 | Input/Output: [(73 73 73 73) 73]
Test Case: 191 | Input/Output: [(28 28 28 28) 28]
Test Case: 192 | Input/Output: [(24 24 24 24) 24]
Test Case: 193 | Input/Output: [(37 37 37 37) 37]
Test Case: 194 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 195 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 196 | Input/Output: [(-42 -42 -42 -42) -42]
Test Case: 197 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 198 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 199 | Input/Output: [(17 17 17 17) 17]
Test Case: 200 | Input/Output: [(54 25 7 22) 7]
Test Case: 201 | Input/Output: [(89 56 76 16) 16]
Test Case: 202 | Input/Output: [(6 38 43 96) 6]
Test Case: 203 | Input/Output: [(67 27 85 64) 27]
Test Case: 204 | Input/Output: [(36 59 65 54) 36]
Test Case: 205 | Input/Output: [(62 34 23 17) 17]
Test Case: 206 | Input/Output: [(4 61 58 54) 4]
Test Case: 207 | Input/Output: [(40 8 12 19) 8]
Test Case: 208 | Input/Output: [(11 91 88 0) 0]
Test Case: 209 | Input/Output: [(57 97 37 3) 3]
Test Case: 210 | Input/Output: [(19 97 11 3) 3]
Test Case: 211 | Input/Output: [(5 94 85 56) 5]
Test Case: 212 | Input/Output: [(82 57 45 59) 45]
Test Case: 213 | Input/Output: [(54 94 2 21) 2]
Test Case: 214 | Input/Output: [(100 68 52 25) 25]
Test Case: 215 | Input/Output: [(73 38 47 67) 38]
Test Case: 216 | Input/Output: [(91 15 84 27) 15]
Test Case: 217 | Input/Output: [(29 81 80 91) 29]
Test Case: 218 | Input/Output: [(8 87 39 3) 3]
Test Case: 219 | Input/Output: [(4 79 20 78) 4]
Test Case: 220 | Input/Output: [(82 58 91 28) 28]
Test Case: 221 | Input/Output: [(56 80 28 7) 7]
Test Case: 222 | Input/Output: [(78 88 48 32) 32]
Test Case: 223 | Input/Output: [(96 88 31 52) 31]
Test Case: 224 | Input/Output: [(54 27 26 57) 26]
Test Case: 225 | Input/Output: [(90 5 46 35) 5]
Test Case: 226 | Input/Output: [(35 88 42 78) 35]
Test Case: 227 | Input/Output: [(12 95 41 94) 12]
Test Case: 228 | Input/Output: [(4 46 18 100) 4]
Test Case: 229 | Input/Output: [(15 60 12 81) 12]
Test Case: 230 | Input/Output: [(55 9 7 95) 7]
Test Case: 231 | Input/Output: [(29 54 27 88) 27]
Test Case: 232 | Input/Output: [(33 24 26 94) 24]
Test Case: 233 | Input/Output: [(90 62 25 80) 25]
Test Case: 234 | Input/Output: [(52 73 97 34) 34]
Test Case: 235 | Input/Output: [(64 18 39 63) 18]
Test Case: 236 | Input/Output: [(19 57 68 32) 19]
Test Case: 237 | Input/Output: [(1 85 49 76) 1]
Test Case: 238 | Input/Output: [(47 49 94 36) 36]
Test Case: 239 | Input/Output: [(33 15 44 57) 15]
Test Case: 240 | Input/Output: [(36 67 16 99) 16]
Test Case: 241 | Input/Output: [(63 29 15 92) 15]
Test Case: 242 | Input/Output: [(67 74 22 38) 22]
Test Case: 243 | Input/Output: [(80 57 42 22) 22]
Test Case: 244 | Input/Output: [(41 47 64 83) 41]
Test Case: 245 | Input/Output: [(92 58 12 39) 12]
Test Case: 246 | Input/Output: [(84 55 34 20) 20]
Test Case: 247 | Input/Output: [(63 60 14 3) 3]
Test Case: 248 | Input/Output: [(56 71 62 92) 56]
Test Case: 249 | Input/Output: [(16 0 96 5) 0]
Test Case: 250 | Input/Output: [(22 70 89 20) 20]
Test Case: 251 | Input/Output: [(87 38 41 76) 38]
Test Case: 252 | Input/Output: [(18 46 99 26) 18]
Test Case: 253 | Input/Output: [(3 64 21 89) 3]
Test Case: 254 | Input/Output: [(63 22 6 90) 6]
Test Case: 255 | Input/Output: [(90 79 98 2) 2]
Test Case: 256 | Input/Output: [(15 20 3 67) 3]
Test Case: 257 | Input/Output: [(20 48 78 76) 20]
Test Case: 258 | Input/Output: [(77 66 38 68) 38]
Test Case: 259 | Input/Output: [(16 39 90 27) 16]
Test Case: 260 | Input/Output: [(91 91 86 86) 86]
Test Case: 261 | Input/Output: [(24 17 98 9) 9]
Test Case: 262 | Input/Output: [(97 16 65 15) 15]
Test Case: 263 | Input/Output: [(77 31 7 37) 7]
Test Case: 264 | Input/Output: [(21 4 97 43) 4]
Test Case: 265 | Input/Output: [(98 10 40 13) 10]
Test Case: 266 | Input/Output: [(37 23 95 39) 23]
Test Case: 267 | Input/Output: [(7 17 99 64) 7]
Test Case: 268 | Input/Output: [(8 24 34 42) 8]
Test Case: 269 | Input/Output: [(95 86 67 48) 48]
Test Case: 270 | Input/Output: [(7 77 26 46) 7]
Test Case: 271 | Input/Output: [(46 85 86 15) 15]
Test Case: 272 | Input/Output: [(63 28 26 21) 21]
Test Case: 273 | Input/Output: [(9 79 99 29) 9]
Test Case: 274 | Input/Output: [(73 59 17 91) 17]
Test Case: 275 | Input/Output: [(24 62 66 41) 24]
Test Case: 276 | Input/Output: [(99 79 95 10) 10]
Test Case: 277 | Input/Output: [(59 38 13 100) 13]
Test Case: 278 | Input/Output: [(80 11 10 8) 8]
Test Case: 279 | Input/Output: [(59 30 2 3) 2]
Test Case: 280 | Input/Output: [(54 40 99 100) 40]
Test Case: 281 | Input/Output: [(44 48 82 71) 44]
Test Case: 282 | Input/Output: [(75 10 8 50) 8]
Test Case: 283 | Input/Output: [(23 32 15 51) 15]
Test Case: 284 | Input/Output: [(42 16 4 16) 4]
Test Case: 285 | Input/Output: [(22 98 65 18) 18]
Test Case: 286 | Input/Output: [(68 79 35 99) 35]
Test Case: 287 | Input/Output: [(93 75 32 54) 32]
Test Case: 288 | Input/Output: [(20 76 40 96) 20]
Test Case: 289 | Input/Output: [(5 92 89 50) 5]
Test Case: 290 | Input/Output: [(85 56 7 90) 7]
Test Case: 291 | Input/Output: [(18 46 16 68) 16]
Test Case: 292 | Input/Output: [(21 36 91 94) 21]
Test Case: 293 | Input/Output: [(64 76 71 85) 64]
Test Case: 294 | Input/Output: [(68 0 93 84) 0]
Test Case: 295 | Input/Output: [(68 62 20 31) 20]
Test Case: 296 | Input/Output: [(47 77 58 9) 9]
Test Case: 297 | Input/Output: [(7 9 75 48) 7]
Test Case: 298 | Input/Output: [(98 86 30 61) 30]
Test Case: 299 | Input/Output: [(46 86 15 53) 15]
Test Case: 300 | Input/Output: [(73 52 63 0) 0]
Test Case: 301 | Input/Output: [(16 85 75 81) 16]
Test Case: 302 | Input/Output: [(5 50 20 12) 5]
Test Case: 303 | Input/Output: [(15 82 71 16) 15]
Test Case: 304 | Input/Output: [(88 93 61 35) 35]
Test Case: 305 | Input/Output: [(50 73 97 31) 31]
Test Case: 306 | Input/Output: [(10 52 96 37) 10]
Test Case: 307 | Input/Output: [(72 94 26 33) 26]
Test Case: 308 | Input/Output: [(69 71 20 34) 20]
Test Case: 309 | Input/Output: [(2 50 4 16) 2]
Test Case: 310 | Input/Output: [(68 43 11 23) 11]
Test Case: 311 | Input/Output: [(30 39 33 31) 30]
Test Case: 312 | Input/Output: [(81 11 28 49) 11]
Test Case: 313 | Input/Output: [(81 20 95 86) 20]
Test Case: 314 | Input/Output: [(20 8 95 88) 8]
Test Case: 315 | Input/Output: [(45 22 0 68) 0]
Test Case: 316 | Input/Output: [(45 66 18 34) 18]
Test Case: 317 | Input/Output: [(74 93 33 66) 33]
Test Case: 318 | Input/Output: [(61 50 27 66) 27]
Test Case: 319 | Input/Output: [(33 91 51 45) 33]
Test Case: 320 | Input/Output: [(1 39 93 92) 1]
Test Case: 321 | Input/Output: [(17 42 39 31) 17]
Test Case: 322 | Input/Output: [(35 93 42 36) 35]
Test Case: 323 | Input/Output: [(97 68 13 23) 13]
Test Case: 324 | Input/Output: [(21 49 41 9) 9]
Test Case: 325 | Input/Output: [(23 74 77 28) 23]
Test Case: 326 | Input/Output: [(10 19 23 84) 10]
Test Case: 327 | Input/Output: [(88 63 65 26) 26]
Test Case: 328 | Input/Output: [(42 61 47 14) 14]
Test Case: 329 | Input/Output: [(69 85 19 63) 19]
Test Case: 330 | Input/Output: [(1 44 69 10) 1]
Test Case: 331 | Input/Output: [(72 24 76 43) 24]
Test Case: 332 | Input/Output: [(99 35 12 85) 12]
Test Case: 333 | Input/Output: [(45 4 58 89) 4]
Test Case: 334 | Input/Output: [(71 50 28 25) 25]
Test Case: 335 | Input/Output: [(77 88 51 10) 10]
Test Case: 336 | Input/Output: [(74 43 12 79) 12]
Test Case: 337 | Input/Output: [(26 30 38 24) 24]
Test Case: 338 | Input/Output: [(70 83 2 61) 2]
Test Case: 339 | Input/Output: [(75 36 56 87) 36]
Test Case: 340 | Input/Output: [(45 81 19 37) 19]
Test Case: 341 | Input/Output: [(53 77 42 87) 42]
Test Case: 342 | Input/Output: [(80 17 23 91) 17]
Test Case: 343 | Input/Output: [(79 71 41 4) 4]
Test Case: 344 | Input/Output: [(38 52 56 4) 4]
Test Case: 345 | Input/Output: [(82 2 69 15) 2]
Test Case: 346 | Input/Output: [(58 78 59 86) 58]
Test Case: 347 | Input/Output: [(61 58 42 66) 42]
Test Case: 348 | Input/Output: [(37 49 75 32) 32]
Test Case: 349 | Input/Output: [(39 100 79 48) 39]
Test Case: 350 | Input/Output: [(60 48 6 62) 6]
Test Case: 351 | Input/Output: [(59 37 80 81) 37]
Test Case: 352 | Input/Output: [(73 12 74 11) 11]
Test Case: 353 | Input/Output: [(90 87 78 71) 71]
Test Case: 354 | Input/Output: [(44 38 31 92) 31]
Test Case: 355 | Input/Output: [(92 13 20 9) 9]
Test Case: 356 | Input/Output: [(92 66 34 6) 6]
Test Case: 357 | Input/Output: [(69 37 75 61) 37]
Test Case: 358 | Input/Output: [(30 38 34 15) 15]
Test Case: 359 | Input/Output: [(17 64 47 30) 17]
Test Case: 360 | Input/Output: [(33 77 2 39) 2]
Test Case: 361 | Input/Output: [(59 85 68 58) 58]
Test Case: 362 | Input/Output: [(21 39 25 54) 21]
Test Case: 363 | Input/Output: [(11 73 23 10) 10]
Test Case: 364 | Input/Output: [(37 83 22 0) 0]
Test Case: 365 | Input/Output: [(17 39 84 43) 17]
Test Case: 366 | Input/Output: [(42 45 32 48) 32]
Test Case: 367 | Input/Output: [(51 73 37 39) 37]
Test Case: 368 | Input/Output: [(34 52 93 18) 18]
Test Case: 369 | Input/Output: [(67 5 79 2) 2]
Test Case: 370 | Input/Output: [(28 54 96 18) 18]
Test Case: 371 | Input/Output: [(68 54 5 21) 5]
Test Case: 372 | Input/Output: [(60 37 86 93) 37]
Test Case: 373 | Input/Output: [(39 77 68 63) 39]
Test Case: 374 | Input/Output: [(76 79 11 79) 11]
Test Case: 375 | Input/Output: [(82 42 4 46) 4]
Test Case: 376 | Input/Output: [(7 11 72 54) 7]
Test Case: 377 | Input/Output: [(75 16 22 72) 16]
Test Case: 378 | Input/Output: [(74 43 66 50) 43]
Test Case: 379 | Input/Output: [(60 61 68 85) 60]
Test Case: 380 | Input/Output: [(75 64 90 99) 64]
Test Case: 381 | Input/Output: [(4 51 67 36) 4]
Test Case: 382 | Input/Output: [(60 28 15 32) 15]
Test Case: 383 | Input/Output: [(82 44 53 69) 44]
Test Case: 384 | Input/Output: [(57 47 92 40) 40]
Test Case: 385 | Input/Output: [(56 71 98 96) 56]
Test Case: 386 | Input/Output: [(18 100 55 57) 18]
Test Case: 387 | Input/Output: [(26 29 13 21) 13]
Test Case: 388 | Input/Output: [(4 50 45 34) 4]
Test Case: 389 | Input/Output: [(93 92 57 18) 18]
Test Case: 390 | Input/Output: [(95 55 20 4) 4]
Test Case: 391 | Input/Output: [(28 55 87 66) 28]
Test Case: 392 | Input/Output: [(5 7 47 3) 3]
Test Case: 393 | Input/Output: [(36 19 36 69) 19]
Test Case: 394 | Input/Output: [(71 81 50 50) 50]
Test Case: 395 | Input/Output: [(2 65 78 100) 2]
Test Case: 396 | Input/Output: [(58 31 27 73) 27]
Test Case: 397 | Input/Output: [(99 99 66 98) 66]
Test Case: 398 | Input/Output: [(57 15 71 73) 15]
Test Case: 399 | Input/Output: [(98 30 17 58) 17]
Test Case: 400 | Input/Output: [(-18 7 -36 57) -36]
Test Case: 401 | Input/Output: [(-82 -28 96 17) -82]
Test Case: 402 | Input/Output: [(-18 -45 -6 11) -45]
Test Case: 403 | Input/Output: [(-95 98 -97 -45) -97]
Test Case: 404 | Input/Output: [(-88 32 82 -32) -88]
Test Case: 405 | Input/Output: [(-65 87 -48 71) -65]
Test Case: 406 | Input/Output: [(83 61 94 -75) -75]
Test Case: 407 | Input/Output: [(-20 -82 -44 34) -82]
Test Case: 408 | Input/Output: [(54 -93 -46 -69) -93]
Test Case: 409 | Input/Output: [(-71 80 -19 -29) -71]
Test Case: 410 | Input/Output: [(-26 74 -36 6) -36]
Test Case: 411 | Input/Output: [(-93 62 98 79) -93]
Test Case: 412 | Input/Output: [(-8 93 -58 -72) -72]
Test Case: 413 | Input/Output: [(81 -21 43 32) -21]
Test Case: 414 | Input/Output: [(-33 24 -28 66) -33]
Test Case: 415 | Input/Output: [(-1 -7 81 28) -7]
Test Case: 416 | Input/Output: [(-93 10 -54 -52) -93]
Test Case: 417 | Input/Output: [(-87 87 32 56) -87]
Test Case: 418 | Input/Output: [(100 -47 15 11) -47]
Test Case: 419 | Input/Output: [(-22 -20 -2 -60) -60]
Test Case: 420 | Input/Output: [(56 -85 71 91) -85]
Test Case: 421 | Input/Output: [(49 22 77 56) 22]
Test Case: 422 | Input/Output: [(-63 -43 -2 54) -63]
Test Case: 423 | Input/Output: [(-14 70 32 62) -14]
Test Case: 424 | Input/Output: [(35 83 -31 -40) -40]
Test Case: 425 | Input/Output: [(-29 86 94 -2) -29]
Test Case: 426 | Input/Output: [(87 -82 24 66) -82]
Test Case: 427 | Input/Output: [(-2 84 11 91) -2]
Test Case: 428 | Input/Output: [(-69 55 59 96) -69]
Test Case: 429 | Input/Output: [(24 62 27 -81) -81]
Test Case: 430 | Input/Output: [(39 57 6 23) 6]
Test Case: 431 | Input/Output: [(11 99 -66 -49) -66]
Test Case: 432 | Input/Output: [(-10 -91 -25 -79) -91]
Test Case: 433 | Input/Output: [(9 40 72 55) 9]
Test Case: 434 | Input/Output: [(-72 -24 40 84) -72]
Test Case: 435 | Input/Output: [(4 -53 8 49) -53]
Test Case: 436 | Input/Output: [(25 -73 49 -21) -73]
Test Case: 437 | Input/Output: [(-82 42 -89 -30) -89]
Test Case: 438 | Input/Output: [(-42 1 61 55) -42]
Test Case: 439 | Input/Output: [(53 53 -4 46) -4]
Test Case: 440 | Input/Output: [(-86 -56 -1 -79) -86]
Test Case: 441 | Input/Output: [(-30 40 -20 -93) -93]
Test Case: 442 | Input/Output: [(40 -36 79 -64) -64]
Test Case: 443 | Input/Output: [(49 -98 -69 16) -98]
Test Case: 444 | Input/Output: [(11 -69 84 -59) -69]
Test Case: 445 | Input/Output: [(96 -7 -20 -61) -61]
Test Case: 446 | Input/Output: [(-59 66 -74 -73) -74]
Test Case: 447 | Input/Output: [(-74 9 64 -44) -74]
Test Case: 448 | Input/Output: [(10 -99 -24 77) -99]
Test Case: 449 | Input/Output: [(81 -45 11 -68) -68]
Test Case: 450 | Input/Output: [(-36 66 54 98) -36]
Test Case: 451 | Input/Output: [(7 71 -80 -11) -80]
Test Case: 452 | Input/Output: [(-33 -32 65 -60) -60]
Test Case: 453 | Input/Output: [(3 -7 -54 40) -54]
Test Case: 454 | Input/Output: [(84 16 69 32) 16]
Test Case: 455 | Input/Output: [(17 1 -18 -9) -18]
Test Case: 456 | Input/Output: [(-97 -69 74 5) -97]
Test Case: 457 | Input/Output: [(18 81 95 28) 18]
Test Case: 458 | Input/Output: [(-90 64 -44 34) -90]
Test Case: 459 | Input/Output: [(25 -56 58 -51) -56]
Test Case: 460 | Input/Output: [(-99 33 -99 -78) -99]
Test Case: 461 | Input/Output: [(80 -23 -97 -36) -97]
Test Case: 462 | Input/Output: [(88 27 13 -24) -24]
Test Case: 463 | Input/Output: [(-13 83 78 90) -13]
Test Case: 464 | Input/Output: [(34 -73 94 -12) -73]
Test Case: 465 | Input/Output: [(-82 -20 -55 22) -82]
Test Case: 466 | Input/Output: [(-48 -12 -97 -91) -97]
Test Case: 467 | Input/Output: [(-11 -80 49 -82) -82]
Test Case: 468 | Input/Output: [(72 -75 -80 -39) -80]
Test Case: 469 | Input/Output: [(47 -75 3 57) -75]
Test Case: 470 | Input/Output: [(81 60 68 38) 38]
Test Case: 471 | Input/Output: [(-45 54 -67 -37) -67]
Test Case: 472 | Input/Output: [(-3 62 -84 36) -84]
Test Case: 473 | Input/Output: [(87 -48 53 22) -48]
Test Case: 474 | Input/Output: [(-89 99 11 74) -89]
Test Case: 475 | Input/Output: [(65 32 20 -33) -33]
Test Case: 476 | Input/Output: [(-88 16 36 43) -88]
Test Case: 477 | Input/Output: [(-93 -81 -77 -13) -93]
Test Case: 478 | Input/Output: [(56 51 17 -8) -8]
Test Case: 479 | Input/Output: [(100 54 -97 -39) -97]
Test Case: 480 | Input/Output: [(-59 -84 -73 98) -84]
Test Case: 481 | Input/Output: [(32 72 -18 -78) -78]
Test Case: 482 | Input/Output: [(95 -4 62 -93) -93]
Test Case: 483 | Input/Output: [(-14 -39 -91 88) -91]
Test Case: 484 | Input/Output: [(83 10 -66 -88) -88]
Test Case: 485 | Input/Output: [(-58 36 15 76) -58]
Test Case: 486 | Input/Output: [(-26 -73 -77 49) -77]
Test Case: 487 | Input/Output: [(-27 44 1 -84) -84]
Test Case: 488 | Input/Output: [(36 -1 18 -95) -95]
Test Case: 489 | Input/Output: [(-28 43 -85 -64) -85]
Test Case: 490 | Input/Output: [(-65 46 44 -61) -65]
Test Case: 491 | Input/Output: [(7 -60 81 -26) -60]
Test Case: 492 | Input/Output: [(50 -56 -90 71) -90]
Test Case: 493 | Input/Output: [(12 34 -100 84) -100]
Test Case: 494 | Input/Output: [(-50 -45 -15 82) -50]
Test Case: 495 | Input/Output: [(92 -17 -79 95) -79]
Test Case: 496 | Input/Output: [(77 27 1 -92) -92]
Test Case: 497 | Input/Output: [(25 73 38 -96) -96]
Test Case: 498 | Input/Output: [(63 -88 24 64) -88]
Test Case: 499 | Input/Output: [(26 17 -36 24) -36]
Test Case: 500 | Input/Output: [(-32 -45 -26 -24) -45]
Test Case: 501 | Input/Output: [(2 91 -54 -22) -54]
Test Case: 502 | Input/Output: [(-7 64 -91 43) -91]
Test Case: 503 | Input/Output: [(30 -91 49 -59) -91]
Test Case: 504 | Input/Output: [(18 1 57 -11) -11]
Test Case: 505 | Input/Output: [(99 57 92 -25) -25]
Test Case: 506 | Input/Output: [(97 80 -73 25) -73]
Test Case: 507 | Input/Output: [(28 -28 47 63) -28]
Test Case: 508 | Input/Output: [(82 46 -8 -58) -58]
Test Case: 509 | Input/Output: [(100 -42 -95 53) -95]
Test Case: 510 | Input/Output: [(-38 -86 94 -49) -86]
Test Case: 511 | Input/Output: [(2 -41 -1 -78) -78]
Test Case: 512 | Input/Output: [(-68 -34 75 -72) -72]
Test Case: 513 | Input/Output: [(-28 74 -71 70) -71]
Test Case: 514 | Input/Output: [(90 -90 42 -3) -90]
Test Case: 515 | Input/Output: [(16 95 40 -52) -52]
Test Case: 516 | Input/Output: [(39 68 68 66) 39]
Test Case: 517 | Input/Output: [(-6 -18 2 74) -18]
Test Case: 518 | Input/Output: [(12 87 -38 -46) -46]
Test Case: 519 | Input/Output: [(-26 9 85 -68) -68]
Test Case: 520 | Input/Output: [(-4 -44 55 74) -44]
Test Case: 521 | Input/Output: [(-74 13 -68 46) -74]
Test Case: 522 | Input/Output: [(-19 86 -12 -39) -39]
Test Case: 523 | Input/Output: [(14 33 -84 7) -84]
Test Case: 524 | Input/Output: [(-52 11 -99 41) -99]
Test Case: 525 | Input/Output: [(19 -45 47 -89) -89]
Test Case: 526 | Input/Output: [(-37 85 -50 -34) -50]
Test Case: 527 | Input/Output: [(-47 31 26 -100) -100]
Test Case: 528 | Input/Output: [(98 -20 91 -10) -20]
Test Case: 529 | Input/Output: [(31 -80 -43 -7) -80]
Test Case: 530 | Input/Output: [(-2 43 -23 24) -23]
Test Case: 531 | Input/Output: [(33 -89 88 -75) -89]
Test Case: 532 | Input/Output: [(-87 -92 51 -30) -92]
Test Case: 533 | Input/Output: [(-100 88 -2 -88) -100]
Test Case: 534 | Input/Output: [(100 24 -24 -92) -92]
Test Case: 535 | Input/Output: [(-77 82 44 -37) -77]
Test Case: 536 | Input/Output: [(-71 85 -63 -11) -71]
Test Case: 537 | Input/Output: [(50 -53 34 -5) -53]
Test Case: 538 | Input/Output: [(2 59 54 -76) -76]
Test Case: 539 | Input/Output: [(-84 27 -87 60) -87]
Test Case: 540 | Input/Output: [(-94 16 -68 35) -94]
Test Case: 541 | Input/Output: [(-93 -36 30 87) -93]
Test Case: 542 | Input/Output: [(51 -42 -34 -70) -70]
Test Case: 543 | Input/Output: [(87 -13 -48 -92) -92]
Test Case: 544 | Input/Output: [(-13 26 85 65) -13]
Test Case: 545 | Input/Output: [(-19 -49 19 94) -49]
Test Case: 546 | Input/Output: [(53 53 -76 -79) -79]
Test Case: 547 | Input/Output: [(100 -40 33 -97) -97]
Test Case: 548 | Input/Output: [(-100 59 29 32) -100]
Test Case: 549 | Input/Output: [(-3 91 98 90) -3]
Test Case: 550 | Input/Output: [(29 -7 17 57) -7]
Test Case: 551 | Input/Output: [(65 -100 -100 -40) -100]
Test Case: 552 | Input/Output: [(-13 78 -55 19) -55]
Test Case: 553 | Input/Output: [(58 99 63 -100) -100]
Test Case: 554 | Input/Output: [(56 -32 -3 -99) -99]
Test Case: 555 | Input/Output: [(-28 -100 -14 38) -100]
Test Case: 556 | Input/Output: [(-77 -42 -71 -38) -77]
Test Case: 557 | Input/Output: [(-76 91 -62 -63) -76]
Test Case: 558 | Input/Output: [(-79 -18 21 31) -79]
Test Case: 559 | Input/Output: [(79 75 -75 65) -75]
Test Case: 560 | Input/Output: [(-95 -93 -7 92) -95]
Test Case: 561 | Input/Output: [(87 -19 -17 83) -19]
Test Case: 562 | Input/Output: [(95 -33 34 80) -33]
Test Case: 563 | Input/Output: [(42 40 -63 87) -63]
Test Case: 564 | Input/Output: [(-97 -55 99 -83) -97]
Test Case: 565 | Input/Output: [(-68 97 51 25) -68]
Test Case: 566 | Input/Output: [(93 -53 8 -100) -100]
Test Case: 567 | Input/Output: [(5 26 15 55) 5]
Test Case: 568 | Input/Output: [(71 3 29 -73) -73]
Test Case: 569 | Input/Output: [(-11 -30 -64 61) -64]
Test Case: 570 | Input/Output: [(-54 12 87 70) -54]
Test Case: 571 | Input/Output: [(-86 91 -32 -99) -99]
Test Case: 572 | Input/Output: [(-41 14 42 -98) -98]
Test Case: 573 | Input/Output: [(-92 -21 15 5) -92]
Test Case: 574 | Input/Output: [(58 79 -100 -81) -100]
Test Case: 575 | Input/Output: [(-39 -76 37 -82) -82]
Test Case: 576 | Input/Output: [(-66 -15 93 -22) -66]
Test Case: 577 | Input/Output: [(57 7 -90 -93) -93]
Test Case: 578 | Input/Output: [(-88 -89 -58 -99) -99]
Test Case: 579 | Input/Output: [(-33 -91 30 -13) -91]
Test Case: 580 | Input/Output: [(42 65 -10 -48) -48]
Test Case: 581 | Input/Output: [(66 46 -90 6) -90]
Test Case: 582 | Input/Output: [(-22 -54 -64 1) -64]
Test Case: 583 | Input/Output: [(58 -19 44 -34) -34]
Test Case: 584 | Input/Output: [(-88 62 -86 47) -88]
Test Case: 585 | Input/Output: [(-35 -51 87 57) -51]
Test Case: 586 | Input/Output: [(-48 22 -22 -78) -78]
Test Case: 587 | Input/Output: [(-25 25 -98 53) -98]
Test Case: 588 | Input/Output: [(12 -40 57 13) -40]
Test Case: 589 | Input/Output: [(73 47 -91 75) -91]
Test Case: 590 | Input/Output: [(-15 -3 -37 94) -37]
Test Case: 591 | Input/Output: [(32 5 -77 94) -77]
Test Case: 592 | Input/Output: [(65 -58 -80 -84) -84]
Test Case: 593 | Input/Output: [(-55 49 16 95) -55]
Test Case: 594 | Input/Output: [(84 96 36 -73) -73]
Test Case: 595 | Input/Output: [(-65 35 52 55) -65]
Test Case: 596 | Input/Output: [(-4 77 -52 -27) -52]
Test Case: 597 | Input/Output: [(-51 -45 94 43) -51]
Test Case: 598 | Input/Output: [(-94 -58 -8 64) -94]
Test Case: 599 | Input/Output: [(21 45 -98 46) -98]
Test Case: 600 | Input/Output: [(-26 -7 22 -7) -26]
Test Case: 601 | Input/Output: [(28 -4 -90 84) -90]
Test Case: 602 | Input/Output: [(24 26 -64 88) -64]
Test Case: 603 | Input/Output: [(56 3 -29 93) -29]
Test Case: 604 | Input/Output: [(-4 7 7 5) -4]
Test Case: 605 | Input/Output: [(34 -8 68 17) -8]
Test Case: 606 | Input/Output: [(52 49 -40 42) -40]
Test Case: 607 | Input/Output: [(-45 -60 -32 10) -60]
Test Case: 608 | Input/Output: [(-8 94 89 41) -8]
Test Case: 609 | Input/Output: [(97 58 -6 89) -6]
Test Case: 610 | Input/Output: [(-97 -57 -52 90) -97]
Test Case: 611 | Input/Output: [(-78 53 40 -14) -78]
Test Case: 612 | Input/Output: [(99 -25 -3 -59) -59]
Test Case: 613 | Input/Output: [(-27 -92 -45 83) -92]
Test Case: 614 | Input/Output: [(-84 -17 -56 70) -84]
Test Case: 615 | Input/Output: [(71 78 -50 42) -50]
Test Case: 616 | Input/Output: [(-25 -81 -9 7) -81]
Test Case: 617 | Input/Output: [(-4 -14 -56 -88) -88]
Test Case: 618 | Input/Output: [(-89 -87 31 15) -89]
Test Case: 619 | Input/Output: [(-14 90 -30 47) -30]
Test Case: 620 | Input/Output: [(-6 -83 -86 37) -86]
Test Case: 621 | Input/Output: [(-73 -54 59 -100) -100]
Test Case: 622 | Input/Output: [(-31 48 -3 42) -31]
Test Case: 623 | Input/Output: [(33 73 -73 21) -73]
Test Case: 624 | Input/Output: [(83 98 3 -81) -81]
Test Case: 625 | Input/Output: [(73 87 3 28) 3]
Test Case: 626 | Input/Output: [(-74 13 -88 -15) -88]
Test Case: 627 | Input/Output: [(-48 70 -80 -74) -80]
Test Case: 628 | Input/Output: [(-75 -33 90 93) -75]
Test Case: 629 | Input/Output: [(13 -18 62 5) -18]
Test Case: 630 | Input/Output: [(-70 -50 17 25) -70]
Test Case: 631 | Input/Output: [(-84 59 -94 31) -94]
Test Case: 632 | Input/Output: [(41 45 -46 -51) -51]
Test Case: 633 | Input/Output: [(23 -35 79 79) -35]
Test Case: 634 | Input/Output: [(47 93 -22 10) -22]
Test Case: 635 | Input/Output: [(-53 -83 62 84) -83]
Test Case: 636 | Input/Output: [(-39 -59 52 -43) -59]
Test Case: 637 | Input/Output: [(83 -45 19 -78) -78]
Test Case: 638 | Input/Output: [(1 -30 61 -17) -30]
Test Case: 639 | Input/Output: [(59 -67 -23 74) -67]
Test Case: 640 | Input/Output: [(-1 -54 64 69) -54]
Test Case: 641 | Input/Output: [(83 38 -34 37) -34]
Test Case: 642 | Input/Output: [(4 68 -80 67) -80]
Test Case: 643 | Input/Output: [(69 -3 3 -51) -51]
Test Case: 644 | Input/Output: [(-12 -51 -5 -55) -55]
Test Case: 645 | Input/Output: [(-75 19 -11 -6) -75]
Test Case: 646 | Input/Output: [(-56 -86 -9 -46) -86]
Test Case: 647 | Input/Output: [(-44 91 -18 3) -44]
Test Case: 648 | Input/Output: [(46 62 83 -16) -16]
Test Case: 649 | Input/Output: [(-91 -53 84 -51) -91]
Test Case: 650 | Input/Output: [(-8 48 -100 5) -100]
Test Case: 651 | Input/Output: [(25 -18 47 -39) -39]
Test Case: 652 | Input/Output: [(-40 95 -57 -97) -97]
Test Case: 653 | Input/Output: [(35 18 52 -10) -10]
Test Case: 654 | Input/Output: [(-40 49 98 -90) -90]
Test Case: 655 | Input/Output: [(-77 -93 44 -93) -93]
Test Case: 656 | Input/Output: [(-1 94 65 -63) -63]
Test Case: 657 | Input/Output: [(-18 -35 -6 94) -35]
Test Case: 658 | Input/Output: [(-58 -51 -14 -96) -96]
Test Case: 659 | Input/Output: [(-86 69 -3 -4) -86]
Test Case: 660 | Input/Output: [(-69 81 71 -72) -72]
Test Case: 661 | Input/Output: [(20 -66 85 -30) -66]
Test Case: 662 | Input/Output: [(-76 69 41 21) -76]
Test Case: 663 | Input/Output: [(36 76 -22 -27) -27]
Test Case: 664 | Input/Output: [(14 -72 -59 -39) -72]
Test Case: 665 | Input/Output: [(3 -38 46 12) -38]
Test Case: 666 | Input/Output: [(-68 66 11 -71) -71]
Test Case: 667 | Input/Output: [(96 19 -97 -30) -97]
Test Case: 668 | Input/Output: [(-65 63 -40 2) -65]
Test Case: 669 | Input/Output: [(47 55 72 -67) -67]
Test Case: 670 | Input/Output: [(28 -51 55 -96) -96]
Test Case: 671 | Input/Output: [(-25 -32 96 -36) -36]
Test Case: 672 | Input/Output: [(-39 19 53 -28) -39]
Test Case: 673 | Input/Output: [(-12 -99 -86 -22) -99]
Test Case: 674 | Input/Output: [(71 -56 42 -92) -92]
Test Case: 675 | Input/Output: [(-6 16 89 26) -6]
Test Case: 676 | Input/Output: [(-97 77 21 68) -97]
Test Case: 677 | Input/Output: [(-2 -86 -65 31) -86]
Test Case: 678 | Input/Output: [(-87 -83 -95 41) -95]
Test Case: 679 | Input/Output: [(-77 86 -60 -15) -77]
Test Case: 680 | Input/Output: [(-23 62 98 -38) -38]
Test Case: 681 | Input/Output: [(-8 6 21 -23) -23]
Test Case: 682 | Input/Output: [(-95 17 -99 -65) -99]
Test Case: 683 | Input/Output: [(-2 68 91 37) -2]
Test Case: 684 | Input/Output: [(-7 42 14 -29) -29]
Test Case: 685 | Input/Output: [(-81 36 -85 -50) -85]
Test Case: 686 | Input/Output: [(47 -36 -21 -49) -49]
Test Case: 687 | Input/Output: [(73 66 37 68) 37]
Test Case: 688 | Input/Output: [(54 34 56 -44) -44]
Test Case: 689 | Input/Output: [(72 4 -80 47) -80]
Test Case: 690 | Input/Output: [(-49 -76 -32 -87) -87]
Test Case: 691 | Input/Output: [(-1 -47 37 94) -47]
Test Case: 692 | Input/Output: [(89 -84 8 -57) -84]
Test Case: 693 | Input/Output: [(-17 -60 -42 96) -60]
Test Case: 694 | Input/Output: [(47 63 -33 -81) -81]
Test Case: 695 | Input/Output: [(20 -94 -56 75) -94]
Test Case: 696 | Input/Output: [(21 38 85 -33) -33]
Test Case: 697 | Input/Output: [(-25 1 -96 -78) -96]
Test Case: 698 | Input/Output: [(-20 -15 10 86) -20]
Test Case: 699 | Input/Output: [(66 4 -32 91) -32]
Test Case: 700 | Input/Output: [(-71 62 2 -82) -82]
Test Case: 701 | Input/Output: [(-64 -34 -54 7) -64]
Test Case: 702 | Input/Output: [(28 -51 81 77) -51]
Test Case: 703 | Input/Output: [(-44 -23 -72 -44) -72]
Test Case: 704 | Input/Output: [(47 -33 96 75) -33]
Test Case: 705 | Input/Output: [(52 100 -3 -88) -88]
Test Case: 706 | Input/Output: [(-48 -12 37 -64) -64]
Test Case: 707 | Input/Output: [(-25 24 4 -65) -65]
Test Case: 708 | Input/Output: [(-78 24 -78 -27) -78]
Test Case: 709 | Input/Output: [(-90 30 48 17) -90]
Test Case: 710 | Input/Output: [(-65 43 88 -1) -65]
Test Case: 711 | Input/Output: [(-58 32 -15 61) -58]
Test Case: 712 | Input/Output: [(-58 -25 -14 -50) -58]
Test Case: 713 | Input/Output: [(26 82 -23 69) -23]
Test Case: 714 | Input/Output: [(-10 7 45 -68) -68]
Test Case: 715 | Input/Output: [(-99 -44 -10 82) -99]
Test Case: 716 | Input/Output: [(88 41 -6 -56) -56]
Test Case: 717 | Input/Output: [(-92 -5 75 -80) -92]
Test Case: 718 | Input/Output: [(41 10 -8 -30) -30]
Test Case: 719 | Input/Output: [(0 -37 92 88) -37]
Test Case: 720 | Input/Output: [(-42 -56 -73 -12) -73]
Test Case: 721 | Input/Output: [(-90 16 -47 34) -90]
Test Case: 722 | Input/Output: [(-58 66 64 -36) -58]
Test Case: 723 | Input/Output: [(42 -51 -9 -62) -62]
Test Case: 724 | Input/Output: [(98 -59 46 -92) -92]
Test Case: 725 | Input/Output: [(-82 12 39 -92) -92]
Test Case: 726 | Input/Output: [(-11 -53 9 41) -53]
Test Case: 727 | Input/Output: [(77 77 14 12) 12]
Test Case: 728 | Input/Output: [(31 -6 60 99) -6]
Test Case: 729 | Input/Output: [(25 84 -96 57) -96]
Test Case: 730 | Input/Output: [(-92 31 16 34) -92]
Test Case: 731 | Input/Output: [(68 -87 -57 41) -87]
Test Case: 732 | Input/Output: [(59 84 -62 -59) -62]
Test Case: 733 | Input/Output: [(-53 10 -77 67) -77]
Test Case: 734 | Input/Output: [(79 -60 -40 -48) -60]
Test Case: 735 | Input/Output: [(-57 98 -83 34) -83]
Test Case: 736 | Input/Output: [(8 -92 -73 7) -92]
Test Case: 737 | Input/Output: [(-29 -96 10 99) -96]
Test Case: 738 | Input/Output: [(-7 77 -3 36) -7]
Test Case: 739 | Input/Output: [(83 36 11 -18) -18]
Test Case: 740 | Input/Output: [(83 -47 40 -4) -47]
Test Case: 741 | Input/Output: [(-39 -40 34 -6) -40]
Test Case: 742 | Input/Output: [(-60 56 20 -100) -100]
Test Case: 743 | Input/Output: [(-43 -80 -83 12) -83]
Test Case: 744 | Input/Output: [(19 16 73 76) 16]
Test Case: 745 | Input/Output: [(17 -41 -1 -84) -84]
Test Case: 746 | Input/Output: [(-66 36 77 -70) -70]
Test Case: 747 | Input/Output: [(-18 59 60 91) -18]
Test Case: 748 | Input/Output: [(21 10 12 -76) -76]
Test Case: 749 | Input/Output: [(93 -40 -74 34) -74]
Test Case: 750 | Input/Output: [(-43 52 -83 -41) -83]
Test Case: 751 | Input/Output: [(12 68 -90 17) -90]
Test Case: 752 | Input/Output: [(-82 -9 1 -64) -82]
Test Case: 753 | Input/Output: [(-84 -66 -74 -36) -84]
Test Case: 754 | Input/Output: [(51 -14 96 45) -14]
Test Case: 755 | Input/Output: [(2 -70 69 13) -70]
Test Case: 756 | Input/Output: [(47 41 -52 -82) -82]
Test Case: 757 | Input/Output: [(-30 22 -5 20) -30]
Test Case: 758 | Input/Output: [(-62 -67 70 -46) -67]
Test Case: 759 | Input/Output: [(18 -11 80 -33) -33]
Test Case: 760 | Input/Output: [(90 86 48 28) 28]
Test Case: 761 | Input/Output: [(48 29 16 -59) -59]
Test Case: 762 | Input/Output: [(-41 54 87 -85) -85]
Test Case: 763 | Input/Output: [(-100 6 9 9) -100]
Test Case: 764 | Input/Output: [(-83 -96 -67 -87) -96]
Test Case: 765 | Input/Output: [(30 -31 43 33) -31]
Test Case: 766 | Input/Output: [(14 -19 -20 -37) -37]
Test Case: 767 | Input/Output: [(-1 -51 73 -60) -60]
Test Case: 768 | Input/Output: [(-40 -12 30 -66) -66]
Test Case: 769 | Input/Output: [(10 64 51 -44) -44]
Test Case: 770 | Input/Output: [(-77 5 -78 100) -78]
Test Case: 771 | Input/Output: [(68 -44 1 -56) -56]
Test Case: 772 | Input/Output: [(-82 11 -76 29) -82]
Test Case: 773 | Input/Output: [(68 82 -91 -73) -91]
Test Case: 774 | Input/Output: [(-19 83 75 -72) -72]
Test Case: 775 | Input/Output: [(21 -69 28 99) -69]
Test Case: 776 | Input/Output: [(77 57 -80 66) -80]
Test Case: 777 | Input/Output: [(-51 -38 22 29) -51]
Test Case: 778 | Input/Output: [(72 37 84 -54) -54]
Test Case: 779 | Input/Output: [(-40 -33 64 -93) -93]
Test Case: 780 | Input/Output: [(-5 -53 -67 -90) -90]
Test Case: 781 | Input/Output: [(84 9 52 31) 9]
Test Case: 782 | Input/Output: [(68 79 24 59) 24]
Test Case: 783 | Input/Output: [(-64 -50 -43 66) -64]
Test Case: 784 | Input/Output: [(-82 73 -69 100) -82]
Test Case: 785 | Input/Output: [(-9 -6 -33 -93) -93]
Test Case: 786 | Input/Output: [(-93 -25 15 -49) -93]
Test Case: 787 | Input/Output: [(68 36 -91 -10) -91]
Test Case: 788 | Input/Output: [(-51 34 36 -11) -51]
Test Case: 789 | Input/Output: [(-88 90 -60 90) -88]
Test Case: 790 | Input/Output: [(-60 -53 95 3) -60]
Test Case: 791 | Input/Output: [(93 74 -76 -59) -76]
Test Case: 792 | Input/Output: [(-59 -74 -62 92) -74]
Test Case: 793 | Input/Output: [(29 10 -1 27) -1]
Test Case: 794 | Input/Output: [(27 -66 57 -46) -66]
Test Case: 795 | Input/Output: [(-25 -34 19 98) -34]
Test Case: 796 | Input/Output: [(8 14 100 73) 8]
Test Case: 797 | Input/Output: [(94 -100 65 -57) -100]
Test Case: 798 | Input/Output: [(-71 -8 63 -87) -87]
Test Case: 799 | Input/Output: [(67 -95 96 -19) -95]
Test Case: 800 | Input/Output: [(44 -8 10 63) -8]
Test Case: 801 | Input/Output: [(-56 46 -69 -54) -69]
Test Case: 802 | Input/Output: [(-35 73 10 -13) -35]
Test Case: 803 | Input/Output: [(-12 19 19 3) -12]
Test Case: 804 | Input/Output: [(30 -60 79 -74) -74]
Test Case: 805 | Input/Output: [(2 -43 -26 90) -43]
Test Case: 806 | Input/Output: [(54 -61 -30 76) -61]
Test Case: 807 | Input/Output: [(50 -92 21 18) -92]
Test Case: 808 | Input/Output: [(69 -81 -65 -43) -81]
Test Case: 809 | Input/Output: [(83 -81 8 57) -81]
Test Case: 810 | Input/Output: [(91 56 93 69) 56]
Test Case: 811 | Input/Output: [(-24 -68 97 80) -68]
Test Case: 812 | Input/Output: [(-24 34 -43 74) -43]
Test Case: 813 | Input/Output: [(-29 -7 96 -69) -69]
Test Case: 814 | Input/Output: [(33 -53 -38 10) -53]
Test Case: 815 | Input/Output: [(10 -23 -26 41) -26]
Test Case: 816 | Input/Output: [(10 -86 -51 -25) -86]
Test Case: 817 | Input/Output: [(-51 21 48 93) -51]
Test Case: 818 | Input/Output: [(-38 41 -54 -41) -54]
Test Case: 819 | Input/Output: [(59 -18 11 -60) -60]
Test Case: 820 | Input/Output: [(38 31 -90 -38) -90]
Test Case: 821 | Input/Output: [(22 11 76 -76) -76]
Test Case: 822 | Input/Output: [(-23 -7 42 23) -23]
Test Case: 823 | Input/Output: [(17 -41 60 79) -41]
Test Case: 824 | Input/Output: [(30 -20 44 58) -20]
Test Case: 825 | Input/Output: [(16 61 -3 -38) -38]
Test Case: 826 | Input/Output: [(20 -63 19 -72) -72]
Test Case: 827 | Input/Output: [(-14 88 90 -44) -44]
Test Case: 828 | Input/Output: [(59 94 44 -14) -14]
Test Case: 829 | Input/Output: [(-4 -75 55 100) -75]
Test Case: 830 | Input/Output: [(-63 -65 -8 -68) -68]
Test Case: 831 | Input/Output: [(72 -36 -60 51) -60]
Test Case: 832 | Input/Output: [(53 59 -86 -28) -86]
Test Case: 833 | Input/Output: [(49 79 43 20) 20]
Test Case: 834 | Input/Output: [(-55 -68 76 -91) -91]
Test Case: 835 | Input/Output: [(-94 -40 64 84) -94]
Test Case: 836 | Input/Output: [(-61 48 -29 34) -61]
Test Case: 837 | Input/Output: [(-88 -60 -84 63) -88]
Test Case: 838 | Input/Output: [(23 -4 -68 -51) -68]
Test Case: 839 | Input/Output: [(-46 53 29 -9) -46]
Test Case: 840 | Input/Output: [(31 -65 86 79) -65]
Test Case: 841 | Input/Output: [(30 100 90 -91) -91]
Test Case: 842 | Input/Output: [(-82 -84 93 -25) -84]
Test Case: 843 | Input/Output: [(-74 0 24 -55) -74]
Test Case: 844 | Input/Output: [(96 -54 21 30) -54]
Test Case: 845 | Input/Output: [(-72 -95 59 27) -95]
Test Case: 846 | Input/Output: [(7 6 -45 51) -45]
Test Case: 847 | Input/Output: [(-21 86 -37 -28) -37]
Test Case: 848 | Input/Output: [(-53 -78 -97 -98) -98]
Test Case: 849 | Input/Output: [(-7 -97 -20 -52) -97]
Test Case: 850 | Input/Output: [(59 -47 79 -15) -47]
Test Case: 851 | Input/Output: [(85 61 -39 69) -39]
Test Case: 852 | Input/Output: [(-25 54 -42 -72) -72]
Test Case: 853 | Input/Output: [(-27 90 -99 73) -99]
Test Case: 854 | Input/Output: [(83 -29 -99 94) -99]
Test Case: 855 | Input/Output: [(-88 -50 -59 31) -88]
Test Case: 856 | Input/Output: [(-26 84 49 44) -26]
Test Case: 857 | Input/Output: [(60 -100 -70 89) -100]
Test Case: 858 | Input/Output: [(98 -31 -60 -19) -60]
Test Case: 859 | Input/Output: [(94 92 94 -26) -26]
Test Case: 860 | Input/Output: [(-97 -7 12 81) -97]
Test Case: 861 | Input/Output: [(23 31 -49 -49) -49]
Test Case: 862 | Input/Output: [(-92 33 44 -60) -92]
Test Case: 863 | Input/Output: [(98 35 45 9) 9]
Test Case: 864 | Input/Output: [(50 29 0 -75) -75]
Test Case: 865 | Input/Output: [(-16 -20 -86 3) -86]
Test Case: 866 | Input/Output: [(63 52 -53 40) -53]
Test Case: 867 | Input/Output: [(96 -74 64 84) -74]
Test Case: 868 | Input/Output: [(-54 -57 86 67) -57]
Test Case: 869 | Input/Output: [(39 -47 97 84) -47]
Test Case: 870 | Input/Output: [(-49 -62 70 58) -62]
Test Case: 871 | Input/Output: [(38 29 -46 97) -46]
Test Case: 872 | Input/Output: [(91 -49 -41 99) -49]
Test Case: 873 | Input/Output: [(53 -77 9 23) -77]
Test Case: 874 | Input/Output: [(92 74 -87 -89) -89]
Test Case: 875 | Input/Output: [(-10 -96 52 -19) -96]
Test Case: 876 | Input/Output: [(6 85 -83 -42) -83]
Test Case: 877 | Input/Output: [(39 -17 -3 98) -17]
Test Case: 878 | Input/Output: [(12 -51 -52 77) -52]
Test Case: 879 | Input/Output: [(-83 -95 -18 7) -95]
Test Case: 880 | Input/Output: [(100 74 23 -80) -80]
Test Case: 881 | Input/Output: [(-14 -82 -30 62) -82]
Test Case: 882 | Input/Output: [(-40 -70 78 -96) -96]
Test Case: 883 | Input/Output: [(-76 -62 84 -86) -86]
Test Case: 884 | Input/Output: [(35 -38 2 58) -38]
Test Case: 885 | Input/Output: [(-32 67 39 -42) -42]
Test Case: 886 | Input/Output: [(-42 65 92 94) -42]
Test Case: 887 | Input/Output: [(-11 -47 4 19) -47]
Test Case: 888 | Input/Output: [(-90 32 -70 -83) -90]
Test Case: 889 | Input/Output: [(-47 6 77 14) -47]
Test Case: 890 | Input/Output: [(-76 -41 -51 -6) -76]
Test Case: 891 | Input/Output: [(68 59 26 -53) -53]
Test Case: 892 | Input/Output: [(57 -98 -68 -21) -98]
Test Case: 893 | Input/Output: [(-76 99 -60 75) -76]
Test Case: 894 | Input/Output: [(35 33 25 58) 25]
Test Case: 895 | Input/Output: [(-28 -93 97 -38) -93]
Test Case: 896 | Input/Output: [(63 -49 79 2) -49]
Test Case: 897 | Input/Output: [(-25 -85 -73 -34) -85]
Test Case: 898 | Input/Output: [(-92 54 56 35) -92]
Test Case: 899 | Input/Output: [(-84 38 72 -49) -84]
Test Case: 900 | Input/Output: [(-100 48 -49 67) -100]
Test Case: 901 | Input/Output: [(-88 61 -37 -4) -88]
Test Case: 902 | Input/Output: [(46 -67 -74 -29) -74]
Test Case: 903 | Input/Output: [(81 27 68 -27) -27]
Test Case: 904 | Input/Output: [(-85 -68 -100 81) -100]
Test Case: 905 | Input/Output: [(30 -34 -81 -71) -81]
Test Case: 906 | Input/Output: [(99 -58 42 79) -58]
Test Case: 907 | Input/Output: [(-94 42 54 89) -94]
Test Case: 908 | Input/Output: [(67 21 96 -77) -77]
Test Case: 909 | Input/Output: [(-37 -89 -14 -29) -89]
Test Case: 910 | Input/Output: [(81 -65 23 64) -65]
Test Case: 911 | Input/Output: [(-85 78 93 -14) -85]
Test Case: 912 | Input/Output: [(-29 -2 59 -11) -29]
Test Case: 913 | Input/Output: [(-95 -28 -8 -43) -95]
Test Case: 914 | Input/Output: [(22 -70 -67 11) -70]
Test Case: 915 | Input/Output: [(69 31 -95 -53) -95]
Test Case: 916 | Input/Output: [(-48 -87 -68 17) -87]
Test Case: 917 | Input/Output: [(53 42 67 -16) -16]
Test Case: 918 | Input/Output: [(-76 -93 40 31) -93]
Test Case: 919 | Input/Output: [(-8 -24 -62 -63) -63]
Test Case: 920 | Input/Output: [(-27 74 -73 94) -73]
Test Case: 921 | Input/Output: [(99 24 92 92) 24]
Test Case: 922 | Input/Output: [(0 -100 -15 -29) -100]
Test Case: 923 | Input/Output: [(80 -63 -98 -55) -98]
Test Case: 924 | Input/Output: [(37 50 -95 76) -95]
Test Case: 925 | Input/Output: [(43 -71 -55 14) -71]
Test Case: 926 | Input/Output: [(94 -17 86 81) -17]
Test Case: 927 | Input/Output: [(62 -1 12 64) -1]
Test Case: 928 | Input/Output: [(-72 31 29 -97) -97]
Test Case: 929 | Input/Output: [(63 54 9 55) 9]
Test Case: 930 | Input/Output: [(-48 -96 -11 -44) -96]
Test Case: 931 | Input/Output: [(-38 6 -31 18) -38]
Test Case: 932 | Input/Output: [(12 -12 -92 7) -92]
Test Case: 933 | Input/Output: [(-14 25 45 -18) -18]
Test Case: 934 | Input/Output: [(-66 -2 -21 -65) -66]
Test Case: 935 | Input/Output: [(-51 63 -48 23) -51]
Test Case: 936 | Input/Output: [(52 8 58 -28) -28]
Test Case: 937 | Input/Output: [(-96 2 66 -5) -96]
Test Case: 938 | Input/Output: [(-79 90 56 -24) -79]
Test Case: 939 | Input/Output: [(38 -97 -5 -63) -97]
Test Case: 940 | Input/Output: [(-14 -9 23 80) -14]
Test Case: 941 | Input/Output: [(-93 65 10 62) -93]
Test Case: 942 | Input/Output: [(75 29 -91 49) -91]
Test Case: 943 | Input/Output: [(-16 23 10 -23) -23]
Test Case: 944 | Input/Output: [(-53 -38 -4 -13) -53]
Test Case: 945 | Input/Output: [(-65 -86 -51 85) -86]
Test Case: 946 | Input/Output: [(-99 -57 -58 -30) -99]
Test Case: 947 | Input/Output: [(65 44 33 0) 0]
Test Case: 948 | Input/Output: [(23 -17 53 -76) -76]
Test Case: 949 | Input/Output: [(-43 14 -6 99) -43]
Test Case: 950 | Input/Output: [(76 57 22 7) 7]
Test Case: 951 | Input/Output: [(-2 95 -32 -54) -54]
Test Case: 952 | Input/Output: [(84 -77 51 -71) -77]
Test Case: 953 | Input/Output: [(-41 -71 -15 53) -71]
Test Case: 954 | Input/Output: [(48 -8 -40 31) -40]
Test Case: 955 | Input/Output: [(82 -30 4 83) -30]
Test Case: 956 | Input/Output: [(-12 32 82 62) -12]
Test Case: 957 | Input/Output: [(57 1 -96 -31) -96]
Test Case: 958 | Input/Output: [(99 60 52 69) 52]
Test Case: 959 | Input/Output: [(42 78 -79 -91) -91]
Test Case: 960 | Input/Output: [(-6 -32 65 70) -32]
Test Case: 961 | Input/Output: [(-44 0 18 -14) -44]
Test Case: 962 | Input/Output: [(-81 -65 -96 77) -96]
Test Case: 963 | Input/Output: [(48 -39 -1 -51) -51]
Test Case: 964 | Input/Output: [(12 -32 -10 -75) -75]
Test Case: 965 | Input/Output: [(-27 -35 85 25) -35]
Test Case: 966 | Input/Output: [(79 -33 1 35) -33]
Test Case: 967 | Input/Output: [(42 -83 -80 -13) -83]
Test Case: 968 | Input/Output: [(-77 77 91 -56) -77]
Test Case: 969 | Input/Output: [(31 95 -65 -40) -65]
Test Case: 970 | Input/Output: [(-97 13 -85 80) -97]
Test Case: 971 | Input/Output: [(-21 -76 -69 36) -76]
Test Case: 972 | Input/Output: [(19 64 48 -41) -41]
Test Case: 973 | Input/Output: [(-42 8 8 47) -42]
Test Case: 974 | Input/Output: [(-21 92 34 -71) -71]
Test Case: 975 | Input/Output: [(-95 63 -2 -21) -95]
Test Case: 976 | Input/Output: [(-56 18 57 36) -56]
Test Case: 977 | Input/Output: [(-26 92 82 -71) -71]
Test Case: 978 | Input/Output: [(20 16 -25 87) -25]
Test Case: 979 | Input/Output: [(-42 6 -33 81) -42]
Test Case: 980 | Input/Output: [(-74 16 11 -23) -74]
Test Case: 981 | Input/Output: [(-73 -81 55 89) -81]
Test Case: 982 | Input/Output: [(86 94 94 33) 33]
Test Case: 983 | Input/Output: [(94 -39 68 -94) -94]
Test Case: 984 | Input/Output: [(-59 83 -95 0) -95]
Test Case: 985 | Input/Output: [(-46 70 40 -92) -92]
Test Case: 986 | Input/Output: [(44 -83 61 -37) -83]
Test Case: 987 | Input/Output: [(48 24 96 72) 24]
Test Case: 988 | Input/Output: [(67 89 87 76) 67]
Test Case: 989 | Input/Output: [(-81 49 -32 41) -81]
Test Case: 990 | Input/Output: [(31 -57 41 -65) -65]
Test Case: 991 | Input/Output: [(75 10 3 41) 3]
Test Case: 992 | Input/Output: [(-34 5 33 63) -34]
Test Case: 993 | Input/Output: [(78 -55 89 -89) -89]
Test Case: 994 | Input/Output: [(20 -94 -48 12) -94]
Test Case: 995 | Input/Output: [(-44 39 -32 -75) -75]
Test Case: 996 | Input/Output: [(54 -23 2 77) -23]
Test Case: 997 | Input/Output: [(21 -80 -15 33) -80]
Test Case: 998 | Input/Output: [(-85 98 19 83) -85]
Test Case: 999 | Input/Output: [(58 59 0 27) 0]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 1 39 -126 118 37 6 -72 -89 57 -23 -51 -78 -13 20 59 98
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-87 -86 -87 -87] -87] [[-88 -61 -88 -88] -88] [[-55 18 18 18] -55] [[-51 0 -51 -51] -51] [[14 -42 14 14] -42] [[89 -12 89 89] -12] [[77 24 24 24] 24] [[-73 -73 -73 55] -73] [[15 15 15 2] 2] [[-6 -6 -6 -75] -75] [(1 1 1 1) 1] [(-99 -99 -99 -99) -99] [(19 19 19 19) 19] [(57 57 57 57) 57] [(-16 -16 -16 -16) -16] [(52 17 72 88) 17] [(33 38 84 30) 30] [(63 90 94 17) 17] [(72 43 16 28) 16] [(54 97 98 95) 54] [(39 60 68 85) 39] [(50 18 18 31) 18] [(38 55 40 9) 9] [(17 99 26 92) 17] [(22 76 69 51) 22] [(6 1 73 100) 1] [(73 19 83 79) 19] [(96 86 15 86) 15] [(29 58 39 64) 29] [(11 2 19 38) 2] [(87 90 56 86) 56] [(25 1 99 81) 1] [(37 6 50 75) 6] [(57 62 14 83) 14] [(17 81 65 32) 17] [(47 25 46 -32) -32] [(62 -78 -52 -99) -99] [(2 76 99 -70) -70] [(-17 -15 -38 82) -38] [(-75 80 -94 -89) -94] [(76 42 -82 100) -82] [(-53 -1 -68 -9) -68] [(73 -95 -60 35) -95] [(87 -5 -44 85) -44] [(81 6 -23 41) -23] [(75 13 63 -4) -4] [(-40 49 -26 36) -40] [(72 48 60 -55) -55] [(-27 -65 -79 74) -79] [(-38 81 9 86) -38] [(-10 -49 50 36) -49] [(-95 -19 53 -52) -95] [(-95 73 -14 51) -95] [(-100 -26 97 -52) -100] [(15 62 100 41) 15] [(56 -30 -79 -49) -79] [(-43 32 -94 70) -94] [(89 -36 -77 -86) -86] [(49 4 -67 -35) -67] [(-83 -30 -29 78) -83] [(-76 59 -1 -5) -76] [(-8 84 41 -30) -30] [(-61 -51 10 85) -61] [(-38 49 9 75) -38] [(-83 19 -65 -23) -83] [(0 -59 98 51) -59] [(-14 25 28 -33) -33] [(-36 7 66 -92) -92] [(-53 -14 37 37) -53] [(60 66 92 91) 60] [(27 -48 -33 28) -48] [(-31 84 -61 -10) -61] [(-57 89 91 30) -57] [(54 36 -76 -48) -76] [(-59 56 -15 81) -59] [(92 1 73 10) 1] [(-33 -4 -88 82) -88] [(9 -15 -36 6) -36] [(-26 -80 -80 -59) -80] [(72 67 -33 59) -33] [(-54 -50 23 -72) -72] [(41 -69 -16 -62) -69] [(-80 -14 94 -29) -80] [(75 94 73 -34) -34] [(-2 -84 68 -22) -84] [(95 -65 -31 -51) -65] [(-89 -67 -87 74) -89] [(-87 10 -20 74) -87] [(-84 35 55 3) -84] [(1 -44 78 85) -44] [(-55 52 -25 -71) -71] [(-35 74 29 -45) -45] [(-50 96 53 -92) -92] [(49 -45 -84 89) -84] [(91 -45 -29 -3) -45])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: -88                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: -42                 | Program output: 14                 
Correct output: -12                 | Program output: 89                 
Correct output: 24                  | Program output: 77                 
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 15                 
Correct output: -75                 | Program output: -6                 
Correct output: 1                   | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: 57                  | Program output: 57                 
Correct output: -16                 | Program output: -16                
Correct output: 17                  | Program output: 52                 
Correct output: 30                  | Program output: 33                 
Correct output: 17                  | Program output: 63                 
Correct output: 16                  | Program output: 72                 
Correct output: 54                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 50                 
Correct output: 9                   | Program output: 38                 
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 6                  
Correct output: 19                  | Program output: 73                 
Correct output: 15                  | Program output: 96                 
Correct output: 29                  | Program output: 29                 
Correct output: 2                   | Program output: 11                 
Correct output: 56                  | Program output: 87                 
Correct output: 1                   | Program output: 25                 
Correct output: 6                   | Program output: 37                 
Correct output: 14                  | Program output: 57                 
Correct output: 17                  | Program output: 17                 
Correct output: -32                 | Program output: 47                 
Correct output: -99                 | Program output: 62                 
Correct output: -70                 | Program output: 2                  
Correct output: -38                 | Program output: -17                
Correct output: -94                 | Program output: -75                
Correct output: -82                 | Program output: 76                 
Correct output: -68                 | Program output: -53                
Correct output: -95                 | Program output: 73                 
Correct output: -44                 | Program output: 87                 
Correct output: -23                 | Program output: 81                 
Correct output: -4                  | Program output: 75                 
Correct output: -40                 | Program output: -40                
Correct output: -55                 | Program output: 72                 
Correct output: -79                 | Program output: -27                
Correct output: -38                 | Program output: -38                
Correct output: -49                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: -79                 | Program output: 56                 
Correct output: -94                 | Program output: -43                
Correct output: -86                 | Program output: 89                 
Correct output: -67                 | Program output: 49                 
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -30                 | Program output: -8                 
Correct output: -61                 | Program output: -61                
Correct output: -38                 | Program output: -38                
Correct output: -83                 | Program output: -83                
Correct output: -59                 | Program output: 0                  
Correct output: -33                 | Program output: -14                
Correct output: -92                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: 60                  | Program output: 60                 
Correct output: -48                 | Program output: 27                 
Correct output: -61                 | Program output: -31                
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: 54                 
Correct output: -59                 | Program output: -59                
Correct output: 1                   | Program output: 92                 
Correct output: -88                 | Program output: -33                
Correct output: -36                 | Program output: 9                  
Correct output: -80                 | Program output: -26                
Correct output: -33                 | Program output: 72                 
Correct output: -72                 | Program output: -54                
Correct output: -69                 | Program output: 41                 
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: 75                 
Correct output: -84                 | Program output: -2                 
Correct output: -65                 | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: -44                 | Program output: 1                  
Correct output: -71                 | Program output: -55                
Correct output: -45                 | Program output: -35                
Correct output: -92                 | Program output: -50                
Correct output: -84                 | Program output: 49                 
Correct output: -45                 | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 2, :instruction tagged_927} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction tagged_255} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Lexicase best program: (integer_div integer_add integer_mult integer_div tag_boolean_477 exec_y_when_autoconstructing (exec_rot (exec_k_when_autoconstructing (integer_pop) (exec_do*times (integer_dec integer_min tagged_927)) exec_if (integer_yankdup in1 exec_dup (exec_while () integer_max integer_yank integer_lt exec_empty boolean_flush) print_integer boolean_yank boolean_frominteger integer_min boolean_shove) (exec_y_when_autoconstructing (integer_gte exec_do*count (integer_eq boolean_shove integer_div exec_flush) integer_lte tagged_255) exec_eq integer_min integer_dup boolean_yank)) () ()))
Lexicase best errors: [1 1 1 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 55
Percent parens: 0.255
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 2, :instruction tagged_927} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction tagged_255} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Zero cases best program: (integer_div integer_add integer_mult integer_div tag_boolean_477 exec_y_when_autoconstructing (exec_rot (exec_k_when_autoconstructing (integer_pop) (exec_do*times (integer_dec integer_min tagged_927)) exec_if (integer_yankdup in1 exec_dup (exec_while () integer_max integer_yank integer_lt exec_empty boolean_flush) print_integer boolean_yank boolean_frominteger integer_min boolean_shove) (exec_y_when_autoconstructing (integer_gte exec_do*count (integer_eq boolean_shove integer_div exec_flush) integer_lte tagged_255) exec_eq integer_min integer_dup boolean_yank)) () ()))
Zero cases best errors: [1 1 1 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 55
Percent parens: 0.255
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 5 2 1 2 7 1 2 1 3)
Population mean number of elite cases: 0.03
Count of perfect (error zero) individuals by case: (2 5 2 1 2 7 1 2 1 3)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 2, :instruction tagged_927} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction tagged_255} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Best program: (integer_div integer_add integer_mult integer_div tag_boolean_477 exec_y_when_autoconstructing (exec_rot (exec_k_when_autoconstructing (integer_pop) (exec_do*times (integer_dec integer_min tagged_927)) exec_if (integer_yankdup in1 exec_dup (exec_while () integer_max integer_yank integer_lt exec_empty boolean_flush) print_integer boolean_yank boolean_frominteger integer_min boolean_shove) (exec_y_when_autoconstructing (integer_gte exec_do*count (integer_eq boolean_shove integer_div exec_flush) integer_lte tagged_255) exec_eq integer_min integer_dup boolean_yank)) () ()))
Errors: [1 1 1 0 1 0 0 1 0 1]
Total: 6
Mean: 0.6
Genome size: 41
Size: 55
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 9.974
Median total errors in population: 10
Error averages by case: (0.998 0.995 0.998 0.999 0.998 0.993 0.999 0.998 0.999 0.997)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.663
Average program size in population (points): 71.415
Average percent parens in population: 0.284
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.3
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 500819
--- Timings ---
Current time: 1559314458831 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  4.1%
Reproduction:         0.9 seconds, 32.3%
Fitness Testing:      1.7 seconds, 63.5%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: -88                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: -42                 | Program output: 14                 
Correct output: -12                 | Program output: 89                 
Correct output: 24                  | Program output: 77                 
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 15                 
Correct output: -75                 | Program output: -6                 
Correct output: 1                   | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: 57                  | Program output: 57                 
Correct output: -16                 | Program output: -16                
Correct output: 17                  | Program output: 52                 
Correct output: 30                  | Program output: 33                 
Correct output: 17                  | Program output: 63                 
Correct output: 16                  | Program output: 72                 
Correct output: 54                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 50                 
Correct output: 9                   | Program output: 38                 
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 6                  
Correct output: 19                  | Program output: 73                 
Correct output: 15                  | Program output: 96                 
Correct output: 29                  | Program output: 29                 
Correct output: 2                   | Program output: 11                 
Correct output: 56                  | Program output: 87                 
Correct output: 1                   | Program output: 25                 
Correct output: 6                   | Program output: 37                 
Correct output: 14                  | Program output: 57                 
Correct output: 17                  | Program output: 17                 
Correct output: -32                 | Program output: 47                 
Correct output: -99                 | Program output: 62                 
Correct output: -70                 | Program output: 2                  
Correct output: -38                 | Program output: -17                
Correct output: -94                 | Program output: -75                
Correct output: -82                 | Program output: 76                 
Correct output: -68                 | Program output: -53                
Correct output: -95                 | Program output: 73                 
Correct output: -44                 | Program output: 87                 
Correct output: -23                 | Program output: 81                 
Correct output: -4                  | Program output: 75                 
Correct output: -40                 | Program output: -40                
Correct output: -55                 | Program output: 72                 
Correct output: -79                 | Program output: -27                
Correct output: -38                 | Program output: -38                
Correct output: -49                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: -79                 | Program output: 56                 
Correct output: -94                 | Program output: -43                
Correct output: -86                 | Program output: 89                 
Correct output: -67                 | Program output: 49                 
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -30                 | Program output: -8                 
Correct output: -61                 | Program output: -61                
Correct output: -38                 | Program output: -38                
Correct output: -83                 | Program output: -83                
Correct output: -59                 | Program output: 0                  
Correct output: -33                 | Program output: -14                
Correct output: -92                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: 60                  | Program output: 60                 
Correct output: -48                 | Program output: 27                 
Correct output: -61                 | Program output: -31                
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: 54                 
Correct output: -59                 | Program output: -59                
Correct output: 1                   | Program output: 92                 
Correct output: -88                 | Program output: -33                
Correct output: -36                 | Program output: 9                  
Correct output: -80                 | Program output: -26                
Correct output: -33                 | Program output: 72                 
Correct output: -72                 | Program output: -54                
Correct output: -69                 | Program output: 41                 
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: 75                 
Correct output: -84                 | Program output: -2                 
Correct output: -65                 | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: -44                 | Program output: 1                  
Correct output: -71                 | Program output: -55                
Correct output: -45                 | Program output: -35                
Correct output: -92                 | Program output: -50                
Correct output: -84                 | Program output: 49                 
Correct output: -45                 | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 2, :instruction tagged_927} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction tagged_255} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Lexicase best program: (integer_div integer_add integer_mult integer_div tag_boolean_477 exec_y_when_autoconstructing (exec_rot (exec_k_when_autoconstructing (integer_pop) (exec_do*times (integer_dec integer_min tagged_927)) exec_if (integer_yankdup in1 exec_dup (exec_while () integer_max integer_yank integer_lt exec_empty boolean_flush) print_integer boolean_yank boolean_frominteger integer_min boolean_shove) (exec_y_when_autoconstructing (integer_gte exec_do*count (integer_eq boolean_shove integer_div exec_flush) integer_lte tagged_255) exec_eq integer_min integer_dup boolean_yank)) () ()))
Lexicase best errors: [1 0 1 1 0 1 0 1 1 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 55
Percent parens: 0.255
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 2, :instruction tagged_927} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction tagged_255} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Zero cases best program: (integer_div integer_add integer_mult integer_div tag_boolean_477 exec_y_when_autoconstructing (exec_rot (exec_k_when_autoconstructing (integer_pop) (exec_do*times (integer_dec integer_min tagged_927)) exec_if (integer_yankdup in1 exec_dup (exec_while () integer_max integer_yank integer_lt exec_empty boolean_flush) print_integer boolean_yank boolean_frominteger integer_min boolean_shove) (exec_y_when_autoconstructing (integer_gte exec_do*count (integer_eq boolean_shove integer_div exec_flush) integer_lte tagged_255) exec_eq integer_min integer_dup boolean_yank)) () ()))
Zero cases best errors: [1 0 1 1 0 1 0 1 1 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 55
Percent parens: 0.255
--- Lexicase Population Statistics ---
Count of elite individuals by case: (194 308 209 209 309 375 309 166 194 194)
Population mean number of elite cases: 2.47
Count of perfect (error zero) individuals by case: (194 308 209 209 309 375 309 166 194 194)
Population mean number of perfect (error zero) cases: 2.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 2, :instruction tagged_927} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction tagged_255} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Best program: (integer_div integer_add integer_mult integer_div tag_boolean_477 exec_y_when_autoconstructing (exec_rot (exec_k_when_autoconstructing (integer_pop) (exec_do*times (integer_dec integer_min tagged_927)) exec_if (integer_yankdup in1 exec_dup (exec_while () integer_max integer_yank integer_lt exec_empty boolean_flush) print_integer boolean_yank boolean_frominteger integer_min boolean_shove) (exec_y_when_autoconstructing (integer_gte exec_do*count (integer_eq boolean_shove integer_div exec_flush) integer_lte tagged_255) exec_eq integer_min integer_dup boolean_yank)) () ()))
Errors: [1 0 1 1 0 1 0 1 1 1]
Total: 7
Mean: 0.7
Genome size: 41
Size: 55
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 7.533
Median total errors in population: 7
Error averages by case: (0.806 0.692 0.791 0.791 0.691 0.625 0.691 0.834 0.806 0.806)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.951
Average program size in population (points): 57.649
Average percent parens in population: 0.272
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.525
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 199
Genome diversity (% unique genomes):	 0.484
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 202
Syntactic diversity (% unique Push programs):	 0.477
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1036006
--- Timings ---
Current time: 1559314461408 milliseconds
Total Time:           5.3 seconds
Initialization:       0.1 seconds,  2.0%
Reproduction:         2.5 seconds, 46.5%
Fitness Testing:      2.3 seconds, 42.1%
Report:               0.5 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -87                 | Program output: -86                
Correct output: -88                 | Program output: -61                
Correct output: -55                 | Program output: 18                 
Correct output: -51                 | Program output: 0                  
Correct output: -42                 | Program output: -42                
Correct output: -12                 | Program output: -12                
Correct output: 24                  | Program output: 24                 
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 15                 
Correct output: -75                 | Program output: -6                 
Correct output: 1                   | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: 57                  | Program output: 57                 
Correct output: -16                 | Program output: -16                
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 38                 
Correct output: 17                  | Program output: 90                 
Correct output: 16                  | Program output: 43                 
Correct output: 54                  | Program output: 97                 
Correct output: 39                  | Program output: 60                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 55                 
Correct output: 17                  | Program output: 99                 
Correct output: 22                  | Program output: 76                 
Correct output: 1                   | Program output: 1                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 86                 
Correct output: 29                  | Program output: 58                 
Correct output: 2                   | Program output: 2                  
Correct output: 56                  | Program output: 90                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 14                  | Program output: 62                 
Correct output: 17                  | Program output: 81                 
Correct output: -32                 | Program output: 25                 
Correct output: -99                 | Program output: -78                
Correct output: -70                 | Program output: 76                 
Correct output: -38                 | Program output: -15                
Correct output: -94                 | Program output: 80                 
Correct output: -82                 | Program output: 42                 
Correct output: -68                 | Program output: -1                 
Correct output: -95                 | Program output: -95                
Correct output: -44                 | Program output: -5                 
Correct output: -23                 | Program output: 6                  
Correct output: -4                  | Program output: 13                 
Correct output: -40                 | Program output: 49                 
Correct output: -55                 | Program output: 48                 
Correct output: -79                 | Program output: -65                
Correct output: -38                 | Program output: 81                 
Correct output: -49                 | Program output: -49                
Correct output: -95                 | Program output: -19                
Correct output: -95                 | Program output: 73                 
Correct output: -100                | Program output: -26                
Correct output: 15                  | Program output: 62                 
Correct output: -79                 | Program output: -30                
Correct output: -94                 | Program output: 32                 
Correct output: -86                 | Program output: -36                
Correct output: -67                 | Program output: 4                  
Correct output: -83                 | Program output: -30                
Correct output: -76                 | Program output: 59                 
Correct output: -30                 | Program output: 84                 
Correct output: -61                 | Program output: -51                
Correct output: -38                 | Program output: 49                 
Correct output: -83                 | Program output: 19                 
Correct output: -59                 | Program output: -59                
Correct output: -33                 | Program output: 25                 
Correct output: -92                 | Program output: 7                  
Correct output: -53                 | Program output: -14                
Correct output: 60                  | Program output: 66                 
Correct output: -48                 | Program output: -48                
Correct output: -61                 | Program output: 84                 
Correct output: -57                 | Program output: 89                 
Correct output: -76                 | Program output: 36                 
Correct output: -59                 | Program output: 56                 
Correct output: 1                   | Program output: 1                  
Correct output: -88                 | Program output: -4                 
Correct output: -36                 | Program output: -15                
Correct output: -80                 | Program output: -80                
Correct output: -33                 | Program output: 67                 
Correct output: -72                 | Program output: -50                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -14                
Correct output: -34                 | Program output: 94                 
Correct output: -84                 | Program output: -84                
Correct output: -65                 | Program output: -65                
Correct output: -89                 | Program output: -67                
Correct output: -87                 | Program output: 10                 
Correct output: -84                 | Program output: 35                 
Correct output: -44                 | Program output: -44                
Correct output: -71                 | Program output: 52                 
Correct output: -45                 | Program output: 74                 
Correct output: -92                 | Program output: 96                 
Correct output: -84                 | Program output: -45                
Correct output: -45                 | Program output: -45                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction -76} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction tagged_59} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 1, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Lexicase best program: (exec_swap (exec_rot (integer_flush boolean_shove -76 integer_flush boolean_shove integer_yankdup boolean_invert_first_then_and) (in2 boolean_or print_integer) (boolean_not) boolean_or exec_do*while (integer_max) exec_while (integer_flush in1 exec_s_when_autoconstructing (integer_dup exec_yankdup exec_k_when_autoconstructing () (integer_lt exec_if (in3 boolean_xor exec_when () exec_stackdepth boolean_dup_times boolean_shove boolean_stackdepth integer_gte) (integer_mult in1) integer_rot integer_add exec_empty exec_do*range (integer_mod) exec_y_when_autoconstructing () integer_dec tagged_59) exec_shove (boolean_eq integer_lte exec_shove (integer_fromboolean integer_gt exec_y_when_autoconstructing () integer_lt exec_y (exec_yankdup in4 integer_flush print_exec () integer_yank exec_do*while (exec_empty boolean_pop exec_dup_items) exec_do*count (boolean_shove integer_lte))))) () ())) ())
Lexicase best errors: [0 0 1 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 89
Percent parens: 0.281
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction -76} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_mod} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction tagged_59} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 1, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Zero cases best program: (exec_swap (exec_rot (integer_flush boolean_shove -76 integer_flush boolean_shove integer_yankdup boolean_invert_first_then_and) (in2 boolean_or print_integer) (boolean_not) boolean_or exec_do*while (integer_max) exec_while (integer_flush in1 exec_s_when_autoconstructing (integer_dup exec_yankdup exec_k_when_autoconstructing () (integer_lt exec_if (in3 boolean_xor exec_when () exec_stackdepth boolean_dup_times boolean_shove boolean_stackdepth integer_gte) (integer_mult in1) integer_rot integer_add exec_empty exec_do*range (integer_mod) exec_y_when_autoconstructing () integer_dec tagged_59) exec_shove (boolean_eq integer_lte exec_shove (integer_fromboolean integer_gt exec_y_when_autoconstructing () integer_lt exec_y (exec_yankdup in4 integer_flush print_exec () integer_yank exec_do*while (exec_empty boolean_pop exec_dup_items) exec_do*count (boolean_shove integer_lte))))) () ())) ())
Zero cases best errors: [0 0 1 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 89
Percent parens: 0.281
--- Lexicase Population Statistics ---
Count of elite individuals by case: (115 115 258 115 350 115 872 263 258 757)
Population mean number of elite cases: 3.22
Count of perfect (error zero) individuals by case: (115 115 258 115 350 115 872 263 258 757)
Population mean number of perfect (error zero) cases: 3.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction 79} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2})
Best program: (integer_gte 79 integer_gt boolean_not integer_dec integer_mod integer_min exec_k (integer_yank) (exec_y_when_autoconstructing (exec_do*range (exec_y_when_autoconstructing (integer_lt) integer_mult integer_add boolean_empty exec_when () integer_dec exec_eq) boolean_swap boolean_or) exec_flush exec_shove () exec_while (integer_gt boolean_invert_first_then_and boolean_yankdup integer_max integer_gt) integer_yank) boolean_swap exec_noop in2 boolean_invert_second_then_and print_integer in1 exec_y_when_autoconstructing () exec_flush in2)
Errors: [0 0 1 0 0 0 0 1 1 1]
Total: 4
Mean: 0.4
Genome size: 39
Size: 49
Percent parens: 0.204
--- Population Statistics ---
Average total errors in population: 6.782
Median total errors in population: 7
Error averages by case: (0.885 0.885 0.742 0.885 0.65 0.885 0.128 0.737 0.742 0.243)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.926
Average program size in population (points): 56.711
Average percent parens in population: 0.278
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.985
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 114
Genome diversity (% unique genomes):	 0.63
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 117
Syntactic diversity (% unique Push programs):	 0.62
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1573763
--- Timings ---
Current time: 1559314464831 milliseconds
Total Time:           8.9 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         5.1 seconds, 57.8%
Fitness Testing:      2.8 seconds, 31.2%
Report:               0.9 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: -88                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: -42                 | Program output: 14                 
Correct output: -12                 | Program output: 89                 
Correct output: 24                  | Program output: 77                 
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 15                 
Correct output: -75                 | Program output: -6                 
Correct output: 1                   | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: 57                  | Program output: 57                 
Correct output: -16                 | Program output: -16                
Correct output: 17                  | Program output: 52                 
Correct output: 30                  | Program output: 33                 
Correct output: 17                  | Program output: 63                 
Correct output: 16                  | Program output: 72                 
Correct output: 54                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 50                 
Correct output: 9                   | Program output: 38                 
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 6                  
Correct output: 19                  | Program output: 73                 
Correct output: 15                  | Program output: 96                 
Correct output: 29                  | Program output: 29                 
Correct output: 2                   | Program output: 11                 
Correct output: 56                  | Program output: 87                 
Correct output: 1                   | Program output: 25                 
Correct output: 6                   | Program output: 37                 
Correct output: 14                  | Program output: 57                 
Correct output: 17                  | Program output: 17                 
Correct output: -32                 | Program output: 47                 
Correct output: -99                 | Program output: 62                 
Correct output: -70                 | Program output: 2                  
Correct output: -38                 | Program output: -17                
Correct output: -94                 | Program output: -75                
Correct output: -82                 | Program output: 76                 
Correct output: -68                 | Program output: -53                
Correct output: -95                 | Program output: 73                 
Correct output: -44                 | Program output: 87                 
Correct output: -23                 | Program output: 81                 
Correct output: -4                  | Program output: 75                 
Correct output: -40                 | Program output: -40                
Correct output: -55                 | Program output: 72                 
Correct output: -79                 | Program output: -27                
Correct output: -38                 | Program output: -38                
Correct output: -49                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: -79                 | Program output: 56                 
Correct output: -94                 | Program output: -43                
Correct output: -86                 | Program output: 89                 
Correct output: -67                 | Program output: 49                 
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -30                 | Program output: -8                 
Correct output: -61                 | Program output: -61                
Correct output: -38                 | Program output: -38                
Correct output: -83                 | Program output: -83                
Correct output: -59                 | Program output: 0                  
Correct output: -33                 | Program output: -14                
Correct output: -92                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: 60                  | Program output: 60                 
Correct output: -48                 | Program output: 27                 
Correct output: -61                 | Program output: -31                
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: 54                 
Correct output: -59                 | Program output: -59                
Correct output: 1                   | Program output: 92                 
Correct output: -88                 | Program output: -33                
Correct output: -36                 | Program output: 9                  
Correct output: -80                 | Program output: -26                
Correct output: -33                 | Program output: 72                 
Correct output: -72                 | Program output: -54                
Correct output: -69                 | Program output: 41                 
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: 75                 
Correct output: -84                 | Program output: -2                 
Correct output: -65                 | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: -44                 | Program output: 1                  
Correct output: -71                 | Program output: -55                
Correct output: -45                 | Program output: -35                
Correct output: -92                 | Program output: -50                
Correct output: -84                 | Program output: 49                 
Correct output: -45                 | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 2, :instruction tagged_927} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Lexicase best program: (integer_div integer_add integer_mult integer_div tag_boolean_477 exec_y_when_autoconstructing (exec_rot (exec_k_when_autoconstructing (integer_pop) (exec_do*times (integer_dec integer_min) tagged_927)) (exec_if (integer_yankdup in1 exec_dup (exec_while () integer_max integer_yank integer_lt exec_empty) boolean_flush) (print_integer boolean_yank boolean_frominteger integer_min boolean_shove exec_y_when_autoconstructing (integer_gte exec_do*count (exec_flush) integer_lte) integer_min) integer_dup boolean_yank) ()))
Lexicase best errors: [0 0 0 1 1 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 50
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 2, :instruction tagged_927} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 1, :instruction exec_flush} {:close 1, :instruction integer_lte} {:close 1, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Zero cases best program: (integer_div integer_add integer_mult integer_div tag_boolean_477 exec_y_when_autoconstructing (exec_rot (exec_k_when_autoconstructing (integer_pop) (exec_do*times (integer_dec integer_min) tagged_927)) (exec_if (integer_yankdup in1 exec_dup (exec_while () integer_max integer_yank integer_lt exec_empty) boolean_flush) (print_integer boolean_yank boolean_frominteger integer_min boolean_shove exec_y_when_autoconstructing (integer_gte exec_do*count (exec_flush) integer_lte) integer_min) integer_dup boolean_yank) ()))
Zero cases best errors: [0 0 0 1 1 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 50
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (108 110 109 462 38 109 108 500 253 38)
Population mean number of elite cases: 1.84
Count of perfect (error zero) individuals by case: (108 110 109 462 38 109 108 500 253 38)
Population mean number of perfect (error zero) cases: 1.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction 79} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 2, :instruction tagged_927} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction tagged_255} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Best program: (integer_gte 79 integer_gt boolean_not integer_dec integer_mult integer_div tag_boolean_477 exec_dup (exec_rot (exec_k_when_autoconstructing (integer_pop) (exec_do*times (integer_dec integer_min tagged_927)) exec_if (integer_yankdup in1 exec_dup (exec_while () integer_max integer_yank integer_lt integer_eq boolean_flush) print_integer boolean_yank boolean_frominteger integer_min boolean_shove) (exec_y_when_autoconstructing (integer_gte exec_do*count (integer_eq boolean_shove integer_div exec_flush) integer_lte tagged_255) exec_eq integer_min integer_dup boolean_yank)) () ()))
Errors: [0 0 0 1 1 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 44
Size: 58
Percent parens: 0.241
--- Population Statistics ---
Average total errors in population: 8.165
Median total errors in population: 8
Error averages by case: (0.892 0.89 0.891 0.538 0.962 0.891 0.892 0.5 0.747 0.962)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.276
Average program size in population (points): 59.477
Average percent parens in population: 0.271
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.41975
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 51
Genome diversity (% unique genomes):	 0.666
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.658
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2016943
--- Timings ---
Current time: 1559314467928 milliseconds
Total Time:          11.9 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         7.5 seconds, 62.9%
Fitness Testing:      3.2 seconds, 26.9%
Report:               1.1 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: -88                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: -42                 | Program output: 14                 
Correct output: -12                 | Program output: 89                 
Correct output: 24                  | Program output: 77                 
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 15                 
Correct output: -75                 | Program output: -6                 
Correct output: 1                   | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: 57                  | Program output: 57                 
Correct output: -16                 | Program output: -16                
Correct output: 17                  | Program output: 52                 
Correct output: 30                  | Program output: 33                 
Correct output: 17                  | Program output: 63                 
Correct output: 16                  | Program output: 72                 
Correct output: 54                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 50                 
Correct output: 9                   | Program output: 38                 
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 6                  
Correct output: 19                  | Program output: 73                 
Correct output: 15                  | Program output: 96                 
Correct output: 29                  | Program output: 29                 
Correct output: 2                   | Program output: 11                 
Correct output: 56                  | Program output: 87                 
Correct output: 1                   | Program output: 25                 
Correct output: 6                   | Program output: 37                 
Correct output: 14                  | Program output: 57                 
Correct output: 17                  | Program output: 17                 
Correct output: -32                 | Program output: 47                 
Correct output: -99                 | Program output: 62                 
Correct output: -70                 | Program output: 2                  
Correct output: -38                 | Program output: -17                
Correct output: -94                 | Program output: -75                
Correct output: -82                 | Program output: 76                 
Correct output: -68                 | Program output: -53                
Correct output: -95                 | Program output: 73                 
Correct output: -44                 | Program output: 87                 
Correct output: -23                 | Program output: 81                 
Correct output: -4                  | Program output: 75                 
Correct output: -40                 | Program output: -40                
Correct output: -55                 | Program output: 72                 
Correct output: -79                 | Program output: -27                
Correct output: -38                 | Program output: -38                
Correct output: -49                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: -79                 | Program output: 56                 
Correct output: -94                 | Program output: -43                
Correct output: -86                 | Program output: 89                 
Correct output: -67                 | Program output: 49                 
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -30                 | Program output: -8                 
Correct output: -61                 | Program output: -61                
Correct output: -38                 | Program output: -38                
Correct output: -83                 | Program output: -83                
Correct output: -59                 | Program output: 0                  
Correct output: -33                 | Program output: -14                
Correct output: -92                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: 60                  | Program output: 60                 
Correct output: -48                 | Program output: 27                 
Correct output: -61                 | Program output: -31                
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: 54                 
Correct output: -59                 | Program output: -59                
Correct output: 1                   | Program output: 92                 
Correct output: -88                 | Program output: -33                
Correct output: -36                 | Program output: 9                  
Correct output: -80                 | Program output: -26                
Correct output: -33                 | Program output: 72                 
Correct output: -72                 | Program output: -54                
Correct output: -69                 | Program output: 41                 
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: 75                 
Correct output: -84                 | Program output: -2                 
Correct output: -65                 | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: -44                 | Program output: 1                  
Correct output: -71                 | Program output: -55                
Correct output: -45                 | Program output: -35                
Correct output: -92                 | Program output: -50                
Correct output: -84                 | Program output: 49                 
Correct output: -45                 | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction 79} {:close 0, :instruction tag_boolean_477} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 2, :instruction tagged_927} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction tagged_255} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Lexicase best program: (integer_rot 79 tag_boolean_477 exec_y_when_autoconstructing (boolean_dup integer_inc integer_pop) exec_do*times (integer_dec integer_min tagged_927) boolean_frominteger integer_yankdup in1 exec_dup (exec_while () integer_max integer_yank integer_lt exec_empty boolean_flush) print_integer boolean_yank boolean_frominteger integer_min boolean_shove exec_y_when_autoconstructing (integer_gte integer_lte tagged_255) exec_eq integer_min integer_dup boolean_yank)
Lexicase best errors: [0 0 0 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 40
Percent parens: 0.150
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction 79} {:close 0, :instruction tag_boolean_477} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 2, :instruction tagged_927} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_lte} {:close 1, :instruction tagged_255} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Zero cases best program: (integer_rot 79 tag_boolean_477 exec_y_when_autoconstructing (boolean_dup integer_inc integer_pop) exec_do*times (integer_dec integer_min tagged_927) boolean_frominteger integer_yankdup in1 exec_dup (exec_while () integer_max integer_yank integer_lt exec_empty boolean_flush) print_integer boolean_yank boolean_frominteger integer_min boolean_shove exec_y_when_autoconstructing (integer_gte integer_lte tagged_255) exec_eq integer_min integer_dup boolean_yank)
Zero cases best errors: [0 0 0 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 40
Percent parens: 0.150
--- Lexicase Population Statistics ---
Count of elite individuals by case: (848 465 464 116 467 237 465 467 116 464)
Population mean number of elite cases: 4.11
Count of perfect (error zero) individuals by case: (848 465 464 116 467 237 465 467 116 464)
Population mean number of perfect (error zero) cases: 4.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 2, :instruction tagged_927} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction tagged_255} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Best program: (integer_div integer_add integer_mult integer_div tag_boolean_477 exec_y_when_autoconstructing (exec_rot (exec_k_when_autoconstructing (integer_pop) (exec_do*times (integer_dec integer_min tagged_927)) exec_if (integer_yankdup in1 exec_dup (exec_while () integer_max integer_yank integer_lt exec_empty boolean_flush) print_integer boolean_yank boolean_frominteger integer_min boolean_shove) (exec_y_when_autoconstructing (integer_gte integer_dup integer_eq boolean_shove integer_div exec_flush) integer_lte tagged_255) exec_eq integer_min integer_dup boolean_yank) () ()))
Errors: [0 0 0 1 0 1 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 41
Size: 54
Percent parens: 0.241
--- Population Statistics ---
Average total errors in population: 5.891
Median total errors in population: 7
Error averages by case: (0.152 0.535 0.536 0.884 0.533 0.763 0.535 0.533 0.884 0.536)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.108
Average program size in population (points): 57.27
Average percent parens in population: 0.263
Minimum age in population: 4.0
Maximum age in population: 7.5
Average age in population: 5.910125
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 80
Genome diversity (% unique genomes):	 0.675
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.666
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2487632
--- Timings ---
Current time: 1559314470754 milliseconds
Total Time:          14.7 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         9.5 seconds, 64.9%
Fitness Testing:      3.6 seconds, 24.3%
Report:               1.5 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -87                 | Program output: -86                
Correct output: -88                 | Program output: -61                
Correct output: -55                 | Program output: 18                 
Correct output: -51                 | Program output: 0                  
Correct output: -42                 | Program output: -42                
Correct output: -12                 | Program output: -12                
Correct output: 24                  | Program output: 24                 
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 15                 
Correct output: -75                 | Program output: -6                 
Correct output: 1                   | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: 57                  | Program output: 57                 
Correct output: -16                 | Program output: -16                
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 38                 
Correct output: 17                  | Program output: 90                 
Correct output: 16                  | Program output: 43                 
Correct output: 54                  | Program output: 97                 
Correct output: 39                  | Program output: 60                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 55                 
Correct output: 17                  | Program output: 99                 
Correct output: 22                  | Program output: 76                 
Correct output: 1                   | Program output: 1                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 86                 
Correct output: 29                  | Program output: 58                 
Correct output: 2                   | Program output: 2                  
Correct output: 56                  | Program output: 90                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 14                  | Program output: 62                 
Correct output: 17                  | Program output: 81                 
Correct output: -32                 | Program output: 25                 
Correct output: -99                 | Program output: -78                
Correct output: -70                 | Program output: 76                 
Correct output: -38                 | Program output: -15                
Correct output: -94                 | Program output: 80                 
Correct output: -82                 | Program output: 42                 
Correct output: -68                 | Program output: -1                 
Correct output: -95                 | Program output: -95                
Correct output: -44                 | Program output: -5                 
Correct output: -23                 | Program output: 6                  
Correct output: -4                  | Program output: 13                 
Correct output: -40                 | Program output: 49                 
Correct output: -55                 | Program output: 48                 
Correct output: -79                 | Program output: -65                
Correct output: -38                 | Program output: 81                 
Correct output: -49                 | Program output: -49                
Correct output: -95                 | Program output: -19                
Correct output: -95                 | Program output: 73                 
Correct output: -100                | Program output: -26                
Correct output: 15                  | Program output: 62                 
Correct output: -79                 | Program output: -30                
Correct output: -94                 | Program output: 32                 
Correct output: -86                 | Program output: -36                
Correct output: -67                 | Program output: 4                  
Correct output: -83                 | Program output: -30                
Correct output: -76                 | Program output: 59                 
Correct output: -30                 | Program output: 84                 
Correct output: -61                 | Program output: -51                
Correct output: -38                 | Program output: 49                 
Correct output: -83                 | Program output: 19                 
Correct output: -59                 | Program output: -59                
Correct output: -33                 | Program output: 25                 
Correct output: -92                 | Program output: 7                  
Correct output: -53                 | Program output: -14                
Correct output: 60                  | Program output: 66                 
Correct output: -48                 | Program output: -48                
Correct output: -61                 | Program output: 84                 
Correct output: -57                 | Program output: 89                 
Correct output: -76                 | Program output: 36                 
Correct output: -59                 | Program output: 56                 
Correct output: 1                   | Program output: 1                  
Correct output: -88                 | Program output: -4                 
Correct output: -36                 | Program output: -15                
Correct output: -80                 | Program output: -80                
Correct output: -33                 | Program output: 67                 
Correct output: -72                 | Program output: -50                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -14                
Correct output: -34                 | Program output: 94                 
Correct output: -84                 | Program output: -84                
Correct output: -65                 | Program output: -65                
Correct output: -89                 | Program output: -67                
Correct output: -87                 | Program output: 10                 
Correct output: -84                 | Program output: 35                 
Correct output: -44                 | Program output: -44                
Correct output: -71                 | Program output: 52                 
Correct output: -45                 | Program output: 74                 
Correct output: -92                 | Program output: 96                 
Correct output: -84                 | Program output: -45                
Correct output: -45                 | Program output: -45                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction 79} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2})
Lexicase best program: (integer_gte 79 integer_gt boolean_not integer_dec integer_mod integer_min exec_k (integer_yank) (exec_y_when_autoconstructing (exec_do*range (exec_y_when_autoconstructing (integer_lt) integer_mult integer_add) boolean_empty exec_when () integer_dec exec_eq) boolean_swap boolean_or exec_flush exec_shove () exec_while (integer_gt boolean_invert_first_then_and boolean_yankdup integer_max) integer_gt) integer_yank boolean_swap exec_noop in2 boolean_invert_second_then_and print_integer in1 exec_y_when_autoconstructing (exec_flush in2))
Lexicase best errors: [0 1 0 1 0 1 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 49
Percent parens: 0.204
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction 79} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_shove} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yank} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2})
Zero cases best program: (integer_gte 79 integer_gt boolean_not integer_dec integer_mod integer_min exec_k (integer_yank) (exec_y_when_autoconstructing (exec_do*range (exec_y_when_autoconstructing (integer_lt) integer_mult integer_add) boolean_empty exec_when () integer_dec exec_eq) boolean_swap boolean_or exec_flush exec_shove () exec_while (integer_gt boolean_invert_first_then_and boolean_yankdup integer_max) integer_gt) integer_yank boolean_swap exec_noop in2 boolean_invert_second_then_and print_integer in1 exec_y_when_autoconstructing (exec_flush in2))
Zero cases best errors: [0 1 0 1 0 1 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 49
Percent parens: 0.204
--- Lexicase Population Statistics ---
Count of elite individuals by case: (179 2 179 2 179 108 108 580 869 2)
Population mean number of elite cases: 2.21
Count of perfect (error zero) individuals by case: (179 2 179 2 179 108 108 580 869 2)
Population mean number of perfect (error zero) cases: 2.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction -76} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_max} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction tagged_255} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2})
Best program: (exec_swap (exec_rot (integer_flush boolean_shove -76 integer_flush boolean_shove integer_yankdup boolean_invert_first_then_and) (in2 boolean_or print_integer) (boolean_not) boolean_or exec_do*while (integer_max) exec_while (integer_flush integer_max exec_s_when_autoconstructing (integer_dup exec_yankdup exec_k_when_autoconstructing () (integer_lt exec_if (in3 boolean_xor exec_when () exec_stackdepth boolean_dup_times boolean_shove boolean_frominteger integer_min boolean_shove) (exec_y_when_autoconstructing (integer_gte exec_do*count (integer_eq boolean_shove integer_div exec_flush) integer_lte tagged_255) exec_eq integer_min print_integer in1 exec_y_when_autoconstructing () exec_flush in2))) () ())) ())
Errors: [0 1 0 1 0 1 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 50
Size: 69
Percent parens: 0.275
--- Population Statistics ---
Average total errors in population: 7.792
Median total errors in population: 8
Error averages by case: (0.821 0.998 0.821 0.998 0.821 0.892 0.892 0.42 0.131 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.394
Average program size in population (points): 57.179
Average percent parens in population: 0.256
Minimum age in population: 5.0
Maximum age in population: 9.375
Average age in population: 7.420125
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 42
Genome diversity (% unique genomes):	 0.751
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.737
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 2880493
--- Timings ---
Current time: 1559314473478 milliseconds
Total Time:          17.5 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.7 seconds, 66.7%
Fitness Testing:      3.9 seconds, 22.3%
Report:               1.8 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -87                 | Program output: -86                
Correct output: -88                 | Program output: -61                
Correct output: -55                 | Program output: 18                 
Correct output: -51                 | Program output: 0                  
Correct output: -42                 | Program output: -42                
Correct output: -12                 | Program output: -12                
Correct output: 24                  | Program output: 24                 
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 15                 
Correct output: -75                 | Program output: -6                 
Correct output: 1                   | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: 57                  | Program output: 57                 
Correct output: -16                 | Program output: -16                
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 38                 
Correct output: 17                  | Program output: 90                 
Correct output: 16                  | Program output: 43                 
Correct output: 54                  | Program output: 97                 
Correct output: 39                  | Program output: 60                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 55                 
Correct output: 17                  | Program output: 99                 
Correct output: 22                  | Program output: 76                 
Correct output: 1                   | Program output: 1                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 86                 
Correct output: 29                  | Program output: 58                 
Correct output: 2                   | Program output: 2                  
Correct output: 56                  | Program output: 90                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 14                  | Program output: 62                 
Correct output: 17                  | Program output: 81                 
Correct output: -32                 | Program output: 25                 
Correct output: -99                 | Program output: -78                
Correct output: -70                 | Program output: 76                 
Correct output: -38                 | Program output: -15                
Correct output: -94                 | Program output: 80                 
Correct output: -82                 | Program output: 42                 
Correct output: -68                 | Program output: -1                 
Correct output: -95                 | Program output: -95                
Correct output: -44                 | Program output: -5                 
Correct output: -23                 | Program output: 6                  
Correct output: -4                  | Program output: 13                 
Correct output: -40                 | Program output: 49                 
Correct output: -55                 | Program output: 48                 
Correct output: -79                 | Program output: -65                
Correct output: -38                 | Program output: 81                 
Correct output: -49                 | Program output: -49                
Correct output: -95                 | Program output: -19                
Correct output: -95                 | Program output: 73                 
Correct output: -100                | Program output: -26                
Correct output: 15                  | Program output: 62                 
Correct output: -79                 | Program output: -30                
Correct output: -94                 | Program output: 32                 
Correct output: -86                 | Program output: -36                
Correct output: -67                 | Program output: 4                  
Correct output: -83                 | Program output: -30                
Correct output: -76                 | Program output: 59                 
Correct output: -30                 | Program output: 84                 
Correct output: -61                 | Program output: -51                
Correct output: -38                 | Program output: 49                 
Correct output: -83                 | Program output: 19                 
Correct output: -59                 | Program output: -59                
Correct output: -33                 | Program output: 25                 
Correct output: -92                 | Program output: 7                  
Correct output: -53                 | Program output: -14                
Correct output: 60                  | Program output: 66                 
Correct output: -48                 | Program output: -48                
Correct output: -61                 | Program output: 84                 
Correct output: -57                 | Program output: 89                 
Correct output: -76                 | Program output: 36                 
Correct output: -59                 | Program output: 56                 
Correct output: 1                   | Program output: 1                  
Correct output: -88                 | Program output: -4                 
Correct output: -36                 | Program output: -15                
Correct output: -80                 | Program output: -80                
Correct output: -33                 | Program output: 67                 
Correct output: -72                 | Program output: -50                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -14                
Correct output: -34                 | Program output: 94                 
Correct output: -84                 | Program output: -84                
Correct output: -65                 | Program output: -65                
Correct output: -89                 | Program output: -67                
Correct output: -87                 | Program output: 10                 
Correct output: -84                 | Program output: 35                 
Correct output: -44                 | Program output: -44                
Correct output: -71                 | Program output: 52                 
Correct output: -45                 | Program output: 74                 
Correct output: -92                 | Program output: 96                 
Correct output: -84                 | Program output: -45                
Correct output: -45                 | Program output: -45                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction -76} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction tagged_255} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Lexicase best program: (exec_swap (exec_rot (integer_flush integer_lt -76 integer_flush boolean_shove integer_yankdup boolean_invert_first_then_and) (in2 boolean_or print_integer) (boolean_not) boolean_or exec_do*while (integer_max) exec_while (integer_flush in1 exec_s_when_autoconstructing (integer_dup exec_yankdup exec_k_when_autoconstructing () (integer_lt exec_if (exec_stackdepth boolean_dup_times exec_pop (exec_empty boolean_flush) print_integer boolean_yank in4 integer_min boolean_shove) (exec_y_when_autoconstructing (integer_gte exec_do*count (integer_eq boolean_shove integer_div exec_flush) integer_lte tagged_255) exec_eq exec_swap (integer_dup boolean_yank) ()))) () ())) ())
Lexicase best errors: [0 1 1 0 1 1 1 0 1 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 68
Percent parens: 0.294
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction -76} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction tagged_255} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Zero cases best program: (exec_swap (exec_rot (integer_flush integer_lt -76 integer_flush boolean_shove integer_yankdup boolean_invert_first_then_and) (in2 boolean_or print_integer) (boolean_not) boolean_or exec_do*while (integer_max) exec_while (integer_flush in1 exec_s_when_autoconstructing (integer_dup exec_yankdup exec_k_when_autoconstructing () (integer_lt exec_if (exec_stackdepth boolean_dup_times exec_pop (exec_empty boolean_flush) print_integer boolean_yank in4 integer_min boolean_shove) (exec_y_when_autoconstructing (integer_gte exec_do*count (integer_eq boolean_shove integer_div exec_flush) integer_lte tagged_255) exec_eq exec_swap (integer_dup boolean_yank) ()))) () ())) ())
Zero cases best errors: [0 1 1 0 1 1 1 0 1 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 68
Percent parens: 0.294
--- Lexicase Population Statistics ---
Count of elite individuals by case: (304 283 178 304 95 95 95 304 178 283)
Population mean number of elite cases: 2.12
Count of perfect (error zero) individuals by case: (304 283 178 304 95 95 95 304 178 283)
Population mean number of perfect (error zero) cases: 2.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction -76} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 1, :instruction tagged_255} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Best program: (exec_swap (exec_rot (boolean_dup_times boolean_shove -76 integer_flush boolean_shove integer_yankdup boolean_invert_first_then_and) (in2 boolean_or print_integer) (boolean_not) boolean_or exec_do*while (integer_max) exec_while (integer_flush in1 exec_s_when_autoconstructing (integer_dup exec_yankdup exec_k_when_autoconstructing () (integer_lt exec_if (in3 boolean_xor exec_when () exec_stackdepth boolean_dup_times boolean_shove boolean_stackdepth exec_when () integer_mult in1) (integer_rot integer_lte tagged_255) exec_eq integer_min integer_dup boolean_yank)) () ())) ())
Errors: [0 1 1 0 1 1 1 0 1 1]
Total: 7
Mean: 0.7
Genome size: 42
Size: 59
Percent parens: 0.288
--- Population Statistics ---
Average total errors in population: 7.881
Median total errors in population: 8
Error averages by case: (0.696 0.717 0.822 0.696 0.905 0.905 0.905 0.696 0.822 0.717)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.514
Average program size in population (points): 50.444
Average percent parens in population: 0.225
Minimum age in population: 6.0
Maximum age in population: 11.0
Average age in population: 9.07725
Median age in population: 9.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 102
Genome diversity (% unique genomes):	 0.663
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 102
Syntactic diversity (% unique Push programs):	 0.647
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3190057
--- Timings ---
Current time: 1559314476076 milliseconds
Total Time:          20.2 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.8 seconds, 68.4%
Fitness Testing:      4.2 seconds, 20.8%
Report:               2.1 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -87                 | Program output: -86                
Correct output: -88                 | Program output: -61                
Correct output: -55                 | Program output: 18                 
Correct output: -51                 | Program output: 0                  
Correct output: -42                 | Program output: -42                
Correct output: -12                 | Program output: -12                
Correct output: 24                  | Program output: 24                 
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 15                 
Correct output: -75                 | Program output: -6                 
Correct output: 1                   | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: 57                  | Program output: 57                 
Correct output: -16                 | Program output: -16                
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 38                 
Correct output: 17                  | Program output: 90                 
Correct output: 16                  | Program output: 43                 
Correct output: 54                  | Program output: 97                 
Correct output: 39                  | Program output: 60                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 55                 
Correct output: 17                  | Program output: 99                 
Correct output: 22                  | Program output: 76                 
Correct output: 1                   | Program output: 1                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 86                 
Correct output: 29                  | Program output: 58                 
Correct output: 2                   | Program output: 2                  
Correct output: 56                  | Program output: 90                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 14                  | Program output: 62                 
Correct output: 17                  | Program output: 81                 
Correct output: -32                 | Program output: 25                 
Correct output: -99                 | Program output: -78                
Correct output: -70                 | Program output: 76                 
Correct output: -38                 | Program output: -15                
Correct output: -94                 | Program output: 80                 
Correct output: -82                 | Program output: 42                 
Correct output: -68                 | Program output: -1                 
Correct output: -95                 | Program output: -95                
Correct output: -44                 | Program output: -5                 
Correct output: -23                 | Program output: 6                  
Correct output: -4                  | Program output: 13                 
Correct output: -40                 | Program output: 49                 
Correct output: -55                 | Program output: 48                 
Correct output: -79                 | Program output: -65                
Correct output: -38                 | Program output: 81                 
Correct output: -49                 | Program output: -49                
Correct output: -95                 | Program output: -19                
Correct output: -95                 | Program output: 73                 
Correct output: -100                | Program output: -26                
Correct output: 15                  | Program output: 62                 
Correct output: -79                 | Program output: -30                
Correct output: -94                 | Program output: 32                 
Correct output: -86                 | Program output: -36                
Correct output: -67                 | Program output: 4                  
Correct output: -83                 | Program output: -30                
Correct output: -76                 | Program output: 59                 
Correct output: -30                 | Program output: 84                 
Correct output: -61                 | Program output: -51                
Correct output: -38                 | Program output: 49                 
Correct output: -83                 | Program output: 19                 
Correct output: -59                 | Program output: -59                
Correct output: -33                 | Program output: 25                 
Correct output: -92                 | Program output: 7                  
Correct output: -53                 | Program output: -14                
Correct output: 60                  | Program output: 66                 
Correct output: -48                 | Program output: -48                
Correct output: -61                 | Program output: 84                 
Correct output: -57                 | Program output: 89                 
Correct output: -76                 | Program output: 36                 
Correct output: -59                 | Program output: 56                 
Correct output: 1                   | Program output: 1                  
Correct output: -88                 | Program output: -4                 
Correct output: -36                 | Program output: -15                
Correct output: -80                 | Program output: -80                
Correct output: -33                 | Program output: 67                 
Correct output: -72                 | Program output: -50                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -14                
Correct output: -34                 | Program output: 94                 
Correct output: -84                 | Program output: -84                
Correct output: -65                 | Program output: -65                
Correct output: -89                 | Program output: -67                
Correct output: -87                 | Program output: 10                 
Correct output: -84                 | Program output: 35                 
Correct output: -44                 | Program output: -44                
Correct output: -71                 | Program output: 52                 
Correct output: -45                 | Program output: 74                 
Correct output: -92                 | Program output: 96                 
Correct output: -84                 | Program output: -45                
Correct output: -45                 | Program output: -45                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction -76} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction tagged_59} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 1, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_dup_items})
Lexicase best program: (exec_swap (exec_rot (integer_flush boolean_shove -76 integer_flush boolean_empty integer_yankdup boolean_invert_first_then_and) (in2 boolean_or print_integer) (boolean_not) boolean_or exec_do*while (integer_max) exec_while (integer_flush in1 exec_s_when_autoconstructing (integer_dup integer_shove exec_k_when_autoconstructing () (integer_lt exec_if (in3 boolean_xor exec_when () exec_stackdepth boolean_dup_times boolean_shove boolean_stackdepth integer_gte) (integer_mult in1) integer_rot integer_add exec_empty exec_do*range (boolean_stackdepth) integer_gte) integer_mult in1) (integer_rot integer_add exec_empty exec_do*range (integer_lt) exec_y_when_autoconstructing () integer_dec tagged_59) (exec_shove (boolean_eq integer_lte exec_yank integer_fromboolean integer_gt exec_y_when_autoconstructing () integer_lt) exec_y (exec_yankdup in4 integer_flush print_exec () integer_yank exec_do*while (exec_empty boolean_pop exec_dup_items))))) ())
Lexicase best errors: [0 1 0 0 1 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 93
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction -76} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_lt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction tagged_59} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 1, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_dup_items})
Zero cases best program: (exec_swap (exec_rot (integer_flush boolean_shove -76 integer_flush boolean_empty integer_yankdup boolean_invert_first_then_and) (in2 boolean_or print_integer) (boolean_not) boolean_or exec_do*while (integer_max) exec_while (integer_flush in1 exec_s_when_autoconstructing (integer_dup integer_shove exec_k_when_autoconstructing () (integer_lt exec_if (in3 boolean_xor exec_when () exec_stackdepth boolean_dup_times boolean_shove boolean_stackdepth integer_gte) (integer_mult in1) integer_rot integer_add exec_empty exec_do*range (boolean_stackdepth) integer_gte) integer_mult in1) (integer_rot integer_add exec_empty exec_do*range (integer_lt) exec_y_when_autoconstructing () integer_dec tagged_59) (exec_shove (boolean_eq integer_lte exec_yank integer_fromboolean integer_gt exec_y_when_autoconstructing () integer_lt) exec_y (exec_yankdup in4 integer_flush print_exec () integer_yank exec_do*while (exec_empty boolean_pop exec_dup_items))))) ())
Zero cases best errors: [0 1 0 0 1 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 93
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (693 159 266 267 178 178 159 267 267 266)
Population mean number of elite cases: 2.70
Count of perfect (error zero) individuals by case: (693 159 266 267 178 178 159 267 267 266)
Population mean number of perfect (error zero) cases: 2.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction -76} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_when} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 1, :instruction integer_yank})
Best program: (exec_swap (exec_rot (integer_flush boolean_shove -76 integer_flush boolean_shove integer_yankdup boolean_invert_first_then_and) (in2 boolean_or print_integer) (boolean_not) boolean_or exec_do*while (integer_max) exec_while (integer_flush in1 exec_s_when_autoconstructing (integer_dup exec_yankdup exec_k_when_autoconstructing () (integer_lt exec_if (in3 boolean_xor exec_when () exec_s_when_autoconstructing (boolean_pop) (integer_yank) ()) ())) () ())) ())
Errors: [0 1 0 0 1 1 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 31
Size: 50
Percent parens: 0.380
--- Population Statistics ---
Average total errors in population: 7.3
Median total errors in population: 8
Error averages by case: (0.307 0.841 0.734 0.733 0.822 0.822 0.841 0.733 0.733 0.734)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.969
Average program size in population (points): 51.53
Average percent parens in population: 0.236
Minimum age in population: 7.5
Maximum age in population: 12.5625
Average age in population: 10.49834375
Median age in population: 10.5625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 57
Genome diversity (% unique genomes):	 0.735
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.714
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 3521000
--- Timings ---
Current time: 1559314478919 milliseconds
Total Time:          23.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        16.1 seconds, 70.0%
Fitness Testing:      4.5 seconds, 19.6%
Report:               2.3 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 632
Test mean error for best: 0.63200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: -88                
Correct output: -55                 | Program output: 18                 
Correct output: -51                 | Program output: -51                
Correct output: -42                 | Program output: 14                 
Correct output: -12                 | Program output: 89                 
Correct output: 24                  | Program output: 24                 
Correct output: -73                 | Program output: 55                 
Correct output: 2                   | Program output: 2                  
Correct output: -75                 | Program output: -75                
Correct output: 1                   | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: 57                  | Program output: 57                 
Correct output: -16                 | Program output: -16                
Correct output: 17                  | Program output: 88                 
Correct output: 30                  | Program output: 30                 
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 28                 
Correct output: 54                  | Program output: 95                 
Correct output: 39                  | Program output: 85                 
Correct output: 18                  | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 17                  | Program output: 92                 
Correct output: 22                  | Program output: 51                 
Correct output: 1                   | Program output: 100                
Correct output: 19                  | Program output: 79                 
Correct output: 15                  | Program output: 86                 
Correct output: 29                  | Program output: 64                 
Correct output: 2                   | Program output: 38                 
Correct output: 56                  | Program output: 86                 
Correct output: 1                   | Program output: 81                 
Correct output: 6                   | Program output: 75                 
Correct output: 14                  | Program output: 83                 
Correct output: 17                  | Program output: 32                 
Correct output: -32                 | Program output: -32                
Correct output: -99                 | Program output: -99                
Correct output: -70                 | Program output: -70                
Correct output: -38                 | Program output: 82                 
Correct output: -94                 | Program output: -89                
Correct output: -82                 | Program output: 100                
Correct output: -68                 | Program output: -9                 
Correct output: -95                 | Program output: 35                 
Correct output: -44                 | Program output: 85                 
Correct output: -23                 | Program output: 41                 
Correct output: -4                  | Program output: -4                 
Correct output: -40                 | Program output: 36                 
Correct output: -55                 | Program output: -55                
Correct output: -79                 | Program output: 74                 
Correct output: -38                 | Program output: 86                 
Correct output: -49                 | Program output: 36                 
Correct output: -95                 | Program output: -52                
Correct output: -95                 | Program output: 51                 
Correct output: -100                | Program output: -52                
Correct output: 15                  | Program output: 41                 
Correct output: -79                 | Program output: -49                
Correct output: -94                 | Program output: 70                 
Correct output: -86                 | Program output: -86                
Correct output: -67                 | Program output: -35                
Correct output: -83                 | Program output: 78                 
Correct output: -76                 | Program output: -5                 
Correct output: -30                 | Program output: -30                
Correct output: -61                 | Program output: 85                 
Correct output: -38                 | Program output: 75                 
Correct output: -83                 | Program output: -23                
Correct output: -59                 | Program output: 51                 
Correct output: -33                 | Program output: -33                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: 37                 
Correct output: 60                  | Program output: 91                 
Correct output: -48                 | Program output: 28                 
Correct output: -61                 | Program output: -10                
Correct output: -57                 | Program output: 30                 
Correct output: -76                 | Program output: -48                
Correct output: -59                 | Program output: 81                 
Correct output: 1                   | Program output: 10                 
Correct output: -88                 | Program output: 82                 
Correct output: -36                 | Program output: 6                  
Correct output: -80                 | Program output: -59                
Correct output: -33                 | Program output: 59                 
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -62                
Correct output: -80                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -22                
Correct output: -65                 | Program output: -51                
Correct output: -89                 | Program output: 74                 
Correct output: -87                 | Program output: 74                 
Correct output: -84                 | Program output: 3                  
Correct output: -44                 | Program output: 85                 
Correct output: -71                 | Program output: -71                
Correct output: -45                 | Program output: -45                
Correct output: -92                 | Program output: -92                
Correct output: -84                 | Program output: 89                 
Correct output: -45                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_897} {:close 0, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction tagged_255} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 1, :instruction tagged_255} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Lexicase best program: (integer_pop tag_boolean_897 exec_pop (in1) in4 integer_div integer_add integer_mult integer_div tag_boolean_477 exec_empty boolean_flush print_integer boolean_yank boolean_frominteger integer_min boolean_shove exec_y_when_autoconstructing (integer_gte exec_do*count (integer_eq boolean_shove integer_eq boolean_shove integer_div exec_flush) integer_lte tagged_255) exec_eq integer_min tagged_255 exec_eq integer_min integer_dup boolean_yank)
Lexicase best errors: [0 0 0 0 1 1 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 39
Percent parens: 0.103
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 0, :instruction tag_boolean_897} {:close 0, :instruction exec_pop} {:close 1, :instruction in1} {:close 0, :instruction in4} {:close 0, :instruction integer_div} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction tagged_255} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 1, :instruction tagged_255} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Zero cases best program: (integer_pop tag_boolean_897 exec_pop (in1) in4 integer_div integer_add integer_mult integer_div tag_boolean_477 exec_empty boolean_flush print_integer boolean_yank boolean_frominteger integer_min boolean_shove exec_y_when_autoconstructing (integer_gte exec_do*count (integer_eq boolean_shove integer_eq boolean_shove integer_div exec_flush) integer_lte tagged_255) exec_eq integer_min tagged_255 exec_eq integer_min integer_dup boolean_yank)
Zero cases best errors: [0 0 0 0 1 1 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 39
Percent parens: 0.103
--- Lexicase Population Statistics ---
Count of elite individuals by case: (882 179 179 179 178 102 423 460 882 178)
Population mean number of elite cases: 3.64
Count of perfect (error zero) individuals by case: (882 179 179 179 178 102 423 460 882 178)
Population mean number of perfect (error zero) cases: 3.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Best program: (exec_swap (exec_rot (integer_flush boolean_shove integer_inc integer_flush boolean_shove integer_yankdup boolean_invert_first_then_and) (in4 integer_add) (integer_mult integer_div tag_boolean_477 boolean_flush) print_integer boolean_yank boolean_frominteger integer_min exec_do*count (integer_eq boolean_shove integer_mod integer_dup boolean_yank)) ())
Errors: [0 0 0 0 1 1 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 25
Size: 32
Percent parens: 0.219
--- Population Statistics ---
Average total errors in population: 6.358
Median total errors in population: 7
Error averages by case: (0.118 0.821 0.821 0.821 0.822 0.898 0.577 0.54 0.118 0.822)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.124
Average program size in population (points): 52.803
Average percent parens in population: 0.231
Minimum age in population: 9.0
Maximum age in population: 13.8828125
Average age in population: 11.9600390625
Median age in population: 12.0625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 47
Genome diversity (% unique genomes):	 0.787
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.766
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 3814770
--- Timings ---
Current time: 1559314481806 milliseconds
Total Time:          25.8 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.5 seconds, 71.4%
Fitness Testing:      4.8 seconds, 18.6%
Report:               2.5 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -87                 | Program output: -86                
Correct output: -88                 | Program output: -61                
Correct output: -55                 | Program output: 18                 
Correct output: -51                 | Program output: 0                  
Correct output: -42                 | Program output: -42                
Correct output: -12                 | Program output: -12                
Correct output: 24                  | Program output: 24                 
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 15                 
Correct output: -75                 | Program output: -6                 
Correct output: 1                   | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: 57                  | Program output: 57                 
Correct output: -16                 | Program output: -16                
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 38                 
Correct output: 17                  | Program output: 90                 
Correct output: 16                  | Program output: 43                 
Correct output: 54                  | Program output: 97                 
Correct output: 39                  | Program output: 60                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 55                 
Correct output: 17                  | Program output: 99                 
Correct output: 22                  | Program output: 76                 
Correct output: 1                   | Program output: 1                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 86                 
Correct output: 29                  | Program output: 58                 
Correct output: 2                   | Program output: 2                  
Correct output: 56                  | Program output: 90                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 14                  | Program output: 62                 
Correct output: 17                  | Program output: 81                 
Correct output: -32                 | Program output: 25                 
Correct output: -99                 | Program output: -78                
Correct output: -70                 | Program output: 76                 
Correct output: -38                 | Program output: -15                
Correct output: -94                 | Program output: 80                 
Correct output: -82                 | Program output: 42                 
Correct output: -68                 | Program output: -1                 
Correct output: -95                 | Program output: -95                
Correct output: -44                 | Program output: -5                 
Correct output: -23                 | Program output: 6                  
Correct output: -4                  | Program output: 13                 
Correct output: -40                 | Program output: 49                 
Correct output: -55                 | Program output: 48                 
Correct output: -79                 | Program output: -65                
Correct output: -38                 | Program output: 81                 
Correct output: -49                 | Program output: -49                
Correct output: -95                 | Program output: -19                
Correct output: -95                 | Program output: 73                 
Correct output: -100                | Program output: -26                
Correct output: 15                  | Program output: 62                 
Correct output: -79                 | Program output: -30                
Correct output: -94                 | Program output: 32                 
Correct output: -86                 | Program output: -36                
Correct output: -67                 | Program output: 4                  
Correct output: -83                 | Program output: -30                
Correct output: -76                 | Program output: 59                 
Correct output: -30                 | Program output: 84                 
Correct output: -61                 | Program output: -51                
Correct output: -38                 | Program output: 49                 
Correct output: -83                 | Program output: 19                 
Correct output: -59                 | Program output: -59                
Correct output: -33                 | Program output: 25                 
Correct output: -92                 | Program output: 7                  
Correct output: -53                 | Program output: -14                
Correct output: 60                  | Program output: 66                 
Correct output: -48                 | Program output: -48                
Correct output: -61                 | Program output: 84                 
Correct output: -57                 | Program output: 89                 
Correct output: -76                 | Program output: 36                 
Correct output: -59                 | Program output: 56                 
Correct output: 1                   | Program output: 1                  
Correct output: -88                 | Program output: -4                 
Correct output: -36                 | Program output: -15                
Correct output: -80                 | Program output: -80                
Correct output: -33                 | Program output: 67                 
Correct output: -72                 | Program output: -50                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -14                
Correct output: -34                 | Program output: 94                 
Correct output: -84                 | Program output: -84                
Correct output: -65                 | Program output: -65                
Correct output: -89                 | Program output: -67                
Correct output: -87                 | Program output: 10                 
Correct output: -84                 | Program output: 35                 
Correct output: -44                 | Program output: -44                
Correct output: -71                 | Program output: 52                 
Correct output: -45                 | Program output: 74                 
Correct output: -92                 | Program output: 96                 
Correct output: -84                 | Program output: -45                
Correct output: -45                 | Program output: -45                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction -76} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction tagged_59} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 1, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer})
Lexicase best program: (exec_swap (exec_rot (integer_flush integer_lt -76 integer_flush boolean_shove integer_yankdup boolean_invert_first_then_and) (in2 boolean_or print_integer boolean_not) (boolean_or exec_do*while (integer_max) exec_while (integer_flush in1 exec_s_when_autoconstructing (integer_dup exec_yankdup) (exec_yankdup exec_k_when_autoconstructing (boolean_and exec_if (in3 boolean_xor exec_when (exec_stackdepth boolean_dup_times boolean_shove boolean_stackdepth integer_gte) integer_mult in1) (integer_rot integer_add exec_empty exec_do*range (integer_mod exec_y_when_autoconstructing () integer_dec tagged_59) exec_shove (boolean_eq integer_lte exec_shove (integer_fromboolean integer_gt exec_y_when_autoconstructing () integer_lt exec_y (exec_yankdup) in4 integer_flush print_exec () integer_yank exec_do*while (print_integer))))) ()) ()))) ())
Lexicase best errors: [1 0 1 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 84
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_lt} {:close 0, :instruction -76} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_max} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dec} {:close 1, :instruction tagged_59} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 1, :instruction print_exec} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction print_integer})
Zero cases best program: (exec_swap (exec_rot (integer_flush integer_lt -76 integer_flush boolean_shove integer_yankdup boolean_invert_first_then_and) (in2 boolean_or print_integer boolean_not) (boolean_or exec_do*while (integer_max) exec_while (integer_flush in1 exec_s_when_autoconstructing (integer_dup exec_yankdup) (exec_yankdup exec_k_when_autoconstructing (boolean_and exec_if (in3 boolean_xor exec_when (exec_stackdepth boolean_dup_times boolean_shove boolean_stackdepth integer_gte) integer_mult in1) (integer_rot integer_add exec_empty exec_do*range (integer_mod exec_y_when_autoconstructing () integer_dec tagged_59) exec_shove (boolean_eq integer_lte exec_shove (integer_fromboolean integer_gt exec_y_when_autoconstructing () integer_lt exec_y (exec_yankdup) in4 integer_flush print_exec () integer_yank exec_do*while (print_integer))))) ()) ()))) ())
Zero cases best errors: [1 0 1 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 84
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (138 886 138 770 115 116 359 116 388 272)
Population mean number of elite cases: 3.30
Count of perfect (error zero) individuals by case: (138 886 138 770 115 116 359 116 388 272)
Population mean number of perfect (error zero) cases: 3.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction 79} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 0, :instruction exec_k} {:close 1, :instruction integer_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_flush} {:close 1, :instruction exec_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 1, :instruction integer_yank} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_noop} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_flush} {:close 0, :instruction in2})
Best program: (integer_gte 79 integer_gt boolean_not integer_dec integer_mod integer_min exec_k (integer_yank) (exec_y_when_autoconstructing (exec_do*range (exec_y_when_autoconstructing (integer_lt) integer_mult integer_add boolean_empty exec_when () integer_dec exec_eq) boolean_swap boolean_or) exec_flush exec_shove () boolean_stackdepth integer_gt boolean_invert_first_then_and boolean_yankdup integer_max integer_gt) integer_yank integer_rot exec_noop in2 boolean_invert_second_then_and print_integer boolean_dup_items exec_y_when_autoconstructing () exec_flush in2)
Errors: [1 0 1 1 0 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 39
Size: 48
Percent parens: 0.188
--- Population Statistics ---
Average total errors in population: 6.702
Median total errors in population: 6
Error averages by case: (0.862 0.114 0.862 0.23 0.885 0.884 0.641 0.884 0.612 0.728)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.506
Average program size in population (points): 46.988
Average percent parens in population: 0.212
Minimum age in population: 10.0
Maximum age in population: 15.49609375
Average age in population: 13.4971171875
Median age in population: 13.59375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 79
Genome diversity (% unique genomes):	 0.718
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 79
Syntactic diversity (% unique Push programs):	 0.694
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 4156220
--- Timings ---
Current time: 1559314484617 milliseconds
Total Time:          28.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        20.8 seconds, 72.2%
Fitness Testing:      5.1 seconds, 17.8%
Report:               2.8 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: -88                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: -42                 | Program output: 14                 
Correct output: -12                 | Program output: 89                 
Correct output: 24                  | Program output: 77                 
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 15                 
Correct output: -75                 | Program output: -6                 
Correct output: 1                   | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: 57                  | Program output: 57                 
Correct output: -16                 | Program output: -16                
Correct output: 17                  | Program output: 52                 
Correct output: 30                  | Program output: 33                 
Correct output: 17                  | Program output: 63                 
Correct output: 16                  | Program output: 72                 
Correct output: 54                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 50                 
Correct output: 9                   | Program output: 38                 
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 6                  
Correct output: 19                  | Program output: 73                 
Correct output: 15                  | Program output: 96                 
Correct output: 29                  | Program output: 29                 
Correct output: 2                   | Program output: 11                 
Correct output: 56                  | Program output: 87                 
Correct output: 1                   | Program output: 25                 
Correct output: 6                   | Program output: 37                 
Correct output: 14                  | Program output: 57                 
Correct output: 17                  | Program output: 17                 
Correct output: -32                 | Program output: 47                 
Correct output: -99                 | Program output: 62                 
Correct output: -70                 | Program output: 2                  
Correct output: -38                 | Program output: -17                
Correct output: -94                 | Program output: -75                
Correct output: -82                 | Program output: 76                 
Correct output: -68                 | Program output: -53                
Correct output: -95                 | Program output: 73                 
Correct output: -44                 | Program output: 87                 
Correct output: -23                 | Program output: 81                 
Correct output: -4                  | Program output: 75                 
Correct output: -40                 | Program output: -40                
Correct output: -55                 | Program output: 72                 
Correct output: -79                 | Program output: -27                
Correct output: -38                 | Program output: -38                
Correct output: -49                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: -79                 | Program output: 56                 
Correct output: -94                 | Program output: -43                
Correct output: -86                 | Program output: 89                 
Correct output: -67                 | Program output: 49                 
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -30                 | Program output: -8                 
Correct output: -61                 | Program output: -61                
Correct output: -38                 | Program output: -38                
Correct output: -83                 | Program output: -83                
Correct output: -59                 | Program output: 0                  
Correct output: -33                 | Program output: -14                
Correct output: -92                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: 60                  | Program output: 60                 
Correct output: -48                 | Program output: 27                 
Correct output: -61                 | Program output: -31                
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: 54                 
Correct output: -59                 | Program output: -59                
Correct output: 1                   | Program output: 92                 
Correct output: -88                 | Program output: -33                
Correct output: -36                 | Program output: 9                  
Correct output: -80                 | Program output: -26                
Correct output: -33                 | Program output: 72                 
Correct output: -72                 | Program output: -54                
Correct output: -69                 | Program output: 41                 
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: 75                 
Correct output: -84                 | Program output: -2                 
Correct output: -65                 | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: -44                 | Program output: 1                  
Correct output: -71                 | Program output: -55                
Correct output: -45                 | Program output: -35                
Correct output: -92                 | Program output: -50                
Correct output: -84                 | Program output: 49                 
Correct output: -45                 | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction 79} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 2, :instruction tagged_951} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction tagged_255} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_min} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 1, :instruction print_exec} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Lexicase best program: (integer_gte 79 integer_gt boolean_not integer_dec integer_mult integer_div tag_boolean_477 exec_dup (exec_rot () (exec_k_when_autoconstructing (integer_pop) (exec_do*times (integer_dec integer_min tagged_951)) exec_if (integer_yankdup in1 exec_dup (exec_while (integer_max integer_yank integer_lt integer_eq boolean_flush) print_integer boolean_yank boolean_frominteger) integer_min boolean_shove exec_y_when_autoconstructing (integer_gte exec_do*count (integer_eq) boolean_shove integer_div exec_flush) integer_lte tagged_255) (exec_eq integer_min) exec_shove (integer_fromboolean integer_gt exec_y_when_autoconstructing (integer_lt exec_y (exec_yankdup in4 integer_flush print_exec () integer_eq exec_do*while (exec_empty boolean_pop exec_dup_items) exec_do*count (boolean_shove integer_lte))))) ()))
Lexicase best errors: [1 0 0 0 0 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 80
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction 79} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 2, :instruction tagged_951} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction tagged_255} {:close 0, :instruction exec_eq} {:close 1, :instruction integer_min} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_flush} {:close 1, :instruction print_exec} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_lte})
Zero cases best program: (integer_gte 79 integer_gt boolean_not integer_dec integer_mult integer_div tag_boolean_477 exec_dup (exec_rot () (exec_k_when_autoconstructing (integer_pop) (exec_do*times (integer_dec integer_min tagged_951)) exec_if (integer_yankdup in1 exec_dup (exec_while (integer_max integer_yank integer_lt integer_eq boolean_flush) print_integer boolean_yank boolean_frominteger) integer_min boolean_shove exec_y_when_autoconstructing (integer_gte exec_do*count (integer_eq) boolean_shove integer_div exec_flush) integer_lte tagged_255) (exec_eq integer_min) exec_shove (integer_fromboolean integer_gt exec_y_when_autoconstructing (integer_lt exec_y (exec_yankdup in4 integer_flush print_exec () integer_eq exec_do*while (exec_empty boolean_pop exec_dup_items) exec_do*count (boolean_shove integer_lte))))) ()))
Zero cases best errors: [1 0 0 0 0 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 80
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (370 220 218 220 504 221 370 370 220 127)
Population mean number of elite cases: 2.84
Count of perfect (error zero) individuals by case: (370 220 218 220 504 221 370 370 220 127)
Population mean number of perfect (error zero) cases: 2.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 2, :instruction tagged_927} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction tagged_255} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup})
Best program: (integer_div integer_add integer_mult integer_div tag_boolean_477 exec_y_when_autoconstructing (exec_rot (exec_k_when_autoconstructing (integer_pop) (exec_do*times (integer_dec boolean_invert_first_then_and tagged_927)) exec_if (integer_yankdup in1 exec_dup (exec_while () integer_max integer_yank integer_lt exec_empty boolean_flush) print_integer exec_y_when_autoconstructing (integer_gte exec_do*count (integer_eq boolean_shove integer_eq boolean_shove integer_div exec_flush) integer_lte tagged_255) exec_eq integer_min integer_dup) ()) () ()))
Errors: [1 0 0 0 0 0 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 38
Size: 52
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 7.16
Median total errors in population: 7
Error averages by case: (0.63 0.78 0.782 0.78 0.496 0.779 0.63 0.63 0.78 0.873)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.314
Average program size in population (points): 53.626
Average percent parens in population: 0.241
Minimum age in population: 12.04296875
Maximum age in population: 16.85546875
Average age in population: 14.944228515625
Median age in population: 15.0302734375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 20
Genome diversity (% unique genomes):	 0.776
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.764
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 4486941
--- Timings ---
Current time: 1559314487485 milliseconds
Total Time:          31.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.0 seconds, 73.1%
Fitness Testing:      5.4 seconds, 17.2%
Report:               3.0 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: -88                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: -42                 | Program output: 14                 
Correct output: -12                 | Program output: 89                 
Correct output: 24                  | Program output: 77                 
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 15                 
Correct output: -75                 | Program output: -6                 
Correct output: 1                   | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: 57                  | Program output: 57                 
Correct output: -16                 | Program output: -16                
Correct output: 17                  | Program output: 52                 
Correct output: 30                  | Program output: 33                 
Correct output: 17                  | Program output: 63                 
Correct output: 16                  | Program output: 72                 
Correct output: 54                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 50                 
Correct output: 9                   | Program output: 38                 
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 6                  
Correct output: 19                  | Program output: 73                 
Correct output: 15                  | Program output: 96                 
Correct output: 29                  | Program output: 29                 
Correct output: 2                   | Program output: 11                 
Correct output: 56                  | Program output: 87                 
Correct output: 1                   | Program output: 25                 
Correct output: 6                   | Program output: 37                 
Correct output: 14                  | Program output: 57                 
Correct output: 17                  | Program output: 17                 
Correct output: -32                 | Program output: 47                 
Correct output: -99                 | Program output: 62                 
Correct output: -70                 | Program output: 2                  
Correct output: -38                 | Program output: -17                
Correct output: -94                 | Program output: -75                
Correct output: -82                 | Program output: 76                 
Correct output: -68                 | Program output: -53                
Correct output: -95                 | Program output: 73                 
Correct output: -44                 | Program output: 87                 
Correct output: -23                 | Program output: 81                 
Correct output: -4                  | Program output: 75                 
Correct output: -40                 | Program output: -40                
Correct output: -55                 | Program output: 72                 
Correct output: -79                 | Program output: -27                
Correct output: -38                 | Program output: -38                
Correct output: -49                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: -79                 | Program output: 56                 
Correct output: -94                 | Program output: -43                
Correct output: -86                 | Program output: 89                 
Correct output: -67                 | Program output: 49                 
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -30                 | Program output: -8                 
Correct output: -61                 | Program output: -61                
Correct output: -38                 | Program output: -38                
Correct output: -83                 | Program output: -83                
Correct output: -59                 | Program output: 0                  
Correct output: -33                 | Program output: -14                
Correct output: -92                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: 60                  | Program output: 60                 
Correct output: -48                 | Program output: 27                 
Correct output: -61                 | Program output: -31                
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: 54                 
Correct output: -59                 | Program output: -59                
Correct output: 1                   | Program output: 92                 
Correct output: -88                 | Program output: -33                
Correct output: -36                 | Program output: 9                  
Correct output: -80                 | Program output: -26                
Correct output: -33                 | Program output: 72                 
Correct output: -72                 | Program output: -54                
Correct output: -69                 | Program output: 41                 
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: 75                 
Correct output: -84                 | Program output: -2                 
Correct output: -65                 | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: -44                 | Program output: 1                  
Correct output: -71                 | Program output: -55                
Correct output: -45                 | Program output: -35                
Correct output: -92                 | Program output: -50                
Correct output: -84                 | Program output: 49                 
Correct output: -45                 | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_476} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 1, :instruction tagged_927} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor})
Lexicase best program: (integer_div integer_add integer_mult integer_div tag_boolean_476 exec_y_when_autoconstructing (exec_rot (exec_k_when_autoconstructing (integer_pop exec_do*times (integer_dec integer_min tagged_927) exec_if (boolean_invert_second_then_and in1 exec_dup (boolean_or print_integer) boolean_not) (exec_s_when_autoconstructing (exec_do*while (boolean_frominteger) exec_while (integer_flush in1 exec_s_when_autoconstructing (integer_dup exec_yankdup exec_k_when_autoconstructing () (integer_lt exec_if (in3 boolean_xor exec_when () exec_stackdepth boolean_dup_times boolean_shove) (exec_k_when_autoconstructing () (integer_lt exec_if (in3 boolean_xor) ())))) () ())) () ())) ()) () ()))
Lexicase best errors: [0 1 0 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 71
Percent parens: 0.394
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_476} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 1, :instruction tagged_927} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 1, :instruction print_integer} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*while} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction exec_while} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_when} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction boolean_xor})
Zero cases best program: (integer_div integer_add integer_mult integer_div tag_boolean_476 exec_y_when_autoconstructing (exec_rot (exec_k_when_autoconstructing (integer_pop exec_do*times (integer_dec integer_min tagged_927) exec_if (boolean_invert_second_then_and in1 exec_dup (boolean_or print_integer) boolean_not) (exec_s_when_autoconstructing (exec_do*while (boolean_frominteger) exec_while (integer_flush in1 exec_s_when_autoconstructing (integer_dup exec_yankdup exec_k_when_autoconstructing () (integer_lt exec_if (in3 boolean_xor exec_when () exec_stackdepth boolean_dup_times boolean_shove) (exec_k_when_autoconstructing () (integer_lt exec_if (in3 boolean_xor) ())))) () ())) () ())) ()) () ()))
Zero cases best errors: [0 1 0 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 71
Percent parens: 0.394
--- Lexicase Population Statistics ---
Count of elite individuals by case: (506 1000 507 879 877 507 271 270 1000 507)
Population mean number of elite cases: 6.32
Count of perfect (error zero) individuals by case: (506 0 507 879 877 507 271 270 0 507)
Population mean number of perfect (error zero) cases: 4.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 2, :instruction tagged_927} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction tagged_255} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Best program: (integer_div integer_inc integer_mult integer_div tag_boolean_477 exec_y_when_autoconstructing (exec_rot (exec_k_when_autoconstructing (integer_pop) (exec_do*times (integer_dec integer_min tagged_927)) exec_if (integer_yankdup in1 integer_eq exec_while () integer_max boolean_invert_first_then_and integer_lt exec_do*range (boolean_flush) integer_yank integer_eq exec_empty boolean_flush) (print_integer boolean_yank exec_rot (boolean_shove integer_div exec_flush) (integer_lte tagged_255) (exec_eq integer_min integer_dup boolean_yank))) () ()))
Errors: [0 1 0 0 0 0 1 1 1 0]
Total: 4
Mean: 0.4
Genome size: 39
Size: 54
Percent parens: 0.278
--- Population Statistics ---
Average total errors in population: 5.676
Median total errors in population: 4
Error averages by case: (0.494 1.0 0.493 0.121 0.123 0.493 0.729 0.73 1.0 0.493)
Error minima by case: (0 1 0 0 0 0 0 0 1 0)
Average genome size in population (length): 40.001
Average program size in population (points): 53.99
Average percent parens in population: 0.254
Minimum age in population: 13.234375
Maximum age in population: 18.515625
Average age in population: 16.422498046875
Median age in population: 16.53125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.755
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.747
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 4838716
--- Timings ---
Current time: 1559314490407 milliseconds
Total Time:          34.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.3 seconds, 73.5%
Fitness Testing:      5.7 seconds, 16.7%
Report:               3.3 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: -88                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: -42                 | Program output: 14                 
Correct output: -12                 | Program output: 89                 
Correct output: 24                  | Program output: 77                 
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 15                 
Correct output: -75                 | Program output: -6                 
Correct output: 1                   | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: 57                  | Program output: 57                 
Correct output: -16                 | Program output: -16                
Correct output: 17                  | Program output: 52                 
Correct output: 30                  | Program output: 33                 
Correct output: 17                  | Program output: 63                 
Correct output: 16                  | Program output: 72                 
Correct output: 54                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 50                 
Correct output: 9                   | Program output: 38                 
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 6                  
Correct output: 19                  | Program output: 73                 
Correct output: 15                  | Program output: 96                 
Correct output: 29                  | Program output: 29                 
Correct output: 2                   | Program output: 11                 
Correct output: 56                  | Program output: 87                 
Correct output: 1                   | Program output: 25                 
Correct output: 6                   | Program output: 37                 
Correct output: 14                  | Program output: 57                 
Correct output: 17                  | Program output: 17                 
Correct output: -32                 | Program output: 47                 
Correct output: -99                 | Program output: 62                 
Correct output: -70                 | Program output: 2                  
Correct output: -38                 | Program output: -17                
Correct output: -94                 | Program output: -75                
Correct output: -82                 | Program output: 76                 
Correct output: -68                 | Program output: -53                
Correct output: -95                 | Program output: 73                 
Correct output: -44                 | Program output: 87                 
Correct output: -23                 | Program output: 81                 
Correct output: -4                  | Program output: 75                 
Correct output: -40                 | Program output: -40                
Correct output: -55                 | Program output: 72                 
Correct output: -79                 | Program output: -27                
Correct output: -38                 | Program output: -38                
Correct output: -49                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: -79                 | Program output: 56                 
Correct output: -94                 | Program output: -43                
Correct output: -86                 | Program output: 89                 
Correct output: -67                 | Program output: 49                 
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -30                 | Program output: -8                 
Correct output: -61                 | Program output: -61                
Correct output: -38                 | Program output: -38                
Correct output: -83                 | Program output: -83                
Correct output: -59                 | Program output: 0                  
Correct output: -33                 | Program output: -14                
Correct output: -92                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: 60                  | Program output: 60                 
Correct output: -48                 | Program output: 27                 
Correct output: -61                 | Program output: -31                
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: 54                 
Correct output: -59                 | Program output: -59                
Correct output: 1                   | Program output: 92                 
Correct output: -88                 | Program output: -33                
Correct output: -36                 | Program output: 9                  
Correct output: -80                 | Program output: -26                
Correct output: -33                 | Program output: 72                 
Correct output: -72                 | Program output: -54                
Correct output: -69                 | Program output: 41                 
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: 75                 
Correct output: -84                 | Program output: -2                 
Correct output: -65                 | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: -44                 | Program output: 1                  
Correct output: -71                 | Program output: -55                
Correct output: -45                 | Program output: -35                
Correct output: -92                 | Program output: -50                
Correct output: -84                 | Program output: 49                 
Correct output: -45                 | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction -76} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction tagged_927} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y} {:close 1, :instruction integer_lte} {:close 1, :instruction tagged_255} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Lexicase best program: (exec_swap () (exec_rot (integer_flush boolean_shove -76 integer_flush boolean_shove integer_yankdup integer_min tagged_927) (exec_if (integer_yankdup in1 exec_dup (exec_while () integer_max integer_yank integer_lt exec_empty boolean_flush print_integer boolean_yank boolean_flush) print_integer) (boolean_yank exec_yankdup integer_min boolean_shove) exec_k_when_autoconstructing (integer_yankdup exec_do*count (integer_eq boolean_shove integer_div exec_y () integer_lte) tagged_255) (exec_eq integer_min integer_dup boolean_yank)) ()))
Lexicase best errors: [0 1 1 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 55
Percent parens: 0.255
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction -76} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction tagged_927} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 1, :instruction exec_y} {:close 1, :instruction integer_lte} {:close 1, :instruction tagged_255} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Zero cases best program: (exec_swap () (exec_rot (integer_flush boolean_shove -76 integer_flush boolean_shove integer_yankdup integer_min tagged_927) (exec_if (integer_yankdup in1 exec_dup (exec_while () integer_max integer_yank integer_lt exec_empty boolean_flush print_integer boolean_yank boolean_flush) print_integer) (boolean_yank exec_yankdup integer_min boolean_shove) exec_k_when_autoconstructing (integer_yankdup exec_do*count (integer_eq boolean_shove integer_div exec_y () integer_lte) tagged_255) (exec_eq integer_min integer_dup boolean_yank)) ()))
Zero cases best errors: [0 1 1 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 55
Percent parens: 0.255
--- Lexicase Population Statistics ---
Count of elite individuals by case: (605 1 296 1 605 297 605 1000 605 904)
Population mean number of elite cases: 4.92
Count of perfect (error zero) individuals by case: (605 1 296 1 605 297 605 0 605 904)
Population mean number of perfect (error zero) cases: 3.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 1, :instruction tagged_927} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction tag_boolean_477} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 2, :instruction tagged_927} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*range} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte})
Best program: (exec_swap (exec_rot (integer_flush boolean_shove integer_inc integer_flush boolean_shove integer_min tagged_927) (exec_if (integer_yankdup in1 tag_boolean_477 exec_y_when_autoconstructing (exec_rot (exec_k_when_autoconstructing (integer_pop) (exec_do*times (integer_dec integer_min tagged_927)) exec_if (integer_yankdup in1 exec_dup (exec_while () integer_max integer_yank integer_lt exec_empty boolean_flush) print_integer boolean_yank boolean_frominteger integer_min boolean_shove) (exec_y_when_autoconstructing (integer_gte exec_do*count (print_integer boolean_yank boolean_frominteger exec_do*range (boolean_shove) exec_y_when_autoconstructing (integer_gte))))) () ())) ()) ()) ())
Errors: [0 1 1 1 0 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 46
Size: 69
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 6.081
Median total errors in population: 5
Error averages by case: (0.395 0.999 0.704 0.999 0.395 0.703 0.395 1.0 0.395 0.096)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 40.524
Average program size in population (points): 55.456
Average percent parens in population: 0.267
Minimum age in population: 14.234375
Maximum age in population: 20.08203125
Average age in population: 17.86333251953125
Median age in population: 17.93115234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.799
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.793
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 5210126
--- Timings ---
Current time: 1559314493123 milliseconds
Total Time:          37.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        27.3 seconds, 73.6%
Fitness Testing:      6.1 seconds, 16.4%
Report:               3.6 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: -88                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: -42                 | Program output: 14                 
Correct output: -12                 | Program output: 89                 
Correct output: 24                  | Program output: 77                 
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 15                 
Correct output: -75                 | Program output: -6                 
Correct output: 1                   | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: 57                  | Program output: 57                 
Correct output: -16                 | Program output: -16                
Correct output: 17                  | Program output: 52                 
Correct output: 30                  | Program output: 33                 
Correct output: 17                  | Program output: 63                 
Correct output: 16                  | Program output: 72                 
Correct output: 54                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 50                 
Correct output: 9                   | Program output: 38                 
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 6                  
Correct output: 19                  | Program output: 73                 
Correct output: 15                  | Program output: 96                 
Correct output: 29                  | Program output: 29                 
Correct output: 2                   | Program output: 11                 
Correct output: 56                  | Program output: 87                 
Correct output: 1                   | Program output: 25                 
Correct output: 6                   | Program output: 37                 
Correct output: 14                  | Program output: 57                 
Correct output: 17                  | Program output: 17                 
Correct output: -32                 | Program output: 47                 
Correct output: -99                 | Program output: 62                 
Correct output: -70                 | Program output: 2                  
Correct output: -38                 | Program output: -17                
Correct output: -94                 | Program output: -75                
Correct output: -82                 | Program output: 76                 
Correct output: -68                 | Program output: -53                
Correct output: -95                 | Program output: 73                 
Correct output: -44                 | Program output: 87                 
Correct output: -23                 | Program output: 81                 
Correct output: -4                  | Program output: 75                 
Correct output: -40                 | Program output: -40                
Correct output: -55                 | Program output: 72                 
Correct output: -79                 | Program output: -27                
Correct output: -38                 | Program output: -38                
Correct output: -49                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: -79                 | Program output: 56                 
Correct output: -94                 | Program output: -43                
Correct output: -86                 | Program output: 89                 
Correct output: -67                 | Program output: 49                 
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -30                 | Program output: -8                 
Correct output: -61                 | Program output: -61                
Correct output: -38                 | Program output: -38                
Correct output: -83                 | Program output: -83                
Correct output: -59                 | Program output: 0                  
Correct output: -33                 | Program output: -14                
Correct output: -92                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: 60                  | Program output: 60                 
Correct output: -48                 | Program output: 27                 
Correct output: -61                 | Program output: -31                
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: 54                 
Correct output: -59                 | Program output: -59                
Correct output: 1                   | Program output: 92                 
Correct output: -88                 | Program output: -33                
Correct output: -36                 | Program output: 9                  
Correct output: -80                 | Program output: -26                
Correct output: -33                 | Program output: 72                 
Correct output: -72                 | Program output: -54                
Correct output: -69                 | Program output: 41                 
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: 75                 
Correct output: -84                 | Program output: -2                 
Correct output: -65                 | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: -44                 | Program output: 1                  
Correct output: -71                 | Program output: -55                
Correct output: -45                 | Program output: -35                
Correct output: -92                 | Program output: -50                
Correct output: -84                 | Program output: 49                 
Correct output: -45                 | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_div} {:close 2, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 2, :instruction tagged_927} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction tagged_255})
Lexicase best program: (integer_div integer_empty integer_mult integer_div tag_boolean_477 exec_y_when_autoconstructing (exec_rot (exec_k_when_autoconstructing (integer_pop) (exec_do*times (integer_dec integer_pop) exec_do*times (integer_dec integer_min tagged_927)) exec_if (integer_yankdup in1 exec_dup (exec_while () integer_max integer_yank integer_lt exec_empty boolean_flush) print_integer boolean_yank boolean_frominteger integer_min boolean_shove) (exec_y_when_autoconstructing (integer_gte exec_do*count (integer_eq boolean_shove exec_dup (exec_flush) integer_lte tagged_255)))) () ()))
Lexicase best errors: [1 1 1 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 56
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_div} {:close 2, :instruction integer_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 2, :instruction tagged_927} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction tagged_255})
Zero cases best program: (integer_div integer_empty integer_mult integer_div tag_boolean_477 exec_y_when_autoconstructing (exec_rot (exec_k_when_autoconstructing (integer_pop) (exec_do*times (integer_dec integer_pop) exec_do*times (integer_dec integer_min tagged_927)) exec_if (integer_yankdup in1 exec_dup (exec_while () integer_max integer_yank integer_lt exec_empty boolean_flush) print_integer boolean_yank boolean_frominteger integer_min boolean_shove) (exec_y_when_autoconstructing (integer_gte exec_do*count (integer_eq boolean_shove exec_dup (exec_flush) integer_lte tagged_255)))) () ()))
Zero cases best errors: [1 1 1 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 56
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (153 86 2 456 456 456 867 170 169 156)
Population mean number of elite cases: 2.97
Count of perfect (error zero) individuals by case: (153 86 2 456 456 456 867 170 169 156)
Population mean number of perfect (error zero) cases: 2.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 2, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction tagged_255} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Best program: (integer_div integer_add integer_mult integer_div tag_boolean_477 exec_y_when_autoconstructing (exec_rot (exec_k_when_autoconstructing (integer_pop) (exec_do*times (integer_yankdup in1 exec_dup (exec_while ()) print_integer boolean_yank boolean_frominteger integer_min boolean_shove) exec_y_when_autoconstructing (integer_gte exec_do*count (integer_eq boolean_shove integer_div exec_flush) integer_lte tagged_255) exec_eq integer_min integer_dup boolean_yank)) () ()))
Errors: [1 1 1 0 0 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 32
Size: 44
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 7.029
Median total errors in population: 7
Error averages by case: (0.847 0.914 0.998 0.544 0.544 0.544 0.133 0.83 0.831 0.844)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.21
Average program size in population (points): 55.935
Average percent parens in population: 0.261
Minimum age in population: 16.3125
Maximum age in population: 21.2744140625
Average age in population: 19.48810522460938
Median age in population: 19.6259765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 114
Genome diversity (% unique genomes):	 0.72
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 115
Syntactic diversity (% unique Push programs):	 0.713
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 5585555
--- Timings ---
Current time: 1559314495684 milliseconds
Total Time:          39.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        29.2 seconds, 73.5%
Fitness Testing:      6.4 seconds, 16.2%
Report:               4.0 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 632
Test mean error for best: 0.63200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: -88                
Correct output: -55                 | Program output: 18                 
Correct output: -51                 | Program output: -51                
Correct output: -42                 | Program output: 14                 
Correct output: -12                 | Program output: 89                 
Correct output: 24                  | Program output: 24                 
Correct output: -73                 | Program output: 55                 
Correct output: 2                   | Program output: 2                  
Correct output: -75                 | Program output: -75                
Correct output: 1                   | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: 57                  | Program output: 57                 
Correct output: -16                 | Program output: -16                
Correct output: 17                  | Program output: 88                 
Correct output: 30                  | Program output: 30                 
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 28                 
Correct output: 54                  | Program output: 95                 
Correct output: 39                  | Program output: 85                 
Correct output: 18                  | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 17                  | Program output: 92                 
Correct output: 22                  | Program output: 51                 
Correct output: 1                   | Program output: 100                
Correct output: 19                  | Program output: 79                 
Correct output: 15                  | Program output: 86                 
Correct output: 29                  | Program output: 64                 
Correct output: 2                   | Program output: 38                 
Correct output: 56                  | Program output: 86                 
Correct output: 1                   | Program output: 81                 
Correct output: 6                   | Program output: 75                 
Correct output: 14                  | Program output: 83                 
Correct output: 17                  | Program output: 32                 
Correct output: -32                 | Program output: -32                
Correct output: -99                 | Program output: -99                
Correct output: -70                 | Program output: -70                
Correct output: -38                 | Program output: 82                 
Correct output: -94                 | Program output: -89                
Correct output: -82                 | Program output: 100                
Correct output: -68                 | Program output: -9                 
Correct output: -95                 | Program output: 35                 
Correct output: -44                 | Program output: 85                 
Correct output: -23                 | Program output: 41                 
Correct output: -4                  | Program output: -4                 
Correct output: -40                 | Program output: 36                 
Correct output: -55                 | Program output: -55                
Correct output: -79                 | Program output: 74                 
Correct output: -38                 | Program output: 86                 
Correct output: -49                 | Program output: 36                 
Correct output: -95                 | Program output: -52                
Correct output: -95                 | Program output: 51                 
Correct output: -100                | Program output: -52                
Correct output: 15                  | Program output: 41                 
Correct output: -79                 | Program output: -49                
Correct output: -94                 | Program output: 70                 
Correct output: -86                 | Program output: -86                
Correct output: -67                 | Program output: -35                
Correct output: -83                 | Program output: 78                 
Correct output: -76                 | Program output: -5                 
Correct output: -30                 | Program output: -30                
Correct output: -61                 | Program output: 85                 
Correct output: -38                 | Program output: 75                 
Correct output: -83                 | Program output: -23                
Correct output: -59                 | Program output: 51                 
Correct output: -33                 | Program output: -33                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: 37                 
Correct output: 60                  | Program output: 91                 
Correct output: -48                 | Program output: 28                 
Correct output: -61                 | Program output: -10                
Correct output: -57                 | Program output: 30                 
Correct output: -76                 | Program output: -48                
Correct output: -59                 | Program output: 81                 
Correct output: 1                   | Program output: 10                 
Correct output: -88                 | Program output: 82                 
Correct output: -36                 | Program output: 6                  
Correct output: -80                 | Program output: -59                
Correct output: -33                 | Program output: 59                 
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -62                
Correct output: -80                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -22                
Correct output: -65                 | Program output: -51                
Correct output: -89                 | Program output: 74                 
Correct output: -87                 | Program output: 74                 
Correct output: -84                 | Program output: 3                  
Correct output: -44                 | Program output: 85                 
Correct output: -71                 | Program output: -71                
Correct output: -45                 | Program output: -45                
Correct output: -92                 | Program output: -92                
Correct output: -84                 | Program output: 89                 
Correct output: -45                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq})
Lexicase best program: (integer_div integer_add boolean_shove integer_yankdup boolean_invert_first_then_and in4 integer_add integer_mult boolean_rot exec_y_when_autoconstructing (exec_rot (exec_k_when_autoconstructing (integer_pop) (exec_do*times (boolean_empty exec_when () integer_dec exec_eq) boolean_swap boolean_dup_items) exec_flush integer_swap) (exec_while (integer_gt boolean_invert_first_then_and boolean_yankdup integer_max integer_gt) boolean_flush) (print_integer boolean_yank print_boolean integer_min boolean_shove) exec_y_when_autoconstructing (integer_gte exec_do*count (integer_eq))))
Lexicase best errors: [0 0 0 0 1 0 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 50
Percent parens: 0.240
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq})
Zero cases best program: (integer_div integer_add boolean_shove integer_yankdup boolean_invert_first_then_and in4 integer_add integer_mult boolean_rot exec_y_when_autoconstructing (exec_rot (exec_k_when_autoconstructing (integer_pop) (exec_do*times (boolean_empty exec_when () integer_dec exec_eq) boolean_swap boolean_dup_items) exec_flush integer_swap) (exec_while (integer_gt boolean_invert_first_then_and boolean_yankdup integer_max integer_gt) boolean_flush) (print_integer boolean_yank print_boolean integer_min boolean_shove) exec_y_when_autoconstructing (integer_gte exec_do*count (integer_eq))))
Zero cases best errors: [0 0 0 0 1 0 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 50
Percent parens: 0.240
--- Lexicase Population Statistics ---
Count of elite individuals by case: (541 120 754 545 285 120 138 225 120 497)
Population mean number of elite cases: 3.35
Count of perfect (error zero) individuals by case: (541 120 754 545 285 120 138 225 120 497)
Population mean number of perfect (error zero) cases: 3.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq})
Best program: (integer_div integer_add boolean_shove integer_yankdup boolean_invert_first_then_and in4 integer_add integer_mult boolean_rot exec_y_when_autoconstructing (exec_rot (exec_k_when_autoconstructing (integer_pop) (exec_do*times (boolean_empty exec_when () integer_dec exec_eq) boolean_swap boolean_dup_items) exec_flush integer_swap) (exec_while (integer_gt boolean_invert_first_then_and boolean_yankdup integer_max integer_gt) boolean_flush) (print_integer boolean_yank print_boolean integer_min boolean_shove) exec_y_when_autoconstructing (integer_gte exec_do*count (integer_eq))))
Errors: [0 0 0 0 1 0 1 1 0 1]
Total: 4
Mean: 0.4
Genome size: 38
Size: 50
Percent parens: 0.240
--- Population Statistics ---
Average total errors in population: 6.655
Median total errors in population: 5
Error averages by case: (0.459 0.88 0.246 0.455 0.715 0.88 0.862 0.775 0.88 0.503)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.178
Average program size in population (points): 57.042
Average percent parens in population: 0.257
Minimum age in population: 17.3125
Maximum age in population: 22.92724609375
Average age in population: 21.01646716308594
Median age in population: 21.09033203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 57
Genome diversity (% unique genomes):	 0.724
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.717
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 5924293
--- Timings ---
Current time: 1559314498221 milliseconds
Total Time:          42.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        31.2 seconds, 73.7%
Fitness Testing:      6.7 seconds, 15.9%
Report:               4.3 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -87                 | Program output: -86                
Correct output: -88                 | Program output: -61                
Correct output: -55                 | Program output: 18                 
Correct output: -51                 | Program output: 0                  
Correct output: -42                 | Program output: -42                
Correct output: -12                 | Program output: -12                
Correct output: 24                  | Program output: 24                 
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 15                 
Correct output: -75                 | Program output: -6                 
Correct output: 1                   | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: 57                  | Program output: 57                 
Correct output: -16                 | Program output: -16                
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 38                 
Correct output: 17                  | Program output: 90                 
Correct output: 16                  | Program output: 43                 
Correct output: 54                  | Program output: 97                 
Correct output: 39                  | Program output: 60                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 55                 
Correct output: 17                  | Program output: 99                 
Correct output: 22                  | Program output: 76                 
Correct output: 1                   | Program output: 1                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 86                 
Correct output: 29                  | Program output: 58                 
Correct output: 2                   | Program output: 2                  
Correct output: 56                  | Program output: 90                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 14                  | Program output: 62                 
Correct output: 17                  | Program output: 81                 
Correct output: -32                 | Program output: 25                 
Correct output: -99                 | Program output: -78                
Correct output: -70                 | Program output: 76                 
Correct output: -38                 | Program output: -15                
Correct output: -94                 | Program output: 80                 
Correct output: -82                 | Program output: 42                 
Correct output: -68                 | Program output: -1                 
Correct output: -95                 | Program output: -95                
Correct output: -44                 | Program output: -5                 
Correct output: -23                 | Program output: 6                  
Correct output: -4                  | Program output: 13                 
Correct output: -40                 | Program output: 49                 
Correct output: -55                 | Program output: 48                 
Correct output: -79                 | Program output: -65                
Correct output: -38                 | Program output: 81                 
Correct output: -49                 | Program output: -49                
Correct output: -95                 | Program output: -19                
Correct output: -95                 | Program output: 73                 
Correct output: -100                | Program output: -26                
Correct output: 15                  | Program output: 62                 
Correct output: -79                 | Program output: -30                
Correct output: -94                 | Program output: 32                 
Correct output: -86                 | Program output: -36                
Correct output: -67                 | Program output: 4                  
Correct output: -83                 | Program output: -30                
Correct output: -76                 | Program output: 59                 
Correct output: -30                 | Program output: 84                 
Correct output: -61                 | Program output: -51                
Correct output: -38                 | Program output: 49                 
Correct output: -83                 | Program output: 19                 
Correct output: -59                 | Program output: -59                
Correct output: -33                 | Program output: 25                 
Correct output: -92                 | Program output: 7                  
Correct output: -53                 | Program output: -14                
Correct output: 60                  | Program output: 66                 
Correct output: -48                 | Program output: -48                
Correct output: -61                 | Program output: 84                 
Correct output: -57                 | Program output: 89                 
Correct output: -76                 | Program output: 36                 
Correct output: -59                 | Program output: 56                 
Correct output: 1                   | Program output: 1                  
Correct output: -88                 | Program output: -4                 
Correct output: -36                 | Program output: -15                
Correct output: -80                 | Program output: -80                
Correct output: -33                 | Program output: 67                 
Correct output: -72                 | Program output: -50                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -14                
Correct output: -34                 | Program output: 94                 
Correct output: -84                 | Program output: -84                
Correct output: -65                 | Program output: -65                
Correct output: -89                 | Program output: -67                
Correct output: -87                 | Program output: 10                 
Correct output: -84                 | Program output: 35                 
Correct output: -44                 | Program output: -44                
Correct output: -71                 | Program output: 52                 
Correct output: -45                 | Program output: 74                 
Correct output: -92                 | Program output: 96                 
Correct output: -84                 | Program output: -45                
Correct output: -45                 | Program output: -45                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq})
Lexicase best program: (integer_div integer_add boolean_shove integer_yankdup boolean_invert_first_then_and in2 integer_add integer_mult boolean_rot exec_y_when_autoconstructing (exec_rot (exec_k_when_autoconstructing (integer_pop) (exec_do*times (boolean_empty exec_when () integer_dec exec_eq) boolean_swap boolean_dup_items) exec_flush integer_swap) (exec_while (integer_gt boolean_invert_first_then_and boolean_yankdup integer_max integer_gt) boolean_flush) (print_integer boolean_yank print_boolean integer_min boolean_shove) exec_y_when_autoconstructing (integer_gte exec_do*count (integer_eq))))
Lexicase best errors: [0 0 1 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 50
Percent parens: 0.240
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq})
Zero cases best program: (integer_div integer_add boolean_shove integer_yankdup boolean_invert_first_then_and in2 integer_add integer_mult boolean_rot exec_y_when_autoconstructing (exec_rot (exec_k_when_autoconstructing (integer_pop) (exec_do*times (boolean_empty exec_when () integer_dec exec_eq) boolean_swap boolean_dup_items) exec_flush integer_swap) (exec_while (integer_gt boolean_invert_first_then_and boolean_yankdup integer_max integer_gt) boolean_flush) (print_integer boolean_yank print_boolean integer_min boolean_shove) exec_y_when_autoconstructing (integer_gte exec_do*count (integer_eq))))
Zero cases best errors: [0 0 1 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 50
Percent parens: 0.240
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 241 1 228 242 1 230 242 241)
Population mean number of elite cases: 1.43
Count of perfect (error zero) individuals by case: (1 1 241 1 228 242 1 230 242 241)
Population mean number of perfect (error zero) cases: 1.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq})
Best program: (integer_div integer_add boolean_shove integer_yankdup boolean_invert_first_then_and in2 integer_add integer_mult boolean_rot exec_y_when_autoconstructing (exec_rot (exec_k_when_autoconstructing (integer_pop) (exec_do*times (boolean_empty exec_when () integer_dec exec_eq) boolean_swap boolean_dup_items) exec_flush integer_swap) (exec_while (integer_gt boolean_invert_first_then_and boolean_yankdup integer_max integer_gt) boolean_flush) (print_integer boolean_yank print_boolean integer_min boolean_shove) exec_y_when_autoconstructing (integer_gte exec_do*count (integer_eq))))
Errors: [0 0 1 0 0 1 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 38
Size: 50
Percent parens: 0.240
--- Population Statistics ---
Average total errors in population: 8.572
Median total errors in population: 10
Error averages by case: (0.999 0.999 0.759 0.999 0.772 0.758 0.999 0.77 0.758 0.759)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.036
Average program size in population (points): 53.363
Average percent parens in population: 0.248
Minimum age in population: 20.06103515625
Maximum age in population: 24.77001953125
Average age in population: 22.66799096679688
Median age in population: 22.7369384765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 130
Genome diversity (% unique genomes):	 0.643
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 130
Syntactic diversity (% unique Push programs):	 0.638
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 6270591
--- Timings ---
Current time: 1559314500783 milliseconds
Total Time:          44.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.2 seconds, 74.0%
Fitness Testing:      7.0 seconds, 15.7%
Report:               4.5 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: -88                
Correct output: -55                 | Program output: 18                 
Correct output: -51                 | Program output: -51                
Correct output: -42                 | Program output: 14                 
Correct output: -12                 | Program output: 89                 
Correct output: 24                  | Program output: 24                 
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 15                 
Correct output: -75                 | Program output: -6                 
Correct output: 1                   | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: 57                  | Program output: 57                 
Correct output: -16                 | Program output: -16                
Correct output: 17                  | Program output: 72                 
Correct output: 30                  | Program output: 84                 
Correct output: 17                  | Program output: 94                 
Correct output: 16                  | Program output: 16                 
Correct output: 54                  | Program output: 98                 
Correct output: 39                  | Program output: 68                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 40                 
Correct output: 17                  | Program output: 26                 
Correct output: 22                  | Program output: 69                 
Correct output: 1                   | Program output:                    
Correct output: 19                  | Program output: 83                 
Correct output: 15                  | Program output: 15                 
Correct output: 29                  | Program output: 39                 
Correct output: 2                   | Program output: 19                 
Correct output: 56                  | Program output: 56                 
Correct output: 1                   | Program output: 99                 
Correct output: 6                   | Program output: 50                 
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 65                 
Correct output: -32                 | Program output: 46                 
Correct output: -99                 | Program output: -52                
Correct output: -70                 | Program output:                    
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -82                 | Program output: -82                
Correct output: -68                 | Program output: -68                
Correct output: -95                 | Program output: -60                
Correct output: -44                 | Program output: -44                
Correct output: -23                 | Program output: -23                
Correct output: -4                  | Program output: 63                 
Correct output: -40                 | Program output: -26                
Correct output: -55                 | Program output: 60                 
Correct output: -79                 | Program output: -79                
Correct output: -38                 | Program output: 9                  
Correct output: -49                 | Program output: 50                 
Correct output: -95                 | Program output: 53                 
Correct output: -95                 | Program output: -14                
Correct output: -100                | Program output: 97                 
Correct output: 15                  | Program output: 100                
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -77                
Correct output: -67                 | Program output: -67                
Correct output: -83                 | Program output: -29                
Correct output: -76                 | Program output: -1                 
Correct output: -30                 | Program output: 41                 
Correct output: -61                 | Program output: 10                 
Correct output: -38                 | Program output: 9                  
Correct output: -83                 | Program output: -65                
Correct output: -59                 | Program output: 98                 
Correct output: -33                 | Program output: 28                 
Correct output: -92                 | Program output: 66                 
Correct output: -53                 | Program output: 37                 
Correct output: 60                  | Program output: 92                 
Correct output: -48                 | Program output: -33                
Correct output: -61                 | Program output: -61                
Correct output: -57                 | Program output: 91                 
Correct output: -76                 | Program output: -76                
Correct output: -59                 | Program output: -15                
Correct output: 1                   | Program output: 73                 
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -80                 | Program output: -80                
Correct output: -33                 | Program output: -33                
Correct output: -72                 | Program output: 23                 
Correct output: -69                 | Program output: -16                
Correct output: -80                 | Program output: 94                 
Correct output: -34                 | Program output: 73                 
Correct output: -84                 | Program output: 68                 
Correct output: -65                 | Program output: -31                
Correct output: -89                 | Program output: -87                
Correct output: -87                 | Program output: -20                
Correct output: -84                 | Program output: 55                 
Correct output: -44                 | Program output: 78                 
Correct output: -71                 | Program output: -25                
Correct output: -45                 | Program output: 29                 
Correct output: -92                 | Program output: 53                 
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -29                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq})
Lexicase best program: (exec_swap (exec_rot (integer_flush exec_dup (integer_add) integer_mult boolean_rot in3 exec_rot (exec_k_when_autoconstructing (integer_pop) (exec_do*times (boolean_empty exec_when () integer_dec exec_eq) boolean_swap boolean_dup_items) exec_flush integer_swap) (exec_while (integer_gt boolean_invert_first_then_and boolean_yankdup integer_max integer_gt) boolean_flush) (print_integer boolean_yank print_boolean integer_min boolean_shove) exec_y_when_autoconstructing (integer_gte exec_do*count (integer_eq))) () ()) ())
Lexicase best errors: [1 1 0 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 53
Percent parens: 0.321
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq})
Zero cases best program: (exec_swap (exec_rot (integer_flush exec_dup (integer_add) integer_mult boolean_rot in3 exec_rot (exec_k_when_autoconstructing (integer_pop) (exec_do*times (boolean_empty exec_when () integer_dec exec_eq) boolean_swap boolean_dup_items) exec_flush integer_swap) (exec_while (integer_gt boolean_invert_first_then_and boolean_yankdup integer_max integer_gt) boolean_flush) (print_integer boolean_yank print_boolean integer_min boolean_shove) exec_y_when_autoconstructing (integer_gte exec_do*count (integer_eq))) () ()) ())
Zero cases best errors: [1 1 0 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 53
Percent parens: 0.321
--- Lexicase Population Statistics ---
Count of elite individuals by case: (341 2 111 340 352 111 2 811 111 463)
Population mean number of elite cases: 2.64
Count of perfect (error zero) individuals by case: (341 2 111 340 352 111 2 811 111 463)
Population mean number of perfect (error zero) cases: 2.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction tag_boolean_477} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 2, :instruction tagged_927} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction tagged_255} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Best program: (integer_div integer_add boolean_shove integer_yankdup boolean_invert_first_then_and tag_boolean_477 exec_y_when_autoconstructing (exec_rot (exec_k_when_autoconstructing (integer_pop) (exec_do*times (integer_dec integer_min tagged_927)) exec_if (integer_yankdup in1 exec_dup (exec_yank) integer_max in3 integer_lt exec_empty boolean_flush) (print_integer boolean_yank boolean_frominteger integer_min boolean_shove) exec_y_when_autoconstructing (integer_gte exec_do*count (integer_eq boolean_shove integer_div exec_flush) integer_lte tagged_255) exec_eq integer_min integer_dup boolean_yank) () ()))
Errors: [1 1 0 1 1 0 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 42
Size: 55
Percent parens: 0.236
--- Population Statistics ---
Average total errors in population: 7.356
Median total errors in population: 7
Error averages by case: (0.659 0.998 0.889 0.66 0.648 0.889 0.998 0.189 0.889 0.537)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.158
Average program size in population (points): 52.616
Average percent parens in population: 0.254
Minimum age in population: 21.226806640625
Maximum age in population: 26.09017944335938
Average age in population: 24.17841204833984
Median age in population: 24.09175109863281
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 233
Genome diversity (% unique genomes):	 0.658
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 236
Syntactic diversity (% unique Push programs):	 0.65
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 6618030
--- Timings ---
Current time: 1559314503392 milliseconds
Total Time:          47.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.1 seconds, 74.2%
Fitness Testing:      7.3 seconds, 15.5%
Report:               4.8 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 632
Test mean error for best: 0.63200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: -88                
Correct output: -55                 | Program output: 18                 
Correct output: -51                 | Program output: -51                
Correct output: -42                 | Program output: 14                 
Correct output: -12                 | Program output: 89                 
Correct output: 24                  | Program output: 24                 
Correct output: -73                 | Program output: 55                 
Correct output: 2                   | Program output: 2                  
Correct output: -75                 | Program output: -75                
Correct output: 1                   | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: 57                  | Program output: 57                 
Correct output: -16                 | Program output: -16                
Correct output: 17                  | Program output: 88                 
Correct output: 30                  | Program output: 30                 
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 28                 
Correct output: 54                  | Program output: 95                 
Correct output: 39                  | Program output: 85                 
Correct output: 18                  | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 17                  | Program output: 92                 
Correct output: 22                  | Program output: 51                 
Correct output: 1                   | Program output: 100                
Correct output: 19                  | Program output: 79                 
Correct output: 15                  | Program output: 86                 
Correct output: 29                  | Program output: 64                 
Correct output: 2                   | Program output: 38                 
Correct output: 56                  | Program output: 86                 
Correct output: 1                   | Program output: 81                 
Correct output: 6                   | Program output: 75                 
Correct output: 14                  | Program output: 83                 
Correct output: 17                  | Program output: 32                 
Correct output: -32                 | Program output: -32                
Correct output: -99                 | Program output: -99                
Correct output: -70                 | Program output: -70                
Correct output: -38                 | Program output: 82                 
Correct output: -94                 | Program output: -89                
Correct output: -82                 | Program output: 100                
Correct output: -68                 | Program output: -9                 
Correct output: -95                 | Program output: 35                 
Correct output: -44                 | Program output: 85                 
Correct output: -23                 | Program output: 41                 
Correct output: -4                  | Program output: -4                 
Correct output: -40                 | Program output: 36                 
Correct output: -55                 | Program output: -55                
Correct output: -79                 | Program output: 74                 
Correct output: -38                 | Program output: 86                 
Correct output: -49                 | Program output: 36                 
Correct output: -95                 | Program output: -52                
Correct output: -95                 | Program output: 51                 
Correct output: -100                | Program output: -52                
Correct output: 15                  | Program output: 41                 
Correct output: -79                 | Program output: -49                
Correct output: -94                 | Program output: 70                 
Correct output: -86                 | Program output: -86                
Correct output: -67                 | Program output: -35                
Correct output: -83                 | Program output: 78                 
Correct output: -76                 | Program output: -5                 
Correct output: -30                 | Program output: -30                
Correct output: -61                 | Program output: 85                 
Correct output: -38                 | Program output: 75                 
Correct output: -83                 | Program output: -23                
Correct output: -59                 | Program output: 51                 
Correct output: -33                 | Program output: -33                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: 37                 
Correct output: 60                  | Program output: 91                 
Correct output: -48                 | Program output: 28                 
Correct output: -61                 | Program output: -10                
Correct output: -57                 | Program output: 30                 
Correct output: -76                 | Program output: -48                
Correct output: -59                 | Program output: 81                 
Correct output: 1                   | Program output: 10                 
Correct output: -88                 | Program output: 82                 
Correct output: -36                 | Program output: 6                  
Correct output: -80                 | Program output: -59                
Correct output: -33                 | Program output: 59                 
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -62                
Correct output: -80                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -22                
Correct output: -65                 | Program output: -51                
Correct output: -89                 | Program output: 74                 
Correct output: -87                 | Program output: 74                 
Correct output: -84                 | Program output: 3                  
Correct output: -44                 | Program output: 85                 
Correct output: -71                 | Program output: -71                
Correct output: -45                 | Program output: -45                
Correct output: -92                 | Program output: -92                
Correct output: -84                 | Program output: 89                 
Correct output: -45                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction -76} {:close 0, :instruction integer_div} {:close 2, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction tag_boolean_477} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction tagged_927} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 2, :instruction tagged_255})
Lexicase best program: (exec_swap (exec_rot (integer_flush boolean_shove -76 integer_div integer_add) () (integer_mult exec_k (tag_boolean_477 exec_y_when_autoconstructing (exec_rot () (exec_k_when_autoconstructing (integer_pop exec_do*times (integer_dec boolean_invert_second_then_and tagged_927)) (exec_if (integer_yankdup in1 exec_if (boolean_not in1 boolean_yank boolean_flush print_integer) (exec_y_when_autoconstructing (integer_gte exec_do*count (integer_eq boolean_shove integer_div exec_flush) integer_lte tagged_255))) ())) ())) ())) ())
Lexicase best errors: [0 1 1 1 1 1 0 1 0 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 57
Percent parens: 0.368
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction -76} {:close 0, :instruction integer_div} {:close 2, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_k} {:close 0, :instruction tag_boolean_477} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction tagged_927} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_not} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_flush} {:close 1, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 2, :instruction tagged_255})
Zero cases best program: (exec_swap (exec_rot (integer_flush boolean_shove -76 integer_div integer_add) () (integer_mult exec_k (tag_boolean_477 exec_y_when_autoconstructing (exec_rot () (exec_k_when_autoconstructing (integer_pop exec_do*times (integer_dec boolean_invert_second_then_and tagged_927)) (exec_if (integer_yankdup in1 exec_if (boolean_not in1 boolean_yank boolean_flush print_integer) (exec_y_when_autoconstructing (integer_gte exec_do*count (integer_eq boolean_shove integer_div exec_flush) integer_lte tagged_255))) ())) ())) ())) ())
Zero cases best errors: [0 1 1 1 1 1 0 1 0 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 57
Percent parens: 0.368
--- Lexicase Population Statistics ---
Count of elite individuals by case: (176 351 200 200 105 200 180 353 177 105)
Population mean number of elite cases: 2.05
Count of perfect (error zero) individuals by case: (176 351 200 200 105 200 180 353 177 105)
Population mean number of perfect (error zero) cases: 2.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_y_when_autoconstructing})
Best program: (integer_div integer_add boolean_shove integer_yankdup boolean_invert_first_then_and in4 integer_add integer_mult boolean_rot exec_y_when_autoconstructing (exec_dup (exec_while () integer_max integer_yank integer_lt exec_empty boolean_flush) print_integer boolean_yank boolean_frominteger integer_min boolean_shove) exec_y_when_autoconstructing (integer_gte exec_do*count (integer_eq exec_while (exec_yankdup exec_flush) integer_lte exec_y_when_autoconstructing ())))
Errors: [1 1 0 0 1 0 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 31
Size: 39
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 7.953
Median total errors in population: 8
Error averages by case: (0.824 0.649 0.8 0.8 0.895 0.8 0.82 0.647 0.823 0.895)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.13
Average program size in population (points): 51.208
Average percent parens in population: 0.253
Minimum age in population: 23.38916015625
Maximum age in population: 27.66856384277344
Average age in population: 25.8584002532959
Median age in population: 25.95151519775391
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 74
Genome diversity (% unique genomes):	 0.642
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 76
Syntactic diversity (% unique Push programs):	 0.631
Total error diversity:				 0.004
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 7060873
--- Timings ---
Current time: 1559314506160 milliseconds
Total Time:          50.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.2 seconds, 74.2%
Fitness Testing:      7.7 seconds, 15.3%
Report:               5.1 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 632
Test mean error for best: 0.63200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: -88                
Correct output: -55                 | Program output: 18                 
Correct output: -51                 | Program output: -51                
Correct output: -42                 | Program output: 14                 
Correct output: -12                 | Program output: 89                 
Correct output: 24                  | Program output: 24                 
Correct output: -73                 | Program output: 55                 
Correct output: 2                   | Program output: 2                  
Correct output: -75                 | Program output: -75                
Correct output: 1                   | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: 57                  | Program output: 57                 
Correct output: -16                 | Program output: -16                
Correct output: 17                  | Program output: 88                 
Correct output: 30                  | Program output: 30                 
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 28                 
Correct output: 54                  | Program output: 95                 
Correct output: 39                  | Program output: 85                 
Correct output: 18                  | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 17                  | Program output: 92                 
Correct output: 22                  | Program output: 51                 
Correct output: 1                   | Program output: 100                
Correct output: 19                  | Program output: 79                 
Correct output: 15                  | Program output: 86                 
Correct output: 29                  | Program output: 64                 
Correct output: 2                   | Program output: 38                 
Correct output: 56                  | Program output: 86                 
Correct output: 1                   | Program output: 81                 
Correct output: 6                   | Program output: 75                 
Correct output: 14                  | Program output: 83                 
Correct output: 17                  | Program output: 32                 
Correct output: -32                 | Program output: -32                
Correct output: -99                 | Program output: -99                
Correct output: -70                 | Program output: -70                
Correct output: -38                 | Program output: 82                 
Correct output: -94                 | Program output: -89                
Correct output: -82                 | Program output: 100                
Correct output: -68                 | Program output: -9                 
Correct output: -95                 | Program output: 35                 
Correct output: -44                 | Program output: 85                 
Correct output: -23                 | Program output: 41                 
Correct output: -4                  | Program output: -4                 
Correct output: -40                 | Program output: 36                 
Correct output: -55                 | Program output: -55                
Correct output: -79                 | Program output: 74                 
Correct output: -38                 | Program output: 86                 
Correct output: -49                 | Program output: 36                 
Correct output: -95                 | Program output: -52                
Correct output: -95                 | Program output: 51                 
Correct output: -100                | Program output: -52                
Correct output: 15                  | Program output: 41                 
Correct output: -79                 | Program output: -49                
Correct output: -94                 | Program output: 70                 
Correct output: -86                 | Program output: -86                
Correct output: -67                 | Program output: -35                
Correct output: -83                 | Program output: 78                 
Correct output: -76                 | Program output: -5                 
Correct output: -30                 | Program output: -30                
Correct output: -61                 | Program output: 85                 
Correct output: -38                 | Program output: 75                 
Correct output: -83                 | Program output: -23                
Correct output: -59                 | Program output: 51                 
Correct output: -33                 | Program output: -33                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: 37                 
Correct output: 60                  | Program output: 91                 
Correct output: -48                 | Program output: 28                 
Correct output: -61                 | Program output: -10                
Correct output: -57                 | Program output: 30                 
Correct output: -76                 | Program output: -48                
Correct output: -59                 | Program output: 81                 
Correct output: 1                   | Program output: 10                 
Correct output: -88                 | Program output: 82                 
Correct output: -36                 | Program output: 6                  
Correct output: -80                 | Program output: -59                
Correct output: -33                 | Program output: 59                 
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -62                
Correct output: -80                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -22                
Correct output: -65                 | Program output: -51                
Correct output: -89                 | Program output: 74                 
Correct output: -87                 | Program output: 74                 
Correct output: -84                 | Program output: 3                  
Correct output: -44                 | Program output: 85                 
Correct output: -71                 | Program output: -71                
Correct output: -45                 | Program output: -45                
Correct output: -92                 | Program output: -92                
Correct output: -84                 | Program output: 89                 
Correct output: -45                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_y_when_autoconstructing})
Lexicase best program: (integer_div integer_add boolean_shove integer_yankdup boolean_invert_first_then_and in4 integer_add integer_mult boolean_rot exec_y_when_autoconstructing (exec_dup (exec_while () integer_max integer_yank integer_lt exec_empty boolean_flush) print_integer boolean_yank boolean_frominteger integer_min boolean_shove) exec_y_when_autoconstructing (integer_gte exec_do*count (integer_eq exec_while (exec_yankdup exec_flush) integer_lte exec_y_when_autoconstructing ())))
Lexicase best errors: [0 0 1 0 1 1 1 1 1 0]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 39
Percent parens: 0.205
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_y_when_autoconstructing})
Zero cases best program: (integer_div integer_add boolean_shove integer_yankdup boolean_invert_first_then_and in4 integer_add integer_mult boolean_rot exec_y_when_autoconstructing (exec_dup (exec_while () integer_max integer_yank integer_lt exec_empty boolean_flush) print_integer boolean_yank boolean_frominteger integer_min boolean_shove) exec_y_when_autoconstructing (integer_gte exec_do*count (integer_eq exec_while (exec_yankdup exec_flush) integer_lte exec_y_when_autoconstructing ())))
Zero cases best errors: [0 0 1 0 1 1 1 1 1 0]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 39
Percent parens: 0.205
--- Lexicase Population Statistics ---
Count of elite individuals by case: (249 248 167 150 266 167 266 164 268 245)
Population mean number of elite cases: 2.19
Count of perfect (error zero) individuals by case: (249 248 167 150 266 167 266 164 268 245)
Population mean number of perfect (error zero) cases: 2.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 0, :instruction integer_div} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_y_when_autoconstructing})
Best program: (integer_div integer_add integer_mult integer_div tag_boolean_477 integer_div integer_add boolean_shove integer_yankdup boolean_invert_first_then_and in4 integer_add integer_mult boolean_rot exec_y_when_autoconstructing (exec_dup (exec_while () integer_max integer_yank integer_lt exec_empty boolean_flush) print_integer boolean_yank boolean_frominteger integer_min boolean_shove) exec_y_when_autoconstructing (integer_gte exec_do*count (integer_eq exec_while (exec_yankdup exec_flush) integer_lte exec_y_when_autoconstructing ())))
Errors: [0 0 1 0 1 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 36
Size: 44
Percent parens: 0.182
--- Population Statistics ---
Average total errors in population: 7.81
Median total errors in population: 7
Error averages by case: (0.751 0.752 0.833 0.85 0.734 0.833 0.734 0.836 0.732 0.755)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.237
Average program size in population (points): 50.042
Average percent parens in population: 0.253
Minimum age in population: 24.38916015625
Maximum age in population: 29.18248748779297
Average age in population: 27.34320188140869
Median age in population: 27.38991165161133
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 58
Genome diversity (% unique genomes):	 0.669
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.655
Total error diversity:				 0.005
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 7499241
--- Timings ---
Current time: 1559314509062 milliseconds
Total Time:          53.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.5 seconds, 74.4%
Fitness Testing:      8.1 seconds, 15.2%
Report:               5.4 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 632
Test mean error for best: 0.63200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: -88                
Correct output: -55                 | Program output: 18                 
Correct output: -51                 | Program output: -51                
Correct output: -42                 | Program output: 14                 
Correct output: -12                 | Program output: 89                 
Correct output: 24                  | Program output: 24                 
Correct output: -73                 | Program output: 55                 
Correct output: 2                   | Program output: 2                  
Correct output: -75                 | Program output: -75                
Correct output: 1                   | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: 57                  | Program output: 57                 
Correct output: -16                 | Program output: -16                
Correct output: 17                  | Program output: 88                 
Correct output: 30                  | Program output: 30                 
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 28                 
Correct output: 54                  | Program output: 95                 
Correct output: 39                  | Program output: 85                 
Correct output: 18                  | Program output: 31                 
Correct output: 9                   | Program output: 9                  
Correct output: 17                  | Program output: 92                 
Correct output: 22                  | Program output: 51                 
Correct output: 1                   | Program output: 100                
Correct output: 19                  | Program output: 79                 
Correct output: 15                  | Program output: 86                 
Correct output: 29                  | Program output: 64                 
Correct output: 2                   | Program output: 38                 
Correct output: 56                  | Program output: 86                 
Correct output: 1                   | Program output: 81                 
Correct output: 6                   | Program output: 75                 
Correct output: 14                  | Program output: 83                 
Correct output: 17                  | Program output: 32                 
Correct output: -32                 | Program output: -32                
Correct output: -99                 | Program output: -99                
Correct output: -70                 | Program output: -70                
Correct output: -38                 | Program output: 82                 
Correct output: -94                 | Program output: -89                
Correct output: -82                 | Program output: 100                
Correct output: -68                 | Program output: -9                 
Correct output: -95                 | Program output: 35                 
Correct output: -44                 | Program output: 85                 
Correct output: -23                 | Program output: 41                 
Correct output: -4                  | Program output: -4                 
Correct output: -40                 | Program output: 36                 
Correct output: -55                 | Program output: -55                
Correct output: -79                 | Program output: 74                 
Correct output: -38                 | Program output: 86                 
Correct output: -49                 | Program output: 36                 
Correct output: -95                 | Program output: -52                
Correct output: -95                 | Program output: 51                 
Correct output: -100                | Program output: -52                
Correct output: 15                  | Program output: 41                 
Correct output: -79                 | Program output: -49                
Correct output: -94                 | Program output: 70                 
Correct output: -86                 | Program output: -86                
Correct output: -67                 | Program output: -35                
Correct output: -83                 | Program output: 78                 
Correct output: -76                 | Program output: -5                 
Correct output: -30                 | Program output: -30                
Correct output: -61                 | Program output: 85                 
Correct output: -38                 | Program output: 75                 
Correct output: -83                 | Program output: -23                
Correct output: -59                 | Program output: 51                 
Correct output: -33                 | Program output: -33                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: 37                 
Correct output: 60                  | Program output: 91                 
Correct output: -48                 | Program output: 28                 
Correct output: -61                 | Program output: -10                
Correct output: -57                 | Program output: 30                 
Correct output: -76                 | Program output: -48                
Correct output: -59                 | Program output: 81                 
Correct output: 1                   | Program output: 10                 
Correct output: -88                 | Program output: 82                 
Correct output: -36                 | Program output: 6                  
Correct output: -80                 | Program output: -59                
Correct output: -33                 | Program output: 59                 
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -62                
Correct output: -80                 | Program output: -29                
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -22                
Correct output: -65                 | Program output: -51                
Correct output: -89                 | Program output: 74                 
Correct output: -87                 | Program output: 74                 
Correct output: -84                 | Program output: 3                  
Correct output: -44                 | Program output: 85                 
Correct output: -71                 | Program output: -71                
Correct output: -45                 | Program output: -45                
Correct output: -92                 | Program output: -92                
Correct output: -84                 | Program output: 89                 
Correct output: -45                 | Program output: -3                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_y_when_autoconstructing})
Lexicase best program: (integer_div integer_add boolean_shove integer_yankdup boolean_invert_first_then_and in4 integer_add integer_mult boolean_rot exec_y_when_autoconstructing (exec_while () integer_max integer_yank integer_lt exec_empty boolean_flush) print_integer boolean_yank boolean_frominteger integer_min boolean_shove exec_y_when_autoconstructing (integer_gte exec_do*count (integer_eq exec_while (exec_yankdup exec_flush) integer_lte exec_y_when_autoconstructing ())))
Lexicase best errors: [1 1 0 0 0 1 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 37
Percent parens: 0.189
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_y_when_autoconstructing})
Zero cases best program: (integer_div integer_add boolean_shove integer_yankdup boolean_invert_first_then_and in4 integer_add integer_mult boolean_rot exec_y_when_autoconstructing (exec_while () integer_max integer_yank integer_lt exec_empty boolean_flush) print_integer boolean_yank boolean_frominteger integer_min boolean_shove exec_y_when_autoconstructing (integer_gte exec_do*count (integer_eq exec_while (exec_yankdup exec_flush) integer_lte exec_y_when_autoconstructing ())))
Zero cases best errors: [1 1 0 0 0 1 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 37
Percent parens: 0.189
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 257 853 372 372 221 372 635 221 221)
Population mean number of elite cases: 4.52
Count of perfect (error zero) individuals by case: (0 257 853 372 372 221 372 635 221 221)
Population mean number of perfect (error zero) cases: 3.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction exec_yankdup} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_y_when_autoconstructing})
Best program: (integer_div integer_add boolean_shove integer_yankdup boolean_invert_first_then_and in4 integer_add integer_mult boolean_rot exec_y_when_autoconstructing (exec_dup (exec_while () integer_max integer_yank integer_lt exec_empty boolean_flush) print_integer boolean_yank boolean_frominteger integer_min boolean_shove) exec_y_when_autoconstructing (integer_gte exec_do*count (integer_eq exec_while (exec_yankdup exec_flush) integer_lte exec_y_when_autoconstructing ())))
Errors: [1 1 0 0 0 1 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 31
Size: 39
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 6.476
Median total errors in population: 6
Error averages by case: (1.0 0.743 0.147 0.628 0.628 0.779 0.628 0.365 0.779 0.779)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.231
Average program size in population (points): 46.15
Average percent parens in population: 0.232
Minimum age in population: 25.66796875
Maximum age in population: 30.72077941894531
Average age in population: 28.87885773849487
Median age in population: 28.93736839294434
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 81
Genome diversity (% unique genomes):	 0.669
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 92
Syntactic diversity (% unique Push programs):	 0.655
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 7856255
--- Timings ---
Current time: 1559314511704 milliseconds
Total Time:          55.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.5 seconds, 74.5%
Fitness Testing:      8.4 seconds, 15.0%
Report:               5.7 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: -88                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: -42                 | Program output: 14                 
Correct output: -12                 | Program output: 89                 
Correct output: 24                  | Program output: 77                 
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 15                 
Correct output: -75                 | Program output: -6                 
Correct output: 1                   | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: 57                  | Program output: 57                 
Correct output: -16                 | Program output: -16                
Correct output: 17                  | Program output: 52                 
Correct output: 30                  | Program output: 33                 
Correct output: 17                  | Program output: 63                 
Correct output: 16                  | Program output: 72                 
Correct output: 54                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 50                 
Correct output: 9                   | Program output: 38                 
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 6                  
Correct output: 19                  | Program output: 73                 
Correct output: 15                  | Program output: 96                 
Correct output: 29                  | Program output: 29                 
Correct output: 2                   | Program output: 11                 
Correct output: 56                  | Program output: 87                 
Correct output: 1                   | Program output: 25                 
Correct output: 6                   | Program output: 37                 
Correct output: 14                  | Program output: 57                 
Correct output: 17                  | Program output: 17                 
Correct output: -32                 | Program output: 47                 
Correct output: -99                 | Program output: 62                 
Correct output: -70                 | Program output: 2                  
Correct output: -38                 | Program output: -17                
Correct output: -94                 | Program output: -75                
Correct output: -82                 | Program output: 76                 
Correct output: -68                 | Program output: -53                
Correct output: -95                 | Program output: 73                 
Correct output: -44                 | Program output: 87                 
Correct output: -23                 | Program output: 81                 
Correct output: -4                  | Program output: 75                 
Correct output: -40                 | Program output: -40                
Correct output: -55                 | Program output: 72                 
Correct output: -79                 | Program output: -27                
Correct output: -38                 | Program output: -38                
Correct output: -49                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: -79                 | Program output: 56                 
Correct output: -94                 | Program output: -43                
Correct output: -86                 | Program output: 89                 
Correct output: -67                 | Program output: 49                 
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -30                 | Program output: -8                 
Correct output: -61                 | Program output: -61                
Correct output: -38                 | Program output: -38                
Correct output: -83                 | Program output: -83                
Correct output: -59                 | Program output: 0                  
Correct output: -33                 | Program output: -14                
Correct output: -92                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: 60                  | Program output: 60                 
Correct output: -48                 | Program output: 27                 
Correct output: -61                 | Program output: -31                
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: 54                 
Correct output: -59                 | Program output: -59                
Correct output: 1                   | Program output: 92                 
Correct output: -88                 | Program output: -33                
Correct output: -36                 | Program output: 9                  
Correct output: -80                 | Program output: -26                
Correct output: -33                 | Program output: 72                 
Correct output: -72                 | Program output: -54                
Correct output: -69                 | Program output: 41                 
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: 75                 
Correct output: -84                 | Program output: -2                 
Correct output: -65                 | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: -44                 | Program output: 1                  
Correct output: -71                 | Program output: -55                
Correct output: -45                 | Program output: -35                
Correct output: -92                 | Program output: -50                
Correct output: -84                 | Program output: 49                 
Correct output: -45                 | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_boolean_477} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 1, :instruction tagged_927} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction tagged_255} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup})
Lexicase best program: (exec_swap (exec_rot (integer_flush boolean_swap integer_inc integer_flush boolean_shove integer_yankdup) (boolean_frominteger) (in4 integer_add) integer_mult exec_swap (tag_boolean_477 exec_y_when_autoconstructing (exec_rot (exec_k_when_autoconstructing (exec_s () (exec_do*times (integer_dec integer_min tagged_927) exec_if () (integer_yankdup in1 exec_dup () exec_while () integer_max integer_yank integer_lt exec_empty boolean_flush) print_integer boolean_yank boolean_frominteger boolean_shove integer_div exec_while (boolean_shove boolean_stackdepth boolean_stackdepth exec_when () integer_mult in1) integer_rot integer_lte tagged_255 exec_eq integer_min integer_dup exec_yankdup) ()) ()) () ())) ()) ())
Lexicase best errors: [0 0 0 1 0 0 1 0 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 75
Percent parens: 0.320
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_yankdup} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in4} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_swap} {:close 0, :instruction tag_boolean_477} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_s} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 1, :instruction tagged_927} {:close 1, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_when} {:close 0, :instruction integer_mult} {:close 1, :instruction in1} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_lte} {:close 0, :instruction tagged_255} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_yankdup})
Zero cases best program: (exec_swap (exec_rot (integer_flush boolean_swap integer_inc integer_flush boolean_shove integer_yankdup) (boolean_frominteger) (in4 integer_add) integer_mult exec_swap (tag_boolean_477 exec_y_when_autoconstructing (exec_rot (exec_k_when_autoconstructing (exec_s () (exec_do*times (integer_dec integer_min tagged_927) exec_if () (integer_yankdup in1 exec_dup () exec_while () integer_max integer_yank integer_lt exec_empty boolean_flush) print_integer boolean_yank boolean_frominteger boolean_shove integer_div exec_while (boolean_shove boolean_stackdepth boolean_stackdepth exec_when () integer_mult in1) integer_rot integer_lte tagged_255 exec_eq integer_min integer_dup exec_yankdup) ()) ()) () ())) ()) ())
Zero cases best errors: [0 0 0 1 0 0 1 0 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 75
Percent parens: 0.320
--- Lexicase Population Statistics ---
Count of elite individuals by case: (141 142 140 283 831 140 1000 140 283 283)
Population mean number of elite cases: 3.38
Count of perfect (error zero) individuals by case: (141 142 140 283 831 140 0 140 283 283)
Population mean number of perfect (error zero) cases: 2.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction -76} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 1, :instruction tagged_927} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction integer_min} {:close 1, :instruction integer_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction tagged_255} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup})
Best program: (exec_swap (exec_rot (integer_flush boolean_shove -76 integer_flush boolean_and integer_yankdup boolean_invert_first_then_and) (in2 exec_k_when_autoconstructing (integer_pop) (exec_do*times (integer_dec integer_min tagged_927) exec_if (integer_yankdup in1 exec_dup (exec_while () integer_max integer_lte exec_empty boolean_flush) print_integer integer_min integer_rot) (exec_when (integer_gte exec_do*count (integer_eq boolean_shove integer_div exec_flush) integer_lte tagged_255) exec_eq integer_min integer_dup))) ()) ())
Errors: [0 0 0 1 0 0 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 40
Size: 55
Percent parens: 0.273
--- Population Statistics ---
Average total errors in population: 7.617
Median total errors in population: 9
Error averages by case: (0.859 0.858 0.86 0.717 0.169 0.86 1.0 0.86 0.717 0.717)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 35.099
Average program size in population (points): 45.554
Average percent parens in population: 0.226
Minimum age in population: 26.81500244140625
Maximum age in population: 32.48033142089844
Average age in population: 30.32567494773865
Median age in population: 30.39634609222412
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 66
Genome diversity (% unique genomes):	 0.721
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 82
Syntactic diversity (% unique Push programs):	 0.696
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 8200536
--- Timings ---
Current time: 1559314514572 milliseconds
Total Time:          58.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        43.8 seconds, 74.8%
Fitness Testing:      8.7 seconds, 14.8%
Report:               6.0 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 663
Test mean error for best: 0.66300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -87                 | Program output: -86                
Correct output: -88                 | Program output: -61                
Correct output: -55                 | Program output: 18                 
Correct output: -51                 | Program output: 0                  
Correct output: -42                 | Program output: -42                
Correct output: -12                 | Program output: -12                
Correct output: 24                  | Program output: 24                 
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 15                 
Correct output: -75                 | Program output: -6                 
Correct output: 1                   | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: 57                  | Program output: 57                 
Correct output: -16                 | Program output: -16                
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 38                 
Correct output: 17                  | Program output: 90                 
Correct output: 16                  | Program output: 43                 
Correct output: 54                  | Program output: 97                 
Correct output: 39                  | Program output: 60                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 55                 
Correct output: 17                  | Program output: 99                 
Correct output: 22                  | Program output: 76                 
Correct output: 1                   | Program output: 1                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 86                 
Correct output: 29                  | Program output: 58                 
Correct output: 2                   | Program output: 2                  
Correct output: 56                  | Program output: 90                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 14                  | Program output: 62                 
Correct output: 17                  | Program output: 81                 
Correct output: -32                 | Program output: 25                 
Correct output: -99                 | Program output: -78                
Correct output: -70                 | Program output: 76                 
Correct output: -38                 | Program output: -15                
Correct output: -94                 | Program output: 80                 
Correct output: -82                 | Program output: 42                 
Correct output: -68                 | Program output: -1                 
Correct output: -95                 | Program output: -95                
Correct output: -44                 | Program output: -5                 
Correct output: -23                 | Program output: 6                  
Correct output: -4                  | Program output: 13                 
Correct output: -40                 | Program output: 49                 
Correct output: -55                 | Program output: 48                 
Correct output: -79                 | Program output: -65                
Correct output: -38                 | Program output: 81                 
Correct output: -49                 | Program output: -49                
Correct output: -95                 | Program output: -19                
Correct output: -95                 | Program output: 73                 
Correct output: -100                | Program output: -26                
Correct output: 15                  | Program output: 62                 
Correct output: -79                 | Program output: -30                
Correct output: -94                 | Program output: 32                 
Correct output: -86                 | Program output: -36                
Correct output: -67                 | Program output: 4                  
Correct output: -83                 | Program output: -30                
Correct output: -76                 | Program output: 59                 
Correct output: -30                 | Program output: 84                 
Correct output: -61                 | Program output: -51                
Correct output: -38                 | Program output: 49                 
Correct output: -83                 | Program output: 19                 
Correct output: -59                 | Program output: -59                
Correct output: -33                 | Program output: 25                 
Correct output: -92                 | Program output: 7                  
Correct output: -53                 | Program output: -14                
Correct output: 60                  | Program output: 66                 
Correct output: -48                 | Program output: -48                
Correct output: -61                 | Program output: 84                 
Correct output: -57                 | Program output: 89                 
Correct output: -76                 | Program output: 36                 
Correct output: -59                 | Program output: 56                 
Correct output: 1                   | Program output: 1                  
Correct output: -88                 | Program output: -4                 
Correct output: -36                 | Program output: -15                
Correct output: -80                 | Program output: -80                
Correct output: -33                 | Program output: 67                 
Correct output: -72                 | Program output: -50                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -14                
Correct output: -34                 | Program output: 94                 
Correct output: -84                 | Program output: -84                
Correct output: -65                 | Program output: -65                
Correct output: -89                 | Program output: -67                
Correct output: -87                 | Program output: 10                 
Correct output: -84                 | Program output: 35                 
Correct output: -44                 | Program output: -44                
Correct output: -71                 | Program output: 52                 
Correct output: -45                 | Program output: 74                 
Correct output: -92                 | Program output: 96                 
Correct output: -84                 | Program output: -45                
Correct output: -45                 | Program output: -45                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 2, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 2, :instruction tagged_927} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq})
Lexicase best program: (integer_div integer_lt boolean_shove integer_yankdup boolean_invert_first_then_and in4 integer_add integer_mult integer_pop exec_do*times (integer_dec integer_min tagged_927) exec_if (boolean_invert_second_then_and in1 exec_dup (exec_while () integer_max integer_yank integer_lt exec_empty boolean_flush) print_integer boolean_yank boolean_frominteger integer_min boolean_shove) (exec_y_when_autoconstructing (integer_gte boolean_yankdup integer_max integer_gt) boolean_flush) print_integer boolean_yank print_boolean integer_min boolean_shove exec_y_when_autoconstructing (integer_gte exec_do*count (integer_eq)))
Lexicase best errors: [0 1 1 1 0 1 1 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 52
Percent parens: 0.173
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 2, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 2, :instruction tagged_927} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq})
Zero cases best program: (integer_div integer_lt boolean_shove integer_yankdup boolean_invert_first_then_and in4 integer_add integer_mult integer_pop exec_do*times (integer_dec integer_min tagged_927) exec_if (boolean_invert_second_then_and in1 exec_dup (exec_while () integer_max integer_yank integer_lt exec_empty boolean_flush) print_integer boolean_yank boolean_frominteger integer_min boolean_shove) (exec_y_when_autoconstructing (integer_gte boolean_yankdup integer_max integer_gt) boolean_flush) print_integer boolean_yank print_boolean integer_min boolean_shove exec_y_when_autoconstructing (integer_gte exec_do*count (integer_eq)))
Zero cases best errors: [0 1 1 1 0 1 1 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 52
Percent parens: 0.173
--- Lexicase Population Statistics ---
Count of elite individuals by case: (535 1000 1000 1000 538 279 1000 279 535 279)
Population mean number of elite cases: 6.45
Count of perfect (error zero) individuals by case: (535 0 0 0 538 279 0 279 535 279)
Population mean number of perfect (error zero) cases: 2.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in2} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq})
Best program: (integer_div integer_add boolean_shove integer_yankdup boolean_invert_first_then_and in2 integer_add integer_mult boolean_rot exec_y_when_autoconstructing (exec_rot (exec_k_when_autoconstructing (integer_pop) (exec_do*times (boolean_empty exec_when () integer_dec exec_eq) boolean_swap boolean_dup_items) exec_flush integer_swap) (exec_y_when_autoconstructing (integer_gt boolean_invert_first_then_and boolean_flush integer_max integer_gt) boolean_flush) (print_integer boolean_yank print_boolean integer_min boolean_xor) exec_y_when_autoconstructing (integer_gte exec_do*count (integer_eq))))
Errors: [1 1 1 1 1 0 1 0 1 0]
Total: 7
Mean: 0.7
Genome size: 38
Size: 50
Percent parens: 0.240
--- Population Statistics ---
Average total errors in population: 7.555
Median total errors in population: 7
Error averages by case: (0.465 1.0 1.0 1.0 0.462 0.721 1.0 0.721 0.465 0.721)
Error minima by case: (0 1 1 1 0 0 1 0 0 0)
Average genome size in population (length): 36.998
Average program size in population (points): 49.432
Average percent parens in population: 0.249
Minimum age in population: 28.46981811523438
Maximum age in population: 33.77670669555664
Average age in population: 31.74674230098724
Median age in population: 31.83839321136475
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 34
Genome diversity (% unique genomes):	 0.685
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.672
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 8587194
--- Timings ---
Current time: 1559314517255 milliseconds
Total Time:          61.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        45.9 seconds, 74.9%
Fitness Testing:      9.0 seconds, 14.7%
Report:               6.3 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: -88                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: -42                 | Program output: 14                 
Correct output: -12                 | Program output: 89                 
Correct output: 24                  | Program output: 77                 
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 15                 
Correct output: -75                 | Program output: -6                 
Correct output: 1                   | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: 57                  | Program output: 57                 
Correct output: -16                 | Program output: -16                
Correct output: 17                  | Program output: 52                 
Correct output: 30                  | Program output: 33                 
Correct output: 17                  | Program output: 63                 
Correct output: 16                  | Program output: 72                 
Correct output: 54                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 50                 
Correct output: 9                   | Program output: 38                 
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 6                  
Correct output: 19                  | Program output: 73                 
Correct output: 15                  | Program output: 96                 
Correct output: 29                  | Program output: 29                 
Correct output: 2                   | Program output: 11                 
Correct output: 56                  | Program output: 87                 
Correct output: 1                   | Program output: 25                 
Correct output: 6                   | Program output: 37                 
Correct output: 14                  | Program output: 57                 
Correct output: 17                  | Program output: 17                 
Correct output: -32                 | Program output: 47                 
Correct output: -99                 | Program output: 62                 
Correct output: -70                 | Program output: 2                  
Correct output: -38                 | Program output: -17                
Correct output: -94                 | Program output: -75                
Correct output: -82                 | Program output: 76                 
Correct output: -68                 | Program output: -53                
Correct output: -95                 | Program output: 73                 
Correct output: -44                 | Program output: 87                 
Correct output: -23                 | Program output: 81                 
Correct output: -4                  | Program output: 75                 
Correct output: -40                 | Program output: -40                
Correct output: -55                 | Program output: 72                 
Correct output: -79                 | Program output: -27                
Correct output: -38                 | Program output: -38                
Correct output: -49                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: -79                 | Program output: 56                 
Correct output: -94                 | Program output: -43                
Correct output: -86                 | Program output: 89                 
Correct output: -67                 | Program output: 49                 
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -30                 | Program output: -8                 
Correct output: -61                 | Program output: -61                
Correct output: -38                 | Program output: -38                
Correct output: -83                 | Program output: -83                
Correct output: -59                 | Program output: 0                  
Correct output: -33                 | Program output: -14                
Correct output: -92                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: 60                  | Program output: 60                 
Correct output: -48                 | Program output: 27                 
Correct output: -61                 | Program output: -31                
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: 54                 
Correct output: -59                 | Program output: -59                
Correct output: 1                   | Program output: 92                 
Correct output: -88                 | Program output: -33                
Correct output: -36                 | Program output: 9                  
Correct output: -80                 | Program output: -26                
Correct output: -33                 | Program output: 72                 
Correct output: -72                 | Program output: -54                
Correct output: -69                 | Program output: 41                 
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: 75                 
Correct output: -84                 | Program output: -2                 
Correct output: -65                 | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: -44                 | Program output: 1                  
Correct output: -71                 | Program output: -55                
Correct output: -45                 | Program output: -35                
Correct output: -92                 | Program output: -50                
Correct output: -84                 | Program output: 49                 
Correct output: -45                 | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 2, :instruction tagged_927} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_flush})
Lexicase best program: (exec_stackdepth integer_add integer_mult integer_div exec_empty exec_y_when_autoconstructing (exec_rot (exec_k_when_autoconstructing (integer_pop) (exec_when (integer_dec integer_min tagged_927)) exec_if (integer_yankdup in1 exec_dup (exec_dup (integer_max integer_yank exec_y_when_autoconstructing (exec_rot (exec_k_when_autoconstructing (integer_pop) (exec_do*times (boolean_empty exec_when () integer_dec exec_eq) boolean_swap boolean_dup_items) exec_flush integer_swap) (exec_while (integer_gt boolean_invert_first_then_and boolean_yankdup integer_max integer_gt) boolean_flush) (print_integer boolean_yank print_boolean integer_min boolean_shove) exec_y_when_autoconstructing (integer_gte exec_do*count (integer_flush)))))) ()) () ()))
Lexicase best errors: [0 0 0 1 0 1 1 0 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 72
Percent parens: 0.319
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_stackdepth} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 2, :instruction tagged_927} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction boolean_empty} {:close 1, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction exec_flush} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_while} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_max} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_flush})
Zero cases best program: (exec_stackdepth integer_add integer_mult integer_div exec_empty exec_y_when_autoconstructing (exec_rot (exec_k_when_autoconstructing (integer_pop) (exec_when (integer_dec integer_min tagged_927)) exec_if (integer_yankdup in1 exec_dup (exec_dup (integer_max integer_yank exec_y_when_autoconstructing (exec_rot (exec_k_when_autoconstructing (integer_pop) (exec_do*times (boolean_empty exec_when () integer_dec exec_eq) boolean_swap boolean_dup_items) exec_flush integer_swap) (exec_while (integer_gt boolean_invert_first_then_and boolean_yankdup integer_max integer_gt) boolean_flush) (print_integer boolean_yank print_boolean integer_min boolean_shove) exec_y_when_autoconstructing (integer_gte exec_do*count (integer_flush)))))) ()) () ()))
Zero cases best errors: [0 0 0 1 0 1 1 0 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 72
Percent parens: 0.319
--- Lexicase Population Statistics ---
Count of elite individuals by case: (437 438 437 1000 839 1000 1000 439 1000 390)
Population mean number of elite cases: 6.98
Count of perfect (error zero) individuals by case: (437 438 437 0 839 0 0 439 0 390)
Population mean number of perfect (error zero) cases: 2.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 1, :instruction integer_min} {:close 2, :instruction tagged_990} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_mult} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 1, :instruction 42} {:close 0, :instruction integer_lte} {:close 1, :instruction tagged_255} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min})
Best program: (integer_div integer_add integer_mult integer_div tag_boolean_477 exec_y_when_autoconstructing (exec_rot (exec_k_when_autoconstructing (boolean_rot) (exec_do*times (integer_dec integer_min) tagged_990)) (exec_if (integer_yankdup in1 exec_dup (exec_while () integer_max integer_yank integer_lt exec_empty integer_mult) print_integer boolean_yank integer_rot integer_min boolean_shove 42) (integer_lte tagged_255) exec_eq integer_min) ()))
Errors: [0 0 0 1 0 1 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 33
Size: 45
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 7.02
Median total errors in population: 8
Error averages by case: (0.563 0.562 0.563 1.0 0.161 1.0 1.0 0.561 1.0 0.61)
Error minima by case: (0 0 0 1 0 1 1 0 1 0)
Average genome size in population (length): 36.628
Average program size in population (points): 48.7
Average percent parens in population: 0.245
Minimum age in population: 29.61212158203125
Maximum age in population: 35.38071393966675
Average age in population: 33.17976024484634
Median age in population: 33.29623174667358
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 33
Genome diversity (% unique genomes):	 0.729
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.715
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 8934507
--- Timings ---
Current time: 1559314519769 milliseconds
Total Time:          63.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        47.8 seconds, 74.9%
Fitness Testing:      9.3 seconds, 14.6%
Report:               6.6 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 645
Test mean error for best: 0.64500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: -88                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: -42                 | Program output: 14                 
Correct output: -12                 | Program output: 89                 
Correct output: 24                  | Program output: 77                 
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 15                 
Correct output: -75                 | Program output: -6                 
Correct output: 1                   | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: 57                  | Program output: 57                 
Correct output: -16                 | Program output: -16                
Correct output: 17                  | Program output: 52                 
Correct output: 30                  | Program output: 33                 
Correct output: 17                  | Program output: 63                 
Correct output: 16                  | Program output: 72                 
Correct output: 54                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 50                 
Correct output: 9                   | Program output: 38                 
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 6                  
Correct output: 19                  | Program output: 73                 
Correct output: 15                  | Program output: 96                 
Correct output: 29                  | Program output: 29                 
Correct output: 2                   | Program output: 11                 
Correct output: 56                  | Program output: 87                 
Correct output: 1                   | Program output: 25                 
Correct output: 6                   | Program output: 37                 
Correct output: 14                  | Program output: 57                 
Correct output: 17                  | Program output: 17                 
Correct output: -32                 | Program output: 47                 
Correct output: -99                 | Program output: 62                 
Correct output: -70                 | Program output: 2                  
Correct output: -38                 | Program output: -17                
Correct output: -94                 | Program output: -75                
Correct output: -82                 | Program output: 76                 
Correct output: -68                 | Program output: -53                
Correct output: -95                 | Program output: 73                 
Correct output: -44                 | Program output: 87                 
Correct output: -23                 | Program output: 81                 
Correct output: -4                  | Program output: 75                 
Correct output: -40                 | Program output: -40                
Correct output: -55                 | Program output: 72                 
Correct output: -79                 | Program output: -27                
Correct output: -38                 | Program output: -38                
Correct output: -49                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: -79                 | Program output: 56                 
Correct output: -94                 | Program output: -43                
Correct output: -86                 | Program output: 89                 
Correct output: -67                 | Program output: 49                 
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -30                 | Program output: -8                 
Correct output: -61                 | Program output: -61                
Correct output: -38                 | Program output: -38                
Correct output: -83                 | Program output: -83                
Correct output: -59                 | Program output: 0                  
Correct output: -33                 | Program output: -14                
Correct output: -92                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: 60                  | Program output: 60                 
Correct output: -48                 | Program output: 27                 
Correct output: -61                 | Program output: -31                
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: 54                 
Correct output: -59                 | Program output: -59                
Correct output: 1                   | Program output: 92                 
Correct output: -88                 | Program output: -33                
Correct output: -36                 | Program output: 9                  
Correct output: -80                 | Program output: -26                
Correct output: -33                 | Program output: 72                 
Correct output: -72                 | Program output: -54                
Correct output: -69                 | Program output: 41                 
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: 75                 
Correct output: -84                 | Program output: -2                 
Correct output: -65                 | Program output: 95                 
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: -44                 | Program output: 1                  
Correct output: -71                 | Program output: -55                
Correct output: -45                 | Program output: -35                
Correct output: -92                 | Program output: -50                
Correct output: -84                 | Program output: 49                 
Correct output: -45                 | Program output: 91                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 2, :instruction tagged_927} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction tagged_255} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Lexicase best program: (integer_div integer_add integer_mult integer_div tag_boolean_477 exec_y_when_autoconstructing (exec_rot (exec_k_when_autoconstructing (boolean_rot exec_do*times (integer_dec integer_min tagged_927)) (exec_if (integer_yankdup in1 exec_dup (exec_while () integer_max integer_yank integer_lt exec_empty boolean_flush) print_integer boolean_yank boolean_frominteger integer_min boolean_shove) (exec_flush) integer_lte tagged_255) exec_eq integer_min integer_dup) (boolean_yank) ()))
Lexicase best errors: [1 1 1 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 47
Percent parens: 0.255
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 2, :instruction tagged_927} {:close 0, :instruction exec_if} {:close 0, :instruction integer_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction tagged_255} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_min} {:close 1, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Zero cases best program: (integer_div integer_add integer_mult integer_div tag_boolean_477 exec_y_when_autoconstructing (exec_rot (exec_k_when_autoconstructing (boolean_rot exec_do*times (integer_dec integer_min tagged_927)) (exec_if (integer_yankdup in1 exec_dup (exec_while () integer_max integer_yank integer_lt exec_empty boolean_flush) print_integer boolean_yank boolean_frominteger integer_min boolean_shove) (exec_flush) integer_lte tagged_255) exec_eq integer_min integer_dup) (boolean_yank) ()))
Zero cases best errors: [1 1 1 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 47
Percent parens: 0.255
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 148 724 148 727 148 1000 874 715)
Population mean number of elite cases: 6.48
Count of perfect (error zero) individuals by case: (0 0 148 724 148 727 148 0 874 715)
Population mean number of perfect (error zero) cases: 3.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction integer_add} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction in4} {:close 1, :instruction integer_add} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 0, :instruction integer_max} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_while} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_div} {:close 1, :instruction exec_flush})
Best program: (integer_div integer_add boolean_shove integer_yankdup boolean_invert_first_then_and in4 integer_add integer_mult boolean_rot exec_y_when_autoconstructing (exec_dup () exec_while () integer_max integer_yank integer_lt exec_empty boolean_flush) boolean_dup_times in1 exec_dup (exec_while () print_integer boolean_frominteger integer_min boolean_shove) exec_y_when_autoconstructing (integer_gte exec_do*count (integer_eq exec_while (integer_min boolean_shove) exec_k_when_autoconstructing (exec_y_when_autoconstructing (integer_gte exec_do*count (integer_eq boolean_shove integer_div exec_flush))) ())))
Errors: [1 1 1 0 1 0 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 40
Size: 53
Percent parens: 0.245
--- Population Statistics ---
Average total errors in population: 6.516
Median total errors in population: 6
Error averages by case: (1.0 1.0 0.852 0.276 0.852 0.273 0.852 1.0 0.126 0.285)
Error minima by case: (1 1 0 0 0 0 0 1 0 0)
Average genome size in population (length): 36.248
Average program size in population (points): 48.497
Average percent parens in population: 0.250
Minimum age in population: 31.53532409667969
Maximum age in population: 36.71588611602783
Average age in population: 34.70240539550781
Median age in population: 34.74737310409546
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.765
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.754
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 9353175
--- Timings ---
Current time: 1559314522288 milliseconds
Total Time:          66.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        49.6 seconds, 74.9%
Fitness Testing:      9.7 seconds, 14.6%
Report:               6.9 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: -88                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: -42                 | Program output: -42                
Correct output: -12                 | Program output: -12                
Correct output: 24                  | Program output: 24                 
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 15                 
Correct output: -75                 | Program output: -6                 
Correct output: 1                   | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: 57                  | Program output: 57                 
Correct output: -16                 | Program output: -16                
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 33                 
Correct output: 17                  | Program output: 63                 
Correct output: 16                  | Program output: 43                 
Correct output: 54                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 38                 
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 1                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 86                 
Correct output: 29                  | Program output: 29                 
Correct output: 2                   | Program output: 2                  
Correct output: 56                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 14                  | Program output: 57                 
Correct output: 17                  | Program output: 17                 
Correct output: -32                 | Program output: 25                 
Correct output: -99                 | Program output: -78                
Correct output: -70                 | Program output: 2                  
Correct output: -38                 | Program output: -17                
Correct output: -94                 | Program output: -75                
Correct output: -82                 | Program output: 42                 
Correct output: -68                 | Program output: -53                
Correct output: -95                 | Program output: -95                
Correct output: -44                 | Program output: -5                 
Correct output: -23                 | Program output: 6                  
Correct output: -4                  | Program output: 13                 
Correct output: -40                 | Program output: -40                
Correct output: -55                 | Program output: 48                 
Correct output: -79                 | Program output: -65                
Correct output: -38                 | Program output: -38                
Correct output: -49                 | Program output: -49                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: -79                 | Program output: -30                
Correct output: -94                 | Program output: -43                
Correct output: -86                 | Program output: -36                
Correct output: -67                 | Program output: 4                  
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -30                 | Program output: -8                 
Correct output: -61                 | Program output: -61                
Correct output: -38                 | Program output: -38                
Correct output: -83                 | Program output: -83                
Correct output: -59                 | Program output: -59                
Correct output: -33                 | Program output: -14                
Correct output: -92                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: 60                  | Program output: 60                 
Correct output: -48                 | Program output: -48                
Correct output: -61                 | Program output: -31                
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: 36                 
Correct output: -59                 | Program output: -59                
Correct output: 1                   | Program output: 1                  
Correct output: -88                 | Program output: -33                
Correct output: -36                 | Program output: -15                
Correct output: -80                 | Program output: -80                
Correct output: -33                 | Program output: 67                 
Correct output: -72                 | Program output: -54                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: 75                 
Correct output: -84                 | Program output: -84                
Correct output: -65                 | Program output: -65                
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: -44                 | Program output: -44                
Correct output: -71                 | Program output: -55                
Correct output: -45                 | Program output: -35                
Correct output: -92                 | Program output: -50                
Correct output: -84                 | Program output: -45                
Correct output: -45                 | Program output: -45                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Lexicase best program: (integer_div boolean_shove integer_yankdup integer_gte in2 integer_add in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_eq boolean_shove integer_min integer_dup boolean_yank))
Lexicase best errors: [1 0 1 0 0 1 0 1 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 26
Percent parens: 0.115
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Zero cases best program: (integer_div boolean_shove integer_yankdup integer_gte in2 integer_add in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_eq boolean_shove integer_min integer_dup boolean_yank))
Zero cases best errors: [1 0 1 0 0 1 0 1 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 26
Percent parens: 0.115
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 447 1000 814 811 1000 368 1000 368 1000)
Population mean number of elite cases: 7.81
Count of perfect (error zero) individuals by case: (0 447 0 814 811 0 368 0 368 0)
Population mean number of perfect (error zero) cases: 2.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Best program: (integer_div boolean_shove integer_yankdup integer_gte in2 integer_add in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_eq boolean_shove integer_min integer_dup boolean_yank))
Errors: [1 0 1 0 0 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 23
Size: 26
Percent parens: 0.115
--- Population Statistics ---
Average total errors in population: 7.192
Median total errors in population: 7
Error averages by case: (1.0 0.553 1.0 0.186 0.189 1.0 0.632 1.0 0.632 1.0)
Error minima by case: (1 0 1 0 0 1 0 1 0 1)
Average genome size in population (length): 36.561
Average program size in population (points): 48.665
Average percent parens in population: 0.246
Minimum age in population: 32.53532409667969
Maximum age in population: 38.56797099113464
Average age in population: 36.17296953749657
Median age in population: 36.20914971828461
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.762
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.75
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 9701103
--- Timings ---
Current time: 1559314524681 milliseconds
Total Time:          68.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        51.5 seconds, 74.9%
Fitness Testing:     10.0 seconds, 14.5%
Report:               7.2 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: -88                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: -42                 | Program output: -42                
Correct output: -12                 | Program output: -12                
Correct output: 24                  | Program output: 24                 
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 15                 
Correct output: -75                 | Program output: -6                 
Correct output: 1                   | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: 57                  | Program output: 57                 
Correct output: -16                 | Program output: -16                
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 33                 
Correct output: 17                  | Program output: 63                 
Correct output: 16                  | Program output: 43                 
Correct output: 54                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 38                 
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 1                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 86                 
Correct output: 29                  | Program output: 29                 
Correct output: 2                   | Program output: 2                  
Correct output: 56                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 14                  | Program output: 57                 
Correct output: 17                  | Program output: 17                 
Correct output: -32                 | Program output: 25                 
Correct output: -99                 | Program output: -78                
Correct output: -70                 | Program output: 2                  
Correct output: -38                 | Program output: -17                
Correct output: -94                 | Program output: -75                
Correct output: -82                 | Program output: 42                 
Correct output: -68                 | Program output: -53                
Correct output: -95                 | Program output: -95                
Correct output: -44                 | Program output: -5                 
Correct output: -23                 | Program output: 6                  
Correct output: -4                  | Program output: 13                 
Correct output: -40                 | Program output: -40                
Correct output: -55                 | Program output: 48                 
Correct output: -79                 | Program output: -65                
Correct output: -38                 | Program output: -38                
Correct output: -49                 | Program output: -49                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: -79                 | Program output: -30                
Correct output: -94                 | Program output: -43                
Correct output: -86                 | Program output: -36                
Correct output: -67                 | Program output: 4                  
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -30                 | Program output: -8                 
Correct output: -61                 | Program output: -61                
Correct output: -38                 | Program output: -38                
Correct output: -83                 | Program output: -83                
Correct output: -59                 | Program output: -59                
Correct output: -33                 | Program output: -14                
Correct output: -92                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: 60                  | Program output: 60                 
Correct output: -48                 | Program output: -48                
Correct output: -61                 | Program output: -31                
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: 36                 
Correct output: -59                 | Program output: -59                
Correct output: 1                   | Program output: 1                  
Correct output: -88                 | Program output: -33                
Correct output: -36                 | Program output: -15                
Correct output: -80                 | Program output: -80                
Correct output: -33                 | Program output: 67                 
Correct output: -72                 | Program output: -54                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: 75                 
Correct output: -84                 | Program output: -84                
Correct output: -65                 | Program output: -65                
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: -44                 | Program output: -44                
Correct output: -71                 | Program output: -55                
Correct output: -45                 | Program output: -35                
Correct output: -92                 | Program output: -50                
Correct output: -84                 | Program output: -45                
Correct output: -45                 | Program output: -45                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Lexicase best program: (integer_div boolean_shove integer_yankdup integer_gte in2 integer_add in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_eq boolean_shove integer_min integer_dup boolean_yank))
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 26
Percent parens: 0.115
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Zero cases best program: (integer_div boolean_shove integer_yankdup integer_gte in2 integer_add in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_eq boolean_shove integer_min integer_dup boolean_yank))
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 26
Percent parens: 0.115
--- Lexicase Population Statistics ---
Count of elite individuals by case: (945 954 1000 937 944 945 937 944 937 936)
Population mean number of elite cases: 9.48
Count of perfect (error zero) individuals by case: (945 954 0 937 944 945 937 944 937 936)
Population mean number of perfect (error zero) cases: 8.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Best program: (integer_div boolean_shove integer_yankdup integer_gte in2 integer_add in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_eq boolean_shove integer_min integer_dup boolean_yank))
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 23
Size: 26
Percent parens: 0.115
--- Population Statistics ---
Average total errors in population: 1.521
Median total errors in population: 1
Error averages by case: (0.055 0.046 1.0 0.063 0.056 0.055 0.063 0.056 0.063 0.064)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 22.921
Average program size in population (points): 25.94
Average percent parens in population: 0.117
Minimum age in population: 38.6277289390564
Maximum age in population: 39.6277289390564
Average age in population: 39.1197289390564
Median age in population: 38.6277289390564
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 716
Genome diversity (% unique genomes):	 0.252
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 751
Syntactic diversity (% unique Push programs):	 0.227
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 9945354
--- Timings ---
Current time: 1559314527010 milliseconds
Total Time:          71.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        53.4 seconds, 75.0%
Fitness Testing:     10.2 seconds, 14.3%
Report:               7.4 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: -88                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: -42                 | Program output: -42                
Correct output: -12                 | Program output: -12                
Correct output: 24                  | Program output: 24                 
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 15                 
Correct output: -75                 | Program output: -6                 
Correct output: 1                   | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: 57                  | Program output: 57                 
Correct output: -16                 | Program output: -16                
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 33                 
Correct output: 17                  | Program output: 63                 
Correct output: 16                  | Program output: 43                 
Correct output: 54                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 38                 
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 1                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 86                 
Correct output: 29                  | Program output: 29                 
Correct output: 2                   | Program output: 2                  
Correct output: 56                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 14                  | Program output: 57                 
Correct output: 17                  | Program output: 17                 
Correct output: -32                 | Program output: 25                 
Correct output: -99                 | Program output: -78                
Correct output: -70                 | Program output: 2                  
Correct output: -38                 | Program output: -17                
Correct output: -94                 | Program output: -75                
Correct output: -82                 | Program output: 42                 
Correct output: -68                 | Program output: -53                
Correct output: -95                 | Program output: -95                
Correct output: -44                 | Program output: -5                 
Correct output: -23                 | Program output: 6                  
Correct output: -4                  | Program output: 13                 
Correct output: -40                 | Program output: -40                
Correct output: -55                 | Program output: 48                 
Correct output: -79                 | Program output: -65                
Correct output: -38                 | Program output: -38                
Correct output: -49                 | Program output: -49                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: -79                 | Program output: -30                
Correct output: -94                 | Program output: -43                
Correct output: -86                 | Program output: -36                
Correct output: -67                 | Program output: 4                  
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -30                 | Program output: -8                 
Correct output: -61                 | Program output: -61                
Correct output: -38                 | Program output: -38                
Correct output: -83                 | Program output: -83                
Correct output: -59                 | Program output: -59                
Correct output: -33                 | Program output: -14                
Correct output: -92                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: 60                  | Program output: 60                 
Correct output: -48                 | Program output: -48                
Correct output: -61                 | Program output: -31                
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: 36                 
Correct output: -59                 | Program output: -59                
Correct output: 1                   | Program output: 1                  
Correct output: -88                 | Program output: -33                
Correct output: -36                 | Program output: -15                
Correct output: -80                 | Program output: -80                
Correct output: -33                 | Program output: 67                 
Correct output: -72                 | Program output: -54                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: 75                 
Correct output: -84                 | Program output: -84                
Correct output: -65                 | Program output: -65                
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: -44                 | Program output: -44                
Correct output: -71                 | Program output: -55                
Correct output: -45                 | Program output: -35                
Correct output: -92                 | Program output: -50                
Correct output: -84                 | Program output: -45                
Correct output: -45                 | Program output: -45                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Lexicase best program: (integer_div boolean_shove integer_yankdup integer_gte in2 integer_add in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_eq boolean_shove integer_min integer_dup boolean_yank))
Lexicase best errors: [1 0 0 0 1 0 0 0 1 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 26
Percent parens: 0.115
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Zero cases best program: (integer_div boolean_shove integer_yankdup integer_gte in2 integer_add in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_eq boolean_shove integer_min integer_dup boolean_yank))
Zero cases best errors: [1 0 0 0 1 0 0 0 1 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 26
Percent parens: 0.115
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 918 919 938 1000 939 931 919 1000 1000)
Population mean number of elite cases: 9.56
Count of perfect (error zero) individuals by case: (0 918 919 938 0 939 931 919 0 0)
Population mean number of perfect (error zero) cases: 5.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_rot})
Best program: (integer_div boolean_shove integer_yankdup integer_gte in2 integer_add in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_eq boolean_shove integer_min integer_dup integer_rot))
Errors: [1 0 0 0 1 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 23
Size: 26
Percent parens: 0.115
--- Population Statistics ---
Average total errors in population: 4.436
Median total errors in population: 4
Error averages by case: (1.0 0.082 0.081 0.062 1.0 0.061 0.069 0.081 1.0 1.0)
Error minima by case: (1 0 0 0 1 0 0 0 1 1)
Average genome size in population (length): 23.053
Average program size in population (points): 26.113
Average percent parens in population: 0.117
Minimum age in population: 39.6277289390564
Maximum age in population: 41.6277289390564
Average age in population: 40.6197289390564
Median age in population: 40.6277289390564
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 550
Genome diversity (% unique genomes):	 0.35
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 606
Syntactic diversity (% unique Push programs):	 0.312
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 10191565
--- Timings ---
Current time: 1559314528878 milliseconds
Total Time:          73.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.8 seconds, 75.1%
Fitness Testing:     10.4 seconds, 14.3%
Report:               7.6 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: -88                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: -42                 | Program output: -42                
Correct output: -12                 | Program output: -12                
Correct output: 24                  | Program output: 24                 
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 15                 
Correct output: -75                 | Program output: -6                 
Correct output: 1                   | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: 57                  | Program output: 57                 
Correct output: -16                 | Program output: -16                
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 33                 
Correct output: 17                  | Program output: 63                 
Correct output: 16                  | Program output: 43                 
Correct output: 54                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 38                 
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 1                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 86                 
Correct output: 29                  | Program output: 29                 
Correct output: 2                   | Program output: 2                  
Correct output: 56                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 14                  | Program output: 57                 
Correct output: 17                  | Program output: 17                 
Correct output: -32                 | Program output: 25                 
Correct output: -99                 | Program output: -78                
Correct output: -70                 | Program output: 2                  
Correct output: -38                 | Program output: -17                
Correct output: -94                 | Program output: -75                
Correct output: -82                 | Program output: 42                 
Correct output: -68                 | Program output: -53                
Correct output: -95                 | Program output: -95                
Correct output: -44                 | Program output: -5                 
Correct output: -23                 | Program output: 6                  
Correct output: -4                  | Program output: 13                 
Correct output: -40                 | Program output: -40                
Correct output: -55                 | Program output: 48                 
Correct output: -79                 | Program output: -65                
Correct output: -38                 | Program output: -38                
Correct output: -49                 | Program output: -49                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: -79                 | Program output: -30                
Correct output: -94                 | Program output: -43                
Correct output: -86                 | Program output: -36                
Correct output: -67                 | Program output: 4                  
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -30                 | Program output: -8                 
Correct output: -61                 | Program output: -61                
Correct output: -38                 | Program output: -38                
Correct output: -83                 | Program output: -83                
Correct output: -59                 | Program output: -59                
Correct output: -33                 | Program output: -14                
Correct output: -92                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: 60                  | Program output: 60                 
Correct output: -48                 | Program output: -48                
Correct output: -61                 | Program output: -31                
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: 36                 
Correct output: -59                 | Program output: -59                
Correct output: 1                   | Program output: 1                  
Correct output: -88                 | Program output: -33                
Correct output: -36                 | Program output: -15                
Correct output: -80                 | Program output: -80                
Correct output: -33                 | Program output: 67                 
Correct output: -72                 | Program output: -54                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: 75                 
Correct output: -84                 | Program output: -84                
Correct output: -65                 | Program output: -65                
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: -44                 | Program output: -44                
Correct output: -71                 | Program output: -55                
Correct output: -45                 | Program output: -35                
Correct output: -92                 | Program output: -50                
Correct output: -84                 | Program output: -45                
Correct output: -45                 | Program output: -45                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Lexicase best program: (integer_div boolean_shove integer_yankdup integer_gte in2 integer_add in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger boolean_frominteger exec_do*count (integer_eq boolean_shove integer_min integer_dup boolean_yank))
Lexicase best errors: [0 1 0 1 1 1 0 1 1 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 26
Percent parens: 0.115
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Zero cases best program: (integer_div boolean_shove integer_yankdup integer_gte in2 integer_add in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger boolean_frominteger exec_do*count (integer_eq boolean_shove integer_min integer_dup boolean_yank))
Zero cases best errors: [0 1 0 1 1 1 0 1 1 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 26
Percent parens: 0.115
--- Lexicase Population Statistics ---
Count of elite individuals by case: (963 1000 948 1000 1000 1000 929 1000 1000 938)
Population mean number of elite cases: 9.78
Count of perfect (error zero) individuals by case: (963 0 948 0 0 0 929 0 0 938)
Population mean number of perfect (error zero) cases: 3.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Best program: (integer_div boolean_shove integer_yankdup integer_gte in2 integer_add in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_eq boolean_shove integer_min integer_dup boolean_yank))
Errors: [0 1 0 1 1 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 23
Size: 26
Percent parens: 0.115
--- Population Statistics ---
Average total errors in population: 6.222
Median total errors in population: 6
Error averages by case: (0.037 1.0 0.052 1.0 1.0 1.0 0.071 1.0 1.0 0.062)
Error minima by case: (0 1 0 1 1 1 0 1 1 0)
Average genome size in population (length): 23.124
Average program size in population (points): 26.226
Average percent parens in population: 0.118
Minimum age in population: 40.6277289390564
Maximum age in population: 43.6277289390564
Average age in population: 42.0737289390564
Median age in population: 42.1277289390564
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 413
Genome diversity (% unique genomes):	 0.441
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 488
Syntactic diversity (% unique Push programs):	 0.387
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 10440034
--- Timings ---
Current time: 1559314530783 milliseconds
Total Time:          74.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.3 seconds, 75.2%
Fitness Testing:     10.7 seconds, 14.2%
Report:               7.8 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: -88                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: -42                 | Program output: -42                
Correct output: -12                 | Program output: -12                
Correct output: 24                  | Program output: 24                 
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 15                 
Correct output: -75                 | Program output: -6                 
Correct output: 1                   | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: 57                  | Program output: 57                 
Correct output: -16                 | Program output: -16                
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 33                 
Correct output: 17                  | Program output: 63                 
Correct output: 16                  | Program output: 43                 
Correct output: 54                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 38                 
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 1                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 86                 
Correct output: 29                  | Program output: 29                 
Correct output: 2                   | Program output: 2                  
Correct output: 56                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 14                  | Program output: 57                 
Correct output: 17                  | Program output: 17                 
Correct output: -32                 | Program output: 25                 
Correct output: -99                 | Program output: -78                
Correct output: -70                 | Program output: 2                  
Correct output: -38                 | Program output: -17                
Correct output: -94                 | Program output: -75                
Correct output: -82                 | Program output: 42                 
Correct output: -68                 | Program output: -53                
Correct output: -95                 | Program output: -95                
Correct output: -44                 | Program output: -5                 
Correct output: -23                 | Program output: 6                  
Correct output: -4                  | Program output: 13                 
Correct output: -40                 | Program output: -40                
Correct output: -55                 | Program output: 48                 
Correct output: -79                 | Program output: -65                
Correct output: -38                 | Program output: -38                
Correct output: -49                 | Program output: -49                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: -79                 | Program output: -30                
Correct output: -94                 | Program output: -43                
Correct output: -86                 | Program output: -36                
Correct output: -67                 | Program output: 4                  
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -30                 | Program output: -8                 
Correct output: -61                 | Program output: -61                
Correct output: -38                 | Program output: -38                
Correct output: -83                 | Program output: -83                
Correct output: -59                 | Program output: -59                
Correct output: -33                 | Program output: -14                
Correct output: -92                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: 60                  | Program output: 60                 
Correct output: -48                 | Program output: -48                
Correct output: -61                 | Program output: -31                
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: 36                 
Correct output: -59                 | Program output: -59                
Correct output: 1                   | Program output: 1                  
Correct output: -88                 | Program output: -33                
Correct output: -36                 | Program output: -15                
Correct output: -80                 | Program output: -80                
Correct output: -33                 | Program output: 67                 
Correct output: -72                 | Program output: -54                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: 75                 
Correct output: -84                 | Program output: -84                
Correct output: -65                 | Program output: -65                
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: -44                 | Program output: -44                
Correct output: -71                 | Program output: -55                
Correct output: -45                 | Program output: -35                
Correct output: -92                 | Program output: -50                
Correct output: -84                 | Program output: -45                
Correct output: -45                 | Program output: -45                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Lexicase best program: (integer_div boolean_shove integer_yankdup integer_gte in2 integer_add in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_sub boolean_shove integer_min integer_dup boolean_yank))
Lexicase best errors: [1 0 1 1 1 0 0 1 1 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 26
Percent parens: 0.115
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Zero cases best program: (integer_div boolean_shove integer_yankdup integer_gte in2 integer_add in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_sub boolean_shove integer_min integer_dup boolean_yank))
Zero cases best errors: [1 0 1 1 1 0 0 1 1 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 26
Percent parens: 0.115
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 939 1000 1000 1000 935 938 1000 1000 1000)
Population mean number of elite cases: 9.81
Count of perfect (error zero) individuals by case: (0 939 0 0 0 935 938 0 0 0)
Population mean number of perfect (error zero) cases: 2.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction print_boolean} {:close 0, :instruction tag_boolean_477} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction in3})
Best program: (integer_div boolean_shove integer_yankdup integer_gte in2 integer_add in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_eq print_boolean tag_boolean_477 boolean_flush) print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_eq boolean_shove integer_min integer_dup in3))
Errors: [1 0 1 1 1 0 0 1 1 1]
Total: 7
Mean: 0.7
Genome size: 32
Size: 36
Percent parens: 0.111
--- Population Statistics ---
Average total errors in population: 7.188
Median total errors in population: 7
Error averages by case: (1.0 0.061 1.0 1.0 1.0 0.065 0.062 1.0 1.0 1.0)
Error minima by case: (1 0 1 1 1 0 0 1 1 1)
Average genome size in population (length): 23.273
Average program size in population (points): 26.41
Average percent parens in population: 0.119
Minimum age in population: 41.6277289390564
Maximum age in population: 45.2527289390564
Average age in population: 43.5807289390564
Median age in population: 43.6277289390564
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 290
Genome diversity (% unique genomes):	 0.502
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 368
Syntactic diversity (% unique Push programs):	 0.44
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 10687219
--- Timings ---
Current time: 1559314532735 milliseconds
Total Time:          76.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.8 seconds, 75.2%
Fitness Testing:     10.9 seconds, 14.2%
Report:               8.0 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: -88                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: -42                 | Program output: -42                
Correct output: -12                 | Program output: -12                
Correct output: 24                  | Program output: 24                 
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 15                 
Correct output: -75                 | Program output: -6                 
Correct output: 1                   | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: 57                  | Program output: 57                 
Correct output: -16                 | Program output: -16                
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 33                 
Correct output: 17                  | Program output: 63                 
Correct output: 16                  | Program output: 43                 
Correct output: 54                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 38                 
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 1                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 86                 
Correct output: 29                  | Program output: 29                 
Correct output: 2                   | Program output: 2                  
Correct output: 56                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 14                  | Program output: 57                 
Correct output: 17                  | Program output: 17                 
Correct output: -32                 | Program output: 25                 
Correct output: -99                 | Program output: -78                
Correct output: -70                 | Program output: 2                  
Correct output: -38                 | Program output: -17                
Correct output: -94                 | Program output: -75                
Correct output: -82                 | Program output: 42                 
Correct output: -68                 | Program output: -53                
Correct output: -95                 | Program output: -95                
Correct output: -44                 | Program output: -5                 
Correct output: -23                 | Program output: 6                  
Correct output: -4                  | Program output: 13                 
Correct output: -40                 | Program output: -40                
Correct output: -55                 | Program output: 48                 
Correct output: -79                 | Program output: -65                
Correct output: -38                 | Program output: -38                
Correct output: -49                 | Program output: -49                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: -79                 | Program output: -30                
Correct output: -94                 | Program output: -43                
Correct output: -86                 | Program output: -36                
Correct output: -67                 | Program output: 4                  
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -30                 | Program output: -8                 
Correct output: -61                 | Program output: -61                
Correct output: -38                 | Program output: -38                
Correct output: -83                 | Program output: -83                
Correct output: -59                 | Program output: -59                
Correct output: -33                 | Program output: -14                
Correct output: -92                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: 60                  | Program output: 60                 
Correct output: -48                 | Program output: -48                
Correct output: -61                 | Program output: -31                
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: 36                 
Correct output: -59                 | Program output: -59                
Correct output: 1                   | Program output: 1                  
Correct output: -88                 | Program output: -33                
Correct output: -36                 | Program output: -15                
Correct output: -80                 | Program output: -80                
Correct output: -33                 | Program output: 67                 
Correct output: -72                 | Program output: -54                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: 75                 
Correct output: -84                 | Program output: -84                
Correct output: -65                 | Program output: -65                
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: -44                 | Program output: -44                
Correct output: -71                 | Program output: -55                
Correct output: -45                 | Program output: -35                
Correct output: -92                 | Program output: -50                
Correct output: -84                 | Program output: -45                
Correct output: -45                 | Program output: -45                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Lexicase best program: (integer_div boolean_shove integer_yankdup integer_gte in2 integer_add in1 exec_dup (integer_min) integer_min integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_eq boolean_shove integer_min integer_dup boolean_yank))
Lexicase best errors: [0 0 1 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 27
Percent parens: 0.111
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Zero cases best program: (integer_div boolean_shove integer_yankdup integer_gte in2 integer_add in1 exec_dup (integer_min) integer_min integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_eq boolean_shove integer_min integer_dup boolean_yank))
Zero cases best errors: [0 0 1 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 27
Percent parens: 0.111
--- Lexicase Population Statistics ---
Count of elite individuals by case: (942 933 1000 1000 942 933 940 1000 932 932)
Population mean number of elite cases: 9.55
Count of perfect (error zero) individuals by case: (942 933 0 0 942 933 940 0 932 932)
Population mean number of perfect (error zero) cases: 6.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_xor})
Best program: (integer_div boolean_shove integer_yankdup integer_gte in2 integer_add in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (boolean_xor))
Errors: [0 0 1 1 0 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 19
Size: 22
Percent parens: 0.136
--- Population Statistics ---
Average total errors in population: 3.446
Median total errors in population: 3
Error averages by case: (0.058 0.067 1.0 1.0 0.058 0.067 0.06 1.0 0.068 0.068)
Error minima by case: (0 0 1 1 0 0 0 1 0 0)
Average genome size in population (length): 23.383
Average program size in population (points): 26.59
Average percent parens in population: 0.120
Minimum age in population: 42.6277289390564
Maximum age in population: 47.0027289390564
Average age in population: 45.0457914390564
Median age in population: 45.1277289390564
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 200
Genome diversity (% unique genomes):	 0.554
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 286
Syntactic diversity (% unique Push programs):	 0.484
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 10938351
--- Timings ---
Current time: 1559314534585 milliseconds
Total Time:          78.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.2 seconds, 75.2%
Fitness Testing:     11.1 seconds, 14.1%
Report:               8.3 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: -88                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: -42                 | Program output: -42                
Correct output: -12                 | Program output: -12                
Correct output: 24                  | Program output: 24                 
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 15                 
Correct output: -75                 | Program output: -6                 
Correct output: 1                   | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: 57                  | Program output: 57                 
Correct output: -16                 | Program output: -16                
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 33                 
Correct output: 17                  | Program output: 63                 
Correct output: 16                  | Program output: 43                 
Correct output: 54                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 38                 
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 1                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 86                 
Correct output: 29                  | Program output: 29                 
Correct output: 2                   | Program output: 2                  
Correct output: 56                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 14                  | Program output: 57                 
Correct output: 17                  | Program output: 17                 
Correct output: -32                 | Program output: 25                 
Correct output: -99                 | Program output: -78                
Correct output: -70                 | Program output: 2                  
Correct output: -38                 | Program output: -17                
Correct output: -94                 | Program output: -75                
Correct output: -82                 | Program output: 42                 
Correct output: -68                 | Program output: -53                
Correct output: -95                 | Program output: -95                
Correct output: -44                 | Program output: -5                 
Correct output: -23                 | Program output: 6                  
Correct output: -4                  | Program output: 13                 
Correct output: -40                 | Program output: -40                
Correct output: -55                 | Program output: 48                 
Correct output: -79                 | Program output: -65                
Correct output: -38                 | Program output: -38                
Correct output: -49                 | Program output: -49                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: -79                 | Program output: -30                
Correct output: -94                 | Program output: -43                
Correct output: -86                 | Program output: -36                
Correct output: -67                 | Program output: 4                  
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -30                 | Program output: -8                 
Correct output: -61                 | Program output: -61                
Correct output: -38                 | Program output: -38                
Correct output: -83                 | Program output: -83                
Correct output: -59                 | Program output: -59                
Correct output: -33                 | Program output: -14                
Correct output: -92                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: 60                  | Program output: 60                 
Correct output: -48                 | Program output: -48                
Correct output: -61                 | Program output: -31                
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: 36                 
Correct output: -59                 | Program output: -59                
Correct output: 1                   | Program output: 1                  
Correct output: -88                 | Program output: -33                
Correct output: -36                 | Program output: -15                
Correct output: -80                 | Program output: -80                
Correct output: -33                 | Program output: 67                 
Correct output: -72                 | Program output: -54                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: 75                 
Correct output: -84                 | Program output: -84                
Correct output: -65                 | Program output: -65                
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: -44                 | Program output: -44                
Correct output: -71                 | Program output: -55                
Correct output: -45                 | Program output: -35                
Correct output: -92                 | Program output: -50                
Correct output: -84                 | Program output: -45                
Correct output: -45                 | Program output: -45                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Lexicase best program: (integer_div boolean_shove integer_yankdup integer_gte in2 integer_add in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_lt boolean_shove integer_min integer_dup boolean_yank))
Lexicase best errors: [0 1 1 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 26
Percent parens: 0.115
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Zero cases best program: (integer_div boolean_shove integer_yankdup integer_gte in2 integer_add in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_lt boolean_shove integer_min integer_dup boolean_yank))
Zero cases best errors: [0 1 1 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 26
Percent parens: 0.115
--- Lexicase Population Statistics ---
Count of elite individuals by case: (941 1000 1000 1000 1 949 935 951 952 935)
Population mean number of elite cases: 8.66
Count of perfect (error zero) individuals by case: (941 0 0 0 1 949 935 951 952 935)
Population mean number of perfect (error zero) cases: 5.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 0, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Best program: (integer_div boolean_shove integer_yankdup integer_gte in2 integer_add in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count () integer_eq boolean_shove integer_min integer_dup boolean_yank)
Errors: [0 1 1 1 1 0 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 23
Size: 26
Percent parens: 0.115
--- Population Statistics ---
Average total errors in population: 4.336
Median total errors in population: 4
Error averages by case: (0.059 1.0 1.0 1.0 0.999 0.051 0.065 0.049 0.048 0.065)
Error minima by case: (0 1 1 1 0 0 0 0 0 0)
Average genome size in population (length): 23.55
Average program size in population (points): 26.776
Average percent parens in population: 0.120
Minimum age in population: 44.1277289390564
Maximum age in population: 48.5027289390564
Average age in population: 46.5407914390564
Median age in population: 46.6277289390564
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 141
Genome diversity (% unique genomes):	 0.589
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 224
Syntactic diversity (% unique Push programs):	 0.514
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 11195752
--- Timings ---
Current time: 1559314536467 milliseconds
Total Time:          80.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.7 seconds, 75.3%
Fitness Testing:     11.3 seconds, 14.1%
Report:               8.4 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 432
Test mean error for best: 0.43200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: -88                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: -42                 | Program output: -42                
Correct output: -12                 | Program output: -12                
Correct output: 24                  | Program output: 24                 
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 15                 
Correct output: -75                 | Program output: -6                 
Correct output: 1                   | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: 57                  | Program output: 57                 
Correct output: -16                 | Program output: -16                
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 33                 
Correct output: 17                  | Program output: 63                 
Correct output: 16                  | Program output: 43                 
Correct output: 54                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 38                 
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 1                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 86                 
Correct output: 29                  | Program output: 29                 
Correct output: 2                   | Program output: 2                  
Correct output: 56                  | Program output: 87                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 14                  | Program output: 57                 
Correct output: 17                  | Program output: 17                 
Correct output: -32                 | Program output: 25                 
Correct output: -99                 | Program output: -78                
Correct output: -70                 | Program output: 2                  
Correct output: -38                 | Program output: -17                
Correct output: -94                 | Program output: -75                
Correct output: -82                 | Program output: 42                 
Correct output: -68                 | Program output: -53                
Correct output: -95                 | Program output: -95                
Correct output: -44                 | Program output: -5                 
Correct output: -23                 | Program output: 6                  
Correct output: -4                  | Program output: 13                 
Correct output: -40                 | Program output: -40                
Correct output: -55                 | Program output: 48                 
Correct output: -79                 | Program output: -65                
Correct output: -38                 | Program output: -38                
Correct output: -49                 | Program output: -49                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: -79                 | Program output: -30                
Correct output: -94                 | Program output: -43                
Correct output: -86                 | Program output: -36                
Correct output: -67                 | Program output: 4                  
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -30                 | Program output: -8                 
Correct output: -61                 | Program output: -61                
Correct output: -38                 | Program output: -38                
Correct output: -83                 | Program output: -83                
Correct output: -59                 | Program output: -59                
Correct output: -33                 | Program output: -14                
Correct output: -92                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: 60                  | Program output: 60                 
Correct output: -48                 | Program output: -48                
Correct output: -61                 | Program output: -31                
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: 36                 
Correct output: -59                 | Program output: -59                
Correct output: 1                   | Program output: 1                  
Correct output: -88                 | Program output: -33                
Correct output: -36                 | Program output: -15                
Correct output: -80                 | Program output: -80                
Correct output: -33                 | Program output: 67                 
Correct output: -72                 | Program output: -54                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: 75                 
Correct output: -84                 | Program output: -84                
Correct output: -65                 | Program output: -65                
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: -44                 | Program output: -44                
Correct output: -71                 | Program output: -55                
Correct output: -45                 | Program output: -35                
Correct output: -92                 | Program output: -50                
Correct output: -84                 | Program output: -45                
Correct output: -45                 | Program output: -45                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Lexicase best program: (integer_div boolean_shove integer_yankdup integer_gte in2 integer_add in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 exec_when () print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_eq boolean_shove integer_min integer_dup boolean_yank))
Lexicase best errors: [0 0 1 0 1 0 0 1 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 27
Percent parens: 0.148
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 1, :instruction exec_when} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Zero cases best program: (integer_div boolean_shove integer_yankdup integer_gte in2 integer_add in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 exec_when () print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_eq boolean_shove integer_min integer_dup boolean_yank))
Zero cases best errors: [0 0 1 0 1 0 0 1 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 27
Percent parens: 0.148
--- Lexicase Population Statistics ---
Count of elite individuals by case: (931 931 1000 683 1000 692 931 1000 924 1000)
Population mean number of elite cases: 9.09
Count of perfect (error zero) individuals by case: (931 931 0 683 0 692 931 0 924 0)
Population mean number of perfect (error zero) cases: 5.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Best program: (integer_div boolean_shove integer_yankdup integer_gte in2 integer_add in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_eq) boolean_shove integer_min integer_dup boolean_yank)
Errors: [0 0 1 0 1 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 23
Size: 26
Percent parens: 0.115
--- Population Statistics ---
Average total errors in population: 4.908
Median total errors in population: 4
Error averages by case: (0.069 0.069 1.0 0.317 1.0 0.308 0.069 1.0 0.076 1.0)
Error minima by case: (0 0 1 0 1 0 0 1 0 1)
Average genome size in population (length): 23.543
Average program size in population (points): 26.754
Average percent parens in population: 0.120
Minimum age in population: 45.1277289390564
Maximum age in population: 50.0964789390564
Average age in population: 47.9993070640564
Median age in population: 48.0496039390564
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 171
Genome diversity (% unique genomes):	 0.561
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 179
Syntactic diversity (% unique Push programs):	 0.501
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 11488299
--- Timings ---
Current time: 1559314538477 milliseconds
Total Time:          82.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.2 seconds, 75.4%
Fitness Testing:     11.6 seconds, 14.1%
Report:               8.6 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 224
Test mean error for best: 0.22400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: -88                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: -42                 | Program output: -42                
Correct output: -12                 | Program output: -12                
Correct output: 24                  | Program output: 24                 
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 15                 
Correct output: -75                 | Program output: -6                 
Correct output: 1                   | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: 57                  | Program output: 57                 
Correct output: -16                 | Program output: -16                
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 33                 
Correct output: 17                  | Program output: 63                 
Correct output: 16                  | Program output: 16                 
Correct output: 54                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 38                 
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 1                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 29                  | Program output: 29                 
Correct output: 2                   | Program output: 2                  
Correct output: 56                  | Program output: 56                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 17                 
Correct output: -32                 | Program output: 25                 
Correct output: -99                 | Program output: -78                
Correct output: -70                 | Program output: 2                  
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -82                 | Program output: -82                
Correct output: -68                 | Program output: -68                
Correct output: -95                 | Program output: -95                
Correct output: -44                 | Program output: -44                
Correct output: -23                 | Program output: -23                
Correct output: -4                  | Program output: 13                 
Correct output: -40                 | Program output: -40                
Correct output: -55                 | Program output: 48                 
Correct output: -79                 | Program output: -79                
Correct output: -38                 | Program output: -38                
Correct output: -49                 | Program output: -49                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -77                
Correct output: -67                 | Program output: -67                
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -30                 | Program output: -8                 
Correct output: -61                 | Program output: -61                
Correct output: -38                 | Program output: -38                
Correct output: -83                 | Program output: -83                
Correct output: -59                 | Program output: -59                
Correct output: -33                 | Program output: -14                
Correct output: -92                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: 60                  | Program output: 60                 
Correct output: -48                 | Program output: -48                
Correct output: -61                 | Program output: -61                
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: -76                
Correct output: -59                 | Program output: -59                
Correct output: 1                   | Program output: 1                  
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -80                 | Program output: -80                
Correct output: -33                 | Program output: -33                
Correct output: -72                 | Program output: -54                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: 73                 
Correct output: -84                 | Program output: -84                
Correct output: -65                 | Program output: -65                
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: -44                 | Program output: -44                
Correct output: -71                 | Program output: -55                
Correct output: -45                 | Program output: -35                
Correct output: -92                 | Program output: -50                
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Lexicase best program: (integer_div boolean_shove integer_yankdup integer_gte in2 in3 in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_eq boolean_shove integer_min integer_dup boolean_yank))
Lexicase best errors: [0 0 0 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 26
Percent parens: 0.115
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Zero cases best program: (integer_div boolean_shove integer_yankdup integer_gte in2 in3 in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_eq boolean_shove integer_min integer_dup boolean_yank))
Zero cases best errors: [0 0 0 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 26
Percent parens: 0.115
--- Lexicase Population Statistics ---
Count of elite individuals by case: (940 2 921 936 937 1000 922 937 928 2)
Population mean number of elite cases: 7.53
Count of perfect (error zero) individuals by case: (940 2 921 936 937 0 922 937 928 2)
Population mean number of perfect (error zero) cases: 6.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_boolean_477} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min})
Best program: (integer_div boolean_shove integer_yankdup integer_gte in2 in3 in1 exec_dup (integer_min) integer_mult integer_swap tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_eq boolean_shove integer_min))
Errors: [0 0 0 0 0 1 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 21
Size: 24
Percent parens: 0.125
--- Population Statistics ---
Average total errors in population: 3.475
Median total errors in population: 3
Error averages by case: (0.06 0.998 0.079 0.064 0.063 1.0 0.078 0.063 0.072 0.998)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 23.748
Average program size in population (points): 27.034
Average percent parens in population: 0.121
Minimum age in population: 46.5027289390564
Maximum age in population: 51.3699164390564
Average age in population: 49.4705492515564
Median age in population: 49.5261664390564
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 95
Genome diversity (% unique genomes):	 0.608
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 147
Syntactic diversity (% unique Push programs):	 0.548
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 11750435
--- Timings ---
Current time: 1559314540719 milliseconds
Total Time:          84.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.1 seconds, 75.5%
Fitness Testing:     11.8 seconds, 14.0%
Report:               8.8 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 224
Test mean error for best: 0.22400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: -88                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: -42                 | Program output: -42                
Correct output: -12                 | Program output: -12                
Correct output: 24                  | Program output: 24                 
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 15                 
Correct output: -75                 | Program output: -6                 
Correct output: 1                   | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: 57                  | Program output: 57                 
Correct output: -16                 | Program output: -16                
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 33                 
Correct output: 17                  | Program output: 63                 
Correct output: 16                  | Program output: 16                 
Correct output: 54                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 38                 
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 1                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 29                  | Program output: 29                 
Correct output: 2                   | Program output: 2                  
Correct output: 56                  | Program output: 56                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 17                 
Correct output: -32                 | Program output: 25                 
Correct output: -99                 | Program output: -78                
Correct output: -70                 | Program output: 2                  
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -82                 | Program output: -82                
Correct output: -68                 | Program output: -68                
Correct output: -95                 | Program output: -95                
Correct output: -44                 | Program output: -44                
Correct output: -23                 | Program output: -23                
Correct output: -4                  | Program output: 13                 
Correct output: -40                 | Program output: -40                
Correct output: -55                 | Program output: 48                 
Correct output: -79                 | Program output: -79                
Correct output: -38                 | Program output: -38                
Correct output: -49                 | Program output: -49                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -77                
Correct output: -67                 | Program output: -67                
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -30                 | Program output: -8                 
Correct output: -61                 | Program output: -61                
Correct output: -38                 | Program output: -38                
Correct output: -83                 | Program output: -83                
Correct output: -59                 | Program output: -59                
Correct output: -33                 | Program output: -14                
Correct output: -92                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: 60                  | Program output: 60                 
Correct output: -48                 | Program output: -48                
Correct output: -61                 | Program output: -61                
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: -76                
Correct output: -59                 | Program output: -59                
Correct output: 1                   | Program output: 1                  
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -80                 | Program output: -80                
Correct output: -33                 | Program output: -33                
Correct output: -72                 | Program output: -54                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: 73                 
Correct output: -84                 | Program output: -84                
Correct output: -65                 | Program output: -65                
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: -44                 | Program output: -44                
Correct output: -71                 | Program output: -55                
Correct output: -45                 | Program output: -35                
Correct output: -92                 | Program output: -50                
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Lexicase best program: (integer_div boolean_shove integer_yankdup integer_gte in2 in3 in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_eq boolean_shove integer_min integer_dup boolean_yank))
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 26
Percent parens: 0.115
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Zero cases best program: (integer_div boolean_shove integer_yankdup integer_gte in2 in3 in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_eq boolean_shove integer_min integer_dup boolean_yank))
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 26
Percent parens: 0.115
--- Lexicase Population Statistics ---
Count of elite individuals by case: (926 940 1000 926 921 939 930 930 937 926)
Population mean number of elite cases: 9.38
Count of perfect (error zero) individuals by case: (926 940 0 926 921 939 930 930 937 926)
Population mean number of perfect (error zero) cases: 8.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 0, :instruction tag_boolean_477} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min})
Best program: (integer_div boolean_shove integer_yankdup exec_dup_times () in2 in3 in1 exec_dup (integer_min) integer_mult integer_swap tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_eq boolean_shove integer_min))
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 21
Size: 25
Percent parens: 0.160
--- Population Statistics ---
Average total errors in population: 1.625
Median total errors in population: 1
Error averages by case: (0.074 0.06 1.0 0.074 0.079 0.061 0.07 0.07 0.063 0.074)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 22.016
Average program size in population (points): 25.022
Average percent parens in population: 0.120
Minimum age in population: 49.8152289390564
Maximum age in population: 51.1980414390564
Average age in population: 50.5276742515564
Median age in population: 50.8152289390564
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 355
Genome diversity (% unique genomes):	 0.273
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 387
Syntactic diversity (% unique Push programs):	 0.233
Total error diversity:				 0.008
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 11986250
--- Timings ---
Current time: 1559314542888 milliseconds
Total Time:          87.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.8 seconds, 75.6%
Fitness Testing:     12.1 seconds, 13.9%
Report:               9.0 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 224
Test mean error for best: 0.22400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: -88                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: -42                 | Program output: -42                
Correct output: -12                 | Program output: -12                
Correct output: 24                  | Program output: 24                 
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 15                 
Correct output: -75                 | Program output: -6                 
Correct output: 1                   | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: 57                  | Program output: 57                 
Correct output: -16                 | Program output: -16                
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 33                 
Correct output: 17                  | Program output: 63                 
Correct output: 16                  | Program output: 16                 
Correct output: 54                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 38                 
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 1                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 29                  | Program output: 29                 
Correct output: 2                   | Program output: 2                  
Correct output: 56                  | Program output: 56                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 17                 
Correct output: -32                 | Program output: 25                 
Correct output: -99                 | Program output: -78                
Correct output: -70                 | Program output: 2                  
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -82                 | Program output: -82                
Correct output: -68                 | Program output: -68                
Correct output: -95                 | Program output: -95                
Correct output: -44                 | Program output: -44                
Correct output: -23                 | Program output: -23                
Correct output: -4                  | Program output: 13                 
Correct output: -40                 | Program output: -40                
Correct output: -55                 | Program output: 48                 
Correct output: -79                 | Program output: -79                
Correct output: -38                 | Program output: -38                
Correct output: -49                 | Program output: -49                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -77                
Correct output: -67                 | Program output: -67                
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -30                 | Program output: -8                 
Correct output: -61                 | Program output: -61                
Correct output: -38                 | Program output: -38                
Correct output: -83                 | Program output: -83                
Correct output: -59                 | Program output: -59                
Correct output: -33                 | Program output: -14                
Correct output: -92                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: 60                  | Program output: 60                 
Correct output: -48                 | Program output: -48                
Correct output: -61                 | Program output: -61                
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: -76                
Correct output: -59                 | Program output: -59                
Correct output: 1                   | Program output: 1                  
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -80                 | Program output: -80                
Correct output: -33                 | Program output: -33                
Correct output: -72                 | Program output: -54                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: 73                 
Correct output: -84                 | Program output: -84                
Correct output: -65                 | Program output: -65                
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: -44                 | Program output: -44                
Correct output: -71                 | Program output: -55                
Correct output: -45                 | Program output: -35                
Correct output: -92                 | Program output: -50                
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Lexicase best program: (integer_div boolean_shove integer_yankdup integer_gte in2 in3 in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_eq boolean_shove integer_min integer_dup boolean_yank))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 26
Percent parens: 0.115
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Zero cases best program: (integer_div boolean_shove integer_yankdup integer_gte in2 in3 in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_eq boolean_shove integer_min integer_dup boolean_yank))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 26
Percent parens: 0.115
--- Lexicase Population Statistics ---
Count of elite individuals by case: (927 922 932 925 1000 920 927 925 921 926)
Population mean number of elite cases: 9.32
Count of perfect (error zero) individuals by case: (927 922 932 925 0 920 927 925 921 926)
Population mean number of perfect (error zero) cases: 8.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup})
Best program: (integer_div boolean_shove integer_yankdup integer_gte in2 in3 in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_eq boolean_shove integer_min integer_dup))
Errors: [0 0 0 0 1 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 22
Size: 25
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 1.675
Median total errors in population: 1
Error averages by case: (0.073 0.078 0.068 0.075 1.0 0.08 0.073 0.075 0.079 0.074)
Error minima by case: (0 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 22.153
Average program size in population (points): 25.204
Average percent parens in population: 0.121
Minimum age in population: 50.8152289390564
Maximum age in population: 53.1980414390564
Average age in population: 52.0372699546814
Median age in population: 52.0066351890564
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 284
Genome diversity (% unique genomes):	 0.367
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 323
Syntactic diversity (% unique Push programs):	 0.315
Total error diversity:				 0.009
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 12224107
--- Timings ---
Current time: 1559314545049 milliseconds
Total Time:          89.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.6 seconds, 75.8%
Fitness Testing:     12.3 seconds, 13.8%
Report:               9.2 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: -88                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: -42                 | Program output: -42                
Correct output: -12                 | Program output: -12                
Correct output: 24                  | Program output: 24                 
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 2                  
Correct output: -75                 | Program output: -75                
Correct output: 1                   | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: 57                  | Program output: 57                 
Correct output: -16                 | Program output: -16                
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 30                 
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 54                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 9                  
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 1                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 29                  | Program output: 29                 
Correct output: 2                   | Program output: 2                  
Correct output: 56                  | Program output: 56                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 17                 
Correct output: -32                 | Program output: -32                
Correct output: -99                 | Program output: -99                
Correct output: -70                 | Program output: -70                
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -82                 | Program output: -82                
Correct output: -68                 | Program output: -68                
Correct output: -95                 | Program output: -95                
Correct output: -44                 | Program output: -44                
Correct output: -23                 | Program output: -23                
Correct output: -4                  | Program output: -4                 
Correct output: -40                 | Program output: -40                
Correct output: -55                 | Program output: -55                
Correct output: -79                 | Program output: -79                
Correct output: -38                 | Program output: -38                
Correct output: -49                 | Program output: -49                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -86                
Correct output: -67                 | Program output: -67                
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -30                 | Program output: -30                
Correct output: -61                 | Program output: -61                
Correct output: -38                 | Program output: -38                
Correct output: -83                 | Program output: -83                
Correct output: -59                 | Program output: -59                
Correct output: -33                 | Program output: -33                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -53                
Correct output: 60                  | Program output: 60                 
Correct output: -48                 | Program output: -48                
Correct output: -61                 | Program output: -61                
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: -76                
Correct output: -59                 | Program output: -59                
Correct output: 1                   | Program output: 1                  
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -80                 | Program output: -80                
Correct output: -33                 | Program output: -33                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -84                
Correct output: -65                 | Program output: -65                
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: -44                 | Program output: -44                
Correct output: -71                 | Program output: -71                
Correct output: -45                 | Program output: -45                
Correct output: -92                 | Program output: -92                
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 1, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Lexicase best program: (integer_div boolean_shove integer_yankdup integer_gte in2 in3 in4 exec_dup (integer_min) integer_mult integer_swap in3 in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_eq boolean_shove integer_min integer_dup boolean_yank))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 33
Percent parens: 0.121
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 1, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Zero cases best program: (integer_div boolean_shove integer_yankdup integer_gte in2 in3 in4 exec_dup (integer_min) integer_mult integer_swap in3 in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_eq boolean_shove integer_min integer_dup boolean_yank))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 33
Percent parens: 0.121
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 912 912 916 919 919 919 925 934 912)
Population mean number of elite cases: 8.27
Count of perfect (error zero) individuals by case: (2 912 912 916 919 919 919 925 934 912)
Population mean number of perfect (error zero) cases: 8.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_gte} {:close 0, :instruction in2} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_swap} {:close 1, :instruction in3} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_div} {:close 0, :instruction tag_boolean_477} {:close 1, :instruction boolean_flush} {:close 0, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_yank})
Best program: (integer_div boolean_shove integer_yankdup integer_gte in2 in3 in4 exec_dup (integer_min) integer_mult integer_swap in3 in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_eq boolean_shove integer_min integer_dup boolean_yank))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 29
Size: 33
Percent parens: 0.121
--- Population Statistics ---
Average total errors in population: 1.73
Median total errors in population: 1
Error averages by case: (0.998 0.088 0.088 0.084 0.081 0.081 0.081 0.075 0.066 0.088)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 22.11
Average program size in population (points): 25.195
Average percent parens in population: 0.123
Minimum age in population: 51.8152289390564
Maximum age in population: 55.0544867515564
Average age in population: 53.5058978843689
Median age in population: 53.5544867515564
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 227
Genome diversity (% unique genomes):	 0.438
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 256
Syntactic diversity (% unique Push programs):	 0.388
Total error diversity:				 0.009
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 12460238
--- Timings ---
Current time: 1559314547215 milliseconds
Total Time:          91.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.3 seconds, 75.9%
Fitness Testing:     12.5 seconds, 13.7%
Report:               9.4 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 35
Successful program: (integer_div boolean_shove integer_yankdup integer_gte in2 in3 in4 exec_dup (integer_min) integer_mult integer_swap in3 in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_eq boolean_shove integer_min integer_dup boolean_yank))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 33


Auto-simplifying with starting size: 33
step: 0
program: (integer_div boolean_shove integer_yankdup integer_gte in2 in3 in4 exec_dup (integer_min) integer_mult integer_swap in3 in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_eq boolean_shove integer_min integer_dup boolean_yank))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 33

step: 500
program: (integer_div boolean_shove integer_yankdup integer_gte in2 in3 in4 exec_dup (integer_min) integer_mult integer_swap in3 in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_eq boolean_shove integer_min integer_dup boolean_yank))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 33

step: 1000
program: (integer_div boolean_shove integer_yankdup integer_gte in2 in3 in4 exec_dup (integer_min) integer_mult integer_swap in3 in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_eq boolean_shove integer_min integer_dup boolean_yank))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 33

step: 1500
program: (integer_div boolean_shove integer_yankdup integer_gte in2 in3 in4 exec_dup (integer_min) integer_mult integer_swap in3 in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_eq boolean_shove integer_min integer_dup boolean_yank))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 33

step: 2000
program: (integer_div boolean_shove integer_yankdup integer_gte in2 in3 in4 exec_dup (integer_min) integer_mult integer_swap in3 in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_eq boolean_shove integer_min integer_dup boolean_yank))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 33

step: 2500
program: (integer_div boolean_shove integer_yankdup integer_gte in2 in3 in4 exec_dup (integer_min) integer_mult integer_swap in3 in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_eq boolean_shove integer_min integer_dup boolean_yank))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 33

step: 3000
program: (integer_div boolean_shove integer_yankdup integer_gte in2 in3 in4 exec_dup (integer_min) integer_mult integer_swap in3 in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_eq boolean_shove integer_min integer_dup boolean_yank))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 33

step: 3500
program: (integer_div boolean_shove integer_yankdup integer_gte in2 in3 in4 exec_dup (integer_min) integer_mult integer_swap in3 in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_eq boolean_shove integer_min integer_dup boolean_yank))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 33

step: 4000
program: (integer_div boolean_shove integer_yankdup integer_gte in2 in3 in4 exec_dup (integer_min) integer_mult integer_swap in3 in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_eq boolean_shove integer_min integer_dup boolean_yank))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 33

step: 4500
program: (integer_div boolean_shove integer_yankdup integer_gte in2 in3 in4 exec_dup (integer_min) integer_mult integer_swap in3 in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_eq boolean_shove integer_min integer_dup boolean_yank))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 33

step: 5000
program: (integer_div boolean_shove integer_yankdup integer_gte in2 in3 in4 exec_dup (integer_min) integer_mult integer_swap in3 in1 exec_dup (integer_min) integer_mult integer_div tag_boolean_477 boolean_flush print_integer print_integer boolean_frominteger integer_min exec_do*count (integer_eq boolean_shove integer_min integer_dup boolean_yank))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 33

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 0
Test mean error for best: 0.00000
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 0
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 0
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 0
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 0
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 0
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 0
Test Case  269 | Error: 0
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 0
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 0
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 0
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 0
Test Case  463 | Error: 0
Test Case  464 | Error: 0
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 0
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 0
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 0
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 0
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 0
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 0
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 0
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 0
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 0
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 0
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 0
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -87                 | Program output: -87                
Correct output: -88                 | Program output: -88                
Correct output: -55                 | Program output: -55                
Correct output: -51                 | Program output: -51                
Correct output: -42                 | Program output: -42                
Correct output: -12                 | Program output: -12                
Correct output: 24                  | Program output: 24                 
Correct output: -73                 | Program output: -73                
Correct output: 2                   | Program output: 2                  
Correct output: -75                 | Program output: -75                
Correct output: 1                   | Program output: 1                  
Correct output: -99                 | Program output: -99                
Correct output: 19                  | Program output: 19                 
Correct output: 57                  | Program output: 57                 
Correct output: -16                 | Program output: -16                
Correct output: 17                  | Program output: 17                 
Correct output: 30                  | Program output: 30                 
Correct output: 17                  | Program output: 17                 
Correct output: 16                  | Program output: 16                 
Correct output: 54                  | Program output: 54                 
Correct output: 39                  | Program output: 39                 
Correct output: 18                  | Program output: 18                 
Correct output: 9                   | Program output: 9                  
Correct output: 17                  | Program output: 17                 
Correct output: 22                  | Program output: 22                 
Correct output: 1                   | Program output: 1                  
Correct output: 19                  | Program output: 19                 
Correct output: 15                  | Program output: 15                 
Correct output: 29                  | Program output: 29                 
Correct output: 2                   | Program output: 2                  
Correct output: 56                  | Program output: 56                 
Correct output: 1                   | Program output: 1                  
Correct output: 6                   | Program output: 6                  
Correct output: 14                  | Program output: 14                 
Correct output: 17                  | Program output: 17                 
Correct output: -32                 | Program output: -32                
Correct output: -99                 | Program output: -99                
Correct output: -70                 | Program output: -70                
Correct output: -38                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -82                 | Program output: -82                
Correct output: -68                 | Program output: -68                
Correct output: -95                 | Program output: -95                
Correct output: -44                 | Program output: -44                
Correct output: -23                 | Program output: -23                
Correct output: -4                  | Program output: -4                 
Correct output: -40                 | Program output: -40                
Correct output: -55                 | Program output: -55                
Correct output: -79                 | Program output: -79                
Correct output: -38                 | Program output: -38                
Correct output: -49                 | Program output: -49                
Correct output: -95                 | Program output: -95                
Correct output: -95                 | Program output: -95                
Correct output: -100                | Program output: -100               
Correct output: 15                  | Program output: 15                 
Correct output: -79                 | Program output: -79                
Correct output: -94                 | Program output: -94                
Correct output: -86                 | Program output: -86                
Correct output: -67                 | Program output: -67                
Correct output: -83                 | Program output: -83                
Correct output: -76                 | Program output: -76                
Correct output: -30                 | Program output: -30                
Correct output: -61                 | Program output: -61                
Correct output: -38                 | Program output: -38                
Correct output: -83                 | Program output: -83                
Correct output: -59                 | Program output: -59                
Correct output: -33                 | Program output: -33                
Correct output: -92                 | Program output: -92                
Correct output: -53                 | Program output: -53                
Correct output: 60                  | Program output: 60                 
Correct output: -48                 | Program output: -48                
Correct output: -61                 | Program output: -61                
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: -76                
Correct output: -59                 | Program output: -59                
Correct output: 1                   | Program output: 1                  
Correct output: -88                 | Program output: -88                
Correct output: -36                 | Program output: -36                
Correct output: -80                 | Program output: -80                
Correct output: -33                 | Program output: -33                
Correct output: -72                 | Program output: -72                
Correct output: -69                 | Program output: -69                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -34                
Correct output: -84                 | Program output: -84                
Correct output: -65                 | Program output: -65                
Correct output: -89                 | Program output: -89                
Correct output: -87                 | Program output: -87                
Correct output: -84                 | Program output: -84                
Correct output: -44                 | Program output: -44                
Correct output: -71                 | Program output: -71                
Correct output: -45                 | Program output: -45                
Correct output: -92                 | Program output: -92                
Correct output: -84                 | Program output: -84                
Correct output: -45                 | Program output: -45                
;;******************************
