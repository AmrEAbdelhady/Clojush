Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-52 2 2 2] -52] [[33 80 33 33] 33] [[-7 -7 -7 61] -7] [[-51 -15 -51 -51] -51] [[38 38 38 38] 38] [[-93 -73 -73 -73] -93] [[3 3 -63 3] -63] [[-5 25 -5 -5] -5] [[0 0 0 38] 0] [[14 84 84 84] 14] [(-31 -31 -31 -31) -31] [(63 63 63 63) 63] [(-55 -55 -55 -55) -55] [(94 94 94 94) 94] [(-83 -83 -83 -83) -83] [(8 43 95 68) 8] [(9 29 50 60) 9] [(14 23 48 86) 14] [(6 53 37 85) 6] [(78 85 85 94) 78] [(18 32 51 16) 16] [(91 99 10 7) 7] [(85 53 50 2) 2] [(93 57 49 100) 49] [(39 64 78 0) 0] [(76 76 37 63) 37] [(88 64 41 46) 41] [(99 57 100 49) 49] [(97 65 91 85) 65] [(88 35 17 87) 17] [(14 16 11 80) 11] [(36 93 57 14) 14] [(56 96 88 16) 16] [(100 33 12 86) 12] [(63 51 2 81) 2] [(84 93 -27 -40) -40] [(-18 -13 -89 -86) -89] [(-89 -46 -92 -52) -92] [(30 -63 79 41) -63] [(-15 97 57 63) -15] [(-31 -53 33 2) -53] [(-58 90 -7 76) -58] [(36 87 -27 91) -27] [(1 76 -41 93) -41] [(-32 57 75 29) -32] [(20 -48 54 -41) -48] [(-25 59 15 59) -25] [(-51 -4 19 -42) -51] [(-71 -71 61 -55) -71] [(-25 10 78 94) -25] [(-35 -94 66 46) -94] [(-73 49 -67 23) -73] [(0 -48 2 -9) -48] [(6 48 -6 -49) -49] [(-38 -53 -8 -67) -67] [(-94 -44 -23 -46) -94] [(-4 77 -92 36) -92] [(87 -81 45 100) -81] [(-85 -52 9 45) -85] [(97 0 9 -69) -69] [(89 18 -90 -10) -90] [(62 -94 -91 30) -94] [(69 25 41 -74) -74] [(-61 71 -21 -52) -61] [(42 -13 -13 -90) -90] [(14 24 33 -70) -70] [(-89 -60 -64 40) -89] [(23 -80 -4 18) -80] [(0 22 86 64) 0] [(83 -15 84 2) -15] [(-76 77 -57 77) -76] [(-93 -41 -81 -23) -93] [(-52 37 21 52) -52] [(56 -98 10 55) -98] [(-100 91 -74 69) -100] [(-62 -94 -21 -72) -94] [(11 -31 -93 42) -93] [(35 6 -42 86) -42] [(-83 -42 51 18) -83] [(-9 95 -84 -7) -84] [(74 15 87 -29) -29] [(15 -33 79 -42) -42] [(64 -3 81 1) -3] [(-28 30 -6 -67) -67] [(4 -86 87 -4) -86] [(56 -91 -75 71) -91] [(-39 85 -93 -100) -100] [(82 -85 75 100) -85] [(-3 -41 85 30) -41] [(-26 4 -13 -12) -26] [(21 -12 67 41) -12] [(-61 -11 36 -74) -74] [(-89 86 54 69) -89] [(39 50 -12 63) -12] [(51 -41 -4 45) -41])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-52 2 2 2] -52]
Train Case:   6 | Input/Output: [[33 80 33 33] 33]
Train Case:   7 | Input/Output: [[-7 -7 -7 61] -7]
Train Case:   8 | Input/Output: [[-51 -15 -51 -51] -51]
Train Case:   9 | Input/Output: [[38 38 38 38] 38]
Train Case:  10 | Input/Output: [[-93 -73 -73 -73] -93]
Train Case:  11 | Input/Output: [[3 3 -63 3] -63]
Train Case:  12 | Input/Output: [[-5 25 -5 -5] -5]
Train Case:  13 | Input/Output: [[0 0 0 38] 0]
Train Case:  14 | Input/Output: [[14 84 84 84] 14]
Train Case:  15 | Input/Output: [(-31 -31 -31 -31) -31]
Train Case:  16 | Input/Output: [(63 63 63 63) 63]
Train Case:  17 | Input/Output: [(-55 -55 -55 -55) -55]
Train Case:  18 | Input/Output: [(94 94 94 94) 94]
Train Case:  19 | Input/Output: [(-83 -83 -83 -83) -83]
Train Case:  20 | Input/Output: [(8 43 95 68) 8]
Train Case:  21 | Input/Output: [(9 29 50 60) 9]
Train Case:  22 | Input/Output: [(14 23 48 86) 14]
Train Case:  23 | Input/Output: [(6 53 37 85) 6]
Train Case:  24 | Input/Output: [(78 85 85 94) 78]
Train Case:  25 | Input/Output: [(18 32 51 16) 16]
Train Case:  26 | Input/Output: [(91 99 10 7) 7]
Train Case:  27 | Input/Output: [(85 53 50 2) 2]
Train Case:  28 | Input/Output: [(93 57 49 100) 49]
Train Case:  29 | Input/Output: [(39 64 78 0) 0]
Train Case:  30 | Input/Output: [(76 76 37 63) 37]
Train Case:  31 | Input/Output: [(88 64 41 46) 41]
Train Case:  32 | Input/Output: [(99 57 100 49) 49]
Train Case:  33 | Input/Output: [(97 65 91 85) 65]
Train Case:  34 | Input/Output: [(88 35 17 87) 17]
Train Case:  35 | Input/Output: [(14 16 11 80) 11]
Train Case:  36 | Input/Output: [(36 93 57 14) 14]
Train Case:  37 | Input/Output: [(56 96 88 16) 16]
Train Case:  38 | Input/Output: [(100 33 12 86) 12]
Train Case:  39 | Input/Output: [(63 51 2 81) 2]
Train Case:  40 | Input/Output: [(84 93 -27 -40) -40]
Train Case:  41 | Input/Output: [(-18 -13 -89 -86) -89]
Train Case:  42 | Input/Output: [(-89 -46 -92 -52) -92]
Train Case:  43 | Input/Output: [(30 -63 79 41) -63]
Train Case:  44 | Input/Output: [(-15 97 57 63) -15]
Train Case:  45 | Input/Output: [(-31 -53 33 2) -53]
Train Case:  46 | Input/Output: [(-58 90 -7 76) -58]
Train Case:  47 | Input/Output: [(36 87 -27 91) -27]
Train Case:  48 | Input/Output: [(1 76 -41 93) -41]
Train Case:  49 | Input/Output: [(-32 57 75 29) -32]
Train Case:  50 | Input/Output: [(20 -48 54 -41) -48]
Train Case:  51 | Input/Output: [(-25 59 15 59) -25]
Train Case:  52 | Input/Output: [(-51 -4 19 -42) -51]
Train Case:  53 | Input/Output: [(-71 -71 61 -55) -71]
Train Case:  54 | Input/Output: [(-25 10 78 94) -25]
Train Case:  55 | Input/Output: [(-35 -94 66 46) -94]
Train Case:  56 | Input/Output: [(-73 49 -67 23) -73]
Train Case:  57 | Input/Output: [(0 -48 2 -9) -48]
Train Case:  58 | Input/Output: [(6 48 -6 -49) -49]
Train Case:  59 | Input/Output: [(-38 -53 -8 -67) -67]
Train Case:  60 | Input/Output: [(-94 -44 -23 -46) -94]
Train Case:  61 | Input/Output: [(-4 77 -92 36) -92]
Train Case:  62 | Input/Output: [(87 -81 45 100) -81]
Train Case:  63 | Input/Output: [(-85 -52 9 45) -85]
Train Case:  64 | Input/Output: [(97 0 9 -69) -69]
Train Case:  65 | Input/Output: [(89 18 -90 -10) -90]
Train Case:  66 | Input/Output: [(62 -94 -91 30) -94]
Train Case:  67 | Input/Output: [(69 25 41 -74) -74]
Train Case:  68 | Input/Output: [(-61 71 -21 -52) -61]
Train Case:  69 | Input/Output: [(42 -13 -13 -90) -90]
Train Case:  70 | Input/Output: [(14 24 33 -70) -70]
Train Case:  71 | Input/Output: [(-89 -60 -64 40) -89]
Train Case:  72 | Input/Output: [(23 -80 -4 18) -80]
Train Case:  73 | Input/Output: [(0 22 86 64) 0]
Train Case:  74 | Input/Output: [(83 -15 84 2) -15]
Train Case:  75 | Input/Output: [(-76 77 -57 77) -76]
Train Case:  76 | Input/Output: [(-93 -41 -81 -23) -93]
Train Case:  77 | Input/Output: [(-52 37 21 52) -52]
Train Case:  78 | Input/Output: [(56 -98 10 55) -98]
Train Case:  79 | Input/Output: [(-100 91 -74 69) -100]
Train Case:  80 | Input/Output: [(-62 -94 -21 -72) -94]
Train Case:  81 | Input/Output: [(11 -31 -93 42) -93]
Train Case:  82 | Input/Output: [(35 6 -42 86) -42]
Train Case:  83 | Input/Output: [(-83 -42 51 18) -83]
Train Case:  84 | Input/Output: [(-9 95 -84 -7) -84]
Train Case:  85 | Input/Output: [(74 15 87 -29) -29]
Train Case:  86 | Input/Output: [(15 -33 79 -42) -42]
Train Case:  87 | Input/Output: [(64 -3 81 1) -3]
Train Case:  88 | Input/Output: [(-28 30 -6 -67) -67]
Train Case:  89 | Input/Output: [(4 -86 87 -4) -86]
Train Case:  90 | Input/Output: [(56 -91 -75 71) -91]
Train Case:  91 | Input/Output: [(-39 85 -93 -100) -100]
Train Case:  92 | Input/Output: [(82 -85 75 100) -85]
Train Case:  93 | Input/Output: [(-3 -41 85 30) -41]
Train Case:  94 | Input/Output: [(-26 4 -13 -12) -26]
Train Case:  95 | Input/Output: [(21 -12 67 41) -12]
Train Case:  96 | Input/Output: [(-61 -11 36 -74) -74]
Train Case:  97 | Input/Output: [(-89 86 54 69) -89]
Train Case:  98 | Input/Output: [(39 50 -12 63) -12]
Train Case:  99 | Input/Output: [(51 -41 -4 45) -41]
Test Case:   0 | Input/Output: [[16 16 16 7] 7]
Test Case:   1 | Input/Output: [[-67 -67 13 -67] -67]
Test Case:   2 | Input/Output: [[66 66 66 -89] -89]
Test Case:   3 | Input/Output: [[4 99 99 99] 4]
Test Case:   4 | Input/Output: [[43 8 43 43] 8]
Test Case:   5 | Input/Output: [[23 23 23 15] 15]
Test Case:   6 | Input/Output: [[-9 -9 -7 -9] -9]
Test Case:   7 | Input/Output: [[-91 7 -91 -91] -91]
Test Case:   8 | Input/Output: [[-13 -13 -13 -29] -29]
Test Case:   9 | Input/Output: [[97 60 60 60] 60]
Test Case:  10 | Input/Output: [[40 40 -4 40] -4]
Test Case:  11 | Input/Output: [[-81 -57 -57 -57] -81]
Test Case:  12 | Input/Output: [[34 -4 -4 -4] -4]
Test Case:  13 | Input/Output: [[61 61 61 -41] -41]
Test Case:  14 | Input/Output: [[-76 -76 95 -76] -76]
Test Case:  15 | Input/Output: [[77 26 77 77] 26]
Test Case:  16 | Input/Output: [[-62 83 -62 -62] -62]
Test Case:  17 | Input/Output: [[39 5 39 39] 5]
Test Case:  18 | Input/Output: [[-82 -82 -82 89] -82]
Test Case:  19 | Input/Output: [[-21 28 -21 -21] -21]
Test Case:  20 | Input/Output: [[8 55 8 8] 8]
Test Case:  21 | Input/Output: [[65 46 46 46] 46]
Test Case:  22 | Input/Output: [[54 54 54 -93] -93]
Test Case:  23 | Input/Output: [[8 -27 -27 -27] -27]
Test Case:  24 | Input/Output: [[-70 -48 -70 -70] -70]
Test Case:  25 | Input/Output: [[18 18 11 18] 11]
Test Case:  26 | Input/Output: [[-12 -12 -12 -72] -72]
Test Case:  27 | Input/Output: [[74 74 74 40] 40]
Test Case:  28 | Input/Output: [[78 78 96 78] 78]
Test Case:  29 | Input/Output: [[81 81 -35 81] -35]
Test Case:  30 | Input/Output: [[15 15 70 15] 15]
Test Case:  31 | Input/Output: [[72 -30 -30 -30] -30]
Test Case:  32 | Input/Output: [[71 71 -34 71] -34]
Test Case:  33 | Input/Output: [[-8 -55 -55 -55] -55]
Test Case:  34 | Input/Output: [[84 84 -71 84] -71]
Test Case:  35 | Input/Output: [[61 61 -1 61] -1]
Test Case:  36 | Input/Output: [[-28 -28 47 -28] -28]
Test Case:  37 | Input/Output: [[24 24 24 62] 24]
Test Case:  38 | Input/Output: [[-89 -89 -89 -18] -89]
Test Case:  39 | Input/Output: [[50 -99 50 50] -99]
Test Case:  40 | Input/Output: [[-7 -7 -7 -22] -22]
Test Case:  41 | Input/Output: [[-60 -60 45 -60] -60]
Test Case:  42 | Input/Output: [[-17 55 -17 -17] -17]
Test Case:  43 | Input/Output: [[83 -54 83 83] -54]
Test Case:  44 | Input/Output: [[25 57 57 57] 25]
Test Case:  45 | Input/Output: [[-40 -40 -40 96] -40]
Test Case:  46 | Input/Output: [[45 -4 -4 -4] -4]
Test Case:  47 | Input/Output: [[-49 -23 -23 -23] -49]
Test Case:  48 | Input/Output: [[16 16 -14 16] -14]
Test Case:  49 | Input/Output: [[9 9 -58 9] -58]
Test Case:  50 | Input/Output: [[59 -30 -30 -30] -30]
Test Case:  51 | Input/Output: [[72 72 72 37] 37]
Test Case:  52 | Input/Output: [[78 78 78 -26] -26]
Test Case:  53 | Input/Output: [[29 90 90 90] 29]
Test Case:  54 | Input/Output: [[94 71 94 94] 71]
Test Case:  55 | Input/Output: [[41 41 94 41] 41]
Test Case:  56 | Input/Output: [[79 9 9 9] 9]
Test Case:  57 | Input/Output: [[49 49 -47 49] -47]
Test Case:  58 | Input/Output: [[-60 -60 76 -60] -60]
Test Case:  59 | Input/Output: [[-23 -23 -72 -23] -72]
Test Case:  60 | Input/Output: [[-1 -1 -89 -1] -89]
Test Case:  61 | Input/Output: [[-94 -36 -36 -36] -94]
Test Case:  62 | Input/Output: [[57 57 33 57] 33]
Test Case:  63 | Input/Output: [[-58 87 -58 -58] -58]
Test Case:  64 | Input/Output: [[-11 -11 -73 -11] -73]
Test Case:  65 | Input/Output: [[-94 87 -94 -94] -94]
Test Case:  66 | Input/Output: [[-86 -86 -86 -74] -86]
Test Case:  67 | Input/Output: [[-3 -8 -8 -8] -8]
Test Case:  68 | Input/Output: [[-4 -4 17 -4] -4]
Test Case:  69 | Input/Output: [[-49 45 -49 -49] -49]
Test Case:  70 | Input/Output: [[42 42 28 42] 28]
Test Case:  71 | Input/Output: [[-93 50 -93 -93] -93]
Test Case:  72 | Input/Output: [[-42 -42 -42 -18] -42]
Test Case:  73 | Input/Output: [[-86 -86 -86 -59] -86]
Test Case:  74 | Input/Output: [[-33 14 14 14] -33]
Test Case:  75 | Input/Output: [[-44 11 11 11] -44]
Test Case:  76 | Input/Output: [[-23 -47 -47 -47] -47]
Test Case:  77 | Input/Output: [[99 -69 99 99] -69]
Test Case:  78 | Input/Output: [[-7 -7 -42 -7] -42]
Test Case:  79 | Input/Output: [[-23 53 -23 -23] -23]
Test Case:  80 | Input/Output: [[57 57 18 57] 18]
Test Case:  81 | Input/Output: [[-76 -76 -46 -76] -76]
Test Case:  82 | Input/Output: [[67 67 95 67] 67]
Test Case:  83 | Input/Output: [[-80 -80 -80 51] -80]
Test Case:  84 | Input/Output: [[23 23 23 90] 23]
Test Case:  85 | Input/Output: [[-4 -4 -4 -4] -4]
Test Case:  86 | Input/Output: [[70 70 70 -93] -93]
Test Case:  87 | Input/Output: [[-19 -15 -15 -15] -19]
Test Case:  88 | Input/Output: [[-23 62 -23 -23] -23]
Test Case:  89 | Input/Output: [[42 42 -82 42] -82]
Test Case:  90 | Input/Output: [[51 51 51 51] 51]
Test Case:  91 | Input/Output: [[-100 -100 83 -100] -100]
Test Case:  92 | Input/Output: [[-42 77 77 77] -42]
Test Case:  93 | Input/Output: [[-6 -58 -6 -6] -58]
Test Case:  94 | Input/Output: [[-84 -20 -20 -20] -84]
Test Case:  95 | Input/Output: [[-46 -18 -46 -46] -46]
Test Case:  96 | Input/Output: [[-49 74 74 74] -49]
Test Case:  97 | Input/Output: [[-87 58 58 58] -87]
Test Case:  98 | Input/Output: [[88 12 12 12] 12]
Test Case:  99 | Input/Output: [[-37 -37 94 -37] -37]
Test Case: 100 | Input/Output: [(55 55 55 55) 55]
Test Case: 101 | Input/Output: [(-61 -61 -61 -61) -61]
Test Case: 102 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 103 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 104 | Input/Output: [(30 30 30 30) 30]
Test Case: 105 | Input/Output: [(51 51 51 51) 51]
Test Case: 106 | Input/Output: [(11 11 11 11) 11]
Test Case: 107 | Input/Output: [(38 38 38 38) 38]
Test Case: 108 | Input/Output: [(73 73 73 73) 73]
Test Case: 109 | Input/Output: [(17 17 17 17) 17]
Test Case: 110 | Input/Output: [(-38 -38 -38 -38) -38]
Test Case: 111 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 112 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 113 | Input/Output: [(73 73 73 73) 73]
Test Case: 114 | Input/Output: [(68 68 68 68) 68]
Test Case: 115 | Input/Output: [(37 37 37 37) 37]
Test Case: 116 | Input/Output: [(61 61 61 61) 61]
Test Case: 117 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 118 | Input/Output: [(29 29 29 29) 29]
Test Case: 119 | Input/Output: [(-11 -11 -11 -11) -11]
Test Case: 120 | Input/Output: [(24 24 24 24) 24]
Test Case: 121 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 122 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 123 | Input/Output: [(94 94 94 94) 94]
Test Case: 124 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 125 | Input/Output: [(4 4 4 4) 4]
Test Case: 126 | Input/Output: [(90 90 90 90) 90]
Test Case: 127 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 128 | Input/Output: [(22 22 22 22) 22]
Test Case: 129 | Input/Output: [(-9 -9 -9 -9) -9]
Test Case: 130 | Input/Output: [(59 59 59 59) 59]
Test Case: 131 | Input/Output: [(-12 -12 -12 -12) -12]
Test Case: 132 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 133 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 134 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 135 | Input/Output: [(-24 -24 -24 -24) -24]
Test Case: 136 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 137 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 138 | Input/Output: [(50 50 50 50) 50]
Test Case: 139 | Input/Output: [(84 84 84 84) 84]
Test Case: 140 | Input/Output: [(21 21 21 21) 21]
Test Case: 141 | Input/Output: [(80 80 80 80) 80]
Test Case: 142 | Input/Output: [(45 45 45 45) 45]
Test Case: 143 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 144 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 145 | Input/Output: [(6 6 6 6) 6]
Test Case: 146 | Input/Output: [(57 57 57 57) 57]
Test Case: 147 | Input/Output: [(35 35 35 35) 35]
Test Case: 148 | Input/Output: [(-37 -37 -37 -37) -37]
Test Case: 149 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 150 | Input/Output: [(31 31 31 31) 31]
Test Case: 151 | Input/Output: [(100 100 100 100) 100]
Test Case: 152 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 153 | Input/Output: [(63 63 63 63) 63]
Test Case: 154 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 155 | Input/Output: [(72 72 72 72) 72]
Test Case: 156 | Input/Output: [(13 13 13 13) 13]
Test Case: 157 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 158 | Input/Output: [(98 98 98 98) 98]
Test Case: 159 | Input/Output: [(92 92 92 92) 92]
Test Case: 160 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 161 | Input/Output: [(45 45 45 45) 45]
Test Case: 162 | Input/Output: [(69 69 69 69) 69]
Test Case: 163 | Input/Output: [(78 78 78 78) 78]
Test Case: 164 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 165 | Input/Output: [(66 66 66 66) 66]
Test Case: 166 | Input/Output: [(10 10 10 10) 10]
Test Case: 167 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 168 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 169 | Input/Output: [(7 7 7 7) 7]
Test Case: 170 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 171 | Input/Output: [(-39 -39 -39 -39) -39]
Test Case: 172 | Input/Output: [(20 20 20 20) 20]
Test Case: 173 | Input/Output: [(-8 -8 -8 -8) -8]
Test Case: 174 | Input/Output: [(26 26 26 26) 26]
Test Case: 175 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 176 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 177 | Input/Output: [(-55 -55 -55 -55) -55]
Test Case: 178 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 179 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 180 | Input/Output: [(-26 -26 -26 -26) -26]
Test Case: 181 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 182 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 183 | Input/Output: [(89 89 89 89) 89]
Test Case: 184 | Input/Output: [(42 42 42 42) 42]
Test Case: 185 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 186 | Input/Output: [(8 8 8 8) 8]
Test Case: 187 | Input/Output: [(88 88 88 88) 88]
Test Case: 188 | Input/Output: [(45 45 45 45) 45]
Test Case: 189 | Input/Output: [(24 24 24 24) 24]
Test Case: 190 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 191 | Input/Output: [(18 18 18 18) 18]
Test Case: 192 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 193 | Input/Output: [(1 1 1 1) 1]
Test Case: 194 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 195 | Input/Output: [(5 5 5 5) 5]
Test Case: 196 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 197 | Input/Output: [(-67 -67 -67 -67) -67]
Test Case: 198 | Input/Output: [(52 52 52 52) 52]
Test Case: 199 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 200 | Input/Output: [(50 19 76 34) 19]
Test Case: 201 | Input/Output: [(86 77 41 72) 41]
Test Case: 202 | Input/Output: [(81 66 99 84) 66]
Test Case: 203 | Input/Output: [(21 81 37 55) 21]
Test Case: 204 | Input/Output: [(49 49 38 57) 38]
Test Case: 205 | Input/Output: [(5 0 81 49) 0]
Test Case: 206 | Input/Output: [(81 9 58 72) 9]
Test Case: 207 | Input/Output: [(85 23 85 22) 22]
Test Case: 208 | Input/Output: [(85 66 58 93) 58]
Test Case: 209 | Input/Output: [(33 47 76 69) 33]
Test Case: 210 | Input/Output: [(35 68 22 46) 22]
Test Case: 211 | Input/Output: [(11 17 15 34) 11]
Test Case: 212 | Input/Output: [(90 93 42 71) 42]
Test Case: 213 | Input/Output: [(9 54 9 85) 9]
Test Case: 214 | Input/Output: [(54 75 38 62) 38]
Test Case: 215 | Input/Output: [(42 66 90 56) 42]
Test Case: 216 | Input/Output: [(54 22 88 16) 16]
Test Case: 217 | Input/Output: [(41 64 77 53) 41]
Test Case: 218 | Input/Output: [(41 13 99 58) 13]
Test Case: 219 | Input/Output: [(74 95 70 74) 70]
Test Case: 220 | Input/Output: [(22 73 8 85) 8]
Test Case: 221 | Input/Output: [(20 97 100 41) 20]
Test Case: 222 | Input/Output: [(22 50 11 60) 11]
Test Case: 223 | Input/Output: [(68 11 65 36) 11]
Test Case: 224 | Input/Output: [(58 28 26 62) 26]
Test Case: 225 | Input/Output: [(12 2 99 23) 2]
Test Case: 226 | Input/Output: [(14 37 21 76) 14]
Test Case: 227 | Input/Output: [(39 50 0 65) 0]
Test Case: 228 | Input/Output: [(82 81 79 0) 0]
Test Case: 229 | Input/Output: [(47 60 47 36) 36]
Test Case: 230 | Input/Output: [(20 72 88 87) 20]
Test Case: 231 | Input/Output: [(43 45 1 49) 1]
Test Case: 232 | Input/Output: [(43 1 60 8) 1]
Test Case: 233 | Input/Output: [(8 62 67 71) 8]
Test Case: 234 | Input/Output: [(86 54 4 46) 4]
Test Case: 235 | Input/Output: [(44 39 52 30) 30]
Test Case: 236 | Input/Output: [(12 98 57 100) 12]
Test Case: 237 | Input/Output: [(47 84 31 59) 31]
Test Case: 238 | Input/Output: [(65 10 15 68) 10]
Test Case: 239 | Input/Output: [(26 89 54 51) 26]
Test Case: 240 | Input/Output: [(45 52 42 55) 42]
Test Case: 241 | Input/Output: [(73 86 85 8) 8]
Test Case: 242 | Input/Output: [(32 11 6 16) 6]
Test Case: 243 | Input/Output: [(34 56 88 52) 34]
Test Case: 244 | Input/Output: [(78 34 9 71) 9]
Test Case: 245 | Input/Output: [(71 67 45 11) 11]
Test Case: 246 | Input/Output: [(36 26 6 78) 6]
Test Case: 247 | Input/Output: [(59 47 9 73) 9]
Test Case: 248 | Input/Output: [(95 65 60 36) 36]
Test Case: 249 | Input/Output: [(82 54 61 72) 54]
Test Case: 250 | Input/Output: [(83 89 84 18) 18]
Test Case: 251 | Input/Output: [(62 3 14 1) 1]
Test Case: 252 | Input/Output: [(80 38 71 50) 38]
Test Case: 253 | Input/Output: [(70 92 47 92) 47]
Test Case: 254 | Input/Output: [(1 83 49 32) 1]
Test Case: 255 | Input/Output: [(9 45 62 30) 9]
Test Case: 256 | Input/Output: [(65 70 5 85) 5]
Test Case: 257 | Input/Output: [(44 68 37 19) 19]
Test Case: 258 | Input/Output: [(57 39 1 34) 1]
Test Case: 259 | Input/Output: [(92 77 85 52) 52]
Test Case: 260 | Input/Output: [(37 55 66 21) 21]
Test Case: 261 | Input/Output: [(12 12 21 96) 12]
Test Case: 262 | Input/Output: [(8 47 98 55) 8]
Test Case: 263 | Input/Output: [(44 95 55 98) 44]
Test Case: 264 | Input/Output: [(93 39 69 100) 39]
Test Case: 265 | Input/Output: [(89 42 44 56) 42]
Test Case: 266 | Input/Output: [(6 7 44 72) 6]
Test Case: 267 | Input/Output: [(58 98 22 52) 22]
Test Case: 268 | Input/Output: [(22 76 30 64) 22]
Test Case: 269 | Input/Output: [(21 64 8 62) 8]
Test Case: 270 | Input/Output: [(74 19 85 97) 19]
Test Case: 271 | Input/Output: [(42 40 16 51) 16]
Test Case: 272 | Input/Output: [(36 21 98 26) 21]
Test Case: 273 | Input/Output: [(57 81 41 24) 24]
Test Case: 274 | Input/Output: [(95 70 47 33) 33]
Test Case: 275 | Input/Output: [(5 35 45 17) 5]
Test Case: 276 | Input/Output: [(13 49 85 9) 9]
Test Case: 277 | Input/Output: [(25 18 36 68) 18]
Test Case: 278 | Input/Output: [(4 93 63 0) 0]
Test Case: 279 | Input/Output: [(91 25 46 9) 9]
Test Case: 280 | Input/Output: [(91 91 33 13) 13]
Test Case: 281 | Input/Output: [(94 9 52 32) 9]
Test Case: 282 | Input/Output: [(69 51 12 72) 12]
Test Case: 283 | Input/Output: [(6 84 15 45) 6]
Test Case: 284 | Input/Output: [(39 98 38 45) 38]
Test Case: 285 | Input/Output: [(33 8 16 41) 8]
Test Case: 286 | Input/Output: [(11 44 21 48) 11]
Test Case: 287 | Input/Output: [(30 44 10 31) 10]
Test Case: 288 | Input/Output: [(79 97 64 78) 64]
Test Case: 289 | Input/Output: [(22 67 99 13) 13]
Test Case: 290 | Input/Output: [(61 97 98 95) 61]
Test Case: 291 | Input/Output: [(23 32 89 44) 23]
Test Case: 292 | Input/Output: [(1 70 38 3) 1]
Test Case: 293 | Input/Output: [(56 17 2 10) 2]
Test Case: 294 | Input/Output: [(0 57 96 74) 0]
Test Case: 295 | Input/Output: [(28 10 63 53) 10]
Test Case: 296 | Input/Output: [(44 10 16 43) 10]
Test Case: 297 | Input/Output: [(84 12 26 5) 5]
Test Case: 298 | Input/Output: [(90 90 73 2) 2]
Test Case: 299 | Input/Output: [(17 94 31 96) 17]
Test Case: 300 | Input/Output: [(87 54 15 3) 3]
Test Case: 301 | Input/Output: [(29 65 27 80) 27]
Test Case: 302 | Input/Output: [(52 37 92 76) 37]
Test Case: 303 | Input/Output: [(65 16 67 56) 16]
Test Case: 304 | Input/Output: [(95 21 88 76) 21]
Test Case: 305 | Input/Output: [(4 60 61 11) 4]
Test Case: 306 | Input/Output: [(84 42 80 41) 41]
Test Case: 307 | Input/Output: [(96 88 48 54) 48]
Test Case: 308 | Input/Output: [(75 52 75 2) 2]
Test Case: 309 | Input/Output: [(0 85 84 96) 0]
Test Case: 310 | Input/Output: [(30 62 61 90) 30]
Test Case: 311 | Input/Output: [(0 23 31 63) 0]
Test Case: 312 | Input/Output: [(48 49 88 73) 48]
Test Case: 313 | Input/Output: [(61 55 31 13) 13]
Test Case: 314 | Input/Output: [(74 81 75 99) 74]
Test Case: 315 | Input/Output: [(100 55 80 96) 55]
Test Case: 316 | Input/Output: [(97 15 73 48) 15]
Test Case: 317 | Input/Output: [(56 34 13 67) 13]
Test Case: 318 | Input/Output: [(23 70 51 38) 23]
Test Case: 319 | Input/Output: [(76 49 48 13) 13]
Test Case: 320 | Input/Output: [(47 47 24 73) 24]
Test Case: 321 | Input/Output: [(78 39 36 69) 36]
Test Case: 322 | Input/Output: [(86 46 88 72) 46]
Test Case: 323 | Input/Output: [(27 37 38 55) 27]
Test Case: 324 | Input/Output: [(59 35 17 87) 17]
Test Case: 325 | Input/Output: [(98 54 3 53) 3]
Test Case: 326 | Input/Output: [(59 11 37 28) 11]
Test Case: 327 | Input/Output: [(8 62 70 34) 8]
Test Case: 328 | Input/Output: [(76 1 5 52) 1]
Test Case: 329 | Input/Output: [(54 33 93 52) 33]
Test Case: 330 | Input/Output: [(89 37 72 26) 26]
Test Case: 331 | Input/Output: [(76 59 65 47) 47]
Test Case: 332 | Input/Output: [(21 61 50 88) 21]
Test Case: 333 | Input/Output: [(20 4 32 17) 4]
Test Case: 334 | Input/Output: [(71 71 5 10) 5]
Test Case: 335 | Input/Output: [(47 46 95 80) 46]
Test Case: 336 | Input/Output: [(10 55 50 1) 1]
Test Case: 337 | Input/Output: [(93 6 60 60) 6]
Test Case: 338 | Input/Output: [(96 18 26 73) 18]
Test Case: 339 | Input/Output: [(47 39 22 47) 22]
Test Case: 340 | Input/Output: [(31 8 55 54) 8]
Test Case: 341 | Input/Output: [(54 39 76 60) 39]
Test Case: 342 | Input/Output: [(53 57 45 75) 45]
Test Case: 343 | Input/Output: [(45 67 67 49) 45]
Test Case: 344 | Input/Output: [(82 27 30 90) 27]
Test Case: 345 | Input/Output: [(18 47 80 70) 18]
Test Case: 346 | Input/Output: [(44 97 36 73) 36]
Test Case: 347 | Input/Output: [(9 41 94 43) 9]
Test Case: 348 | Input/Output: [(49 48 13 17) 13]
Test Case: 349 | Input/Output: [(82 91 70 99) 70]
Test Case: 350 | Input/Output: [(71 88 40 41) 40]
Test Case: 351 | Input/Output: [(47 86 59 75) 47]
Test Case: 352 | Input/Output: [(10 29 53 19) 10]
Test Case: 353 | Input/Output: [(61 59 26 8) 8]
Test Case: 354 | Input/Output: [(2 62 22 88) 2]
Test Case: 355 | Input/Output: [(61 46 38 7) 7]
Test Case: 356 | Input/Output: [(54 68 88 46) 46]
Test Case: 357 | Input/Output: [(16 24 51 16) 16]
Test Case: 358 | Input/Output: [(19 63 42 56) 19]
Test Case: 359 | Input/Output: [(98 91 17 60) 17]
Test Case: 360 | Input/Output: [(52 71 47 53) 47]
Test Case: 361 | Input/Output: [(24 0 21 79) 0]
Test Case: 362 | Input/Output: [(39 36 84 33) 33]
Test Case: 363 | Input/Output: [(25 33 47 88) 25]
Test Case: 364 | Input/Output: [(2 72 67 35) 2]
Test Case: 365 | Input/Output: [(86 34 75 46) 34]
Test Case: 366 | Input/Output: [(31 53 29 2) 2]
Test Case: 367 | Input/Output: [(25 45 35 70) 25]
Test Case: 368 | Input/Output: [(89 86 35 59) 35]
Test Case: 369 | Input/Output: [(48 51 55 95) 48]
Test Case: 370 | Input/Output: [(2 72 12 64) 2]
Test Case: 371 | Input/Output: [(87 50 73 62) 50]
Test Case: 372 | Input/Output: [(12 53 58 52) 12]
Test Case: 373 | Input/Output: [(67 11 57 2) 2]
Test Case: 374 | Input/Output: [(2 82 31 19) 2]
Test Case: 375 | Input/Output: [(99 33 11 39) 11]
Test Case: 376 | Input/Output: [(78 45 75 89) 45]
Test Case: 377 | Input/Output: [(10 69 91 98) 10]
Test Case: 378 | Input/Output: [(72 39 71 81) 39]
Test Case: 379 | Input/Output: [(23 40 7 65) 7]
Test Case: 380 | Input/Output: [(31 75 5 37) 5]
Test Case: 381 | Input/Output: [(91 69 33 5) 5]
Test Case: 382 | Input/Output: [(81 89 95 58) 58]
Test Case: 383 | Input/Output: [(90 91 18 79) 18]
Test Case: 384 | Input/Output: [(94 25 88 94) 25]
Test Case: 385 | Input/Output: [(12 62 64 23) 12]
Test Case: 386 | Input/Output: [(51 77 94 6) 6]
Test Case: 387 | Input/Output: [(30 80 35 80) 30]
Test Case: 388 | Input/Output: [(49 8 40 90) 8]
Test Case: 389 | Input/Output: [(56 18 10 15) 10]
Test Case: 390 | Input/Output: [(3 24 82 49) 3]
Test Case: 391 | Input/Output: [(87 89 88 6) 6]
Test Case: 392 | Input/Output: [(83 3 4 10) 3]
Test Case: 393 | Input/Output: [(84 81 67 88) 67]
Test Case: 394 | Input/Output: [(98 25 32 25) 25]
Test Case: 395 | Input/Output: [(17 55 92 40) 17]
Test Case: 396 | Input/Output: [(35 76 38 26) 26]
Test Case: 397 | Input/Output: [(17 30 57 52) 17]
Test Case: 398 | Input/Output: [(93 21 20 97) 20]
Test Case: 399 | Input/Output: [(89 9 66 10) 9]
Test Case: 400 | Input/Output: [(-15 77 -74 18) -74]
Test Case: 401 | Input/Output: [(97 -46 4 24) -46]
Test Case: 402 | Input/Output: [(81 96 -99 -8) -99]
Test Case: 403 | Input/Output: [(-32 -79 -13 -14) -79]
Test Case: 404 | Input/Output: [(-14 64 37 -13) -14]
Test Case: 405 | Input/Output: [(-72 -77 -9 -6) -77]
Test Case: 406 | Input/Output: [(75 -24 78 -29) -29]
Test Case: 407 | Input/Output: [(-25 49 -13 -7) -25]
Test Case: 408 | Input/Output: [(-83 -59 -14 -60) -83]
Test Case: 409 | Input/Output: [(92 23 93 -69) -69]
Test Case: 410 | Input/Output: [(59 -53 10 42) -53]
Test Case: 411 | Input/Output: [(78 -91 80 53) -91]
Test Case: 412 | Input/Output: [(99 60 -28 -58) -58]
Test Case: 413 | Input/Output: [(27 70 -67 31) -67]
Test Case: 414 | Input/Output: [(-90 10 27 -83) -90]
Test Case: 415 | Input/Output: [(-8 21 -35 -70) -70]
Test Case: 416 | Input/Output: [(29 43 23 18) 18]
Test Case: 417 | Input/Output: [(14 -87 -28 -30) -87]
Test Case: 418 | Input/Output: [(-33 -50 -7 66) -50]
Test Case: 419 | Input/Output: [(-69 81 98 33) -69]
Test Case: 420 | Input/Output: [(-50 -44 28 -80) -80]
Test Case: 421 | Input/Output: [(39 20 6 49) 6]
Test Case: 422 | Input/Output: [(25 36 63 66) 25]
Test Case: 423 | Input/Output: [(-47 -71 -83 84) -83]
Test Case: 424 | Input/Output: [(45 7 -96 -98) -98]
Test Case: 425 | Input/Output: [(-65 -52 69 -3) -65]
Test Case: 426 | Input/Output: [(-90 49 100 -7) -90]
Test Case: 427 | Input/Output: [(-56 -16 93 -37) -56]
Test Case: 428 | Input/Output: [(-73 -2 8 44) -73]
Test Case: 429 | Input/Output: [(36 84 -58 65) -58]
Test Case: 430 | Input/Output: [(-79 23 75 69) -79]
Test Case: 431 | Input/Output: [(20 39 -63 41) -63]
Test Case: 432 | Input/Output: [(30 27 -36 -76) -76]
Test Case: 433 | Input/Output: [(-68 60 95 31) -68]
Test Case: 434 | Input/Output: [(1 67 46 42) 1]
Test Case: 435 | Input/Output: [(81 -15 38 -38) -38]
Test Case: 436 | Input/Output: [(27 23 -76 67) -76]
Test Case: 437 | Input/Output: [(-3 -71 52 -85) -85]
Test Case: 438 | Input/Output: [(-29 -86 92 -54) -86]
Test Case: 439 | Input/Output: [(-20 -69 -43 -73) -73]
Test Case: 440 | Input/Output: [(37 -100 -59 35) -100]
Test Case: 441 | Input/Output: [(36 27 97 56) 27]
Test Case: 442 | Input/Output: [(63 63 -51 38) -51]
Test Case: 443 | Input/Output: [(-45 -60 84 -7) -60]
Test Case: 444 | Input/Output: [(65 71 -43 -28) -43]
Test Case: 445 | Input/Output: [(97 37 43 -96) -96]
Test Case: 446 | Input/Output: [(92 43 81 -80) -80]
Test Case: 447 | Input/Output: [(-96 -70 -30 -64) -96]
Test Case: 448 | Input/Output: [(68 -25 81 -33) -33]
Test Case: 449 | Input/Output: [(-67 72 47 70) -67]
Test Case: 450 | Input/Output: [(76 -12 83 -23) -23]
Test Case: 451 | Input/Output: [(59 -22 99 -39) -39]
Test Case: 452 | Input/Output: [(97 -35 -55 44) -55]
Test Case: 453 | Input/Output: [(-3 36 80 27) -3]
Test Case: 454 | Input/Output: [(65 -48 58 -52) -52]
Test Case: 455 | Input/Output: [(-66 -48 -59 -15) -66]
Test Case: 456 | Input/Output: [(75 62 -39 29) -39]
Test Case: 457 | Input/Output: [(-53 -57 84 46) -57]
Test Case: 458 | Input/Output: [(20 46 30 14) 14]
Test Case: 459 | Input/Output: [(37 -77 32 62) -77]
Test Case: 460 | Input/Output: [(-77 -4 73 78) -77]
Test Case: 461 | Input/Output: [(90 79 -67 64) -67]
Test Case: 462 | Input/Output: [(44 22 -87 83) -87]
Test Case: 463 | Input/Output: [(92 -90 -54 72) -90]
Test Case: 464 | Input/Output: [(-79 96 -93 46) -93]
Test Case: 465 | Input/Output: [(-78 26 -98 -8) -98]
Test Case: 466 | Input/Output: [(8 35 -28 42) -28]
Test Case: 467 | Input/Output: [(-22 -39 -75 15) -75]
Test Case: 468 | Input/Output: [(-31 45 -68 95) -68]
Test Case: 469 | Input/Output: [(-80 59 -73 82) -80]
Test Case: 470 | Input/Output: [(-86 97 -92 53) -92]
Test Case: 471 | Input/Output: [(-17 42 -89 25) -89]
Test Case: 472 | Input/Output: [(-71 33 17 3) -71]
Test Case: 473 | Input/Output: [(25 78 36 -83) -83]
Test Case: 474 | Input/Output: [(3 -95 9 -38) -95]
Test Case: 475 | Input/Output: [(12 31 43 -30) -30]
Test Case: 476 | Input/Output: [(-45 27 57 20) -45]
Test Case: 477 | Input/Output: [(-88 -33 24 -76) -88]
Test Case: 478 | Input/Output: [(94 21 -70 46) -70]
Test Case: 479 | Input/Output: [(-43 26 -40 97) -43]
Test Case: 480 | Input/Output: [(54 -50 35 97) -50]
Test Case: 481 | Input/Output: [(-16 42 -76 45) -76]
Test Case: 482 | Input/Output: [(61 41 -79 15) -79]
Test Case: 483 | Input/Output: [(-93 22 68 -66) -93]
Test Case: 484 | Input/Output: [(84 60 -30 33) -30]
Test Case: 485 | Input/Output: [(3 0 82 -97) -97]
Test Case: 486 | Input/Output: [(87 -86 -49 -80) -86]
Test Case: 487 | Input/Output: [(23 96 31 -91) -91]
Test Case: 488 | Input/Output: [(27 42 42 32) 27]
Test Case: 489 | Input/Output: [(-79 82 -50 -91) -91]
Test Case: 490 | Input/Output: [(41 -83 -90 -27) -90]
Test Case: 491 | Input/Output: [(-37 73 -28 -29) -37]
Test Case: 492 | Input/Output: [(6 46 -16 86) -16]
Test Case: 493 | Input/Output: [(-11 -100 57 -98) -100]
Test Case: 494 | Input/Output: [(5 -7 -61 -92) -92]
Test Case: 495 | Input/Output: [(17 -48 -36 -64) -64]
Test Case: 496 | Input/Output: [(16 39 -64 -22) -64]
Test Case: 497 | Input/Output: [(-50 -75 47 1) -75]
Test Case: 498 | Input/Output: [(60 -67 81 33) -67]
Test Case: 499 | Input/Output: [(-73 -20 -13 68) -73]
Test Case: 500 | Input/Output: [(5 39 59 -40) -40]
Test Case: 501 | Input/Output: [(-56 -84 48 -12) -84]
Test Case: 502 | Input/Output: [(-90 26 -41 -83) -90]
Test Case: 503 | Input/Output: [(-31 -75 83 -89) -89]
Test Case: 504 | Input/Output: [(40 -32 89 -76) -76]
Test Case: 505 | Input/Output: [(36 -10 32 -26) -26]
Test Case: 506 | Input/Output: [(-90 38 -73 -51) -90]
Test Case: 507 | Input/Output: [(22 -79 86 -37) -79]
Test Case: 508 | Input/Output: [(-22 0 72 -87) -87]
Test Case: 509 | Input/Output: [(8 51 -40 37) -40]
Test Case: 510 | Input/Output: [(-7 -74 80 -59) -74]
Test Case: 511 | Input/Output: [(-8 84 -82 -80) -82]
Test Case: 512 | Input/Output: [(96 35 -96 -17) -96]
Test Case: 513 | Input/Output: [(-36 -46 -26 6) -46]
Test Case: 514 | Input/Output: [(43 -72 -10 -38) -72]
Test Case: 515 | Input/Output: [(17 -17 66 21) -17]
Test Case: 516 | Input/Output: [(41 -54 65 -57) -57]
Test Case: 517 | Input/Output: [(70 13 0 75) 0]
Test Case: 518 | Input/Output: [(87 30 55 -87) -87]
Test Case: 519 | Input/Output: [(72 3 -25 5) -25]
Test Case: 520 | Input/Output: [(70 28 -20 -5) -20]
Test Case: 521 | Input/Output: [(74 62 46 24) 24]
Test Case: 522 | Input/Output: [(-70 -2 33 -38) -70]
Test Case: 523 | Input/Output: [(-73 -30 62 -82) -82]
Test Case: 524 | Input/Output: [(-59 -35 -92 16) -92]
Test Case: 525 | Input/Output: [(51 -40 -43 64) -43]
Test Case: 526 | Input/Output: [(-84 -92 45 -25) -92]
Test Case: 527 | Input/Output: [(-15 -88 -19 -5) -88]
Test Case: 528 | Input/Output: [(-35 60 90 18) -35]
Test Case: 529 | Input/Output: [(3 -97 85 40) -97]
Test Case: 530 | Input/Output: [(-25 57 -27 79) -27]
Test Case: 531 | Input/Output: [(55 -27 60 88) -27]
Test Case: 532 | Input/Output: [(9 19 -85 59) -85]
Test Case: 533 | Input/Output: [(-98 74 -85 -26) -98]
Test Case: 534 | Input/Output: [(-79 -83 97 -26) -83]
Test Case: 535 | Input/Output: [(99 67 45 -80) -80]
Test Case: 536 | Input/Output: [(-29 -34 42 -34) -34]
Test Case: 537 | Input/Output: [(-49 -4 45 53) -49]
Test Case: 538 | Input/Output: [(80 1 -94 -43) -94]
Test Case: 539 | Input/Output: [(-13 -97 14 -27) -97]
Test Case: 540 | Input/Output: [(-66 100 13 50) -66]
Test Case: 541 | Input/Output: [(-33 27 87 98) -33]
Test Case: 542 | Input/Output: [(-25 30 -100 4) -100]
Test Case: 543 | Input/Output: [(-46 -56 -87 100) -87]
Test Case: 544 | Input/Output: [(69 88 62 -7) -7]
Test Case: 545 | Input/Output: [(-100 -50 26 29) -100]
Test Case: 546 | Input/Output: [(-4 -18 0 -12) -18]
Test Case: 547 | Input/Output: [(-100 -75 99 -79) -100]
Test Case: 548 | Input/Output: [(84 23 34 77) 23]
Test Case: 549 | Input/Output: [(-54 48 41 -5) -54]
Test Case: 550 | Input/Output: [(15 -76 2 -44) -76]
Test Case: 551 | Input/Output: [(4 -42 -30 -19) -42]
Test Case: 552 | Input/Output: [(-84 65 -1 17) -84]
Test Case: 553 | Input/Output: [(88 37 16 -68) -68]
Test Case: 554 | Input/Output: [(65 66 -88 -22) -88]
Test Case: 555 | Input/Output: [(94 -31 56 97) -31]
Test Case: 556 | Input/Output: [(42 71 78 91) 42]
Test Case: 557 | Input/Output: [(-76 -18 61 -7) -76]
Test Case: 558 | Input/Output: [(-75 -65 -18 -2) -75]
Test Case: 559 | Input/Output: [(-13 -2 72 -78) -78]
Test Case: 560 | Input/Output: [(-78 -96 7 -70) -96]
Test Case: 561 | Input/Output: [(6 7 -13 40) -13]
Test Case: 562 | Input/Output: [(-89 85 -5 94) -89]
Test Case: 563 | Input/Output: [(98 -67 11 -46) -67]
Test Case: 564 | Input/Output: [(-75 69 -20 39) -75]
Test Case: 565 | Input/Output: [(5 -31 -67 -91) -91]
Test Case: 566 | Input/Output: [(-24 86 15 54) -24]
Test Case: 567 | Input/Output: [(-39 -23 -64 -87) -87]
Test Case: 568 | Input/Output: [(-34 19 60 -28) -34]
Test Case: 569 | Input/Output: [(70 7 33 -41) -41]
Test Case: 570 | Input/Output: [(8 64 -91 64) -91]
Test Case: 571 | Input/Output: [(71 61 65 58) 58]
Test Case: 572 | Input/Output: [(-18 41 -51 72) -51]
Test Case: 573 | Input/Output: [(-22 23 -8 3) -22]
Test Case: 574 | Input/Output: [(-41 87 -35 84) -41]
Test Case: 575 | Input/Output: [(-96 3 6 -45) -96]
Test Case: 576 | Input/Output: [(-40 -13 -52 -39) -52]
Test Case: 577 | Input/Output: [(79 1 83 -80) -80]
Test Case: 578 | Input/Output: [(-63 78 -88 74) -88]
Test Case: 579 | Input/Output: [(21 -53 -81 64) -81]
Test Case: 580 | Input/Output: [(-40 -74 -81 -6) -81]
Test Case: 581 | Input/Output: [(-100 -56 -1 7) -100]
Test Case: 582 | Input/Output: [(-88 -45 -24 66) -88]
Test Case: 583 | Input/Output: [(2 29 -55 4) -55]
Test Case: 584 | Input/Output: [(-88 9 26 100) -88]
Test Case: 585 | Input/Output: [(-12 29 -90 -89) -90]
Test Case: 586 | Input/Output: [(-78 -58 16 -58) -78]
Test Case: 587 | Input/Output: [(31 85 84 27) 27]
Test Case: 588 | Input/Output: [(-68 76 -32 -18) -68]
Test Case: 589 | Input/Output: [(-90 17 64 -77) -90]
Test Case: 590 | Input/Output: [(-11 56 -36 53) -36]
Test Case: 591 | Input/Output: [(-49 -87 28 -61) -87]
Test Case: 592 | Input/Output: [(-22 -97 -18 54) -97]
Test Case: 593 | Input/Output: [(-89 84 45 -75) -89]
Test Case: 594 | Input/Output: [(-50 40 91 -20) -50]
Test Case: 595 | Input/Output: [(99 6 16 -48) -48]
Test Case: 596 | Input/Output: [(-37 -1 93 -43) -43]
Test Case: 597 | Input/Output: [(18 -76 76 -72) -76]
Test Case: 598 | Input/Output: [(-100 -60 20 -78) -100]
Test Case: 599 | Input/Output: [(-53 27 97 -4) -53]
Test Case: 600 | Input/Output: [(95 56 6 51) 6]
Test Case: 601 | Input/Output: [(37 93 -2 80) -2]
Test Case: 602 | Input/Output: [(91 -45 16 49) -45]
Test Case: 603 | Input/Output: [(28 -53 82 40) -53]
Test Case: 604 | Input/Output: [(-94 40 -18 -18) -94]
Test Case: 605 | Input/Output: [(-86 -66 39 56) -86]
Test Case: 606 | Input/Output: [(5 80 -18 -63) -63]
Test Case: 607 | Input/Output: [(-9 16 -30 -13) -30]
Test Case: 608 | Input/Output: [(92 -12 -39 -7) -39]
Test Case: 609 | Input/Output: [(-3 -23 64 -9) -23]
Test Case: 610 | Input/Output: [(53 -36 59 -83) -83]
Test Case: 611 | Input/Output: [(80 31 60 -94) -94]
Test Case: 612 | Input/Output: [(-67 85 -66 35) -67]
Test Case: 613 | Input/Output: [(15 -23 69 98) -23]
Test Case: 614 | Input/Output: [(56 28 13 82) 13]
Test Case: 615 | Input/Output: [(56 -76 -63 -92) -92]
Test Case: 616 | Input/Output: [(-19 69 12 -12) -19]
Test Case: 617 | Input/Output: [(-98 79 -19 -5) -98]
Test Case: 618 | Input/Output: [(12 -72 86 -71) -72]
Test Case: 619 | Input/Output: [(20 -99 70 40) -99]
Test Case: 620 | Input/Output: [(37 -71 -47 -23) -71]
Test Case: 621 | Input/Output: [(-17 10 -40 -58) -58]
Test Case: 622 | Input/Output: [(-33 74 -91 -92) -92]
Test Case: 623 | Input/Output: [(-6 -82 -81 65) -82]
Test Case: 624 | Input/Output: [(58 53 -100 98) -100]
Test Case: 625 | Input/Output: [(-98 -65 -16 -92) -98]
Test Case: 626 | Input/Output: [(-84 -90 98 27) -90]
Test Case: 627 | Input/Output: [(-52 25 -36 -45) -52]
Test Case: 628 | Input/Output: [(88 66 1 43) 1]
Test Case: 629 | Input/Output: [(-6 -43 20 100) -43]
Test Case: 630 | Input/Output: [(67 -42 -38 20) -42]
Test Case: 631 | Input/Output: [(37 -83 -79 -74) -83]
Test Case: 632 | Input/Output: [(45 46 -33 -8) -33]
Test Case: 633 | Input/Output: [(-14 -95 34 -76) -95]
Test Case: 634 | Input/Output: [(49 91 77 -12) -12]
Test Case: 635 | Input/Output: [(-60 -60 -45 12) -60]
Test Case: 636 | Input/Output: [(-81 48 9 48) -81]
Test Case: 637 | Input/Output: [(9 -58 -4 -60) -60]
Test Case: 638 | Input/Output: [(-33 88 12 9) -33]
Test Case: 639 | Input/Output: [(-50 41 54 62) -50]
Test Case: 640 | Input/Output: [(-35 37 50 30) -35]
Test Case: 641 | Input/Output: [(-10 71 -33 -87) -87]
Test Case: 642 | Input/Output: [(-8 -9 46 -20) -20]
Test Case: 643 | Input/Output: [(31 -53 -66 -42) -66]
Test Case: 644 | Input/Output: [(7 -88 88 -16) -88]
Test Case: 645 | Input/Output: [(-50 3 -55 -3) -55]
Test Case: 646 | Input/Output: [(-78 -47 -45 66) -78]
Test Case: 647 | Input/Output: [(6 3 35 -41) -41]
Test Case: 648 | Input/Output: [(52 96 22 65) 22]
Test Case: 649 | Input/Output: [(70 57 -33 89) -33]
Test Case: 650 | Input/Output: [(-88 49 9 62) -88]
Test Case: 651 | Input/Output: [(28 -18 53 17) -18]
Test Case: 652 | Input/Output: [(81 87 2 -14) -14]
Test Case: 653 | Input/Output: [(75 -85 -49 -33) -85]
Test Case: 654 | Input/Output: [(44 -5 48 85) -5]
Test Case: 655 | Input/Output: [(14 -65 85 -10) -65]
Test Case: 656 | Input/Output: [(54 9 3 48) 3]
Test Case: 657 | Input/Output: [(71 -32 78 -72) -72]
Test Case: 658 | Input/Output: [(-93 37 89 -10) -93]
Test Case: 659 | Input/Output: [(97 9 -60 90) -60]
Test Case: 660 | Input/Output: [(0 -27 28 -57) -57]
Test Case: 661 | Input/Output: [(-33 -14 -36 -57) -57]
Test Case: 662 | Input/Output: [(93 -28 11 16) -28]
Test Case: 663 | Input/Output: [(-15 53 -85 7) -85]
Test Case: 664 | Input/Output: [(-57 83 -34 79) -57]
Test Case: 665 | Input/Output: [(4 87 2 40) 2]
Test Case: 666 | Input/Output: [(-34 78 -60 -11) -60]
Test Case: 667 | Input/Output: [(3 -83 -51 27) -83]
Test Case: 668 | Input/Output: [(39 45 93 -65) -65]
Test Case: 669 | Input/Output: [(-69 32 45 56) -69]
Test Case: 670 | Input/Output: [(-70 73 -21 76) -70]
Test Case: 671 | Input/Output: [(-81 99 -62 -17) -81]
Test Case: 672 | Input/Output: [(62 41 28 95) 28]
Test Case: 673 | Input/Output: [(88 -41 -29 -68) -68]
Test Case: 674 | Input/Output: [(16 -77 -40 -39) -77]
Test Case: 675 | Input/Output: [(78 0 -59 19) -59]
Test Case: 676 | Input/Output: [(-76 40 38 17) -76]
Test Case: 677 | Input/Output: [(-93 -90 -74 -1) -93]
Test Case: 678 | Input/Output: [(49 78 -92 -73) -92]
Test Case: 679 | Input/Output: [(92 59 6 -82) -82]
Test Case: 680 | Input/Output: [(-48 -67 93 -100) -100]
Test Case: 681 | Input/Output: [(-34 51 59 80) -34]
Test Case: 682 | Input/Output: [(95 -95 19 59) -95]
Test Case: 683 | Input/Output: [(40 -39 82 77) -39]
Test Case: 684 | Input/Output: [(-4 -44 9 -46) -46]
Test Case: 685 | Input/Output: [(-70 38 61 69) -70]
Test Case: 686 | Input/Output: [(-78 58 -76 13) -78]
Test Case: 687 | Input/Output: [(48 -80 -69 -18) -80]
Test Case: 688 | Input/Output: [(-69 54 91 -64) -69]
Test Case: 689 | Input/Output: [(61 -46 -74 47) -74]
Test Case: 690 | Input/Output: [(-73 -64 -87 10) -87]
Test Case: 691 | Input/Output: [(24 -33 89 -6) -33]
Test Case: 692 | Input/Output: [(-25 86 -10 100) -25]
Test Case: 693 | Input/Output: [(60 85 96 64) 60]
Test Case: 694 | Input/Output: [(50 -96 -32 -45) -96]
Test Case: 695 | Input/Output: [(-6 8 -82 -53) -82]
Test Case: 696 | Input/Output: [(-79 -66 6 72) -79]
Test Case: 697 | Input/Output: [(-61 78 36 -20) -61]
Test Case: 698 | Input/Output: [(-36 59 18 -22) -36]
Test Case: 699 | Input/Output: [(-30 -4 14 24) -30]
Test Case: 700 | Input/Output: [(23 -79 -31 43) -79]
Test Case: 701 | Input/Output: [(-89 59 79 95) -89]
Test Case: 702 | Input/Output: [(48 -8 81 -41) -41]
Test Case: 703 | Input/Output: [(-19 -81 98 81) -81]
Test Case: 704 | Input/Output: [(-39 -59 -53 67) -59]
Test Case: 705 | Input/Output: [(-23 18 -63 99) -63]
Test Case: 706 | Input/Output: [(-43 -5 -10 29) -43]
Test Case: 707 | Input/Output: [(-18 52 -26 -95) -95]
Test Case: 708 | Input/Output: [(75 95 -49 -12) -49]
Test Case: 709 | Input/Output: [(-12 84 -37 59) -37]
Test Case: 710 | Input/Output: [(-11 -11 35 -57) -57]
Test Case: 711 | Input/Output: [(-55 63 -85 -24) -85]
Test Case: 712 | Input/Output: [(40 21 -12 30) -12]
Test Case: 713 | Input/Output: [(-61 -12 -68 37) -68]
Test Case: 714 | Input/Output: [(94 12 -84 73) -84]
Test Case: 715 | Input/Output: [(37 -42 73 -26) -42]
Test Case: 716 | Input/Output: [(-57 56 -51 62) -57]
Test Case: 717 | Input/Output: [(-54 13 -61 -34) -61]
Test Case: 718 | Input/Output: [(-80 -77 89 87) -80]
Test Case: 719 | Input/Output: [(-20 22 -62 -86) -86]
Test Case: 720 | Input/Output: [(95 4 33 -34) -34]
Test Case: 721 | Input/Output: [(-55 26 58 50) -55]
Test Case: 722 | Input/Output: [(89 23 -2 -84) -84]
Test Case: 723 | Input/Output: [(54 -77 -42 55) -77]
Test Case: 724 | Input/Output: [(-14 -16 -58 41) -58]
Test Case: 725 | Input/Output: [(41 -75 77 -67) -75]
Test Case: 726 | Input/Output: [(31 -39 -56 89) -56]
Test Case: 727 | Input/Output: [(-68 28 -16 60) -68]
Test Case: 728 | Input/Output: [(-38 40 30 21) -38]
Test Case: 729 | Input/Output: [(-41 -46 -99 58) -99]
Test Case: 730 | Input/Output: [(-38 23 78 84) -38]
Test Case: 731 | Input/Output: [(63 -5 -18 -33) -33]
Test Case: 732 | Input/Output: [(26 69 17 3) 3]
Test Case: 733 | Input/Output: [(-57 -56 34 -17) -57]
Test Case: 734 | Input/Output: [(73 -59 74 87) -59]
Test Case: 735 | Input/Output: [(69 14 -92 -38) -92]
Test Case: 736 | Input/Output: [(-67 51 -68 -61) -68]
Test Case: 737 | Input/Output: [(50 34 32 40) 32]
Test Case: 738 | Input/Output: [(8 69 38 -85) -85]
Test Case: 739 | Input/Output: [(-92 -19 81 71) -92]
Test Case: 740 | Input/Output: [(70 -100 48 -28) -100]
Test Case: 741 | Input/Output: [(-27 70 79 -45) -45]
Test Case: 742 | Input/Output: [(-37 88 86 -96) -96]
Test Case: 743 | Input/Output: [(-55 -11 -96 3) -96]
Test Case: 744 | Input/Output: [(-69 59 -63 -17) -69]
Test Case: 745 | Input/Output: [(-63 6 -51 -50) -63]
Test Case: 746 | Input/Output: [(60 98 -82 -51) -82]
Test Case: 747 | Input/Output: [(35 69 -14 -84) -84]
Test Case: 748 | Input/Output: [(11 -99 43 50) -99]
Test Case: 749 | Input/Output: [(17 -42 -85 -68) -85]
Test Case: 750 | Input/Output: [(-77 11 16 -35) -77]
Test Case: 751 | Input/Output: [(-24 18 -88 -3) -88]
Test Case: 752 | Input/Output: [(-4 -54 -88 -23) -88]
Test Case: 753 | Input/Output: [(-96 24 -99 50) -99]
Test Case: 754 | Input/Output: [(-99 -76 -51 2) -99]
Test Case: 755 | Input/Output: [(74 55 -37 48) -37]
Test Case: 756 | Input/Output: [(-30 -67 99 54) -67]
Test Case: 757 | Input/Output: [(-3 75 -39 -61) -61]
Test Case: 758 | Input/Output: [(-75 -87 -71 9) -87]
Test Case: 759 | Input/Output: [(89 -82 -18 -54) -82]
Test Case: 760 | Input/Output: [(20 43 93 7) 7]
Test Case: 761 | Input/Output: [(-18 10 -17 62) -18]
Test Case: 762 | Input/Output: [(-91 -33 -66 -73) -91]
Test Case: 763 | Input/Output: [(56 -93 96 -65) -93]
Test Case: 764 | Input/Output: [(-88 -40 13 -85) -88]
Test Case: 765 | Input/Output: [(-39 8 40 -72) -72]
Test Case: 766 | Input/Output: [(13 38 93 -66) -66]
Test Case: 767 | Input/Output: [(-55 -5 86 53) -55]
Test Case: 768 | Input/Output: [(91 -57 20 -13) -57]
Test Case: 769 | Input/Output: [(18 -78 95 28) -78]
Test Case: 770 | Input/Output: [(-21 95 -85 -30) -85]
Test Case: 771 | Input/Output: [(83 -83 -65 -2) -83]
Test Case: 772 | Input/Output: [(22 -81 37 22) -81]
Test Case: 773 | Input/Output: [(54 82 -58 -36) -58]
Test Case: 774 | Input/Output: [(-33 37 82 -51) -51]
Test Case: 775 | Input/Output: [(15 37 98 -88) -88]
Test Case: 776 | Input/Output: [(25 -57 50 -12) -57]
Test Case: 777 | Input/Output: [(51 83 57 11) 11]
Test Case: 778 | Input/Output: [(72 2 -12 -11) -12]
Test Case: 779 | Input/Output: [(86 -4 99 -9) -9]
Test Case: 780 | Input/Output: [(84 67 32 -63) -63]
Test Case: 781 | Input/Output: [(67 -51 -88 -13) -88]
Test Case: 782 | Input/Output: [(-56 -13 -70 6) -70]
Test Case: 783 | Input/Output: [(-83 29 -31 69) -83]
Test Case: 784 | Input/Output: [(-59 70 37 -76) -76]
Test Case: 785 | Input/Output: [(78 -3 -23 11) -23]
Test Case: 786 | Input/Output: [(54 71 -99 83) -99]
Test Case: 787 | Input/Output: [(72 45 4 60) 4]
Test Case: 788 | Input/Output: [(50 -46 95 49) -46]
Test Case: 789 | Input/Output: [(-32 9 96 -38) -38]
Test Case: 790 | Input/Output: [(-45 -57 10 93) -57]
Test Case: 791 | Input/Output: [(55 42 -95 61) -95]
Test Case: 792 | Input/Output: [(87 93 10 54) 10]
Test Case: 793 | Input/Output: [(83 -100 -58 -4) -100]
Test Case: 794 | Input/Output: [(-19 88 12 81) -19]
Test Case: 795 | Input/Output: [(-57 64 7 -53) -57]
Test Case: 796 | Input/Output: [(15 9 -75 92) -75]
Test Case: 797 | Input/Output: [(1 -71 -88 -88) -88]
Test Case: 798 | Input/Output: [(-8 69 7 -87) -87]
Test Case: 799 | Input/Output: [(-97 -2 -26 59) -97]
Test Case: 800 | Input/Output: [(69 -29 -97 -18) -97]
Test Case: 801 | Input/Output: [(36 47 -31 64) -31]
Test Case: 802 | Input/Output: [(64 17 51 71) 17]
Test Case: 803 | Input/Output: [(17 66 -83 -85) -85]
Test Case: 804 | Input/Output: [(-5 -53 -68 -21) -68]
Test Case: 805 | Input/Output: [(36 -65 -86 -4) -86]
Test Case: 806 | Input/Output: [(-65 -20 92 -42) -65]
Test Case: 807 | Input/Output: [(82 -35 -2 -31) -35]
Test Case: 808 | Input/Output: [(32 2 74 74) 2]
Test Case: 809 | Input/Output: [(-51 33 -9 -80) -80]
Test Case: 810 | Input/Output: [(-56 -13 -1 41) -56]
Test Case: 811 | Input/Output: [(-85 -55 70 68) -85]
Test Case: 812 | Input/Output: [(-31 -45 46 -59) -59]
Test Case: 813 | Input/Output: [(-69 -50 8 71) -69]
Test Case: 814 | Input/Output: [(53 -46 -31 39) -46]
Test Case: 815 | Input/Output: [(4 9 76 -22) -22]
Test Case: 816 | Input/Output: [(56 97 -94 90) -94]
Test Case: 817 | Input/Output: [(-44 -79 -77 79) -79]
Test Case: 818 | Input/Output: [(-32 -25 -87 -24) -87]
Test Case: 819 | Input/Output: [(-92 -25 37 27) -92]
Test Case: 820 | Input/Output: [(-21 73 -100 10) -100]
Test Case: 821 | Input/Output: [(92 -53 -65 99) -65]
Test Case: 822 | Input/Output: [(12 4 -71 59) -71]
Test Case: 823 | Input/Output: [(14 -99 -68 19) -99]
Test Case: 824 | Input/Output: [(69 44 27 88) 27]
Test Case: 825 | Input/Output: [(38 15 55 59) 15]
Test Case: 826 | Input/Output: [(-27 56 88 -21) -27]
Test Case: 827 | Input/Output: [(-36 64 -38 -30) -38]
Test Case: 828 | Input/Output: [(19 75 -49 -74) -74]
Test Case: 829 | Input/Output: [(18 81 67 -83) -83]
Test Case: 830 | Input/Output: [(-81 -96 7 28) -96]
Test Case: 831 | Input/Output: [(-40 70 -35 30) -40]
Test Case: 832 | Input/Output: [(-14 27 48 -74) -74]
Test Case: 833 | Input/Output: [(59 -73 -96 -78) -96]
Test Case: 834 | Input/Output: [(84 75 -83 -14) -83]
Test Case: 835 | Input/Output: [(-28 -79 -69 47) -79]
Test Case: 836 | Input/Output: [(30 -48 72 71) -48]
Test Case: 837 | Input/Output: [(37 52 -15 48) -15]
Test Case: 838 | Input/Output: [(58 6 70 17) 6]
Test Case: 839 | Input/Output: [(-15 -66 19 -51) -66]
Test Case: 840 | Input/Output: [(64 72 59 93) 59]
Test Case: 841 | Input/Output: [(81 18 49 -18) -18]
Test Case: 842 | Input/Output: [(-53 -84 -18 -37) -84]
Test Case: 843 | Input/Output: [(19 1 -93 -50) -93]
Test Case: 844 | Input/Output: [(23 10 29 86) 10]
Test Case: 845 | Input/Output: [(-60 6 77 -98) -98]
Test Case: 846 | Input/Output: [(-59 -48 -96 22) -96]
Test Case: 847 | Input/Output: [(-45 69 86 57) -45]
Test Case: 848 | Input/Output: [(69 100 -54 79) -54]
Test Case: 849 | Input/Output: [(-98 42 2 -43) -98]
Test Case: 850 | Input/Output: [(30 26 33 3) 3]
Test Case: 851 | Input/Output: [(65 82 -44 -92) -92]
Test Case: 852 | Input/Output: [(5 -18 94 50) -18]
Test Case: 853 | Input/Output: [(51 -52 -31 -64) -64]
Test Case: 854 | Input/Output: [(-7 9 -94 2) -94]
Test Case: 855 | Input/Output: [(-97 28 54 74) -97]
Test Case: 856 | Input/Output: [(-60 89 30 65) -60]
Test Case: 857 | Input/Output: [(-9 -73 28 -57) -73]
Test Case: 858 | Input/Output: [(-99 -26 -13 32) -99]
Test Case: 859 | Input/Output: [(59 -41 -36 -15) -41]
Test Case: 860 | Input/Output: [(82 32 40 -27) -27]
Test Case: 861 | Input/Output: [(-87 -81 -35 21) -87]
Test Case: 862 | Input/Output: [(95 65 -8 -54) -54]
Test Case: 863 | Input/Output: [(71 -27 -99 -44) -99]
Test Case: 864 | Input/Output: [(95 -83 64 99) -83]
Test Case: 865 | Input/Output: [(-79 -11 -90 100) -90]
Test Case: 866 | Input/Output: [(84 -4 95 -11) -11]
Test Case: 867 | Input/Output: [(-30 100 69 51) -30]
Test Case: 868 | Input/Output: [(-11 -37 -63 -43) -63]
Test Case: 869 | Input/Output: [(-57 -36 49 -67) -67]
Test Case: 870 | Input/Output: [(62 64 -60 7) -60]
Test Case: 871 | Input/Output: [(14 -93 -90 -40) -93]
Test Case: 872 | Input/Output: [(98 -75 -83 72) -83]
Test Case: 873 | Input/Output: [(93 -100 -38 -2) -100]
Test Case: 874 | Input/Output: [(-18 41 -12 -21) -21]
Test Case: 875 | Input/Output: [(-14 13 -98 -76) -98]
Test Case: 876 | Input/Output: [(25 37 -79 55) -79]
Test Case: 877 | Input/Output: [(13 48 56 93) 13]
Test Case: 878 | Input/Output: [(60 83 -17 48) -17]
Test Case: 879 | Input/Output: [(80 -19 -78 -66) -78]
Test Case: 880 | Input/Output: [(8 54 -24 -84) -84]
Test Case: 881 | Input/Output: [(-24 -35 86 -22) -35]
Test Case: 882 | Input/Output: [(-85 -18 -88 -48) -88]
Test Case: 883 | Input/Output: [(1 -99 78 -1) -99]
Test Case: 884 | Input/Output: [(-16 39 22 -86) -86]
Test Case: 885 | Input/Output: [(45 80 -75 -81) -81]
Test Case: 886 | Input/Output: [(18 95 -13 18) -13]
Test Case: 887 | Input/Output: [(4 60 -40 17) -40]
Test Case: 888 | Input/Output: [(-23 -43 -78 -42) -78]
Test Case: 889 | Input/Output: [(46 18 -72 98) -72]
Test Case: 890 | Input/Output: [(-35 -30 -29 88) -35]
Test Case: 891 | Input/Output: [(32 -19 -80 -88) -88]
Test Case: 892 | Input/Output: [(-83 -2 -9 24) -83]
Test Case: 893 | Input/Output: [(-85 -31 33 21) -85]
Test Case: 894 | Input/Output: [(27 56 6 34) 6]
Test Case: 895 | Input/Output: [(10 87 -80 -88) -88]
Test Case: 896 | Input/Output: [(-85 18 -23 -53) -85]
Test Case: 897 | Input/Output: [(86 48 -83 -67) -83]
Test Case: 898 | Input/Output: [(60 72 27 47) 27]
Test Case: 899 | Input/Output: [(-7 8 -68 11) -68]
Test Case: 900 | Input/Output: [(-79 14 -51 65) -79]
Test Case: 901 | Input/Output: [(-54 -66 47 89) -66]
Test Case: 902 | Input/Output: [(62 27 17 -26) -26]
Test Case: 903 | Input/Output: [(-41 35 -85 98) -85]
Test Case: 904 | Input/Output: [(-85 24 54 79) -85]
Test Case: 905 | Input/Output: [(-15 -57 -99 -59) -99]
Test Case: 906 | Input/Output: [(-44 74 84 42) -44]
Test Case: 907 | Input/Output: [(-48 50 85 89) -48]
Test Case: 908 | Input/Output: [(46 -17 38 -88) -88]
Test Case: 909 | Input/Output: [(58 -10 -84 -9) -84]
Test Case: 910 | Input/Output: [(86 -52 54 -7) -52]
Test Case: 911 | Input/Output: [(12 -93 -100 -14) -100]
Test Case: 912 | Input/Output: [(-65 6 -44 -25) -65]
Test Case: 913 | Input/Output: [(16 -31 -6 -66) -66]
Test Case: 914 | Input/Output: [(39 56 -63 88) -63]
Test Case: 915 | Input/Output: [(59 -92 -87 -68) -92]
Test Case: 916 | Input/Output: [(96 -59 6 -44) -59]
Test Case: 917 | Input/Output: [(-38 -77 -46 -8) -77]
Test Case: 918 | Input/Output: [(-50 -89 72 -7) -89]
Test Case: 919 | Input/Output: [(31 -98 79 -45) -98]
Test Case: 920 | Input/Output: [(-34 -60 -79 -86) -86]
Test Case: 921 | Input/Output: [(7 -50 -61 -87) -87]
Test Case: 922 | Input/Output: [(100 -54 85 35) -54]
Test Case: 923 | Input/Output: [(-85 -50 -68 -34) -85]
Test Case: 924 | Input/Output: [(96 48 -41 -29) -41]
Test Case: 925 | Input/Output: [(-6 33 -87 -35) -87]
Test Case: 926 | Input/Output: [(75 52 -68 -78) -78]
Test Case: 927 | Input/Output: [(89 4 12 44) 4]
Test Case: 928 | Input/Output: [(25 -32 13 -13) -32]
Test Case: 929 | Input/Output: [(30 18 -10 -1) -10]
Test Case: 930 | Input/Output: [(76 -64 -26 -66) -66]
Test Case: 931 | Input/Output: [(7 96 -41 89) -41]
Test Case: 932 | Input/Output: [(-54 58 64 5) -54]
Test Case: 933 | Input/Output: [(11 -27 22 7) -27]
Test Case: 934 | Input/Output: [(85 -77 -90 -8) -90]
Test Case: 935 | Input/Output: [(7 19 24 75) 7]
Test Case: 936 | Input/Output: [(16 -86 55 48) -86]
Test Case: 937 | Input/Output: [(-33 33 -30 -7) -33]
Test Case: 938 | Input/Output: [(-4 -56 -93 -61) -93]
Test Case: 939 | Input/Output: [(-15 0 -12 25) -15]
Test Case: 940 | Input/Output: [(-37 3 -97 15) -97]
Test Case: 941 | Input/Output: [(-30 -60 53 -8) -60]
Test Case: 942 | Input/Output: [(-13 38 -14 44) -14]
Test Case: 943 | Input/Output: [(7 38 -9 -4) -9]
Test Case: 944 | Input/Output: [(-63 67 -75 -29) -75]
Test Case: 945 | Input/Output: [(29 -92 -40 99) -92]
Test Case: 946 | Input/Output: [(-90 3 66 -23) -90]
Test Case: 947 | Input/Output: [(65 28 98 -92) -92]
Test Case: 948 | Input/Output: [(18 3 -98 48) -98]
Test Case: 949 | Input/Output: [(-45 27 -39 72) -45]
Test Case: 950 | Input/Output: [(0 -33 -5 56) -33]
Test Case: 951 | Input/Output: [(6 -82 -69 59) -82]
Test Case: 952 | Input/Output: [(93 -85 62 -45) -85]
Test Case: 953 | Input/Output: [(91 -7 28 91) -7]
Test Case: 954 | Input/Output: [(21 28 79 97) 21]
Test Case: 955 | Input/Output: [(74 57 -24 21) -24]
Test Case: 956 | Input/Output: [(-29 -29 75 41) -29]
Test Case: 957 | Input/Output: [(90 -17 -49 63) -49]
Test Case: 958 | Input/Output: [(87 -54 86 34) -54]
Test Case: 959 | Input/Output: [(-85 90 60 -32) -85]
Test Case: 960 | Input/Output: [(3 17 79 -69) -69]
Test Case: 961 | Input/Output: [(9 -41 -83 40) -83]
Test Case: 962 | Input/Output: [(37 -36 -59 -68) -68]
Test Case: 963 | Input/Output: [(-41 -64 -6 9) -64]
Test Case: 964 | Input/Output: [(23 -96 45 -33) -96]
Test Case: 965 | Input/Output: [(-29 -38 -61 -51) -61]
Test Case: 966 | Input/Output: [(-96 -89 -74 30) -96]
Test Case: 967 | Input/Output: [(44 84 -28 -63) -63]
Test Case: 968 | Input/Output: [(-63 14 -83 -70) -83]
Test Case: 969 | Input/Output: [(9 15 -13 -50) -50]
Test Case: 970 | Input/Output: [(-36 -13 -38 48) -38]
Test Case: 971 | Input/Output: [(21 -52 -86 60) -86]
Test Case: 972 | Input/Output: [(52 -32 -33 -79) -79]
Test Case: 973 | Input/Output: [(-40 -86 88 -84) -86]
Test Case: 974 | Input/Output: [(-93 41 41 42) -93]
Test Case: 975 | Input/Output: [(-23 -26 20 53) -26]
Test Case: 976 | Input/Output: [(20 85 -21 66) -21]
Test Case: 977 | Input/Output: [(-44 -28 0 -88) -88]
Test Case: 978 | Input/Output: [(97 36 48 5) 5]
Test Case: 979 | Input/Output: [(-58 38 -25 27) -58]
Test Case: 980 | Input/Output: [(92 -74 -66 -76) -76]
Test Case: 981 | Input/Output: [(14 0 84 -39) -39]
Test Case: 982 | Input/Output: [(68 61 -80 -49) -80]
Test Case: 983 | Input/Output: [(-48 -99 -32 73) -99]
Test Case: 984 | Input/Output: [(28 11 56 -92) -92]
Test Case: 985 | Input/Output: [(-97 3 -29 27) -97]
Test Case: 986 | Input/Output: [(61 -74 49 81) -74]
Test Case: 987 | Input/Output: [(-37 19 -30 -37) -37]
Test Case: 988 | Input/Output: [(-63 50 12 3) -63]
Test Case: 989 | Input/Output: [(-56 -56 -13 93) -56]
Test Case: 990 | Input/Output: [(-82 -79 9 -53) -82]
Test Case: 991 | Input/Output: [(-51 -60 24 98) -60]
Test Case: 992 | Input/Output: [(-27 18 66 71) -27]
Test Case: 993 | Input/Output: [(-17 -2 -86 23) -86]
Test Case: 994 | Input/Output: [(-12 -60 18 64) -60]
Test Case: 995 | Input/Output: [(-63 -11 89 92) -63]
Test Case: 996 | Input/Output: [(-8 5 -32 -25) -32]
Test Case: 997 | Input/Output: [(59 -38 55 23) -38]
Test Case: 998 | Input/Output: [(3 99 -17 -50) -50]
Test Case: 999 | Input/Output: [(24 26 -39 -84) -84]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 33 -78 -95 99 25 44 -113 62 12 81 -103 17 47 39 -10 -29
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-52 2 2 2] -52] [[33 80 33 33] 33] [[-7 -7 -7 61] -7] [[-51 -15 -51 -51] -51] [[38 38 38 38] 38] [[-93 -73 -73 -73] -93] [[3 3 -63 3] -63] [[-5 25 -5 -5] -5] [[0 0 0 38] 0] [[14 84 84 84] 14] [(-31 -31 -31 -31) -31] [(63 63 63 63) 63] [(-55 -55 -55 -55) -55] [(94 94 94 94) 94] [(-83 -83 -83 -83) -83] [(8 43 95 68) 8] [(9 29 50 60) 9] [(14 23 48 86) 14] [(6 53 37 85) 6] [(78 85 85 94) 78] [(18 32 51 16) 16] [(91 99 10 7) 7] [(85 53 50 2) 2] [(93 57 49 100) 49] [(39 64 78 0) 0] [(76 76 37 63) 37] [(88 64 41 46) 41] [(99 57 100 49) 49] [(97 65 91 85) 65] [(88 35 17 87) 17] [(14 16 11 80) 11] [(36 93 57 14) 14] [(56 96 88 16) 16] [(100 33 12 86) 12] [(63 51 2 81) 2] [(84 93 -27 -40) -40] [(-18 -13 -89 -86) -89] [(-89 -46 -92 -52) -92] [(30 -63 79 41) -63] [(-15 97 57 63) -15] [(-31 -53 33 2) -53] [(-58 90 -7 76) -58] [(36 87 -27 91) -27] [(1 76 -41 93) -41] [(-32 57 75 29) -32] [(20 -48 54 -41) -48] [(-25 59 15 59) -25] [(-51 -4 19 -42) -51] [(-71 -71 61 -55) -71] [(-25 10 78 94) -25] [(-35 -94 66 46) -94] [(-73 49 -67 23) -73] [(0 -48 2 -9) -48] [(6 48 -6 -49) -49] [(-38 -53 -8 -67) -67] [(-94 -44 -23 -46) -94] [(-4 77 -92 36) -92] [(87 -81 45 100) -81] [(-85 -52 9 45) -85] [(97 0 9 -69) -69] [(89 18 -90 -10) -90] [(62 -94 -91 30) -94] [(69 25 41 -74) -74] [(-61 71 -21 -52) -61] [(42 -13 -13 -90) -90] [(14 24 33 -70) -70] [(-89 -60 -64 40) -89] [(23 -80 -4 18) -80] [(0 22 86 64) 0] [(83 -15 84 2) -15] [(-76 77 -57 77) -76] [(-93 -41 -81 -23) -93] [(-52 37 21 52) -52] [(56 -98 10 55) -98] [(-100 91 -74 69) -100] [(-62 -94 -21 -72) -94] [(11 -31 -93 42) -93] [(35 6 -42 86) -42] [(-83 -42 51 18) -83] [(-9 95 -84 -7) -84] [(74 15 87 -29) -29] [(15 -33 79 -42) -42] [(64 -3 81 1) -3] [(-28 30 -6 -67) -67] [(4 -86 87 -4) -86] [(56 -91 -75 71) -91] [(-39 85 -93 -100) -100] [(82 -85 75 100) -85] [(-3 -41 85 30) -41] [(-26 4 -13 -12) -26] [(21 -12 67 41) -12] [(-61 -11 36 -74) -74] [(-89 86 54 69) -89] [(39 50 -12 63) -12] [(51 -41 -4 45) -41])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: 33                  | Program output: 33                 
Correct output: -7                  | Program output: -7                 
Correct output: -51                 | Program output: -51                
Correct output: 38                  | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: 3                  
Correct output: -5                  | Program output: -5                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 14                 
Correct output: -31                 | Program output: -31                
Correct output: 63                  | Program output: 63                 
Correct output: -55                 | Program output: -55                
Correct output: 94                  | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 6                  
Correct output: 78                  | Program output: 78                 
Correct output: 16                  | Program output: 18                 
Correct output: 7                   | Program output: 91                 
Correct output: 2                   | Program output: 85                 
Correct output: 49                  | Program output: 93                 
Correct output: 0                   | Program output: 39                 
Correct output: 37                  | Program output: 76                 
Correct output: 41                  | Program output: 88                 
Correct output: 49                  | Program output: 99                 
Correct output: 65                  | Program output: 97                 
Correct output: 17                  | Program output: 88                 
Correct output: 11                  | Program output: 14                 
Correct output: 14                  | Program output: 36                 
Correct output: 16                  | Program output: 56                 
Correct output: 12                  | Program output: 100                
Correct output: 2                   | Program output: 63                 
Correct output: -40                 | Program output: 84                 
Correct output: -89                 | Program output: -18                
Correct output: -92                 | Program output: -89                
Correct output: -63                 | Program output: 30                 
Correct output: -15                 | Program output: -15                
Correct output: -53                 | Program output: -31                
Correct output: -58                 | Program output: -58                
Correct output: -27                 | Program output: 36                 
Correct output: -41                 | Program output: 1                  
Correct output: -32                 | Program output: -32                
Correct output: -48                 | Program output: 20                 
Correct output: -25                 | Program output: -25                
Correct output: -51                 | Program output: -51                
Correct output: -71                 | Program output: -71                
Correct output: -25                 | Program output: -25                
Correct output: -94                 | Program output: -35                
Correct output: -73                 | Program output: -73                
Correct output: -48                 | Program output: 0                  
Correct output: -49                 | Program output: 6                  
Correct output: -67                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -4                 
Correct output: -81                 | Program output: 87                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: 97                 
Correct output: -90                 | Program output: 89                 
Correct output: -94                 | Program output: 62                 
Correct output: -74                 | Program output: 69                 
Correct output: -61                 | Program output: -61                
Correct output: -90                 | Program output: 42                 
Correct output: -70                 | Program output: 14                 
Correct output: -89                 | Program output: -89                
Correct output: -80                 | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: -15                 | Program output: 83                 
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -93                
Correct output: -52                 | Program output: -52                
Correct output: -98                 | Program output: 56                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -62                
Correct output: -93                 | Program output: 11                 
Correct output: -42                 | Program output: 35                 
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -9                 
Correct output: -29                 | Program output: 74                 
Correct output: -42                 | Program output: 15                 
Correct output: -3                  | Program output: 64                 
Correct output: -67                 | Program output: -28                
Correct output: -86                 | Program output: 4                  
Correct output: -91                 | Program output: 56                 
Correct output: -100                | Program output: -39                
Correct output: -85                 | Program output: 82                 
Correct output: -41                 | Program output: -3                 
Correct output: -26                 | Program output: -26                
Correct output: -12                 | Program output: 21                 
Correct output: -74                 | Program output: -61                
Correct output: -89                 | Program output: -89                
Correct output: -12                 | Program output: 39                 
Correct output: -41                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3})
Lexicase best program: (exec_dup_times (integer_shove exec_y (exec_s (integer_min exec_do*times (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 boolean_yank integer_empty boolean_flush exec_if () (boolean_dup tag_exec_551 (integer_stackdepth integer_flush print_boolean exec_empty print_newline in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) boolean_eq integer_max) print_integer -72 boolean_frominteger) tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) (integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty integer_min boolean_yank integer_dup_items) (in3))))) () ())))
Lexicase best errors: [0 0 1 0 1 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 74
Percent parens: 0.297
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3})
Zero cases best program: (exec_dup_times (integer_shove exec_y (exec_s (integer_min exec_do*times (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 boolean_yank integer_empty boolean_flush exec_if () (boolean_dup tag_exec_551 (integer_stackdepth integer_flush print_boolean exec_empty print_newline in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) boolean_eq integer_max) print_integer -72 boolean_frominteger) tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) (integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty integer_min boolean_yank integer_dup_items) (in3))))) () ())))
Zero cases best errors: [0 0 1 0 1 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 74
Percent parens: 0.297
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 3 1 1 1 1 1 2 2)
Population mean number of elite cases: 0.01
Count of perfect (error zero) individuals by case: (1 1 3 1 1 1 1 1 2 2)
Population mean number of perfect (error zero) cases: 0.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3})
Best program: (exec_dup_times (integer_shove exec_y (exec_s (integer_min exec_do*times (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 boolean_yank integer_empty boolean_flush exec_if () (boolean_dup tag_exec_551 (integer_stackdepth integer_flush print_boolean exec_empty print_newline in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) boolean_eq integer_max) print_integer -72 boolean_frominteger) tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) (integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty integer_min boolean_yank integer_dup_items) (in3))))) () ())))
Errors: [0 0 1 0 1 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 52
Size: 74
Percent parens: 0.297
--- Population Statistics ---
Average total errors in population: 9.986
Median total errors in population: 10
Error averages by case: (0.999 0.999 0.997 0.999 0.999 0.999 0.999 0.999 0.998 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.309
Average program size in population (points): 73.336
Average percent parens in population: 0.275
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.292
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 466548
--- Timings ---
Current time: 1559314532796 milliseconds
Total Time:           2.5 seconds
Initialization:       0.1 seconds,  4.0%
Reproduction:         0.8 seconds, 34.2%
Fitness Testing:      1.5 seconds, 61.9%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: 33                  | Program output: 33                 
Correct output: -7                  | Program output: -7                 
Correct output: -51                 | Program output: -51                
Correct output: 38                  | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: 3                  
Correct output: -5                  | Program output: -5                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 14                 
Correct output: -31                 | Program output: -31                
Correct output: 63                  | Program output: 63                 
Correct output: -55                 | Program output: -55                
Correct output: 94                  | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 6                  
Correct output: 78                  | Program output: 78                 
Correct output: 16                  | Program output: 18                 
Correct output: 7                   | Program output: 91                 
Correct output: 2                   | Program output: 85                 
Correct output: 49                  | Program output: 93                 
Correct output: 0                   | Program output: 39                 
Correct output: 37                  | Program output: 76                 
Correct output: 41                  | Program output: 88                 
Correct output: 49                  | Program output: 99                 
Correct output: 65                  | Program output: 97                 
Correct output: 17                  | Program output: 88                 
Correct output: 11                  | Program output: 14                 
Correct output: 14                  | Program output: 36                 
Correct output: 16                  | Program output: 56                 
Correct output: 12                  | Program output: 100                
Correct output: 2                   | Program output: 63                 
Correct output: -40                 | Program output: 84                 
Correct output: -89                 | Program output: -18                
Correct output: -92                 | Program output: -89                
Correct output: -63                 | Program output: 30                 
Correct output: -15                 | Program output: -15                
Correct output: -53                 | Program output: -31                
Correct output: -58                 | Program output: -58                
Correct output: -27                 | Program output: 36                 
Correct output: -41                 | Program output: 1                  
Correct output: -32                 | Program output: -32                
Correct output: -48                 | Program output: 20                 
Correct output: -25                 | Program output: -25                
Correct output: -51                 | Program output: -51                
Correct output: -71                 | Program output: -71                
Correct output: -25                 | Program output: -25                
Correct output: -94                 | Program output: -35                
Correct output: -73                 | Program output: -73                
Correct output: -48                 | Program output: 0                  
Correct output: -49                 | Program output: 6                  
Correct output: -67                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -4                 
Correct output: -81                 | Program output: 87                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: 97                 
Correct output: -90                 | Program output: 89                 
Correct output: -94                 | Program output: 62                 
Correct output: -74                 | Program output: 69                 
Correct output: -61                 | Program output: -61                
Correct output: -90                 | Program output: 42                 
Correct output: -70                 | Program output: 14                 
Correct output: -89                 | Program output: -89                
Correct output: -80                 | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: -15                 | Program output: 83                 
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -93                
Correct output: -52                 | Program output: -52                
Correct output: -98                 | Program output: 56                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -62                
Correct output: -93                 | Program output: 11                 
Correct output: -42                 | Program output: 35                 
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -9                 
Correct output: -29                 | Program output: 74                 
Correct output: -42                 | Program output: 15                 
Correct output: -3                  | Program output: 64                 
Correct output: -67                 | Program output: -28                
Correct output: -86                 | Program output: 4                  
Correct output: -91                 | Program output: 56                 
Correct output: -100                | Program output: -39                
Correct output: -85                 | Program output: 82                 
Correct output: -41                 | Program output: -3                 
Correct output: -26                 | Program output: -26                
Correct output: -12                 | Program output: 21                 
Correct output: -74                 | Program output: -61                
Correct output: -89                 | Program output: -89                
Correct output: -12                 | Program output: 39                 
Correct output: -41                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -71} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3})
Lexicase best program: (exec_dup_times (integer_shove exec_y (exec_s (integer_min exec_do*times (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 boolean_yank integer_empty boolean_flush exec_if () (boolean_dup tag_exec_551 (integer_stackdepth integer_flush print_boolean exec_empty print_newline in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) boolean_eq integer_max) print_integer -71 boolean_frominteger) in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) boolean_eq integer_max) (print_integer -72 boolean_frominteger) tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty integer_min boolean_yank integer_dup_items) (in3))) () ())))
Lexicase best errors: [1 0 1 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 87
Percent parens: 0.276
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -71} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3})
Zero cases best program: (exec_dup_times (integer_shove exec_y (exec_s (integer_min exec_do*times (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 boolean_yank integer_empty boolean_flush exec_if () (boolean_dup tag_exec_551 (integer_stackdepth integer_flush print_boolean exec_empty print_newline in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) boolean_eq integer_max) print_integer -71 boolean_frominteger) in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) boolean_eq integer_max) (print_integer -72 boolean_frominteger) tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty integer_min boolean_yank integer_dup_items) (in3))) () ())))
Zero cases best errors: [1 0 1 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 87
Percent parens: 0.276
--- Lexicase Population Statistics ---
Count of elite individuals by case: (187 753 181 419 2 573 152 419 1 419)
Population mean number of elite cases: 3.11
Count of perfect (error zero) individuals by case: (187 753 181 419 2 573 152 419 1 419)
Population mean number of perfect (error zero) cases: 3.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3})
Best program: (exec_dup_times (integer_shove exec_y (exec_s (integer_min exec_do*times (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 boolean_yank integer_empty boolean_flush exec_if () (boolean_dup tag_exec_551 (integer_stackdepth integer_flush print_boolean exec_empty print_newline in3 integer_pop exec_y (boolean_pop exec_y_when_autoconstructing () exec_yankdup) boolean_eq integer_max) print_integer -72 boolean_frominteger) tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) (integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty integer_min boolean_yank integer_dup_items) (in3))))) () ())))
Errors: [1 0 1 0 1 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 52
Size: 74
Percent parens: 0.297
--- Population Statistics ---
Average total errors in population: 6.894
Median total errors in population: 7
Error averages by case: (0.813 0.247 0.819 0.581 0.998 0.427 0.848 0.581 0.999 0.581)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.456
Average program size in population (points): 75.156
Average percent parens in population: 0.281
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.492
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 256
Genome diversity (% unique genomes):	 0.567
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 256
Syntactic diversity (% unique Push programs):	 0.556
Total error diversity:				 0.006
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.09
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1528507
--- Timings ---
Current time: 1559314536874 milliseconds
Total Time:           6.7 seconds
Initialization:       0.1 seconds,  1.5%
Reproduction:         2.5 seconds, 36.9%
Fitness Testing:      3.1 seconds, 45.4%
Report:               1.1 seconds, 16.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: 33                  | Program output: 33                 
Correct output: -7                  | Program output: -7                 
Correct output: -51                 | Program output: -51                
Correct output: 38                  | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: 3                  
Correct output: -5                  | Program output: -5                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 14                 
Correct output: -31                 | Program output: -31                
Correct output: 63                  | Program output: 63                 
Correct output: -55                 | Program output: -55                
Correct output: 94                  | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 6                  
Correct output: 78                  | Program output: 78                 
Correct output: 16                  | Program output: 18                 
Correct output: 7                   | Program output: 91                 
Correct output: 2                   | Program output: 85                 
Correct output: 49                  | Program output: 93                 
Correct output: 0                   | Program output: 39                 
Correct output: 37                  | Program output: 76                 
Correct output: 41                  | Program output: 88                 
Correct output: 49                  | Program output: 99                 
Correct output: 65                  | Program output: 97                 
Correct output: 17                  | Program output: 88                 
Correct output: 11                  | Program output: 14                 
Correct output: 14                  | Program output: 36                 
Correct output: 16                  | Program output: 56                 
Correct output: 12                  | Program output: 100                
Correct output: 2                   | Program output: 63                 
Correct output: -40                 | Program output: 84                 
Correct output: -89                 | Program output: -18                
Correct output: -92                 | Program output: -89                
Correct output: -63                 | Program output: 30                 
Correct output: -15                 | Program output: -15                
Correct output: -53                 | Program output: -31                
Correct output: -58                 | Program output: -58                
Correct output: -27                 | Program output: 36                 
Correct output: -41                 | Program output: 1                  
Correct output: -32                 | Program output: -32                
Correct output: -48                 | Program output: 20                 
Correct output: -25                 | Program output: -25                
Correct output: -51                 | Program output: -51                
Correct output: -71                 | Program output: -71                
Correct output: -25                 | Program output: -25                
Correct output: -94                 | Program output: -35                
Correct output: -73                 | Program output: -73                
Correct output: -48                 | Program output: 0                  
Correct output: -49                 | Program output: 6                  
Correct output: -67                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -4                 
Correct output: -81                 | Program output: 87                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: 97                 
Correct output: -90                 | Program output: 89                 
Correct output: -94                 | Program output: 62                 
Correct output: -74                 | Program output: 69                 
Correct output: -61                 | Program output: -61                
Correct output: -90                 | Program output: 42                 
Correct output: -70                 | Program output: 14                 
Correct output: -89                 | Program output: -89                
Correct output: -80                 | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: -15                 | Program output: 83                 
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -93                
Correct output: -52                 | Program output: -52                
Correct output: -98                 | Program output: 56                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -62                
Correct output: -93                 | Program output: 11                 
Correct output: -42                 | Program output: 35                 
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -9                 
Correct output: -29                 | Program output: 74                 
Correct output: -42                 | Program output: 15                 
Correct output: -3                  | Program output: 64                 
Correct output: -67                 | Program output: -28                
Correct output: -86                 | Program output: 4                  
Correct output: -91                 | Program output: 56                 
Correct output: -100                | Program output: -39                
Correct output: -85                 | Program output: 82                 
Correct output: -41                 | Program output: -3                 
Correct output: -26                 | Program output: -26                
Correct output: -12                 | Program output: 21                 
Correct output: -74                 | Program output: -61                
Correct output: -89                 | Program output: -89                
Correct output: -12                 | Program output: 39                 
Correct output: -41                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3})
Lexicase best program: (exec_dup_times (integer_shove exec_y (exec_s (integer_min exec_do*times (print_integer exec_y_when_autoconstructing (exec_y (exec_s (integer_min exec_do*times (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 boolean_yank integer_empty boolean_flush exec_if () (boolean_dup tag_exec_551 (integer_stackdepth integer_flush print_boolean exec_empty print_newline in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) integer_empty integer_max) print_integer -72 boolean_frominteger) tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) (integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty integer_min boolean_yank integer_dup_items) (in3))))) () ())))) () ())))
Lexicase best errors: [0 0 1 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 86
Percent parens: 0.326
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3})
Zero cases best program: (exec_dup_times (integer_shove exec_y (exec_s (integer_min exec_do*times (print_integer exec_y_when_autoconstructing (exec_y (exec_s (integer_min exec_do*times (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 boolean_yank integer_empty boolean_flush exec_if () (boolean_dup tag_exec_551 (integer_stackdepth integer_flush print_boolean exec_empty print_newline in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) integer_empty integer_max) print_integer -72 boolean_frominteger) tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) (integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty integer_min boolean_yank integer_dup_items) (in3))))) () ())))) () ())))
Zero cases best errors: [0 0 1 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 86
Percent parens: 0.326
--- Lexicase Population Statistics ---
Count of elite individuals by case: (281 280 116 281 177 282 280 192 149 113)
Population mean number of elite cases: 2.15
Count of perfect (error zero) individuals by case: (281 280 116 281 177 282 280 192 149 113)
Population mean number of perfect (error zero) cases: 2.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3})
Best program: (exec_dup_times (integer_shove exec_y (exec_s (integer_min exec_do*times (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 boolean_yank integer_empty boolean_flush exec_if () (boolean_dup tag_exec_551 (integer_stackdepth integer_flush print_boolean exec_empty print_newline in3 integer_pop exec_y (boolean_swap boolean_empty) exec_yankdup) boolean_eq integer_max) print_integer -72 boolean_frominteger) (tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty integer_min boolean_yank integer_dup_items) (in3)))) () ())))
Errors: [0 0 1 0 1 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 52
Size: 73
Percent parens: 0.288
--- Population Statistics ---
Average total errors in population: 7.849
Median total errors in population: 8
Error averages by case: (0.719 0.72 0.884 0.719 0.823 0.718 0.72 0.808 0.851 0.887)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.15
Average program size in population (points): 75.205
Average percent parens in population: 0.285
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.0965
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 112
Genome diversity (% unique genomes):	 0.672
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 112
Syntactic diversity (% unique Push programs):	 0.666
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.115
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 2605980
--- Timings ---
Current time: 1559314541045 milliseconds
Total Time:          10.9 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         4.5 seconds, 41.4%
Fitness Testing:      4.3 seconds, 39.2%
Report:               2.0 seconds, 18.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: 33                  | Program output: 33                 
Correct output: -7                  | Program output: -7                 
Correct output: -51                 | Program output: -51                
Correct output: 38                  | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: 3                  
Correct output: -5                  | Program output: -5                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 14                 
Correct output: -31                 | Program output: -31                
Correct output: 63                  | Program output: 63                 
Correct output: -55                 | Program output: -55                
Correct output: 94                  | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 6                  
Correct output: 78                  | Program output: 78                 
Correct output: 16                  | Program output: 18                 
Correct output: 7                   | Program output: 91                 
Correct output: 2                   | Program output: 85                 
Correct output: 49                  | Program output: 93                 
Correct output: 0                   | Program output: 39                 
Correct output: 37                  | Program output: 76                 
Correct output: 41                  | Program output: 88                 
Correct output: 49                  | Program output: 99                 
Correct output: 65                  | Program output: 97                 
Correct output: 17                  | Program output: 88                 
Correct output: 11                  | Program output: 14                 
Correct output: 14                  | Program output: 36                 
Correct output: 16                  | Program output: 56                 
Correct output: 12                  | Program output: 100                
Correct output: 2                   | Program output: 63                 
Correct output: -40                 | Program output: 84                 
Correct output: -89                 | Program output: -18                
Correct output: -92                 | Program output: -89                
Correct output: -63                 | Program output: 30                 
Correct output: -15                 | Program output: -15                
Correct output: -53                 | Program output: -31                
Correct output: -58                 | Program output: -58                
Correct output: -27                 | Program output: 36                 
Correct output: -41                 | Program output: 1                  
Correct output: -32                 | Program output: -32                
Correct output: -48                 | Program output: 20                 
Correct output: -25                 | Program output: -25                
Correct output: -51                 | Program output: -51                
Correct output: -71                 | Program output: -71                
Correct output: -25                 | Program output: -25                
Correct output: -94                 | Program output: -35                
Correct output: -73                 | Program output: -73                
Correct output: -48                 | Program output: 0                  
Correct output: -49                 | Program output: 6                  
Correct output: -67                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -4                 
Correct output: -81                 | Program output: 87                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: 97                 
Correct output: -90                 | Program output: 89                 
Correct output: -94                 | Program output: 62                 
Correct output: -74                 | Program output: 69                 
Correct output: -61                 | Program output: -61                
Correct output: -90                 | Program output: 42                 
Correct output: -70                 | Program output: 14                 
Correct output: -89                 | Program output: -89                
Correct output: -80                 | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: -15                 | Program output: 83                 
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -93                
Correct output: -52                 | Program output: -52                
Correct output: -98                 | Program output: 56                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -62                
Correct output: -93                 | Program output: 11                 
Correct output: -42                 | Program output: 35                 
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -9                 
Correct output: -29                 | Program output: 74                 
Correct output: -42                 | Program output: 15                 
Correct output: -3                  | Program output: 64                 
Correct output: -67                 | Program output: -28                
Correct output: -86                 | Program output: 4                  
Correct output: -91                 | Program output: 56                 
Correct output: -100                | Program output: -39                
Correct output: -85                 | Program output: 82                 
Correct output: -41                 | Program output: -3                 
Correct output: -26                 | Program output: -26                
Correct output: -12                 | Program output: 21                 
Correct output: -74                 | Program output: -61                
Correct output: -89                 | Program output: -89                
Correct output: -12                 | Program output: 39                 
Correct output: -41                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3})
Lexicase best program: (exec_dup_times (integer_shove exec_y (exec_s (integer_min exec_do*times (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 integer_empty boolean_flush exec_if () (boolean_dup tag_exec_551 (integer_stackdepth integer_flush print_boolean exec_empty print_newline in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) boolean_eq integer_max) print_integer -72 boolean_frominteger) tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) (integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty integer_min boolean_yank integer_dup_items) (in3))))) () ())))
Lexicase best errors: [1 0 1 1 0 0 1 1 0 1]
Lexicase best number of elite cases: 4
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 73
Percent parens: 0.301
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3})
Zero cases best program: (exec_dup_times (integer_shove exec_y (exec_s (integer_min exec_do*times (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 integer_empty boolean_flush exec_if () (boolean_dup tag_exec_551 (integer_stackdepth integer_flush print_boolean exec_empty print_newline in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) boolean_eq integer_max) print_integer -72 boolean_frominteger) tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) (integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty integer_min boolean_yank integer_dup_items) (in3))))) () ())))
Zero cases best errors: [1 0 1 1 0 0 1 1 0 1]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 73
Percent parens: 0.301
--- Lexicase Population Statistics ---
Count of elite individuals by case: (163 342 164 71 547 342 164 204 344 165)
Population mean number of elite cases: 2.51
Count of perfect (error zero) individuals by case: (163 342 164 71 547 342 164 204 344 165)
Population mean number of perfect (error zero) cases: 2.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_noop} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3})
Best program: (exec_dup_times (integer_shove exec_y (exec_s (integer_min exec_do*times (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 boolean_yank integer_empty boolean_flush exec_if () (boolean_dup tag_exec_551 (integer_stackdepth integer_flush print_boolean exec_empty exec_noop in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) boolean_eq integer_max) print_integer -72 boolean_frominteger) tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) (integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty integer_min boolean_yank integer_dup_items) (in3))))) () ())))
Errors: [1 0 1 1 0 0 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 52
Size: 74
Percent parens: 0.297
--- Population Statistics ---
Average total errors in population: 7.494
Median total errors in population: 6
Error averages by case: (0.837 0.658 0.836 0.929 0.453 0.658 0.836 0.796 0.656 0.835)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.168
Average program size in population (points): 67.204
Average percent parens in population: 0.287
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.50425
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 91
Genome diversity (% unique genomes):	 0.683
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 100
Syntactic diversity (% unique Push programs):	 0.674
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 3567609
--- Timings ---
Current time: 1559314545505 milliseconds
Total Time:          15.4 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         7.1 seconds, 45.6%
Fitness Testing:      5.4 seconds, 34.8%
Report:               2.9 seconds, 18.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: 33                  | Program output: 33                 
Correct output: -7                  | Program output: -7                 
Correct output: -51                 | Program output: -51                
Correct output: 38                  | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: 3                  
Correct output: -5                  | Program output: -5                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 14                 
Correct output: -31                 | Program output: -31                
Correct output: 63                  | Program output: 63                 
Correct output: -55                 | Program output: -55                
Correct output: 94                  | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 6                  
Correct output: 78                  | Program output: 78                 
Correct output: 16                  | Program output: 18                 
Correct output: 7                   | Program output: 91                 
Correct output: 2                   | Program output: 85                 
Correct output: 49                  | Program output: 93                 
Correct output: 0                   | Program output: 39                 
Correct output: 37                  | Program output: 76                 
Correct output: 41                  | Program output: 88                 
Correct output: 49                  | Program output: 99                 
Correct output: 65                  | Program output: 97                 
Correct output: 17                  | Program output: 88                 
Correct output: 11                  | Program output: 14                 
Correct output: 14                  | Program output: 36                 
Correct output: 16                  | Program output: 56                 
Correct output: 12                  | Program output: 100                
Correct output: 2                   | Program output: 63                 
Correct output: -40                 | Program output: 84                 
Correct output: -89                 | Program output: -18                
Correct output: -92                 | Program output: -89                
Correct output: -63                 | Program output: 30                 
Correct output: -15                 | Program output: -15                
Correct output: -53                 | Program output: -31                
Correct output: -58                 | Program output: -58                
Correct output: -27                 | Program output: 36                 
Correct output: -41                 | Program output: 1                  
Correct output: -32                 | Program output: -32                
Correct output: -48                 | Program output: 20                 
Correct output: -25                 | Program output: -25                
Correct output: -51                 | Program output: -51                
Correct output: -71                 | Program output: -71                
Correct output: -25                 | Program output: -25                
Correct output: -94                 | Program output: -35                
Correct output: -73                 | Program output: -73                
Correct output: -48                 | Program output: 0                  
Correct output: -49                 | Program output: 6                  
Correct output: -67                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -4                 
Correct output: -81                 | Program output: 87                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: 97                 
Correct output: -90                 | Program output: 89                 
Correct output: -94                 | Program output: 62                 
Correct output: -74                 | Program output: 69                 
Correct output: -61                 | Program output: -61                
Correct output: -90                 | Program output: 42                 
Correct output: -70                 | Program output: 14                 
Correct output: -89                 | Program output: -89                
Correct output: -80                 | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: -15                 | Program output: 83                 
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -93                
Correct output: -52                 | Program output: -52                
Correct output: -98                 | Program output: 56                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -62                
Correct output: -93                 | Program output: 11                 
Correct output: -42                 | Program output: 35                 
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -9                 
Correct output: -29                 | Program output: 74                 
Correct output: -42                 | Program output: 15                 
Correct output: -3                  | Program output: 64                 
Correct output: -67                 | Program output: -28                
Correct output: -86                 | Program output: 4                  
Correct output: -91                 | Program output: 56                 
Correct output: -100                | Program output: -39                
Correct output: -85                 | Program output: 82                 
Correct output: -41                 | Program output: -3                 
Correct output: -26                 | Program output: -26                
Correct output: -12                 | Program output: 21                 
Correct output: -74                 | Program output: -61                
Correct output: -89                 | Program output: -89                
Correct output: -12                 | Program output: 39                 
Correct output: -41                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3})
Lexicase best program: (exec_dup_times (integer_shove exec_y (exec_s (integer_min exec_do*times (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 boolean_yank integer_empty boolean_flush exec_if () (boolean_dup tag_exec_551 (integer_stackdepth integer_flush print_boolean exec_empty in2 in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) boolean_eq integer_max) print_integer -72 boolean_frominteger) tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) (integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty integer_min boolean_yank integer_dup_items) (in3))))) () ())))
Lexicase best errors: [0 0 0 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 74
Percent parens: 0.297
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3})
Zero cases best program: (exec_dup_times (integer_shove exec_y (exec_s (integer_min exec_do*times (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 boolean_yank integer_empty boolean_flush exec_if () (boolean_dup tag_exec_551 (integer_stackdepth integer_flush print_boolean exec_empty in2 in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) boolean_eq integer_max) print_integer -72 boolean_frominteger) tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) (integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty integer_min boolean_yank integer_dup_items) (in3))))) () ())))
Zero cases best errors: [0 0 0 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 74
Percent parens: 0.297
--- Lexicase Population Statistics ---
Count of elite individuals by case: (284 791 796 333 48 126 796 286 332 287)
Population mean number of elite cases: 4.08
Count of perfect (error zero) individuals by case: (284 791 796 333 48 126 796 286 332 287)
Population mean number of perfect (error zero) cases: 4.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3})
Best program: (exec_dup_times (integer_shove exec_y (exec_s (integer_min exec_do*times (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 boolean_yank integer_empty boolean_flush exec_if () (boolean_dup tag_exec_551 (integer_stackdepth integer_flush print_boolean exec_empty print_newline in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) boolean_eq integer_max) print_integer boolean_frominteger) tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) (integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty integer_min integer_inc) (exec_rot (integer_stackdepth) (boolean_empty integer_min boolean_yank integer_dup_items) (in3)))))) () ())))
Errors: [0 0 0 1 1 1 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 56
Size: 81
Percent parens: 0.309
--- Population Statistics ---
Average total errors in population: 5.921
Median total errors in population: 5
Error averages by case: (0.716 0.209 0.204 0.667 0.952 0.874 0.204 0.714 0.668 0.713)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.395
Average program size in population (points): 71.408
Average percent parens in population: 0.288
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 6.02975
Median age in population: 6.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 45
Genome diversity (% unique genomes):	 0.783
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.774
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.114
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 4604998
--- Timings ---
Current time: 1559314549612 milliseconds
Total Time:          19.5 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.2 seconds, 47.2%
Fitness Testing:      6.5 seconds, 33.1%
Report:               3.8 seconds, 19.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: 33                  | Program output: 33                 
Correct output: -7                  | Program output: -7                 
Correct output: -51                 | Program output: -51                
Correct output: 38                  | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: 3                  
Correct output: -5                  | Program output: -5                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 14                 
Correct output: -31                 | Program output: -31                
Correct output: 63                  | Program output: 63                 
Correct output: -55                 | Program output: -55                
Correct output: 94                  | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 6                  
Correct output: 78                  | Program output: 78                 
Correct output: 16                  | Program output: 18                 
Correct output: 7                   | Program output: 91                 
Correct output: 2                   | Program output: 85                 
Correct output: 49                  | Program output: 93                 
Correct output: 0                   | Program output: 39                 
Correct output: 37                  | Program output: 76                 
Correct output: 41                  | Program output: 88                 
Correct output: 49                  | Program output: 99                 
Correct output: 65                  | Program output: 97                 
Correct output: 17                  | Program output: 88                 
Correct output: 11                  | Program output: 14                 
Correct output: 14                  | Program output: 36                 
Correct output: 16                  | Program output: 56                 
Correct output: 12                  | Program output: 100                
Correct output: 2                   | Program output: 63                 
Correct output: -40                 | Program output: 84                 
Correct output: -89                 | Program output: -18                
Correct output: -92                 | Program output: -89                
Correct output: -63                 | Program output: 30                 
Correct output: -15                 | Program output: -15                
Correct output: -53                 | Program output: -31                
Correct output: -58                 | Program output: -58                
Correct output: -27                 | Program output: 36                 
Correct output: -41                 | Program output: 1                  
Correct output: -32                 | Program output: -32                
Correct output: -48                 | Program output: 20                 
Correct output: -25                 | Program output: -25                
Correct output: -51                 | Program output: -51                
Correct output: -71                 | Program output: -71                
Correct output: -25                 | Program output: -25                
Correct output: -94                 | Program output: -35                
Correct output: -73                 | Program output: -73                
Correct output: -48                 | Program output: 0                  
Correct output: -49                 | Program output: 6                  
Correct output: -67                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -4                 
Correct output: -81                 | Program output: 87                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: 97                 
Correct output: -90                 | Program output: 89                 
Correct output: -94                 | Program output: 62                 
Correct output: -74                 | Program output: 69                 
Correct output: -61                 | Program output: -61                
Correct output: -90                 | Program output: 42                 
Correct output: -70                 | Program output: 14                 
Correct output: -89                 | Program output: -89                
Correct output: -80                 | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: -15                 | Program output: 83                 
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -93                
Correct output: -52                 | Program output: -52                
Correct output: -98                 | Program output: 56                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -62                
Correct output: -93                 | Program output: 11                 
Correct output: -42                 | Program output: 35                 
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -9                 
Correct output: -29                 | Program output: 74                 
Correct output: -42                 | Program output: 15                 
Correct output: -3                  | Program output: 64                 
Correct output: -67                 | Program output: -28                
Correct output: -86                 | Program output: 4                  
Correct output: -91                 | Program output: 56                 
Correct output: -100                | Program output: -39                
Correct output: -85                 | Program output: 82                 
Correct output: -41                 | Program output: -3                 
Correct output: -26                 | Program output: -26                
Correct output: -12                 | Program output: 21                 
Correct output: -74                 | Program output: -61                
Correct output: -89                 | Program output: -89                
Correct output: -12                 | Program output: 39                 
Correct output: -41                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3})
Lexicase best program: (exec_dup_times (integer_shove exec_y (exec_s (integer_min exec_do*times (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty integer_swap exec_noop integer_dup exec_if (in1 boolean_yank integer_empty boolean_flush exec_if () (boolean_dup tag_exec_551 (integer_stackdepth integer_flush print_boolean exec_empty print_newline in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) boolean_eq integer_max) print_integer -72 boolean_frominteger) tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) (integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty integer_min boolean_yank integer_dup_items) (in3))))) () ())))
Lexicase best errors: [0 1 1 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 74
Percent parens: 0.297
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3})
Zero cases best program: (exec_dup_times (integer_shove exec_y (exec_s (integer_min exec_do*times (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty integer_swap exec_noop integer_dup exec_if (in1 boolean_yank integer_empty boolean_flush exec_if () (boolean_dup tag_exec_551 (integer_stackdepth integer_flush print_boolean exec_empty print_newline in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) boolean_eq integer_max) print_integer -72 boolean_frominteger) tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) (integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty integer_min boolean_yank integer_dup_items) (in3))))) () ())))
Zero cases best errors: [0 1 1 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 74
Percent parens: 0.297
--- Lexicase Population Statistics ---
Count of elite individuals by case: (694 258 109 311 113 312 311 113 113 311)
Population mean number of elite cases: 2.64
Count of perfect (error zero) individuals by case: (694 258 109 311 113 312 311 113 113 311)
Population mean number of perfect (error zero) cases: 2.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mod} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3})
Best program: (exec_dup_times (integer_shove exec_y (exec_s (integer_min exec_do*times (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 boolean_yank integer_empty boolean_flush exec_if () (boolean_dup tag_exec_551 (integer_stackdepth integer_flush print_boolean exec_empty print_newline in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) boolean_eq integer_max) print_integer -72 boolean_frominteger) tag_exec_223 (boolean_eq integer_mod boolean_dup_items) integer_gt boolean_flush) (integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty integer_min boolean_yank integer_dup_items) (in3))))) () ())))
Errors: [0 1 1 0 1 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 52
Size: 74
Percent parens: 0.297
--- Population Statistics ---
Average total errors in population: 7.355
Median total errors in population: 8
Error averages by case: (0.306 0.742 0.891 0.689 0.887 0.688 0.689 0.887 0.887 0.689)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 49.678
Average program size in population (points): 69.389
Average percent parens in population: 0.289
Minimum age in population: 5.0
Maximum age in population: 9.25
Average age in population: 7.49675
Median age in population: 7.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 38
Genome diversity (% unique genomes):	 0.793
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.782
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.111
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 5613426
--- Timings ---
Current time: 1559314553467 milliseconds
Total Time:          23.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        11.2 seconds, 47.7%
Fitness Testing:      7.5 seconds, 32.2%
Report:               4.6 seconds, 19.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: 33                  | Program output: 33                 
Correct output: -7                  | Program output: -7                 
Correct output: -51                 | Program output: -51                
Correct output: 38                  | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: 3                  
Correct output: -5                  | Program output: -5                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 14                 
Correct output: -31                 | Program output: -31                
Correct output: 63                  | Program output: 63                 
Correct output: -55                 | Program output: -55                
Correct output: 94                  | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 6                  
Correct output: 78                  | Program output: 78                 
Correct output: 16                  | Program output: 18                 
Correct output: 7                   | Program output: 91                 
Correct output: 2                   | Program output: 85                 
Correct output: 49                  | Program output: 93                 
Correct output: 0                   | Program output: 39                 
Correct output: 37                  | Program output: 76                 
Correct output: 41                  | Program output: 88                 
Correct output: 49                  | Program output: 99                 
Correct output: 65                  | Program output: 97                 
Correct output: 17                  | Program output: 88                 
Correct output: 11                  | Program output: 14                 
Correct output: 14                  | Program output: 36                 
Correct output: 16                  | Program output: 56                 
Correct output: 12                  | Program output: 100                
Correct output: 2                   | Program output: 63                 
Correct output: -40                 | Program output: 84                 
Correct output: -89                 | Program output: -18                
Correct output: -92                 | Program output: -89                
Correct output: -63                 | Program output: 30                 
Correct output: -15                 | Program output: -15                
Correct output: -53                 | Program output: -31                
Correct output: -58                 | Program output: -58                
Correct output: -27                 | Program output: 36                 
Correct output: -41                 | Program output: 1                  
Correct output: -32                 | Program output: -32                
Correct output: -48                 | Program output: 20                 
Correct output: -25                 | Program output: -25                
Correct output: -51                 | Program output: -51                
Correct output: -71                 | Program output: -71                
Correct output: -25                 | Program output: -25                
Correct output: -94                 | Program output: -35                
Correct output: -73                 | Program output: -73                
Correct output: -48                 | Program output: 0                  
Correct output: -49                 | Program output: 6                  
Correct output: -67                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -4                 
Correct output: -81                 | Program output: 87                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: 97                 
Correct output: -90                 | Program output: 89                 
Correct output: -94                 | Program output: 62                 
Correct output: -74                 | Program output: 69                 
Correct output: -61                 | Program output: -61                
Correct output: -90                 | Program output: 42                 
Correct output: -70                 | Program output: 14                 
Correct output: -89                 | Program output: -89                
Correct output: -80                 | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: -15                 | Program output: 83                 
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -93                
Correct output: -52                 | Program output: -52                
Correct output: -98                 | Program output: 56                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -62                
Correct output: -93                 | Program output: 11                 
Correct output: -42                 | Program output: 35                 
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -9                 
Correct output: -29                 | Program output: 74                 
Correct output: -42                 | Program output: 15                 
Correct output: -3                  | Program output: 64                 
Correct output: -67                 | Program output: -28                
Correct output: -86                 | Program output: 4                  
Correct output: -91                 | Program output: 56                 
Correct output: -100                | Program output: -39                
Correct output: -85                 | Program output: 82                 
Correct output: -41                 | Program output: -3                 
Correct output: -26                 | Program output: -26                
Correct output: -12                 | Program output: 21                 
Correct output: -74                 | Program output: -61                
Correct output: -89                 | Program output: -89                
Correct output: -12                 | Program output: 39                 
Correct output: -41                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3})
Lexicase best program: (exec_dup_times (exec_dup_times (integer_shove exec_y (exec_s (boolean_frominteger exec_do*times (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 boolean_yank integer_empty boolean_flush exec_if () (boolean_dup tag_exec_551 (integer_stackdepth integer_flush print_boolean exec_empty print_newline in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) boolean_eq integer_max) print_integer -72 boolean_frominteger) tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) (integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty integer_min boolean_yank integer_dup_items) (in3))))) () ()))))
Lexicase best errors: [0 0 1 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 76
Percent parens: 0.303
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3})
Zero cases best program: (exec_dup_times (exec_dup_times (integer_shove exec_y (exec_s (boolean_frominteger exec_do*times (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 boolean_yank integer_empty boolean_flush exec_if () (boolean_dup tag_exec_551 (integer_stackdepth integer_flush print_boolean exec_empty print_newline in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) boolean_eq integer_max) print_integer -72 boolean_frominteger) tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) (integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty integer_min boolean_yank integer_dup_items) (in3))))) () ()))))
Zero cases best errors: [0 0 1 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 76
Percent parens: 0.303
--- Lexicase Population Statistics ---
Count of elite individuals by case: (359 361 115 358 227 359 228 1 360 359)
Population mean number of elite cases: 2.73
Count of perfect (error zero) individuals by case: (359 361 115 358 227 359 228 1 360 359)
Population mean number of perfect (error zero) cases: 2.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_gte} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte})
Best program: (exec_dup_times (exec_s (integer_min exec_do*times (print_integer integer_dec exec_s_when_autoconstructing () () (integer_gte print_integer exec_noop integer_dup exec_if (in1 boolean_yank integer_empty boolean_flush exec_if (boolean_dup tag_exec_551 (integer_stackdepth integer_flush print_boolean exec_empty exec_yankdup) boolean_eq integer_max) (print_integer -72 boolean_frominteger) tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) (integer_lte)))) () ()))
Errors: [0 0 1 0 1 0 1 1 0 0]
Total: 4
Mean: 0.4
Genome size: 36
Size: 51
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 7.273
Median total errors in population: 8
Error averages by case: (0.641 0.639 0.885 0.642 0.773 0.641 0.772 0.999 0.64 0.641)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.762
Average program size in population (points): 74.372
Average percent parens in population: 0.292
Minimum age in population: 6.0
Maximum age in population: 11.0
Average age in population: 8.99925
Median age in population: 9.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 18
Genome diversity (% unique genomes):	 0.807
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.806
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.143
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 6717318
--- Timings ---
Current time: 1559314557729 milliseconds
Total Time:          28.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.0 seconds, 49.5%
Fitness Testing:      8.7 seconds, 30.9%
Report:               5.5 seconds, 19.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 634
Test mean error for best: 0.63400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: 33                  | Program output: 33                 
Correct output: -7                  | Program output: -7                 
Correct output: -51                 | Program output: -51                
Correct output: 38                  | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: 3                  
Correct output: -5                  | Program output: -5                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 14                 
Correct output: -31                 | Program output: -31                
Correct output: 63                  | Program output: 63                 
Correct output: -55                 | Program output: -55                
Correct output: 94                  | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 6                  
Correct output: 78                  | Program output: 78                 
Correct output: 16                  | Program output: 18                 
Correct output: 7                   | Program output: 91                 
Correct output: 2                   | Program output: 85                 
Correct output: 49                  | Program output: 93                 
Correct output: 0                   | Program output: 39                 
Correct output: 37                  | Program output: 76                 
Correct output: 41                  | Program output: 88                 
Correct output: 49                  | Program output: 99                 
Correct output: 65                  | Program output: 97                 
Correct output: 17                  | Program output: 88                 
Correct output: 11                  | Program output: 14                 
Correct output: 14                  | Program output: 36                 
Correct output: 16                  | Program output: 56                 
Correct output: 12                  | Program output: 100                
Correct output: 2                   | Program output: 63                 
Correct output: -40                 | Program output: 84                 
Correct output: -89                 | Program output: -18                
Correct output: -92                 | Program output: -89                
Correct output: -63                 | Program output: 30                 
Correct output: -15                 | Program output: -15                
Correct output: -53                 | Program output: -31                
Correct output: -58                 | Program output: -58                
Correct output: -27                 | Program output: 36                 
Correct output: -41                 | Program output: 1                  
Correct output: -32                 | Program output: -32                
Correct output: -48                 | Program output: 20                 
Correct output: -25                 | Program output: -25                
Correct output: -51                 | Program output: -51                
Correct output: -71                 | Program output: -71                
Correct output: -25                 | Program output: -25                
Correct output: -94                 | Program output: -35                
Correct output: -73                 | Program output: -73                
Correct output: -48                 | Program output: 0                  
Correct output: -49                 | Program output: 6                  
Correct output: -67                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -4                 
Correct output: -81                 | Program output: 87                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: 97                 
Correct output: -90                 | Program output: 89                 
Correct output: -94                 | Program output: 62                 
Correct output: -74                 | Program output: 69                 
Correct output: -61                 | Program output: -61                
Correct output: -90                 | Program output: 42                 
Correct output: -70                 | Program output: 14                 
Correct output: -89                 | Program output: -89                
Correct output: -80                 | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: -15                 | Program output: 83                 
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -93                
Correct output: -52                 | Program output: -52                
Correct output: -98                 | Program output: 56                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -62                
Correct output: -93                 | Program output: 11                 
Correct output: -42                 | Program output: 35                 
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -9                 
Correct output: -29                 | Program output: 74                 
Correct output: -42                 | Program output: 15                 
Correct output: -3                  | Program output: 64                 
Correct output: -67                 | Program output: -28                
Correct output: -86                 | Program output: 4                  
Correct output: -91                 | Program output: 56                 
Correct output: -100                | Program output: -39                
Correct output: -85                 | Program output: 82                 
Correct output: -41                 | Program output: -3                 
Correct output: -26                 | Program output: -26                
Correct output: -12                 | Program output: 21                 
Correct output: -74                 | Program output: -61                
Correct output: -89                 | Program output: -89                
Correct output: -12                 | Program output: 39                 
Correct output: -41                 | Program output: 51                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3})
Lexicase best program: (exec_dup_times (integer_shove) exec_y (exec_s (integer_min exec_do*times (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 boolean_yank integer_empty boolean_flush integer_empty boolean_flush exec_if () (boolean_dup tag_exec_551 (integer_stackdepth integer_flush print_boolean exec_empty print_newline in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) boolean_eq integer_max) print_integer -72 boolean_frominteger) tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) () integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty integer_min boolean_yank integer_dup_items) (in3)))) () ()))
Lexicase best errors: [1 1 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 76
Percent parens: 0.289
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 2, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3})
Zero cases best program: (exec_dup_times (integer_shove) exec_y (exec_s (integer_min exec_do*times (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 boolean_yank integer_empty boolean_flush integer_empty boolean_flush exec_if () (boolean_dup tag_exec_551 (integer_stackdepth integer_flush print_boolean exec_empty print_newline in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) boolean_eq integer_max) print_integer -72 boolean_frominteger) tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) () integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty integer_min boolean_yank integer_dup_items) (in3)))) () ()))
Zero cases best errors: [1 1 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 76
Percent parens: 0.289
--- Lexicase Population Statistics ---
Count of elite individuals by case: (80 20 527 497 437 419 2 656 453 653)
Population mean number of elite cases: 3.74
Count of perfect (error zero) individuals by case: (80 20 527 497 437 419 2 656 453 653)
Population mean number of perfect (error zero) cases: 3.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_items} {:close 0, :instruction print_integer})
Best program: (exec_dup_times (integer_shove exec_y (exec_s (integer_min exec_do*times (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 boolean_yank integer_empty boolean_flush exec_if () (boolean_dup tag_exec_551 (integer_pop exec_y (boolean_invert_first_then_and exec_y_when_autoconstructing () exec_yankdup) boolean_eq integer_max) print_integer -72 integer_stackdepth) boolean_empty integer_min boolean_yank integer_dup_items) (print_integer))))) () ())))
Errors: [1 1 0 0 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 36
Size: 54
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 6.256
Median total errors in population: 5
Error averages by case: (0.92 0.98 0.473 0.503 0.563 0.581 0.998 0.344 0.547 0.347)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 52.264
Average program size in population (points): 73.68
Average percent parens in population: 0.290
Minimum age in population: 7.25
Maximum age in population: 12.421875
Average age in population: 10.661125
Median age in population: 10.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 42
Genome diversity (% unique genomes):	 0.803
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.803
Total error diversity:				 0.008
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.141
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 7780749
--- Timings ---
Current time: 1559314561888 milliseconds
Total Time:          31.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.2 seconds, 50.9%
Fitness Testing:      9.8 seconds, 30.8%
Report:               5.7 seconds, 18.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 581
Test mean error for best: 0.58100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output:                    
Correct output: -52                 | Program output: -52                
Correct output: 33                  | Program output:                    
Correct output: -7                  | Program output: -7                 
Correct output: -51                 | Program output: -51                
Correct output: 38                  | Program output:                    
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: -63                
Correct output: -5                  | Program output: -5                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output:                    
Correct output: -31                 | Program output: -31                
Correct output: 63                  | Program output:                    
Correct output: -55                 | Program output: -55                
Correct output: 94                  | Program output:                    
Correct output: -83                 | Program output: -83                
Correct output: 8                   | Program output:                    
Correct output: 9                   | Program output:                    
Correct output: 14                  | Program output:                    
Correct output: 6                   | Program output:                    
Correct output: 78                  | Program output:                    
Correct output: 16                  | Program output:                    
Correct output: 7                   | Program output:                    
Correct output: 2                   | Program output:                    
Correct output: 49                  | Program output:                    
Correct output: 0                   | Program output:                    
Correct output: 37                  | Program output:                    
Correct output: 41                  | Program output:                    
Correct output: 49                  | Program output:                    
Correct output: 65                  | Program output:                    
Correct output: 17                  | Program output:                    
Correct output: 11                  | Program output:                    
Correct output: 14                  | Program output:                    
Correct output: 16                  | Program output:                    
Correct output: 12                  | Program output:                    
Correct output: 2                   | Program output:                    
Correct output: -40                 | Program output: -27                
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -92                
Correct output: -63                 | Program output:                    
Correct output: -15                 | Program output: -15                
Correct output: -53                 | Program output: -31                
Correct output: -58                 | Program output: -58                
Correct output: -27                 | Program output: -27                
Correct output: -41                 | Program output: -41                
Correct output: -32                 | Program output: -32                
Correct output: -48                 | Program output:                    
Correct output: -25                 | Program output: -25                
Correct output: -51                 | Program output: -51                
Correct output: -71                 | Program output: -71                
Correct output: -25                 | Program output: -25                
Correct output: -94                 | Program output: -35                
Correct output: -73                 | Program output: -73                
Correct output: -48                 | Program output: 0                  
Correct output: -49                 | Program output: -6                 
Correct output: -67                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output:                    
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output:                    
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -91                
Correct output: -74                 | Program output:                    
Correct output: -61                 | Program output: -61                
Correct output: -90                 | Program output: -13                
Correct output: -70                 | Program output:                    
Correct output: -89                 | Program output: -89                
Correct output: -80                 | Program output: -4                 
Correct output: 0                   | Program output: 0                  
Correct output: -15                 | Program output:                    
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -93                
Correct output: -52                 | Program output: -52                
Correct output: -98                 | Program output:                    
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -62                
Correct output: -93                 | Program output: -93                
Correct output: -42                 | Program output: -42                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -84                
Correct output: -29                 | Program output:                    
Correct output: -42                 | Program output:                    
Correct output: -3                  | Program output:                    
Correct output: -67                 | Program output: -28                
Correct output: -86                 | Program output:                    
Correct output: -91                 | Program output: -75                
Correct output: -100                | Program output: -93                
Correct output: -85                 | Program output:                    
Correct output: -41                 | Program output: -3                 
Correct output: -26                 | Program output: -26                
Correct output: -12                 | Program output:                    
Correct output: -74                 | Program output: -61                
Correct output: -89                 | Program output: -89                
Correct output: -12                 | Program output: -12                
Correct output: -41                 | Program output: -4                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_y} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3})
Lexicase best program: (integer_sub integer_shove integer_rot integer_inc in2 exec_y (integer_min integer_min exec_do*times (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 boolean_yank in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean exec_empty print_newline in3 exec_empty print_newline in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) exec_dup_times (integer_max) print_integer -72 boolean_frominteger) (tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt) boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth boolean_empty integer_min exec_dup_times (integer_dup_items) in3) () ()) ())))))
Lexicase best errors: [0 1 1 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 80
Percent parens: 0.275
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_y} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3})
Zero cases best program: (integer_sub integer_shove integer_rot integer_inc in2 exec_y (integer_min integer_min exec_do*times (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 boolean_yank in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean exec_empty print_newline in3 exec_empty print_newline in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) exec_dup_times (integer_max) print_integer -72 boolean_frominteger) (tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt) boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth boolean_empty integer_min exec_dup_times (integer_dup_items) in3) () ()) ())))))
Zero cases best errors: [0 1 1 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 80
Percent parens: 0.275
--- Lexicase Population Statistics ---
Count of elite individuals by case: (725 686 437 88 1000 289 224 1000 736 87)
Population mean number of elite cases: 5.27
Count of perfect (error zero) individuals by case: (725 686 437 88 0 289 224 0 736 87)
Population mean number of perfect (error zero) cases: 3.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq})
Best program: (exec_dup_times (integer_shove exec_y (exec_s () (integer_min exec_do*times (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 boolean_yank integer_empty in3) (boolean_dup tag_exec_551 (integer_stackdepth exec_yankdup print_boolean exec_empty print_newline exec_do*count (integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) boolean_eq exec_empty) print_integer -72 boolean_frominteger) tag_exec_223 (boolean_eq)))))) ())))
Errors: [0 0 0 1 1 1 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 38
Size: 56
Percent parens: 0.321
--- Population Statistics ---
Average total errors in population: 6.728
Median total errors in population: 6
Error averages by case: (0.275 0.314 0.563 0.912 1.0 0.711 0.776 1.0 0.264 0.913)
Error minima by case: (0 0 0 0 1 0 0 1 0 0)
Average genome size in population (length): 46.353
Average program size in population (points): 64.605
Average percent parens in population: 0.280
Minimum age in population: 8.25
Maximum age in population: 13.984375
Average age in population: 12.135328125
Median age in population: 12.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 94
Genome diversity (% unique genomes):	 0.675
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 94
Syntactic diversity (% unique Push programs):	 0.675
Total error diversity:				 0.006
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.102
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 8924990
--- Timings ---
Current time: 1559314565817 milliseconds
Total Time:          35.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.1 seconds, 50.7%
Fitness Testing:     11.0 seconds, 30.8%
Report:               6.5 seconds, 18.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 379
Test mean error for best: 0.37900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: 33                  | Program output: 33                 
Correct output: -7                  | Program output: -7                 
Correct output: -51                 | Program output: -51                
Correct output: 38                  | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: -63                
Correct output: -5                  | Program output: -5                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 14                 
Correct output: -31                 | Program output: -31                
Correct output: 63                  | Program output: 63                 
Correct output: -55                 | Program output: -55                
Correct output: 94                  | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 6                  
Correct output: 78                  | Program output: 78                 
Correct output: 16                  | Program output: 18                 
Correct output: 7                   | Program output: 10                 
Correct output: 2                   | Program output: 50                 
Correct output: 49                  | Program output: 49                 
Correct output: 0                   | Program output: 39                 
Correct output: 37                  | Program output: 37                 
Correct output: 41                  | Program output: 41                 
Correct output: 49                  | Program output: 99                 
Correct output: 65                  | Program output: 91                 
Correct output: 17                  | Program output: 17                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 36                 
Correct output: 16                  | Program output: 56                 
Correct output: 12                  | Program output: 12                 
Correct output: 2                   | Program output: 2                  
Correct output: -40                 | Program output: -27                
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -92                
Correct output: -63                 | Program output: 30                 
Correct output: -15                 | Program output: -15                
Correct output: -53                 | Program output: -31                
Correct output: -58                 | Program output: -58                
Correct output: -27                 | Program output: -27                
Correct output: -41                 | Program output: -41                
Correct output: -32                 | Program output: -32                
Correct output: -48                 | Program output: 20                 
Correct output: -25                 | Program output: -25                
Correct output: -51                 | Program output: -51                
Correct output: -71                 | Program output: -71                
Correct output: -25                 | Program output: -25                
Correct output: -94                 | Program output: -35                
Correct output: -73                 | Program output: -73                
Correct output: -48                 | Program output: 0                  
Correct output: -49                 | Program output: -6                 
Correct output: -67                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: 45                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -91                
Correct output: -74                 | Program output: 41                 
Correct output: -61                 | Program output: -61                
Correct output: -90                 | Program output: -13                
Correct output: -70                 | Program output: 14                 
Correct output: -89                 | Program output: -89                
Correct output: -80                 | Program output: -4                 
Correct output: 0                   | Program output: 0                  
Correct output: -15                 | Program output: 83                 
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -93                
Correct output: -52                 | Program output: -52                
Correct output: -98                 | Program output: 10                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -62                
Correct output: -93                 | Program output: -93                
Correct output: -42                 | Program output: -42                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -84                
Correct output: -29                 | Program output: 74                 
Correct output: -42                 | Program output: 15                 
Correct output: -3                  | Program output: 64                 
Correct output: -67                 | Program output: -28                
Correct output: -86                 | Program output: 4                  
Correct output: -91                 | Program output: -75                
Correct output: -100                | Program output: -93                
Correct output: -85                 | Program output: 75                 
Correct output: -41                 | Program output: -3                 
Correct output: -26                 | Program output: -26                
Correct output: -12                 | Program output: 21                 
Correct output: -74                 | Program output: -61                
Correct output: -89                 | Program output: -89                
Correct output: -12                 | Program output: -12                
Correct output: -41                 | Program output: -4                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_y} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank})
Lexicase best program: (integer_sub integer_shove integer_rot integer_inc in2 exec_y (integer_min integer_min exec_do*times (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop) integer_dup exec_if (in1 boolean_yank in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean) (exec_empty print_newline in3 exec_empty print_newline in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) exec_dup_times (integer_max print_integer -72 boolean_frominteger) tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty integer_min boolean_yank) ())) ()))))
Lexicase best errors: [0 0 0 1 0 1 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 77
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction exec_y} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank})
Zero cases best program: (integer_sub integer_shove integer_rot integer_inc in2 exec_y (integer_min integer_min exec_do*times (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop) integer_dup exec_if (in1 boolean_yank in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean) (exec_empty print_newline in3 exec_empty print_newline in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) exec_dup_times (integer_max print_integer -72 boolean_frominteger) tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty integer_min boolean_yank) ())) ()))))
Zero cases best errors: [0 0 0 1 0 1 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 77
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (375 378 159 382 296 1000 6 295 298 303)
Population mean number of elite cases: 3.49
Count of perfect (error zero) individuals by case: (375 378 159 382 296 0 6 295 298 303)
Population mean number of perfect (error zero) cases: 2.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq})
Best program: (exec_dup_times (integer_shove exec_y (exec_s () (integer_min exec_swap (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 boolean_yank integer_empty in3) (boolean_dup tag_exec_551 (integer_stackdepth exec_yankdup print_boolean exec_empty print_newline exec_do*count (integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) boolean_eq exec_empty) print_integer -72 boolean_frominteger) tag_exec_223 (boolean_eq))))) ()) ())))
Errors: [1 1 1 0 0 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 38
Size: 57
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 7.508
Median total errors in population: 7
Error averages by case: (0.625 0.622 0.841 0.618 0.704 1.0 0.994 0.705 0.702 0.697)
Error minima by case: (0 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 46.682
Average program size in population (points): 65.588
Average percent parens in population: 0.289
Minimum age in population: 11.6875
Maximum age in population: 15.51953125
Average age in population: 13.71452734375
Median age in population: 13.765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 143
Genome diversity (% unique genomes):	 0.622
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 144
Syntactic diversity (% unique Push programs):	 0.618
Total error diversity:				 0.006
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.132
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 10139564
--- Timings ---
Current time: 1559314569986 milliseconds
Total Time:          39.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        20.1 seconds, 50.4%
Fitness Testing:     12.2 seconds, 30.8%
Report:               7.4 seconds, 18.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 379
Test mean error for best: 0.37900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: 33                  | Program output: 33                 
Correct output: -7                  | Program output: -7                 
Correct output: -51                 | Program output: -51                
Correct output: 38                  | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: -63                
Correct output: -5                  | Program output: -5                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 14                 
Correct output: -31                 | Program output: -31                
Correct output: 63                  | Program output: 63                 
Correct output: -55                 | Program output: -55                
Correct output: 94                  | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 6                  
Correct output: 78                  | Program output: 78                 
Correct output: 16                  | Program output: 18                 
Correct output: 7                   | Program output: 10                 
Correct output: 2                   | Program output: 50                 
Correct output: 49                  | Program output: 49                 
Correct output: 0                   | Program output: 39                 
Correct output: 37                  | Program output: 37                 
Correct output: 41                  | Program output: 41                 
Correct output: 49                  | Program output: 99                 
Correct output: 65                  | Program output: 91                 
Correct output: 17                  | Program output: 17                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 36                 
Correct output: 16                  | Program output: 56                 
Correct output: 12                  | Program output: 12                 
Correct output: 2                   | Program output: 2                  
Correct output: -40                 | Program output: -27                
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -92                
Correct output: -63                 | Program output: 30                 
Correct output: -15                 | Program output: -15                
Correct output: -53                 | Program output: -31                
Correct output: -58                 | Program output: -58                
Correct output: -27                 | Program output: -27                
Correct output: -41                 | Program output: -41                
Correct output: -32                 | Program output: -32                
Correct output: -48                 | Program output: 20                 
Correct output: -25                 | Program output: -25                
Correct output: -51                 | Program output: -51                
Correct output: -71                 | Program output: -71                
Correct output: -25                 | Program output: -25                
Correct output: -94                 | Program output: -35                
Correct output: -73                 | Program output: -73                
Correct output: -48                 | Program output: 0                  
Correct output: -49                 | Program output: -6                 
Correct output: -67                 | Program output: -38                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: 45                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: 9                  
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -91                
Correct output: -74                 | Program output: 41                 
Correct output: -61                 | Program output: -61                
Correct output: -90                 | Program output: -13                
Correct output: -70                 | Program output: 14                 
Correct output: -89                 | Program output: -89                
Correct output: -80                 | Program output: -4                 
Correct output: 0                   | Program output: 0                  
Correct output: -15                 | Program output: 83                 
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -93                
Correct output: -52                 | Program output: -52                
Correct output: -98                 | Program output: 10                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -62                
Correct output: -93                 | Program output: -93                
Correct output: -42                 | Program output: -42                
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -84                
Correct output: -29                 | Program output: 74                 
Correct output: -42                 | Program output: 15                 
Correct output: -3                  | Program output: 64                 
Correct output: -67                 | Program output: -28                
Correct output: -86                 | Program output: 4                  
Correct output: -91                 | Program output: -75                
Correct output: -100                | Program output: -93                
Correct output: -85                 | Program output: 75                 
Correct output: -41                 | Program output: -3                 
Correct output: -26                 | Program output: -26                
Correct output: -12                 | Program output: 21                 
Correct output: -74                 | Program output: -61                
Correct output: -89                 | Program output: -89                
Correct output: -12                 | Program output: -12                
Correct output: -41                 | Program output: -4                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq})
Lexicase best program: (exec_dup_times (integer_shove exec_y (exec_s () (integer_min exec_swap (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 boolean_yank integer_empty in3) (boolean_dup tag_exec_551 (integer_stackdepth exec_yankdup print_boolean exec_empty print_newline exec_do*count (integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) boolean_eq exec_empty) print_integer -72 boolean_frominteger) tag_exec_223 (boolean_eq))))) ()) ())))
Lexicase best errors: [0 1 0 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 57
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq})
Zero cases best program: (exec_dup_times (integer_shove exec_y (exec_s () (integer_min exec_swap (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 boolean_yank integer_empty in3) (boolean_dup tag_exec_551 (integer_stackdepth exec_yankdup print_boolean exec_empty print_newline exec_do*count (integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) boolean_eq exec_empty) print_integer -72 boolean_frominteger) tag_exec_223 (boolean_eq))))) ()) ())))
Zero cases best errors: [0 1 0 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 57
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (603 1000 363 438 427 165 437 604 603 169)
Population mean number of elite cases: 4.81
Count of perfect (error zero) individuals by case: (603 0 363 438 427 165 437 604 603 169)
Population mean number of perfect (error zero) cases: 3.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_empty} {:close 1, :instruction in3} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq})
Best program: (exec_dup_times (integer_shove exec_y (exec_s () (integer_min exec_swap (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 boolean_yank integer_empty in3) (boolean_dup tag_exec_551 (integer_stackdepth exec_yankdup exec_shove (exec_empty print_newline exec_do*count (integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) boolean_eq exec_empty) print_integer -72 boolean_frominteger) tag_exec_223 (boolean_eq)))))) ()) ())))
Errors: [0 1 0 0 1 1 0 0 0 1]
Total: 4
Mean: 0.4
Genome size: 38
Size: 58
Percent parens: 0.345
--- Population Statistics ---
Average total errors in population: 6.191
Median total errors in population: 6
Error averages by case: (0.397 1.0 0.637 0.562 0.573 0.835 0.563 0.396 0.397 0.831)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 47.43
Average program size in population (points): 67.097
Average percent parens in population: 0.296
Minimum age in population: 13.625
Maximum age in population: 16.33203125
Average age in population: 15.344740234375
Median age in population: 15.33203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 167
Genome diversity (% unique genomes):	 0.525
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 167
Syntactic diversity (% unique Push programs):	 0.524
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.117
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 11257835
--- Timings ---
Current time: 1559314574032 milliseconds
Total Time:          43.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        21.9 seconds, 50.0%
Fitness Testing:     13.5 seconds, 30.7%
Report:               8.4 seconds, 19.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 529
Test mean error for best: 0.52900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: -7                  | Program output: -7                 
Correct output: -51                 | Program output: -15                
Correct output: 38                  | Program output: 38                 
Correct output: -93                 | Program output: -73                
Correct output: -63                 | Program output: -63                
Correct output: -5                  | Program output: -5                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 84                 
Correct output: -31                 | Program output: -31                
Correct output: 63                  | Program output: 63                 
Correct output: -55                 | Program output: -55                
Correct output: 94                  | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: 8                   | Program output: 95                 
Correct output: 9                   | Program output: 50                 
Correct output: 14                  | Program output: 48                 
Correct output: 6                   | Program output: 37                 
Correct output: 78                  | Program output: 85                 
Correct output: 16                  | Program output: 51                 
Correct output: 7                   | Program output: 10                 
Correct output: 2                   | Program output: 50                 
Correct output: 49                  | Program output: 49                 
Correct output: 0                   | Program output: 78                 
Correct output: 37                  | Program output: 37                 
Correct output: 41                  | Program output: 41                 
Correct output: 49                  | Program output: 100                
Correct output: 65                  | Program output: 91                 
Correct output: 17                  | Program output: 17                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 57                 
Correct output: 16                  | Program output: 88                 
Correct output: 12                  | Program output: 12                 
Correct output: 2                   | Program output: 2                  
Correct output: -40                 | Program output: -27                
Correct output: -89                 | Program output: -13                
Correct output: -92                 | Program output: -46                
Correct output: -63                 | Program output: -63                
Correct output: -15                 | Program output: 57                 
Correct output: -53                 | Program output: -53                
Correct output: -58                 | Program output: -7                 
Correct output: -27                 | Program output: -27                
Correct output: -41                 | Program output: -41                
Correct output: -32                 | Program output: 75                 
Correct output: -48                 | Program output: -48                
Correct output: -25                 | Program output: 15                 
Correct output: -51                 | Program output: -4                 
Correct output: -71                 | Program output: -71                
Correct output: -25                 | Program output: 78                 
Correct output: -94                 | Program output: -94                
Correct output: -73                 | Program output: -67                
Correct output: -48                 | Program output: -48                
Correct output: -49                 | Program output: -6                 
Correct output: -67                 | Program output: -53                
Correct output: -94                 | Program output: -44                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -81                
Correct output: -85                 | Program output: -52                
Correct output: -69                 | Program output: 0                  
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -94                
Correct output: -74                 | Program output: 41                 
Correct output: -61                 | Program output: -21                
Correct output: -90                 | Program output: -13                
Correct output: -70                 | Program output: 33                 
Correct output: -89                 | Program output: -60                
Correct output: -80                 | Program output: -80                
Correct output: 0                   | Program output: 86                 
Correct output: -15                 | Program output: -15                
Correct output: -76                 | Program output: -57                
Correct output: -93                 | Program output: -41                
Correct output: -52                 | Program output: 21                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -74                
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: -31                
Correct output: -42                 | Program output: -42                
Correct output: -83                 | Program output: -42                
Correct output: -84                 | Program output: -84                
Correct output: -29                 | Program output: 87                 
Correct output: -42                 | Program output: -33                
Correct output: -3                  | Program output: -3                 
Correct output: -67                 | Program output: -6                 
Correct output: -86                 | Program output: -86                
Correct output: -91                 | Program output: -91                
Correct output: -100                | Program output: -93                
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: -41                
Correct output: -26                 | Program output: -13                
Correct output: -12                 | Program output: -12                
Correct output: -74                 | Program output: -11                
Correct output: -89                 | Program output: 54                 
Correct output: -12                 | Program output: -12                
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3})
Lexicase best program: (integer_sub integer_shove integer_rot exec_dup_times () in2 integer_min exec_do*times (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 boolean_yank in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean print_integer -72 exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) boolean_eq integer_max) (print_integer -72 boolean_frominteger) tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) in1 boolean_flush) integer_lte exec_swap () (exec_rot (boolean_empty integer_min boolean_yank integer_dup_items) (in3) ()))) ()))))
Lexicase best errors: [1 0 0 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 72
Percent parens: 0.306
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction in1} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3})
Zero cases best program: (integer_sub integer_shove integer_rot exec_dup_times () in2 integer_min exec_do*times (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 boolean_yank in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean print_integer -72 exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) boolean_eq integer_max) (print_integer -72 boolean_frominteger) tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) in1 boolean_flush) integer_lte exec_swap () (exec_rot (boolean_empty integer_min boolean_yank integer_dup_items) (in3) ()))) ()))))
Zero cases best errors: [1 0 0 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 72
Percent parens: 0.306
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 880 548 1 465 465 6 880 548 565)
Population mean number of elite cases: 4.36
Count of perfect (error zero) individuals by case: (3 880 548 1 465 465 6 880 548 565)
Population mean number of perfect (error zero) cases: 4.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 1, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_yank} {:close 1, :instruction integer_dup_items} {:close 0, :instruction in3})
Best program: (boolean_or integer_shove integer_rot integer_inc in2 integer_rot integer_min integer_min exec_do*times (print_integer exec_y_when_autoconstructing () exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 boolean_yank in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean exec_empty print_newline in3 exec_empty print_newline in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) exec_dup_times (integer_max) print_integer -72 boolean_frominteger) (tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth boolean_empty integer_min boolean_yank integer_dup_items) (in3) ())) ())))
Errors: [1 0 0 1 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 58
Size: 78
Percent parens: 0.256
--- Population Statistics ---
Average total errors in population: 5.639
Median total errors in population: 5
Error averages by case: (0.997 0.12 0.452 0.999 0.535 0.535 0.994 0.12 0.452 0.435)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.122
Average program size in population (points): 65.712
Average percent parens in population: 0.300
Minimum age in population: 14.625
Maximum age in population: 18.33203125
Average age in population: 16.7705810546875
Median age in population: 16.849609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 87
Genome diversity (% unique genomes):	 0.596
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 88
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.101
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 12140168
--- Timings ---
Current time: 1559314577353 milliseconds
Total Time:          47.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        23.8 seconds, 50.0%
Fitness Testing:     14.4 seconds, 30.2%
Report:               9.3 seconds, 19.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 410
Test mean error for best: 0.41000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: 33                  | Program output: 33                 
Correct output: -7                  | Program output: -7                 
Correct output: -51                 | Program output: -15                
Correct output: 38                  | Program output: 38                 
Correct output: -93                 | Program output: -73                
Correct output: -63                 | Program output: 3                  
Correct output: -5                  | Program output: -5                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 14                 
Correct output: -31                 | Program output: -31                
Correct output: 63                  | Program output: 63                 
Correct output: -55                 | Program output: -55                
Correct output: 94                  | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 6                  
Correct output: 78                  | Program output: 78                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 49                  | Program output: 93                 
Correct output: 0                   | Program output: 0                  
Correct output: 37                  | Program output: 63                 
Correct output: 41                  | Program output: 46                 
Correct output: 49                  | Program output: 49                 
Correct output: 65                  | Program output: 85                 
Correct output: 17                  | Program output: 87                 
Correct output: 11                  | Program output: 14                 
Correct output: 14                  | Program output: 14                 
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 86                 
Correct output: 2                   | Program output: 63                 
Correct output: -40                 | Program output: -40                
Correct output: -89                 | Program output: -13                
Correct output: -92                 | Program output: -46                
Correct output: -63                 | Program output: -63                
Correct output: -15                 | Program output: -15                
Correct output: -53                 | Program output: -53                
Correct output: -58                 | Program output: -58                
Correct output: -27                 | Program output: 36                 
Correct output: -41                 | Program output: 1                  
Correct output: -32                 | Program output: -32                
Correct output: -48                 | Program output: -48                
Correct output: -25                 | Program output: -25                
Correct output: -51                 | Program output: -4                 
Correct output: -71                 | Program output: -71                
Correct output: -25                 | Program output: -25                
Correct output: -94                 | Program output: -94                
Correct output: -73                 | Program output: -73                
Correct output: -48                 | Program output: -48                
Correct output: -49                 | Program output: -49                
Correct output: -67                 | Program output: -53                
Correct output: -94                 | Program output: -44                
Correct output: -92                 | Program output: -4                 
Correct output: -81                 | Program output: -81                
Correct output: -85                 | Program output: -52                
Correct output: -69                 | Program output: 0                  
Correct output: -90                 | Program output: -10                
Correct output: -94                 | Program output: -94                
Correct output: -74                 | Program output: -74                
Correct output: -61                 | Program output: -61                
Correct output: -90                 | Program output: -13                
Correct output: -70                 | Program output: -70                
Correct output: -89                 | Program output: -60                
Correct output: -80                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -15                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -41                
Correct output: -52                 | Program output: -52                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: -31                
Correct output: -42                 | Program output: 35                 
Correct output: -83                 | Program output: -42                
Correct output: -84                 | Program output: -9                 
Correct output: -29                 | Program output: -29                
Correct output: -42                 | Program output: -33                
Correct output: -3                  | Program output: -3                 
Correct output: -67                 | Program output: -67                
Correct output: -86                 | Program output: -86                
Correct output: -91                 | Program output: -91                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: -41                
Correct output: -26                 | Program output: -26                
Correct output: -12                 | Program output: -12                
Correct output: -74                 | Program output: -11                
Correct output: -89                 | Program output: -89                
Correct output: -12                 | Program output: 39                 
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank})
Lexicase best program: (integer_sub integer_shove integer_rot integer_inc in2 integer_min exec_do*times (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop) integer_dup exec_if (in1 boolean_yank in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean) (exec_empty) print_newline in3 exec_empty print_newline in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) exec_dup_times (integer_max print_integer -72 boolean_frominteger tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty) (integer_min) boolean_yank)) ())))
Lexicase best errors: [0 0 0 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 74
Percent parens: 0.270
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank})
Zero cases best program: (integer_sub integer_shove integer_rot integer_inc in2 integer_min exec_do*times (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop) integer_dup exec_if (in1 boolean_yank in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean) (exec_empty) print_newline in3 exec_empty print_newline in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) exec_dup_times (integer_max print_integer -72 boolean_frominteger tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty) (integer_min) boolean_yank)) ())))
Zero cases best errors: [0 0 0 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 74
Percent parens: 0.270
--- Lexicase Population Statistics ---
Count of elite individuals by case: (216 863 561 86 336 180 336 216 217 216)
Population mean number of elite cases: 3.23
Count of perfect (error zero) individuals by case: (216 863 561 86 336 180 336 216 217 216)
Population mean number of perfect (error zero) cases: 3.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank})
Best program: (integer_sub integer_shove integer_rot integer_inc in2 integer_min exec_do*times (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop) integer_dup exec_if (in1 boolean_yank in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean) (exec_empty) print_newline in3 exec_empty print_newline in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) exec_dup_times (integer_max print_integer -72 boolean_frominteger tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty) (integer_min) boolean_yank)) ())))
Errors: [0 0 0 1 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 54
Size: 74
Percent parens: 0.270
--- Population Statistics ---
Average total errors in population: 6.773
Median total errors in population: 7
Error averages by case: (0.784 0.137 0.439 0.914 0.664 0.82 0.664 0.784 0.783 0.784)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.321
Average program size in population (points): 65.538
Average percent parens in population: 0.294
Minimum age in population: 15.625
Maximum age in population: 19.9853515625
Average age in population: 18.53611181640625
Median age in population: 18.5078125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 141
Genome diversity (% unique genomes):	 0.609
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 141
Syntactic diversity (% unique Push programs):	 0.605
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.113
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 13050097
--- Timings ---
Current time: 1559314580684 milliseconds
Total Time:          51.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.8 seconds, 50.5%
Fitness Testing:     15.3 seconds, 30.1%
Report:               9.8 seconds, 19.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 410
Test mean error for best: 0.41000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: 33                  | Program output: 33                 
Correct output: -7                  | Program output: -7                 
Correct output: -51                 | Program output: -15                
Correct output: 38                  | Program output: 38                 
Correct output: -93                 | Program output: -73                
Correct output: -63                 | Program output: 3                  
Correct output: -5                  | Program output: -5                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 14                 
Correct output: -31                 | Program output: -31                
Correct output: 63                  | Program output: 63                 
Correct output: -55                 | Program output: -55                
Correct output: 94                  | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 6                  
Correct output: 78                  | Program output: 78                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 49                  | Program output: 93                 
Correct output: 0                   | Program output: 0                  
Correct output: 37                  | Program output: 63                 
Correct output: 41                  | Program output: 46                 
Correct output: 49                  | Program output: 49                 
Correct output: 65                  | Program output: 85                 
Correct output: 17                  | Program output: 87                 
Correct output: 11                  | Program output: 14                 
Correct output: 14                  | Program output: 14                 
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 86                 
Correct output: 2                   | Program output: 63                 
Correct output: -40                 | Program output: -40                
Correct output: -89                 | Program output: -13                
Correct output: -92                 | Program output: -46                
Correct output: -63                 | Program output: -63                
Correct output: -15                 | Program output: -15                
Correct output: -53                 | Program output: -53                
Correct output: -58                 | Program output: -58                
Correct output: -27                 | Program output: 36                 
Correct output: -41                 | Program output: 1                  
Correct output: -32                 | Program output: -32                
Correct output: -48                 | Program output: -48                
Correct output: -25                 | Program output: -25                
Correct output: -51                 | Program output: -4                 
Correct output: -71                 | Program output: -71                
Correct output: -25                 | Program output: -25                
Correct output: -94                 | Program output: -94                
Correct output: -73                 | Program output: -73                
Correct output: -48                 | Program output: -48                
Correct output: -49                 | Program output: -49                
Correct output: -67                 | Program output: -53                
Correct output: -94                 | Program output: -44                
Correct output: -92                 | Program output: -4                 
Correct output: -81                 | Program output: -81                
Correct output: -85                 | Program output: -52                
Correct output: -69                 | Program output: 0                  
Correct output: -90                 | Program output: -10                
Correct output: -94                 | Program output: -94                
Correct output: -74                 | Program output: -74                
Correct output: -61                 | Program output: -61                
Correct output: -90                 | Program output: -13                
Correct output: -70                 | Program output: -70                
Correct output: -89                 | Program output: -60                
Correct output: -80                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -15                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -41                
Correct output: -52                 | Program output: -52                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: -31                
Correct output: -42                 | Program output: 35                 
Correct output: -83                 | Program output: -42                
Correct output: -84                 | Program output: -9                 
Correct output: -29                 | Program output: -29                
Correct output: -42                 | Program output: -33                
Correct output: -3                  | Program output: -3                 
Correct output: -67                 | Program output: -67                
Correct output: -86                 | Program output: -86                
Correct output: -91                 | Program output: -91                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: -41                
Correct output: -26                 | Program output: -26                
Correct output: -12                 | Program output: -12                
Correct output: -74                 | Program output: -11                
Correct output: -89                 | Program output: -89                
Correct output: -12                 | Program output: 39                 
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank})
Lexicase best program: (integer_sub integer_shove integer_rot integer_inc in2 integer_min exec_do*times (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop) integer_dup exec_if (in1 boolean_yank in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean) (exec_empty) print_newline in3 exec_empty print_newline in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) exec_dup_times (integer_max print_integer -72 boolean_frominteger tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty) (integer_min) boolean_yank)) ())))
Lexicase best errors: [1 0 0 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 74
Percent parens: 0.270
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank})
Zero cases best program: (integer_sub integer_shove integer_rot integer_inc in2 integer_min exec_do*times (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop) integer_dup exec_if (in1 boolean_yank in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean) (exec_empty) print_newline in3 exec_empty print_newline in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) exec_dup_times (integer_max print_integer -72 boolean_frominteger tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty) (integer_min) boolean_yank)) ())))
Zero cases best errors: [1 0 0 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 74
Percent parens: 0.270
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 536 398 774 495 273 1000 398 496 398)
Population mean number of elite cases: 5.77
Count of perfect (error zero) individuals by case: (0 536 398 774 495 273 0 398 496 398)
Population mean number of perfect (error zero) cases: 3.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 3, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 2, :instruction integer_min} {:close 0, :instruction boolean_yank})
Best program: (integer_sub integer_shove integer_rot integer_inc in2 integer_min exec_do*times (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () () boolean_empty print_integer exec_noop) integer_dup exec_if (in1 boolean_yank in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean) (exec_empty) print_newline in3 exec_empty print_newline in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) exec_dup_times (integer_max print_integer -72 boolean_frominteger tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty) (integer_min)) boolean_yank) ()))
Errors: [1 0 0 0 0 1 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 54
Size: 74
Percent parens: 0.270
--- Population Statistics ---
Average total errors in population: 6.232
Median total errors in population: 7
Error averages by case: (1.0 0.464 0.602 0.226 0.505 0.727 1.0 0.602 0.504 0.602)
Error minima by case: (1 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 52.069
Average program size in population (points): 74.523
Average percent parens in population: 0.300
Minimum age in population: 18.03125
Maximum age in population: 21.597900390625
Average age in population: 20.46801391601562
Median age in population: 20.33203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 140
Genome diversity (% unique genomes):	 0.616
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 141
Syntactic diversity (% unique Push programs):	 0.611
Total error diversity:				 0.008
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.126
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 13925558
--- Timings ---
Current time: 1559314584191 milliseconds
Total Time:          54.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.7 seconds, 50.9%
Fitness Testing:     16.4 seconds, 30.1%
Report:              10.3 seconds, 18.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 410
Test mean error for best: 0.41000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: 33                  | Program output: 33                 
Correct output: -7                  | Program output: -7                 
Correct output: -51                 | Program output: -15                
Correct output: 38                  | Program output: 38                 
Correct output: -93                 | Program output: -73                
Correct output: -63                 | Program output: 3                  
Correct output: -5                  | Program output: -5                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 14                 
Correct output: -31                 | Program output: -31                
Correct output: 63                  | Program output: 63                 
Correct output: -55                 | Program output: -55                
Correct output: 94                  | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 6                  
Correct output: 78                  | Program output: 78                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 49                  | Program output: 93                 
Correct output: 0                   | Program output: 0                  
Correct output: 37                  | Program output: 63                 
Correct output: 41                  | Program output: 46                 
Correct output: 49                  | Program output: 49                 
Correct output: 65                  | Program output: 85                 
Correct output: 17                  | Program output: 87                 
Correct output: 11                  | Program output: 14                 
Correct output: 14                  | Program output: 14                 
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 86                 
Correct output: 2                   | Program output: 63                 
Correct output: -40                 | Program output: -40                
Correct output: -89                 | Program output: -13                
Correct output: -92                 | Program output: -46                
Correct output: -63                 | Program output: -63                
Correct output: -15                 | Program output: -15                
Correct output: -53                 | Program output: -53                
Correct output: -58                 | Program output: -58                
Correct output: -27                 | Program output: 36                 
Correct output: -41                 | Program output: 1                  
Correct output: -32                 | Program output: -32                
Correct output: -48                 | Program output: -48                
Correct output: -25                 | Program output: -25                
Correct output: -51                 | Program output: -4                 
Correct output: -71                 | Program output: -71                
Correct output: -25                 | Program output: -25                
Correct output: -94                 | Program output: -94                
Correct output: -73                 | Program output: -73                
Correct output: -48                 | Program output: -48                
Correct output: -49                 | Program output: -49                
Correct output: -67                 | Program output: -53                
Correct output: -94                 | Program output: -44                
Correct output: -92                 | Program output: -4                 
Correct output: -81                 | Program output: -81                
Correct output: -85                 | Program output: -52                
Correct output: -69                 | Program output: 0                  
Correct output: -90                 | Program output: -10                
Correct output: -94                 | Program output: -94                
Correct output: -74                 | Program output: -74                
Correct output: -61                 | Program output: -61                
Correct output: -90                 | Program output: -13                
Correct output: -70                 | Program output: -70                
Correct output: -89                 | Program output: -60                
Correct output: -80                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -15                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -41                
Correct output: -52                 | Program output: -52                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: -31                
Correct output: -42                 | Program output: 35                 
Correct output: -83                 | Program output: -42                
Correct output: -84                 | Program output: -9                 
Correct output: -29                 | Program output: -29                
Correct output: -42                 | Program output: -33                
Correct output: -3                  | Program output: -3                 
Correct output: -67                 | Program output: -67                
Correct output: -86                 | Program output: -86                
Correct output: -91                 | Program output: -91                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: -41                
Correct output: -26                 | Program output: -26                
Correct output: -12                 | Program output: -12                
Correct output: -74                 | Program output: -11                
Correct output: -89                 | Program output: -89                
Correct output: -12                 | Program output: 39                 
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank})
Lexicase best program: (exec_dup_times (integer_shove exec_y (exec_s () (integer_min exec_swap (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 boolean_yank in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean) (exec_empty) print_newline in3 exec_empty print_newline in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) exec_dup_times (integer_max print_integer -72 boolean_frominteger tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty) (integer_min) boolean_yank)) ()))) ()) ())))
Lexicase best errors: [0 0 0 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 79
Percent parens: 0.329
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank})
Zero cases best program: (exec_dup_times (integer_shove exec_y (exec_s () (integer_min exec_swap (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 boolean_yank in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean) (exec_empty) print_newline in3 exec_empty print_newline in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) exec_dup_times (integer_max print_integer -72 boolean_frominteger tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty) (integer_min) boolean_yank)) ()))) ()) ())))
Zero cases best errors: [0 0 0 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 79
Percent parens: 0.329
--- Lexicase Population Statistics ---
Count of elite individuals by case: (653 606 827 1000 826 654 1000 1000 616 655)
Population mean number of elite cases: 7.84
Count of perfect (error zero) individuals by case: (653 606 827 0 826 654 0 0 616 655)
Population mean number of perfect (error zero) cases: 4.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_rot} {:close 1, :instruction integer_inc} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 1, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_yank} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank})
Best program: (integer_sub integer_shove integer_rot integer_inc in2 integer_min exec_do*times (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop) integer_dup exec_if (in1 boolean_yank in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean) (exec_empty) print_newline in3 exec_empty print_newline in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) exec_dup_times (exec_yank print_integer -72 boolean_frominteger tag_exec_223 (integer_rot boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty) (integer_min) boolean_yank)) ())))
Errors: [0 0 0 1 0 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 54
Size: 74
Percent parens: 0.270
--- Population Statistics ---
Average total errors in population: 5.163
Median total errors in population: 3
Error averages by case: (0.347 0.394 0.173 1.0 0.174 0.346 1.0 1.0 0.384 0.345)
Error minima by case: (0 0 0 1 0 0 1 1 0 0)
Average genome size in population (length): 53.136
Average program size in population (points): 75.164
Average percent parens in population: 0.292
Minimum age in population: 20.080078125
Maximum age in population: 23.3665771484375
Average age in population: 21.87152307128906
Median age in population: 21.8759765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 171
Genome diversity (% unique genomes):	 0.648
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 175
Syntactic diversity (% unique Push programs):	 0.643
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.121
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 14900480
--- Timings ---
Current time: 1559314588020 milliseconds
Total Time:          58.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.0 seconds, 51.5%
Fitness Testing:     17.5 seconds, 29.9%
Report:              10.7 seconds, 18.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 434
Test mean error for best: 0.43400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: 33                  | Program output: 33                 
Correct output: -7                  | Program output: -7                 
Correct output: -51                 | Program output: -51                
Correct output: 38                  | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: 3                  
Correct output: -5                  | Program output: -5                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 14                 
Correct output: -31                 | Program output: -31                
Correct output: 63                  | Program output: 63                 
Correct output: -55                 | Program output: -55                
Correct output: 94                  | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 6                  
Correct output: 78                  | Program output: 78                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 49                  | Program output: 93                 
Correct output: 0                   | Program output: 0                  
Correct output: 37                  | Program output: 63                 
Correct output: 41                  | Program output: 46                 
Correct output: 49                  | Program output: 49                 
Correct output: 65                  | Program output: 85                 
Correct output: 17                  | Program output: 87                 
Correct output: 11                  | Program output: 14                 
Correct output: 14                  | Program output: 14                 
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 86                 
Correct output: 2                   | Program output: 63                 
Correct output: -40                 | Program output: -40                
Correct output: -89                 | Program output: -86                
Correct output: -92                 | Program output: -89                
Correct output: -63                 | Program output: 30                 
Correct output: -15                 | Program output: -15                
Correct output: -53                 | Program output: -31                
Correct output: -58                 | Program output: -58                
Correct output: -27                 | Program output: 36                 
Correct output: -41                 | Program output: 1                  
Correct output: -32                 | Program output: -32                
Correct output: -48                 | Program output: -41                
Correct output: -25                 | Program output: -25                
Correct output: -51                 | Program output: -51                
Correct output: -71                 | Program output: -71                
Correct output: -25                 | Program output: -25                
Correct output: -94                 | Program output: -35                
Correct output: -73                 | Program output: -73                
Correct output: -48                 | Program output: -9                 
Correct output: -49                 | Program output: -49                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -4                 
Correct output: -81                 | Program output: 87                 
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: -69                
Correct output: -90                 | Program output: -10                
Correct output: -94                 | Program output: 30                 
Correct output: -74                 | Program output: -74                
Correct output: -61                 | Program output: -61                
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: -70                
Correct output: -89                 | Program output: -89                
Correct output: -80                 | Program output: 18                 
Correct output: 0                   | Program output: 0                  
Correct output: -15                 | Program output: 2                  
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -93                
Correct output: -52                 | Program output: -52                
Correct output: -98                 | Program output: 55                 
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -72                
Correct output: -93                 | Program output: 11                 
Correct output: -42                 | Program output: 35                 
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -9                 
Correct output: -29                 | Program output: -29                
Correct output: -42                 | Program output: -42                
Correct output: -3                  | Program output: 1                  
Correct output: -67                 | Program output: -67                
Correct output: -86                 | Program output: -4                 
Correct output: -91                 | Program output: 56                 
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: 82                 
Correct output: -41                 | Program output: -3                 
Correct output: -26                 | Program output: -26                
Correct output: -12                 | Program output: 21                 
Correct output: -74                 | Program output: -74                
Correct output: -89                 | Program output: -89                
Correct output: -12                 | Program output: 39                 
Correct output: -41                 | Program output: 45                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank})
Lexicase best program: (exec_dup_times (integer_shove exec_y (exec_s () (integer_min exec_swap (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 boolean_yank in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean) (exec_empty) print_newline in3 exec_empty print_newline in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) exec_dup_times (integer_max print_integer -72 exec_y_when_autoconstructing () exec_yankdup) exec_dup_times (integer_max print_integer -72 boolean_frominteger tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty) (integer_min) boolean_yank)) ()))) ()) ())))
Lexicase best errors: [0 1 1 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 87
Percent parens: 0.322
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank})
Zero cases best program: (exec_dup_times (integer_shove exec_y (exec_s () (integer_min exec_swap (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 boolean_yank in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean) (exec_empty) print_newline in3 exec_empty print_newline in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_yankdup) exec_dup_times (integer_max print_integer -72 exec_y_when_autoconstructing () exec_yankdup) exec_dup_times (integer_max print_integer -72 boolean_frominteger tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty) (integer_min) boolean_yank)) ()))) ()) ())))
Zero cases best errors: [0 1 1 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 87
Percent parens: 0.322
--- Lexicase Population Statistics ---
Count of elite individuals by case: (206 592 603 810 1000 211 1000 208 206 601)
Population mean number of elite cases: 5.44
Count of perfect (error zero) individuals by case: (206 592 603 810 0 211 0 208 206 601)
Population mean number of perfect (error zero) cases: 3.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_yank} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank})
Best program: (exec_dup_times (integer_shove exec_y (exec_s () (integer_min exec_swap (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty integer_dup exec_if (in1 boolean_yank in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean) (exec_empty) print_newline in3 exec_empty print_newline in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_stackdepth) exec_dup_times (integer_fromboolean print_integer -72 boolean_frominteger tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty) (integer_min) boolean_yank)) ()))) ()) ())))
Errors: [0 1 1 0 1 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 51
Size: 77
Percent parens: 0.338
--- Population Statistics ---
Average total errors in population: 6.563
Median total errors in population: 6
Error averages by case: (0.794 0.408 0.397 0.19 1.0 0.789 1.0 0.792 0.794 0.399)
Error minima by case: (0 0 0 0 1 0 1 0 0 0)
Average genome size in population (length): 53.181
Average program size in population (points): 75.272
Average percent parens in population: 0.293
Minimum age in population: 21.080078125
Maximum age in population: 25.15008544921875
Average age in population: 23.34962188720703
Median age in population: 23.42864990234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 109
Genome diversity (% unique genomes):	 0.703
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 115
Syntactic diversity (% unique Push programs):	 0.697
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.112
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 15543670
--- Timings ---
Current time: 1559314591968 milliseconds
Total Time:          61.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.0 seconds, 52.0%
Fitness Testing:     18.3 seconds, 29.7%
Report:              11.2 seconds, 18.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 242
Test mean error for best: 0.24200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: 33                  | Program output: 33                 
Correct output: -7                  | Program output: -7                 
Correct output: -51                 | Program output: -51                
Correct output: 38                  | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: 3                  
Correct output: -5                  | Program output: -5                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 14                 
Correct output: -31                 | Program output: -31                
Correct output: 63                  | Program output: 63                 
Correct output: -55                 | Program output: -55                
Correct output: 94                  | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 6                  
Correct output: 78                  | Program output: 78                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 49                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: 37                  | Program output: 63                 
Correct output: 41                  | Program output: 46                 
Correct output: 49                  | Program output: 49                 
Correct output: 65                  | Program output: 65                 
Correct output: 17                  | Program output: 35                 
Correct output: 11                  | Program output: 14                 
Correct output: 14                  | Program output: 14                 
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 33                 
Correct output: 2                   | Program output: 51                 
Correct output: -40                 | Program output: -40                
Correct output: -89                 | Program output: -86                
Correct output: -92                 | Program output: -89                
Correct output: -63                 | Program output: -63                
Correct output: -15                 | Program output: -15                
Correct output: -53                 | Program output: -53                
Correct output: -58                 | Program output: -58                
Correct output: -27                 | Program output: 36                 
Correct output: -41                 | Program output: 1                  
Correct output: -32                 | Program output: -32                
Correct output: -48                 | Program output: -48                
Correct output: -25                 | Program output: -25                
Correct output: -51                 | Program output: -51                
Correct output: -71                 | Program output: -71                
Correct output: -25                 | Program output: -25                
Correct output: -94                 | Program output: -94                
Correct output: -73                 | Program output: -73                
Correct output: -48                 | Program output: -48                
Correct output: -49                 | Program output: -49                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -4                 
Correct output: -81                 | Program output: -81                
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: -69                
Correct output: -90                 | Program output: -10                
Correct output: -94                 | Program output: -94                
Correct output: -74                 | Program output: -74                
Correct output: -61                 | Program output: -61                
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: -70                
Correct output: -89                 | Program output: -89                
Correct output: -80                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -15                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -93                
Correct output: -52                 | Program output: -52                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: -31                
Correct output: -42                 | Program output: 6                  
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -9                 
Correct output: -29                 | Program output: -29                
Correct output: -42                 | Program output: -42                
Correct output: -3                  | Program output: -3                 
Correct output: -67                 | Program output: -67                
Correct output: -86                 | Program output: -86                
Correct output: -91                 | Program output: -91                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: -41                
Correct output: -26                 | Program output: -26                
Correct output: -12                 | Program output: -12                
Correct output: -74                 | Program output: -74                
Correct output: -89                 | Program output: -89                
Correct output: -12                 | Program output: 39                 
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank})
Lexicase best program: (exec_dup_times (integer_shove exec_y (exec_s () (integer_min exec_swap (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 in2 in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean) (exec_empty) print_newline in3 in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_stackdepth) exec_dup_times (integer_max print_integer -72 boolean_frominteger tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty) (integer_min) boolean_yank)) ()))) ()) ())))
Lexicase best errors: [0 0 1 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 77
Percent parens: 0.338
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank})
Zero cases best program: (exec_dup_times (integer_shove exec_y (exec_s () (integer_min exec_swap (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 in2 in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean) (exec_empty) print_newline in3 in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_stackdepth) exec_dup_times (integer_max print_integer -72 boolean_frominteger tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty) (integer_min) boolean_yank)) ()))) ()) ())))
Zero cases best errors: [0 0 1 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 77
Percent parens: 0.338
--- Lexicase Population Statistics ---
Count of elite individuals by case: (295 295 1000 1000 731 648 655 626 427 433)
Population mean number of elite cases: 6.11
Count of perfect (error zero) individuals by case: (295 295 0 0 731 648 655 626 427 433)
Population mean number of perfect (error zero) cases: 4.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank})
Best program: (exec_dup_times (integer_shove exec_y (exec_s () (integer_min exec_swap (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 in2 in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean) (exec_empty) print_newline in3 in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_stackdepth) exec_dup_times (integer_max print_integer -72 boolean_frominteger tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty) (integer_min) boolean_yank)) ()))) ()) ())))
Errors: [0 0 1 1 0 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 51
Size: 77
Percent parens: 0.338
--- Population Statistics ---
Average total errors in population: 5.89
Median total errors in population: 4
Error averages by case: (0.705 0.705 1.0 1.0 0.269 0.352 0.345 0.374 0.573 0.567)
Error minima by case: (0 0 1 1 0 0 0 0 0 0)
Average genome size in population (length): 52.327
Average program size in population (points): 76.433
Average percent parens in population: 0.315
Minimum age in population: 22.33203125
Maximum age in population: 26.6019287109375
Average age in population: 24.8216982421875
Median age in population: 24.89712524414062
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 103
Genome diversity (% unique genomes):	 0.712
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 103
Syntactic diversity (% unique Push programs):	 0.708
Total error diversity:				 0.008
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.116
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 16426240
--- Timings ---
Current time: 1559314596388 milliseconds
Total Time:          66.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        34.0 seconds, 51.5%
Fitness Testing:     19.6 seconds, 29.6%
Report:              12.4 seconds, 18.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 242
Test mean error for best: 0.24200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: 33                  | Program output: 33                 
Correct output: -7                  | Program output: -7                 
Correct output: -51                 | Program output: -51                
Correct output: 38                  | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: 3                  
Correct output: -5                  | Program output: -5                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 14                 
Correct output: -31                 | Program output: -31                
Correct output: 63                  | Program output: 63                 
Correct output: -55                 | Program output: -55                
Correct output: 94                  | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 6                  
Correct output: 78                  | Program output: 78                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 49                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: 37                  | Program output: 63                 
Correct output: 41                  | Program output: 46                 
Correct output: 49                  | Program output: 49                 
Correct output: 65                  | Program output: 65                 
Correct output: 17                  | Program output: 35                 
Correct output: 11                  | Program output: 14                 
Correct output: 14                  | Program output: 14                 
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 33                 
Correct output: 2                   | Program output: 51                 
Correct output: -40                 | Program output: -40                
Correct output: -89                 | Program output: -86                
Correct output: -92                 | Program output: -89                
Correct output: -63                 | Program output: -63                
Correct output: -15                 | Program output: -15                
Correct output: -53                 | Program output: -53                
Correct output: -58                 | Program output: -58                
Correct output: -27                 | Program output: 36                 
Correct output: -41                 | Program output: 1                  
Correct output: -32                 | Program output: -32                
Correct output: -48                 | Program output: -48                
Correct output: -25                 | Program output: -25                
Correct output: -51                 | Program output: -51                
Correct output: -71                 | Program output: -71                
Correct output: -25                 | Program output: -25                
Correct output: -94                 | Program output: -94                
Correct output: -73                 | Program output: -73                
Correct output: -48                 | Program output: -48                
Correct output: -49                 | Program output: -49                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -4                 
Correct output: -81                 | Program output: -81                
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: -69                
Correct output: -90                 | Program output: -10                
Correct output: -94                 | Program output: -94                
Correct output: -74                 | Program output: -74                
Correct output: -61                 | Program output: -61                
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: -70                
Correct output: -89                 | Program output: -89                
Correct output: -80                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -15                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -93                
Correct output: -52                 | Program output: -52                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: -31                
Correct output: -42                 | Program output: 6                  
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -9                 
Correct output: -29                 | Program output: -29                
Correct output: -42                 | Program output: -42                
Correct output: -3                  | Program output: -3                 
Correct output: -67                 | Program output: -67                
Correct output: -86                 | Program output: -86                
Correct output: -91                 | Program output: -91                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: -41                
Correct output: -26                 | Program output: -26                
Correct output: -12                 | Program output: -12                
Correct output: -74                 | Program output: -74                
Correct output: -89                 | Program output: -89                
Correct output: -12                 | Program output: 39                 
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank})
Lexicase best program: (exec_dup_times (integer_shove exec_y (exec_s () (integer_min exec_swap (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 in2 in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean) (exec_empty) print_newline in3 in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_stackdepth) exec_dup_times (integer_max print_integer -72 boolean_frominteger tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty) (integer_min) boolean_yank)) ()))) ()) ())))
Lexicase best errors: [0 0 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 77
Percent parens: 0.338
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank})
Zero cases best program: (exec_dup_times (integer_shove exec_y (exec_s () (integer_min exec_swap (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 in2 in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean) (exec_empty) print_newline in3 in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_stackdepth) exec_dup_times (integer_max print_integer -72 boolean_frominteger tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty) (integer_min) boolean_yank)) ()))) ()) ())))
Zero cases best errors: [0 0 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 77
Percent parens: 0.338
--- Lexicase Population Statistics ---
Count of elite individuals by case: (639 626 639 639 634 639 1000 634 667 638)
Population mean number of elite cases: 6.76
Count of perfect (error zero) individuals by case: (639 626 639 639 634 639 0 634 667 638)
Population mean number of perfect (error zero) cases: 5.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank})
Best program: (exec_dup_times (integer_shove exec_y (exec_s () (integer_min exec_swap (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 in2 in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean) (exec_empty) print_newline in3 in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_stackdepth) exec_dup_times (integer_max print_integer -72 boolean_frominteger tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty) (integer_min) boolean_yank)) ()))) ()) ())))
Errors: [0 0 0 0 0 0 1 0 0 0]
Total: 1
Mean: 0.1
Genome size: 51
Size: 77
Percent parens: 0.338
--- Population Statistics ---
Average total errors in population: 4.245
Median total errors in population: 1
Error averages by case: (0.361 0.374 0.361 0.361 0.366 0.361 1.0 0.366 0.333 0.362)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 50.886
Average program size in population (points): 76.835
Average percent parens in population: 0.338
Minimum age in population: 25.22256469726562
Maximum age in population: 26.22256469726562
Average age in population: 25.72156469726562
Median age in population: 25.22256469726562
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 466
Genome diversity (% unique genomes):	 0.518
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 467
Syntactic diversity (% unique Push programs):	 0.517
Total error diversity:				 0.009
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 17423060
--- Timings ---
Current time: 1559314601011 milliseconds
Total Time:          70.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        36.0 seconds, 50.9%
Fitness Testing:     21.1 seconds, 29.9%
Report:              13.5 seconds, 19.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 242
Test mean error for best: 0.24200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: 33                  | Program output: 33                 
Correct output: -7                  | Program output: -7                 
Correct output: -51                 | Program output: -51                
Correct output: 38                  | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: 3                  
Correct output: -5                  | Program output: -5                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 14                 
Correct output: -31                 | Program output: -31                
Correct output: 63                  | Program output: 63                 
Correct output: -55                 | Program output: -55                
Correct output: 94                  | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 6                  
Correct output: 78                  | Program output: 78                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 49                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: 37                  | Program output: 63                 
Correct output: 41                  | Program output: 46                 
Correct output: 49                  | Program output: 49                 
Correct output: 65                  | Program output: 65                 
Correct output: 17                  | Program output: 35                 
Correct output: 11                  | Program output: 14                 
Correct output: 14                  | Program output: 14                 
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 33                 
Correct output: 2                   | Program output: 51                 
Correct output: -40                 | Program output: -40                
Correct output: -89                 | Program output: -86                
Correct output: -92                 | Program output: -89                
Correct output: -63                 | Program output: -63                
Correct output: -15                 | Program output: -15                
Correct output: -53                 | Program output: -53                
Correct output: -58                 | Program output: -58                
Correct output: -27                 | Program output: 36                 
Correct output: -41                 | Program output: 1                  
Correct output: -32                 | Program output: -32                
Correct output: -48                 | Program output: -48                
Correct output: -25                 | Program output: -25                
Correct output: -51                 | Program output: -51                
Correct output: -71                 | Program output: -71                
Correct output: -25                 | Program output: -25                
Correct output: -94                 | Program output: -94                
Correct output: -73                 | Program output: -73                
Correct output: -48                 | Program output: -48                
Correct output: -49                 | Program output: -49                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -4                 
Correct output: -81                 | Program output: -81                
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: -69                
Correct output: -90                 | Program output: -10                
Correct output: -94                 | Program output: -94                
Correct output: -74                 | Program output: -74                
Correct output: -61                 | Program output: -61                
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: -70                
Correct output: -89                 | Program output: -89                
Correct output: -80                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -15                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -93                
Correct output: -52                 | Program output: -52                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: -31                
Correct output: -42                 | Program output: 6                  
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -9                 
Correct output: -29                 | Program output: -29                
Correct output: -42                 | Program output: -42                
Correct output: -3                  | Program output: -3                 
Correct output: -67                 | Program output: -67                
Correct output: -86                 | Program output: -86                
Correct output: -91                 | Program output: -91                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: -41                
Correct output: -26                 | Program output: -26                
Correct output: -12                 | Program output: -12                
Correct output: -74                 | Program output: -74                
Correct output: -89                 | Program output: -89                
Correct output: -12                 | Program output: 39                 
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank})
Lexicase best program: (exec_dup_times (integer_shove exec_y (exec_s () (integer_min exec_swap (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 in2 in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean) (exec_empty) print_newline in3 in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_stackdepth) exec_dup_times (integer_max print_integer -72 boolean_frominteger tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty) (integer_min) boolean_yank)) ()))) ()) ())))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 77
Percent parens: 0.338
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank})
Zero cases best program: (exec_dup_times (integer_shove exec_y (exec_s () (integer_min exec_swap (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 in2 in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean) (exec_empty) print_newline in3 in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_stackdepth) exec_dup_times (integer_max print_integer -72 boolean_frominteger tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty) (integer_min) boolean_yank)) ()))) ()) ())))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 77
Percent parens: 0.338
--- Lexicase Population Statistics ---
Count of elite individuals by case: (590 601 602 602 599 582 581 1000 608 1000)
Population mean number of elite cases: 6.76
Count of perfect (error zero) individuals by case: (590 601 602 602 599 582 581 0 608 0)
Population mean number of perfect (error zero) cases: 4.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank})
Best program: (exec_dup_times (integer_shove exec_y (exec_s () (integer_min exec_swap (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 in2 in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean) (exec_empty) print_newline in3 in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_stackdepth) exec_dup_times (integer_max print_integer -72 boolean_frominteger tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty) (integer_min) boolean_yank)) ()))) ()) ())))
Errors: [0 0 0 0 0 0 0 1 0 1]
Total: 2
Mean: 0.2
Genome size: 51
Size: 77
Percent parens: 0.338
--- Population Statistics ---
Average total errors in population: 5.235
Median total errors in population: 2
Error averages by case: (0.41 0.399 0.398 0.398 0.401 0.418 0.419 1.0 0.392 1.0)
Error minima by case: (0 0 0 0 0 0 0 1 0 1)
Average genome size in population (length): 50.923
Average program size in population (points): 76.923
Average percent parens in population: 0.338
Minimum age in population: 26.22256469726562
Maximum age in population: 28.22256469726562
Average age in population: 27.17706469726562
Median age in population: 27.22256469726562
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 311
Genome diversity (% unique genomes):	 0.655
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 311
Syntactic diversity (% unique Push programs):	 0.655
Total error diversity:				 0.009
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.099
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 18430000
--- Timings ---
Current time: 1559314605537 milliseconds
Total Time:          75.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        37.8 seconds, 50.2%
Fitness Testing:     22.7 seconds, 30.2%
Report:              14.6 seconds, 19.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 242
Test mean error for best: 0.24200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: 33                  | Program output: 33                 
Correct output: -7                  | Program output: -7                 
Correct output: -51                 | Program output: -51                
Correct output: 38                  | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: 3                  
Correct output: -5                  | Program output: -5                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 14                 
Correct output: -31                 | Program output: -31                
Correct output: 63                  | Program output: 63                 
Correct output: -55                 | Program output: -55                
Correct output: 94                  | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 6                  
Correct output: 78                  | Program output: 78                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 49                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: 37                  | Program output: 63                 
Correct output: 41                  | Program output: 46                 
Correct output: 49                  | Program output: 49                 
Correct output: 65                  | Program output: 65                 
Correct output: 17                  | Program output: 35                 
Correct output: 11                  | Program output: 14                 
Correct output: 14                  | Program output: 14                 
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 33                 
Correct output: 2                   | Program output: 51                 
Correct output: -40                 | Program output: -40                
Correct output: -89                 | Program output: -86                
Correct output: -92                 | Program output: -89                
Correct output: -63                 | Program output: -63                
Correct output: -15                 | Program output: -15                
Correct output: -53                 | Program output: -53                
Correct output: -58                 | Program output: -58                
Correct output: -27                 | Program output: 36                 
Correct output: -41                 | Program output: 1                  
Correct output: -32                 | Program output: -32                
Correct output: -48                 | Program output: -48                
Correct output: -25                 | Program output: -25                
Correct output: -51                 | Program output: -51                
Correct output: -71                 | Program output: -71                
Correct output: -25                 | Program output: -25                
Correct output: -94                 | Program output: -94                
Correct output: -73                 | Program output: -73                
Correct output: -48                 | Program output: -48                
Correct output: -49                 | Program output: -49                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -4                 
Correct output: -81                 | Program output: -81                
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: -69                
Correct output: -90                 | Program output: -10                
Correct output: -94                 | Program output: -94                
Correct output: -74                 | Program output: -74                
Correct output: -61                 | Program output: -61                
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: -70                
Correct output: -89                 | Program output: -89                
Correct output: -80                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -15                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -93                
Correct output: -52                 | Program output: -52                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: -31                
Correct output: -42                 | Program output: 6                  
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -9                 
Correct output: -29                 | Program output: -29                
Correct output: -42                 | Program output: -42                
Correct output: -3                  | Program output: -3                 
Correct output: -67                 | Program output: -67                
Correct output: -86                 | Program output: -86                
Correct output: -91                 | Program output: -91                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: -41                
Correct output: -26                 | Program output: -26                
Correct output: -12                 | Program output: -12                
Correct output: -74                 | Program output: -74                
Correct output: -89                 | Program output: -89                
Correct output: -12                 | Program output: 39                 
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank})
Lexicase best program: (exec_dup_times (integer_shove exec_y (exec_s () (integer_min exec_swap (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 in2 in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean) (exec_empty) print_newline in3 in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_stackdepth) exec_dup_times (boolean_pop print_integer -72 boolean_frominteger integer_max print_integer -72 boolean_frominteger tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty) (integer_min) boolean_yank)) ()))) ()) ())))
Lexicase best errors: [0 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 81
Percent parens: 0.321
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank})
Zero cases best program: (exec_dup_times (integer_shove exec_y (exec_s () (integer_min exec_swap (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 in2 in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean) (exec_empty) print_newline in3 in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_stackdepth) exec_dup_times (boolean_pop print_integer -72 boolean_frominteger integer_max print_integer -72 boolean_frominteger tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty) (integer_min) boolean_yank)) ()))) ()) ())))
Zero cases best errors: [0 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 81
Percent parens: 0.321
--- Lexicase Population Statistics ---
Count of elite individuals by case: (644 625 605 1000 609 609 618 625 633 618)
Population mean number of elite cases: 6.59
Count of perfect (error zero) individuals by case: (644 625 605 0 609 609 618 625 633 618)
Population mean number of perfect (error zero) cases: 5.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank})
Best program: (exec_dup_times (integer_shove exec_y (exec_s () (integer_min exec_swap (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 in2 in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean) (exec_empty) print_newline in3 in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_stackdepth) exec_dup_times (integer_max print_integer -72 boolean_frominteger tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty) (integer_min) boolean_yank)) ()))) ()) ())))
Errors: [0 0 0 1 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 51
Size: 77
Percent parens: 0.338
--- Population Statistics ---
Average total errors in population: 4.414
Median total errors in population: 1
Error averages by case: (0.356 0.375 0.395 1.0 0.391 0.391 0.382 0.375 0.367 0.382)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 51.198
Average program size in population (points): 77.388
Average percent parens in population: 0.338
Minimum age in population: 27.22256469726562
Maximum age in population: 30.22256469726562
Average age in population: 28.63306469726562
Median age in population: 28.72256469726562
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 248
Genome diversity (% unique genomes):	 0.675
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 248
Syntactic diversity (% unique Push programs):	 0.675
Total error diversity:				 0.01
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.105
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 19423429
--- Timings ---
Current time: 1559314610073 milliseconds
Total Time:          79.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        39.6 seconds, 49.7%
Fitness Testing:     24.3 seconds, 30.4%
Report:              15.8 seconds, 19.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 221
Test mean error for best: 0.22100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: 2                  
Correct output: 33                  | Program output: 33                 
Correct output: -7                  | Program output: -7                 
Correct output: -51                 | Program output: -51                
Correct output: 38                  | Program output: 38                 
Correct output: -93                 | Program output: -73                
Correct output: -63                 | Program output: -63                
Correct output: -5                  | Program output: -5                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 84                 
Correct output: -31                 | Program output: -31                
Correct output: 63                  | Program output: 63                 
Correct output: -55                 | Program output: -55                
Correct output: 94                  | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: 8                   | Program output: 43                 
Correct output: 9                   | Program output: 29                 
Correct output: 14                  | Program output: 23                 
Correct output: 6                   | Program output: 37                 
Correct output: 78                  | Program output: 85                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 49                  | Program output: 49                 
Correct output: 0                   | Program output: 0                  
Correct output: 37                  | Program output: 37                 
Correct output: 41                  | Program output: 41                 
Correct output: 49                  | Program output: 49                 
Correct output: 65                  | Program output: 65                 
Correct output: 17                  | Program output: 17                 
Correct output: 11                  | Program output: 11                 
Correct output: 14                  | Program output: 14                 
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 12                 
Correct output: 2                   | Program output: 2                  
Correct output: -40                 | Program output: -40                
Correct output: -89                 | Program output: -89                
Correct output: -92                 | Program output: -92                
Correct output: -63                 | Program output: -63                
Correct output: -15                 | Program output: 57                 
Correct output: -53                 | Program output: -53                
Correct output: -58                 | Program output: -7                 
Correct output: -27                 | Program output: -27                
Correct output: -41                 | Program output: -41                
Correct output: -32                 | Program output: 29                 
Correct output: -48                 | Program output: -48                
Correct output: -25                 | Program output: 15                 
Correct output: -51                 | Program output: -42                
Correct output: -71                 | Program output: -71                
Correct output: -25                 | Program output: 10                 
Correct output: -94                 | Program output: -94                
Correct output: -73                 | Program output: -67                
Correct output: -48                 | Program output: -48                
Correct output: -49                 | Program output: -49                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: -46                
Correct output: -92                 | Program output: -92                
Correct output: -81                 | Program output: -81                
Correct output: -85                 | Program output: -52                
Correct output: -69                 | Program output: -69                
Correct output: -90                 | Program output: -90                
Correct output: -94                 | Program output: -94                
Correct output: -74                 | Program output: -74                
Correct output: -61                 | Program output: -52                
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: -70                
Correct output: -89                 | Program output: -64                
Correct output: -80                 | Program output: -80                
Correct output: 0                   | Program output: 22                 
Correct output: -15                 | Program output: -15                
Correct output: -76                 | Program output: -57                
Correct output: -93                 | Program output: -81                
Correct output: -52                 | Program output: 21                 
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -74                
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: -93                
Correct output: -42                 | Program output: -42                
Correct output: -83                 | Program output: -42                
Correct output: -84                 | Program output: -84                
Correct output: -29                 | Program output: -29                
Correct output: -42                 | Program output: -42                
Correct output: -3                  | Program output: -3                 
Correct output: -67                 | Program output: -67                
Correct output: -86                 | Program output: -86                
Correct output: -91                 | Program output: -91                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: -41                
Correct output: -26                 | Program output: -13                
Correct output: -12                 | Program output: -12                
Correct output: -74                 | Program output: -74                
Correct output: -89                 | Program output: 54                 
Correct output: -12                 | Program output: -12                
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank})
Lexicase best program: (exec_dup_times (integer_shove exec_y (exec_s () (integer_min exec_swap (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in3 in2 in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (boolean_or print_boolean) (exec_empty) print_newline in3 in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_stackdepth) exec_dup_times (integer_max print_integer -72 boolean_frominteger tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty) (integer_min) boolean_yank)) ()))) ()) ())))
Lexicase best errors: [0 0 0 1 0 1 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 77
Percent parens: 0.338
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank})
Zero cases best program: (exec_dup_times (integer_shove exec_y (exec_s () (integer_min exec_swap (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in3 in2 in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (boolean_or print_boolean) (exec_empty) print_newline in3 in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_stackdepth) exec_dup_times (integer_max print_integer -72 boolean_frominteger tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty) (integer_min) boolean_yank)) ()))) ()) ())))
Zero cases best errors: [0 0 0 1 0 1 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 77
Percent parens: 0.338
--- Lexicase Population Statistics ---
Count of elite individuals by case: (629 629 1 632 1 632 657 1 630 629)
Population mean number of elite cases: 4.44
Count of perfect (error zero) individuals by case: (629 629 1 632 1 632 657 1 630 629)
Population mean number of perfect (error zero) cases: 4.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in3} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank})
Best program: (exec_dup_times (integer_shove exec_y (exec_s () (integer_min exec_swap (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in3 in2 in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (boolean_or print_boolean) (exec_empty) print_newline in3 in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_stackdepth) exec_dup_times (integer_max print_integer -72 boolean_frominteger tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty) (integer_min) boolean_yank)) ()))) ()) ())))
Errors: [0 0 0 1 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 51
Size: 77
Percent parens: 0.338
--- Population Statistics ---
Average total errors in population: 5.559
Median total errors in population: 3
Error averages by case: (0.371 0.371 0.999 0.368 0.999 0.368 0.343 0.999 0.37 0.371)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.183
Average program size in population (points): 77.377
Average percent parens in population: 0.338
Minimum age in population: 28.22256469726562
Maximum age in population: 31.72256469726562
Average age in population: 30.11993969726562
Median age in population: 30.22256469726562
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 207
Genome diversity (% unique genomes):	 0.682
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 207
Syntactic diversity (% unique Push programs):	 0.682
Total error diversity:				 0.009
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 20422240
--- Timings ---
Current time: 1559314614690 milliseconds
Total Time:          84.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        41.5 seconds, 49.2%
Fitness Testing:     25.8 seconds, 30.6%
Report:              16.9 seconds, 20.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 242
Test mean error for best: 0.24200
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 1
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 1
Test Case   33 | Error: 0
Test Case   34 | Error: 1
Test Case   35 | Error: 1
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 1
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 1
Test Case  466 | Error: 1
Test Case  467 | Error: 1
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 1
Test Case  713 | Error: 1
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 1
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 1
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 1
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 1
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 1
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: 33                  | Program output: 33                 
Correct output: -7                  | Program output: -7                 
Correct output: -51                 | Program output: -51                
Correct output: 38                  | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: 3                  
Correct output: -5                  | Program output: -5                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 14                 
Correct output: -31                 | Program output: -31                
Correct output: 63                  | Program output: 63                 
Correct output: -55                 | Program output: -55                
Correct output: 94                  | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 6                  
Correct output: 78                  | Program output: 78                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 49                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: 37                  | Program output: 63                 
Correct output: 41                  | Program output: 46                 
Correct output: 49                  | Program output: 49                 
Correct output: 65                  | Program output: 65                 
Correct output: 17                  | Program output: 35                 
Correct output: 11                  | Program output: 14                 
Correct output: 14                  | Program output: 14                 
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 33                 
Correct output: 2                   | Program output: 51                 
Correct output: -40                 | Program output: -40                
Correct output: -89                 | Program output: -86                
Correct output: -92                 | Program output: -89                
Correct output: -63                 | Program output: -63                
Correct output: -15                 | Program output: -15                
Correct output: -53                 | Program output: -53                
Correct output: -58                 | Program output: -58                
Correct output: -27                 | Program output: 36                 
Correct output: -41                 | Program output: 1                  
Correct output: -32                 | Program output: -32                
Correct output: -48                 | Program output: -48                
Correct output: -25                 | Program output: -25                
Correct output: -51                 | Program output: -51                
Correct output: -71                 | Program output: -71                
Correct output: -25                 | Program output: -25                
Correct output: -94                 | Program output: -94                
Correct output: -73                 | Program output: -73                
Correct output: -48                 | Program output: -48                
Correct output: -49                 | Program output: -49                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -4                 
Correct output: -81                 | Program output: -81                
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: -69                
Correct output: -90                 | Program output: -10                
Correct output: -94                 | Program output: -94                
Correct output: -74                 | Program output: -74                
Correct output: -61                 | Program output: -61                
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: -70                
Correct output: -89                 | Program output: -89                
Correct output: -80                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -15                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -93                
Correct output: -52                 | Program output: -52                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: -31                
Correct output: -42                 | Program output: 6                  
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -9                 
Correct output: -29                 | Program output: -29                
Correct output: -42                 | Program output: -42                
Correct output: -3                  | Program output: -3                 
Correct output: -67                 | Program output: -67                
Correct output: -86                 | Program output: -86                
Correct output: -91                 | Program output: -91                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: -41                
Correct output: -26                 | Program output: -26                
Correct output: -12                 | Program output: -12                
Correct output: -74                 | Program output: -74                
Correct output: -89                 | Program output: -89                
Correct output: -12                 | Program output: 39                 
Correct output: -41                 | Program output: -41                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank})
Lexicase best program: (exec_dup_times (integer_shove exec_y (exec_dup_times (integer_shove exec_y (exec_s () (integer_min exec_swap (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 in2 in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean) (exec_empty) print_newline in3 in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_stackdepth) exec_dup_times (integer_max print_integer -72 boolean_frominteger tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty) (integer_min) boolean_yank)) ()))) ()) ())))))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 82
Percent parens: 0.341
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction print_integer} {:close 0, :instruction -72} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank})
Zero cases best program: (exec_dup_times (integer_shove exec_y (exec_dup_times (integer_shove exec_y (exec_s () (integer_min exec_swap (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 in2 in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean) (exec_empty) print_newline in3 in3 integer_pop exec_y (boolean_swap exec_y_when_autoconstructing () exec_stackdepth) exec_dup_times (integer_max print_integer -72 boolean_frominteger tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty) (integer_min) boolean_yank)) ()))) ()) ())))))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 82
Percent parens: 0.341
--- Lexicase Population Statistics ---
Count of elite individuals by case: (238 629 656 634 239 239 633 629 634 643)
Population mean number of elite cases: 5.17
Count of perfect (error zero) individuals by case: (238 629 656 634 239 239 633 629 634 643)
Population mean number of perfect (error zero) cases: 5.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_y} {:close 1, :instruction exec_s} {:close 0, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 2, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_empty} {:close 0, :instruction print_integer} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_if} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_exec_551} {:close 0, :instruction exec_if} {:close 0, :instruction integer_flush} {:close 1, :instruction print_boolean} {:close 1, :instruction exec_empty} {:close 0, :instruction print_newline} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction -72} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tag_exec_223} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_gt} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_stackdepth} {:close 1, :instruction boolean_empty} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_yank})
Best program: (exec_dup_times (integer_shove exec_y (exec_s () (integer_min exec_swap (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 in2 in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean) (exec_empty) print_newline in3 in3 integer_pop exec_y (boolean_xor) exec_dup_times (integer_max boolean_stackdepth -72 boolean_frominteger tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty) (integer_min) boolean_yank)) ()))) ()) ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 49
Size: 74
Percent parens: 0.338
--- Population Statistics ---
Average total errors in population: 4.826
Median total errors in population: 3
Error averages by case: (0.762 0.371 0.344 0.366 0.761 0.761 0.367 0.371 0.366 0.357)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.159
Average program size in population (points): 77.237
Average percent parens in population: 0.337
Minimum age in population: 29.22256469726562
Maximum age in population: 33.28506469726562
Average age in population: 31.36143969726562
Median age in population: 31.47256469726562
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 292
Genome diversity (% unique genomes):	 0.621
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 292
Syntactic diversity (% unique Push programs):	 0.621
Total error diversity:				 0.009
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.12
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 21421477
--- Timings ---
Current time: 1559314619274 milliseconds
Total Time:          88.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.4 seconds, 48.8%
Fitness Testing:     27.4 seconds, 30.8%
Report:              18.0 seconds, 20.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 21
Successful program: (exec_dup_times (integer_shove exec_y (exec_s () (integer_min exec_swap (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 in2 in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean) (exec_empty) print_newline in3 in3 integer_pop exec_y (boolean_xor) exec_dup_times (integer_max boolean_stackdepth -72 boolean_frominteger tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty) (integer_min) boolean_yank)) ()))) ()) ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 74


Auto-simplifying with starting size: 74
step: 0
program: (exec_dup_times (integer_shove exec_y (exec_s () (integer_min exec_swap (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 in2 in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean) (exec_empty) print_newline in3 in3 integer_pop exec_y (boolean_xor) exec_dup_times (integer_max boolean_stackdepth -72 boolean_frominteger tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty) (integer_min) boolean_yank)) ()))) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 500
program: (exec_dup_times (integer_shove exec_y (exec_s () (integer_min exec_swap (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 in2 in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean) (exec_empty) print_newline in3 in3 integer_pop exec_y (boolean_xor) exec_dup_times (integer_max boolean_stackdepth -72 boolean_frominteger tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty) (integer_min) boolean_yank)) ()))) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 1000
program: (exec_dup_times (integer_shove exec_y (exec_s () (integer_min exec_swap (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 in2 in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean) (exec_empty) print_newline in3 in3 integer_pop exec_y (boolean_xor) exec_dup_times (integer_max boolean_stackdepth -72 boolean_frominteger tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty) (integer_min) boolean_yank)) ()))) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 1500
program: (exec_dup_times (integer_shove exec_y (exec_s () (integer_min exec_swap (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 in2 in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean) (exec_empty) print_newline in3 in3 integer_pop exec_y (boolean_xor) exec_dup_times (integer_max boolean_stackdepth -72 boolean_frominteger tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty) (integer_min) boolean_yank)) ()))) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 2000
program: (exec_dup_times (integer_shove exec_y (exec_s () (integer_min exec_swap (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 in2 in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean) (exec_empty) print_newline in3 in3 integer_pop exec_y (boolean_xor) exec_dup_times (integer_max boolean_stackdepth -72 boolean_frominteger tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty) (integer_min) boolean_yank)) ()))) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 2500
program: (exec_dup_times (integer_shove exec_y (exec_s () (integer_min exec_swap (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 in2 in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean) (exec_empty) print_newline in3 in3 integer_pop exec_y (boolean_xor) exec_dup_times (integer_max boolean_stackdepth -72 boolean_frominteger tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty) (integer_min) boolean_yank)) ()))) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 3000
program: (exec_dup_times (integer_shove exec_y (exec_s () (integer_min exec_swap (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 in2 in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean) (exec_empty) print_newline in3 in3 integer_pop exec_y (boolean_xor) exec_dup_times (integer_max boolean_stackdepth -72 boolean_frominteger tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty) (integer_min) boolean_yank)) ()))) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 3500
program: (exec_dup_times (integer_shove exec_y (exec_s () (integer_min exec_swap (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 in2 in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean) (exec_empty) print_newline in3 in3 integer_pop exec_y (boolean_xor) exec_dup_times (integer_max boolean_stackdepth -72 boolean_frominteger tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty) (integer_min) boolean_yank)) ()))) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 4000
program: (exec_dup_times (integer_shove exec_y (exec_s () (integer_min exec_swap (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 in2 in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean) (exec_empty) print_newline in3 in3 integer_pop exec_y (boolean_xor) exec_dup_times (integer_max boolean_stackdepth -72 boolean_frominteger tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty) (integer_min) boolean_yank)) ()))) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 4500
program: (exec_dup_times (integer_shove exec_y (exec_s () (integer_min exec_swap (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 in2 in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean) (exec_empty) print_newline in3 in3 integer_pop exec_y (boolean_xor) exec_dup_times (integer_max boolean_stackdepth -72 boolean_frominteger tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty) (integer_min) boolean_yank)) ()))) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

step: 5000
program: (exec_dup_times (integer_shove exec_y (exec_s () (integer_min exec_swap (print_integer exec_y_when_autoconstructing (exec_s_when_autoconstructing () () (boolean_empty print_integer exec_noop integer_dup exec_if (in1 in2 in4 boolean_flush exec_if () (boolean_dup tag_exec_551 (exec_if (integer_flush print_boolean) (exec_empty) print_newline in3 in3 integer_pop exec_y (boolean_xor) exec_dup_times (integer_max boolean_stackdepth -72 boolean_frominteger tag_exec_223 (boolean_eq boolean_shove boolean_dup_items) integer_gt boolean_flush) integer_lte integer_inc) exec_rot (integer_stackdepth) (boolean_empty) (integer_min) boolean_yank)) ()))) ()) ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 74

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 242
Test mean error for best: 0.24200
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 1
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 1
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 1
Test Case   33 | Error: 0
Test Case   34 | Error: 1
Test Case   35 | Error: 1
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 1
Test Case   49 | Error: 1
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 1
Test Case   58 | Error: 0
Test Case   59 | Error: 1
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 1
Test Case   79 | Error: 0
Test Case   80 | Error: 1
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 1
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 1
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 1
Test Case  205 | Error: 0
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 1
Test Case  213 | Error: 0
Test Case  214 | Error: 1
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 0
Test Case  222 | Error: 1
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 1
Test Case  228 | Error: 0
Test Case  229 | Error: 0
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 1
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 1
Test Case  238 | Error: 0
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 1
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 1
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 1
Test Case  268 | Error: 0
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 1
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 1
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 0
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 1
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 1
Test Case  321 | Error: 1
Test Case  322 | Error: 0
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 1
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 1
Test Case  350 | Error: 1
Test Case  351 | Error: 0
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 1
Test Case  360 | Error: 1
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 1
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 0
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 1
Test Case  380 | Error: 1
Test Case  381 | Error: 0
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 0
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 1
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 0
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 1
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 0
Test Case  427 | Error: 0
Test Case  428 | Error: 0
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 1
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 0
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 1
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 1
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 1
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 1
Test Case  466 | Error: 1
Test Case  467 | Error: 1
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 1
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 1
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 1
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 1
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 1
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 1
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 0
Test Case  538 | Error: 1
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 1
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 1
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 0
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 1
Test Case  579 | Error: 1
Test Case  580 | Error: 1
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 1
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 0
Test Case  599 | Error: 0
Test Case  600 | Error: 1
Test Case  601 | Error: 1
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 1
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 0
Test Case  614 | Error: 1
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 0
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 1
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 0
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 0
Test Case  647 | Error: 0
Test Case  648 | Error: 1
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 1
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 1
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 1
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 1
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 1
Test Case  690 | Error: 1
Test Case  691 | Error: 0
Test Case  692 | Error: 0
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 1
Test Case  712 | Error: 1
Test Case  713 | Error: 1
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 1
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 1
Test Case  730 | Error: 0
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 0
Test Case  735 | Error: 1
Test Case  736 | Error: 1
Test Case  737 | Error: 1
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 0
Test Case  751 | Error: 1
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 1
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 1
Test Case  771 | Error: 0
Test Case  772 | Error: 0
Test Case  773 | Error: 1
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 1
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 1
Test Case  787 | Error: 1
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 1
Test Case  792 | Error: 1
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 1
Test Case  797 | Error: 0
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 1
Test Case  801 | Error: 1
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 1
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 1
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 1
Test Case  834 | Error: 1
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 1
Test Case  838 | Error: 0
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 1
Test Case  869 | Error: 0
Test Case  870 | Error: 1
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 1
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 1
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 1
Test Case  888 | Error: 1
Test Case  889 | Error: 1
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 1
Test Case  899 | Error: 1
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 1
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 1
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 1
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 1
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 1
Test Case  956 | Error: 0
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 0
Test Case  961 | Error: 1
Test Case  962 | Error: 0
Test Case  963 | Error: 0
Test Case  964 | Error: 0
Test Case  965 | Error: 1
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 1
Test Case  971 | Error: 1
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 0
Test Case  986 | Error: 0
Test Case  987 | Error: 0
Test Case  988 | Error: 0
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 1
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -52                 | Program output: -52                
Correct output: 33                  | Program output: 33                 
Correct output: -7                  | Program output: -7                 
Correct output: -51                 | Program output: -51                
Correct output: 38                  | Program output: 38                 
Correct output: -93                 | Program output: -93                
Correct output: -63                 | Program output: 3                  
Correct output: -5                  | Program output: -5                 
Correct output: 0                   | Program output: 0                  
Correct output: 14                  | Program output: 14                 
Correct output: -31                 | Program output: -31                
Correct output: 63                  | Program output: 63                 
Correct output: -55                 | Program output: -55                
Correct output: 94                  | Program output: 94                 
Correct output: -83                 | Program output: -83                
Correct output: 8                   | Program output: 8                  
Correct output: 9                   | Program output: 9                  
Correct output: 14                  | Program output: 14                 
Correct output: 6                   | Program output: 6                  
Correct output: 78                  | Program output: 78                 
Correct output: 16                  | Program output: 16                 
Correct output: 7                   | Program output: 7                  
Correct output: 2                   | Program output: 2                  
Correct output: 49                  | Program output: 57                 
Correct output: 0                   | Program output: 0                  
Correct output: 37                  | Program output: 63                 
Correct output: 41                  | Program output: 46                 
Correct output: 49                  | Program output: 49                 
Correct output: 65                  | Program output: 65                 
Correct output: 17                  | Program output: 35                 
Correct output: 11                  | Program output: 14                 
Correct output: 14                  | Program output: 14                 
Correct output: 16                  | Program output: 16                 
Correct output: 12                  | Program output: 33                 
Correct output: 2                   | Program output: 51                 
Correct output: -40                 | Program output: -40                
Correct output: -89                 | Program output: -86                
Correct output: -92                 | Program output: -89                
Correct output: -63                 | Program output: -63                
Correct output: -15                 | Program output: -15                
Correct output: -53                 | Program output: -53                
Correct output: -58                 | Program output: -58                
Correct output: -27                 | Program output: 36                 
Correct output: -41                 | Program output: 1                  
Correct output: -32                 | Program output: -32                
Correct output: -48                 | Program output: -48                
Correct output: -25                 | Program output: -25                
Correct output: -51                 | Program output: -51                
Correct output: -71                 | Program output: -71                
Correct output: -25                 | Program output: -25                
Correct output: -94                 | Program output: -94                
Correct output: -73                 | Program output: -73                
Correct output: -48                 | Program output: -48                
Correct output: -49                 | Program output: -49                
Correct output: -67                 | Program output: -67                
Correct output: -94                 | Program output: -94                
Correct output: -92                 | Program output: -4                 
Correct output: -81                 | Program output: -81                
Correct output: -85                 | Program output: -85                
Correct output: -69                 | Program output: -69                
Correct output: -90                 | Program output: -10                
Correct output: -94                 | Program output: -94                
Correct output: -74                 | Program output: -74                
Correct output: -61                 | Program output: -61                
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: -70                
Correct output: -89                 | Program output: -89                
Correct output: -80                 | Program output: -80                
Correct output: 0                   | Program output: 0                  
Correct output: -15                 | Program output: -15                
Correct output: -76                 | Program output: -76                
Correct output: -93                 | Program output: -93                
Correct output: -52                 | Program output: -52                
Correct output: -98                 | Program output: -98                
Correct output: -100                | Program output: -100               
Correct output: -94                 | Program output: -94                
Correct output: -93                 | Program output: -31                
Correct output: -42                 | Program output: 6                  
Correct output: -83                 | Program output: -83                
Correct output: -84                 | Program output: -9                 
Correct output: -29                 | Program output: -29                
Correct output: -42                 | Program output: -42                
Correct output: -3                  | Program output: -3                 
Correct output: -67                 | Program output: -67                
Correct output: -86                 | Program output: -86                
Correct output: -91                 | Program output: -91                
Correct output: -100                | Program output: -100               
Correct output: -85                 | Program output: -85                
Correct output: -41                 | Program output: -41                
Correct output: -26                 | Program output: -26                
Correct output: -12                 | Program output: -12                
Correct output: -74                 | Program output: -74                
Correct output: -89                 | Program output: -89                
Correct output: -12                 | Program output: 39                 
Correct output: -41                 | Program output: -41                
;;******************************
