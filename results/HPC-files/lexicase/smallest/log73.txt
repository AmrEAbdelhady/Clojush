Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[68 68 68 -7] -7] [[74 92 74 74] 74] [[-86 -86 79 -86] -86] [[-6 57 57 57] -6] [[-88 61 -88 -88] -88] [[-49 30 -49 -49] -49] [[15 15 15 80] 15] [[69 69 69 -26] -26] [[64 64 28 64] 28] [[-43 -43 -43 -69] -69] [(-84 -84 -84 -84) -84] [(-17 -17 -17 -17) -17] [(68 68 68 68) 68] [(51 51 51 51) 51] [(82 82 82 82) 82] [(34 88 77 83) 34] [(59 75 92 4) 4] [(43 15 87 18) 15] [(22 4 43 40) 4] [(88 41 78 99) 41] [(55 99 30 22) 22] [(75 12 59 80) 12] [(37 32 74 45) 32] [(80 78 28 0) 0] [(46 44 42 11) 11] [(68 55 81 82) 55] [(28 62 55 27) 27] [(10 90 7 80) 7] [(88 29 15 43) 15] [(62 93 61 43) 43] [(99 17 72 17) 17] [(77 55 33 62) 33] [(39 8 9 20) 8] [(16 7 91 76) 7] [(9 11 73 59) 9] [(-38 -37 24 61) -38] [(-49 -77 84 -55) -77] [(25 17 1 -36) -36] [(59 1 -9 -72) -72] [(73 25 -41 -66) -66] [(-11 -53 -28 8) -53] [(18 80 -42 20) -42] [(-83 -55 -50 -39) -83] [(76 -80 88 58) -80] [(22 -4 94 -27) -27] [(64 -70 68 48) -70] [(-33 -44 -6 -81) -81] [(85 -77 38 40) -77] [(-69 48 67 -86) -86] [(34 -60 9 33) -60] [(-53 -32 -16 -2) -53] [(86 -85 -52 85) -85] [(30 85 -89 -45) -89] [(-40 65 -17 -9) -40] [(32 -29 -40 -88) -88] [(40 -58 13 -63) -63] [(-44 -56 92 51) -56] [(76 81 -9 -46) -46] [(-52 67 -18 -16) -52] [(-43 86 77 -64) -64] [(-72 6 -49 36) -72] [(30 31 -100 51) -100] [(97 76 79 -75) -75] [(-48 -14 27 21) -48] [(93 -85 27 34) -85] [(-73 -6 78 64) -73] [(84 47 22 59) 22] [(-31 -44 51 -99) -99] [(27 40 71 83) 27] [(-2 56 75 21) -2] [(25 84 -33 5) -33] [(0 -62 20 0) -62] [(-41 40 -76 47) -76] [(14 9 76 -71) -71] [(-47 -36 29 95) -47] [(-90 -25 90 -32) -90] [(37 -74 -64 -41) -74] [(-8 -10 -77 -78) -78] [(87 45 2 -79) -79] [(79 -27 11 23) -27] [(90 -37 55 -22) -37] [(-24 -100 -60 11) -100] [(-48 -68 -49 56) -68] [(37 95 24 -10) -10] [(-66 -99 -29 -28) -99] [(-47 -52 -49 40) -52] [(-71 -25 -11 -27) -71] [(-17 90 80 13) -17] [(-50 -68 98 -94) -94] [(35 -12 -98 -45) -98] [(19 99 -32 31) -32] [(-60 80 -44 -62) -62] [(87 -59 89 66) -59] [(-35 -98 91 -35) -98] [(-40 76 80 26) -40])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[68 68 68 -7] -7]
Train Case:   6 | Input/Output: [[74 92 74 74] 74]
Train Case:   7 | Input/Output: [[-86 -86 79 -86] -86]
Train Case:   8 | Input/Output: [[-6 57 57 57] -6]
Train Case:   9 | Input/Output: [[-88 61 -88 -88] -88]
Train Case:  10 | Input/Output: [[-49 30 -49 -49] -49]
Train Case:  11 | Input/Output: [[15 15 15 80] 15]
Train Case:  12 | Input/Output: [[69 69 69 -26] -26]
Train Case:  13 | Input/Output: [[64 64 28 64] 28]
Train Case:  14 | Input/Output: [[-43 -43 -43 -69] -69]
Train Case:  15 | Input/Output: [(-84 -84 -84 -84) -84]
Train Case:  16 | Input/Output: [(-17 -17 -17 -17) -17]
Train Case:  17 | Input/Output: [(68 68 68 68) 68]
Train Case:  18 | Input/Output: [(51 51 51 51) 51]
Train Case:  19 | Input/Output: [(82 82 82 82) 82]
Train Case:  20 | Input/Output: [(34 88 77 83) 34]
Train Case:  21 | Input/Output: [(59 75 92 4) 4]
Train Case:  22 | Input/Output: [(43 15 87 18) 15]
Train Case:  23 | Input/Output: [(22 4 43 40) 4]
Train Case:  24 | Input/Output: [(88 41 78 99) 41]
Train Case:  25 | Input/Output: [(55 99 30 22) 22]
Train Case:  26 | Input/Output: [(75 12 59 80) 12]
Train Case:  27 | Input/Output: [(37 32 74 45) 32]
Train Case:  28 | Input/Output: [(80 78 28 0) 0]
Train Case:  29 | Input/Output: [(46 44 42 11) 11]
Train Case:  30 | Input/Output: [(68 55 81 82) 55]
Train Case:  31 | Input/Output: [(28 62 55 27) 27]
Train Case:  32 | Input/Output: [(10 90 7 80) 7]
Train Case:  33 | Input/Output: [(88 29 15 43) 15]
Train Case:  34 | Input/Output: [(62 93 61 43) 43]
Train Case:  35 | Input/Output: [(99 17 72 17) 17]
Train Case:  36 | Input/Output: [(77 55 33 62) 33]
Train Case:  37 | Input/Output: [(39 8 9 20) 8]
Train Case:  38 | Input/Output: [(16 7 91 76) 7]
Train Case:  39 | Input/Output: [(9 11 73 59) 9]
Train Case:  40 | Input/Output: [(-38 -37 24 61) -38]
Train Case:  41 | Input/Output: [(-49 -77 84 -55) -77]
Train Case:  42 | Input/Output: [(25 17 1 -36) -36]
Train Case:  43 | Input/Output: [(59 1 -9 -72) -72]
Train Case:  44 | Input/Output: [(73 25 -41 -66) -66]
Train Case:  45 | Input/Output: [(-11 -53 -28 8) -53]
Train Case:  46 | Input/Output: [(18 80 -42 20) -42]
Train Case:  47 | Input/Output: [(-83 -55 -50 -39) -83]
Train Case:  48 | Input/Output: [(76 -80 88 58) -80]
Train Case:  49 | Input/Output: [(22 -4 94 -27) -27]
Train Case:  50 | Input/Output: [(64 -70 68 48) -70]
Train Case:  51 | Input/Output: [(-33 -44 -6 -81) -81]
Train Case:  52 | Input/Output: [(85 -77 38 40) -77]
Train Case:  53 | Input/Output: [(-69 48 67 -86) -86]
Train Case:  54 | Input/Output: [(34 -60 9 33) -60]
Train Case:  55 | Input/Output: [(-53 -32 -16 -2) -53]
Train Case:  56 | Input/Output: [(86 -85 -52 85) -85]
Train Case:  57 | Input/Output: [(30 85 -89 -45) -89]
Train Case:  58 | Input/Output: [(-40 65 -17 -9) -40]
Train Case:  59 | Input/Output: [(32 -29 -40 -88) -88]
Train Case:  60 | Input/Output: [(40 -58 13 -63) -63]
Train Case:  61 | Input/Output: [(-44 -56 92 51) -56]
Train Case:  62 | Input/Output: [(76 81 -9 -46) -46]
Train Case:  63 | Input/Output: [(-52 67 -18 -16) -52]
Train Case:  64 | Input/Output: [(-43 86 77 -64) -64]
Train Case:  65 | Input/Output: [(-72 6 -49 36) -72]
Train Case:  66 | Input/Output: [(30 31 -100 51) -100]
Train Case:  67 | Input/Output: [(97 76 79 -75) -75]
Train Case:  68 | Input/Output: [(-48 -14 27 21) -48]
Train Case:  69 | Input/Output: [(93 -85 27 34) -85]
Train Case:  70 | Input/Output: [(-73 -6 78 64) -73]
Train Case:  71 | Input/Output: [(84 47 22 59) 22]
Train Case:  72 | Input/Output: [(-31 -44 51 -99) -99]
Train Case:  73 | Input/Output: [(27 40 71 83) 27]
Train Case:  74 | Input/Output: [(-2 56 75 21) -2]
Train Case:  75 | Input/Output: [(25 84 -33 5) -33]
Train Case:  76 | Input/Output: [(0 -62 20 0) -62]
Train Case:  77 | Input/Output: [(-41 40 -76 47) -76]
Train Case:  78 | Input/Output: [(14 9 76 -71) -71]
Train Case:  79 | Input/Output: [(-47 -36 29 95) -47]
Train Case:  80 | Input/Output: [(-90 -25 90 -32) -90]
Train Case:  81 | Input/Output: [(37 -74 -64 -41) -74]
Train Case:  82 | Input/Output: [(-8 -10 -77 -78) -78]
Train Case:  83 | Input/Output: [(87 45 2 -79) -79]
Train Case:  84 | Input/Output: [(79 -27 11 23) -27]
Train Case:  85 | Input/Output: [(90 -37 55 -22) -37]
Train Case:  86 | Input/Output: [(-24 -100 -60 11) -100]
Train Case:  87 | Input/Output: [(-48 -68 -49 56) -68]
Train Case:  88 | Input/Output: [(37 95 24 -10) -10]
Train Case:  89 | Input/Output: [(-66 -99 -29 -28) -99]
Train Case:  90 | Input/Output: [(-47 -52 -49 40) -52]
Train Case:  91 | Input/Output: [(-71 -25 -11 -27) -71]
Train Case:  92 | Input/Output: [(-17 90 80 13) -17]
Train Case:  93 | Input/Output: [(-50 -68 98 -94) -94]
Train Case:  94 | Input/Output: [(35 -12 -98 -45) -98]
Train Case:  95 | Input/Output: [(19 99 -32 31) -32]
Train Case:  96 | Input/Output: [(-60 80 -44 -62) -62]
Train Case:  97 | Input/Output: [(87 -59 89 66) -59]
Train Case:  98 | Input/Output: [(-35 -98 91 -35) -98]
Train Case:  99 | Input/Output: [(-40 76 80 26) -40]
Test Case:   0 | Input/Output: [[61 61 61 -79] -79]
Test Case:   1 | Input/Output: [[55 -58 -58 -58] -58]
Test Case:   2 | Input/Output: [[72 -38 72 72] -38]
Test Case:   3 | Input/Output: [[75 0 75 75] 0]
Test Case:   4 | Input/Output: [[10 10 59 10] 10]
Test Case:   5 | Input/Output: [[89 -12 89 89] -12]
Test Case:   6 | Input/Output: [[31 10 31 31] 10]
Test Case:   7 | Input/Output: [[-54 -48 -54 -54] -54]
Test Case:   8 | Input/Output: [[-58 -94 -94 -94] -94]
Test Case:   9 | Input/Output: [[-6 -87 -87 -87] -87]
Test Case:  10 | Input/Output: [[-40 -40 45 -40] -40]
Test Case:  11 | Input/Output: [[9 9 9 -8] -8]
Test Case:  12 | Input/Output: [[-3 -3 -3 -84] -84]
Test Case:  13 | Input/Output: [[66 21 66 66] 21]
Test Case:  14 | Input/Output: [[-12 69 -12 -12] -12]
Test Case:  15 | Input/Output: [[74 74 -69 74] -69]
Test Case:  16 | Input/Output: [[-79 36 36 36] -79]
Test Case:  17 | Input/Output: [[32 32 32 -52] -52]
Test Case:  18 | Input/Output: [[85 85 -14 85] -14]
Test Case:  19 | Input/Output: [[69 69 61 69] 61]
Test Case:  20 | Input/Output: [[-30 88 88 88] -30]
Test Case:  21 | Input/Output: [[15 15 15 97] 15]
Test Case:  22 | Input/Output: [[-54 -59 -54 -54] -59]
Test Case:  23 | Input/Output: [[-82 -82 -82 -59] -82]
Test Case:  24 | Input/Output: [[-98 -98 -9 -98] -98]
Test Case:  25 | Input/Output: [[-37 -16 -16 -16] -37]
Test Case:  26 | Input/Output: [[-8 -8 -68 -8] -68]
Test Case:  27 | Input/Output: [[-82 -91 -82 -82] -91]
Test Case:  28 | Input/Output: [[-18 -18 62 -18] -18]
Test Case:  29 | Input/Output: [[-72 -72 -72 77] -72]
Test Case:  30 | Input/Output: [[-57 70 -57 -57] -57]
Test Case:  31 | Input/Output: [[-95 -95 -95 -66] -95]
Test Case:  32 | Input/Output: [[45 45 -39 45] -39]
Test Case:  33 | Input/Output: [[-77 46 46 46] -77]
Test Case:  34 | Input/Output: [[15 13 15 15] 13]
Test Case:  35 | Input/Output: [[56 56 56 9] 9]
Test Case:  36 | Input/Output: [[-86 -86 -86 44] -86]
Test Case:  37 | Input/Output: [[50 -55 50 50] -55]
Test Case:  38 | Input/Output: [[-23 -23 -23 53] -23]
Test Case:  39 | Input/Output: [[-25 -96 -96 -96] -96]
Test Case:  40 | Input/Output: [[96 96 96 37] 37]
Test Case:  41 | Input/Output: [[-80 -80 37 -80] -80]
Test Case:  42 | Input/Output: [[-21 -64 -64 -64] -64]
Test Case:  43 | Input/Output: [[86 86 83 86] 83]
Test Case:  44 | Input/Output: [[-89 -60 -60 -60] -89]
Test Case:  45 | Input/Output: [[-99 -61 -61 -61] -99]
Test Case:  46 | Input/Output: [[-23 -23 84 -23] -23]
Test Case:  47 | Input/Output: [[-51 -51 -51 -66] -66]
Test Case:  48 | Input/Output: [[-66 -66 -85 -66] -85]
Test Case:  49 | Input/Output: [[-93 -77 -93 -93] -93]
Test Case:  50 | Input/Output: [[60 60 60 -57] -57]
Test Case:  51 | Input/Output: [[69 79 69 69] 69]
Test Case:  52 | Input/Output: [[43 -80 43 43] -80]
Test Case:  53 | Input/Output: [[57 57 -22 57] -22]
Test Case:  54 | Input/Output: [[24 24 52 24] 24]
Test Case:  55 | Input/Output: [[-62 -39 -39 -39] -62]
Test Case:  56 | Input/Output: [[-33 -33 -33 -37] -37]
Test Case:  57 | Input/Output: [[-79 16 16 16] -79]
Test Case:  58 | Input/Output: [[-87 -87 28 -87] -87]
Test Case:  59 | Input/Output: [[47 20 20 20] 20]
Test Case:  60 | Input/Output: [[63 -63 63 63] -63]
Test Case:  61 | Input/Output: [[53 53 71 53] 53]
Test Case:  62 | Input/Output: [[80 80 43 80] 43]
Test Case:  63 | Input/Output: [[-47 -12 -47 -47] -47]
Test Case:  64 | Input/Output: [[-3 -3 76 -3] -3]
Test Case:  65 | Input/Output: [[73 53 53 53] 53]
Test Case:  66 | Input/Output: [[-10 -77 -77 -77] -77]
Test Case:  67 | Input/Output: [[68 68 30 68] 30]
Test Case:  68 | Input/Output: [[90 90 90 32] 32]
Test Case:  69 | Input/Output: [[-49 -49 43 -49] -49]
Test Case:  70 | Input/Output: [[43 13 43 43] 13]
Test Case:  71 | Input/Output: [[-23 -29 -29 -29] -29]
Test Case:  72 | Input/Output: [[-15 41 41 41] -15]
Test Case:  73 | Input/Output: [[42 80 42 42] 42]
Test Case:  74 | Input/Output: [[-42 -72 -72 -72] -72]
Test Case:  75 | Input/Output: [[-62 -62 -77 -62] -77]
Test Case:  76 | Input/Output: [[3 3 44 3] 3]
Test Case:  77 | Input/Output: [[-52 -52 -52 21] -52]
Test Case:  78 | Input/Output: [[-13 -13 -13 99] -13]
Test Case:  79 | Input/Output: [[47 47 47 35] 35]
Test Case:  80 | Input/Output: [[88 88 -53 88] -53]
Test Case:  81 | Input/Output: [[38 60 60 60] 38]
Test Case:  82 | Input/Output: [[96 -59 -59 -59] -59]
Test Case:  83 | Input/Output: [[67 100 100 100] 67]
Test Case:  84 | Input/Output: [[96 27 96 96] 27]
Test Case:  85 | Input/Output: [[-60 -46 -60 -60] -60]
Test Case:  86 | Input/Output: [[82 82 10 82] 10]
Test Case:  87 | Input/Output: [[11 -16 11 11] -16]
Test Case:  88 | Input/Output: [[-9 -9 -9 -18] -18]
Test Case:  89 | Input/Output: [[72 72 -93 72] -93]
Test Case:  90 | Input/Output: [[38 -78 38 38] -78]
Test Case:  91 | Input/Output: [[-41 -57 -41 -41] -57]
Test Case:  92 | Input/Output: [[53 82 82 82] 53]
Test Case:  93 | Input/Output: [[8 8 8 79] 8]
Test Case:  94 | Input/Output: [[23 70 23 23] 23]
Test Case:  95 | Input/Output: [[-64 14 -64 -64] -64]
Test Case:  96 | Input/Output: [[20 20 -62 20] -62]
Test Case:  97 | Input/Output: [[78 78 -22 78] -22]
Test Case:  98 | Input/Output: [[-98 -98 -98 -45] -98]
Test Case:  99 | Input/Output: [[75 -52 -52 -52] -52]
Test Case: 100 | Input/Output: [(51 51 51 51) 51]
Test Case: 101 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 102 | Input/Output: [(6 6 6 6) 6]
Test Case: 103 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 104 | Input/Output: [(92 92 92 92) 92]
Test Case: 105 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 106 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 107 | Input/Output: [(87 87 87 87) 87]
Test Case: 108 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 109 | Input/Output: [(37 37 37 37) 37]
Test Case: 110 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 111 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 112 | Input/Output: [(-27 -27 -27 -27) -27]
Test Case: 113 | Input/Output: [(-89 -89 -89 -89) -89]
Test Case: 114 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 115 | Input/Output: [(-28 -28 -28 -28) -28]
Test Case: 116 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 117 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 118 | Input/Output: [(-21 -21 -21 -21) -21]
Test Case: 119 | Input/Output: [(91 91 91 91) 91]
Test Case: 120 | Input/Output: [(98 98 98 98) 98]
Test Case: 121 | Input/Output: [(43 43 43 43) 43]
Test Case: 122 | Input/Output: [(96 96 96 96) 96]
Test Case: 123 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 124 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 125 | Input/Output: [(19 19 19 19) 19]
Test Case: 126 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 127 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 128 | Input/Output: [(36 36 36 36) 36]
Test Case: 129 | Input/Output: [(23 23 23 23) 23]
Test Case: 130 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 131 | Input/Output: [(82 82 82 82) 82]
Test Case: 132 | Input/Output: [(-94 -94 -94 -94) -94]
Test Case: 133 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 134 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 135 | Input/Output: [(45 45 45 45) 45]
Test Case: 136 | Input/Output: [(68 68 68 68) 68]
Test Case: 137 | Input/Output: [(-91 -91 -91 -91) -91]
Test Case: 138 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 139 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 140 | Input/Output: [(52 52 52 52) 52]
Test Case: 141 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 142 | Input/Output: [(-31 -31 -31 -31) -31]
Test Case: 143 | Input/Output: [(50 50 50 50) 50]
Test Case: 144 | Input/Output: [(19 19 19 19) 19]
Test Case: 145 | Input/Output: [(59 59 59 59) 59]
Test Case: 146 | Input/Output: [(91 91 91 91) 91]
Test Case: 147 | Input/Output: [(-35 -35 -35 -35) -35]
Test Case: 148 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 149 | Input/Output: [(-68 -68 -68 -68) -68]
Test Case: 150 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 151 | Input/Output: [(31 31 31 31) 31]
Test Case: 152 | Input/Output: [(-93 -93 -93 -93) -93]
Test Case: 153 | Input/Output: [(70 70 70 70) 70]
Test Case: 154 | Input/Output: [(18 18 18 18) 18]
Test Case: 155 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 156 | Input/Output: [(36 36 36 36) 36]
Test Case: 157 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 158 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 159 | Input/Output: [(-77 -77 -77 -77) -77]
Test Case: 160 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 161 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 162 | Input/Output: [(72 72 72 72) 72]
Test Case: 163 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 164 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 165 | Input/Output: [(100 100 100 100) 100]
Test Case: 166 | Input/Output: [(99 99 99 99) 99]
Test Case: 167 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 168 | Input/Output: [(75 75 75 75) 75]
Test Case: 169 | Input/Output: [(85 85 85 85) 85]
Test Case: 170 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 171 | Input/Output: [(-90 -90 -90 -90) -90]
Test Case: 172 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 173 | Input/Output: [(79 79 79 79) 79]
Test Case: 174 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 175 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 176 | Input/Output: [(83 83 83 83) 83]
Test Case: 177 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 178 | Input/Output: [(-4 -4 -4 -4) -4]
Test Case: 179 | Input/Output: [(49 49 49 49) 49]
Test Case: 180 | Input/Output: [(12 12 12 12) 12]
Test Case: 181 | Input/Output: [(77 77 77 77) 77]
Test Case: 182 | Input/Output: [(40 40 40 40) 40]
Test Case: 183 | Input/Output: [(21 21 21 21) 21]
Test Case: 184 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 185 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 186 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 187 | Input/Output: [(14 14 14 14) 14]
Test Case: 188 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 189 | Input/Output: [(5 5 5 5) 5]
Test Case: 190 | Input/Output: [(74 74 74 74) 74]
Test Case: 191 | Input/Output: [(83 83 83 83) 83]
Test Case: 192 | Input/Output: [(4 4 4 4) 4]
Test Case: 193 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 194 | Input/Output: [(11 11 11 11) 11]
Test Case: 195 | Input/Output: [(89 89 89 89) 89]
Test Case: 196 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 197 | Input/Output: [(10 10 10 10) 10]
Test Case: 198 | Input/Output: [(6 6 6 6) 6]
Test Case: 199 | Input/Output: [(9 9 9 9) 9]
Test Case: 200 | Input/Output: [(45 30 84 32) 30]
Test Case: 201 | Input/Output: [(82 65 20 37) 20]
Test Case: 202 | Input/Output: [(89 40 65 33) 33]
Test Case: 203 | Input/Output: [(7 85 39 67) 7]
Test Case: 204 | Input/Output: [(59 83 35 47) 35]
Test Case: 205 | Input/Output: [(35 32 90 50) 32]
Test Case: 206 | Input/Output: [(81 11 42 45) 11]
Test Case: 207 | Input/Output: [(28 4 40 1) 1]
Test Case: 208 | Input/Output: [(16 23 85 12) 12]
Test Case: 209 | Input/Output: [(34 31 53 79) 31]
Test Case: 210 | Input/Output: [(34 79 100 52) 34]
Test Case: 211 | Input/Output: [(4 39 66 57) 4]
Test Case: 212 | Input/Output: [(56 28 4 45) 4]
Test Case: 213 | Input/Output: [(49 54 13 45) 13]
Test Case: 214 | Input/Output: [(73 75 38 60) 38]
Test Case: 215 | Input/Output: [(70 75 48 39) 39]
Test Case: 216 | Input/Output: [(60 24 8 74) 8]
Test Case: 217 | Input/Output: [(93 14 70 35) 14]
Test Case: 218 | Input/Output: [(12 15 79 58) 12]
Test Case: 219 | Input/Output: [(80 54 80 0) 0]
Test Case: 220 | Input/Output: [(7 77 33 86) 7]
Test Case: 221 | Input/Output: [(88 26 27 23) 23]
Test Case: 222 | Input/Output: [(60 17 48 28) 17]
Test Case: 223 | Input/Output: [(24 17 74 94) 17]
Test Case: 224 | Input/Output: [(33 99 56 12) 12]
Test Case: 225 | Input/Output: [(9 12 35 35) 9]
Test Case: 226 | Input/Output: [(91 67 91 98) 67]
Test Case: 227 | Input/Output: [(29 11 36 71) 11]
Test Case: 228 | Input/Output: [(82 74 86 25) 25]
Test Case: 229 | Input/Output: [(7 5 27 80) 5]
Test Case: 230 | Input/Output: [(61 74 84 71) 61]
Test Case: 231 | Input/Output: [(89 94 94 44) 44]
Test Case: 232 | Input/Output: [(70 51 38 100) 38]
Test Case: 233 | Input/Output: [(97 60 48 40) 40]
Test Case: 234 | Input/Output: [(8 59 58 45) 8]
Test Case: 235 | Input/Output: [(88 3 38 96) 3]
Test Case: 236 | Input/Output: [(66 18 42 89) 18]
Test Case: 237 | Input/Output: [(21 81 56 21) 21]
Test Case: 238 | Input/Output: [(65 29 62 11) 11]
Test Case: 239 | Input/Output: [(73 18 87 14) 14]
Test Case: 240 | Input/Output: [(16 34 69 97) 16]
Test Case: 241 | Input/Output: [(92 53 31 14) 14]
Test Case: 242 | Input/Output: [(21 92 91 74) 21]
Test Case: 243 | Input/Output: [(50 31 41 68) 31]
Test Case: 244 | Input/Output: [(10 27 38 59) 10]
Test Case: 245 | Input/Output: [(76 97 27 42) 27]
Test Case: 246 | Input/Output: [(31 10 20 67) 10]
Test Case: 247 | Input/Output: [(6 23 21 23) 6]
Test Case: 248 | Input/Output: [(84 11 39 37) 11]
Test Case: 249 | Input/Output: [(12 0 49 54) 0]
Test Case: 250 | Input/Output: [(86 71 22 84) 22]
Test Case: 251 | Input/Output: [(45 37 13 32) 13]
Test Case: 252 | Input/Output: [(52 78 74 7) 7]
Test Case: 253 | Input/Output: [(86 60 38 97) 38]
Test Case: 254 | Input/Output: [(60 55 57 86) 55]
Test Case: 255 | Input/Output: [(5 75 10 32) 5]
Test Case: 256 | Input/Output: [(19 97 16 19) 16]
Test Case: 257 | Input/Output: [(89 7 41 70) 7]
Test Case: 258 | Input/Output: [(44 10 89 90) 10]
Test Case: 259 | Input/Output: [(6 6 96 28) 6]
Test Case: 260 | Input/Output: [(54 86 89 30) 30]
Test Case: 261 | Input/Output: [(62 92 71 56) 56]
Test Case: 262 | Input/Output: [(79 82 55 51) 51]
Test Case: 263 | Input/Output: [(18 69 93 57) 18]
Test Case: 264 | Input/Output: [(3 5 74 69) 3]
Test Case: 265 | Input/Output: [(18 45 27 58) 18]
Test Case: 266 | Input/Output: [(65 90 100 26) 26]
Test Case: 267 | Input/Output: [(61 74 59 40) 40]
Test Case: 268 | Input/Output: [(93 73 100 31) 31]
Test Case: 269 | Input/Output: [(67 66 52 28) 28]
Test Case: 270 | Input/Output: [(51 55 4 10) 4]
Test Case: 271 | Input/Output: [(6 51 22 10) 6]
Test Case: 272 | Input/Output: [(43 57 82 32) 32]
Test Case: 273 | Input/Output: [(42 50 32 45) 32]
Test Case: 274 | Input/Output: [(12 19 92 6) 6]
Test Case: 275 | Input/Output: [(26 25 94 41) 25]
Test Case: 276 | Input/Output: [(35 3 96 80) 3]
Test Case: 277 | Input/Output: [(65 69 96 9) 9]
Test Case: 278 | Input/Output: [(16 11 0 42) 0]
Test Case: 279 | Input/Output: [(85 47 2 50) 2]
Test Case: 280 | Input/Output: [(60 3 9 10) 3]
Test Case: 281 | Input/Output: [(58 36 3 57) 3]
Test Case: 282 | Input/Output: [(26 35 1 11) 1]
Test Case: 283 | Input/Output: [(46 99 34 50) 34]
Test Case: 284 | Input/Output: [(80 60 73 23) 23]
Test Case: 285 | Input/Output: [(90 27 71 17) 17]
Test Case: 286 | Input/Output: [(95 84 83 22) 22]
Test Case: 287 | Input/Output: [(18 53 50 60) 18]
Test Case: 288 | Input/Output: [(78 90 62 41) 41]
Test Case: 289 | Input/Output: [(5 16 18 17) 5]
Test Case: 290 | Input/Output: [(75 8 62 73) 8]
Test Case: 291 | Input/Output: [(62 22 46 24) 22]
Test Case: 292 | Input/Output: [(8 95 99 4) 4]
Test Case: 293 | Input/Output: [(15 20 11 75) 11]
Test Case: 294 | Input/Output: [(5 48 71 6) 5]
Test Case: 295 | Input/Output: [(51 67 47 36) 36]
Test Case: 296 | Input/Output: [(66 94 32 36) 32]
Test Case: 297 | Input/Output: [(15 6 96 49) 6]
Test Case: 298 | Input/Output: [(6 12 100 9) 6]
Test Case: 299 | Input/Output: [(62 58 98 88) 58]
Test Case: 300 | Input/Output: [(51 51 65 93) 51]
Test Case: 301 | Input/Output: [(3 71 51 37) 3]
Test Case: 302 | Input/Output: [(74 91 47 12) 12]
Test Case: 303 | Input/Output: [(42 56 43 81) 42]
Test Case: 304 | Input/Output: [(100 8 68 73) 8]
Test Case: 305 | Input/Output: [(92 52 31 100) 31]
Test Case: 306 | Input/Output: [(72 92 6 89) 6]
Test Case: 307 | Input/Output: [(73 56 70 1) 1]
Test Case: 308 | Input/Output: [(49 25 100 71) 25]
Test Case: 309 | Input/Output: [(99 100 33 81) 33]
Test Case: 310 | Input/Output: [(77 64 91 6) 6]
Test Case: 311 | Input/Output: [(7 72 8 34) 7]
Test Case: 312 | Input/Output: [(1 57 55 95) 1]
Test Case: 313 | Input/Output: [(70 61 85 44) 44]
Test Case: 314 | Input/Output: [(100 6 65 88) 6]
Test Case: 315 | Input/Output: [(71 85 38 73) 38]
Test Case: 316 | Input/Output: [(60 69 94 66) 60]
Test Case: 317 | Input/Output: [(34 91 4 64) 4]
Test Case: 318 | Input/Output: [(95 72 53 21) 21]
Test Case: 319 | Input/Output: [(34 46 86 46) 34]
Test Case: 320 | Input/Output: [(53 98 35 78) 35]
Test Case: 321 | Input/Output: [(23 77 95 58) 23]
Test Case: 322 | Input/Output: [(63 88 97 42) 42]
Test Case: 323 | Input/Output: [(49 91 14 98) 14]
Test Case: 324 | Input/Output: [(68 2 77 81) 2]
Test Case: 325 | Input/Output: [(8 56 86 62) 8]
Test Case: 326 | Input/Output: [(2 46 88 93) 2]
Test Case: 327 | Input/Output: [(6 76 85 63) 6]
Test Case: 328 | Input/Output: [(41 75 16 32) 16]
Test Case: 329 | Input/Output: [(27 41 61 75) 27]
Test Case: 330 | Input/Output: [(4 56 0 14) 0]
Test Case: 331 | Input/Output: [(18 56 18 46) 18]
Test Case: 332 | Input/Output: [(91 90 9 69) 9]
Test Case: 333 | Input/Output: [(61 14 60 49) 14]
Test Case: 334 | Input/Output: [(17 58 81 3) 3]
Test Case: 335 | Input/Output: [(72 46 33 43) 33]
Test Case: 336 | Input/Output: [(42 89 57 89) 42]
Test Case: 337 | Input/Output: [(100 99 18 21) 18]
Test Case: 338 | Input/Output: [(44 31 78 8) 8]
Test Case: 339 | Input/Output: [(28 79 96 15) 15]
Test Case: 340 | Input/Output: [(64 17 63 95) 17]
Test Case: 341 | Input/Output: [(30 83 50 94) 30]
Test Case: 342 | Input/Output: [(55 44 30 10) 10]
Test Case: 343 | Input/Output: [(52 76 32 79) 32]
Test Case: 344 | Input/Output: [(89 33 50 56) 33]
Test Case: 345 | Input/Output: [(32 59 90 15) 15]
Test Case: 346 | Input/Output: [(36 72 58 49) 36]
Test Case: 347 | Input/Output: [(5 78 84 39) 5]
Test Case: 348 | Input/Output: [(89 41 37 100) 37]
Test Case: 349 | Input/Output: [(100 32 18 18) 18]
Test Case: 350 | Input/Output: [(54 13 33 76) 13]
Test Case: 351 | Input/Output: [(58 74 96 23) 23]
Test Case: 352 | Input/Output: [(83 64 6 85) 6]
Test Case: 353 | Input/Output: [(69 3 80 33) 3]
Test Case: 354 | Input/Output: [(47 6 83 74) 6]
Test Case: 355 | Input/Output: [(96 82 100 24) 24]
Test Case: 356 | Input/Output: [(16 9 97 34) 9]
Test Case: 357 | Input/Output: [(13 10 45 47) 10]
Test Case: 358 | Input/Output: [(83 71 57 86) 57]
Test Case: 359 | Input/Output: [(12 59 51 33) 12]
Test Case: 360 | Input/Output: [(100 85 70 86) 70]
Test Case: 361 | Input/Output: [(32 57 46 39) 32]
Test Case: 362 | Input/Output: [(11 59 98 8) 8]
Test Case: 363 | Input/Output: [(52 38 56 12) 12]
Test Case: 364 | Input/Output: [(22 80 40 76) 22]
Test Case: 365 | Input/Output: [(42 15 43 90) 15]
Test Case: 366 | Input/Output: [(49 43 44 89) 43]
Test Case: 367 | Input/Output: [(24 26 22 91) 22]
Test Case: 368 | Input/Output: [(39 60 81 41) 39]
Test Case: 369 | Input/Output: [(4 70 64 82) 4]
Test Case: 370 | Input/Output: [(81 93 79 5) 5]
Test Case: 371 | Input/Output: [(10 79 32 11) 10]
Test Case: 372 | Input/Output: [(9 19 33 64) 9]
Test Case: 373 | Input/Output: [(36 1 8 98) 1]
Test Case: 374 | Input/Output: [(35 24 4 53) 4]
Test Case: 375 | Input/Output: [(48 80 30 77) 30]
Test Case: 376 | Input/Output: [(80 19 80 27) 19]
Test Case: 377 | Input/Output: [(29 77 41 7) 7]
Test Case: 378 | Input/Output: [(46 57 34 99) 34]
Test Case: 379 | Input/Output: [(43 58 44 69) 43]
Test Case: 380 | Input/Output: [(20 35 18 91) 18]
Test Case: 381 | Input/Output: [(89 54 70 73) 54]
Test Case: 382 | Input/Output: [(99 34 63 98) 34]
Test Case: 383 | Input/Output: [(88 14 69 77) 14]
Test Case: 384 | Input/Output: [(16 9 20 1) 1]
Test Case: 385 | Input/Output: [(26 47 98 3) 3]
Test Case: 386 | Input/Output: [(88 83 54 68) 54]
Test Case: 387 | Input/Output: [(19 94 70 34) 19]
Test Case: 388 | Input/Output: [(78 47 93 59) 47]
Test Case: 389 | Input/Output: [(54 25 38 44) 25]
Test Case: 390 | Input/Output: [(92 69 16 31) 16]
Test Case: 391 | Input/Output: [(17 9 50 99) 9]
Test Case: 392 | Input/Output: [(71 23 52 25) 23]
Test Case: 393 | Input/Output: [(20 84 81 33) 20]
Test Case: 394 | Input/Output: [(69 8 28 29) 8]
Test Case: 395 | Input/Output: [(18 74 75 58) 18]
Test Case: 396 | Input/Output: [(18 60 6 38) 6]
Test Case: 397 | Input/Output: [(42 60 73 57) 42]
Test Case: 398 | Input/Output: [(56 25 3 97) 3]
Test Case: 399 | Input/Output: [(85 11 69 35) 11]
Test Case: 400 | Input/Output: [(-65 -90 28 45) -90]
Test Case: 401 | Input/Output: [(49 13 -91 17) -91]
Test Case: 402 | Input/Output: [(89 -44 -23 59) -44]
Test Case: 403 | Input/Output: [(87 -7 -41 65) -41]
Test Case: 404 | Input/Output: [(1 -2 -87 48) -87]
Test Case: 405 | Input/Output: [(89 27 -11 27) -11]
Test Case: 406 | Input/Output: [(-25 -65 -10 28) -65]
Test Case: 407 | Input/Output: [(43 59 44 80) 43]
Test Case: 408 | Input/Output: [(-70 60 69 -20) -70]
Test Case: 409 | Input/Output: [(24 42 -85 1) -85]
Test Case: 410 | Input/Output: [(-86 42 10 65) -86]
Test Case: 411 | Input/Output: [(-3 99 70 87) -3]
Test Case: 412 | Input/Output: [(-81 -22 15 -27) -81]
Test Case: 413 | Input/Output: [(87 -43 100 16) -43]
Test Case: 414 | Input/Output: [(-82 28 -41 71) -82]
Test Case: 415 | Input/Output: [(-93 -28 -55 -11) -93]
Test Case: 416 | Input/Output: [(-66 96 53 -63) -66]
Test Case: 417 | Input/Output: [(-92 -76 -51 -99) -99]
Test Case: 418 | Input/Output: [(-67 14 92 -34) -67]
Test Case: 419 | Input/Output: [(19 59 -35 -53) -53]
Test Case: 420 | Input/Output: [(-44 11 -81 -28) -81]
Test Case: 421 | Input/Output: [(22 99 -62 92) -62]
Test Case: 422 | Input/Output: [(29 69 71 -89) -89]
Test Case: 423 | Input/Output: [(54 -93 88 17) -93]
Test Case: 424 | Input/Output: [(-15 23 43 69) -15]
Test Case: 425 | Input/Output: [(-96 -9 76 -29) -96]
Test Case: 426 | Input/Output: [(88 -42 59 74) -42]
Test Case: 427 | Input/Output: [(-35 69 -66 59) -66]
Test Case: 428 | Input/Output: [(-37 85 6 -25) -37]
Test Case: 429 | Input/Output: [(18 8 19 26) 8]
Test Case: 430 | Input/Output: [(-77 87 -10 0) -77]
Test Case: 431 | Input/Output: [(-60 13 10 -52) -60]
Test Case: 432 | Input/Output: [(65 35 -33 -94) -94]
Test Case: 433 | Input/Output: [(-83 33 -81 31) -83]
Test Case: 434 | Input/Output: [(82 -76 93 -15) -76]
Test Case: 435 | Input/Output: [(68 -38 24 92) -38]
Test Case: 436 | Input/Output: [(-58 -48 -80 -8) -80]
Test Case: 437 | Input/Output: [(41 -80 8 -75) -80]
Test Case: 438 | Input/Output: [(38 -69 5 89) -69]
Test Case: 439 | Input/Output: [(-47 94 50 80) -47]
Test Case: 440 | Input/Output: [(81 -93 33 -10) -93]
Test Case: 441 | Input/Output: [(29 53 -16 -77) -77]
Test Case: 442 | Input/Output: [(64 -21 97 54) -21]
Test Case: 443 | Input/Output: [(-18 -28 78 -73) -73]
Test Case: 444 | Input/Output: [(9 96 6 16) 6]
Test Case: 445 | Input/Output: [(69 85 11 3) 3]
Test Case: 446 | Input/Output: [(-25 -4 -42 90) -42]
Test Case: 447 | Input/Output: [(26 6 -27 7) -27]
Test Case: 448 | Input/Output: [(-70 43 -51 -50) -70]
Test Case: 449 | Input/Output: [(-40 4 48 -93) -93]
Test Case: 450 | Input/Output: [(-45 -95 8 -64) -95]
Test Case: 451 | Input/Output: [(24 -93 -26 -86) -93]
Test Case: 452 | Input/Output: [(1 -23 -97 -2) -97]
Test Case: 453 | Input/Output: [(-51 3 -97 81) -97]
Test Case: 454 | Input/Output: [(48 -53 9 -17) -53]
Test Case: 455 | Input/Output: [(26 -8 15 66) -8]
Test Case: 456 | Input/Output: [(-68 1 12 -12) -68]
Test Case: 457 | Input/Output: [(-83 -6 -24 43) -83]
Test Case: 458 | Input/Output: [(20 85 99 7) 7]
Test Case: 459 | Input/Output: [(89 -12 -86 -27) -86]
Test Case: 460 | Input/Output: [(-76 -45 67 40) -76]
Test Case: 461 | Input/Output: [(92 20 -56 -27) -56]
Test Case: 462 | Input/Output: [(-54 -98 -9 -24) -98]
Test Case: 463 | Input/Output: [(5 -90 -58 -10) -90]
Test Case: 464 | Input/Output: [(-19 -93 43 -42) -93]
Test Case: 465 | Input/Output: [(-15 -3 94 59) -15]
Test Case: 466 | Input/Output: [(-82 17 -19 97) -82]
Test Case: 467 | Input/Output: [(39 -69 78 39) -69]
Test Case: 468 | Input/Output: [(-95 -94 87 -49) -95]
Test Case: 469 | Input/Output: [(93 40 90 -26) -26]
Test Case: 470 | Input/Output: [(81 -10 92 -82) -82]
Test Case: 471 | Input/Output: [(90 -79 13 -61) -79]
Test Case: 472 | Input/Output: [(-60 17 48 53) -60]
Test Case: 473 | Input/Output: [(26 -69 -67 -72) -72]
Test Case: 474 | Input/Output: [(16 45 -15 10) -15]
Test Case: 475 | Input/Output: [(18 57 90 -68) -68]
Test Case: 476 | Input/Output: [(-20 -33 91 -51) -51]
Test Case: 477 | Input/Output: [(-69 43 9 26) -69]
Test Case: 478 | Input/Output: [(20 98 4 82) 4]
Test Case: 479 | Input/Output: [(19 82 -78 57) -78]
Test Case: 480 | Input/Output: [(49 43 7 24) 7]
Test Case: 481 | Input/Output: [(84 -24 -1 56) -24]
Test Case: 482 | Input/Output: [(28 22 -71 15) -71]
Test Case: 483 | Input/Output: [(-74 -95 -60 21) -95]
Test Case: 484 | Input/Output: [(33 -23 95 16) -23]
Test Case: 485 | Input/Output: [(-22 -69 3 67) -69]
Test Case: 486 | Input/Output: [(26 5 -94 -74) -94]
Test Case: 487 | Input/Output: [(-28 23 11 97) -28]
Test Case: 488 | Input/Output: [(97 24 -10 -24) -24]
Test Case: 489 | Input/Output: [(-95 4 -83 62) -95]
Test Case: 490 | Input/Output: [(-1 11 -37 -72) -72]
Test Case: 491 | Input/Output: [(15 47 43 27) 15]
Test Case: 492 | Input/Output: [(20 -29 -22 26) -29]
Test Case: 493 | Input/Output: [(-8 -76 -64 -99) -99]
Test Case: 494 | Input/Output: [(-73 -34 95 69) -73]
Test Case: 495 | Input/Output: [(-74 68 -15 -73) -74]
Test Case: 496 | Input/Output: [(69 -63 -19 -34) -63]
Test Case: 497 | Input/Output: [(-13 -9 36 35) -13]
Test Case: 498 | Input/Output: [(-2 -25 14 90) -25]
Test Case: 499 | Input/Output: [(48 57 53 -70) -70]
Test Case: 500 | Input/Output: [(3 38 59 -73) -73]
Test Case: 501 | Input/Output: [(-66 72 37 -68) -68]
Test Case: 502 | Input/Output: [(-24 17 -99 65) -99]
Test Case: 503 | Input/Output: [(19 97 12 -62) -62]
Test Case: 504 | Input/Output: [(25 -91 46 12) -91]
Test Case: 505 | Input/Output: [(94 -86 32 -59) -86]
Test Case: 506 | Input/Output: [(30 76 -5 -47) -47]
Test Case: 507 | Input/Output: [(-50 -1 -72 47) -72]
Test Case: 508 | Input/Output: [(93 -57 -44 -58) -58]
Test Case: 509 | Input/Output: [(77 55 -11 37) -11]
Test Case: 510 | Input/Output: [(-85 70 -91 97) -91]
Test Case: 511 | Input/Output: [(45 -75 34 39) -75]
Test Case: 512 | Input/Output: [(-10 78 46 -71) -71]
Test Case: 513 | Input/Output: [(-96 58 -36 -45) -96]
Test Case: 514 | Input/Output: [(67 -24 -2 29) -24]
Test Case: 515 | Input/Output: [(49 30 -18 99) -18]
Test Case: 516 | Input/Output: [(1 91 -25 -80) -80]
Test Case: 517 | Input/Output: [(42 65 -93 62) -93]
Test Case: 518 | Input/Output: [(41 37 48 47) 37]
Test Case: 519 | Input/Output: [(36 54 13 -76) -76]
Test Case: 520 | Input/Output: [(-13 -3 58 -72) -72]
Test Case: 521 | Input/Output: [(54 -69 6 54) -69]
Test Case: 522 | Input/Output: [(62 -78 67 23) -78]
Test Case: 523 | Input/Output: [(25 -23 -78 -78) -78]
Test Case: 524 | Input/Output: [(-60 -98 -72 4) -98]
Test Case: 525 | Input/Output: [(98 20 94 -79) -79]
Test Case: 526 | Input/Output: [(56 -14 38 81) -14]
Test Case: 527 | Input/Output: [(-93 -5 43 -20) -93]
Test Case: 528 | Input/Output: [(-44 -8 49 -77) -77]
Test Case: 529 | Input/Output: [(-64 48 50 76) -64]
Test Case: 530 | Input/Output: [(-74 -8 -70 -57) -74]
Test Case: 531 | Input/Output: [(12 85 -29 -41) -41]
Test Case: 532 | Input/Output: [(74 -74 88 30) -74]
Test Case: 533 | Input/Output: [(47 -3 -72 -3) -72]
Test Case: 534 | Input/Output: [(-86 97 -81 -74) -86]
Test Case: 535 | Input/Output: [(14 97 62 -28) -28]
Test Case: 536 | Input/Output: [(-8 -23 90 87) -23]
Test Case: 537 | Input/Output: [(-36 64 -20 -78) -78]
Test Case: 538 | Input/Output: [(-41 26 -83 28) -83]
Test Case: 539 | Input/Output: [(-54 31 51 -26) -54]
Test Case: 540 | Input/Output: [(47 -6 33 -44) -44]
Test Case: 541 | Input/Output: [(28 96 53 89) 28]
Test Case: 542 | Input/Output: [(-75 7 -20 -12) -75]
Test Case: 543 | Input/Output: [(99 -91 -56 -32) -91]
Test Case: 544 | Input/Output: [(-97 -59 -77 -59) -97]
Test Case: 545 | Input/Output: [(-42 -78 -74 89) -78]
Test Case: 546 | Input/Output: [(-34 -47 93 -76) -76]
Test Case: 547 | Input/Output: [(97 -93 27 -32) -93]
Test Case: 548 | Input/Output: [(-5 44 79 53) -5]
Test Case: 549 | Input/Output: [(13 9 59 97) 9]
Test Case: 550 | Input/Output: [(-4 76 -39 4) -39]
Test Case: 551 | Input/Output: [(25 2 -32 97) -32]
Test Case: 552 | Input/Output: [(-35 40 -19 86) -35]
Test Case: 553 | Input/Output: [(-15 71 -58 -16) -58]
Test Case: 554 | Input/Output: [(60 74 83 31) 31]
Test Case: 555 | Input/Output: [(76 96 22 81) 22]
Test Case: 556 | Input/Output: [(61 82 -4 -67) -67]
Test Case: 557 | Input/Output: [(50 -72 -16 83) -72]
Test Case: 558 | Input/Output: [(-14 -78 -54 85) -78]
Test Case: 559 | Input/Output: [(22 -73 18 -13) -73]
Test Case: 560 | Input/Output: [(77 68 7 -47) -47]
Test Case: 561 | Input/Output: [(-6 95 89 3) -6]
Test Case: 562 | Input/Output: [(-34 84 -77 -25) -77]
Test Case: 563 | Input/Output: [(-49 -53 -50 70) -53]
Test Case: 564 | Input/Output: [(-75 47 93 52) -75]
Test Case: 565 | Input/Output: [(-34 88 62 39) -34]
Test Case: 566 | Input/Output: [(-13 -45 30 99) -45]
Test Case: 567 | Input/Output: [(37 24 -62 70) -62]
Test Case: 568 | Input/Output: [(-96 18 -45 9) -96]
Test Case: 569 | Input/Output: [(88 -18 -80 -20) -80]
Test Case: 570 | Input/Output: [(-7 78 -43 29) -43]
Test Case: 571 | Input/Output: [(-49 -32 54 24) -49]
Test Case: 572 | Input/Output: [(-34 16 2 67) -34]
Test Case: 573 | Input/Output: [(30 -1 -50 -57) -57]
Test Case: 574 | Input/Output: [(-37 88 14 -34) -37]
Test Case: 575 | Input/Output: [(-25 3 60 25) -25]
Test Case: 576 | Input/Output: [(42 32 83 72) 32]
Test Case: 577 | Input/Output: [(29 85 -9 -33) -33]
Test Case: 578 | Input/Output: [(13 30 -84 27) -84]
Test Case: 579 | Input/Output: [(-77 11 -90 -84) -90]
Test Case: 580 | Input/Output: [(-81 21 -42 93) -81]
Test Case: 581 | Input/Output: [(-17 -46 -25 -44) -46]
Test Case: 582 | Input/Output: [(88 84 -32 -74) -74]
Test Case: 583 | Input/Output: [(7 -1 63 78) -1]
Test Case: 584 | Input/Output: [(34 80 88 -55) -55]
Test Case: 585 | Input/Output: [(-51 -95 85 59) -95]
Test Case: 586 | Input/Output: [(24 -74 -37 12) -74]
Test Case: 587 | Input/Output: [(69 -52 9 7) -52]
Test Case: 588 | Input/Output: [(9 100 97 -39) -39]
Test Case: 589 | Input/Output: [(-100 38 -14 -89) -100]
Test Case: 590 | Input/Output: [(-78 92 -43 8) -78]
Test Case: 591 | Input/Output: [(11 -10 3 -35) -35]
Test Case: 592 | Input/Output: [(71 27 -78 -90) -90]
Test Case: 593 | Input/Output: [(62 45 -35 4) -35]
Test Case: 594 | Input/Output: [(75 -69 94 -18) -69]
Test Case: 595 | Input/Output: [(13 -74 -37 18) -74]
Test Case: 596 | Input/Output: [(31 -26 -92 83) -92]
Test Case: 597 | Input/Output: [(19 69 77 4) 4]
Test Case: 598 | Input/Output: [(-92 -78 91 42) -92]
Test Case: 599 | Input/Output: [(42 -67 -39 34) -67]
Test Case: 600 | Input/Output: [(2 -51 -88 31) -88]
Test Case: 601 | Input/Output: [(86 -54 -59 72) -59]
Test Case: 602 | Input/Output: [(7 48 -57 90) -57]
Test Case: 603 | Input/Output: [(-19 29 64 52) -19]
Test Case: 604 | Input/Output: [(-1 -87 -62 -90) -90]
Test Case: 605 | Input/Output: [(-78 42 34 -98) -98]
Test Case: 606 | Input/Output: [(-56 -9 12 30) -56]
Test Case: 607 | Input/Output: [(-72 -20 45 59) -72]
Test Case: 608 | Input/Output: [(68 -80 -6 19) -80]
Test Case: 609 | Input/Output: [(50 -51 39 -79) -79]
Test Case: 610 | Input/Output: [(-41 -17 79 -49) -49]
Test Case: 611 | Input/Output: [(85 -47 -95 -20) -95]
Test Case: 612 | Input/Output: [(-51 -91 100 25) -91]
Test Case: 613 | Input/Output: [(92 77 -57 84) -57]
Test Case: 614 | Input/Output: [(97 28 -38 -10) -38]
Test Case: 615 | Input/Output: [(41 -37 18 7) -37]
Test Case: 616 | Input/Output: [(79 18 18 -28) -28]
Test Case: 617 | Input/Output: [(30 -76 55 -16) -76]
Test Case: 618 | Input/Output: [(31 -15 -89 -53) -89]
Test Case: 619 | Input/Output: [(-23 -72 81 -78) -78]
Test Case: 620 | Input/Output: [(-36 23 29 62) -36]
Test Case: 621 | Input/Output: [(20 -32 46 56) -32]
Test Case: 622 | Input/Output: [(70 27 -38 43) -38]
Test Case: 623 | Input/Output: [(44 -8 1 -95) -95]
Test Case: 624 | Input/Output: [(-46 72 -64 36) -64]
Test Case: 625 | Input/Output: [(-23 13 -31 61) -31]
Test Case: 626 | Input/Output: [(31 83 -67 -82) -82]
Test Case: 627 | Input/Output: [(60 84 99 -15) -15]
Test Case: 628 | Input/Output: [(24 -55 -81 48) -81]
Test Case: 629 | Input/Output: [(32 -88 -23 39) -88]
Test Case: 630 | Input/Output: [(-65 58 50 -23) -65]
Test Case: 631 | Input/Output: [(74 -62 100 40) -62]
Test Case: 632 | Input/Output: [(97 39 -44 97) -44]
Test Case: 633 | Input/Output: [(-17 -16 79 -81) -81]
Test Case: 634 | Input/Output: [(4 -56 -29 -48) -56]
Test Case: 635 | Input/Output: [(61 58 30 -8) -8]
Test Case: 636 | Input/Output: [(-33 -26 8 -16) -33]
Test Case: 637 | Input/Output: [(-80 33 -78 -25) -80]
Test Case: 638 | Input/Output: [(93 97 -77 -19) -77]
Test Case: 639 | Input/Output: [(50 11 -31 -39) -39]
Test Case: 640 | Input/Output: [(27 26 40 92) 26]
Test Case: 641 | Input/Output: [(57 28 -72 68) -72]
Test Case: 642 | Input/Output: [(-55 -78 -96 -64) -96]
Test Case: 643 | Input/Output: [(48 -68 -71 41) -71]
Test Case: 644 | Input/Output: [(-58 52 22 80) -58]
Test Case: 645 | Input/Output: [(63 -45 -11 68) -45]
Test Case: 646 | Input/Output: [(-58 69 94 -21) -58]
Test Case: 647 | Input/Output: [(71 -4 -80 82) -80]
Test Case: 648 | Input/Output: [(68 93 16 71) 16]
Test Case: 649 | Input/Output: [(13 -40 22 -13) -40]
Test Case: 650 | Input/Output: [(47 46 14 -11) -11]
Test Case: 651 | Input/Output: [(-84 -18 19 100) -84]
Test Case: 652 | Input/Output: [(62 27 98 -86) -86]
Test Case: 653 | Input/Output: [(-7 -56 76 -60) -60]
Test Case: 654 | Input/Output: [(54 1 -24 -91) -91]
Test Case: 655 | Input/Output: [(79 -65 -79 -29) -79]
Test Case: 656 | Input/Output: [(-57 68 -20 -29) -57]
Test Case: 657 | Input/Output: [(98 -29 -67 -71) -71]
Test Case: 658 | Input/Output: [(41 -6 24 -96) -96]
Test Case: 659 | Input/Output: [(-100 -63 39 -97) -100]
Test Case: 660 | Input/Output: [(63 -63 -40 34) -63]
Test Case: 661 | Input/Output: [(-24 42 -50 57) -50]
Test Case: 662 | Input/Output: [(-55 35 38 -37) -55]
Test Case: 663 | Input/Output: [(-77 -5 -63 -98) -98]
Test Case: 664 | Input/Output: [(-97 14 -62 8) -97]
Test Case: 665 | Input/Output: [(33 90 66 23) 23]
Test Case: 666 | Input/Output: [(46 87 -69 81) -69]
Test Case: 667 | Input/Output: [(86 -27 -38 63) -38]
Test Case: 668 | Input/Output: [(13 32 49 -91) -91]
Test Case: 669 | Input/Output: [(-50 -94 72 -18) -94]
Test Case: 670 | Input/Output: [(-96 50 -14 -23) -96]
Test Case: 671 | Input/Output: [(45 -30 -85 43) -85]
Test Case: 672 | Input/Output: [(3 71 87 87) 3]
Test Case: 673 | Input/Output: [(24 66 -1 29) -1]
Test Case: 674 | Input/Output: [(93 -12 -24 -34) -34]
Test Case: 675 | Input/Output: [(-18 -39 -85 -51) -85]
Test Case: 676 | Input/Output: [(66 17 22 8) 8]
Test Case: 677 | Input/Output: [(23 54 -36 -62) -62]
Test Case: 678 | Input/Output: [(78 41 25 -55) -55]
Test Case: 679 | Input/Output: [(25 -8 49 100) -8]
Test Case: 680 | Input/Output: [(88 30 -82 -87) -87]
Test Case: 681 | Input/Output: [(87 40 -92 34) -92]
Test Case: 682 | Input/Output: [(69 16 -49 2) -49]
Test Case: 683 | Input/Output: [(-89 -3 11 13) -89]
Test Case: 684 | Input/Output: [(-45 -62 -89 38) -89]
Test Case: 685 | Input/Output: [(-47 -67 16 74) -67]
Test Case: 686 | Input/Output: [(-37 29 -24 49) -37]
Test Case: 687 | Input/Output: [(78 72 22 -98) -98]
Test Case: 688 | Input/Output: [(-43 76 -31 75) -43]
Test Case: 689 | Input/Output: [(-37 66 -21 -73) -73]
Test Case: 690 | Input/Output: [(66 -11 60 -99) -99]
Test Case: 691 | Input/Output: [(37 9 -54 -67) -67]
Test Case: 692 | Input/Output: [(29 -63 43 93) -63]
Test Case: 693 | Input/Output: [(-75 80 12 -29) -75]
Test Case: 694 | Input/Output: [(-3 76 -4 63) -4]
Test Case: 695 | Input/Output: [(82 -70 -2 -50) -70]
Test Case: 696 | Input/Output: [(-15 -63 87 67) -63]
Test Case: 697 | Input/Output: [(-79 -75 -34 46) -79]
Test Case: 698 | Input/Output: [(-24 -78 27 -12) -78]
Test Case: 699 | Input/Output: [(85 93 -59 22) -59]
Test Case: 700 | Input/Output: [(-76 -72 -40 50) -76]
Test Case: 701 | Input/Output: [(48 21 -31 80) -31]
Test Case: 702 | Input/Output: [(-65 13 -30 -3) -65]
Test Case: 703 | Input/Output: [(90 22 -87 -58) -87]
Test Case: 704 | Input/Output: [(-16 6 17 -86) -86]
Test Case: 705 | Input/Output: [(39 -13 93 97) -13]
Test Case: 706 | Input/Output: [(52 -54 -78 -60) -78]
Test Case: 707 | Input/Output: [(82 -82 -58 93) -82]
Test Case: 708 | Input/Output: [(78 -13 51 -8) -13]
Test Case: 709 | Input/Output: [(66 4 -28 55) -28]
Test Case: 710 | Input/Output: [(70 -60 31 78) -60]
Test Case: 711 | Input/Output: [(-14 -20 75 -7) -20]
Test Case: 712 | Input/Output: [(74 66 -77 -27) -77]
Test Case: 713 | Input/Output: [(-17 -91 -58 -99) -99]
Test Case: 714 | Input/Output: [(1 49 42 72) 1]
Test Case: 715 | Input/Output: [(-74 -87 -65 64) -87]
Test Case: 716 | Input/Output: [(-41 -30 52 -81) -81]
Test Case: 717 | Input/Output: [(-69 57 -81 43) -81]
Test Case: 718 | Input/Output: [(-54 12 34 90) -54]
Test Case: 719 | Input/Output: [(-23 -51 8 11) -51]
Test Case: 720 | Input/Output: [(-90 42 -14 -86) -90]
Test Case: 721 | Input/Output: [(74 -41 77 -29) -41]
Test Case: 722 | Input/Output: [(-6 -95 77 45) -95]
Test Case: 723 | Input/Output: [(28 -6 48 -99) -99]
Test Case: 724 | Input/Output: [(13 85 -74 2) -74]
Test Case: 725 | Input/Output: [(-13 -4 99 -10) -13]
Test Case: 726 | Input/Output: [(-13 87 -20 -60) -60]
Test Case: 727 | Input/Output: [(68 -15 -80 -98) -98]
Test Case: 728 | Input/Output: [(-59 10 94 98) -59]
Test Case: 729 | Input/Output: [(-46 75 -59 -20) -59]
Test Case: 730 | Input/Output: [(-88 -25 -31 -44) -88]
Test Case: 731 | Input/Output: [(-63 -8 -39 -57) -63]
Test Case: 732 | Input/Output: [(-94 11 11 16) -94]
Test Case: 733 | Input/Output: [(17 -87 -53 3) -87]
Test Case: 734 | Input/Output: [(41 -83 20 55) -83]
Test Case: 735 | Input/Output: [(25 -43 3 -17) -43]
Test Case: 736 | Input/Output: [(99 -40 -16 -79) -79]
Test Case: 737 | Input/Output: [(-46 46 93 -74) -74]
Test Case: 738 | Input/Output: [(28 -21 24 -94) -94]
Test Case: 739 | Input/Output: [(-95 -24 -29 84) -95]
Test Case: 740 | Input/Output: [(72 -52 -67 -99) -99]
Test Case: 741 | Input/Output: [(-86 25 45 -94) -94]
Test Case: 742 | Input/Output: [(-22 -88 69 -46) -88]
Test Case: 743 | Input/Output: [(69 -76 -44 -26) -76]
Test Case: 744 | Input/Output: [(-73 59 -79 -37) -79]
Test Case: 745 | Input/Output: [(32 -10 -21 33) -21]
Test Case: 746 | Input/Output: [(12 -75 -47 29) -75]
Test Case: 747 | Input/Output: [(-4 -71 -37 -8) -71]
Test Case: 748 | Input/Output: [(-52 -83 46 -75) -83]
Test Case: 749 | Input/Output: [(-45 74 -97 -21) -97]
Test Case: 750 | Input/Output: [(79 -6 32 41) -6]
Test Case: 751 | Input/Output: [(8 21 -33 31) -33]
Test Case: 752 | Input/Output: [(-47 -4 25 -19) -47]
Test Case: 753 | Input/Output: [(9 22 -15 -64) -64]
Test Case: 754 | Input/Output: [(-7 -26 -38 -14) -38]
Test Case: 755 | Input/Output: [(-41 51 -51 16) -51]
Test Case: 756 | Input/Output: [(61 92 80 35) 35]
Test Case: 757 | Input/Output: [(-87 91 -12 -7) -87]
Test Case: 758 | Input/Output: [(-47 -3 22 -65) -65]
Test Case: 759 | Input/Output: [(82 79 34 65) 34]
Test Case: 760 | Input/Output: [(-96 31 -42 12) -96]
Test Case: 761 | Input/Output: [(35 -48 -23 -85) -85]
Test Case: 762 | Input/Output: [(-86 34 43 85) -86]
Test Case: 763 | Input/Output: [(93 -33 -15 -3) -33]
Test Case: 764 | Input/Output: [(-93 89 47 23) -93]
Test Case: 765 | Input/Output: [(61 97 91 -68) -68]
Test Case: 766 | Input/Output: [(99 -94 33 56) -94]
Test Case: 767 | Input/Output: [(-14 -3 -16 64) -16]
Test Case: 768 | Input/Output: [(-47 -83 78 -72) -83]
Test Case: 769 | Input/Output: [(-29 -82 -69 -29) -82]
Test Case: 770 | Input/Output: [(98 -85 -90 54) -90]
Test Case: 771 | Input/Output: [(-54 -57 25 88) -57]
Test Case: 772 | Input/Output: [(-100 79 60 -70) -100]
Test Case: 773 | Input/Output: [(-77 40 -24 95) -77]
Test Case: 774 | Input/Output: [(-2 55 47 84) -2]
Test Case: 775 | Input/Output: [(-10 -18 -66 56) -66]
Test Case: 776 | Input/Output: [(-45 65 -23 -62) -62]
Test Case: 777 | Input/Output: [(-57 -6 -7 94) -57]
Test Case: 778 | Input/Output: [(-12 48 -44 -62) -62]
Test Case: 779 | Input/Output: [(-15 35 13 -37) -37]
Test Case: 780 | Input/Output: [(4 -90 -27 -31) -90]
Test Case: 781 | Input/Output: [(-89 0 -68 51) -89]
Test Case: 782 | Input/Output: [(86 -84 -10 36) -84]
Test Case: 783 | Input/Output: [(22 81 -53 -32) -53]
Test Case: 784 | Input/Output: [(87 -97 -95 39) -97]
Test Case: 785 | Input/Output: [(-63 -95 -80 40) -95]
Test Case: 786 | Input/Output: [(-59 79 -11 4) -59]
Test Case: 787 | Input/Output: [(35 1 -72 -89) -89]
Test Case: 788 | Input/Output: [(63 -78 30 -97) -97]
Test Case: 789 | Input/Output: [(12 74 11 -96) -96]
Test Case: 790 | Input/Output: [(-9 89 -30 1) -30]
Test Case: 791 | Input/Output: [(69 -21 -66 24) -66]
Test Case: 792 | Input/Output: [(-58 -33 -6 45) -58]
Test Case: 793 | Input/Output: [(-57 -79 -1 -33) -79]
Test Case: 794 | Input/Output: [(29 52 -90 84) -90]
Test Case: 795 | Input/Output: [(64 98 -46 53) -46]
Test Case: 796 | Input/Output: [(-62 -50 -84 93) -84]
Test Case: 797 | Input/Output: [(52 -56 -99 -2) -99]
Test Case: 798 | Input/Output: [(-16 -96 22 -78) -96]
Test Case: 799 | Input/Output: [(-47 87 69 -66) -66]
Test Case: 800 | Input/Output: [(62 42 -22 10) -22]
Test Case: 801 | Input/Output: [(15 -21 100 -86) -86]
Test Case: 802 | Input/Output: [(-3 -54 9 88) -54]
Test Case: 803 | Input/Output: [(1 -55 60 49) -55]
Test Case: 804 | Input/Output: [(37 36 -46 -55) -55]
Test Case: 805 | Input/Output: [(-77 -7 -42 -28) -77]
Test Case: 806 | Input/Output: [(-58 39 -56 92) -58]
Test Case: 807 | Input/Output: [(73 -10 43 -43) -43]
Test Case: 808 | Input/Output: [(44 -4 30 -24) -24]
Test Case: 809 | Input/Output: [(96 -64 -92 -26) -92]
Test Case: 810 | Input/Output: [(-88 100 13 39) -88]
Test Case: 811 | Input/Output: [(-78 -97 -89 -77) -97]
Test Case: 812 | Input/Output: [(-50 -65 63 -89) -89]
Test Case: 813 | Input/Output: [(-93 17 73 -99) -99]
Test Case: 814 | Input/Output: [(66 56 51 52) 51]
Test Case: 815 | Input/Output: [(35 89 71 -66) -66]
Test Case: 816 | Input/Output: [(23 -78 56 38) -78]
Test Case: 817 | Input/Output: [(56 91 10 -22) -22]
Test Case: 818 | Input/Output: [(67 -33 52 -47) -47]
Test Case: 819 | Input/Output: [(60 -4 -1 -23) -23]
Test Case: 820 | Input/Output: [(-85 98 14 -49) -85]
Test Case: 821 | Input/Output: [(-33 -6 73 85) -33]
Test Case: 822 | Input/Output: [(-95 7 -72 -29) -95]
Test Case: 823 | Input/Output: [(-30 -35 64 -68) -68]
Test Case: 824 | Input/Output: [(-55 -81 65 62) -81]
Test Case: 825 | Input/Output: [(-4 30 7 -85) -85]
Test Case: 826 | Input/Output: [(41 -36 74 16) -36]
Test Case: 827 | Input/Output: [(39 -78 56 0) -78]
Test Case: 828 | Input/Output: [(89 72 1 -8) -8]
Test Case: 829 | Input/Output: [(47 88 -59 -28) -59]
Test Case: 830 | Input/Output: [(-10 20 33 -68) -68]
Test Case: 831 | Input/Output: [(-60 -14 43 28) -60]
Test Case: 832 | Input/Output: [(-86 -70 32 -3) -86]
Test Case: 833 | Input/Output: [(-7 43 -25 -98) -98]
Test Case: 834 | Input/Output: [(9 100 30 -60) -60]
Test Case: 835 | Input/Output: [(-20 42 -1 -43) -43]
Test Case: 836 | Input/Output: [(-76 -56 -60 19) -76]
Test Case: 837 | Input/Output: [(-76 97 -81 -90) -90]
Test Case: 838 | Input/Output: [(37 53 98 16) 16]
Test Case: 839 | Input/Output: [(-60 94 -70 -99) -99]
Test Case: 840 | Input/Output: [(36 33 77 11) 11]
Test Case: 841 | Input/Output: [(-23 90 -67 69) -67]
Test Case: 842 | Input/Output: [(13 -33 94 57) -33]
Test Case: 843 | Input/Output: [(-97 -94 -14 -78) -97]
Test Case: 844 | Input/Output: [(-98 2 -62 42) -98]
Test Case: 845 | Input/Output: [(5 99 -24 -21) -24]
Test Case: 846 | Input/Output: [(10 -14 -46 -21) -46]
Test Case: 847 | Input/Output: [(-53 83 -87 -9) -87]
Test Case: 848 | Input/Output: [(1 28 91 15) 1]
Test Case: 849 | Input/Output: [(-76 26 5 8) -76]
Test Case: 850 | Input/Output: [(-44 79 3 67) -44]
Test Case: 851 | Input/Output: [(34 58 -66 -86) -86]
Test Case: 852 | Input/Output: [(64 6 -79 -18) -79]
Test Case: 853 | Input/Output: [(38 -97 19 -95) -97]
Test Case: 854 | Input/Output: [(19 -76 -4 26) -76]
Test Case: 855 | Input/Output: [(-67 43 95 -76) -76]
Test Case: 856 | Input/Output: [(-85 -79 95 76) -85]
Test Case: 857 | Input/Output: [(-9 -85 -13 -41) -85]
Test Case: 858 | Input/Output: [(28 99 29 37) 28]
Test Case: 859 | Input/Output: [(-34 23 -43 -99) -99]
Test Case: 860 | Input/Output: [(-43 -44 95 88) -44]
Test Case: 861 | Input/Output: [(-35 8 -90 91) -90]
Test Case: 862 | Input/Output: [(-65 -18 95 -45) -65]
Test Case: 863 | Input/Output: [(-88 -22 52 57) -88]
Test Case: 864 | Input/Output: [(59 -25 -6 1) -25]
Test Case: 865 | Input/Output: [(7 99 -47 -72) -72]
Test Case: 866 | Input/Output: [(44 -76 -93 -56) -93]
Test Case: 867 | Input/Output: [(-98 74 3 13) -98]
Test Case: 868 | Input/Output: [(34 35 96 -50) -50]
Test Case: 869 | Input/Output: [(57 -64 -62 3) -64]
Test Case: 870 | Input/Output: [(-84 -27 -56 44) -84]
Test Case: 871 | Input/Output: [(52 94 -31 -36) -36]
Test Case: 872 | Input/Output: [(68 -53 27 19) -53]
Test Case: 873 | Input/Output: [(69 -51 -88 65) -88]
Test Case: 874 | Input/Output: [(-40 8 -9 55) -40]
Test Case: 875 | Input/Output: [(-31 -56 5 32) -56]
Test Case: 876 | Input/Output: [(24 -36 5 1) -36]
Test Case: 877 | Input/Output: [(30 47 79 68) 30]
Test Case: 878 | Input/Output: [(2 49 -16 -70) -70]
Test Case: 879 | Input/Output: [(44 46 86 -41) -41]
Test Case: 880 | Input/Output: [(-8 66 -38 68) -38]
Test Case: 881 | Input/Output: [(-56 -18 2 -14) -56]
Test Case: 882 | Input/Output: [(49 44 -41 37) -41]
Test Case: 883 | Input/Output: [(48 93 22 60) 22]
Test Case: 884 | Input/Output: [(74 37 30 -30) -30]
Test Case: 885 | Input/Output: [(55 -99 89 -52) -99]
Test Case: 886 | Input/Output: [(9 5 36 21) 5]
Test Case: 887 | Input/Output: [(97 -28 53 83) -28]
Test Case: 888 | Input/Output: [(48 95 26 99) 26]
Test Case: 889 | Input/Output: [(13 60 83 -90) -90]
Test Case: 890 | Input/Output: [(-34 95 9 31) -34]
Test Case: 891 | Input/Output: [(-83 -14 -69 15) -83]
Test Case: 892 | Input/Output: [(-99 -17 -68 67) -99]
Test Case: 893 | Input/Output: [(-87 17 36 -10) -87]
Test Case: 894 | Input/Output: [(-10 -60 51 -93) -93]
Test Case: 895 | Input/Output: [(-18 73 -23 24) -23]
Test Case: 896 | Input/Output: [(-49 4 -73 87) -73]
Test Case: 897 | Input/Output: [(-61 -55 3 95) -61]
Test Case: 898 | Input/Output: [(84 -49 95 -71) -71]
Test Case: 899 | Input/Output: [(-23 85 46 -87) -87]
Test Case: 900 | Input/Output: [(84 84 -60 70) -60]
Test Case: 901 | Input/Output: [(-92 85 25 33) -92]
Test Case: 902 | Input/Output: [(21 -97 82 65) -97]
Test Case: 903 | Input/Output: [(-56 -13 34 -11) -56]
Test Case: 904 | Input/Output: [(42 -74 57 89) -74]
Test Case: 905 | Input/Output: [(88 53 -19 -33) -33]
Test Case: 906 | Input/Output: [(57 -33 95 -74) -74]
Test Case: 907 | Input/Output: [(97 -60 68 -73) -73]
Test Case: 908 | Input/Output: [(-80 -74 18 -34) -80]
Test Case: 909 | Input/Output: [(-72 33 76 41) -72]
Test Case: 910 | Input/Output: [(-62 -17 69 -44) -62]
Test Case: 911 | Input/Output: [(12 87 30 -5) -5]
Test Case: 912 | Input/Output: [(3 40 -29 -24) -29]
Test Case: 913 | Input/Output: [(-2 44 96 21) -2]
Test Case: 914 | Input/Output: [(79 -98 12 -29) -98]
Test Case: 915 | Input/Output: [(91 24 -84 96) -84]
Test Case: 916 | Input/Output: [(-51 -88 52 63) -88]
Test Case: 917 | Input/Output: [(-43 -28 65 -4) -43]
Test Case: 918 | Input/Output: [(-9 -38 -24 -82) -82]
Test Case: 919 | Input/Output: [(-57 83 -75 -100) -100]
Test Case: 920 | Input/Output: [(11 99 5 91) 5]
Test Case: 921 | Input/Output: [(7 12 60 69) 7]
Test Case: 922 | Input/Output: [(-74 -81 -41 53) -81]
Test Case: 923 | Input/Output: [(-59 -92 -10 19) -92]
Test Case: 924 | Input/Output: [(-99 87 47 -2) -99]
Test Case: 925 | Input/Output: [(-49 15 22 100) -49]
Test Case: 926 | Input/Output: [(75 12 -26 -10) -26]
Test Case: 927 | Input/Output: [(88 -86 -27 75) -86]
Test Case: 928 | Input/Output: [(-96 -85 95 96) -96]
Test Case: 929 | Input/Output: [(-95 -14 40 -84) -95]
Test Case: 930 | Input/Output: [(-95 41 -50 -57) -95]
Test Case: 931 | Input/Output: [(-66 83 72 -4) -66]
Test Case: 932 | Input/Output: [(-87 -48 64 -12) -87]
Test Case: 933 | Input/Output: [(72 -77 74 87) -77]
Test Case: 934 | Input/Output: [(-82 -19 7 37) -82]
Test Case: 935 | Input/Output: [(42 49 46 -18) -18]
Test Case: 936 | Input/Output: [(-16 31 7 87) -16]
Test Case: 937 | Input/Output: [(83 70 3 21) 3]
Test Case: 938 | Input/Output: [(-24 -21 23 -27) -27]
Test Case: 939 | Input/Output: [(-19 56 80 65) -19]
Test Case: 940 | Input/Output: [(33 96 -56 20) -56]
Test Case: 941 | Input/Output: [(36 -30 34 41) -30]
Test Case: 942 | Input/Output: [(22 -83 -5 -19) -83]
Test Case: 943 | Input/Output: [(35 -10 98 -85) -85]
Test Case: 944 | Input/Output: [(-75 -45 -46 77) -75]
Test Case: 945 | Input/Output: [(47 -68 -5 -23) -68]
Test Case: 946 | Input/Output: [(-23 -45 77 9) -45]
Test Case: 947 | Input/Output: [(82 -46 33 37) -46]
Test Case: 948 | Input/Output: [(83 -28 -94 -58) -94]
Test Case: 949 | Input/Output: [(-16 -74 89 -80) -80]
Test Case: 950 | Input/Output: [(-37 -23 -99 21) -99]
Test Case: 951 | Input/Output: [(9 -45 1 52) -45]
Test Case: 952 | Input/Output: [(-27 -94 76 13) -94]
Test Case: 953 | Input/Output: [(-23 -25 -13 98) -25]
Test Case: 954 | Input/Output: [(27 41 -58 -46) -58]
Test Case: 955 | Input/Output: [(51 -40 -84 -10) -84]
Test Case: 956 | Input/Output: [(53 -59 59 81) -59]
Test Case: 957 | Input/Output: [(-66 91 53 -59) -66]
Test Case: 958 | Input/Output: [(3 3 96 -6) -6]
Test Case: 959 | Input/Output: [(24 -50 -30 -27) -50]
Test Case: 960 | Input/Output: [(16 53 75 40) 16]
Test Case: 961 | Input/Output: [(-63 68 76 98) -63]
Test Case: 962 | Input/Output: [(50 7 -97 -100) -100]
Test Case: 963 | Input/Output: [(-94 44 -25 -74) -94]
Test Case: 964 | Input/Output: [(-70 51 34 -95) -95]
Test Case: 965 | Input/Output: [(-93 68 -71 64) -93]
Test Case: 966 | Input/Output: [(9 74 -84 -52) -84]
Test Case: 967 | Input/Output: [(-12 -79 -98 9) -98]
Test Case: 968 | Input/Output: [(7 -39 38 7) -39]
Test Case: 969 | Input/Output: [(62 -72 94 -12) -72]
Test Case: 970 | Input/Output: [(-23 52 9 -93) -93]
Test Case: 971 | Input/Output: [(-49 87 -83 5) -83]
Test Case: 972 | Input/Output: [(77 15 -26 -33) -33]
Test Case: 973 | Input/Output: [(71 19 -85 -6) -85]
Test Case: 974 | Input/Output: [(31 -52 -92 83) -92]
Test Case: 975 | Input/Output: [(69 -47 20 -42) -47]
Test Case: 976 | Input/Output: [(-36 -76 -20 75) -76]
Test Case: 977 | Input/Output: [(64 -22 89 86) -22]
Test Case: 978 | Input/Output: [(35 -81 15 49) -81]
Test Case: 979 | Input/Output: [(96 76 15 37) 15]
Test Case: 980 | Input/Output: [(-27 -55 -21 -34) -55]
Test Case: 981 | Input/Output: [(-88 99 -84 10) -88]
Test Case: 982 | Input/Output: [(2 -31 79 50) -31]
Test Case: 983 | Input/Output: [(88 -92 0 -74) -92]
Test Case: 984 | Input/Output: [(-3 -71 90 -40) -71]
Test Case: 985 | Input/Output: [(56 89 -36 -4) -36]
Test Case: 986 | Input/Output: [(-2 -78 54 49) -78]
Test Case: 987 | Input/Output: [(-95 -66 94 97) -95]
Test Case: 988 | Input/Output: [(-6 -57 -36 13) -57]
Test Case: 989 | Input/Output: [(52 94 9 -13) -13]
Test Case: 990 | Input/Output: [(-64 28 65 -24) -64]
Test Case: 991 | Input/Output: [(-12 -10 -37 90) -37]
Test Case: 992 | Input/Output: [(-42 -40 16 -28) -42]
Test Case: 993 | Input/Output: [(-3 53 1 72) -3]
Test Case: 994 | Input/Output: [(58 19 2 65) 2]
Test Case: 995 | Input/Output: [(-84 -96 -96 -43) -96]
Test Case: 996 | Input/Output: [(100 53 6 89) 6]
Test Case: 997 | Input/Output: [(51 9 -38 -9) -38]
Test Case: 998 | Input/Output: [(80 42 45 -59) -59]
Test Case: 999 | Input/Output: [(-68 -20 -79 -76) -79]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = -119 -82 84 -49 55 17 -86 -84 110 118 43 -4 -79 -83 -105 -126
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[68 68 68 -7] -7] [[74 92 74 74] 74] [[-86 -86 79 -86] -86] [[-6 57 57 57] -6] [[-88 61 -88 -88] -88] [[-49 30 -49 -49] -49] [[15 15 15 80] 15] [[69 69 69 -26] -26] [[64 64 28 64] 28] [[-43 -43 -43 -69] -69] [(-84 -84 -84 -84) -84] [(-17 -17 -17 -17) -17] [(68 68 68 68) 68] [(51 51 51 51) 51] [(82 82 82 82) 82] [(34 88 77 83) 34] [(59 75 92 4) 4] [(43 15 87 18) 15] [(22 4 43 40) 4] [(88 41 78 99) 41] [(55 99 30 22) 22] [(75 12 59 80) 12] [(37 32 74 45) 32] [(80 78 28 0) 0] [(46 44 42 11) 11] [(68 55 81 82) 55] [(28 62 55 27) 27] [(10 90 7 80) 7] [(88 29 15 43) 15] [(62 93 61 43) 43] [(99 17 72 17) 17] [(77 55 33 62) 33] [(39 8 9 20) 8] [(16 7 91 76) 7] [(9 11 73 59) 9] [(-38 -37 24 61) -38] [(-49 -77 84 -55) -77] [(25 17 1 -36) -36] [(59 1 -9 -72) -72] [(73 25 -41 -66) -66] [(-11 -53 -28 8) -53] [(18 80 -42 20) -42] [(-83 -55 -50 -39) -83] [(76 -80 88 58) -80] [(22 -4 94 -27) -27] [(64 -70 68 48) -70] [(-33 -44 -6 -81) -81] [(85 -77 38 40) -77] [(-69 48 67 -86) -86] [(34 -60 9 33) -60] [(-53 -32 -16 -2) -53] [(86 -85 -52 85) -85] [(30 85 -89 -45) -89] [(-40 65 -17 -9) -40] [(32 -29 -40 -88) -88] [(40 -58 13 -63) -63] [(-44 -56 92 51) -56] [(76 81 -9 -46) -46] [(-52 67 -18 -16) -52] [(-43 86 77 -64) -64] [(-72 6 -49 36) -72] [(30 31 -100 51) -100] [(97 76 79 -75) -75] [(-48 -14 27 21) -48] [(93 -85 27 34) -85] [(-73 -6 78 64) -73] [(84 47 22 59) 22] [(-31 -44 51 -99) -99] [(27 40 71 83) 27] [(-2 56 75 21) -2] [(25 84 -33 5) -33] [(0 -62 20 0) -62] [(-41 40 -76 47) -76] [(14 9 76 -71) -71] [(-47 -36 29 95) -47] [(-90 -25 90 -32) -90] [(37 -74 -64 -41) -74] [(-8 -10 -77 -78) -78] [(87 45 2 -79) -79] [(79 -27 11 23) -27] [(90 -37 55 -22) -37] [(-24 -100 -60 11) -100] [(-48 -68 -49 56) -68] [(37 95 24 -10) -10] [(-66 -99 -29 -28) -99] [(-47 -52 -49 40) -52] [(-71 -25 -11 -27) -71] [(-17 90 80 13) -17] [(-50 -68 98 -94) -94] [(35 -12 -98 -45) -98] [(19 99 -32 31) -32] [(-60 80 -44 -62) -62] [(87 -59 89 66) -59] [(-35 -98 91 -35) -98] [(-40 76 80 26) -40])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -7                  | Program output: 68                 
Correct output: 74                  | Program output: 92                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 57                 
Correct output: -88                 | Program output: 61                 
Correct output: -49                 | Program output: 30                 
Correct output: 15                  | Program output: 15                 
Correct output: -26                 | Program output: 69                 
Correct output: 28                  | Program output: 64                 
Correct output: -69                 | Program output: -43                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -17                
Correct output: 68                  | Program output: 68                 
Correct output: 51                  | Program output: 51                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 88                 
Correct output: 4                   | Program output: 75                 
Correct output: 15                  | Program output: 15                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 99                 
Correct output: 12                  | Program output: 12                 
Correct output: 32                  | Program output: 32                 
Correct output: 0                   | Program output: 78                 
Correct output: 11                  | Program output: 44                 
Correct output: 55                  | Program output: 55                 
Correct output: 27                  | Program output: 62                 
Correct output: 7                   | Program output: 90                 
Correct output: 15                  | Program output: 29                 
Correct output: 43                  | Program output: 93                 
Correct output: 17                  | Program output: 17                 
Correct output: 33                  | Program output: 55                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 11                 
Correct output: -38                 | Program output: -37                
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: 17                 
Correct output: -72                 | Program output: 1                  
Correct output: -66                 | Program output: 25                 
Correct output: -53                 | Program output: -53                
Correct output: -42                 | Program output: 80                 
Correct output: -83                 | Program output: -55                
Correct output: -80                 | Program output: -80                
Correct output: -27                 | Program output: -4                 
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -44                
Correct output: -77                 | Program output: -77                
Correct output: -86                 | Program output: 48                 
Correct output: -60                 | Program output: -60                
Correct output: -53                 | Program output: -32                
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: 85                 
Correct output: -40                 | Program output: 65                 
Correct output: -88                 | Program output: -29                
Correct output: -63                 | Program output: -58                
Correct output: -56                 | Program output: -56                
Correct output: -46                 | Program output: 81                 
Correct output: -52                 | Program output: 67                 
Correct output: -64                 | Program output: 86                 
Correct output: -72                 | Program output: 6                  
Correct output: -100                | Program output: 31                 
Correct output: -75                 | Program output: 76                 
Correct output: -48                 | Program output: -14                
Correct output: -85                 | Program output: -85                
Correct output: -73                 | Program output: -6                 
Correct output: 22                  | Program output: 47                 
Correct output: -99                 | Program output: -44                
Correct output: 27                  | Program output: 40                 
Correct output: -2                  | Program output: 56                 
Correct output: -33                 | Program output: 84                 
Correct output: -62                 | Program output: -62                
Correct output: -76                 | Program output: 40                 
Correct output: -71                 | Program output: 9                  
Correct output: -47                 | Program output: -36                
Correct output: -90                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -10                
Correct output: -79                 | Program output: 45                 
Correct output: -27                 | Program output: -27                
Correct output: -37                 | Program output: -37                
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: 95                 
Correct output: -99                 | Program output: -99                
Correct output: -52                 | Program output: -52                
Correct output: -71                 | Program output: -25                
Correct output: -17                 | Program output: 90                 
Correct output: -94                 | Program output: -68                
Correct output: -98                 | Program output: -12                
Correct output: -32                 | Program output: 99                 
Correct output: -62                 | Program output: 80                 
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: 76                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_696} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap})
Lexicase best program: (integer_rot exec_empty exec_do*range (integer_fromboolean integer_dup_items integer_flush integer_rot boolean_flush integer_pop integer_mod exec_do*range () in4) exec_empty exec_do*while (exec_when (boolean_rot) exec_swap (exec_k (exec_empty integer_stackdepth boolean_dup_items boolean_dup tag_boolean_696 in3 boolean_yankdup boolean_flush exec_eq exec_dup_times (integer_swap) boolean_invert_second_then_and print_integer integer_swap integer_dup_times exec_y_when_autoconstructing (integer_eq integer_swap)) ()) ()))
Lexicase best errors: [1 0 1 1 0 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 47
Percent parens: 0.234
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_696} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap})
Zero cases best program: (integer_rot exec_empty exec_do*range (integer_fromboolean integer_dup_items integer_flush integer_rot boolean_flush integer_pop integer_mod exec_do*range () in4) exec_empty exec_do*while (exec_when (boolean_rot) exec_swap (exec_k (exec_empty integer_stackdepth boolean_dup_items boolean_dup tag_boolean_696 in3 boolean_yankdup boolean_flush exec_eq exec_dup_times (integer_swap) boolean_invert_second_then_and print_integer integer_swap integer_dup_times exec_y_when_autoconstructing (integer_eq integer_swap)) ()) ()))
Zero cases best errors: [1 0 1 1 0 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 47
Percent parens: 0.234
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 4 3 6 4 3 7 5 3 4)
Population mean number of elite cases: 0.04
Count of perfect (error zero) individuals by case: (3 4 3 6 4 3 7 5 3 4)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction 19} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_shove})
Best program: (integer_dup_times exec_shove (integer_add integer_swap integer_dec integer_mod exec_if (integer_shove boolean_rot) (in3 in3 integer_lte integer_stackdepth) boolean_flush boolean_eq boolean_frominteger boolean_not exec_stackdepth) exec_do*count (exec_k (integer_div boolean_invert_second_then_and) () exec_do*while (integer_max) print_boolean integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) (in2) exec_s (boolean_swap exec_if (print_integer exec_y () integer_mod 19 integer_gt integer_min boolean_empty integer_mod boolean_shove) ()) () ()))
Errors: [0 1 0 1 1 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 50
Size: 66
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 9.958
Median total errors in population: 10
Error averages by case: (0.997 0.996 0.997 0.994 0.996 0.997 0.993 0.995 0.997 0.996)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.029
Average program size in population (points): 68.882
Average percent parens in population: 0.281
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.26
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 475439
--- Timings ---
Current time: 1559314639422 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  4.1%
Reproduction:         0.8 seconds, 32.3%
Fitness Testing:      1.7 seconds, 63.5%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -7                  | Program output: 68                 
Correct output: 74                  | Program output: 92                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 57                 
Correct output: -88                 | Program output: 61                 
Correct output: -49                 | Program output: 30                 
Correct output: 15                  | Program output: 15                 
Correct output: -26                 | Program output: 69                 
Correct output: 28                  | Program output: 64                 
Correct output: -69                 | Program output: -43                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -17                
Correct output: 68                  | Program output: 68                 
Correct output: 51                  | Program output: 51                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 88                 
Correct output: 4                   | Program output: 75                 
Correct output: 15                  | Program output: 15                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 99                 
Correct output: 12                  | Program output: 12                 
Correct output: 32                  | Program output: 32                 
Correct output: 0                   | Program output: 78                 
Correct output: 11                  | Program output: 44                 
Correct output: 55                  | Program output: 55                 
Correct output: 27                  | Program output: 62                 
Correct output: 7                   | Program output: 90                 
Correct output: 15                  | Program output: 29                 
Correct output: 43                  | Program output: 93                 
Correct output: 17                  | Program output: 17                 
Correct output: 33                  | Program output: 55                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 11                 
Correct output: -38                 | Program output: -37                
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: 17                 
Correct output: -72                 | Program output: 1                  
Correct output: -66                 | Program output: 25                 
Correct output: -53                 | Program output: -53                
Correct output: -42                 | Program output: 80                 
Correct output: -83                 | Program output: -55                
Correct output: -80                 | Program output: -80                
Correct output: -27                 | Program output: -4                 
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -44                
Correct output: -77                 | Program output: -77                
Correct output: -86                 | Program output: 48                 
Correct output: -60                 | Program output: -60                
Correct output: -53                 | Program output: -32                
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: 85                 
Correct output: -40                 | Program output: 65                 
Correct output: -88                 | Program output: -29                
Correct output: -63                 | Program output: -58                
Correct output: -56                 | Program output: -56                
Correct output: -46                 | Program output: 81                 
Correct output: -52                 | Program output: 67                 
Correct output: -64                 | Program output: 86                 
Correct output: -72                 | Program output: 6                  
Correct output: -100                | Program output: 31                 
Correct output: -75                 | Program output: 76                 
Correct output: -48                 | Program output: -14                
Correct output: -85                 | Program output: -85                
Correct output: -73                 | Program output: -6                 
Correct output: 22                  | Program output: 47                 
Correct output: -99                 | Program output: -44                
Correct output: 27                  | Program output: 40                 
Correct output: -2                  | Program output: 56                 
Correct output: -33                 | Program output: 84                 
Correct output: -62                 | Program output: -62                
Correct output: -76                 | Program output: 40                 
Correct output: -71                 | Program output: 9                  
Correct output: -47                 | Program output: -36                
Correct output: -90                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -10                
Correct output: -79                 | Program output: 45                 
Correct output: -27                 | Program output: -27                
Correct output: -37                 | Program output: -37                
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: 95                 
Correct output: -99                 | Program output: -99                
Correct output: -52                 | Program output: -52                
Correct output: -71                 | Program output: -25                
Correct output: -17                 | Program output: 90                 
Correct output: -94                 | Program output: -68                
Correct output: -98                 | Program output: -12                
Correct output: -32                 | Program output: 99                 
Correct output: -62                 | Program output: 80                 
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: 76                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction 19} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_shove})
Lexicase best program: (integer_dup_times exec_shove (integer_add integer_swap integer_dec integer_mod exec_if (integer_shove boolean_rot) (in3 in3 integer_lte integer_stackdepth) boolean_flush boolean_eq boolean_frominteger boolean_not exec_stackdepth) exec_do*count (exec_k (integer_div boolean_invert_second_then_and) () exec_do*while (integer_max) print_boolean integer_empty integer_dup_times integer_dup_times boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in2 exec_s (boolean_swap exec_if (print_integer exec_y () integer_mod 19 integer_gt integer_min boolean_empty integer_mod boolean_shove) ()) () ())
Lexicase best errors: [1 0 0 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 61
Percent parens: 0.230
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction 19} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_shove})
Zero cases best program: (integer_dup_times exec_shove (integer_add integer_swap integer_dec integer_mod exec_if (integer_shove boolean_rot) (in3 in3 integer_lte integer_stackdepth) boolean_flush boolean_eq boolean_frominteger boolean_not exec_stackdepth) exec_do*count (exec_k (integer_div boolean_invert_second_then_and) () exec_do*while (integer_max) print_boolean integer_empty integer_dup_times integer_dup_times boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in2 exec_s (boolean_swap exec_if (print_integer exec_y () integer_mod 19 integer_gt integer_min boolean_empty integer_mod boolean_shove) ()) () ())
Zero cases best errors: [1 0 0 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 61
Percent parens: 0.230
--- Lexicase Population Statistics ---
Count of elite individuals by case: (399 347 812 357 347 347 65 398 65 811)
Population mean number of elite cases: 3.95
Count of perfect (error zero) individuals by case: (399 347 812 357 347 347 65 398 65 811)
Population mean number of perfect (error zero) cases: 3.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction in3} {:close 0, :instruction integer_lte} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction 19} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_shove})
Best program: (integer_dup_times exec_shove (integer_add integer_swap integer_dec integer_mod exec_if (integer_shove boolean_rot) (in3 in3 integer_lte integer_stackdepth) boolean_flush boolean_eq boolean_frominteger boolean_not exec_stackdepth) exec_do*count (exec_k (integer_div boolean_invert_second_then_and) () exec_do*while (integer_max) print_boolean integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) (in2) exec_s (boolean_swap exec_if (print_integer exec_y () integer_mod 19 integer_gt integer_min boolean_empty integer_mod boolean_shove) ()) () ()))
Errors: [1 0 0 0 0 0 1 1 1 0]
Total: 4
Mean: 0.4
Genome size: 50
Size: 66
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 6.052
Median total errors in population: 6
Error averages by case: (0.601 0.653 0.188 0.643 0.653 0.653 0.935 0.602 0.935 0.189)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 48.361
Average program size in population (points): 64.959
Average percent parens in population: 0.263
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.514
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 114
Genome diversity (% unique genomes):	 0.533
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 115
Syntactic diversity (% unique Push programs):	 0.526
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1040432
--- Timings ---
Current time: 1559314642314 milliseconds
Total Time:           5.7 seconds
Initialization:       0.1 seconds,  1.9%
Reproduction:         2.4 seconds, 42.2%
Fitness Testing:      2.3 seconds, 40.0%
Report:               0.9 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -7                  | Program output: -7                 
Correct output: 74                  | Program output: 74                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 57                 
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -49                
Correct output: 15                  | Program output: 80                 
Correct output: -26                 | Program output: -26                
Correct output: 28                  | Program output: 64                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -17                
Correct output: 68                  | Program output: 68                 
Correct output: 51                  | Program output: 51                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 83                 
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 18                 
Correct output: 4                   | Program output: 40                 
Correct output: 41                  | Program output: 99                 
Correct output: 22                  | Program output: 22                 
Correct output: 12                  | Program output: 80                 
Correct output: 32                  | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 11                  | Program output: 11                 
Correct output: 55                  | Program output: 82                 
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 80                 
Correct output: 15                  | Program output: 43                 
Correct output: 43                  | Program output: 43                 
Correct output: 17                  | Program output: 17                 
Correct output: 33                  | Program output: 62                 
Correct output: 8                   | Program output: 20                 
Correct output: 7                   | Program output: 76                 
Correct output: 9                   | Program output: 59                 
Correct output: -38                 | Program output: 61                 
Correct output: -77                 | Program output: -55                
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -53                 | Program output: 8                  
Correct output: -42                 | Program output: 20                 
Correct output: -83                 | Program output: -39                
Correct output: -80                 | Program output: 58                 
Correct output: -27                 | Program output: -27                
Correct output: -70                 | Program output: 48                 
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: 40                 
Correct output: -86                 | Program output: -86                
Correct output: -60                 | Program output: 33                 
Correct output: -53                 | Program output: -2                 
Correct output: -85                 | Program output: 85                 
Correct output: -89                 | Program output: -45                
Correct output: -40                 | Program output: -9                 
Correct output: -88                 | Program output: -88                
Correct output: -63                 | Program output: -63                
Correct output: -56                 | Program output: 51                 
Correct output: -46                 | Program output: -46                
Correct output: -52                 | Program output: -16                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: 36                 
Correct output: -100                | Program output: 51                 
Correct output: -75                 | Program output: -75                
Correct output: -48                 | Program output: 21                 
Correct output: -85                 | Program output: 34                 
Correct output: -73                 | Program output: 64                 
Correct output: 22                  | Program output: 59                 
Correct output: -99                 | Program output: -99                
Correct output: 27                  | Program output: 83                 
Correct output: -2                  | Program output: 21                 
Correct output: -33                 | Program output: 5                  
Correct output: -62                 | Program output: 0                  
Correct output: -76                 | Program output: 47                 
Correct output: -71                 | Program output: -71                
Correct output: -47                 | Program output: 95                 
Correct output: -90                 | Program output: -32                
Correct output: -74                 | Program output: -41                
Correct output: -78                 | Program output: -78                
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: 23                 
Correct output: -37                 | Program output: -22                
Correct output: -100                | Program output: 11                 
Correct output: -68                 | Program output: 56                 
Correct output: -10                 | Program output: -10                
Correct output: -99                 | Program output: -28                
Correct output: -52                 | Program output: 40                 
Correct output: -71                 | Program output: -27                
Correct output: -17                 | Program output: 13                 
Correct output: -94                 | Program output: -94                
Correct output: -98                 | Program output: -45                
Correct output: -32                 | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -59                 | Program output: 66                 
Correct output: -98                 | Program output: -35                
Correct output: -40                 | Program output: 26                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_if} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_exec_989} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction -10} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while})
Lexicase best program: (exec_if () (exec_pop () exec_noop boolean_and integer_sub integer_dup_items tag_exec_989 (integer_mult boolean_rot) boolean_invert_second_then_and integer_inc integer_flush integer_swap boolean_and exec_do*count (integer_eq in4 print_integer integer_dup integer_lt) boolean_dup) boolean_frominteger exec_rot (boolean_swap boolean_not exec_stackdepth boolean_xor) (integer_fromboolean exec_stackdepth exec_empty integer_lt) (in4) boolean_dup integer_swap exec_noop exec_if (exec_dup_times (boolean_dup_times integer_eq in1) exec_empty integer_dec -10 exec_when () boolean_dup_times integer_dup_times boolean_swap exec_stackdepth integer_shove integer_div integer_lte integer_fromboolean integer_dec exec_s () (boolean_and integer_pop exec_do*while ()) ()) ())
Lexicase best errors: [0 1 1 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 74
Percent parens: 0.230
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_if} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_exec_989} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction -10} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while})
Zero cases best program: (exec_if () (exec_pop () exec_noop boolean_and integer_sub integer_dup_items tag_exec_989 (integer_mult boolean_rot) boolean_invert_second_then_and integer_inc integer_flush integer_swap boolean_and exec_do*count (integer_eq in4 print_integer integer_dup integer_lt) boolean_dup) boolean_frominteger exec_rot (boolean_swap boolean_not exec_stackdepth boolean_xor) (integer_fromboolean exec_stackdepth exec_empty integer_lt) (in4) boolean_dup integer_swap exec_noop exec_if (exec_dup_times (boolean_dup_times integer_eq in1) exec_empty integer_dec -10 exec_when () boolean_dup_times integer_dup_times boolean_swap exec_stackdepth integer_shove integer_div integer_lte integer_fromboolean integer_dec exec_s () (boolean_and integer_pop exec_do*while ()) ()) ())
Zero cases best errors: [0 1 1 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 74
Percent parens: 0.230
--- Lexicase Population Statistics ---
Count of elite individuals by case: (240 1000 415 240 415 240 240 240 240 240)
Population mean number of elite cases: 3.51
Count of perfect (error zero) individuals by case: (240 0 415 240 415 240 240 240 240 240)
Population mean number of perfect (error zero) cases: 2.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_if} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_exec_989} {:close 0, :instruction integer_mult} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_eq} {:close 0, :instruction in4} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction boolean_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_lt} {:close 1, :instruction in4} {:close 0, :instruction boolean_dup} {:close 1, :instruction integer_swap} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction in1} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction -10} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_div} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_s} {:close 1, :instruction boolean_and} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*while})
Best program: (exec_if () (exec_pop () exec_noop boolean_and integer_sub integer_dup_items tag_exec_989 (integer_mult boolean_rot) boolean_invert_second_then_and integer_inc integer_flush integer_swap boolean_and exec_do*count (integer_eq in4 print_integer integer_dup integer_lt boolean_dup) boolean_frominteger exec_rot (boolean_swap boolean_not exec_stackdepth boolean_xor) (integer_fromboolean exec_stackdepth exec_empty integer_lt) (in4) boolean_dup integer_swap) exec_noop exec_if (exec_dup_times (boolean_dup_times integer_eq in1) exec_empty integer_dec -10 exec_when () boolean_dup_times integer_dup_times boolean_swap exec_stackdepth integer_shove integer_div integer_lte integer_fromboolean integer_dec exec_s (boolean_and) (integer_pop exec_do*while ()) ()) ())
Errors: [0 1 1 0 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 57
Size: 74
Percent parens: 0.230
--- Population Statistics ---
Average total errors in population: 7.49
Median total errors in population: 8
Error averages by case: (0.76 1.0 0.585 0.76 0.585 0.76 0.76 0.76 0.76 0.76)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.852
Average program size in population (points): 61.994
Average percent parens in population: 0.271
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.002
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 112
Genome diversity (% unique genomes):	 0.637
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 116
Syntactic diversity (% unique Push programs):	 0.629
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1578060
--- Timings ---
Current time: 1559314645385 milliseconds
Total Time:           9.1 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         4.6 seconds, 50.3%
Fitness Testing:      2.8 seconds, 30.6%
Report:               1.6 seconds, 18.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -7                  | Program output: 68                 
Correct output: 74                  | Program output: 92                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 57                 
Correct output: -88                 | Program output: 61                 
Correct output: -49                 | Program output: 30                 
Correct output: 15                  | Program output: 15                 
Correct output: -26                 | Program output: 69                 
Correct output: 28                  | Program output: 64                 
Correct output: -69                 | Program output: -43                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -17                
Correct output: 68                  | Program output: 68                 
Correct output: 51                  | Program output: 51                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 88                 
Correct output: 4                   | Program output: 75                 
Correct output: 15                  | Program output: 15                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 99                 
Correct output: 12                  | Program output: 12                 
Correct output: 32                  | Program output: 32                 
Correct output: 0                   | Program output: 78                 
Correct output: 11                  | Program output: 44                 
Correct output: 55                  | Program output: 55                 
Correct output: 27                  | Program output: 62                 
Correct output: 7                   | Program output: 90                 
Correct output: 15                  | Program output: 29                 
Correct output: 43                  | Program output: 93                 
Correct output: 17                  | Program output: 17                 
Correct output: 33                  | Program output: 55                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 11                 
Correct output: -38                 | Program output: -37                
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: 17                 
Correct output: -72                 | Program output: 1                  
Correct output: -66                 | Program output: 25                 
Correct output: -53                 | Program output: -53                
Correct output: -42                 | Program output: 80                 
Correct output: -83                 | Program output: -55                
Correct output: -80                 | Program output: -80                
Correct output: -27                 | Program output: -4                 
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -44                
Correct output: -77                 | Program output: -77                
Correct output: -86                 | Program output: 48                 
Correct output: -60                 | Program output: -60                
Correct output: -53                 | Program output: -32                
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: 85                 
Correct output: -40                 | Program output: 65                 
Correct output: -88                 | Program output: -29                
Correct output: -63                 | Program output: -58                
Correct output: -56                 | Program output: -56                
Correct output: -46                 | Program output: 81                 
Correct output: -52                 | Program output: 67                 
Correct output: -64                 | Program output: 86                 
Correct output: -72                 | Program output: 6                  
Correct output: -100                | Program output: 31                 
Correct output: -75                 | Program output: 76                 
Correct output: -48                 | Program output: -14                
Correct output: -85                 | Program output: -85                
Correct output: -73                 | Program output: -6                 
Correct output: 22                  | Program output: 47                 
Correct output: -99                 | Program output: -44                
Correct output: 27                  | Program output: 40                 
Correct output: -2                  | Program output: 56                 
Correct output: -33                 | Program output: 84                 
Correct output: -62                 | Program output: -62                
Correct output: -76                 | Program output: 40                 
Correct output: -71                 | Program output: 9                  
Correct output: -47                 | Program output: -36                
Correct output: -90                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -10                
Correct output: -79                 | Program output: 45                 
Correct output: -27                 | Program output: -27                
Correct output: -37                 | Program output: -37                
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: 95                 
Correct output: -99                 | Program output: -99                
Correct output: -52                 | Program output: -52                
Correct output: -71                 | Program output: -25                
Correct output: -17                 | Program output: 90                 
Correct output: -94                 | Program output: -68                
Correct output: -98                 | Program output: -12                
Correct output: -32                 | Program output: 99                 
Correct output: -62                 | Program output: 80                 
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: 76                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup} {:close 2, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction tagged_160} {:close 1, :instruction exec_k} {:close 0, :instruction tag_boolean_854} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_dup_items} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 1, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction tagged_885} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction -76} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq})
Lexicase best program: (integer_dup integer_add integer_dup_times exec_k (exec_do*times (print_boolean boolean_swap print_boolean integer_dup_times boolean_and tagged_160 exec_k () (tag_boolean_854 integer_lte integer_dec exec_s () (boolean_frominteger boolean_dup integer_dup_items integer_gt) (exec_dup_items boolean_or exec_y_when_autoconstructing (boolean_not) integer_yank boolean_dup_times print_boolean boolean_not integer_yankdup exec_yankdup boolean_and exec_while (boolean_invert_first_then_and integer_empty boolean_stackdepth) integer_max boolean_empty integer_lte integer_inc boolean_pop) exec_stackdepth exec_do*range (boolean_xor integer_gt) exec_s_when_autoconstructing (integer_flush) (boolean_dup_items) (exec_noop)) exec_swap (integer_dup_times exec_when (print_boolean boolean_dup exec_do*range (boolean_pop in2) boolean_shove print_integer integer_mod) boolean_and exec_while (boolean_yank tagged_885 integer_max) exec_dup (integer_sub -76 integer_fromboolean integer_max integer_dup) integer_div integer_fromboolean integer_rot integer_pop integer_div exec_swap () (exec_y_when_autoconstructing (integer_shove) boolean_not boolean_shove integer_gte boolean_invert_first_then_and boolean_or integer_min) integer_gt integer_add exec_eq) ())) ())
Lexicase best errors: [1 1 1 0 0 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 111
Percent parens: 0.216
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup} {:close 2, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction tagged_160} {:close 1, :instruction exec_k} {:close 0, :instruction tag_boolean_854} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_dup_items} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 1, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction tagged_885} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction -76} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq})
Zero cases best program: (integer_dup integer_add integer_dup_times exec_k (exec_do*times (print_boolean boolean_swap print_boolean integer_dup_times boolean_and tagged_160 exec_k () (tag_boolean_854 integer_lte integer_dec exec_s () (boolean_frominteger boolean_dup integer_dup_items integer_gt) (exec_dup_items boolean_or exec_y_when_autoconstructing (boolean_not) integer_yank boolean_dup_times print_boolean boolean_not integer_yankdup exec_yankdup boolean_and exec_while (boolean_invert_first_then_and integer_empty boolean_stackdepth) integer_max boolean_empty integer_lte integer_inc boolean_pop) exec_stackdepth exec_do*range (boolean_xor integer_gt) exec_s_when_autoconstructing (integer_flush) (boolean_dup_items) (exec_noop)) exec_swap (integer_dup_times exec_when (print_boolean boolean_dup exec_do*range (boolean_pop in2) boolean_shove print_integer integer_mod) boolean_and exec_while (boolean_yank tagged_885 integer_max) exec_dup (integer_sub -76 integer_fromboolean integer_max integer_dup) integer_div integer_fromboolean integer_rot integer_pop integer_div exec_swap () (exec_y_when_autoconstructing (integer_shove) boolean_not boolean_shove integer_gte boolean_invert_first_then_and boolean_or integer_min) integer_gt integer_add exec_eq) ())) ())
Zero cases best errors: [1 1 1 0 0 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 111
Percent parens: 0.216
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 701 702 173 174 174 701 174 1000 173)
Population mean number of elite cases: 3.97
Count of perfect (error zero) individuals by case: (1 701 702 173 174 174 701 174 0 173)
Population mean number of perfect (error zero) cases: 2.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dup} {:close 2, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction tagged_160} {:close 1, :instruction exec_k} {:close 0, :instruction tag_boolean_854} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_dup_items} {:close 2, :instruction exec_noop} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 1, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction tagged_885} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction -76} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_add} {:close 0, :instruction exec_eq})
Best program: (integer_dup integer_add integer_dup_times exec_k (exec_do*times (print_boolean boolean_swap print_boolean integer_dup_times boolean_and tagged_160 exec_k () (tag_boolean_854 integer_lte integer_dec exec_s () (boolean_frominteger boolean_dup integer_dup_items integer_gt) (exec_dup_items boolean_or exec_y_when_autoconstructing (boolean_not) integer_yank boolean_dup_times print_boolean boolean_not integer_yankdup exec_yankdup boolean_and exec_while (boolean_invert_first_then_and integer_empty boolean_stackdepth) integer_max boolean_and integer_lte integer_inc boolean_pop) exec_stackdepth exec_do*range (boolean_xor integer_gt) exec_s_when_autoconstructing (integer_flush) (boolean_dup_items) (exec_noop)) exec_swap (integer_dup_times exec_when (print_boolean boolean_dup exec_do*range (boolean_pop in2) boolean_shove print_integer integer_mod) boolean_and exec_while (boolean_yank tagged_885 integer_max) exec_dup (integer_sub -76 integer_fromboolean integer_max integer_dup) integer_div integer_fromboolean integer_rot integer_pop integer_div exec_swap () (exec_y_when_autoconstructing (integer_shove) boolean_not boolean_shove integer_gte boolean_invert_first_then_and boolean_or integer_min) integer_gt integer_add exec_eq) ())) ())
Errors: [1 1 1 0 0 0 1 0 1 0]
Total: 5
Mean: 0.5
Genome size: 87
Size: 111
Percent parens: 0.216
--- Population Statistics ---
Average total errors in population: 7.027
Median total errors in population: 7
Error averages by case: (0.999 0.299 0.298 0.827 0.826 0.826 0.299 0.826 1.0 0.827)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 44.066
Average program size in population (points): 60.328
Average percent parens in population: 0.270
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.472
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 110
Genome diversity (% unique genomes):	 0.641
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 119
Syntactic diversity (% unique Push programs):	 0.63
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2146067
--- Timings ---
Current time: 1559314648323 milliseconds
Total Time:          12.0 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         6.7 seconds, 55.5%
Fitness Testing:      3.3 seconds, 27.2%
Report:               2.0 seconds, 16.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -7                  | Program output: -7                 
Correct output: 74                  | Program output: 74                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 57                 
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -49                
Correct output: 15                  | Program output: 80                 
Correct output: -26                 | Program output: -26                
Correct output: 28                  | Program output: 64                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -17                
Correct output: 68                  | Program output: 68                 
Correct output: 51                  | Program output: 51                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 83                 
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 18                 
Correct output: 4                   | Program output: 40                 
Correct output: 41                  | Program output: 99                 
Correct output: 22                  | Program output: 22                 
Correct output: 12                  | Program output: 80                 
Correct output: 32                  | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 11                  | Program output: 11                 
Correct output: 55                  | Program output: 82                 
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 80                 
Correct output: 15                  | Program output: 43                 
Correct output: 43                  | Program output: 43                 
Correct output: 17                  | Program output: 17                 
Correct output: 33                  | Program output: 62                 
Correct output: 8                   | Program output: 20                 
Correct output: 7                   | Program output: 76                 
Correct output: 9                   | Program output: 59                 
Correct output: -38                 | Program output: 61                 
Correct output: -77                 | Program output: -55                
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -53                 | Program output: 8                  
Correct output: -42                 | Program output: 20                 
Correct output: -83                 | Program output: -39                
Correct output: -80                 | Program output: 58                 
Correct output: -27                 | Program output: -27                
Correct output: -70                 | Program output: 48                 
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: 40                 
Correct output: -86                 | Program output: -86                
Correct output: -60                 | Program output: 33                 
Correct output: -53                 | Program output: -2                 
Correct output: -85                 | Program output: 85                 
Correct output: -89                 | Program output: -45                
Correct output: -40                 | Program output: -9                 
Correct output: -88                 | Program output: -88                
Correct output: -63                 | Program output: -63                
Correct output: -56                 | Program output: 51                 
Correct output: -46                 | Program output: -46                
Correct output: -52                 | Program output: -16                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: 36                 
Correct output: -100                | Program output: 51                 
Correct output: -75                 | Program output: -75                
Correct output: -48                 | Program output: 21                 
Correct output: -85                 | Program output: 34                 
Correct output: -73                 | Program output: 64                 
Correct output: 22                  | Program output: 59                 
Correct output: -99                 | Program output: -99                
Correct output: 27                  | Program output: 83                 
Correct output: -2                  | Program output: 21                 
Correct output: -33                 | Program output: 5                  
Correct output: -62                 | Program output: 0                  
Correct output: -76                 | Program output: 47                 
Correct output: -71                 | Program output: -71                
Correct output: -47                 | Program output: 95                 
Correct output: -90                 | Program output: -32                
Correct output: -74                 | Program output: -41                
Correct output: -78                 | Program output: -78                
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: 23                 
Correct output: -37                 | Program output: -22                
Correct output: -100                | Program output: 11                 
Correct output: -68                 | Program output: 56                 
Correct output: -10                 | Program output: -10                
Correct output: -99                 | Program output: -28                
Correct output: -52                 | Program output: 40                 
Correct output: -71                 | Program output: -27                
Correct output: -17                 | Program output: 13                 
Correct output: -94                 | Program output: -94                
Correct output: -98                 | Program output: -45                
Correct output: -32                 | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -59                 | Program output: 66                 
Correct output: -98                 | Program output: -35                
Correct output: -40                 | Program output: 26                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 1, :instruction in4} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot})
Lexicase best program: (integer_dup_times exec_when () boolean_frominteger exec_y_when_autoconstructing (integer_pop integer_inc exec_do*count (integer_yankdup integer_dup boolean_pop boolean_not) in4) print_integer boolean_rot exec_flush in4 exec_y (exec_pop () exec_rot (print_exec (exec_k_when_autoconstructing (in3 exec_do*while (integer_gte integer_shove print_integer) boolean_xor boolean_yank) (boolean_dup exec_do*while () exec_y () exec_yankdup boolean_dup) exec_while (boolean_dup_times) integer_min exec_shove (integer_rot))) () ()))
Lexicase best errors: [0 1 1 1 0 1 0 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 55
Percent parens: 0.309
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_flush} {:close 1, :instruction in4} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_shove} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_yank} {:close 0, :instruction boolean_dup} {:close 1, :instruction exec_do*while} {:close 1, :instruction exec_y} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_rot})
Zero cases best program: (integer_dup_times exec_when () boolean_frominteger exec_y_when_autoconstructing (integer_pop integer_inc exec_do*count (integer_yankdup integer_dup boolean_pop boolean_not) in4) print_integer boolean_rot exec_flush in4 exec_y (exec_pop () exec_rot (print_exec (exec_k_when_autoconstructing (in3 exec_do*while (integer_gte integer_shove print_integer) boolean_xor boolean_yank) (boolean_dup exec_do*while () exec_y () exec_yankdup boolean_dup) exec_while (boolean_dup_times) integer_min exec_shove (integer_rot))) () ()))
Zero cases best errors: [0 1 1 1 0 1 0 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 55
Percent parens: 0.309
--- Lexicase Population Statistics ---
Count of elite individuals by case: (382 455 2 456 272 2 273 2 271 840)
Population mean number of elite cases: 2.95
Count of perfect (error zero) individuals by case: (382 455 2 456 272 2 273 2 271 840)
Population mean number of perfect (error zero) cases: 2.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction integer_rot})
Best program: (integer_div integer_pop integer_gte integer_eq boolean_invert_first_then_and exec_dup (exec_rot (boolean_dup in4 exec_y (boolean_swap boolean_dup_times exec_dup (boolean_or integer_mod) boolean_xor print_integer integer_rot)) () ()))
Errors: [0 1 1 1 0 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 18
Size: 25
Percent parens: 0.280
--- Population Statistics ---
Average total errors in population: 7.045
Median total errors in population: 7
Error averages by case: (0.618 0.545 0.998 0.544 0.728 0.998 0.727 0.998 0.729 0.16)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.7
Average program size in population (points): 54.993
Average percent parens in population: 0.268
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 6.090625
Median age in population: 6.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 87
Genome diversity (% unique genomes):	 0.619
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 89
Syntactic diversity (% unique Push programs):	 0.611
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2623306
--- Timings ---
Current time: 1559314651502 milliseconds
Total Time:          14.8 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.6 seconds, 58.3%
Fitness Testing:      3.7 seconds, 25.1%
Report:               2.4 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -7                  | Program output: -7                 
Correct output: 74                  | Program output: 74                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 57                 
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -49                
Correct output: 15                  | Program output: 80                 
Correct output: -26                 | Program output: -26                
Correct output: 28                  | Program output: 64                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -17                
Correct output: 68                  | Program output: 68                 
Correct output: 51                  | Program output: 51                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 83                 
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 18                 
Correct output: 4                   | Program output: 40                 
Correct output: 41                  | Program output: 99                 
Correct output: 22                  | Program output: 22                 
Correct output: 12                  | Program output: 80                 
Correct output: 32                  | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 11                  | Program output: 11                 
Correct output: 55                  | Program output: 82                 
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 80                 
Correct output: 15                  | Program output: 43                 
Correct output: 43                  | Program output: 43                 
Correct output: 17                  | Program output: 17                 
Correct output: 33                  | Program output: 62                 
Correct output: 8                   | Program output: 20                 
Correct output: 7                   | Program output: 76                 
Correct output: 9                   | Program output: 59                 
Correct output: -38                 | Program output: 61                 
Correct output: -77                 | Program output: -55                
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -53                 | Program output: 8                  
Correct output: -42                 | Program output: 20                 
Correct output: -83                 | Program output: -39                
Correct output: -80                 | Program output: 58                 
Correct output: -27                 | Program output: -27                
Correct output: -70                 | Program output: 48                 
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: 40                 
Correct output: -86                 | Program output: -86                
Correct output: -60                 | Program output: 33                 
Correct output: -53                 | Program output: -2                 
Correct output: -85                 | Program output: 85                 
Correct output: -89                 | Program output: -45                
Correct output: -40                 | Program output: -9                 
Correct output: -88                 | Program output: -88                
Correct output: -63                 | Program output: -63                
Correct output: -56                 | Program output: 51                 
Correct output: -46                 | Program output: -46                
Correct output: -52                 | Program output: -16                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: 36                 
Correct output: -100                | Program output: 51                 
Correct output: -75                 | Program output: -75                
Correct output: -48                 | Program output: 21                 
Correct output: -85                 | Program output: 34                 
Correct output: -73                 | Program output: 64                 
Correct output: 22                  | Program output: 59                 
Correct output: -99                 | Program output: -99                
Correct output: 27                  | Program output: 83                 
Correct output: -2                  | Program output: 21                 
Correct output: -33                 | Program output: 5                  
Correct output: -62                 | Program output: 0                  
Correct output: -76                 | Program output: 47                 
Correct output: -71                 | Program output: -71                
Correct output: -47                 | Program output: 95                 
Correct output: -90                 | Program output: -32                
Correct output: -74                 | Program output: -41                
Correct output: -78                 | Program output: -78                
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: 23                 
Correct output: -37                 | Program output: -22                
Correct output: -100                | Program output: 11                 
Correct output: -68                 | Program output: 56                 
Correct output: -10                 | Program output: -10                
Correct output: -99                 | Program output: -28                
Correct output: -52                 | Program output: 40                 
Correct output: -71                 | Program output: -27                
Correct output: -17                 | Program output: 13                 
Correct output: -94                 | Program output: -94                
Correct output: -98                 | Program output: -45                
Correct output: -32                 | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -59                 | Program output: 66                 
Correct output: -98                 | Program output: -35                
Correct output: -40                 | Program output: 26                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y})
Lexicase best program: (integer_div integer_pop integer_gte integer_eq boolean_invert_first_then_and exec_dup (exec_rot (boolean_dup in4 exec_y (boolean_swap boolean_dup_times exec_dup (boolean_or integer_mod boolean_xor print_integer exec_y ()))) () ()))
Lexicase best errors: [0 0 1 0 1 0 1 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 26
Percent parens: 0.308
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_xor} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y})
Zero cases best program: (integer_div integer_pop integer_gte integer_eq boolean_invert_first_then_and exec_dup (exec_rot (boolean_dup in4 exec_y (boolean_swap boolean_dup_times exec_dup (boolean_or integer_mod boolean_xor print_integer exec_y ()))) () ()))
Zero cases best errors: [0 0 1 0 1 0 1 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 26
Percent parens: 0.308
--- Lexicase Population Statistics ---
Count of elite individuals by case: (361 362 1000 361 278 361 1000 278 199 200)
Population mean number of elite cases: 4.40
Count of perfect (error zero) individuals by case: (361 362 0 361 278 361 0 278 199 200)
Population mean number of perfect (error zero) cases: 2.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_when} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 1, :instruction in4} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_shove} {:close 1, :instruction tagged_514} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction tagged_835} {:close 0, :instruction integer_yankdup} {:close 0, :instruction tag_integer_392} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_gt} {:close 1, :instruction in4} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_div} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_shove} {:close 1, :instruction exec_do*times} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 0, :instruction print_newline} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_lte})
Best program: (integer_dup_times exec_when () boolean_frominteger exec_y_when_autoconstructing (print_integer integer_inc exec_do*count (integer_yankdup integer_dup boolean_pop boolean_not) in4) print_integer print_integer exec_flush in4 exec_y (exec_pop () exec_rot (print_exec (boolean_invert_second_then_and integer_shove)) (tagged_514) (exec_shove (exec_noop integer_swap exec_flush) exec_dup (boolean_invert_first_then_and) boolean_eq exec_while (integer_yankdup integer_lte exec_dup_items integer_mod boolean_rot integer_add exec_y (exec_if (boolean_dup_times boolean_dup_items exec_y (boolean_invert_second_then_and exec_y_when_autoconstructing (exec_when () integer_empty print_boolean exec_y_when_autoconstructing (boolean_pop boolean_rot boolean_frominteger tagged_835 integer_yankdup tag_integer_392 integer_max boolean_not integer_gt in4) integer_lt) integer_mult exec_pop (integer_div integer_dup exec_shove (exec_do*times () integer_lte) integer_fromboolean boolean_empty boolean_dup_items boolean_dup_times boolean_pop in2 print_newline exec_stackdepth exec_k (integer_shove boolean_invert_first_then_and boolean_or boolean_flush) (integer_lte)))) ())))))
Errors: [0 0 1 0 1 0 1 1 1 1]
Total: 6
Mean: 0.6
Genome size: 80
Size: 105
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 7.6
Median total errors in population: 8
Error averages by case: (0.639 0.638 1.0 0.639 0.722 0.639 1.0 0.722 0.801 0.8)
Error minima by case: (0 0 1 0 0 0 1 0 0 0)
Average genome size in population (length): 43.197
Average program size in population (points): 58.39
Average percent parens in population: 0.263
Minimum age in population: 5.0
Maximum age in population: 9.1875
Average age in population: 7.6986875
Median age in population: 7.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 93
Genome diversity (% unique genomes):	 0.627
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.62
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3283522
--- Timings ---
Current time: 1559314654303 milliseconds
Total Time:          18.2 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.6 seconds, 58.4%
Fitness Testing:      4.3 seconds, 23.8%
Report:               3.1 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -7                  | Program output: -7                 
Correct output: 74                  | Program output: 74                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 57                 
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -49                
Correct output: 15                  | Program output: 80                 
Correct output: -26                 | Program output: -26                
Correct output: 28                  | Program output: 64                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -17                
Correct output: 68                  | Program output: 68                 
Correct output: 51                  | Program output: 51                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 83                 
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 18                 
Correct output: 4                   | Program output: 40                 
Correct output: 41                  | Program output: 99                 
Correct output: 22                  | Program output: 22                 
Correct output: 12                  | Program output: 80                 
Correct output: 32                  | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 11                  | Program output: 11                 
Correct output: 55                  | Program output: 82                 
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 80                 
Correct output: 15                  | Program output: 43                 
Correct output: 43                  | Program output: 43                 
Correct output: 17                  | Program output: 17                 
Correct output: 33                  | Program output: 62                 
Correct output: 8                   | Program output: 20                 
Correct output: 7                   | Program output: 76                 
Correct output: 9                   | Program output: 59                 
Correct output: -38                 | Program output: 61                 
Correct output: -77                 | Program output: -55                
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -53                 | Program output: 8                  
Correct output: -42                 | Program output: 20                 
Correct output: -83                 | Program output: -39                
Correct output: -80                 | Program output: 58                 
Correct output: -27                 | Program output: -27                
Correct output: -70                 | Program output: 48                 
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: 40                 
Correct output: -86                 | Program output: -86                
Correct output: -60                 | Program output: 33                 
Correct output: -53                 | Program output: -2                 
Correct output: -85                 | Program output: 85                 
Correct output: -89                 | Program output: -45                
Correct output: -40                 | Program output: -9                 
Correct output: -88                 | Program output: -88                
Correct output: -63                 | Program output: -63                
Correct output: -56                 | Program output: 51                 
Correct output: -46                 | Program output: -46                
Correct output: -52                 | Program output: -16                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: 36                 
Correct output: -100                | Program output: 51                 
Correct output: -75                 | Program output: -75                
Correct output: -48                 | Program output: 21                 
Correct output: -85                 | Program output: 34                 
Correct output: -73                 | Program output: 64                 
Correct output: 22                  | Program output: 59                 
Correct output: -99                 | Program output: -99                
Correct output: 27                  | Program output: 83                 
Correct output: -2                  | Program output: 21                 
Correct output: -33                 | Program output: 5                  
Correct output: -62                 | Program output: 0                  
Correct output: -76                 | Program output: 47                 
Correct output: -71                 | Program output: -71                
Correct output: -47                 | Program output: 95                 
Correct output: -90                 | Program output: -32                
Correct output: -74                 | Program output: -41                
Correct output: -78                 | Program output: -78                
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: 23                 
Correct output: -37                 | Program output: -22                
Correct output: -100                | Program output: 11                 
Correct output: -68                 | Program output: 56                 
Correct output: -10                 | Program output: -10                
Correct output: -99                 | Program output: -28                
Correct output: -52                 | Program output: 40                 
Correct output: -71                 | Program output: -27                
Correct output: -17                 | Program output: 13                 
Correct output: -94                 | Program output: -94                
Correct output: -98                 | Program output: -45                
Correct output: -32                 | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -59                 | Program output: 66                 
Correct output: -98                 | Program output: -35                
Correct output: -40                 | Program output: 26                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 1, :instruction in4} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_shove} {:close 1, :instruction tagged_514} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_if} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot})
Lexicase best program: (integer_dup_times exec_when () exec_do*while (exec_y_when_autoconstructing (integer_pop integer_inc exec_do*count (integer_yankdup integer_dup boolean_pop boolean_not) in4) print_integer print_integer) exec_flush in4 exec_y (exec_pop () exec_rot (print_exec (boolean_invert_second_then_and integer_shove)) (tagged_514) (exec_shove (exec_noop in4 exec_rot (boolean_or integer_gt boolean_yank exec_if (exec_rot () (exec_yank exec_rot (integer_inc boolean_invert_second_then_and exec_s_when_autoconstructing (exec_when (integer_swap exec_flush) exec_dup (boolean_invert_first_then_and) boolean_eq exec_while (integer_yankdup integer_lte exec_dup_items integer_mod boolean_rot integer_add exec_y (in3 boolean_dup_times boolean_dup_items exec_y (boolean_invert_second_then_and exec_y_when_autoconstructing (exec_when () integer_empty print_boolean exec_y_when_autoconstructing (boolean_pop boolean_rot)))))) () ()) () ()) ()) ()) () ()))))
Lexicase best errors: [0 0 1 1 0 0 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 97
Percent parens: 0.351
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_times} {:close 1, :instruction exec_when} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 1, :instruction in4} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_shove} {:close 1, :instruction tagged_514} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_if} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_add} {:close 0, :instruction exec_y} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_when} {:close 0, :instruction integer_empty} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot})
Zero cases best program: (integer_dup_times exec_when () exec_do*while (exec_y_when_autoconstructing (integer_pop integer_inc exec_do*count (integer_yankdup integer_dup boolean_pop boolean_not) in4) print_integer print_integer) exec_flush in4 exec_y (exec_pop () exec_rot (print_exec (boolean_invert_second_then_and integer_shove)) (tagged_514) (exec_shove (exec_noop in4 exec_rot (boolean_or integer_gt boolean_yank exec_if (exec_rot () (exec_yank exec_rot (integer_inc boolean_invert_second_then_and exec_s_when_autoconstructing (exec_when (integer_swap exec_flush) exec_dup (boolean_invert_first_then_and) boolean_eq exec_while (integer_yankdup integer_lte exec_dup_items integer_mod boolean_rot integer_add exec_y (in3 boolean_dup_times boolean_dup_items exec_y (boolean_invert_second_then_and exec_y_when_autoconstructing (exec_when () integer_empty print_boolean exec_y_when_autoconstructing (boolean_pop boolean_rot)))))) () ()) () ()) ()) ()) () ()))))
Zero cases best errors: [0 0 1 1 0 0 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 97
Percent parens: 0.351
--- Lexicase Population Statistics ---
Count of elite individuals by case: (856 439 2 198 439 439 218 197 856 2)
Population mean number of elite cases: 3.65
Count of perfect (error zero) individuals by case: (856 439 2 198 439 439 218 197 856 2)
Population mean number of perfect (error zero) cases: 3.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_pop} {:close 1, :instruction boolean_not} {:close 1, :instruction in4} {:close 0, :instruction print_integer} {:close 1, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 1, :instruction in4} {:close 0, :instruction exec_y} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction print_exec} {:close 0, :instruction boolean_invert_second_then_and} {:close 2, :instruction integer_shove} {:close 1, :instruction tagged_514} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_noop} {:close 0, :instruction in4} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_when} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_while} {:close 0, :instruction integer_yankdup})
Best program: (integer_rot exec_empty exec_do*range (integer_fromboolean integer_dup_items integer_flush integer_rot boolean_flush integer_pop integer_mod integer_inc exec_do*count (integer_yankdup integer_dup boolean_pop boolean_not) in4) print_integer print_integer exec_flush in4 exec_y (exec_pop () exec_rot (print_exec (boolean_invert_second_then_and integer_shove)) (tagged_514) (exec_shove (exec_noop in4 exec_rot (exec_when () integer_swap exec_flush) (exec_dup (boolean_invert_first_then_and) boolean_eq exec_while (integer_yankdup)) ()))))
Errors: [0 0 1 1 0 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 40
Size: 56
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 6.354
Median total errors in population: 6
Error averages by case: (0.144 0.561 0.998 0.802 0.561 0.561 0.782 0.803 0.144 0.998)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.016
Average program size in population (points): 55.777
Average percent parens in population: 0.267
Minimum age in population: 6.25
Maximum age in population: 10.78125
Average age in population: 9.1376875
Median age in population: 9.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 48
Genome diversity (% unique genomes):	 0.722
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 49
Syntactic diversity (% unique Push programs):	 0.713
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 3921561
--- Timings ---
Current time: 1559314657307 milliseconds
Total Time:          21.2 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.8 seconds, 60.6%
Fitness Testing:      4.9 seconds, 23.1%
Report:               3.3 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -7                  | Program output: 68                 
Correct output: 74                  | Program output: 74                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -49                
Correct output: 15                  | Program output: 15                 
Correct output: -26                 | Program output: 69                 
Correct output: 28                  | Program output: 64                 
Correct output: -69                 | Program output: -43                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -17                
Correct output: 68                  | Program output: 68                 
Correct output: 51                  | Program output: 51                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 34                 
Correct output: 4                   | Program output: 59                 
Correct output: 15                  | Program output: 43                 
Correct output: 4                   | Program output: 22                 
Correct output: 41                  | Program output: 88                 
Correct output: 22                  | Program output: 55                 
Correct output: 12                  | Program output: 75                 
Correct output: 32                  | Program output: 37                 
Correct output: 0                   | Program output: 80                 
Correct output: 11                  | Program output: 46                 
Correct output: 55                  | Program output: 68                 
Correct output: 27                  | Program output: 28                 
Correct output: 7                   | Program output: 10                 
Correct output: 15                  | Program output: 88                 
Correct output: 43                  | Program output: 62                 
Correct output: 17                  | Program output: 99                 
Correct output: 33                  | Program output: 77                 
Correct output: 8                   | Program output: 39                 
Correct output: 7                   | Program output: 16                 
Correct output: 9                   | Program output: 9                  
Correct output: -38                 | Program output: -38                
Correct output: -77                 | Program output: -49                
Correct output: -36                 | Program output: 25                 
Correct output: -72                 | Program output: 59                 
Correct output: -66                 | Program output: 73                 
Correct output: -53                 | Program output: -11                
Correct output: -42                 | Program output: 18                 
Correct output: -83                 | Program output: -83                
Correct output: -80                 | Program output: 76                 
Correct output: -27                 | Program output: 22                 
Correct output: -70                 | Program output: 64                 
Correct output: -81                 | Program output: -33                
Correct output: -77                 | Program output: 85                 
Correct output: -86                 | Program output: -69                
Correct output: -60                 | Program output: 34                 
Correct output: -53                 | Program output: -53                
Correct output: -85                 | Program output: 86                 
Correct output: -89                 | Program output: 30                 
Correct output: -40                 | Program output: -40                
Correct output: -88                 | Program output: 32                 
Correct output: -63                 | Program output: 40                 
Correct output: -56                 | Program output: -44                
Correct output: -46                 | Program output: 76                 
Correct output: -52                 | Program output: -52                
Correct output: -64                 | Program output: -43                
Correct output: -72                 | Program output: -72                
Correct output: -100                | Program output: 30                 
Correct output: -75                 | Program output: 97                 
Correct output: -48                 | Program output: -48                
Correct output: -85                 | Program output: 93                 
Correct output: -73                 | Program output: -73                
Correct output: 22                  | Program output: 84                 
Correct output: -99                 | Program output: -31                
Correct output: 27                  | Program output: 27                 
Correct output: -2                  | Program output: -2                 
Correct output: -33                 | Program output: 25                 
Correct output: -62                 | Program output: 0                  
Correct output: -76                 | Program output: -41                
Correct output: -71                 | Program output: 14                 
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: 37                 
Correct output: -78                 | Program output: -8                 
Correct output: -79                 | Program output: 87                 
Correct output: -27                 | Program output: 79                 
Correct output: -37                 | Program output: 90                 
Correct output: -100                | Program output: -24                
Correct output: -68                 | Program output: -48                
Correct output: -10                 | Program output: 37                 
Correct output: -99                 | Program output: -66                
Correct output: -52                 | Program output: -47                
Correct output: -71                 | Program output: -71                
Correct output: -17                 | Program output: -17                
Correct output: -94                 | Program output: -50                
Correct output: -98                 | Program output: 35                 
Correct output: -32                 | Program output: 19                 
Correct output: -62                 | Program output: -60                
Correct output: -59                 | Program output: 87                 
Correct output: -98                 | Program output: -35                
Correct output: -40                 | Program output: -40                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction 19} {:close 0, :instruction integer_gt})
Lexicase best program: (integer_dup_times exec_shove (integer_add integer_swap integer_dec integer_mod exec_if (integer_shove boolean_rot) (in3 exec_yank boolean_dup boolean_not exec_stackdepth) exec_do*count (exec_k (integer_div integer_min exec_if (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) (in2) exec_s (boolean_swap in1 print_integer exec_y () integer_mod 19 integer_gt) () ()) ())))
Lexicase best errors: [0 0 1 0 1 0 1 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 47
Percent parens: 0.277
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup_times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 1, :instruction boolean_rot} {:close 0, :instruction in3} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_not} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 0, :instruction integer_div} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction 19} {:close 0, :instruction integer_gt})
Zero cases best program: (integer_dup_times exec_shove (integer_add integer_swap integer_dec integer_mod exec_if (integer_shove boolean_rot) (in3 exec_yank boolean_dup boolean_not exec_stackdepth) exec_do*count (exec_k (integer_div integer_min exec_if (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) (in2) exec_s (boolean_swap in1 print_integer exec_y () integer_mod 19 integer_gt) () ()) ())))
Zero cases best errors: [0 0 1 0 1 0 1 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 47
Percent parens: 0.277
--- Lexicase Population Statistics ---
Count of elite individuals by case: (183 182 355 182 354 834 119 182 354 121)
Population mean number of elite cases: 2.87
Count of perfect (error zero) individuals by case: (183 182 355 182 354 834 119 182 354 121)
Population mean number of perfect (error zero) cases: 2.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_do*range} {:close 1, :instruction integer_mult} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_when} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_696} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction 19} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max})
Best program: (integer_rot exec_empty exec_do*range (integer_fromboolean integer_dup_items integer_flush integer_rot boolean_flush integer_pop integer_mod exec_do*range () integer_mult) exec_empty exec_do*while (exec_when (boolean_rot) exec_swap (exec_k (integer_yankdup integer_stackdepth boolean_dup_items boolean_dup tag_boolean_696 integer_div boolean_invert_second_then_and) () exec_do*while (integer_max) print_boolean integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (in2) exec_s (boolean_swap exec_if (print_integer exec_y () integer_mod 19 integer_gt integer_min boolean_empty integer_mod integer_max) ()) () ()) ()))
Errors: [0 0 1 0 1 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 53
Size: 71
Percent parens: 0.254
--- Population Statistics ---
Average total errors in population: 7.134
Median total errors in population: 6
Error averages by case: (0.817 0.818 0.645 0.818 0.646 0.166 0.881 0.818 0.646 0.879)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.279
Average program size in population (points): 54.478
Average percent parens in population: 0.259
Minimum age in population: 7.75
Maximum age in population: 12.40625
Average age in population: 10.41096875
Median age in population: 10.46875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 63
Genome diversity (% unique genomes):	 0.709
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.701
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4509231
--- Timings ---
Current time: 1559314660562 milliseconds
Total Time:          24.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        14.9 seconds, 62.1%
Fitness Testing:      5.4 seconds, 22.6%
Report:               3.6 seconds, 14.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 640
Test mean error for best: 0.64000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -7                  | Program output: 68                 
Correct output: 74                  | Program output: 92                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 57                 
Correct output: -88                 | Program output: 61                 
Correct output: -49                 | Program output: 30                 
Correct output: 15                  | Program output: 15                 
Correct output: -26                 | Program output: 69                 
Correct output: 28                  | Program output: 64                 
Correct output: -69                 | Program output: -43                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -17                
Correct output: 68                  | Program output: 68                 
Correct output: 51                  | Program output: 51                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 88                 
Correct output: 4                   | Program output: 75                 
Correct output: 15                  | Program output: 15                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 99                 
Correct output: 12                  | Program output: 12                 
Correct output: 32                  | Program output: 32                 
Correct output: 0                   | Program output: 78                 
Correct output: 11                  | Program output: 44                 
Correct output: 55                  | Program output: 55                 
Correct output: 27                  | Program output: 62                 
Correct output: 7                   | Program output: 90                 
Correct output: 15                  | Program output: 29                 
Correct output: 43                  | Program output: 93                 
Correct output: 17                  | Program output: 17                 
Correct output: 33                  | Program output: 55                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 11                 
Correct output: -38                 | Program output: -37                
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: 17                 
Correct output: -72                 | Program output: 1                  
Correct output: -66                 | Program output: 25                 
Correct output: -53                 | Program output: -53                
Correct output: -42                 | Program output: 80                 
Correct output: -83                 | Program output: -55                
Correct output: -80                 | Program output: -80                
Correct output: -27                 | Program output: -4                 
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -44                
Correct output: -77                 | Program output: -77                
Correct output: -86                 | Program output: 48                 
Correct output: -60                 | Program output: -60                
Correct output: -53                 | Program output: -32                
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: 85                 
Correct output: -40                 | Program output: 65                 
Correct output: -88                 | Program output: -29                
Correct output: -63                 | Program output: -58                
Correct output: -56                 | Program output: -56                
Correct output: -46                 | Program output: 81                 
Correct output: -52                 | Program output: 67                 
Correct output: -64                 | Program output: 86                 
Correct output: -72                 | Program output: 6                  
Correct output: -100                | Program output: 31                 
Correct output: -75                 | Program output: 76                 
Correct output: -48                 | Program output: -14                
Correct output: -85                 | Program output: -85                
Correct output: -73                 | Program output: -6                 
Correct output: 22                  | Program output: 47                 
Correct output: -99                 | Program output: -44                
Correct output: 27                  | Program output: 40                 
Correct output: -2                  | Program output: 56                 
Correct output: -33                 | Program output: 84                 
Correct output: -62                 | Program output: -62                
Correct output: -76                 | Program output: 40                 
Correct output: -71                 | Program output: 9                  
Correct output: -47                 | Program output: -36                
Correct output: -90                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -10                
Correct output: -79                 | Program output: 45                 
Correct output: -27                 | Program output: -27                
Correct output: -37                 | Program output: -37                
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: 95                 
Correct output: -99                 | Program output: -99                
Correct output: -52                 | Program output: -52                
Correct output: -71                 | Program output: -25                
Correct output: -17                 | Program output: 90                 
Correct output: -94                 | Program output: -68                
Correct output: -98                 | Program output: -12                
Correct output: -32                 | Program output: 99                 
Correct output: -62                 | Program output: 80                 
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: 76                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_696} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction 19} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty})
Lexicase best program: (integer_div integer_pop integer_gte integer_eq boolean_invert_first_then_and exec_dup (exec_rot (boolean_dup in4 exec_y (boolean_swap boolean_dup_times exec_dup (exec_k (integer_yankdup integer_stackdepth boolean_dup_items boolean_dup tag_boolean_696 integer_div boolean_invert_second_then_and) () exec_do*while (integer_max) print_boolean integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (in2) exec_s (boolean_swap exec_if (print_integer exec_y () integer_mod 19 integer_gt integer_min boolean_empty) ()) () ()))) () ()))
Lexicase best errors: [1 0 0 1 1 0 0 0 1 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 65
Percent parens: 0.277
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_div} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction tag_boolean_696} {:close 0, :instruction integer_div} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*while} {:close 1, :instruction integer_max} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in2} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 1, :instruction exec_y} {:close 0, :instruction integer_mod} {:close 0, :instruction 19} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty})
Zero cases best program: (integer_div integer_pop integer_gte integer_eq boolean_invert_first_then_and exec_dup (exec_rot (boolean_dup in4 exec_y (boolean_swap boolean_dup_times exec_dup (exec_k (integer_yankdup integer_stackdepth boolean_dup_items boolean_dup tag_boolean_696 integer_div boolean_invert_second_then_and) () exec_do*while (integer_max) print_boolean integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (in2) exec_s (boolean_swap exec_if (print_integer exec_y () integer_mod 19 integer_gt integer_min boolean_empty) ()) () ()))) () ()))
Zero cases best errors: [1 0 0 1 1 0 0 0 1 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 65
Percent parens: 0.277
--- Lexicase Population Statistics ---
Count of elite individuals by case: (334 211 212 334 2 212 211 212 334 330)
Population mean number of elite cases: 2.39
Count of perfect (error zero) individuals by case: (334 211 212 334 2 212 211 212 334 330)
Population mean number of perfect (error zero) cases: 2.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dup} {:close 2, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_and} {:close 0, :instruction tagged_160} {:close 1, :instruction exec_k} {:close 0, :instruction tag_boolean_854} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_inc} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_gt} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction integer_flush} {:close 1, :instruction boolean_dup_items} {:close 2, :instruction exec_noop} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_when} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_pop} {:close 1, :instruction in2} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_integer} {:close 1, :instruction integer_mod} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_yank} {:close 0, :instruction tagged_885} {:close 1, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction -76} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_max} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_div} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_min} {:close 0, :instruction integer_gt})
Best program: (integer_dup integer_add integer_dup_times exec_k (exec_do*times (print_boolean boolean_swap print_boolean integer_dup_times boolean_and tagged_160 exec_k () (tag_boolean_854 integer_yankdup integer_empty integer_dup_times integer_dup_times boolean_yank integer_min integer_max boolean_and integer_lte integer_inc boolean_pop) exec_stackdepth exec_do*range (boolean_xor integer_gt) exec_s_when_autoconstructing (integer_flush) (boolean_dup_items) (exec_noop)) integer_yank integer_dup_times exec_when (print_boolean boolean_yank exec_do*range (boolean_pop in2) boolean_shove print_integer integer_mod) boolean_and exec_while (boolean_yank tagged_885 integer_max) exec_dup (integer_sub -76 integer_fromboolean integer_max integer_dup) integer_div integer_fromboolean integer_rot integer_pop integer_div exec_swap () (exec_y_when_autoconstructing (integer_shove) boolean_not boolean_shove integer_gte boolean_invert_first_then_and boolean_or integer_min) integer_gt) ())
Errors: [1 0 0 1 1 0 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 69
Size: 86
Percent parens: 0.198
--- Population Statistics ---
Average total errors in population: 7.608
Median total errors in population: 6
Error averages by case: (0.666 0.789 0.788 0.666 0.998 0.788 0.789 0.788 0.666 0.67)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.777
Average program size in population (points): 55.404
Average percent parens in population: 0.265
Minimum age in population: 9.375
Maximum age in population: 14.125
Average age in population: 12.0452734375
Median age in population: 12.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 32
Genome diversity (% unique genomes):	 0.76
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.752
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 5200536
--- Timings ---
Current time: 1559314663897 milliseconds
Total Time:          27.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        17.2 seconds, 62.4%
Fitness Testing:      6.0 seconds, 21.8%
Report:               4.2 seconds, 15.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 653
Test mean error for best: 0.65300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -7                  | Program output: -7                 
Correct output: 74                  | Program output: 74                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 57                 
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -49                
Correct output: 15                  | Program output: 80                 
Correct output: -26                 | Program output: -26                
Correct output: 28                  | Program output: 64                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -17                
Correct output: 68                  | Program output: 68                 
Correct output: 51                  | Program output: 51                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 83                 
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 18                 
Correct output: 4                   | Program output: 40                 
Correct output: 41                  | Program output: 99                 
Correct output: 22                  | Program output: 22                 
Correct output: 12                  | Program output: 80                 
Correct output: 32                  | Program output: 45                 
Correct output: 0                   | Program output: 0                  
Correct output: 11                  | Program output: 11                 
Correct output: 55                  | Program output: 82                 
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 80                 
Correct output: 15                  | Program output: 43                 
Correct output: 43                  | Program output: 43                 
Correct output: 17                  | Program output: 17                 
Correct output: 33                  | Program output: 62                 
Correct output: 8                   | Program output: 20                 
Correct output: 7                   | Program output: 76                 
Correct output: 9                   | Program output: 59                 
Correct output: -38                 | Program output: 61                 
Correct output: -77                 | Program output: -55                
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -53                 | Program output: 8                  
Correct output: -42                 | Program output: 20                 
Correct output: -83                 | Program output: -39                
Correct output: -80                 | Program output: 58                 
Correct output: -27                 | Program output: -27                
Correct output: -70                 | Program output: 48                 
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: 40                 
Correct output: -86                 | Program output: -86                
Correct output: -60                 | Program output: 33                 
Correct output: -53                 | Program output: -2                 
Correct output: -85                 | Program output: 85                 
Correct output: -89                 | Program output: -45                
Correct output: -40                 | Program output: -9                 
Correct output: -88                 | Program output: -88                
Correct output: -63                 | Program output: -63                
Correct output: -56                 | Program output: 51                 
Correct output: -46                 | Program output: -46                
Correct output: -52                 | Program output: -16                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: 36                 
Correct output: -100                | Program output: 51                 
Correct output: -75                 | Program output: -75                
Correct output: -48                 | Program output: 21                 
Correct output: -85                 | Program output: 34                 
Correct output: -73                 | Program output: 64                 
Correct output: 22                  | Program output: 59                 
Correct output: -99                 | Program output: -99                
Correct output: 27                  | Program output: 83                 
Correct output: -2                  | Program output: 21                 
Correct output: -33                 | Program output: 5                  
Correct output: -62                 | Program output: 0                  
Correct output: -76                 | Program output: 47                 
Correct output: -71                 | Program output: -71                
Correct output: -47                 | Program output: 95                 
Correct output: -90                 | Program output: -32                
Correct output: -74                 | Program output: -41                
Correct output: -78                 | Program output: -78                
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: 23                 
Correct output: -37                 | Program output: -22                
Correct output: -100                | Program output: 11                 
Correct output: -68                 | Program output: 56                 
Correct output: -10                 | Program output: -10                
Correct output: -99                 | Program output: -28                
Correct output: -52                 | Program output: 40                 
Correct output: -71                 | Program output: -27                
Correct output: -17                 | Program output: 13                 
Correct output: -94                 | Program output: -94                
Correct output: -98                 | Program output: -45                
Correct output: -32                 | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -59                 | Program output: 66                 
Correct output: -98                 | Program output: -35                
Correct output: -40                 | Program output: 26                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot})
Lexicase best program: (integer_rot exec_empty exec_do*range (integer_fromboolean integer_dup_items integer_flush integer_rot print_boolean integer_pop integer_mod exec_do*range () in4) print_integer integer_rot)
Lexicase best errors: [0 0 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 17
Percent parens: 0.176
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot})
Zero cases best program: (integer_rot exec_empty exec_do*range (integer_fromboolean integer_dup_items integer_flush integer_rot print_boolean integer_pop integer_mod exec_do*range () in4) print_integer integer_rot)
Zero cases best errors: [0 0 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 17
Percent parens: 0.176
--- Lexicase Population Statistics ---
Count of elite individuals by case: (411 1 1 857 81 850 441 1 851 1)
Population mean number of elite cases: 3.49
Count of perfect (error zero) individuals by case: (411 1 1 857 81 850 441 1 851 1)
Population mean number of perfect (error zero) cases: 3.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_flush} {:close 0, :instruction integer_rot} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_mod} {:close 1, :instruction exec_do*range} {:close 1, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction integer_rot})
Best program: (integer_rot exec_empty exec_do*range (integer_fromboolean integer_dup_items integer_flush integer_rot print_boolean integer_pop integer_mod exec_do*range () in4) print_integer integer_rot)
Errors: [0 0 0 0 1 0 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 14
Size: 17
Percent parens: 0.176
--- Population Statistics ---
Average total errors in population: 6.505
Median total errors in population: 6
Error averages by case: (0.589 0.999 0.999 0.143 0.919 0.15 0.559 0.999 0.149 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.196
Average program size in population (points): 54.373
Average percent parens in population: 0.265
Minimum age in population: 10.5
Maximum age in population: 15.55078125
Average age in population: 13.431515625
Median age in population: 13.55859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 29
Genome diversity (% unique genomes):	 0.696
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.689
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 5854519
--- Timings ---
Current time: 1559314666698 milliseconds
Total Time:          30.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        19.2 seconds, 62.8%
Fitness Testing:      6.7 seconds, 21.8%
Report:               4.6 seconds, 15.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 539
Test mean error for best: 0.53900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -7                  | Program output: 68                 
Correct output: 74                  | Program output: 74                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -49                
Correct output: 15                  | Program output: 15                 
Correct output: -26                 | Program output: 69                 
Correct output: 28                  | Program output: 64                 
Correct output: -69                 | Program output: -43                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -17                
Correct output: 68                  | Program output: 68                 
Correct output: 51                  | Program output: 51                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 34                 
Correct output: 4                   | Program output: 59                 
Correct output: 15                  | Program output: 43                 
Correct output: 4                   | Program output: 22                 
Correct output: 41                  | Program output: 88                 
Correct output: 22                  | Program output: 55                 
Correct output: 12                  | Program output: 75                 
Correct output: 32                  | Program output: 37                 
Correct output: 0                   | Program output: 80                 
Correct output: 11                  | Program output: 46                 
Correct output: 55                  | Program output: 68                 
Correct output: 27                  | Program output: 28                 
Correct output: 7                   | Program output: 10                 
Correct output: 15                  | Program output: 88                 
Correct output: 43                  | Program output: 62                 
Correct output: 17                  | Program output: 99                 
Correct output: 33                  | Program output: 77                 
Correct output: 8                   | Program output: 39                 
Correct output: 7                   | Program output: 16                 
Correct output: 9                   | Program output: 9                  
Correct output: -38                 | Program output: -37                
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: 25                 
Correct output: -72                 | Program output: 59                 
Correct output: -66                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -42                 | Program output: 18                 
Correct output: -83                 | Program output: -55                
Correct output: -80                 | Program output: -80                
Correct output: -27                 | Program output: -4                 
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -44                
Correct output: -77                 | Program output: -77                
Correct output: -86                 | Program output: -69                
Correct output: -60                 | Program output: -60                
Correct output: -53                 | Program output: -32                
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: 30                 
Correct output: -40                 | Program output: -40                
Correct output: -88                 | Program output: -29                
Correct output: -63                 | Program output: -58                
Correct output: -56                 | Program output: -56                
Correct output: -46                 | Program output: 76                 
Correct output: -52                 | Program output: -52                
Correct output: -64                 | Program output: -43                
Correct output: -72                 | Program output: -72                
Correct output: -100                | Program output: 30                 
Correct output: -75                 | Program output: 97                 
Correct output: -48                 | Program output: -14                
Correct output: -85                 | Program output: -85                
Correct output: -73                 | Program output: -6                 
Correct output: 22                  | Program output: 84                 
Correct output: -99                 | Program output: -44                
Correct output: 27                  | Program output: 27                 
Correct output: -2                  | Program output: -2                 
Correct output: -33                 | Program output: 25                 
Correct output: -62                 | Program output: -62                
Correct output: -76                 | Program output: -41                
Correct output: -71                 | Program output: 14                 
Correct output: -47                 | Program output: -36                
Correct output: -90                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -10                
Correct output: -79                 | Program output: 87                 
Correct output: -27                 | Program output: -27                
Correct output: -37                 | Program output: -37                
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: 37                 
Correct output: -99                 | Program output: -99                
Correct output: -52                 | Program output: -52                
Correct output: -71                 | Program output: -25                
Correct output: -17                 | Program output: -17                
Correct output: -94                 | Program output: -68                
Correct output: -98                 | Program output: -12                
Correct output: -32                 | Program output: 19                 
Correct output: -62                 | Program output: -60                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: -40                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Lexicase best program: (integer_dup_times exec_empty integer_add integer_swap boolean_rot exec_swap (exec_k (integer_yankdup integer_stackdepth boolean_dup_items integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in2 integer_shove boolean_swap exec_if (print_integer boolean_shove) ()) ()) ())
Lexicase best errors: [0 1 1 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 43
Percent parens: 0.209
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Zero cases best program: (integer_dup_times exec_empty integer_add integer_swap boolean_rot exec_swap (exec_k (integer_yankdup integer_stackdepth boolean_dup_items integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in2 integer_shove boolean_swap exec_if (print_integer boolean_shove) ()) ()) ())
Zero cases best errors: [0 1 1 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 43
Percent parens: 0.209
--- Lexicase Population Statistics ---
Count of elite individuals by case: (142 626 13 142 129 142 142 1000 125 626)
Population mean number of elite cases: 3.09
Count of perfect (error zero) individuals by case: (142 626 13 142 129 142 142 0 125 626)
Population mean number of perfect (error zero) cases: 2.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Best program: (integer_dup_times exec_empty integer_add integer_swap boolean_rot exec_swap (exec_k (integer_yankdup integer_stackdepth boolean_dup_items integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in2 integer_shove boolean_swap exec_if (print_integer boolean_shove) ()) ()) ())
Errors: [0 1 1 0 0 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 34
Size: 43
Percent parens: 0.209
--- Population Statistics ---
Average total errors in population: 7.913
Median total errors in population: 8
Error averages by case: (0.858 0.374 0.987 0.858 0.871 0.858 0.858 1.0 0.875 0.374)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 20.843
Average program size in population (points): 26.234
Average percent parens in population: 0.195
Minimum age in population: 12.5
Maximum age in population: 15.87890625
Average age in population: 14.696296875
Median age in population: 14.755859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 519
Genome diversity (% unique genomes):	 0.306
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 527
Syntactic diversity (% unique Push programs):	 0.298
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 6120056
--- Timings ---
Current time: 1559314669233 milliseconds
Total Time:          33.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.2 seconds, 64.2%
Fitness Testing:      6.9 seconds, 20.9%
Report:               4.8 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 539
Test mean error for best: 0.53900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -7                  | Program output: 68                 
Correct output: 74                  | Program output: 74                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -49                
Correct output: 15                  | Program output: 15                 
Correct output: -26                 | Program output: 69                 
Correct output: 28                  | Program output: 64                 
Correct output: -69                 | Program output: -43                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -17                
Correct output: 68                  | Program output: 68                 
Correct output: 51                  | Program output: 51                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 34                 
Correct output: 4                   | Program output: 59                 
Correct output: 15                  | Program output: 43                 
Correct output: 4                   | Program output: 22                 
Correct output: 41                  | Program output: 88                 
Correct output: 22                  | Program output: 55                 
Correct output: 12                  | Program output: 75                 
Correct output: 32                  | Program output: 37                 
Correct output: 0                   | Program output: 80                 
Correct output: 11                  | Program output: 46                 
Correct output: 55                  | Program output: 68                 
Correct output: 27                  | Program output: 28                 
Correct output: 7                   | Program output: 10                 
Correct output: 15                  | Program output: 88                 
Correct output: 43                  | Program output: 62                 
Correct output: 17                  | Program output: 99                 
Correct output: 33                  | Program output: 77                 
Correct output: 8                   | Program output: 39                 
Correct output: 7                   | Program output: 16                 
Correct output: 9                   | Program output: 9                  
Correct output: -38                 | Program output: -37                
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: 25                 
Correct output: -72                 | Program output: 59                 
Correct output: -66                 | Program output: 73                 
Correct output: -53                 | Program output: -53                
Correct output: -42                 | Program output: 18                 
Correct output: -83                 | Program output: -55                
Correct output: -80                 | Program output: -80                
Correct output: -27                 | Program output: -4                 
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -44                
Correct output: -77                 | Program output: -77                
Correct output: -86                 | Program output: -69                
Correct output: -60                 | Program output: -60                
Correct output: -53                 | Program output: -32                
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: 30                 
Correct output: -40                 | Program output: -40                
Correct output: -88                 | Program output: -29                
Correct output: -63                 | Program output: -58                
Correct output: -56                 | Program output: -56                
Correct output: -46                 | Program output: 76                 
Correct output: -52                 | Program output: -52                
Correct output: -64                 | Program output: -43                
Correct output: -72                 | Program output: -72                
Correct output: -100                | Program output: 30                 
Correct output: -75                 | Program output: 97                 
Correct output: -48                 | Program output: -14                
Correct output: -85                 | Program output: -85                
Correct output: -73                 | Program output: -6                 
Correct output: 22                  | Program output: 84                 
Correct output: -99                 | Program output: -44                
Correct output: 27                  | Program output: 27                 
Correct output: -2                  | Program output: -2                 
Correct output: -33                 | Program output: 25                 
Correct output: -62                 | Program output: -62                
Correct output: -76                 | Program output: -41                
Correct output: -71                 | Program output: 14                 
Correct output: -47                 | Program output: -36                
Correct output: -90                 | Program output: -25                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -10                
Correct output: -79                 | Program output: 87                 
Correct output: -27                 | Program output: -27                
Correct output: -37                 | Program output: -37                
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: 37                 
Correct output: -99                 | Program output: -99                
Correct output: -52                 | Program output: -52                
Correct output: -71                 | Program output: -25                
Correct output: -17                 | Program output: -17                
Correct output: -94                 | Program output: -68                
Correct output: -98                 | Program output: -12                
Correct output: -32                 | Program output: 19                 
Correct output: -62                 | Program output: -60                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: -40                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Lexicase best program: (integer_dup_times exec_empty integer_add integer_swap boolean_rot exec_swap (exec_k (integer_yankdup integer_stackdepth boolean_dup_items integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in2 integer_shove boolean_swap exec_if (print_integer boolean_shove) ()) ()) ())
Lexicase best errors: [1 1 0 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 43
Percent parens: 0.209
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Zero cases best program: (integer_dup_times exec_empty integer_add integer_swap boolean_rot exec_swap (exec_k (integer_yankdup integer_stackdepth boolean_dup_items integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in2 integer_shove boolean_swap exec_if (print_integer boolean_shove) ()) ()) ())
Zero cases best errors: [1 1 0 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 43
Percent parens: 0.209
--- Lexicase Population Statistics ---
Count of elite individuals by case: (217 9 534 534 534 586 104 533 265 263)
Population mean number of elite cases: 3.58
Count of perfect (error zero) individuals by case: (217 9 534 534 534 586 104 533 265 263)
Population mean number of perfect (error zero) cases: 3.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Best program: (integer_dup_times exec_empty integer_add integer_swap boolean_rot exec_swap (exec_k (integer_yankdup integer_stackdepth boolean_dup_items integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in2 integer_shove boolean_swap exec_if (print_integer boolean_shove) ()) ()) ())
Errors: [1 1 0 0 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 34
Size: 43
Percent parens: 0.209
--- Population Statistics ---
Average total errors in population: 6.421
Median total errors in population: 6
Error averages by case: (0.783 0.991 0.466 0.466 0.466 0.414 0.896 0.467 0.735 0.737)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 29.583
Average program size in population (points): 37.524
Average percent parens in population: 0.207
Minimum age in population: 13.5
Maximum age in population: 17.84375
Average age in population: 16.4141337890625
Median age in population: 16.505859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 162
Genome diversity (% unique genomes):	 0.464
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 170
Syntactic diversity (% unique Push programs):	 0.446
Total error diversity:				 0.007
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 6447060
--- Timings ---
Current time: 1559314671576 milliseconds
Total Time:          35.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.0 seconds, 65.0%
Fitness Testing:      7.2 seconds, 20.4%
Report:               5.0 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -7                  | Program output: 68                 
Correct output: 74                  | Program output: 74                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -49                
Correct output: 15                  | Program output: 15                 
Correct output: -26                 | Program output: 69                 
Correct output: 28                  | Program output: 64                 
Correct output: -69                 | Program output: -43                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -17                
Correct output: 68                  | Program output: 68                 
Correct output: 51                  | Program output: 51                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 34                 
Correct output: 4                   | Program output: 59                 
Correct output: 15                  | Program output: 43                 
Correct output: 4                   | Program output: 22                 
Correct output: 41                  | Program output: 88                 
Correct output: 22                  | Program output: 55                 
Correct output: 12                  | Program output: 75                 
Correct output: 32                  | Program output: 37                 
Correct output: 0                   | Program output: 80                 
Correct output: 11                  | Program output: 46                 
Correct output: 55                  | Program output: 68                 
Correct output: 27                  | Program output: 28                 
Correct output: 7                   | Program output: 10                 
Correct output: 15                  | Program output: 88                 
Correct output: 43                  | Program output: 62                 
Correct output: 17                  | Program output: 99                 
Correct output: 33                  | Program output: 77                 
Correct output: 8                   | Program output: 39                 
Correct output: 7                   | Program output: 16                 
Correct output: 9                   | Program output: 9                  
Correct output: -38                 | Program output: -38                
Correct output: -77                 | Program output: -49                
Correct output: -36                 | Program output: 25                 
Correct output: -72                 | Program output: 59                 
Correct output: -66                 | Program output: 73                 
Correct output: -53                 | Program output: -11                
Correct output: -42                 | Program output: 18                 
Correct output: -83                 | Program output: -83                
Correct output: -80                 | Program output: 76                 
Correct output: -27                 | Program output: 22                 
Correct output: -70                 | Program output: 64                 
Correct output: -81                 | Program output: -33                
Correct output: -77                 | Program output: 85                 
Correct output: -86                 | Program output: -69                
Correct output: -60                 | Program output: 34                 
Correct output: -53                 | Program output: -53                
Correct output: -85                 | Program output: 86                 
Correct output: -89                 | Program output: 30                 
Correct output: -40                 | Program output: -40                
Correct output: -88                 | Program output: 32                 
Correct output: -63                 | Program output: 40                 
Correct output: -56                 | Program output: -44                
Correct output: -46                 | Program output: 76                 
Correct output: -52                 | Program output: -52                
Correct output: -64                 | Program output: -43                
Correct output: -72                 | Program output: -72                
Correct output: -100                | Program output: 30                 
Correct output: -75                 | Program output: 97                 
Correct output: -48                 | Program output: -48                
Correct output: -85                 | Program output: 93                 
Correct output: -73                 | Program output: -73                
Correct output: 22                  | Program output: 84                 
Correct output: -99                 | Program output: -31                
Correct output: 27                  | Program output: 27                 
Correct output: -2                  | Program output: -2                 
Correct output: -33                 | Program output: 25                 
Correct output: -62                 | Program output: 0                  
Correct output: -76                 | Program output: -41                
Correct output: -71                 | Program output: 14                 
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: 37                 
Correct output: -78                 | Program output: -8                 
Correct output: -79                 | Program output: 87                 
Correct output: -27                 | Program output: 79                 
Correct output: -37                 | Program output: 90                 
Correct output: -100                | Program output: -24                
Correct output: -68                 | Program output: -48                
Correct output: -10                 | Program output: 37                 
Correct output: -99                 | Program output: -66                
Correct output: -52                 | Program output: -47                
Correct output: -71                 | Program output: -71                
Correct output: -17                 | Program output: -17                
Correct output: -94                 | Program output: -50                
Correct output: -98                 | Program output: 35                 
Correct output: -32                 | Program output: 19                 
Correct output: -62                 | Program output: -60                
Correct output: -59                 | Program output: 87                 
Correct output: -98                 | Program output: -35                
Correct output: -40                 | Program output: -40                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Lexicase best program: (integer_dup_times exec_empty integer_add integer_swap boolean_rot boolean_stackdepth exec_k (integer_yankdup exec_swap (boolean_dup_items integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) boolean_swap exec_if (print_integer boolean_shove) ()) ()) ())
Lexicase best errors: [0 0 1 1 1 1 0 0 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 41
Percent parens: 0.220
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Zero cases best program: (integer_dup_times exec_empty integer_add integer_swap boolean_rot boolean_stackdepth exec_k (integer_yankdup exec_swap (boolean_dup_items integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) boolean_swap exec_if (print_integer boolean_shove) ()) ()) ())
Zero cases best errors: [0 0 1 1 1 1 0 0 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 41
Percent parens: 0.220
--- Lexicase Population Statistics ---
Count of elite individuals by case: (583 127 108 111 155 111 128 583 502 583)
Population mean number of elite cases: 2.99
Count of perfect (error zero) individuals by case: (583 127 108 111 155 111 128 583 502 583)
Population mean number of perfect (error zero) cases: 2.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Best program: (integer_dup_times exec_empty integer_add integer_swap boolean_rot exec_swap (exec_k (integer_yankdup integer_stackdepth boolean_dup_items integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush) (boolean_stackdepth boolean_rot exec_yankdup) boolean_dup_times) (in1 boolean_flush integer_flush boolean_rot exec_yankdup) in2 integer_shove boolean_swap exec_if (print_integer boolean_shove) ()) ())
Errors: [0 0 1 1 1 1 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 34
Size: 43
Percent parens: 0.209
--- Population Statistics ---
Average total errors in population: 7.009
Median total errors in population: 6
Error averages by case: (0.417 0.873 0.892 0.889 0.845 0.889 0.872 0.417 0.498 0.417)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 31.597
Average program size in population (points): 40.179
Average percent parens in population: 0.211
Minimum age in population: 15.34375
Maximum age in population: 19.6748046875
Average age in population: 17.978462890625
Median age in population: 18.021240234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 199
Genome diversity (% unique genomes):	 0.519
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 217
Syntactic diversity (% unique Push programs):	 0.504
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 6784032
--- Timings ---
Current time: 1559314674255 milliseconds
Total Time:          38.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        25.1 seconds, 66.0%
Fitness Testing:      7.6 seconds, 19.8%
Report:               5.3 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 425
Test mean error for best: 0.42500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -7                  | Program output: -7                 
Correct output: 74                  | Program output: 74                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -49                
Correct output: 15                  | Program output: 15                 
Correct output: -26                 | Program output: -26                
Correct output: 28                  | Program output: 64                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -17                
Correct output: 68                  | Program output: 68                 
Correct output: 51                  | Program output: 51                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 34                 
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 18                 
Correct output: 4                   | Program output: 22                 
Correct output: 41                  | Program output: 88                 
Correct output: 22                  | Program output: 22                 
Correct output: 12                  | Program output: 75                 
Correct output: 32                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 11                  | Program output: 11                 
Correct output: 55                  | Program output: 68                 
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 10                 
Correct output: 15                  | Program output: 43                 
Correct output: 43                  | Program output: 43                 
Correct output: 17                  | Program output: 17                 
Correct output: 33                  | Program output: 62                 
Correct output: 8                   | Program output: 20                 
Correct output: 7                   | Program output: 16                 
Correct output: 9                   | Program output: 9                  
Correct output: -38                 | Program output: -38                
Correct output: -77                 | Program output: -55                
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -53                 | Program output: -11                
Correct output: -42                 | Program output: 18                 
Correct output: -83                 | Program output: -83                
Correct output: -80                 | Program output: 58                 
Correct output: -27                 | Program output: -27                
Correct output: -70                 | Program output: 48                 
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: 40                 
Correct output: -86                 | Program output: -86                
Correct output: -60                 | Program output: 33                 
Correct output: -53                 | Program output: -53                
Correct output: -85                 | Program output: 85                 
Correct output: -89                 | Program output: -45                
Correct output: -40                 | Program output: -40                
Correct output: -88                 | Program output: -88                
Correct output: -63                 | Program output: -63                
Correct output: -56                 | Program output: -44                
Correct output: -46                 | Program output: -46                
Correct output: -52                 | Program output: -52                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: -72                
Correct output: -100                | Program output: 30                 
Correct output: -75                 | Program output: -75                
Correct output: -48                 | Program output: -48                
Correct output: -85                 | Program output: 34                 
Correct output: -73                 | Program output: -73                
Correct output: 22                  | Program output: 59                 
Correct output: -99                 | Program output: -99                
Correct output: 27                  | Program output: 27                 
Correct output: -2                  | Program output: -2                 
Correct output: -33                 | Program output: 5                  
Correct output: -62                 | Program output: 0                  
Correct output: -76                 | Program output: -41                
Correct output: -71                 | Program output: -71                
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -41                
Correct output: -78                 | Program output: -78                
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: 23                 
Correct output: -37                 | Program output: -22                
Correct output: -100                | Program output: -24                
Correct output: -68                 | Program output: -48                
Correct output: -10                 | Program output: -10                
Correct output: -99                 | Program output: -66                
Correct output: -52                 | Program output: -47                
Correct output: -71                 | Program output: -71                
Correct output: -17                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -98                 | Program output: -45                
Correct output: -32                 | Program output: 19                 
Correct output: -62                 | Program output: -62                
Correct output: -59                 | Program output: 66                 
Correct output: -98                 | Program output: -35                
Correct output: -40                 | Program output: -40                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Lexicase best program: (integer_dup_times exec_empty integer_add integer_swap boolean_rot exec_swap (exec_k (integer_yankdup integer_stackdepth boolean_dup_items integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4 integer_shove integer_min exec_if (print_integer boolean_shove) ()) ()) ())
Lexicase best errors: [1 1 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 43
Percent parens: 0.209
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Zero cases best program: (integer_dup_times exec_empty integer_add integer_swap boolean_rot exec_swap (exec_k (integer_yankdup integer_stackdepth boolean_dup_items integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4 integer_shove integer_min exec_if (print_integer boolean_shove) ()) ()) ())
Zero cases best errors: [1 1 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 43
Percent parens: 0.209
--- Lexicase Population Statistics ---
Count of elite individuals by case: (175 171 65 414 456 456 65 229 234 175)
Population mean number of elite cases: 2.44
Count of perfect (error zero) individuals by case: (175 171 65 414 456 456 65 229 234 175)
Population mean number of perfect (error zero) cases: 2.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Best program: (integer_dup_times exec_empty integer_add integer_swap boolean_rot exec_swap (exec_k (integer_yankdup integer_stackdepth boolean_dup_items integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4 integer_shove integer_min exec_if (print_integer boolean_shove) ()) ()) ())
Errors: [1 1 0 0 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 34
Size: 43
Percent parens: 0.209
--- Population Statistics ---
Average total errors in population: 7.56
Median total errors in population: 7
Error averages by case: (0.825 0.829 0.935 0.586 0.544 0.544 0.935 0.771 0.766 0.825)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.605
Average program size in population (points): 41.705
Average percent parens in population: 0.217
Minimum age in population: 16.34375
Maximum age in population: 21.166259765625
Average age in population: 19.40761376953125
Median age in population: 19.487548828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 127
Genome diversity (% unique genomes):	 0.582
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 130
Syntactic diversity (% unique Push programs):	 0.56
Total error diversity:				 0.007
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 7161207
--- Timings ---
Current time: 1559314677084 milliseconds
Total Time:          40.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        27.4 seconds, 66.9%
Fitness Testing:      7.9 seconds, 19.3%
Report:               5.5 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 425
Test mean error for best: 0.42500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -7                  | Program output: -7                 
Correct output: 74                  | Program output: 74                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -49                
Correct output: 15                  | Program output: 15                 
Correct output: -26                 | Program output: -26                
Correct output: 28                  | Program output: 64                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -17                
Correct output: 68                  | Program output: 68                 
Correct output: 51                  | Program output: 51                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 34                 
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 18                 
Correct output: 4                   | Program output: 22                 
Correct output: 41                  | Program output: 88                 
Correct output: 22                  | Program output: 22                 
Correct output: 12                  | Program output: 75                 
Correct output: 32                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 11                  | Program output: 11                 
Correct output: 55                  | Program output: 68                 
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 10                 
Correct output: 15                  | Program output: 43                 
Correct output: 43                  | Program output: 43                 
Correct output: 17                  | Program output: 17                 
Correct output: 33                  | Program output: 62                 
Correct output: 8                   | Program output: 20                 
Correct output: 7                   | Program output: 16                 
Correct output: 9                   | Program output: 9                  
Correct output: -38                 | Program output: -38                
Correct output: -77                 | Program output: -55                
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -53                 | Program output: -11                
Correct output: -42                 | Program output: 18                 
Correct output: -83                 | Program output: -83                
Correct output: -80                 | Program output: 58                 
Correct output: -27                 | Program output: -27                
Correct output: -70                 | Program output: 48                 
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: 40                 
Correct output: -86                 | Program output: -86                
Correct output: -60                 | Program output: 33                 
Correct output: -53                 | Program output: -53                
Correct output: -85                 | Program output: 85                 
Correct output: -89                 | Program output: -45                
Correct output: -40                 | Program output: -40                
Correct output: -88                 | Program output: -88                
Correct output: -63                 | Program output: -63                
Correct output: -56                 | Program output: -44                
Correct output: -46                 | Program output: -46                
Correct output: -52                 | Program output: -52                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: -72                
Correct output: -100                | Program output: 30                 
Correct output: -75                 | Program output: -75                
Correct output: -48                 | Program output: -48                
Correct output: -85                 | Program output: 34                 
Correct output: -73                 | Program output: -73                
Correct output: 22                  | Program output: 59                 
Correct output: -99                 | Program output: -99                
Correct output: 27                  | Program output: 27                 
Correct output: -2                  | Program output: -2                 
Correct output: -33                 | Program output: 5                  
Correct output: -62                 | Program output: 0                  
Correct output: -76                 | Program output: -41                
Correct output: -71                 | Program output: -71                
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -41                
Correct output: -78                 | Program output: -78                
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: 23                 
Correct output: -37                 | Program output: -22                
Correct output: -100                | Program output: -24                
Correct output: -68                 | Program output: -48                
Correct output: -10                 | Program output: -10                
Correct output: -99                 | Program output: -66                
Correct output: -52                 | Program output: -47                
Correct output: -71                 | Program output: -71                
Correct output: -17                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -98                 | Program output: -45                
Correct output: -32                 | Program output: 19                 
Correct output: -62                 | Program output: -62                
Correct output: -59                 | Program output: 66                 
Correct output: -98                 | Program output: -35                
Correct output: -40                 | Program output: -40                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Lexicase best program: (integer_dup_times exec_empty integer_add integer_swap boolean_rot exec_swap (exec_k (integer_yankdup integer_stackdepth boolean_dup_items integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4 integer_shove integer_min exec_if (print_integer boolean_shove) ()) ()) ())
Lexicase best errors: [0 0 0 1 0 0 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 43
Percent parens: 0.209
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Zero cases best program: (integer_dup_times exec_empty integer_add integer_swap boolean_rot exec_swap (exec_k (integer_yankdup integer_stackdepth boolean_dup_items integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4 integer_shove integer_min exec_if (print_integer boolean_shove) ()) ()) ())
Zero cases best errors: [0 0 0 1 0 0 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 43
Percent parens: 0.209
--- Lexicase Population Statistics ---
Count of elite individuals by case: (767 514 520 81 482 482 230 622 230 24)
Population mean number of elite cases: 3.95
Count of perfect (error zero) individuals by case: (767 514 520 81 482 482 230 622 230 24)
Population mean number of perfect (error zero) cases: 3.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Best program: (integer_dup_times exec_empty integer_add integer_swap boolean_rot exec_swap (exec_k (integer_yankdup integer_stackdepth boolean_dup_items integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_shove exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4 integer_shove integer_min exec_if (print_integer boolean_shove) ()) ()) ())
Errors: [0 0 0 1 0 0 1 0 1 1]
Total: 4
Mean: 0.4
Genome size: 34
Size: 43
Percent parens: 0.209
--- Population Statistics ---
Average total errors in population: 6.048
Median total errors in population: 6
Error averages by case: (0.233 0.486 0.48 0.919 0.518 0.518 0.77 0.378 0.77 0.976)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 33.826
Average program size in population (points): 42.919
Average percent parens in population: 0.211
Minimum age in population: 17.728515625
Maximum age in population: 22.498291015625
Average age in population: 20.9753427734375
Median age in population: 20.9256591796875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 366
Genome diversity (% unique genomes):	 0.475
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 378
Syntactic diversity (% unique Push programs):	 0.458
Total error diversity:				 0.006
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 7502290
--- Timings ---
Current time: 1559314679588 milliseconds
Total Time:          43.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.3 seconds, 67.4%
Fitness Testing:      8.2 seconds, 19.0%
Report:               5.8 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 425
Test mean error for best: 0.42500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -7                  | Program output: -7                 
Correct output: 74                  | Program output: 74                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -49                
Correct output: 15                  | Program output: 15                 
Correct output: -26                 | Program output: -26                
Correct output: 28                  | Program output: 64                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -17                
Correct output: 68                  | Program output: 68                 
Correct output: 51                  | Program output: 51                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 34                 
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 18                 
Correct output: 4                   | Program output: 22                 
Correct output: 41                  | Program output: 88                 
Correct output: 22                  | Program output: 22                 
Correct output: 12                  | Program output: 75                 
Correct output: 32                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 11                  | Program output: 11                 
Correct output: 55                  | Program output: 68                 
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 10                 
Correct output: 15                  | Program output: 43                 
Correct output: 43                  | Program output: 43                 
Correct output: 17                  | Program output: 17                 
Correct output: 33                  | Program output: 62                 
Correct output: 8                   | Program output: 20                 
Correct output: 7                   | Program output: 16                 
Correct output: 9                   | Program output: 9                  
Correct output: -38                 | Program output: -38                
Correct output: -77                 | Program output: -55                
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -53                 | Program output: -11                
Correct output: -42                 | Program output: 18                 
Correct output: -83                 | Program output: -83                
Correct output: -80                 | Program output: 58                 
Correct output: -27                 | Program output: -27                
Correct output: -70                 | Program output: 48                 
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: 40                 
Correct output: -86                 | Program output: -86                
Correct output: -60                 | Program output: 33                 
Correct output: -53                 | Program output: -53                
Correct output: -85                 | Program output: 85                 
Correct output: -89                 | Program output: -45                
Correct output: -40                 | Program output: -40                
Correct output: -88                 | Program output: -88                
Correct output: -63                 | Program output: -63                
Correct output: -56                 | Program output: -44                
Correct output: -46                 | Program output: -46                
Correct output: -52                 | Program output: -52                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: -72                
Correct output: -100                | Program output: 30                 
Correct output: -75                 | Program output: -75                
Correct output: -48                 | Program output: -48                
Correct output: -85                 | Program output: 34                 
Correct output: -73                 | Program output: -73                
Correct output: 22                  | Program output: 59                 
Correct output: -99                 | Program output: -99                
Correct output: 27                  | Program output: 27                 
Correct output: -2                  | Program output: -2                 
Correct output: -33                 | Program output: 5                  
Correct output: -62                 | Program output: 0                  
Correct output: -76                 | Program output: -41                
Correct output: -71                 | Program output: -71                
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -41                
Correct output: -78                 | Program output: -78                
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: 23                 
Correct output: -37                 | Program output: -22                
Correct output: -100                | Program output: -24                
Correct output: -68                 | Program output: -48                
Correct output: -10                 | Program output: -10                
Correct output: -99                 | Program output: -66                
Correct output: -52                 | Program output: -47                
Correct output: -71                 | Program output: -71                
Correct output: -17                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -98                 | Program output: -45                
Correct output: -32                 | Program output: 19                 
Correct output: -62                 | Program output: -62                
Correct output: -59                 | Program output: 66                 
Correct output: -98                 | Program output: -35                
Correct output: -40                 | Program output: -40                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Lexicase best program: (integer_dup_times exec_empty integer_add integer_swap boolean_rot exec_swap (exec_k (integer_yankdup integer_stackdepth boolean_dup_items integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times integer_flush boolean_rot exec_yankdup) in4 integer_shove integer_min exec_if (print_integer boolean_shove) ()) ()) ())
Lexicase best errors: [1 1 1 0 0 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 41
Percent parens: 0.220
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Zero cases best program: (integer_dup_times exec_empty integer_add integer_swap boolean_rot exec_swap (exec_k (integer_yankdup integer_stackdepth boolean_dup_items integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times integer_flush boolean_rot exec_yankdup) in4 integer_shove integer_min exec_if (print_integer boolean_shove) ()) ()) ())
Zero cases best errors: [1 1 1 0 0 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 41
Percent parens: 0.220
--- Lexicase Population Statistics ---
Count of elite individuals by case: (422 89 89 677 677 89 411 410 411 676)
Population mean number of elite cases: 3.95
Count of perfect (error zero) individuals by case: (422 89 89 677 677 89 411 410 411 676)
Population mean number of perfect (error zero) cases: 3.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Best program: (integer_dup_times exec_empty integer_add integer_swap boolean_rot exec_swap (exec_k (integer_yankdup integer_stackdepth boolean_dup_items integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4 integer_shove integer_min exec_if (print_integer boolean_shove) ()) ()) ())
Errors: [1 1 1 0 0 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 34
Size: 43
Percent parens: 0.209
--- Population Statistics ---
Average total errors in population: 6.049
Median total errors in population: 6
Error averages by case: (0.578 0.911 0.911 0.323 0.323 0.911 0.589 0.59 0.589 0.324)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.241
Average program size in population (points): 43.379
Average percent parens in population: 0.210
Minimum age in population: 19.70166015625
Maximum age in population: 23.81964111328125
Average age in population: 22.63284991455078
Median age in population: 22.507568359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 252
Genome diversity (% unique genomes):	 0.48
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 258
Syntactic diversity (% unique Push programs):	 0.464
Total error diversity:				 0.006
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 7844672
--- Timings ---
Current time: 1559314682013 milliseconds
Total Time:          45.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.1 seconds, 67.9%
Fitness Testing:      8.6 seconds, 18.7%
Report:               6.0 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 417
Test mean error for best: 0.41700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -7                  | Program output: -7                 
Correct output: 74                  | Program output: 74                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 57                 
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -49                
Correct output: 15                  | Program output: 15                 
Correct output: -26                 | Program output: -26                
Correct output: 28                  | Program output: 64                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -17                
Correct output: 68                  | Program output: 68                 
Correct output: 51                  | Program output: 51                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 83                 
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 22                 
Correct output: 12                  | Program output: 12                 
Correct output: 32                  | Program output: 32                 
Correct output: 0                   | Program output: 0                  
Correct output: 11                  | Program output: 11                 
Correct output: 55                  | Program output: 55                 
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 80                 
Correct output: 15                  | Program output: 29                 
Correct output: 43                  | Program output: 43                 
Correct output: 17                  | Program output: 17                 
Correct output: 33                  | Program output: 55                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 11                 
Correct output: -38                 | Program output: -37                
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -53                 | Program output: -53                
Correct output: -42                 | Program output: 20                 
Correct output: -83                 | Program output: -55                
Correct output: -80                 | Program output: -80                
Correct output: -27                 | Program output: -27                
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -77                
Correct output: -86                 | Program output: -86                
Correct output: -60                 | Program output: -60                
Correct output: -53                 | Program output: -32                
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: -45                
Correct output: -40                 | Program output: -9                 
Correct output: -88                 | Program output: -88                
Correct output: -63                 | Program output: -63                
Correct output: -56                 | Program output: -56                
Correct output: -46                 | Program output: -46                
Correct output: -52                 | Program output: -16                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: 6                  
Correct output: -100                | Program output: 31                 
Correct output: -75                 | Program output: -75                
Correct output: -48                 | Program output: -14                
Correct output: -85                 | Program output: -85                
Correct output: -73                 | Program output: -6                 
Correct output: 22                  | Program output: 47                 
Correct output: -99                 | Program output: -99                
Correct output: 27                  | Program output: 40                 
Correct output: -2                  | Program output: 21                 
Correct output: -33                 | Program output: 5                  
Correct output: -62                 | Program output: -62                
Correct output: -76                 | Program output: 40                 
Correct output: -71                 | Program output: -71                
Correct output: -47                 | Program output: -36                
Correct output: -90                 | Program output: -32                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -78                
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -37                 | Program output: -37                
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: -10                
Correct output: -99                 | Program output: -99                
Correct output: -52                 | Program output: -52                
Correct output: -71                 | Program output: -27                
Correct output: -17                 | Program output: 13                 
Correct output: -94                 | Program output: -94                
Correct output: -98                 | Program output: -45                
Correct output: -32                 | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: 26                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Lexicase best program: (integer_dup_times exec_empty integer_add integer_swap boolean_rot exec_swap (exec_k (integer_yankdup integer_stackdepth boolean_dup_items integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4 in2 integer_min exec_if (print_integer boolean_shove) ()) ()) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 43
Percent parens: 0.209
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Zero cases best program: (integer_dup_times exec_empty integer_add integer_swap boolean_rot exec_swap (exec_k (integer_yankdup integer_stackdepth boolean_dup_items integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4 in2 integer_min exec_if (print_integer boolean_shove) ()) ()) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 43
Percent parens: 0.209
--- Lexicase Population Statistics ---
Count of elite individuals by case: (475 479 194 839 194 195 480 195 480 437)
Population mean number of elite cases: 3.97
Count of perfect (error zero) individuals by case: (475 479 194 839 194 195 480 195 480 437)
Population mean number of perfect (error zero) cases: 3.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Best program: (integer_dup_times exec_empty integer_add integer_swap boolean_rot exec_swap (exec_k (integer_yankdup integer_stackdepth boolean_dup_items integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4 in2 integer_min exec_if (print_integer boolean_shove) ()) ()) ())
Errors: [0 0 0 0 0 0 0 0 0 1]
Total: 1
Mean: 0.1
Genome size: 34
Size: 43
Percent parens: 0.209
--- Population Statistics ---
Average total errors in population: 6.032
Median total errors in population: 4
Error averages by case: (0.525 0.521 0.806 0.161 0.806 0.805 0.52 0.805 0.52 0.563)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.111
Average program size in population (points): 44.638
Average percent parens in population: 0.212
Minimum age in population: 20.70166015625
Maximum age in population: 25.69906616210938
Average age in population: 24.00854345703125
Median age in population: 24.04837036132812
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 164
Genome diversity (% unique genomes):	 0.599
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 179
Syntactic diversity (% unique Push programs):	 0.584
Total error diversity:				 0.008
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 8288908
--- Timings ---
Current time: 1559314684611 milliseconds
Total Time:          48.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.1 seconds, 68.2%
Fitness Testing:      9.0 seconds, 18.6%
Report:               6.3 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 425
Test mean error for best: 0.42500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -7                  | Program output: -7                 
Correct output: 74                  | Program output: 74                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -49                
Correct output: 15                  | Program output: 15                 
Correct output: -26                 | Program output: -26                
Correct output: 28                  | Program output: 64                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -17                
Correct output: 68                  | Program output: 68                 
Correct output: 51                  | Program output: 51                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 34                 
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 18                 
Correct output: 4                   | Program output: 22                 
Correct output: 41                  | Program output: 88                 
Correct output: 22                  | Program output: 22                 
Correct output: 12                  | Program output: 75                 
Correct output: 32                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 11                  | Program output: 11                 
Correct output: 55                  | Program output: 68                 
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 10                 
Correct output: 15                  | Program output: 43                 
Correct output: 43                  | Program output: 43                 
Correct output: 17                  | Program output: 17                 
Correct output: 33                  | Program output: 62                 
Correct output: 8                   | Program output: 20                 
Correct output: 7                   | Program output: 16                 
Correct output: 9                   | Program output: 9                  
Correct output: -38                 | Program output: -38                
Correct output: -77                 | Program output: -55                
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -53                 | Program output: -11                
Correct output: -42                 | Program output: 18                 
Correct output: -83                 | Program output: -83                
Correct output: -80                 | Program output: 58                 
Correct output: -27                 | Program output: -27                
Correct output: -70                 | Program output: 48                 
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: 40                 
Correct output: -86                 | Program output: -86                
Correct output: -60                 | Program output: 33                 
Correct output: -53                 | Program output: -53                
Correct output: -85                 | Program output: 85                 
Correct output: -89                 | Program output: -45                
Correct output: -40                 | Program output: -40                
Correct output: -88                 | Program output: -88                
Correct output: -63                 | Program output: -63                
Correct output: -56                 | Program output: -44                
Correct output: -46                 | Program output: -46                
Correct output: -52                 | Program output: -52                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: -72                
Correct output: -100                | Program output: 30                 
Correct output: -75                 | Program output: -75                
Correct output: -48                 | Program output: -48                
Correct output: -85                 | Program output: 34                 
Correct output: -73                 | Program output: -73                
Correct output: 22                  | Program output: 59                 
Correct output: -99                 | Program output: -99                
Correct output: 27                  | Program output: 27                 
Correct output: -2                  | Program output: -2                 
Correct output: -33                 | Program output: 5                  
Correct output: -62                 | Program output: 0                  
Correct output: -76                 | Program output: -41                
Correct output: -71                 | Program output: -71                
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -41                
Correct output: -78                 | Program output: -78                
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: 23                 
Correct output: -37                 | Program output: -22                
Correct output: -100                | Program output: -24                
Correct output: -68                 | Program output: -48                
Correct output: -10                 | Program output: -10                
Correct output: -99                 | Program output: -66                
Correct output: -52                 | Program output: -47                
Correct output: -71                 | Program output: -71                
Correct output: -17                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -98                 | Program output: -45                
Correct output: -32                 | Program output: 19                 
Correct output: -62                 | Program output: -62                
Correct output: -59                 | Program output: 66                 
Correct output: -98                 | Program output: -35                
Correct output: -40                 | Program output: -40                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Lexicase best program: (integer_dup_times exec_empty integer_add integer_swap boolean_rot exec_swap (exec_k (integer_yankdup integer_stackdepth boolean_dup_items integer_empty integer_dup_times integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4 integer_shove integer_min exec_if (print_integer boolean_shove) ()) ()) ())
Lexicase best errors: [0 0 0 1 0 0 1 1 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 44
Percent parens: 0.205
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Zero cases best program: (integer_dup_times exec_empty integer_add integer_swap boolean_rot exec_swap (exec_k (integer_yankdup integer_stackdepth boolean_dup_items integer_empty integer_dup_times integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4 integer_shove integer_min exec_if (print_integer boolean_shove) ()) ()) ())
Zero cases best errors: [0 0 0 1 0 0 1 1 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 44
Percent parens: 0.205
--- Lexicase Population Statistics ---
Count of elite individuals by case: (703 243 243 718 136 136 1000 1000 1000 855)
Population mean number of elite cases: 6.03
Count of perfect (error zero) individuals by case: (703 243 243 718 136 136 0 0 0 855)
Population mean number of perfect (error zero) cases: 3.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Best program: (integer_dup_times exec_empty integer_add integer_swap boolean_rot exec_swap (exec_k (integer_yankdup integer_stackdepth boolean_dup_items integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4 integer_shove integer_min exec_if (print_integer boolean_shove) ()) ()) ())
Errors: [0 0 0 1 0 0 1 1 1 0]
Total: 4
Mean: 0.4
Genome size: 34
Size: 43
Percent parens: 0.209
--- Population Statistics ---
Average total errors in population: 6.966
Median total errors in population: 7
Error averages by case: (0.297 0.757 0.757 0.282 0.864 0.864 1.0 1.0 1.0 0.145)
Error minima by case: (0 0 0 0 0 0 1 1 1 0)
Average genome size in population (length): 33.941
Average program size in population (points): 42.825
Average percent parens in population: 0.207
Minimum age in population: 23.1756591796875
Maximum age in population: 27.39695739746094
Average age in population: 25.64889576721191
Median age in population: 25.73529052734375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 227
Genome diversity (% unique genomes):	 0.524
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 241
Syntactic diversity (% unique Push programs):	 0.506
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 8576212
--- Timings ---
Current time: 1559314687268 milliseconds
Total Time:          51.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        35.2 seconds, 68.9%
Fitness Testing:      9.2 seconds, 18.1%
Report:               6.5 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 425
Test mean error for best: 0.42500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -7                  | Program output: -7                 
Correct output: 74                  | Program output: 74                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -49                
Correct output: 15                  | Program output: 15                 
Correct output: -26                 | Program output: -26                
Correct output: 28                  | Program output: 64                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -17                
Correct output: 68                  | Program output: 68                 
Correct output: 51                  | Program output: 51                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 34                 
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 18                 
Correct output: 4                   | Program output: 22                 
Correct output: 41                  | Program output: 88                 
Correct output: 22                  | Program output: 22                 
Correct output: 12                  | Program output: 75                 
Correct output: 32                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 11                  | Program output: 11                 
Correct output: 55                  | Program output: 68                 
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 10                 
Correct output: 15                  | Program output: 43                 
Correct output: 43                  | Program output: 43                 
Correct output: 17                  | Program output: 17                 
Correct output: 33                  | Program output: 62                 
Correct output: 8                   | Program output: 20                 
Correct output: 7                   | Program output: 16                 
Correct output: 9                   | Program output: 9                  
Correct output: -38                 | Program output: -38                
Correct output: -77                 | Program output: -55                
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -53                 | Program output: -11                
Correct output: -42                 | Program output: 18                 
Correct output: -83                 | Program output: -83                
Correct output: -80                 | Program output: 58                 
Correct output: -27                 | Program output: -27                
Correct output: -70                 | Program output: 48                 
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: 40                 
Correct output: -86                 | Program output: -86                
Correct output: -60                 | Program output: 33                 
Correct output: -53                 | Program output: -53                
Correct output: -85                 | Program output: 85                 
Correct output: -89                 | Program output: -45                
Correct output: -40                 | Program output: -40                
Correct output: -88                 | Program output: -88                
Correct output: -63                 | Program output: -63                
Correct output: -56                 | Program output: -44                
Correct output: -46                 | Program output: -46                
Correct output: -52                 | Program output: -52                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: -72                
Correct output: -100                | Program output: 30                 
Correct output: -75                 | Program output: -75                
Correct output: -48                 | Program output: -48                
Correct output: -85                 | Program output: 34                 
Correct output: -73                 | Program output: -73                
Correct output: 22                  | Program output: 59                 
Correct output: -99                 | Program output: -99                
Correct output: 27                  | Program output: 27                 
Correct output: -2                  | Program output: -2                 
Correct output: -33                 | Program output: 5                  
Correct output: -62                 | Program output: 0                  
Correct output: -76                 | Program output: -41                
Correct output: -71                 | Program output: -71                
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -41                
Correct output: -78                 | Program output: -78                
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: 23                 
Correct output: -37                 | Program output: -22                
Correct output: -100                | Program output: -24                
Correct output: -68                 | Program output: -48                
Correct output: -10                 | Program output: -10                
Correct output: -99                 | Program output: -66                
Correct output: -52                 | Program output: -47                
Correct output: -71                 | Program output: -71                
Correct output: -17                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -98                 | Program output: -45                
Correct output: -32                 | Program output: 19                 
Correct output: -62                 | Program output: -62                
Correct output: -59                 | Program output: 66                 
Correct output: -98                 | Program output: -35                
Correct output: -40                 | Program output: -40                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Lexicase best program: (integer_yankdup exec_empty integer_add integer_swap boolean_rot exec_swap (exec_k (integer_yankdup integer_stackdepth boolean_dup_items integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4 integer_shove integer_min exec_if (print_integer boolean_shove) ()) ()) ())
Lexicase best errors: [0 0 1 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 43
Percent parens: 0.209
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Zero cases best program: (integer_yankdup exec_empty integer_add integer_swap boolean_rot exec_swap (exec_k (integer_yankdup integer_stackdepth boolean_dup_items integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4 integer_shove integer_min exec_if (print_integer boolean_shove) ()) ()) ())
Zero cases best errors: [0 0 1 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 43
Percent parens: 0.209
--- Lexicase Population Statistics ---
Count of elite individuals by case: (431 433 1000 440 1000 431 712 431 713 709)
Population mean number of elite cases: 6.30
Count of perfect (error zero) individuals by case: (431 433 0 440 0 431 712 431 713 709)
Population mean number of perfect (error zero) cases: 4.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Best program: (integer_dup_times exec_empty integer_add integer_swap boolean_rot exec_swap (exec_k (integer_yankdup integer_stackdepth boolean_dup_items integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4 integer_shove integer_min exec_if (print_integer boolean_shove) ()) ()) ())
Errors: [0 0 1 1 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 34
Size: 43
Percent parens: 0.209
--- Population Statistics ---
Average total errors in population: 5.7
Median total errors in population: 6
Error averages by case: (0.569 0.567 1.0 0.56 1.0 0.569 0.288 0.569 0.287 0.291)
Error minima by case: (0 0 1 0 1 0 0 0 0 0)
Average genome size in population (length): 33.941
Average program size in population (points): 43.101
Average percent parens in population: 0.212
Minimum age in population: 24.78546142578125
Maximum age in population: 28.83806610107422
Average age in population: 27.2674022064209
Median age in population: 27.3751335144043
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 143
Genome diversity (% unique genomes):	 0.497
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 151
Syntactic diversity (% unique Push programs):	 0.469
Total error diversity:				 0.008
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 8859126
--- Timings ---
Current time: 1559314689697 milliseconds
Total Time:          53.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.1 seconds, 69.3%
Fitness Testing:      9.5 seconds, 17.8%
Report:               6.8 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 425
Test mean error for best: 0.42500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -7                  | Program output: -7                 
Correct output: 74                  | Program output: 74                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -49                
Correct output: 15                  | Program output: 15                 
Correct output: -26                 | Program output: -26                
Correct output: 28                  | Program output: 64                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -17                
Correct output: 68                  | Program output: 68                 
Correct output: 51                  | Program output: 51                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 34                 
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 18                 
Correct output: 4                   | Program output: 22                 
Correct output: 41                  | Program output: 88                 
Correct output: 22                  | Program output: 22                 
Correct output: 12                  | Program output: 75                 
Correct output: 32                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 11                  | Program output: 11                 
Correct output: 55                  | Program output: 68                 
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 10                 
Correct output: 15                  | Program output: 43                 
Correct output: 43                  | Program output: 43                 
Correct output: 17                  | Program output: 17                 
Correct output: 33                  | Program output: 62                 
Correct output: 8                   | Program output: 20                 
Correct output: 7                   | Program output: 16                 
Correct output: 9                   | Program output: 9                  
Correct output: -38                 | Program output: -38                
Correct output: -77                 | Program output: -55                
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -53                 | Program output: -11                
Correct output: -42                 | Program output: 18                 
Correct output: -83                 | Program output: -83                
Correct output: -80                 | Program output: 58                 
Correct output: -27                 | Program output: -27                
Correct output: -70                 | Program output: 48                 
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: 40                 
Correct output: -86                 | Program output: -86                
Correct output: -60                 | Program output: 33                 
Correct output: -53                 | Program output: -53                
Correct output: -85                 | Program output: 85                 
Correct output: -89                 | Program output: -45                
Correct output: -40                 | Program output: -40                
Correct output: -88                 | Program output: -88                
Correct output: -63                 | Program output: -63                
Correct output: -56                 | Program output: -44                
Correct output: -46                 | Program output: -46                
Correct output: -52                 | Program output: -52                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: -72                
Correct output: -100                | Program output: 30                 
Correct output: -75                 | Program output: -75                
Correct output: -48                 | Program output: -48                
Correct output: -85                 | Program output: 34                 
Correct output: -73                 | Program output: -73                
Correct output: 22                  | Program output: 59                 
Correct output: -99                 | Program output: -99                
Correct output: 27                  | Program output: 27                 
Correct output: -2                  | Program output: -2                 
Correct output: -33                 | Program output: 5                  
Correct output: -62                 | Program output: 0                  
Correct output: -76                 | Program output: -41                
Correct output: -71                 | Program output: -71                
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -41                
Correct output: -78                 | Program output: -78                
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: 23                 
Correct output: -37                 | Program output: -22                
Correct output: -100                | Program output: -24                
Correct output: -68                 | Program output: -48                
Correct output: -10                 | Program output: -10                
Correct output: -99                 | Program output: -66                
Correct output: -52                 | Program output: -47                
Correct output: -71                 | Program output: -71                
Correct output: -17                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -98                 | Program output: -45                
Correct output: -32                 | Program output: 19                 
Correct output: -62                 | Program output: -62                
Correct output: -59                 | Program output: 66                 
Correct output: -98                 | Program output: -35                
Correct output: -40                 | Program output: -40                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Lexicase best program: (integer_dup_times exec_empty integer_add integer_swap boolean_rot exec_swap (exec_k (integer_yankdup integer_stackdepth boolean_dup_items integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4 integer_shove integer_min exec_if (print_integer boolean_shove) ()) ()) ())
Lexicase best errors: [0 0 0 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 43
Percent parens: 0.209
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Zero cases best program: (integer_dup_times exec_empty integer_add integer_swap boolean_rot exec_swap (exec_k (integer_yankdup integer_stackdepth boolean_dup_items integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4 integer_shove integer_min exec_if (print_integer boolean_shove) ()) ()) ())
Zero cases best errors: [0 0 0 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 43
Percent parens: 0.209
--- Lexicase Population Statistics ---
Count of elite individuals by case: (738 604 729 1000 612 1000 270 739 739 1000)
Population mean number of elite cases: 7.43
Count of perfect (error zero) individuals by case: (738 604 729 0 612 0 270 739 739 0)
Population mean number of perfect (error zero) cases: 4.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Best program: (integer_dup_times exec_empty integer_add integer_swap boolean_rot exec_swap (exec_k (integer_yankdup integer_stackdepth boolean_dup_items integer_empty integer_dup_times integer_yank boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4 integer_shove integer_min exec_if (print_integer boolean_shove) ()) ()) ())
Errors: [0 0 0 1 0 1 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 34
Size: 43
Percent parens: 0.209
--- Population Statistics ---
Average total errors in population: 5.569
Median total errors in population: 4
Error averages by case: (0.262 0.396 0.271 1.0 0.388 1.0 0.73 0.261 0.261 1.0)
Error minima by case: (0 0 0 1 0 1 0 0 0 1)
Average genome size in population (length): 34.317
Average program size in population (points): 43.353
Average percent parens in population: 0.208
Minimum age in population: 25.97451019287109
Maximum age in population: 30.43344116210938
Average age in population: 28.7221241645813
Median age in population: 28.79549598693848
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 158
Genome diversity (% unique genomes):	 0.579
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 166
Syntactic diversity (% unique Push programs):	 0.556
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 9154730
--- Timings ---
Current time: 1559314692066 milliseconds
Total Time:          55.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.0 seconds, 69.7%
Fitness Testing:      9.8 seconds, 17.5%
Report:               7.1 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 417
Test mean error for best: 0.41700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -7                  | Program output: -7                 
Correct output: 74                  | Program output: 74                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 57                 
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -49                
Correct output: 15                  | Program output: 15                 
Correct output: -26                 | Program output: -26                
Correct output: 28                  | Program output: 64                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -17                
Correct output: 68                  | Program output: 68                 
Correct output: 51                  | Program output: 51                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 83                 
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 22                 
Correct output: 12                  | Program output: 12                 
Correct output: 32                  | Program output: 32                 
Correct output: 0                   | Program output: 0                  
Correct output: 11                  | Program output: 11                 
Correct output: 55                  | Program output: 55                 
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 80                 
Correct output: 15                  | Program output: 29                 
Correct output: 43                  | Program output: 43                 
Correct output: 17                  | Program output: 17                 
Correct output: 33                  | Program output: 55                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 11                 
Correct output: -38                 | Program output: -37                
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -53                 | Program output: -53                
Correct output: -42                 | Program output: 20                 
Correct output: -83                 | Program output: -55                
Correct output: -80                 | Program output: -80                
Correct output: -27                 | Program output: -27                
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -77                
Correct output: -86                 | Program output: -86                
Correct output: -60                 | Program output: -60                
Correct output: -53                 | Program output: -32                
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: -45                
Correct output: -40                 | Program output: -9                 
Correct output: -88                 | Program output: -88                
Correct output: -63                 | Program output: -63                
Correct output: -56                 | Program output: -56                
Correct output: -46                 | Program output: -46                
Correct output: -52                 | Program output: -16                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: 6                  
Correct output: -100                | Program output: 31                 
Correct output: -75                 | Program output: -75                
Correct output: -48                 | Program output: -14                
Correct output: -85                 | Program output: -85                
Correct output: -73                 | Program output: -6                 
Correct output: 22                  | Program output: 47                 
Correct output: -99                 | Program output: -99                
Correct output: 27                  | Program output: 40                 
Correct output: -2                  | Program output: 21                 
Correct output: -33                 | Program output: 5                  
Correct output: -62                 | Program output: -62                
Correct output: -76                 | Program output: 40                 
Correct output: -71                 | Program output: -71                
Correct output: -47                 | Program output: -36                
Correct output: -90                 | Program output: -32                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -78                
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -37                 | Program output: -37                
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: -10                
Correct output: -99                 | Program output: -99                
Correct output: -52                 | Program output: -52                
Correct output: -71                 | Program output: -27                
Correct output: -17                 | Program output: 13                 
Correct output: -94                 | Program output: -94                
Correct output: -98                 | Program output: -45                
Correct output: -32                 | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: 26                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Lexicase best program: (integer_dup_times exec_empty integer_add integer_swap exec_rot () (exec_swap (exec_k (integer_yankdup integer_stackdepth boolean_dup_items integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4 integer_shove integer_min exec_if () (print_integer boolean_shove)) ()) ()) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 45
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 1, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Zero cases best program: (integer_dup_times exec_empty integer_add integer_swap exec_rot () (exec_swap (exec_k (integer_yankdup integer_stackdepth boolean_dup_items integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4 integer_shove integer_min exec_if () (print_integer boolean_shove)) ()) ()) ())
Zero cases best errors: [0 0 0 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 45
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (534 752 831 755 334 534 792 843 334 752)
Population mean number of elite cases: 6.46
Count of perfect (error zero) individuals by case: (534 752 831 755 334 534 792 843 334 752)
Population mean number of perfect (error zero) cases: 6.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer})
Best program: (integer_dup_times exec_empty boolean_yankdup integer_swap boolean_rot integer_dup_times exec_empty integer_add integer_swap boolean_rot exec_swap (exec_k (integer_yankdup integer_stackdepth boolean_dup_items integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4 in2 integer_min exec_if (print_integer) ()) ()) ()) ())
Errors: [1 0 0 0 0 1 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 44
Size: 55
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 3.539
Median total errors in population: 2
Error averages by case: (0.466 0.248 0.169 0.245 0.666 0.466 0.208 0.157 0.666 0.248)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.523
Average program size in population (points): 43.531
Average percent parens in population: 0.207
Minimum age in population: 27.73046875
Maximum age in population: 32.29075050354004
Average age in population: 30.16032000160217
Median age in population: 30.2233190536499
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 112
Genome diversity (% unique genomes):	 0.642
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 117
Syntactic diversity (% unique Push programs):	 0.615
Total error diversity:				 0.008
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 9451490
--- Timings ---
Current time: 1559314694513 milliseconds
Total Time:          58.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        40.8 seconds, 70.0%
Fitness Testing:     10.0 seconds, 17.2%
Report:               7.3 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 417
Test mean error for best: 0.41700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -7                  | Program output: -7                 
Correct output: 74                  | Program output: 74                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 57                 
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -49                
Correct output: 15                  | Program output: 15                 
Correct output: -26                 | Program output: -26                
Correct output: 28                  | Program output: 64                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -17                
Correct output: 68                  | Program output: 68                 
Correct output: 51                  | Program output: 51                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 83                 
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 22                 
Correct output: 12                  | Program output: 12                 
Correct output: 32                  | Program output: 32                 
Correct output: 0                   | Program output: 0                  
Correct output: 11                  | Program output: 11                 
Correct output: 55                  | Program output: 55                 
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 80                 
Correct output: 15                  | Program output: 29                 
Correct output: 43                  | Program output: 43                 
Correct output: 17                  | Program output: 17                 
Correct output: 33                  | Program output: 55                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 11                 
Correct output: -38                 | Program output: -37                
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -53                 | Program output: -53                
Correct output: -42                 | Program output: 20                 
Correct output: -83                 | Program output: -55                
Correct output: -80                 | Program output: -80                
Correct output: -27                 | Program output: -27                
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -77                
Correct output: -86                 | Program output: -86                
Correct output: -60                 | Program output: -60                
Correct output: -53                 | Program output: -32                
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: -45                
Correct output: -40                 | Program output: -9                 
Correct output: -88                 | Program output: -88                
Correct output: -63                 | Program output: -63                
Correct output: -56                 | Program output: -56                
Correct output: -46                 | Program output: -46                
Correct output: -52                 | Program output: -16                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: 6                  
Correct output: -100                | Program output: 31                 
Correct output: -75                 | Program output: -75                
Correct output: -48                 | Program output: -14                
Correct output: -85                 | Program output: -85                
Correct output: -73                 | Program output: -6                 
Correct output: 22                  | Program output: 47                 
Correct output: -99                 | Program output: -99                
Correct output: 27                  | Program output: 40                 
Correct output: -2                  | Program output: 21                 
Correct output: -33                 | Program output: 5                  
Correct output: -62                 | Program output: -62                
Correct output: -76                 | Program output: 40                 
Correct output: -71                 | Program output: -71                
Correct output: -47                 | Program output: -36                
Correct output: -90                 | Program output: -32                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -78                
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -37                 | Program output: -37                
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: -10                
Correct output: -99                 | Program output: -99                
Correct output: -52                 | Program output: -52                
Correct output: -71                 | Program output: -27                
Correct output: -17                 | Program output: 13                 
Correct output: -94                 | Program output: -94                
Correct output: -98                 | Program output: -45                
Correct output: -32                 | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: 26                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Lexicase best program: (integer_dup_times exec_empty integer_add integer_swap boolean_rot exec_swap (exec_k (integer_yankdup integer_stackdepth boolean_dup_items integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4 in2 integer_min exec_if (print_integer boolean_shove) ()) ()) ())
Lexicase best errors: [1 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 43
Percent parens: 0.209
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Zero cases best program: (integer_dup_times exec_empty integer_add integer_swap boolean_rot exec_swap (exec_k (integer_yankdup integer_stackdepth boolean_dup_items integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4 in2 integer_min exec_if (print_integer boolean_shove) ()) ()) ())
Zero cases best errors: [1 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 43
Percent parens: 0.209
--- Lexicase Population Statistics ---
Count of elite individuals by case: (454 520 676 519 519 670 519 673 673 520)
Population mean number of elite cases: 5.74
Count of perfect (error zero) individuals by case: (454 520 676 519 519 670 519 673 673 520)
Population mean number of perfect (error zero) cases: 5.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Best program: (integer_dup_times exec_empty integer_add integer_swap boolean_rot exec_swap (exec_k (integer_shove integer_stackdepth boolean_dup_items integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4 in2 integer_min exec_if (print_integer boolean_shove) ()) ()) ())
Errors: [1 0 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 34
Size: 43
Percent parens: 0.209
--- Population Statistics ---
Average total errors in population: 4.257
Median total errors in population: 4
Error averages by case: (0.546 0.48 0.324 0.481 0.481 0.33 0.481 0.327 0.327 0.48)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.731
Average program size in population (points): 43.667
Average percent parens in population: 0.204
Minimum age in population: 28.884765625
Maximum age in population: 33.67493724822998
Average age in population: 31.69796325778961
Median age in population: 31.76034545898438
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 55
Genome diversity (% unique genomes):	 0.663
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.637
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 9751240
--- Timings ---
Current time: 1559314697161 milliseconds
Total Time:          61.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        42.9 seconds, 70.4%
Fitness Testing:     10.3 seconds, 16.9%
Report:               7.6 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 417
Test mean error for best: 0.41700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -7                  | Program output: -7                 
Correct output: 74                  | Program output: 74                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: 57                 
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -49                
Correct output: 15                  | Program output: 15                 
Correct output: -26                 | Program output: -26                
Correct output: 28                  | Program output: 64                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -17                
Correct output: 68                  | Program output: 68                 
Correct output: 51                  | Program output: 51                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 83                 
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 22                 
Correct output: 12                  | Program output: 12                 
Correct output: 32                  | Program output: 32                 
Correct output: 0                   | Program output: 0                  
Correct output: 11                  | Program output: 11                 
Correct output: 55                  | Program output: 55                 
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 80                 
Correct output: 15                  | Program output: 29                 
Correct output: 43                  | Program output: 43                 
Correct output: 17                  | Program output: 17                 
Correct output: 33                  | Program output: 55                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 11                 
Correct output: -38                 | Program output: -37                
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -53                 | Program output: -53                
Correct output: -42                 | Program output: 20                 
Correct output: -83                 | Program output: -55                
Correct output: -80                 | Program output: -80                
Correct output: -27                 | Program output: -27                
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -77                
Correct output: -86                 | Program output: -86                
Correct output: -60                 | Program output: -60                
Correct output: -53                 | Program output: -32                
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: -45                
Correct output: -40                 | Program output: -9                 
Correct output: -88                 | Program output: -88                
Correct output: -63                 | Program output: -63                
Correct output: -56                 | Program output: -56                
Correct output: -46                 | Program output: -46                
Correct output: -52                 | Program output: -16                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: 6                  
Correct output: -100                | Program output: 31                 
Correct output: -75                 | Program output: -75                
Correct output: -48                 | Program output: -14                
Correct output: -85                 | Program output: -85                
Correct output: -73                 | Program output: -6                 
Correct output: 22                  | Program output: 47                 
Correct output: -99                 | Program output: -99                
Correct output: 27                  | Program output: 40                 
Correct output: -2                  | Program output: 21                 
Correct output: -33                 | Program output: 5                  
Correct output: -62                 | Program output: -62                
Correct output: -76                 | Program output: 40                 
Correct output: -71                 | Program output: -71                
Correct output: -47                 | Program output: -36                
Correct output: -90                 | Program output: -32                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -78                
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -37                 | Program output: -37                
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: -10                
Correct output: -99                 | Program output: -99                
Correct output: -52                 | Program output: -52                
Correct output: -71                 | Program output: -27                
Correct output: -17                 | Program output: 13                 
Correct output: -94                 | Program output: -94                
Correct output: -98                 | Program output: -45                
Correct output: -32                 | Program output: 31                 
Correct output: -62                 | Program output: -62                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: 26                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Lexicase best program: (integer_dup_times exec_empty boolean_yankdup integer_swap boolean_rot integer_dup_times exec_empty boolean_rot exec_swap (exec_k (integer_yankdup integer_stackdepth boolean_dup_items integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4 in2 integer_min exec_if (print_integer boolean_shove) ()) ()) ())
Lexicase best errors: [1 0 0 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 46
Percent parens: 0.196
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Zero cases best program: (integer_dup_times exec_empty boolean_yankdup integer_swap boolean_rot integer_dup_times exec_empty boolean_rot exec_swap (exec_k (integer_yankdup integer_stackdepth boolean_dup_items integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4 in2 integer_min exec_if (print_integer boolean_shove) ()) ()) ())
Zero cases best errors: [1 0 0 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 46
Percent parens: 0.196
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 743 721 743 743 1000 743 743 211 718)
Population mean number of elite cases: 7.36
Count of perfect (error zero) individuals by case: (0 743 721 743 743 0 743 743 211 718)
Population mean number of perfect (error zero) cases: 5.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_rot} {:close 1, :instruction print_integer} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Best program: (integer_dup_times exec_empty integer_add boolean_flush boolean_rot print_integer exec_empty integer_add integer_swap boolean_rot exec_swap (exec_k (integer_yankdup integer_stackdepth boolean_dup_items integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4 in2 integer_min integer_min integer_dup print_integer boolean_shove) ()) ())
Errors: [1 0 0 0 0 1 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 37
Size: 44
Percent parens: 0.159
--- Population Statistics ---
Average total errors in population: 4.635
Median total errors in population: 3
Error averages by case: (1.0 0.257 0.279 0.257 0.257 1.0 0.257 0.257 0.789 0.282)
Error minima by case: (1 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 34.544
Average program size in population (points): 43.241
Average percent parens in population: 0.201
Minimum age in population: 30.46593475341797
Maximum age in population: 35.38835382461548
Average age in population: 33.21932759666443
Median age in population: 33.27630496025085
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 61
Genome diversity (% unique genomes):	 0.633
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.613
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 10054254
--- Timings ---
Current time: 1559314699668 milliseconds
Total Time:          63.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        44.9 seconds, 70.7%
Fitness Testing:     10.6 seconds, 16.7%
Report:               7.9 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 425
Test mean error for best: 0.42500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -7                  | Program output: -7                 
Correct output: 74                  | Program output: 74                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -49                
Correct output: 15                  | Program output: 15                 
Correct output: -26                 | Program output: -26                
Correct output: 28                  | Program output: 64                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -17                
Correct output: 68                  | Program output: 68                 
Correct output: 51                  | Program output: 51                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 34                 
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 18                 
Correct output: 4                   | Program output: 22                 
Correct output: 41                  | Program output: 88                 
Correct output: 22                  | Program output: 22                 
Correct output: 12                  | Program output: 75                 
Correct output: 32                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 11                  | Program output: 11                 
Correct output: 55                  | Program output: 68                 
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 10                 
Correct output: 15                  | Program output: 43                 
Correct output: 43                  | Program output: 43                 
Correct output: 17                  | Program output: 17                 
Correct output: 33                  | Program output: 62                 
Correct output: 8                   | Program output: 20                 
Correct output: 7                   | Program output: 16                 
Correct output: 9                   | Program output: 9                  
Correct output: -38                 | Program output: -38                
Correct output: -77                 | Program output: -55                
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -53                 | Program output: -11                
Correct output: -42                 | Program output: 18                 
Correct output: -83                 | Program output: -83                
Correct output: -80                 | Program output: 58                 
Correct output: -27                 | Program output: -27                
Correct output: -70                 | Program output: 48                 
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: 40                 
Correct output: -86                 | Program output: -86                
Correct output: -60                 | Program output: 33                 
Correct output: -53                 | Program output: -53                
Correct output: -85                 | Program output: 85                 
Correct output: -89                 | Program output: -45                
Correct output: -40                 | Program output: -40                
Correct output: -88                 | Program output: -88                
Correct output: -63                 | Program output: -63                
Correct output: -56                 | Program output: -44                
Correct output: -46                 | Program output: -46                
Correct output: -52                 | Program output: -52                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: -72                
Correct output: -100                | Program output: 30                 
Correct output: -75                 | Program output: -75                
Correct output: -48                 | Program output: -48                
Correct output: -85                 | Program output: 34                 
Correct output: -73                 | Program output: -73                
Correct output: 22                  | Program output: 59                 
Correct output: -99                 | Program output: -99                
Correct output: 27                  | Program output: 27                 
Correct output: -2                  | Program output: -2                 
Correct output: -33                 | Program output: 5                  
Correct output: -62                 | Program output: 0                  
Correct output: -76                 | Program output: -41                
Correct output: -71                 | Program output: -71                
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -90                
Correct output: -74                 | Program output: -41                
Correct output: -78                 | Program output: -78                
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: 23                 
Correct output: -37                 | Program output: -22                
Correct output: -100                | Program output: -24                
Correct output: -68                 | Program output: -48                
Correct output: -10                 | Program output: -10                
Correct output: -99                 | Program output: -66                
Correct output: -52                 | Program output: -47                
Correct output: -71                 | Program output: -71                
Correct output: -17                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -98                 | Program output: -45                
Correct output: -32                 | Program output: 19                 
Correct output: -62                 | Program output: -62                
Correct output: -59                 | Program output: 66                 
Correct output: -98                 | Program output: -35                
Correct output: -40                 | Program output: -40                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Lexicase best program: (integer_dup_times integer_add integer_swap boolean_rot exec_swap (exec_k (integer_yankdup integer_stackdepth boolean_dup_items integer_empty integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4 exec_shove (integer_min exec_if (print_integer boolean_shove) ())) ()) ())
Lexicase best errors: [0 0 0 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 46
Percent parens: 0.217
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Zero cases best program: (integer_dup_times integer_add integer_swap boolean_rot exec_swap (exec_k (integer_yankdup integer_stackdepth boolean_dup_items integer_empty integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4 exec_shove (integer_min exec_if (print_integer boolean_shove) ())) ()) ())
Zero cases best errors: [0 0 0 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 46
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (840 817 592 1000 836 840 274 778 595 273)
Population mean number of elite cases: 6.84
Count of perfect (error zero) individuals by case: (840 817 592 0 836 840 274 778 595 273)
Population mean number of perfect (error zero) cases: 5.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_k} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_div} {:close 0, :instruction exec_if} {:close 0, :instruction integer_inc} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove})
Best program: (integer_dup_times integer_dup_times exec_empty integer_add integer_swap boolean_rot exec_swap (exec_k (integer_yankdup integer_stackdepth boolean_dup_items integer_empty integer_dup_times integer_dup_times boolean_yank integer_div exec_if (integer_inc in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4 integer_shove integer_min exec_if (print_integer boolean_shove) ()) ()) ())
Errors: [0 0 0 1 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 35
Size: 44
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 4.155
Median total errors in population: 3
Error averages by case: (0.16 0.183 0.408 1.0 0.164 0.16 0.726 0.222 0.405 0.727)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 34.452
Average program size in population (points): 43.101
Average percent parens in population: 0.200
Minimum age in population: 32.04376602172852
Maximum age in population: 36.66553378105164
Average age in population: 34.75196044611931
Median age in population: 34.84354639053345
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 52
Genome diversity (% unique genomes):	 0.666
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.642
Total error diversity:				 0.006
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 10353903
--- Timings ---
Current time: 1559314702007 milliseconds
Total Time:          65.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        46.7 seconds, 71.0%
Fitness Testing:     10.8 seconds, 16.5%
Report:               8.2 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 327
Test mean error for best: 0.32700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -7                  | Program output: -7                 
Correct output: 74                  | Program output: 74                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -49                
Correct output: 15                  | Program output: 15                 
Correct output: -26                 | Program output: -26                
Correct output: 28                  | Program output: 64                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -17                
Correct output: 68                  | Program output: 68                 
Correct output: 51                  | Program output: 51                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 34                 
Correct output: 4                   | Program output: 59                 
Correct output: 15                  | Program output: 15                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 55                 
Correct output: 12                  | Program output: 12                 
Correct output: 32                  | Program output: 32                 
Correct output: 0                   | Program output: 0                  
Correct output: 11                  | Program output: 44                 
Correct output: 55                  | Program output: 55                 
Correct output: 27                  | Program output: 28                 
Correct output: 7                   | Program output: 10                 
Correct output: 15                  | Program output: 29                 
Correct output: 43                  | Program output: 62                 
Correct output: 17                  | Program output: 17                 
Correct output: 33                  | Program output: 55                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 9                  
Correct output: -38                 | Program output: -38                
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -53                 | Program output: -53                
Correct output: -42                 | Program output: 18                 
Correct output: -83                 | Program output: -55                
Correct output: -80                 | Program output: -80                
Correct output: -27                 | Program output: -27                
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -77                
Correct output: -86                 | Program output: -86                
Correct output: -60                 | Program output: -60                
Correct output: -53                 | Program output: -32                
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: -45                
Correct output: -40                 | Program output: -9                 
Correct output: -88                 | Program output: -88                
Correct output: -63                 | Program output: -63                
Correct output: -56                 | Program output: -56                
Correct output: -46                 | Program output: -46                
Correct output: -52                 | Program output: -16                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: -72                
Correct output: -100                | Program output: 30                 
Correct output: -75                 | Program output: -75                
Correct output: -48                 | Program output: -48                
Correct output: -85                 | Program output: -85                
Correct output: -73                 | Program output: -73                
Correct output: 22                  | Program output: 47                 
Correct output: -99                 | Program output: -99                
Correct output: 27                  | Program output: 27                 
Correct output: -2                  | Program output: -2                 
Correct output: -33                 | Program output: 25                 
Correct output: -62                 | Program output: -62                
Correct output: -76                 | Program output: -41                
Correct output: -71                 | Program output: -71                
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -32                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -78                
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -37                 | Program output: -37                
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: -10                
Correct output: -99                 | Program output: -99                
Correct output: -52                 | Program output: -52                
Correct output: -71                 | Program output: -27                
Correct output: -17                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -98                 | Program output: -45                
Correct output: -32                 | Program output: 19                 
Correct output: -62                 | Program output: -62                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: -40                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove})
Lexicase best program: (integer_dup_times exec_empty integer_add boolean_frominteger boolean_rot exec_swap (boolean_dup_times integer_yankdup integer_stackdepth boolean_dup_items) (integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4) in2 integer_min exec_if (print_integer) (boolean_shove))
Lexicase best errors: [0 1 0 0 0 1 0 0 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 41
Percent parens: 0.171
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove})
Zero cases best program: (integer_dup_times exec_empty integer_add boolean_frominteger boolean_rot exec_swap (boolean_dup_times integer_yankdup integer_stackdepth boolean_dup_items) (integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4) in2 integer_min exec_if (print_integer) (boolean_shove))
Zero cases best errors: [0 1 0 0 0 1 0 0 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 41
Percent parens: 0.171
--- Lexicase Population Statistics ---
Count of elite individuals by case: (511 1000 836 877 508 1000 508 635 877 1000)
Population mean number of elite cases: 7.75
Count of perfect (error zero) individuals by case: (511 0 836 877 508 0 508 635 877 0)
Population mean number of perfect (error zero) cases: 4.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction integer_dec})
Best program: (integer_dup_times exec_empty integer_add boolean_frominteger boolean_rot exec_swap (boolean_dup_times integer_yankdup integer_stackdepth boolean_dup_items) (integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4) in2 integer_min exec_if (print_integer) (integer_dec))
Errors: [0 1 0 0 0 1 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 34
Size: 41
Percent parens: 0.171
--- Population Statistics ---
Average total errors in population: 5.248
Median total errors in population: 5
Error averages by case: (0.489 1.0 0.164 0.123 0.492 1.0 0.492 0.365 0.123 1.0)
Error minima by case: (0 1 0 0 0 1 0 0 0 1)
Average genome size in population (length): 33.986
Average program size in population (points): 41.885
Average percent parens in population: 0.188
Minimum age in population: 33.41797161102295
Maximum age in population: 38.21906089782715
Average age in population: 35.7288027946949
Median age in population: 35.70478320121765
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 244
Genome diversity (% unique genomes):	 0.539
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 253
Syntactic diversity (% unique Push programs):	 0.519
Total error diversity:				 0.007
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 10644380
--- Timings ---
Current time: 1559314704423 milliseconds
Total Time:          68.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        48.6 seconds, 71.3%
Fitness Testing:     11.1 seconds, 16.3%
Report:               8.4 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 265
Test mean error for best: 0.26500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -7                  | Program output: -7                 
Correct output: 74                  | Program output: 74                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -49                
Correct output: 15                  | Program output: 15                 
Correct output: -26                 | Program output: -26                
Correct output: 28                  | Program output: 64                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -17                
Correct output: 68                  | Program output: 68                 
Correct output: 51                  | Program output: 51                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 34                 
Correct output: 4                   | Program output: 4                  
Correct output: 15                  | Program output: 15                 
Correct output: 4                   | Program output: 4                  
Correct output: 41                  | Program output: 41                 
Correct output: 22                  | Program output: 22                 
Correct output: 12                  | Program output: 12                 
Correct output: 32                  | Program output: 32                 
Correct output: 0                   | Program output: 0                  
Correct output: 11                  | Program output: 11                 
Correct output: 55                  | Program output: 55                 
Correct output: 27                  | Program output: 27                 
Correct output: 7                   | Program output: 10                 
Correct output: 15                  | Program output: 29                 
Correct output: 43                  | Program output: 43                 
Correct output: 17                  | Program output: 17                 
Correct output: 33                  | Program output: 55                 
Correct output: 8                   | Program output: 8                  
Correct output: 7                   | Program output: 7                  
Correct output: 9                   | Program output: 9                  
Correct output: -38                 | Program output: -38                
Correct output: -77                 | Program output: -77                
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -53                 | Program output: -53                
Correct output: -42                 | Program output: 18                 
Correct output: -83                 | Program output: -55                
Correct output: -80                 | Program output: -80                
Correct output: -27                 | Program output: -27                
Correct output: -70                 | Program output: -70                
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: -77                
Correct output: -86                 | Program output: -86                
Correct output: -60                 | Program output: -60                
Correct output: -53                 | Program output: -32                
Correct output: -85                 | Program output: -85                
Correct output: -89                 | Program output: -45                
Correct output: -40                 | Program output: -9                 
Correct output: -88                 | Program output: -88                
Correct output: -63                 | Program output: -63                
Correct output: -56                 | Program output: -56                
Correct output: -46                 | Program output: -46                
Correct output: -52                 | Program output: -16                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: -72                
Correct output: -100                | Program output: 30                 
Correct output: -75                 | Program output: -75                
Correct output: -48                 | Program output: -48                
Correct output: -85                 | Program output: -85                
Correct output: -73                 | Program output: -73                
Correct output: 22                  | Program output: 47                 
Correct output: -99                 | Program output: -99                
Correct output: 27                  | Program output: 27                 
Correct output: -2                  | Program output: -2                 
Correct output: -33                 | Program output: 5                  
Correct output: -62                 | Program output: -62                
Correct output: -76                 | Program output: -41                
Correct output: -71                 | Program output: -71                
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -32                
Correct output: -74                 | Program output: -74                
Correct output: -78                 | Program output: -78                
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: -27                
Correct output: -37                 | Program output: -37                
Correct output: -100                | Program output: -100               
Correct output: -68                 | Program output: -68                
Correct output: -10                 | Program output: -10                
Correct output: -99                 | Program output: -99                
Correct output: -52                 | Program output: -52                
Correct output: -71                 | Program output: -27                
Correct output: -17                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -98                 | Program output: -45                
Correct output: -32                 | Program output: 19                 
Correct output: -62                 | Program output: -62                
Correct output: -59                 | Program output: -59                
Correct output: -98                 | Program output: -98                
Correct output: -40                 | Program output: -40                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove})
Lexicase best program: (integer_dup_times exec_empty integer_add boolean_frominteger boolean_rot exec_swap (boolean_dup_times integer_yankdup integer_stackdepth boolean_dup_items) (integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4) in2 integer_min integer_min exec_if (print_integer) (boolean_shove))
Lexicase best errors: [0 0 0 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 42
Percent parens: 0.167
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove})
Zero cases best program: (integer_dup_times exec_empty integer_add boolean_frominteger boolean_rot exec_swap (boolean_dup_times integer_yankdup integer_stackdepth boolean_dup_items) (integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4) in2 integer_min integer_min exec_if (print_integer) (boolean_shove))
Zero cases best errors: [0 0 0 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 42
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (915 828 125 831 829 1 18 727 828 900)
Population mean number of elite cases: 6.00
Count of perfect (error zero) individuals by case: (915 828 125 831 829 1 18 727 828 900)
Population mean number of perfect (error zero) cases: 6.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove})
Best program: (integer_dup_times exec_empty integer_add boolean_frominteger boolean_rot exec_swap (boolean_dup_times integer_yankdup integer_stackdepth boolean_dup_items) (integer_empty integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4) in2 integer_min integer_min exec_if (print_integer) (boolean_shove))
Errors: [0 0 0 0 0 1 1 0 0 0]
Total: 2
Mean: 0.2
Genome size: 32
Size: 39
Percent parens: 0.179
--- Population Statistics ---
Average total errors in population: 3.998
Median total errors in population: 3
Error averages by case: (0.085 0.172 0.875 0.169 0.171 0.999 0.982 0.273 0.172 0.1)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.127
Average program size in population (points): 41.227
Average percent parens in population: 0.172
Minimum age in population: 35.07478785514832
Maximum age in population: 38.56396168470383
Average age in population: 36.74178771358728
Median age in population: 36.81440037488937
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 453
Genome diversity (% unique genomes):	 0.431
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 485
Syntactic diversity (% unique Push programs):	 0.405
Total error diversity:				 0.008
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 10944265
--- Timings ---
Current time: 1559314706888 milliseconds
Total Time:          70.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        50.6 seconds, 71.5%
Fitness Testing:     11.4 seconds, 16.1%
Report:               8.7 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 348
Test mean error for best: 0.34800
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 1
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 1
Test Case   35 | Error: 1
Test Case   36 | Error: 0
Test Case   37 | Error: 1
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 1
Test Case   45 | Error: 1
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 1
Test Case  223 | Error: 1
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 1
Test Case  268 | Error: 1
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 1
Test Case  356 | Error: 1
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 1
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 1
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 1
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 1
Test Case  544 | Error: 1
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 1
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 1
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 1
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 1
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 1
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 1
Test Case  977 | Error: 1
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 1
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -7                  | Program output: -7                 
Correct output: 74                  | Program output: 74                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -49                
Correct output: 15                  | Program output: 15                 
Correct output: -26                 | Program output: -26                
Correct output: 28                  | Program output: 28                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -17                
Correct output: 68                  | Program output: 68                 
Correct output: 51                  | Program output: 51                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 34                 
Correct output: 4                   | Program output: 59                 
Correct output: 15                  | Program output: 43                 
Correct output: 4                   | Program output: 22                 
Correct output: 41                  | Program output: 78                 
Correct output: 22                  | Program output: 30                 
Correct output: 12                  | Program output: 59                 
Correct output: 32                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 11                  | Program output: 42                 
Correct output: 55                  | Program output: 68                 
Correct output: 27                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 15                  | Program output: 15                 
Correct output: 43                  | Program output: 61                 
Correct output: 17                  | Program output: 72                 
Correct output: 33                  | Program output: 33                 
Correct output: 8                   | Program output: 9                  
Correct output: 7                   | Program output: 16                 
Correct output: 9                   | Program output: 9                  
Correct output: -38                 | Program output: -38                
Correct output: -77                 | Program output: -55                
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -53                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -83                 | Program output: -50                
Correct output: -80                 | Program output: 76                 
Correct output: -27                 | Program output: -27                
Correct output: -70                 | Program output: 64                 
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: 38                 
Correct output: -86                 | Program output: -86                
Correct output: -60                 | Program output: 9                  
Correct output: -53                 | Program output: -16                
Correct output: -85                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: -40                 | Program output: -17                
Correct output: -88                 | Program output: -88                
Correct output: -63                 | Program output: -63                
Correct output: -56                 | Program output: -44                
Correct output: -46                 | Program output: -46                
Correct output: -52                 | Program output: -18                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: -72                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -75                
Correct output: -48                 | Program output: -48                
Correct output: -85                 | Program output: 27                 
Correct output: -73                 | Program output: -73                
Correct output: 22                  | Program output: 22                 
Correct output: -99                 | Program output: -99                
Correct output: 27                  | Program output: 27                 
Correct output: -2                  | Program output: -2                 
Correct output: -33                 | Program output: -33                
Correct output: -62                 | Program output: 0                  
Correct output: -76                 | Program output: -76                
Correct output: -71                 | Program output: -71                
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -32                
Correct output: -74                 | Program output: -64                
Correct output: -78                 | Program output: -78                
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: 11                 
Correct output: -37                 | Program output: -22                
Correct output: -100                | Program output: -60                
Correct output: -68                 | Program output: -49                
Correct output: -10                 | Program output: -10                
Correct output: -99                 | Program output: -29                
Correct output: -52                 | Program output: -49                
Correct output: -71                 | Program output: -27                
Correct output: -17                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: -32                
Correct output: -62                 | Program output: -62                
Correct output: -59                 | Program output: 87                 
Correct output: -98                 | Program output: -35                
Correct output: -40                 | Program output: -40                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove})
Lexicase best program: (integer_dup_times exec_empty integer_add boolean_frominteger boolean_rot exec_swap (boolean_dup_times integer_yankdup integer_stackdepth boolean_dup_items) (integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4) in3 integer_min exec_if (print_integer) (boolean_shove))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 41
Percent parens: 0.171
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove})
Zero cases best program: (integer_dup_times exec_empty integer_add boolean_frominteger boolean_rot exec_swap (boolean_dup_times integer_yankdup integer_stackdepth boolean_dup_items) (integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4) in3 integer_min exec_if (print_integer) (boolean_shove))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 41
Percent parens: 0.171
--- Lexicase Population Statistics ---
Count of elite individuals by case: (771 228 905 806 771 806 230 771 229 227)
Population mean number of elite cases: 5.74
Count of perfect (error zero) individuals by case: (771 228 905 806 771 806 230 771 229 227)
Population mean number of perfect (error zero) cases: 5.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_dup_times} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_rot} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_rot} {:close 1, :instruction exec_yankdup} {:close 1, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_shove})
Best program: (integer_dup_times exec_empty integer_add boolean_frominteger boolean_rot exec_swap (boolean_dup_times integer_yankdup integer_stackdepth boolean_dup_items) (integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4) in3 integer_min exec_if (print_integer) (boolean_shove))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 34
Size: 41
Percent parens: 0.171
--- Population Statistics ---
Average total errors in population: 4.256
Median total errors in population: 4
Error averages by case: (0.229 0.772 0.095 0.194 0.229 0.194 0.77 0.229 0.771 0.773)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.148
Average program size in population (points): 41.227
Average percent parens in population: 0.172
Minimum age in population: 36.54150581359863
Maximum age in population: 39.70131242275238
Average age in population: 38.28679504212737
Median age in population: 38.54527547955513
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 219
Genome diversity (% unique genomes):	 0.43
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 224
Syntactic diversity (% unique Push programs):	 0.416
Total error diversity:				 0.01
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.043
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 11245933
--- Timings ---
Current time: 1559314709198 milliseconds
Total Time:          73.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.4 seconds, 71.7%
Fitness Testing:     11.6 seconds, 15.9%
Report:               8.9 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 26
Successful program: (integer_dup_times exec_empty integer_add boolean_frominteger boolean_rot exec_swap (boolean_dup_times integer_yankdup integer_stackdepth boolean_dup_items) (integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4) in3 integer_min exec_if (print_integer) (boolean_shove))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 41


Auto-simplifying with starting size: 41
step: 0
program: (integer_dup_times exec_empty integer_add boolean_frominteger boolean_rot exec_swap (boolean_dup_times integer_yankdup integer_stackdepth boolean_dup_items) (integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4) in3 integer_min exec_if (print_integer) (boolean_shove))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

step: 500
program: (integer_dup_times exec_empty integer_add boolean_frominteger boolean_rot exec_swap (boolean_dup_times integer_yankdup integer_stackdepth boolean_dup_items) (integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4) in3 integer_min exec_if (print_integer) (boolean_shove))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

step: 1000
program: (integer_dup_times exec_empty integer_add boolean_frominteger boolean_rot exec_swap (boolean_dup_times integer_yankdup integer_stackdepth boolean_dup_items) (integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4) in3 integer_min exec_if (print_integer) (boolean_shove))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

step: 1500
program: (integer_dup_times exec_empty integer_add boolean_frominteger boolean_rot exec_swap (boolean_dup_times integer_yankdup integer_stackdepth boolean_dup_items) (integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4) in3 integer_min exec_if (print_integer) (boolean_shove))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

step: 2000
program: (integer_dup_times exec_empty integer_add boolean_frominteger boolean_rot exec_swap (boolean_dup_times integer_yankdup integer_stackdepth boolean_dup_items) (integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4) in3 integer_min exec_if (print_integer) (boolean_shove))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

step: 2500
program: (integer_dup_times exec_empty integer_add boolean_frominteger boolean_rot exec_swap (boolean_dup_times integer_yankdup integer_stackdepth boolean_dup_items) (integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4) in3 integer_min exec_if (print_integer) (boolean_shove))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

step: 3000
program: (integer_dup_times exec_empty integer_add boolean_frominteger boolean_rot exec_swap (boolean_dup_times integer_yankdup integer_stackdepth boolean_dup_items) (integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4) in3 integer_min exec_if (print_integer) (boolean_shove))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

step: 3500
program: (integer_dup_times exec_empty integer_add boolean_frominteger boolean_rot exec_swap (boolean_dup_times integer_yankdup integer_stackdepth boolean_dup_items) (integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4) in3 integer_min exec_if (print_integer) (boolean_shove))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

step: 4000
program: (integer_dup_times exec_empty integer_add boolean_frominteger boolean_rot exec_swap (boolean_dup_times integer_yankdup integer_stackdepth boolean_dup_items) (integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4) in3 integer_min exec_if (print_integer) (boolean_shove))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

step: 4500
program: (integer_dup_times exec_empty integer_add boolean_frominteger boolean_rot exec_swap (boolean_dup_times integer_yankdup integer_stackdepth boolean_dup_items) (integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4) in3 integer_min exec_if (print_integer) (boolean_shove))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

step: 5000
program: (integer_dup_times exec_empty integer_add boolean_frominteger boolean_rot exec_swap (boolean_dup_times integer_yankdup integer_stackdepth boolean_dup_items) (integer_empty integer_dup_times integer_dup_times boolean_yank integer_min exec_if (boolean_dup_times in1 boolean_flush boolean_stackdepth boolean_rot exec_yankdup) (boolean_dup_times in1 boolean_flush integer_flush boolean_rot exec_yankdup) in4) in3 integer_min exec_if (print_integer) (boolean_shove))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 41

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 348
Test mean error for best: 0.34800
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 1
Test Case    3 | Error: 1
Test Case    4 | Error: 0
Test Case    5 | Error: 1
Test Case    6 | Error: 1
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 1
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 1
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 1
Test Case   26 | Error: 0
Test Case   27 | Error: 1
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 1
Test Case   35 | Error: 1
Test Case   36 | Error: 0
Test Case   37 | Error: 1
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 1
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 1
Test Case   45 | Error: 1
Test Case   46 | Error: 0
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 1
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 1
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 1
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 1
Test Case   69 | Error: 0
Test Case   70 | Error: 1
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 1
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 1
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 1
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 1
Test Case   91 | Error: 1
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 1
Test Case  207 | Error: 1
Test Case  208 | Error: 1
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 1
Test Case  218 | Error: 0
Test Case  219 | Error: 0
Test Case  220 | Error: 0
Test Case  221 | Error: 1
Test Case  222 | Error: 1
Test Case  223 | Error: 1
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 1
Test Case  227 | Error: 1
Test Case  228 | Error: 1
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 0
Test Case  235 | Error: 1
Test Case  236 | Error: 1
Test Case  237 | Error: 0
Test Case  238 | Error: 1
Test Case  239 | Error: 1
Test Case  240 | Error: 0
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 0
Test Case  245 | Error: 0
Test Case  246 | Error: 1
Test Case  247 | Error: 0
Test Case  248 | Error: 1
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 0
Test Case  252 | Error: 1
Test Case  253 | Error: 0
Test Case  254 | Error: 1
Test Case  255 | Error: 0
Test Case  256 | Error: 0
Test Case  257 | Error: 1
Test Case  258 | Error: 1
Test Case  259 | Error: 0
Test Case  260 | Error: 1
Test Case  261 | Error: 1
Test Case  262 | Error: 1
Test Case  263 | Error: 0
Test Case  264 | Error: 0
Test Case  265 | Error: 0
Test Case  266 | Error: 1
Test Case  267 | Error: 1
Test Case  268 | Error: 1
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 0
Test Case  272 | Error: 1
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 1
Test Case  278 | Error: 0
Test Case  279 | Error: 0
Test Case  280 | Error: 1
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 1
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 0
Test Case  288 | Error: 1
Test Case  289 | Error: 0
Test Case  290 | Error: 1
Test Case  291 | Error: 1
Test Case  292 | Error: 1
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 1
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 1
Test Case  300 | Error: 0
Test Case  301 | Error: 0
Test Case  302 | Error: 1
Test Case  303 | Error: 0
Test Case  304 | Error: 1
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 0
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 1
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 1
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 1
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 1
Test Case  340 | Error: 1
Test Case  341 | Error: 0
Test Case  342 | Error: 1
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 1
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 1
Test Case  354 | Error: 1
Test Case  355 | Error: 1
Test Case  356 | Error: 1
Test Case  357 | Error: 1
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 1
Test Case  366 | Error: 1
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 0
Test Case  376 | Error: 1
Test Case  377 | Error: 1
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 0
Test Case  381 | Error: 1
Test Case  382 | Error: 1
Test Case  383 | Error: 1
Test Case  384 | Error: 1
Test Case  385 | Error: 1
Test Case  386 | Error: 0
Test Case  387 | Error: 0
Test Case  388 | Error: 1
Test Case  389 | Error: 1
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 1
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 1
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 1
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 1
Test Case  413 | Error: 1
Test Case  414 | Error: 0
Test Case  415 | Error: 1
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 1
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 1
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 0
Test Case  434 | Error: 1
Test Case  435 | Error: 1
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 1
Test Case  439 | Error: 0
Test Case  440 | Error: 1
Test Case  441 | Error: 0
Test Case  442 | Error: 1
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 1
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 1
Test Case  449 | Error: 0
Test Case  450 | Error: 1
Test Case  451 | Error: 1
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 1
Test Case  456 | Error: 1
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 1
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 1
Test Case  468 | Error: 1
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 1
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 0
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 1
Test Case  485 | Error: 1
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 1
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 1
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 1
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 1
Test Case  505 | Error: 1
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 1
Test Case  512 | Error: 0
Test Case  513 | Error: 1
Test Case  514 | Error: 1
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 1
Test Case  519 | Error: 0
Test Case  520 | Error: 0
Test Case  521 | Error: 1
Test Case  522 | Error: 1
Test Case  523 | Error: 0
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 1
Test Case  527 | Error: 1
Test Case  528 | Error: 0
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 0
Test Case  532 | Error: 1
Test Case  533 | Error: 0
Test Case  534 | Error: 1
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 1
Test Case  540 | Error: 0
Test Case  541 | Error: 0
Test Case  542 | Error: 1
Test Case  543 | Error: 1
Test Case  544 | Error: 1
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 1
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 0
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 1
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 1
Test Case  559 | Error: 1
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 0
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 0
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 0
Test Case  572 | Error: 0
Test Case  573 | Error: 0
Test Case  574 | Error: 1
Test Case  575 | Error: 0
Test Case  576 | Error: 1
Test Case  577 | Error: 0
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 1
Test Case  582 | Error: 0
Test Case  583 | Error: 1
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 1
Test Case  588 | Error: 0
Test Case  589 | Error: 1
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 1
Test Case  598 | Error: 0
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 1
Test Case  609 | Error: 0
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 0
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 0
Test Case  617 | Error: 1
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 1
Test Case  631 | Error: 1
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 1
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 1
Test Case  641 | Error: 0
Test Case  642 | Error: 0
Test Case  643 | Error: 0
Test Case  644 | Error: 0
Test Case  645 | Error: 1
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 0
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 1
Test Case  657 | Error: 0
Test Case  658 | Error: 0
Test Case  659 | Error: 1
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 1
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 1
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 1
Test Case  670 | Error: 1
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 1
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 0
Test Case  684 | Error: 0
Test Case  685 | Error: 1
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 0
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 1
Test Case  694 | Error: 0
Test Case  695 | Error: 1
Test Case  696 | Error: 1
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 0
Test Case  701 | Error: 0
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 1
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 1
Test Case  711 | Error: 1
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 1
Test Case  720 | Error: 1
Test Case  721 | Error: 1
Test Case  722 | Error: 1
Test Case  723 | Error: 0
Test Case  724 | Error: 0
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 1
Test Case  735 | Error: 1
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 1
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 1
Test Case  747 | Error: 1
Test Case  748 | Error: 1
Test Case  749 | Error: 0
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 1
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 1
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 0
Test Case  776 | Error: 0
Test Case  777 | Error: 0
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 1
Test Case  781 | Error: 0
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 1
Test Case  785 | Error: 1
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 1
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 1
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 0
Test Case  810 | Error: 0
Test Case  811 | Error: 1
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 0
Test Case  815 | Error: 0
Test Case  816 | Error: 1
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 1
Test Case  821 | Error: 0
Test Case  822 | Error: 1
Test Case  823 | Error: 0
Test Case  824 | Error: 1
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 1
Test Case  828 | Error: 0
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 1
Test Case  839 | Error: 0
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 1
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 1
Test Case  854 | Error: 1
Test Case  855 | Error: 0
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 1
Test Case  861 | Error: 0
Test Case  862 | Error: 1
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 1
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 1
Test Case  876 | Error: 1
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 1
Test Case  886 | Error: 1
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 1
Test Case  903 | Error: 1
Test Case  904 | Error: 1
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 1
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 1
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 1
Test Case  923 | Error: 1
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 1
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 1
Test Case  933 | Error: 1
Test Case  934 | Error: 0
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 0
Test Case  938 | Error: 0
Test Case  939 | Error: 0
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 1
Test Case  943 | Error: 0
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 1
Test Case  947 | Error: 1
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 1
Test Case  952 | Error: 1
Test Case  953 | Error: 1
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 1
Test Case  957 | Error: 1
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 1
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 1
Test Case  977 | Error: 1
Test Case  978 | Error: 1
Test Case  979 | Error: 0
Test Case  980 | Error: 1
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 1
Test Case  984 | Error: 1
Test Case  985 | Error: 0
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 1
Test Case  991 | Error: 0
Test Case  992 | Error: 1
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 0
Test Case  996 | Error: 0
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -7                  | Program output: -7                 
Correct output: 74                  | Program output: 74                 
Correct output: -86                 | Program output: -86                
Correct output: -6                  | Program output: -6                 
Correct output: -88                 | Program output: -88                
Correct output: -49                 | Program output: -49                
Correct output: 15                  | Program output: 15                 
Correct output: -26                 | Program output: -26                
Correct output: 28                  | Program output: 28                 
Correct output: -69                 | Program output: -69                
Correct output: -84                 | Program output: -84                
Correct output: -17                 | Program output: -17                
Correct output: 68                  | Program output: 68                 
Correct output: 51                  | Program output: 51                 
Correct output: 82                  | Program output: 82                 
Correct output: 34                  | Program output: 34                 
Correct output: 4                   | Program output: 59                 
Correct output: 15                  | Program output: 43                 
Correct output: 4                   | Program output: 22                 
Correct output: 41                  | Program output: 78                 
Correct output: 22                  | Program output: 30                 
Correct output: 12                  | Program output: 59                 
Correct output: 32                  | Program output: 37                 
Correct output: 0                   | Program output: 0                  
Correct output: 11                  | Program output: 42                 
Correct output: 55                  | Program output: 68                 
Correct output: 27                  | Program output: 28                 
Correct output: 7                   | Program output: 7                  
Correct output: 15                  | Program output: 15                 
Correct output: 43                  | Program output: 61                 
Correct output: 17                  | Program output: 72                 
Correct output: 33                  | Program output: 33                 
Correct output: 8                   | Program output: 9                  
Correct output: 7                   | Program output: 16                 
Correct output: 9                   | Program output: 9                  
Correct output: -38                 | Program output: -38                
Correct output: -77                 | Program output: -55                
Correct output: -36                 | Program output: -36                
Correct output: -72                 | Program output: -72                
Correct output: -66                 | Program output: -66                
Correct output: -53                 | Program output: -28                
Correct output: -42                 | Program output: -42                
Correct output: -83                 | Program output: -50                
Correct output: -80                 | Program output: 76                 
Correct output: -27                 | Program output: -27                
Correct output: -70                 | Program output: 64                 
Correct output: -81                 | Program output: -81                
Correct output: -77                 | Program output: 38                 
Correct output: -86                 | Program output: -86                
Correct output: -60                 | Program output: 9                  
Correct output: -53                 | Program output: -16                
Correct output: -85                 | Program output: -52                
Correct output: -89                 | Program output: -89                
Correct output: -40                 | Program output: -17                
Correct output: -88                 | Program output: -88                
Correct output: -63                 | Program output: -63                
Correct output: -56                 | Program output: -44                
Correct output: -46                 | Program output: -46                
Correct output: -52                 | Program output: -18                
Correct output: -64                 | Program output: -64                
Correct output: -72                 | Program output: -72                
Correct output: -100                | Program output: -100               
Correct output: -75                 | Program output: -75                
Correct output: -48                 | Program output: -48                
Correct output: -85                 | Program output: 27                 
Correct output: -73                 | Program output: -73                
Correct output: 22                  | Program output: 22                 
Correct output: -99                 | Program output: -99                
Correct output: 27                  | Program output: 27                 
Correct output: -2                  | Program output: -2                 
Correct output: -33                 | Program output: -33                
Correct output: -62                 | Program output: 0                  
Correct output: -76                 | Program output: -76                
Correct output: -71                 | Program output: -71                
Correct output: -47                 | Program output: -47                
Correct output: -90                 | Program output: -32                
Correct output: -74                 | Program output: -64                
Correct output: -78                 | Program output: -78                
Correct output: -79                 | Program output: -79                
Correct output: -27                 | Program output: 11                 
Correct output: -37                 | Program output: -22                
Correct output: -100                | Program output: -60                
Correct output: -68                 | Program output: -49                
Correct output: -10                 | Program output: -10                
Correct output: -99                 | Program output: -29                
Correct output: -52                 | Program output: -49                
Correct output: -71                 | Program output: -27                
Correct output: -17                 | Program output: -17                
Correct output: -94                 | Program output: -94                
Correct output: -98                 | Program output: -98                
Correct output: -32                 | Program output: -32                
Correct output: -62                 | Program output: -62                
Correct output: -59                 | Program output: 87                 
Correct output: -98                 | Program output: -35                
Correct output: -40                 | Program output: -40                
;;******************************
