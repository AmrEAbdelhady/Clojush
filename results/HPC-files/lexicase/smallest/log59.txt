Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x579dde54 clojush.problems.software.smallest$fn__7460@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@7e2a76be]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[48 48 48 98] 48] [[30 -33 30 30] -33] [[65 65 32 65] 32] [[89 24 89 89] 24] [[-20 -20 -79 -20] -79] [[36 -83 -83 -83] -83] [[-54 -54 -54 74] -54] [[-1 -20 -1 -1] -20] [[-79 99 99 99] -79] [[-85 -85 -85 -54] -85] [(-66 -66 -66 -66) -66] [(64 64 64 64) 64] [(-21 -21 -21 -21) -21] [(13 13 13 13) 13] [(35 35 35 35) 35] [(0 92 85 91) 0] [(89 29 27 3) 3] [(10 14 70 79) 10] [(21 82 41 72) 21] [(43 76 50 93) 43] [(66 20 98 40) 20] [(95 98 5 11) 5] [(50 62 85 6) 6] [(30 100 79 36) 30] [(85 89 41 13) 13] [(21 51 53 72) 21] [(99 79 19 39) 19] [(8 2 40 100) 2] [(29 2 20 75) 2] [(39 3 87 1) 1] [(84 84 96 1) 1] [(45 62 45 36) 36] [(8 84 10 73) 8] [(41 62 94 45) 41] [(48 18 35 83) 18] [(-25 45 65 1) -25] [(42 41 -25 0) -25] [(76 26 44 -31) -31] [(48 -35 30 73) -35] [(59 -49 35 5) -49] [(96 -24 -18 -85) -85] [(-7 -24 -12 39) -24] [(37 -93 -79 -28) -93] [(-81 44 24 74) -81] [(-11 100 -56 38) -56] [(-57 66 -55 64) -57] [(71 -83 -37 -97) -97] [(-58 92 27 -43) -58] [(64 3 -15 -66) -66] [(97 63 -13 -20) -20] [(39 44 -16 -91) -91] [(-6 -80 26 -58) -80] [(27 92 -60 -83) -83] [(67 57 4 -42) -42] [(60 33 38 93) 33] [(74 69 -56 -65) -65] [(64 81 -72 -79) -79] [(-86 -24 97 -30) -86] [(21 2 61 41) 2] [(32 18 33 -13) -13] [(-42 -73 -90 1) -90] [(55 -78 -87 -15) -87] [(-8 10 -51 95) -51] [(-40 67 -64 -55) -64] [(-90 -53 38 -75) -90] [(54 -34 59 34) -34] [(99 67 -57 9) -57] [(46 -76 50 75) -76] [(54 -86 74 -59) -86] [(1 25 80 54) 1] [(67 -98 -4 -86) -98] [(-14 -47 44 -39) -47] [(80 -34 85 -11) -34] [(28 27 -27 -80) -80] [(16 -34 -31 -10) -34] [(-15 36 87 77) -15] [(-46 95 86 -22) -46] [(56 17 88 63) 17] [(20 0 -78 98) -78] [(29 -92 -25 82) -92] [(-92 -29 -23 91) -92] [(2 -68 60 86) -68] [(35 -76 -32 -98) -98] [(3 64 -77 -24) -77] [(53 57 82 -21) -21] [(-76 -81 3 69) -81] [(-37 -35 11 -86) -86] [(84 85 -56 -53) -56] [(-12 19 81 2) -12] [(-75 60 -65 2) -75] [(46 -68 -62 88) -68] [(16 47 -97 99) -97] [(-71 -17 -44 -40) -71] [(-36 89 -10 -13) -36] [(53 97 55 -8) -8])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[48 48 48 98] 48]
Train Case:   6 | Input/Output: [[30 -33 30 30] -33]
Train Case:   7 | Input/Output: [[65 65 32 65] 32]
Train Case:   8 | Input/Output: [[89 24 89 89] 24]
Train Case:   9 | Input/Output: [[-20 -20 -79 -20] -79]
Train Case:  10 | Input/Output: [[36 -83 -83 -83] -83]
Train Case:  11 | Input/Output: [[-54 -54 -54 74] -54]
Train Case:  12 | Input/Output: [[-1 -20 -1 -1] -20]
Train Case:  13 | Input/Output: [[-79 99 99 99] -79]
Train Case:  14 | Input/Output: [[-85 -85 -85 -54] -85]
Train Case:  15 | Input/Output: [(-66 -66 -66 -66) -66]
Train Case:  16 | Input/Output: [(64 64 64 64) 64]
Train Case:  17 | Input/Output: [(-21 -21 -21 -21) -21]
Train Case:  18 | Input/Output: [(13 13 13 13) 13]
Train Case:  19 | Input/Output: [(35 35 35 35) 35]
Train Case:  20 | Input/Output: [(0 92 85 91) 0]
Train Case:  21 | Input/Output: [(89 29 27 3) 3]
Train Case:  22 | Input/Output: [(10 14 70 79) 10]
Train Case:  23 | Input/Output: [(21 82 41 72) 21]
Train Case:  24 | Input/Output: [(43 76 50 93) 43]
Train Case:  25 | Input/Output: [(66 20 98 40) 20]
Train Case:  26 | Input/Output: [(95 98 5 11) 5]
Train Case:  27 | Input/Output: [(50 62 85 6) 6]
Train Case:  28 | Input/Output: [(30 100 79 36) 30]
Train Case:  29 | Input/Output: [(85 89 41 13) 13]
Train Case:  30 | Input/Output: [(21 51 53 72) 21]
Train Case:  31 | Input/Output: [(99 79 19 39) 19]
Train Case:  32 | Input/Output: [(8 2 40 100) 2]
Train Case:  33 | Input/Output: [(29 2 20 75) 2]
Train Case:  34 | Input/Output: [(39 3 87 1) 1]
Train Case:  35 | Input/Output: [(84 84 96 1) 1]
Train Case:  36 | Input/Output: [(45 62 45 36) 36]
Train Case:  37 | Input/Output: [(8 84 10 73) 8]
Train Case:  38 | Input/Output: [(41 62 94 45) 41]
Train Case:  39 | Input/Output: [(48 18 35 83) 18]
Train Case:  40 | Input/Output: [(-25 45 65 1) -25]
Train Case:  41 | Input/Output: [(42 41 -25 0) -25]
Train Case:  42 | Input/Output: [(76 26 44 -31) -31]
Train Case:  43 | Input/Output: [(48 -35 30 73) -35]
Train Case:  44 | Input/Output: [(59 -49 35 5) -49]
Train Case:  45 | Input/Output: [(96 -24 -18 -85) -85]
Train Case:  46 | Input/Output: [(-7 -24 -12 39) -24]
Train Case:  47 | Input/Output: [(37 -93 -79 -28) -93]
Train Case:  48 | Input/Output: [(-81 44 24 74) -81]
Train Case:  49 | Input/Output: [(-11 100 -56 38) -56]
Train Case:  50 | Input/Output: [(-57 66 -55 64) -57]
Train Case:  51 | Input/Output: [(71 -83 -37 -97) -97]
Train Case:  52 | Input/Output: [(-58 92 27 -43) -58]
Train Case:  53 | Input/Output: [(64 3 -15 -66) -66]
Train Case:  54 | Input/Output: [(97 63 -13 -20) -20]
Train Case:  55 | Input/Output: [(39 44 -16 -91) -91]
Train Case:  56 | Input/Output: [(-6 -80 26 -58) -80]
Train Case:  57 | Input/Output: [(27 92 -60 -83) -83]
Train Case:  58 | Input/Output: [(67 57 4 -42) -42]
Train Case:  59 | Input/Output: [(60 33 38 93) 33]
Train Case:  60 | Input/Output: [(74 69 -56 -65) -65]
Train Case:  61 | Input/Output: [(64 81 -72 -79) -79]
Train Case:  62 | Input/Output: [(-86 -24 97 -30) -86]
Train Case:  63 | Input/Output: [(21 2 61 41) 2]
Train Case:  64 | Input/Output: [(32 18 33 -13) -13]
Train Case:  65 | Input/Output: [(-42 -73 -90 1) -90]
Train Case:  66 | Input/Output: [(55 -78 -87 -15) -87]
Train Case:  67 | Input/Output: [(-8 10 -51 95) -51]
Train Case:  68 | Input/Output: [(-40 67 -64 -55) -64]
Train Case:  69 | Input/Output: [(-90 -53 38 -75) -90]
Train Case:  70 | Input/Output: [(54 -34 59 34) -34]
Train Case:  71 | Input/Output: [(99 67 -57 9) -57]
Train Case:  72 | Input/Output: [(46 -76 50 75) -76]
Train Case:  73 | Input/Output: [(54 -86 74 -59) -86]
Train Case:  74 | Input/Output: [(1 25 80 54) 1]
Train Case:  75 | Input/Output: [(67 -98 -4 -86) -98]
Train Case:  76 | Input/Output: [(-14 -47 44 -39) -47]
Train Case:  77 | Input/Output: [(80 -34 85 -11) -34]
Train Case:  78 | Input/Output: [(28 27 -27 -80) -80]
Train Case:  79 | Input/Output: [(16 -34 -31 -10) -34]
Train Case:  80 | Input/Output: [(-15 36 87 77) -15]
Train Case:  81 | Input/Output: [(-46 95 86 -22) -46]
Train Case:  82 | Input/Output: [(56 17 88 63) 17]
Train Case:  83 | Input/Output: [(20 0 -78 98) -78]
Train Case:  84 | Input/Output: [(29 -92 -25 82) -92]
Train Case:  85 | Input/Output: [(-92 -29 -23 91) -92]
Train Case:  86 | Input/Output: [(2 -68 60 86) -68]
Train Case:  87 | Input/Output: [(35 -76 -32 -98) -98]
Train Case:  88 | Input/Output: [(3 64 -77 -24) -77]
Train Case:  89 | Input/Output: [(53 57 82 -21) -21]
Train Case:  90 | Input/Output: [(-76 -81 3 69) -81]
Train Case:  91 | Input/Output: [(-37 -35 11 -86) -86]
Train Case:  92 | Input/Output: [(84 85 -56 -53) -56]
Train Case:  93 | Input/Output: [(-12 19 81 2) -12]
Train Case:  94 | Input/Output: [(-75 60 -65 2) -75]
Train Case:  95 | Input/Output: [(46 -68 -62 88) -68]
Train Case:  96 | Input/Output: [(16 47 -97 99) -97]
Train Case:  97 | Input/Output: [(-71 -17 -44 -40) -71]
Train Case:  98 | Input/Output: [(-36 89 -10 -13) -36]
Train Case:  99 | Input/Output: [(53 97 55 -8) -8]
Test Case:   0 | Input/Output: [[-42 -42 -23 -42] -42]
Test Case:   1 | Input/Output: [[53 76 53 53] 53]
Test Case:   2 | Input/Output: [[78 78 29 78] 29]
Test Case:   3 | Input/Output: [[19 19 19 66] 19]
Test Case:   4 | Input/Output: [[-47 -47 46 -47] -47]
Test Case:   5 | Input/Output: [[-2 -2 -32 -2] -32]
Test Case:   6 | Input/Output: [[94 -92 -92 -92] -92]
Test Case:   7 | Input/Output: [[51 51 51 86] 51]
Test Case:   8 | Input/Output: [[18 72 72 72] 18]
Test Case:   9 | Input/Output: [[-25 61 61 61] -25]
Test Case:  10 | Input/Output: [[-73 -76 -76 -76] -76]
Test Case:  11 | Input/Output: [[-3 -3 -97 -3] -97]
Test Case:  12 | Input/Output: [[-91 76 76 76] -91]
Test Case:  13 | Input/Output: [[-40 -40 5 -40] -40]
Test Case:  14 | Input/Output: [[-91 58 -91 -91] -91]
Test Case:  15 | Input/Output: [[24 20 24 24] 20]
Test Case:  16 | Input/Output: [[94 97 94 94] 94]
Test Case:  17 | Input/Output: [[-48 -48 -48 -69] -69]
Test Case:  18 | Input/Output: [[-90 -90 -26 -90] -90]
Test Case:  19 | Input/Output: [[64 64 64 23] 23]
Test Case:  20 | Input/Output: [[79 79 42 79] 42]
Test Case:  21 | Input/Output: [[-59 83 -59 -59] -59]
Test Case:  22 | Input/Output: [[81 81 -6 81] -6]
Test Case:  23 | Input/Output: [[50 50 -93 50] -93]
Test Case:  24 | Input/Output: [[50 50 50 95] 50]
Test Case:  25 | Input/Output: [[68 68 -28 68] -28]
Test Case:  26 | Input/Output: [[98 98 98 -94] -94]
Test Case:  27 | Input/Output: [[-60 -99 -60 -60] -99]
Test Case:  28 | Input/Output: [[57 57 79 57] 57]
Test Case:  29 | Input/Output: [[45 45 45 68] 45]
Test Case:  30 | Input/Output: [[79 79 79 -77] -77]
Test Case:  31 | Input/Output: [[23 -8 23 23] -8]
Test Case:  32 | Input/Output: [[-14 -75 -14 -14] -75]
Test Case:  33 | Input/Output: [[2 -13 2 2] -13]
Test Case:  34 | Input/Output: [[-12 -12 -12 40] -12]
Test Case:  35 | Input/Output: [[22 22 15 22] 15]
Test Case:  36 | Input/Output: [[-66 -66 -66 -18] -66]
Test Case:  37 | Input/Output: [[11 11 61 11] 11]
Test Case:  38 | Input/Output: [[-52 -52 -52 66] -52]
Test Case:  39 | Input/Output: [[65 72 72 72] 65]
Test Case:  40 | Input/Output: [[99 99 -1 99] -1]
Test Case:  41 | Input/Output: [[-16 38 -16 -16] -16]
Test Case:  42 | Input/Output: [[-59 7 -59 -59] -59]
Test Case:  43 | Input/Output: [[25 35 25 25] 25]
Test Case:  44 | Input/Output: [[-27 -27 -27 -6] -27]
Test Case:  45 | Input/Output: [[-82 -82 -16 -82] -82]
Test Case:  46 | Input/Output: [[1 63 63 63] 1]
Test Case:  47 | Input/Output: [[13 13 13 50] 13]
Test Case:  48 | Input/Output: [[-12 -12 -12 86] -12]
Test Case:  49 | Input/Output: [[-17 93 -17 -17] -17]
Test Case:  50 | Input/Output: [[75 6 75 75] 6]
Test Case:  51 | Input/Output: [[61 61 61 -79] -79]
Test Case:  52 | Input/Output: [[-51 80 -51 -51] -51]
Test Case:  53 | Input/Output: [[-1 -1 -1 56] -1]
Test Case:  54 | Input/Output: [[-29 100 100 100] -29]
Test Case:  55 | Input/Output: [[58 58 58 50] 50]
Test Case:  56 | Input/Output: [[-85 100 -85 -85] -85]
Test Case:  57 | Input/Output: [[-72 13 -72 -72] -72]
Test Case:  58 | Input/Output: [[19 19 19 19] 19]
Test Case:  59 | Input/Output: [[-30 -30 -90 -30] -90]
Test Case:  60 | Input/Output: [[92 15 92 92] 15]
Test Case:  61 | Input/Output: [[71 -2 71 71] -2]
Test Case:  62 | Input/Output: [[-99 22 22 22] -99]
Test Case:  63 | Input/Output: [[27 26 27 27] 26]
Test Case:  64 | Input/Output: [[31 31 31 39] 31]
Test Case:  65 | Input/Output: [[97 18 18 18] 18]
Test Case:  66 | Input/Output: [[55 -2 -2 -2] -2]
Test Case:  67 | Input/Output: [[-52 15 -52 -52] -52]
Test Case:  68 | Input/Output: [[25 -83 25 25] -83]
Test Case:  69 | Input/Output: [[13 13 13 -64] -64]
Test Case:  70 | Input/Output: [[-54 -54 -54 -36] -54]
Test Case:  71 | Input/Output: [[-73 -85 -73 -73] -85]
Test Case:  72 | Input/Output: [[46 -81 -81 -81] -81]
Test Case:  73 | Input/Output: [[48 30 48 48] 30]
Test Case:  74 | Input/Output: [[-64 -64 -64 21] -64]
Test Case:  75 | Input/Output: [[24 -36 24 24] -36]
Test Case:  76 | Input/Output: [[-30 -30 -30 -89] -89]
Test Case:  77 | Input/Output: [[-85 -85 -85 39] -85]
Test Case:  78 | Input/Output: [[-26 -25 -26 -26] -26]
Test Case:  79 | Input/Output: [[8 -27 -27 -27] -27]
Test Case:  80 | Input/Output: [[-28 -28 -28 -52] -52]
Test Case:  81 | Input/Output: [[-6 -6 -79 -6] -79]
Test Case:  82 | Input/Output: [[77 77 42 77] 42]
Test Case:  83 | Input/Output: [[-60 -60 -60 89] -60]
Test Case:  84 | Input/Output: [[-55 -55 -55 83] -55]
Test Case:  85 | Input/Output: [[42 42 22 42] 22]
Test Case:  86 | Input/Output: [[-100 -100 -100 44] -100]
Test Case:  87 | Input/Output: [[-89 62 -89 -89] -89]
Test Case:  88 | Input/Output: [[-67 -67 -67 -50] -67]
Test Case:  89 | Input/Output: [[4 4 33 4] 4]
Test Case:  90 | Input/Output: [[-1 75 -1 -1] -1]
Test Case:  91 | Input/Output: [[-12 -12 -12 92] -12]
Test Case:  92 | Input/Output: [[-29 -29 90 -29] -29]
Test Case:  93 | Input/Output: [[17 17 17 26] 17]
Test Case:  94 | Input/Output: [[-46 67 -46 -46] -46]
Test Case:  95 | Input/Output: [[-41 47 -41 -41] -41]
Test Case:  96 | Input/Output: [[-42 -42 -42 -37] -42]
Test Case:  97 | Input/Output: [[67 67 67 15] 15]
Test Case:  98 | Input/Output: [[-86 -23 -23 -23] -86]
Test Case:  99 | Input/Output: [[91 -68 91 91] -68]
Test Case: 100 | Input/Output: [(35 35 35 35) 35]
Test Case: 101 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 102 | Input/Output: [(-10 -10 -10 -10) -10]
Test Case: 103 | Input/Output: [(-73 -73 -73 -73) -73]
Test Case: 104 | Input/Output: [(93 93 93 93) 93]
Test Case: 105 | Input/Output: [(22 22 22 22) 22]
Test Case: 106 | Input/Output: [(-22 -22 -22 -22) -22]
Test Case: 107 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 108 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 109 | Input/Output: [(26 26 26 26) 26]
Test Case: 110 | Input/Output: [(16 16 16 16) 16]
Test Case: 111 | Input/Output: [(-56 -56 -56 -56) -56]
Test Case: 112 | Input/Output: [(10 10 10 10) 10]
Test Case: 113 | Input/Output: [(84 84 84 84) 84]
Test Case: 114 | Input/Output: [(9 9 9 9) 9]
Test Case: 115 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 116 | Input/Output: [(55 55 55 55) 55]
Test Case: 117 | Input/Output: [(-85 -85 -85 -85) -85]
Test Case: 118 | Input/Output: [(74 74 74 74) 74]
Test Case: 119 | Input/Output: [(20 20 20 20) 20]
Test Case: 120 | Input/Output: [(72 72 72 72) 72]
Test Case: 121 | Input/Output: [(60 60 60 60) 60]
Test Case: 122 | Input/Output: [(-74 -74 -74 -74) -74]
Test Case: 123 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 124 | Input/Output: [(19 19 19 19) 19]
Test Case: 125 | Input/Output: [(4 4 4 4) 4]
Test Case: 126 | Input/Output: [(82 82 82 82) 82]
Test Case: 127 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 128 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 129 | Input/Output: [(63 63 63 63) 63]
Test Case: 130 | Input/Output: [(-58 -58 -58 -58) -58]
Test Case: 131 | Input/Output: [(-25 -25 -25 -25) -25]
Test Case: 132 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 133 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 134 | Input/Output: [(-3 -3 -3 -3) -3]
Test Case: 135 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 136 | Input/Output: [(68 68 68 68) 68]
Test Case: 137 | Input/Output: [(2 2 2 2) 2]
Test Case: 138 | Input/Output: [(22 22 22 22) 22]
Test Case: 139 | Input/Output: [(91 91 91 91) 91]
Test Case: 140 | Input/Output: [(-33 -33 -33 -33) -33]
Test Case: 141 | Input/Output: [(-87 -87 -87 -87) -87]
Test Case: 142 | Input/Output: [(9 9 9 9) 9]
Test Case: 143 | Input/Output: [(44 44 44 44) 44]
Test Case: 144 | Input/Output: [(41 41 41 41) 41]
Test Case: 145 | Input/Output: [(-1 -1 -1 -1) -1]
Test Case: 146 | Input/Output: [(70 70 70 70) 70]
Test Case: 147 | Input/Output: [(38 38 38 38) 38]
Test Case: 148 | Input/Output: [(55 55 55 55) 55]
Test Case: 149 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 150 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 151 | Input/Output: [(88 88 88 88) 88]
Test Case: 152 | Input/Output: [(31 31 31 31) 31]
Test Case: 153 | Input/Output: [(-70 -70 -70 -70) -70]
Test Case: 154 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 155 | Input/Output: [(29 29 29 29) 29]
Test Case: 156 | Input/Output: [(-59 -59 -59 -59) -59]
Test Case: 157 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 158 | Input/Output: [(97 97 97 97) 97]
Test Case: 159 | Input/Output: [(-14 -14 -14 -14) -14]
Test Case: 160 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 161 | Input/Output: [(-69 -69 -69 -69) -69]
Test Case: 162 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 163 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 164 | Input/Output: [(-41 -41 -41 -41) -41]
Test Case: 165 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 166 | Input/Output: [(38 38 38 38) 38]
Test Case: 167 | Input/Output: [(-40 -40 -40 -40) -40]
Test Case: 168 | Input/Output: [(65 65 65 65) 65]
Test Case: 169 | Input/Output: [(31 31 31 31) 31]
Test Case: 170 | Input/Output: [(5 5 5 5) 5]
Test Case: 171 | Input/Output: [(-52 -52 -52 -52) -52]
Test Case: 172 | Input/Output: [(-16 -16 -16 -16) -16]
Test Case: 173 | Input/Output: [(-45 -45 -45 -45) -45]
Test Case: 174 | Input/Output: [(-80 -80 -80 -80) -80]
Test Case: 175 | Input/Output: [(-44 -44 -44 -44) -44]
Test Case: 176 | Input/Output: [(50 50 50 50) 50]
Test Case: 177 | Input/Output: [(68 68 68 68) 68]
Test Case: 178 | Input/Output: [(-75 -75 -75 -75) -75]
Test Case: 179 | Input/Output: [(84 84 84 84) 84]
Test Case: 180 | Input/Output: [(-17 -17 -17 -17) -17]
Test Case: 181 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 182 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 183 | Input/Output: [(-48 -48 -48 -48) -48]
Test Case: 184 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 185 | Input/Output: [(82 82 82 82) 82]
Test Case: 186 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 187 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 188 | Input/Output: [(70 70 70 70) 70]
Test Case: 189 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 190 | Input/Output: [(77 77 77 77) 77]
Test Case: 191 | Input/Output: [(87 87 87 87) 87]
Test Case: 192 | Input/Output: [(86 86 86 86) 86]
Test Case: 193 | Input/Output: [(-97 -97 -97 -97) -97]
Test Case: 194 | Input/Output: [(52 52 52 52) 52]
Test Case: 195 | Input/Output: [(41 41 41 41) 41]
Test Case: 196 | Input/Output: [(70 70 70 70) 70]
Test Case: 197 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 198 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 199 | Input/Output: [(-23 -23 -23 -23) -23]
Test Case: 200 | Input/Output: [(15 68 14 67) 14]
Test Case: 201 | Input/Output: [(57 34 52 89) 34]
Test Case: 202 | Input/Output: [(81 100 56 94) 56]
Test Case: 203 | Input/Output: [(91 55 100 90) 55]
Test Case: 204 | Input/Output: [(88 96 47 75) 47]
Test Case: 205 | Input/Output: [(1 38 65 38) 1]
Test Case: 206 | Input/Output: [(47 76 19 34) 19]
Test Case: 207 | Input/Output: [(81 38 96 25) 25]
Test Case: 208 | Input/Output: [(11 41 57 49) 11]
Test Case: 209 | Input/Output: [(87 90 66 84) 66]
Test Case: 210 | Input/Output: [(11 67 29 94) 11]
Test Case: 211 | Input/Output: [(61 80 58 84) 58]
Test Case: 212 | Input/Output: [(52 23 92 13) 13]
Test Case: 213 | Input/Output: [(49 44 99 40) 40]
Test Case: 214 | Input/Output: [(78 81 3 9) 3]
Test Case: 215 | Input/Output: [(78 65 25 65) 25]
Test Case: 216 | Input/Output: [(68 81 83 62) 62]
Test Case: 217 | Input/Output: [(100 36 47 51) 36]
Test Case: 218 | Input/Output: [(29 42 3 80) 3]
Test Case: 219 | Input/Output: [(41 58 61 71) 41]
Test Case: 220 | Input/Output: [(1 18 15 34) 1]
Test Case: 221 | Input/Output: [(0 87 69 86) 0]
Test Case: 222 | Input/Output: [(27 1 68 76) 1]
Test Case: 223 | Input/Output: [(74 36 19 94) 19]
Test Case: 224 | Input/Output: [(1 31 8 26) 1]
Test Case: 225 | Input/Output: [(11 4 4 66) 4]
Test Case: 226 | Input/Output: [(77 2 83 95) 2]
Test Case: 227 | Input/Output: [(54 2 9 94) 2]
Test Case: 228 | Input/Output: [(43 27 55 89) 27]
Test Case: 229 | Input/Output: [(59 92 86 94) 59]
Test Case: 230 | Input/Output: [(75 76 96 45) 45]
Test Case: 231 | Input/Output: [(27 68 40 35) 27]
Test Case: 232 | Input/Output: [(89 37 15 28) 15]
Test Case: 233 | Input/Output: [(8 46 7 54) 7]
Test Case: 234 | Input/Output: [(64 85 73 16) 16]
Test Case: 235 | Input/Output: [(40 41 60 32) 32]
Test Case: 236 | Input/Output: [(89 63 52 74) 52]
Test Case: 237 | Input/Output: [(31 11 48 30) 11]
Test Case: 238 | Input/Output: [(16 8 76 0) 0]
Test Case: 239 | Input/Output: [(7 60 64 67) 7]
Test Case: 240 | Input/Output: [(2 78 64 78) 2]
Test Case: 241 | Input/Output: [(68 37 95 84) 37]
Test Case: 242 | Input/Output: [(61 7 17 85) 7]
Test Case: 243 | Input/Output: [(91 66 13 28) 13]
Test Case: 244 | Input/Output: [(13 85 89 75) 13]
Test Case: 245 | Input/Output: [(22 9 15 23) 9]
Test Case: 246 | Input/Output: [(19 9 76 20) 9]
Test Case: 247 | Input/Output: [(14 1 69 46) 1]
Test Case: 248 | Input/Output: [(53 38 13 76) 13]
Test Case: 249 | Input/Output: [(33 36 68 75) 33]
Test Case: 250 | Input/Output: [(50 54 25 84) 25]
Test Case: 251 | Input/Output: [(21 33 85 94) 21]
Test Case: 252 | Input/Output: [(45 42 97 28) 28]
Test Case: 253 | Input/Output: [(2 20 89 21) 2]
Test Case: 254 | Input/Output: [(21 10 83 11) 10]
Test Case: 255 | Input/Output: [(66 40 97 15) 15]
Test Case: 256 | Input/Output: [(3 76 34 87) 3]
Test Case: 257 | Input/Output: [(99 12 26 73) 12]
Test Case: 258 | Input/Output: [(32 21 6 8) 6]
Test Case: 259 | Input/Output: [(21 32 64 78) 21]
Test Case: 260 | Input/Output: [(63 90 53 6) 6]
Test Case: 261 | Input/Output: [(99 58 56 68) 56]
Test Case: 262 | Input/Output: [(29 29 63 76) 29]
Test Case: 263 | Input/Output: [(5 23 12 67) 5]
Test Case: 264 | Input/Output: [(11 89 22 17) 11]
Test Case: 265 | Input/Output: [(43 32 4 24) 4]
Test Case: 266 | Input/Output: [(67 4 1 10) 1]
Test Case: 267 | Input/Output: [(54 37 7 25) 7]
Test Case: 268 | Input/Output: [(3 42 47 51) 3]
Test Case: 269 | Input/Output: [(11 86 12 53) 11]
Test Case: 270 | Input/Output: [(63 93 77 28) 28]
Test Case: 271 | Input/Output: [(55 81 63 69) 55]
Test Case: 272 | Input/Output: [(80 87 97 22) 22]
Test Case: 273 | Input/Output: [(60 52 40 73) 40]
Test Case: 274 | Input/Output: [(68 68 22 77) 22]
Test Case: 275 | Input/Output: [(76 33 76 75) 33]
Test Case: 276 | Input/Output: [(58 17 92 36) 17]
Test Case: 277 | Input/Output: [(21 49 31 0) 0]
Test Case: 278 | Input/Output: [(10 29 25 100) 10]
Test Case: 279 | Input/Output: [(30 23 25 2) 2]
Test Case: 280 | Input/Output: [(76 43 13 67) 13]
Test Case: 281 | Input/Output: [(43 74 56 5) 5]
Test Case: 282 | Input/Output: [(61 3 48 10) 3]
Test Case: 283 | Input/Output: [(65 44 34 43) 34]
Test Case: 284 | Input/Output: [(38 50 13 19) 13]
Test Case: 285 | Input/Output: [(20 83 65 39) 20]
Test Case: 286 | Input/Output: [(44 82 77 88) 44]
Test Case: 287 | Input/Output: [(22 35 77 44) 22]
Test Case: 288 | Input/Output: [(93 15 0 85) 0]
Test Case: 289 | Input/Output: [(59 87 67 54) 54]
Test Case: 290 | Input/Output: [(66 74 100 29) 29]
Test Case: 291 | Input/Output: [(55 26 98 46) 26]
Test Case: 292 | Input/Output: [(17 47 4 0) 0]
Test Case: 293 | Input/Output: [(95 49 36 35) 35]
Test Case: 294 | Input/Output: [(79 35 20 53) 20]
Test Case: 295 | Input/Output: [(66 27 99 5) 5]
Test Case: 296 | Input/Output: [(95 80 16 89) 16]
Test Case: 297 | Input/Output: [(24 47 67 69) 24]
Test Case: 298 | Input/Output: [(24 19 12 56) 12]
Test Case: 299 | Input/Output: [(49 21 89 9) 9]
Test Case: 300 | Input/Output: [(99 59 89 78) 59]
Test Case: 301 | Input/Output: [(0 86 70 60) 0]
Test Case: 302 | Input/Output: [(26 5 57 6) 5]
Test Case: 303 | Input/Output: [(54 31 81 75) 31]
Test Case: 304 | Input/Output: [(96 47 48 84) 47]
Test Case: 305 | Input/Output: [(28 27 28 66) 27]
Test Case: 306 | Input/Output: [(9 92 2 23) 2]
Test Case: 307 | Input/Output: [(49 93 82 32) 32]
Test Case: 308 | Input/Output: [(65 7 0 50) 0]
Test Case: 309 | Input/Output: [(80 44 6 2) 2]
Test Case: 310 | Input/Output: [(18 79 97 54) 18]
Test Case: 311 | Input/Output: [(60 37 10 34) 10]
Test Case: 312 | Input/Output: [(61 78 96 71) 61]
Test Case: 313 | Input/Output: [(88 8 97 98) 8]
Test Case: 314 | Input/Output: [(97 45 83 53) 45]
Test Case: 315 | Input/Output: [(96 27 36 1) 1]
Test Case: 316 | Input/Output: [(14 60 94 8) 8]
Test Case: 317 | Input/Output: [(11 16 40 11) 11]
Test Case: 318 | Input/Output: [(99 53 84 30) 30]
Test Case: 319 | Input/Output: [(5 46 11 71) 5]
Test Case: 320 | Input/Output: [(54 86 90 59) 54]
Test Case: 321 | Input/Output: [(28 98 80 20) 20]
Test Case: 322 | Input/Output: [(7 77 36 98) 7]
Test Case: 323 | Input/Output: [(54 21 12 47) 12]
Test Case: 324 | Input/Output: [(81 29 71 49) 29]
Test Case: 325 | Input/Output: [(37 0 12 62) 0]
Test Case: 326 | Input/Output: [(89 54 66 74) 54]
Test Case: 327 | Input/Output: [(54 38 78 98) 38]
Test Case: 328 | Input/Output: [(70 97 75 3) 3]
Test Case: 329 | Input/Output: [(3 30 96 21) 3]
Test Case: 330 | Input/Output: [(47 68 6 90) 6]
Test Case: 331 | Input/Output: [(27 24 52 99) 24]
Test Case: 332 | Input/Output: [(38 13 13 22) 13]
Test Case: 333 | Input/Output: [(73 20 78 7) 7]
Test Case: 334 | Input/Output: [(13 31 29 55) 13]
Test Case: 335 | Input/Output: [(44 67 90 43) 43]
Test Case: 336 | Input/Output: [(19 61 24 4) 4]
Test Case: 337 | Input/Output: [(90 22 89 17) 17]
Test Case: 338 | Input/Output: [(85 20 63 69) 20]
Test Case: 339 | Input/Output: [(41 24 57 32) 24]
Test Case: 340 | Input/Output: [(97 47 5 20) 5]
Test Case: 341 | Input/Output: [(17 58 95 43) 17]
Test Case: 342 | Input/Output: [(38 10 6 51) 6]
Test Case: 343 | Input/Output: [(94 1 8 74) 1]
Test Case: 344 | Input/Output: [(55 26 63 32) 26]
Test Case: 345 | Input/Output: [(12 80 60 4) 4]
Test Case: 346 | Input/Output: [(61 68 89 66) 61]
Test Case: 347 | Input/Output: [(1 46 38 91) 1]
Test Case: 348 | Input/Output: [(54 14 39 59) 14]
Test Case: 349 | Input/Output: [(81 75 23 16) 16]
Test Case: 350 | Input/Output: [(19 53 70 69) 19]
Test Case: 351 | Input/Output: [(13 84 62 29) 13]
Test Case: 352 | Input/Output: [(10 17 99 24) 10]
Test Case: 353 | Input/Output: [(58 39 15 55) 15]
Test Case: 354 | Input/Output: [(90 50 18 28) 18]
Test Case: 355 | Input/Output: [(57 38 38 26) 26]
Test Case: 356 | Input/Output: [(10 28 66 41) 10]
Test Case: 357 | Input/Output: [(80 92 61 63) 61]
Test Case: 358 | Input/Output: [(15 66 80 15) 15]
Test Case: 359 | Input/Output: [(21 17 49 22) 17]
Test Case: 360 | Input/Output: [(37 91 47 15) 15]
Test Case: 361 | Input/Output: [(37 8 50 11) 8]
Test Case: 362 | Input/Output: [(5 13 5 37) 5]
Test Case: 363 | Input/Output: [(55 85 46 62) 46]
Test Case: 364 | Input/Output: [(59 92 63 37) 37]
Test Case: 365 | Input/Output: [(45 31 99 8) 8]
Test Case: 366 | Input/Output: [(85 25 79 19) 19]
Test Case: 367 | Input/Output: [(1 37 92 29) 1]
Test Case: 368 | Input/Output: [(8 26 4 4) 4]
Test Case: 369 | Input/Output: [(100 2 59 42) 2]
Test Case: 370 | Input/Output: [(70 2 1 40) 1]
Test Case: 371 | Input/Output: [(91 33 19 83) 19]
Test Case: 372 | Input/Output: [(23 1 62 71) 1]
Test Case: 373 | Input/Output: [(25 75 96 42) 25]
Test Case: 374 | Input/Output: [(53 23 33 30) 23]
Test Case: 375 | Input/Output: [(22 29 68 59) 22]
Test Case: 376 | Input/Output: [(92 59 2 72) 2]
Test Case: 377 | Input/Output: [(56 33 95 11) 11]
Test Case: 378 | Input/Output: [(1 40 10 84) 1]
Test Case: 379 | Input/Output: [(60 86 51 78) 51]
Test Case: 380 | Input/Output: [(13 20 49 45) 13]
Test Case: 381 | Input/Output: [(27 68 94 33) 27]
Test Case: 382 | Input/Output: [(93 15 100 49) 15]
Test Case: 383 | Input/Output: [(14 89 97 61) 14]
Test Case: 384 | Input/Output: [(29 31 98 19) 19]
Test Case: 385 | Input/Output: [(48 76 1 27) 1]
Test Case: 386 | Input/Output: [(69 25 36 58) 25]
Test Case: 387 | Input/Output: [(28 57 72 84) 28]
Test Case: 388 | Input/Output: [(55 54 1 75) 1]
Test Case: 389 | Input/Output: [(70 14 75 20) 14]
Test Case: 390 | Input/Output: [(30 55 62 24) 24]
Test Case: 391 | Input/Output: [(6 19 60 49) 6]
Test Case: 392 | Input/Output: [(60 59 67 0) 0]
Test Case: 393 | Input/Output: [(25 66 1 17) 1]
Test Case: 394 | Input/Output: [(33 80 78 10) 10]
Test Case: 395 | Input/Output: [(65 4 15 99) 4]
Test Case: 396 | Input/Output: [(95 47 75 90) 47]
Test Case: 397 | Input/Output: [(29 35 41 8) 8]
Test Case: 398 | Input/Output: [(41 22 4 77) 4]
Test Case: 399 | Input/Output: [(56 97 22 21) 21]
Test Case: 400 | Input/Output: [(-99 -63 -78 -24) -99]
Test Case: 401 | Input/Output: [(44 95 -46 -12) -46]
Test Case: 402 | Input/Output: [(-53 53 91 96) -53]
Test Case: 403 | Input/Output: [(46 -86 -56 -54) -86]
Test Case: 404 | Input/Output: [(-81 -8 -39 -89) -89]
Test Case: 405 | Input/Output: [(-87 -14 -71 -85) -87]
Test Case: 406 | Input/Output: [(-5 17 -65 -84) -84]
Test Case: 407 | Input/Output: [(48 -81 42 -47) -81]
Test Case: 408 | Input/Output: [(-84 43 -3 37) -84]
Test Case: 409 | Input/Output: [(-23 -29 24 -41) -41]
Test Case: 410 | Input/Output: [(22 -57 -29 -33) -57]
Test Case: 411 | Input/Output: [(83 11 -31 18) -31]
Test Case: 412 | Input/Output: [(-15 -85 -22 81) -85]
Test Case: 413 | Input/Output: [(84 -44 15 22) -44]
Test Case: 414 | Input/Output: [(-47 31 -65 77) -65]
Test Case: 415 | Input/Output: [(20 -64 29 -55) -64]
Test Case: 416 | Input/Output: [(14 25 -48 90) -48]
Test Case: 417 | Input/Output: [(84 -88 11 27) -88]
Test Case: 418 | Input/Output: [(-82 49 90 45) -82]
Test Case: 419 | Input/Output: [(-86 -22 63 -65) -86]
Test Case: 420 | Input/Output: [(93 -90 -68 73) -90]
Test Case: 421 | Input/Output: [(30 32 83 16) 16]
Test Case: 422 | Input/Output: [(93 58 62 86) 58]
Test Case: 423 | Input/Output: [(-10 -87 98 -71) -87]
Test Case: 424 | Input/Output: [(60 54 -7 6) -7]
Test Case: 425 | Input/Output: [(28 85 -8 -33) -33]
Test Case: 426 | Input/Output: [(-80 58 37 35) -80]
Test Case: 427 | Input/Output: [(51 68 -64 -71) -71]
Test Case: 428 | Input/Output: [(-70 -58 70 1) -70]
Test Case: 429 | Input/Output: [(-11 -36 29 -3) -36]
Test Case: 430 | Input/Output: [(40 -69 65 62) -69]
Test Case: 431 | Input/Output: [(-96 -69 96 -29) -96]
Test Case: 432 | Input/Output: [(35 -72 35 56) -72]
Test Case: 433 | Input/Output: [(10 34 76 15) 10]
Test Case: 434 | Input/Output: [(-40 23 -3 -40) -40]
Test Case: 435 | Input/Output: [(77 58 21 -87) -87]
Test Case: 436 | Input/Output: [(98 -92 39 -39) -92]
Test Case: 437 | Input/Output: [(3 -57 47 -46) -57]
Test Case: 438 | Input/Output: [(-21 -38 69 89) -38]
Test Case: 439 | Input/Output: [(15 26 38 55) 15]
Test Case: 440 | Input/Output: [(35 -14 99 -58) -58]
Test Case: 441 | Input/Output: [(-74 -81 93 30) -81]
Test Case: 442 | Input/Output: [(-46 32 23 -91) -91]
Test Case: 443 | Input/Output: [(-1 -91 -53 15) -91]
Test Case: 444 | Input/Output: [(68 -70 -73 51) -73]
Test Case: 445 | Input/Output: [(8 -9 -44 -32) -44]
Test Case: 446 | Input/Output: [(-87 -61 -56 2) -87]
Test Case: 447 | Input/Output: [(99 46 98 -16) -16]
Test Case: 448 | Input/Output: [(-14 30 17 -94) -94]
Test Case: 449 | Input/Output: [(96 -97 5 92) -97]
Test Case: 450 | Input/Output: [(-7 -74 35 74) -74]
Test Case: 451 | Input/Output: [(64 52 73 95) 52]
Test Case: 452 | Input/Output: [(51 -40 -16 -46) -46]
Test Case: 453 | Input/Output: [(-82 75 -88 -51) -88]
Test Case: 454 | Input/Output: [(-54 -43 -22 60) -54]
Test Case: 455 | Input/Output: [(-98 57 52 -28) -98]
Test Case: 456 | Input/Output: [(46 52 78 12) 12]
Test Case: 457 | Input/Output: [(76 -70 21 100) -70]
Test Case: 458 | Input/Output: [(-64 88 66 16) -64]
Test Case: 459 | Input/Output: [(24 65 23 -37) -37]
Test Case: 460 | Input/Output: [(73 53 -52 8) -52]
Test Case: 461 | Input/Output: [(70 10 -34 -12) -34]
Test Case: 462 | Input/Output: [(26 97 95 65) 26]
Test Case: 463 | Input/Output: [(-51 -68 47 55) -68]
Test Case: 464 | Input/Output: [(-50 58 91 -47) -50]
Test Case: 465 | Input/Output: [(65 -90 69 -88) -90]
Test Case: 466 | Input/Output: [(-61 76 5 -12) -61]
Test Case: 467 | Input/Output: [(70 64 -32 -29) -32]
Test Case: 468 | Input/Output: [(2 63 -46 -33) -46]
Test Case: 469 | Input/Output: [(-2 -57 -66 31) -66]
Test Case: 470 | Input/Output: [(39 -7 -60 7) -60]
Test Case: 471 | Input/Output: [(47 -75 -52 28) -75]
Test Case: 472 | Input/Output: [(-29 -24 -45 10) -45]
Test Case: 473 | Input/Output: [(-63 79 44 89) -63]
Test Case: 474 | Input/Output: [(-62 45 -14 48) -62]
Test Case: 475 | Input/Output: [(-71 12 -84 60) -84]
Test Case: 476 | Input/Output: [(-24 63 83 43) -24]
Test Case: 477 | Input/Output: [(-94 -50 -1 99) -94]
Test Case: 478 | Input/Output: [(46 -65 -28 -43) -65]
Test Case: 479 | Input/Output: [(68 37 55 72) 37]
Test Case: 480 | Input/Output: [(-99 19 58 97) -99]
Test Case: 481 | Input/Output: [(-92 -2 -55 23) -92]
Test Case: 482 | Input/Output: [(-3 -32 -65 -84) -84]
Test Case: 483 | Input/Output: [(47 99 28 42) 28]
Test Case: 484 | Input/Output: [(-100 46 -64 33) -100]
Test Case: 485 | Input/Output: [(-42 42 -68 -77) -77]
Test Case: 486 | Input/Output: [(77 78 33 -94) -94]
Test Case: 487 | Input/Output: [(57 -81 -100 57) -100]
Test Case: 488 | Input/Output: [(44 56 -28 -10) -28]
Test Case: 489 | Input/Output: [(94 -47 77 76) -47]
Test Case: 490 | Input/Output: [(-23 62 -100 90) -100]
Test Case: 491 | Input/Output: [(56 -43 85 -91) -91]
Test Case: 492 | Input/Output: [(-54 49 -32 -87) -87]
Test Case: 493 | Input/Output: [(37 -90 18 7) -90]
Test Case: 494 | Input/Output: [(65 -3 46 -17) -17]
Test Case: 495 | Input/Output: [(25 94 -93 64) -93]
Test Case: 496 | Input/Output: [(-77 68 67 9) -77]
Test Case: 497 | Input/Output: [(54 -5 -84 98) -84]
Test Case: 498 | Input/Output: [(-11 -49 34 12) -49]
Test Case: 499 | Input/Output: [(-41 -31 -2 -71) -71]
Test Case: 500 | Input/Output: [(56 -77 38 -34) -77]
Test Case: 501 | Input/Output: [(-13 3 64 -68) -68]
Test Case: 502 | Input/Output: [(-14 -70 20 -95) -95]
Test Case: 503 | Input/Output: [(52 -27 -13 -36) -36]
Test Case: 504 | Input/Output: [(82 10 -57 77) -57]
Test Case: 505 | Input/Output: [(63 -65 -99 27) -99]
Test Case: 506 | Input/Output: [(-63 42 -93 40) -93]
Test Case: 507 | Input/Output: [(-39 -12 -81 72) -81]
Test Case: 508 | Input/Output: [(45 -26 -45 90) -45]
Test Case: 509 | Input/Output: [(81 -62 -23 32) -62]
Test Case: 510 | Input/Output: [(-55 -35 -4 15) -55]
Test Case: 511 | Input/Output: [(-78 -49 -82 90) -82]
Test Case: 512 | Input/Output: [(23 94 -89 56) -89]
Test Case: 513 | Input/Output: [(88 51 -11 54) -11]
Test Case: 514 | Input/Output: [(-11 100 -45 92) -45]
Test Case: 515 | Input/Output: [(-37 -92 -69 30) -92]
Test Case: 516 | Input/Output: [(-16 -34 89 -54) -54]
Test Case: 517 | Input/Output: [(-9 -19 29 -99) -99]
Test Case: 518 | Input/Output: [(-23 -8 17 -33) -33]
Test Case: 519 | Input/Output: [(99 -5 -21 45) -21]
Test Case: 520 | Input/Output: [(-88 51 89 21) -88]
Test Case: 521 | Input/Output: [(-84 -12 -47 49) -84]
Test Case: 522 | Input/Output: [(91 69 -52 -32) -52]
Test Case: 523 | Input/Output: [(-71 22 -52 -78) -78]
Test Case: 524 | Input/Output: [(45 76 -66 -44) -66]
Test Case: 525 | Input/Output: [(5 -1 77 -63) -63]
Test Case: 526 | Input/Output: [(-4 69 -17 -98) -98]
Test Case: 527 | Input/Output: [(-90 26 -6 -39) -90]
Test Case: 528 | Input/Output: [(-28 8 -16 23) -28]
Test Case: 529 | Input/Output: [(47 37 -93 -23) -93]
Test Case: 530 | Input/Output: [(48 -10 12 21) -10]
Test Case: 531 | Input/Output: [(-94 46 66 62) -94]
Test Case: 532 | Input/Output: [(9 -94 -30 -60) -94]
Test Case: 533 | Input/Output: [(-1 92 -28 59) -28]
Test Case: 534 | Input/Output: [(75 -37 -53 -87) -87]
Test Case: 535 | Input/Output: [(17 7 -84 -7) -84]
Test Case: 536 | Input/Output: [(-37 -47 7 -36) -47]
Test Case: 537 | Input/Output: [(-76 70 -17 12) -76]
Test Case: 538 | Input/Output: [(-97 -97 77 -15) -97]
Test Case: 539 | Input/Output: [(-38 16 72 -83) -83]
Test Case: 540 | Input/Output: [(-10 -79 9 89) -79]
Test Case: 541 | Input/Output: [(-87 -83 92 -5) -87]
Test Case: 542 | Input/Output: [(96 -24 -6 52) -24]
Test Case: 543 | Input/Output: [(-26 75 23 4) -26]
Test Case: 544 | Input/Output: [(-25 65 30 -22) -25]
Test Case: 545 | Input/Output: [(-32 1 -22 -12) -32]
Test Case: 546 | Input/Output: [(92 74 -49 -57) -57]
Test Case: 547 | Input/Output: [(14 -22 88 -93) -93]
Test Case: 548 | Input/Output: [(-85 -41 14 -19) -85]
Test Case: 549 | Input/Output: [(68 43 -86 -21) -86]
Test Case: 550 | Input/Output: [(-37 -71 41 -99) -99]
Test Case: 551 | Input/Output: [(-66 -44 71 46) -66]
Test Case: 552 | Input/Output: [(-27 -61 -46 -29) -61]
Test Case: 553 | Input/Output: [(18 -56 -85 26) -85]
Test Case: 554 | Input/Output: [(17 -31 -13 80) -31]
Test Case: 555 | Input/Output: [(14 -19 -76 66) -76]
Test Case: 556 | Input/Output: [(58 -32 -15 50) -32]
Test Case: 557 | Input/Output: [(70 -42 -32 -13) -42]
Test Case: 558 | Input/Output: [(85 72 90 29) 29]
Test Case: 559 | Input/Output: [(93 52 68 -32) -32]
Test Case: 560 | Input/Output: [(-52 84 -90 92) -90]
Test Case: 561 | Input/Output: [(-22 -84 63 -47) -84]
Test Case: 562 | Input/Output: [(56 82 -76 61) -76]
Test Case: 563 | Input/Output: [(80 -30 -29 75) -30]
Test Case: 564 | Input/Output: [(-9 22 40 28) -9]
Test Case: 565 | Input/Output: [(-85 -7 67 15) -85]
Test Case: 566 | Input/Output: [(92 78 28 94) 28]
Test Case: 567 | Input/Output: [(-16 75 61 75) -16]
Test Case: 568 | Input/Output: [(29 83 -25 -51) -51]
Test Case: 569 | Input/Output: [(-9 9 28 -67) -67]
Test Case: 570 | Input/Output: [(-58 -87 99 11) -87]
Test Case: 571 | Input/Output: [(-57 73 81 63) -57]
Test Case: 572 | Input/Output: [(-41 20 33 49) -41]
Test Case: 573 | Input/Output: [(-77 99 54 -7) -77]
Test Case: 574 | Input/Output: [(-51 88 -22 -87) -87]
Test Case: 575 | Input/Output: [(72 83 -77 -78) -78]
Test Case: 576 | Input/Output: [(60 85 29 38) 29]
Test Case: 577 | Input/Output: [(-82 5 -13 84) -82]
Test Case: 578 | Input/Output: [(-88 41 -19 8) -88]
Test Case: 579 | Input/Output: [(10 66 3 76) 3]
Test Case: 580 | Input/Output: [(66 -92 22 -9) -92]
Test Case: 581 | Input/Output: [(-21 -77 -71 -28) -77]
Test Case: 582 | Input/Output: [(47 63 -72 -53) -72]
Test Case: 583 | Input/Output: [(-53 24 -64 -77) -77]
Test Case: 584 | Input/Output: [(6 46 -24 -75) -75]
Test Case: 585 | Input/Output: [(-17 -42 -95 9) -95]
Test Case: 586 | Input/Output: [(25 -4 72 97) -4]
Test Case: 587 | Input/Output: [(37 47 74 -61) -61]
Test Case: 588 | Input/Output: [(-31 100 -81 -85) -85]
Test Case: 589 | Input/Output: [(42 -36 -37 -50) -50]
Test Case: 590 | Input/Output: [(63 -43 67 81) -43]
Test Case: 591 | Input/Output: [(20 32 -2 7) -2]
Test Case: 592 | Input/Output: [(-22 53 23 39) -22]
Test Case: 593 | Input/Output: [(-45 48 11 33) -45]
Test Case: 594 | Input/Output: [(-52 71 -95 -27) -95]
Test Case: 595 | Input/Output: [(-38 39 -97 -51) -97]
Test Case: 596 | Input/Output: [(-65 -93 72 34) -93]
Test Case: 597 | Input/Output: [(-61 -88 -93 72) -93]
Test Case: 598 | Input/Output: [(-63 -36 40 -31) -63]
Test Case: 599 | Input/Output: [(75 33 -86 -72) -86]
Test Case: 600 | Input/Output: [(-40 13 -92 -54) -92]
Test Case: 601 | Input/Output: [(-6 -67 76 -11) -67]
Test Case: 602 | Input/Output: [(98 14 -55 -22) -55]
Test Case: 603 | Input/Output: [(56 -51 33 89) -51]
Test Case: 604 | Input/Output: [(-62 74 37 26) -62]
Test Case: 605 | Input/Output: [(98 -37 8 -59) -59]
Test Case: 606 | Input/Output: [(65 73 13 67) 13]
Test Case: 607 | Input/Output: [(-29 -2 44 -98) -98]
Test Case: 608 | Input/Output: [(-37 -46 -10 10) -46]
Test Case: 609 | Input/Output: [(-2 68 95 -24) -24]
Test Case: 610 | Input/Output: [(-94 -8 21 63) -94]
Test Case: 611 | Input/Output: [(39 41 -5 -66) -66]
Test Case: 612 | Input/Output: [(-40 -72 8 73) -72]
Test Case: 613 | Input/Output: [(-97 97 -1 69) -97]
Test Case: 614 | Input/Output: [(97 35 -66 -52) -66]
Test Case: 615 | Input/Output: [(-98 -30 -17 43) -98]
Test Case: 616 | Input/Output: [(-89 62 -87 -40) -89]
Test Case: 617 | Input/Output: [(-7 52 -13 -71) -71]
Test Case: 618 | Input/Output: [(-27 -78 28 -23) -78]
Test Case: 619 | Input/Output: [(-39 49 64 31) -39]
Test Case: 620 | Input/Output: [(62 34 -36 83) -36]
Test Case: 621 | Input/Output: [(-11 0 12 23) -11]
Test Case: 622 | Input/Output: [(15 -32 14 64) -32]
Test Case: 623 | Input/Output: [(38 67 -76 18) -76]
Test Case: 624 | Input/Output: [(-22 48 -60 64) -60]
Test Case: 625 | Input/Output: [(-2 56 -94 11) -94]
Test Case: 626 | Input/Output: [(19 24 49 -95) -95]
Test Case: 627 | Input/Output: [(24 -63 38 65) -63]
Test Case: 628 | Input/Output: [(28 87 73 -10) -10]
Test Case: 629 | Input/Output: [(-29 95 4 27) -29]
Test Case: 630 | Input/Output: [(-40 89 -90 -82) -90]
Test Case: 631 | Input/Output: [(-17 58 -77 45) -77]
Test Case: 632 | Input/Output: [(-57 -39 14 -27) -57]
Test Case: 633 | Input/Output: [(-18 54 49 -69) -69]
Test Case: 634 | Input/Output: [(-69 28 60 78) -69]
Test Case: 635 | Input/Output: [(68 -47 39 -93) -93]
Test Case: 636 | Input/Output: [(37 3 22 -62) -62]
Test Case: 637 | Input/Output: [(46 -4 94 7) -4]
Test Case: 638 | Input/Output: [(-78 -56 -29 -99) -99]
Test Case: 639 | Input/Output: [(-42 57 -31 64) -42]
Test Case: 640 | Input/Output: [(-97 24 -40 87) -97]
Test Case: 641 | Input/Output: [(-70 85 6 98) -70]
Test Case: 642 | Input/Output: [(49 -80 46 55) -80]
Test Case: 643 | Input/Output: [(-40 -9 65 32) -40]
Test Case: 644 | Input/Output: [(87 -73 -25 -59) -73]
Test Case: 645 | Input/Output: [(93 -84 58 19) -84]
Test Case: 646 | Input/Output: [(-93 -25 90 -64) -93]
Test Case: 647 | Input/Output: [(30 -58 -76 -49) -76]
Test Case: 648 | Input/Output: [(-7 -65 -64 20) -65]
Test Case: 649 | Input/Output: [(83 -84 95 35) -84]
Test Case: 650 | Input/Output: [(-12 78 -64 57) -64]
Test Case: 651 | Input/Output: [(5 -38 -5 -59) -59]
Test Case: 652 | Input/Output: [(-25 -60 90 74) -60]
Test Case: 653 | Input/Output: [(-81 -31 -5 -58) -81]
Test Case: 654 | Input/Output: [(-37 -70 -64 -33) -70]
Test Case: 655 | Input/Output: [(91 25 89 41) 25]
Test Case: 656 | Input/Output: [(60 -83 51 26) -83]
Test Case: 657 | Input/Output: [(-74 67 -85 35) -85]
Test Case: 658 | Input/Output: [(-87 87 3 70) -87]
Test Case: 659 | Input/Output: [(2 27 29 74) 2]
Test Case: 660 | Input/Output: [(59 52 -29 -87) -87]
Test Case: 661 | Input/Output: [(3 50 -86 -16) -86]
Test Case: 662 | Input/Output: [(88 63 72 58) 58]
Test Case: 663 | Input/Output: [(85 25 12 72) 12]
Test Case: 664 | Input/Output: [(-26 -45 -48 62) -48]
Test Case: 665 | Input/Output: [(57 -82 54 -68) -82]
Test Case: 666 | Input/Output: [(78 -57 30 -32) -57]
Test Case: 667 | Input/Output: [(-51 -18 -9 -79) -79]
Test Case: 668 | Input/Output: [(-76 11 -9 -22) -76]
Test Case: 669 | Input/Output: [(64 -40 37 89) -40]
Test Case: 670 | Input/Output: [(-73 -59 -39 -85) -85]
Test Case: 671 | Input/Output: [(26 -54 -4 -64) -64]
Test Case: 672 | Input/Output: [(-29 -6 -30 99) -30]
Test Case: 673 | Input/Output: [(-48 -92 64 94) -92]
Test Case: 674 | Input/Output: [(19 99 3 58) 3]
Test Case: 675 | Input/Output: [(100 98 -5 80) -5]
Test Case: 676 | Input/Output: [(-20 -39 85 3) -39]
Test Case: 677 | Input/Output: [(-18 -25 70 -78) -78]
Test Case: 678 | Input/Output: [(56 56 15 84) 15]
Test Case: 679 | Input/Output: [(64 -75 -94 28) -94]
Test Case: 680 | Input/Output: [(44 55 -43 -22) -43]
Test Case: 681 | Input/Output: [(-10 -51 -6 -30) -51]
Test Case: 682 | Input/Output: [(63 48 41 57) 41]
Test Case: 683 | Input/Output: [(-68 35 92 79) -68]
Test Case: 684 | Input/Output: [(-22 -88 24 -35) -88]
Test Case: 685 | Input/Output: [(67 48 47 34) 34]
Test Case: 686 | Input/Output: [(-28 5 -13 8) -28]
Test Case: 687 | Input/Output: [(-64 72 46 83) -64]
Test Case: 688 | Input/Output: [(-57 -15 37 50) -57]
Test Case: 689 | Input/Output: [(-45 29 99 2) -45]
Test Case: 690 | Input/Output: [(80 3 12 -62) -62]
Test Case: 691 | Input/Output: [(40 77 26 53) 26]
Test Case: 692 | Input/Output: [(-97 33 -4 68) -97]
Test Case: 693 | Input/Output: [(52 54 19 -18) -18]
Test Case: 694 | Input/Output: [(24 -25 36 63) -25]
Test Case: 695 | Input/Output: [(80 -32 66 -8) -32]
Test Case: 696 | Input/Output: [(-30 -74 52 -42) -74]
Test Case: 697 | Input/Output: [(-88 16 -43 -1) -88]
Test Case: 698 | Input/Output: [(92 -60 -45 11) -60]
Test Case: 699 | Input/Output: [(-58 50 -96 46) -96]
Test Case: 700 | Input/Output: [(-76 36 41 -10) -76]
Test Case: 701 | Input/Output: [(-81 56 37 73) -81]
Test Case: 702 | Input/Output: [(94 -71 -93 99) -93]
Test Case: 703 | Input/Output: [(-3 -91 32 -59) -91]
Test Case: 704 | Input/Output: [(-91 -71 -64 -80) -91]
Test Case: 705 | Input/Output: [(-22 93 49 100) -22]
Test Case: 706 | Input/Output: [(-65 -25 -89 -49) -89]
Test Case: 707 | Input/Output: [(-13 -28 37 -47) -47]
Test Case: 708 | Input/Output: [(-97 -78 63 -75) -97]
Test Case: 709 | Input/Output: [(5 22 -3 59) -3]
Test Case: 710 | Input/Output: [(73 6 47 72) 6]
Test Case: 711 | Input/Output: [(-29 15 -35 76) -35]
Test Case: 712 | Input/Output: [(-100 44 -61 -7) -100]
Test Case: 713 | Input/Output: [(-63 -12 95 21) -63]
Test Case: 714 | Input/Output: [(-42 7 -19 -16) -42]
Test Case: 715 | Input/Output: [(100 -72 19 44) -72]
Test Case: 716 | Input/Output: [(70 50 -23 11) -23]
Test Case: 717 | Input/Output: [(-60 -56 -57 33) -60]
Test Case: 718 | Input/Output: [(-58 62 76 78) -58]
Test Case: 719 | Input/Output: [(-13 -45 -73 3) -73]
Test Case: 720 | Input/Output: [(-45 87 56 -47) -47]
Test Case: 721 | Input/Output: [(46 -40 28 72) -40]
Test Case: 722 | Input/Output: [(-74 -13 48 -83) -83]
Test Case: 723 | Input/Output: [(98 -7 41 -45) -45]
Test Case: 724 | Input/Output: [(-92 -54 41 -35) -92]
Test Case: 725 | Input/Output: [(85 -19 -14 -83) -83]
Test Case: 726 | Input/Output: [(63 94 51 -94) -94]
Test Case: 727 | Input/Output: [(13 27 53 11) 11]
Test Case: 728 | Input/Output: [(-2 47 62 -64) -64]
Test Case: 729 | Input/Output: [(73 7 14 82) 7]
Test Case: 730 | Input/Output: [(-43 81 90 18) -43]
Test Case: 731 | Input/Output: [(76 22 -65 85) -65]
Test Case: 732 | Input/Output: [(-21 98 7 -34) -34]
Test Case: 733 | Input/Output: [(1 52 93 -26) -26]
Test Case: 734 | Input/Output: [(-93 21 -47 82) -93]
Test Case: 735 | Input/Output: [(10 60 -59 5) -59]
Test Case: 736 | Input/Output: [(63 -80 43 7) -80]
Test Case: 737 | Input/Output: [(41 -18 -22 80) -22]
Test Case: 738 | Input/Output: [(29 4 98 50) 4]
Test Case: 739 | Input/Output: [(62 13 -27 30) -27]
Test Case: 740 | Input/Output: [(37 -75 -80 55) -80]
Test Case: 741 | Input/Output: [(4 -58 -82 72) -82]
Test Case: 742 | Input/Output: [(-98 -87 -45 86) -98]
Test Case: 743 | Input/Output: [(6 -25 69 92) -25]
Test Case: 744 | Input/Output: [(-51 64 64 77) -51]
Test Case: 745 | Input/Output: [(-16 95 -19 12) -19]
Test Case: 746 | Input/Output: [(88 3 -21 42) -21]
Test Case: 747 | Input/Output: [(35 26 12 -11) -11]
Test Case: 748 | Input/Output: [(35 -26 68 89) -26]
Test Case: 749 | Input/Output: [(44 -23 8 68) -23]
Test Case: 750 | Input/Output: [(22 68 -89 9) -89]
Test Case: 751 | Input/Output: [(-4 55 -68 -39) -68]
Test Case: 752 | Input/Output: [(-73 98 -69 -47) -73]
Test Case: 753 | Input/Output: [(-100 9 66 38) -100]
Test Case: 754 | Input/Output: [(-61 77 92 -68) -68]
Test Case: 755 | Input/Output: [(34 76 -100 2) -100]
Test Case: 756 | Input/Output: [(-91 49 -32 -61) -91]
Test Case: 757 | Input/Output: [(59 -99 -19 -19) -99]
Test Case: 758 | Input/Output: [(-15 -9 -91 -74) -91]
Test Case: 759 | Input/Output: [(-3 -82 65 7) -82]
Test Case: 760 | Input/Output: [(-57 -38 96 23) -57]
Test Case: 761 | Input/Output: [(85 81 84 4) 4]
Test Case: 762 | Input/Output: [(75 -65 92 32) -65]
Test Case: 763 | Input/Output: [(-70 -45 18 -20) -70]
Test Case: 764 | Input/Output: [(19 71 -55 53) -55]
Test Case: 765 | Input/Output: [(74 48 89 -26) -26]
Test Case: 766 | Input/Output: [(90 -100 54 -72) -100]
Test Case: 767 | Input/Output: [(86 -16 14 -35) -35]
Test Case: 768 | Input/Output: [(58 -37 0 44) -37]
Test Case: 769 | Input/Output: [(-10 -70 74 -20) -70]
Test Case: 770 | Input/Output: [(-30 -88 -10 15) -88]
Test Case: 771 | Input/Output: [(85 -40 80 -88) -88]
Test Case: 772 | Input/Output: [(-76 -69 8 23) -76]
Test Case: 773 | Input/Output: [(-57 89 -60 -61) -61]
Test Case: 774 | Input/Output: [(-98 -56 60 58) -98]
Test Case: 775 | Input/Output: [(-52 76 14 -46) -52]
Test Case: 776 | Input/Output: [(-57 21 93 95) -57]
Test Case: 777 | Input/Output: [(-25 84 68 94) -25]
Test Case: 778 | Input/Output: [(34 -13 -40 -91) -91]
Test Case: 779 | Input/Output: [(-53 31 71 57) -53]
Test Case: 780 | Input/Output: [(82 -29 81 11) -29]
Test Case: 781 | Input/Output: [(62 99 -27 12) -27]
Test Case: 782 | Input/Output: [(24 -89 27 82) -89]
Test Case: 783 | Input/Output: [(-53 -24 -95 83) -95]
Test Case: 784 | Input/Output: [(-11 -2 66 -34) -34]
Test Case: 785 | Input/Output: [(15 7 19 82) 7]
Test Case: 786 | Input/Output: [(67 60 51 -14) -14]
Test Case: 787 | Input/Output: [(85 70 -75 -50) -75]
Test Case: 788 | Input/Output: [(32 -46 6 -9) -46]
Test Case: 789 | Input/Output: [(26 -64 48 -77) -77]
Test Case: 790 | Input/Output: [(6 65 41 -58) -58]
Test Case: 791 | Input/Output: [(64 -83 -48 41) -83]
Test Case: 792 | Input/Output: [(-37 -93 34 26) -93]
Test Case: 793 | Input/Output: [(-31 9 -99 -84) -99]
Test Case: 794 | Input/Output: [(17 18 40 -36) -36]
Test Case: 795 | Input/Output: [(-82 61 60 100) -82]
Test Case: 796 | Input/Output: [(-86 97 45 -71) -86]
Test Case: 797 | Input/Output: [(-93 27 -92 3) -93]
Test Case: 798 | Input/Output: [(68 98 25 -91) -91]
Test Case: 799 | Input/Output: [(-51 -29 -4 -51) -51]
Test Case: 800 | Input/Output: [(-32 -83 -71 95) -83]
Test Case: 801 | Input/Output: [(-42 -38 -72 -81) -81]
Test Case: 802 | Input/Output: [(-23 -22 -39 84) -39]
Test Case: 803 | Input/Output: [(-70 -66 -81 -4) -81]
Test Case: 804 | Input/Output: [(-76 -8 -99 -8) -99]
Test Case: 805 | Input/Output: [(4 64 12 -4) -4]
Test Case: 806 | Input/Output: [(-46 -35 56 -64) -64]
Test Case: 807 | Input/Output: [(59 -55 -21 66) -55]
Test Case: 808 | Input/Output: [(-25 -80 -96 97) -96]
Test Case: 809 | Input/Output: [(-69 35 76 18) -69]
Test Case: 810 | Input/Output: [(71 14 94 69) 14]
Test Case: 811 | Input/Output: [(89 14 72 83) 14]
Test Case: 812 | Input/Output: [(59 -42 -32 86) -42]
Test Case: 813 | Input/Output: [(-27 -67 -97 -15) -97]
Test Case: 814 | Input/Output: [(-82 79 22 78) -82]
Test Case: 815 | Input/Output: [(-31 59 -31 62) -31]
Test Case: 816 | Input/Output: [(34 -91 -18 -22) -91]
Test Case: 817 | Input/Output: [(-81 -79 19 -46) -81]
Test Case: 818 | Input/Output: [(-64 -1 -72 -88) -88]
Test Case: 819 | Input/Output: [(48 26 12 16) 12]
Test Case: 820 | Input/Output: [(-43 -94 -42 11) -94]
Test Case: 821 | Input/Output: [(81 -27 -87 -90) -90]
Test Case: 822 | Input/Output: [(49 -50 -95 -79) -95]
Test Case: 823 | Input/Output: [(26 7 -74 96) -74]
Test Case: 824 | Input/Output: [(29 -7 -6 86) -7]
Test Case: 825 | Input/Output: [(59 -70 2 -63) -70]
Test Case: 826 | Input/Output: [(25 21 65 -22) -22]
Test Case: 827 | Input/Output: [(42 72 29 25) 25]
Test Case: 828 | Input/Output: [(-95 55 -14 49) -95]
Test Case: 829 | Input/Output: [(88 2 -57 100) -57]
Test Case: 830 | Input/Output: [(-13 8 -26 -83) -83]
Test Case: 831 | Input/Output: [(-29 41 43 -84) -84]
Test Case: 832 | Input/Output: [(-83 93 -89 -24) -89]
Test Case: 833 | Input/Output: [(-28 94 -49 -64) -64]
Test Case: 834 | Input/Output: [(-65 -88 -9 23) -88]
Test Case: 835 | Input/Output: [(98 89 10 -84) -84]
Test Case: 836 | Input/Output: [(-43 98 -59 33) -59]
Test Case: 837 | Input/Output: [(-41 -55 50 95) -55]
Test Case: 838 | Input/Output: [(92 96 -45 -78) -78]
Test Case: 839 | Input/Output: [(-88 -33 -55 46) -88]
Test Case: 840 | Input/Output: [(-33 81 -32 66) -33]
Test Case: 841 | Input/Output: [(-11 41 -43 80) -43]
Test Case: 842 | Input/Output: [(92 -11 61 -69) -69]
Test Case: 843 | Input/Output: [(30 70 -75 -70) -75]
Test Case: 844 | Input/Output: [(75 -21 55 -20) -21]
Test Case: 845 | Input/Output: [(-13 -39 -3 -93) -93]
Test Case: 846 | Input/Output: [(-7 47 -49 19) -49]
Test Case: 847 | Input/Output: [(9 0 -39 -27) -39]
Test Case: 848 | Input/Output: [(86 77 19 40) 19]
Test Case: 849 | Input/Output: [(-36 95 81 -37) -37]
Test Case: 850 | Input/Output: [(82 -56 -95 -48) -95]
Test Case: 851 | Input/Output: [(95 -11 93 18) -11]
Test Case: 852 | Input/Output: [(23 -18 -63 79) -63]
Test Case: 853 | Input/Output: [(-82 68 -98 -27) -98]
Test Case: 854 | Input/Output: [(-64 74 -58 41) -64]
Test Case: 855 | Input/Output: [(-100 -95 33 63) -100]
Test Case: 856 | Input/Output: [(92 43 -40 66) -40]
Test Case: 857 | Input/Output: [(28 -6 86 19) -6]
Test Case: 858 | Input/Output: [(1 61 -82 95) -82]
Test Case: 859 | Input/Output: [(-21 -95 14 -12) -95]
Test Case: 860 | Input/Output: [(67 -59 87 99) -59]
Test Case: 861 | Input/Output: [(-67 25 -57 -79) -79]
Test Case: 862 | Input/Output: [(57 29 31 25) 25]
Test Case: 863 | Input/Output: [(73 -18 53 -31) -31]
Test Case: 864 | Input/Output: [(-77 -66 81 -41) -77]
Test Case: 865 | Input/Output: [(-12 -91 89 -95) -95]
Test Case: 866 | Input/Output: [(36 87 -40 69) -40]
Test Case: 867 | Input/Output: [(69 -77 -32 100) -77]
Test Case: 868 | Input/Output: [(51 73 -90 47) -90]
Test Case: 869 | Input/Output: [(99 6 32 -65) -65]
Test Case: 870 | Input/Output: [(-1 -27 -25 87) -27]
Test Case: 871 | Input/Output: [(100 59 -1 -83) -83]
Test Case: 872 | Input/Output: [(62 -85 61 62) -85]
Test Case: 873 | Input/Output: [(-63 62 -82 20) -82]
Test Case: 874 | Input/Output: [(-73 50 -78 67) -78]
Test Case: 875 | Input/Output: [(46 -66 -14 -58) -66]
Test Case: 876 | Input/Output: [(5 -73 -2 100) -73]
Test Case: 877 | Input/Output: [(-74 -36 -93 84) -93]
Test Case: 878 | Input/Output: [(-62 -42 -100 85) -100]
Test Case: 879 | Input/Output: [(94 -54 -50 8) -54]
Test Case: 880 | Input/Output: [(65 -6 -23 -66) -66]
Test Case: 881 | Input/Output: [(-83 59 -74 84) -83]
Test Case: 882 | Input/Output: [(54 -28 -73 5) -73]
Test Case: 883 | Input/Output: [(-84 24 6 10) -84]
Test Case: 884 | Input/Output: [(-81 79 -100 -88) -100]
Test Case: 885 | Input/Output: [(88 -57 11 -71) -71]
Test Case: 886 | Input/Output: [(83 -36 13 -7) -36]
Test Case: 887 | Input/Output: [(-58 2 -19 40) -58]
Test Case: 888 | Input/Output: [(37 -25 93 -47) -47]
Test Case: 889 | Input/Output: [(18 -32 38 -96) -96]
Test Case: 890 | Input/Output: [(-57 -75 -80 63) -80]
Test Case: 891 | Input/Output: [(57 44 76 89) 44]
Test Case: 892 | Input/Output: [(-44 92 17 -23) -44]
Test Case: 893 | Input/Output: [(38 55 -80 -73) -80]
Test Case: 894 | Input/Output: [(-5 64 26 47) -5]
Test Case: 895 | Input/Output: [(-24 -55 89 -2) -55]
Test Case: 896 | Input/Output: [(40 11 -27 41) -27]
Test Case: 897 | Input/Output: [(-13 100 8 13) -13]
Test Case: 898 | Input/Output: [(81 34 -5 -4) -5]
Test Case: 899 | Input/Output: [(89 -7 91 89) -7]
Test Case: 900 | Input/Output: [(-49 -71 0 -47) -71]
Test Case: 901 | Input/Output: [(-89 -72 11 -32) -89]
Test Case: 902 | Input/Output: [(-51 65 -56 19) -56]
Test Case: 903 | Input/Output: [(-50 92 36 12) -50]
Test Case: 904 | Input/Output: [(19 73 24 -66) -66]
Test Case: 905 | Input/Output: [(90 27 -22 -64) -64]
Test Case: 906 | Input/Output: [(39 -40 4 -38) -40]
Test Case: 907 | Input/Output: [(-22 63 -36 -26) -36]
Test Case: 908 | Input/Output: [(-28 41 24 51) -28]
Test Case: 909 | Input/Output: [(58 -15 26 59) -15]
Test Case: 910 | Input/Output: [(34 9 98 -83) -83]
Test Case: 911 | Input/Output: [(-37 -44 4 -76) -76]
Test Case: 912 | Input/Output: [(23 -91 -66 -73) -91]
Test Case: 913 | Input/Output: [(-7 63 -83 34) -83]
Test Case: 914 | Input/Output: [(-45 -53 -2 -2) -53]
Test Case: 915 | Input/Output: [(99 -5 98 -95) -95]
Test Case: 916 | Input/Output: [(50 -13 38 -46) -46]
Test Case: 917 | Input/Output: [(-53 43 46 6) -53]
Test Case: 918 | Input/Output: [(95 -67 -12 51) -67]
Test Case: 919 | Input/Output: [(-61 70 16 -25) -61]
Test Case: 920 | Input/Output: [(70 32 67 -90) -90]
Test Case: 921 | Input/Output: [(-13 -12 -75 -41) -75]
Test Case: 922 | Input/Output: [(-95 -99 -96 56) -99]
Test Case: 923 | Input/Output: [(-3 -79 -17 44) -79]
Test Case: 924 | Input/Output: [(-97 85 74 50) -97]
Test Case: 925 | Input/Output: [(44 75 -11 53) -11]
Test Case: 926 | Input/Output: [(-89 -84 -5 -91) -91]
Test Case: 927 | Input/Output: [(46 44 100 -14) -14]
Test Case: 928 | Input/Output: [(61 -34 51 1) -34]
Test Case: 929 | Input/Output: [(48 -20 -72 -29) -72]
Test Case: 930 | Input/Output: [(-79 -57 -12 -70) -79]
Test Case: 931 | Input/Output: [(-8 69 85 7) -8]
Test Case: 932 | Input/Output: [(56 23 -40 0) -40]
Test Case: 933 | Input/Output: [(13 34 -49 -95) -95]
Test Case: 934 | Input/Output: [(-82 -17 28 42) -82]
Test Case: 935 | Input/Output: [(-31 -85 -62 79) -85]
Test Case: 936 | Input/Output: [(41 -62 -27 -68) -68]
Test Case: 937 | Input/Output: [(-77 62 -45 93) -77]
Test Case: 938 | Input/Output: [(45 50 52 61) 45]
Test Case: 939 | Input/Output: [(-72 65 -28 31) -72]
Test Case: 940 | Input/Output: [(88 68 -42 36) -42]
Test Case: 941 | Input/Output: [(-21 14 -16 19) -21]
Test Case: 942 | Input/Output: [(26 -93 -92 -19) -93]
Test Case: 943 | Input/Output: [(18 68 -76 14) -76]
Test Case: 944 | Input/Output: [(-86 -23 45 -3) -86]
Test Case: 945 | Input/Output: [(20 -4 60 -63) -63]
Test Case: 946 | Input/Output: [(56 -18 64 29) -18]
Test Case: 947 | Input/Output: [(74 -77 8 -36) -77]
Test Case: 948 | Input/Output: [(-3 -22 -59 68) -59]
Test Case: 949 | Input/Output: [(-27 53 83 -46) -46]
Test Case: 950 | Input/Output: [(99 -33 37 -72) -72]
Test Case: 951 | Input/Output: [(-83 86 -94 -51) -94]
Test Case: 952 | Input/Output: [(-17 -66 75 59) -66]
Test Case: 953 | Input/Output: [(42 -40 -60 70) -60]
Test Case: 954 | Input/Output: [(92 83 22 61) 22]
Test Case: 955 | Input/Output: [(-26 41 -54 84) -54]
Test Case: 956 | Input/Output: [(-4 -33 5 33) -33]
Test Case: 957 | Input/Output: [(53 14 1 88) 1]
Test Case: 958 | Input/Output: [(53 81 3 71) 3]
Test Case: 959 | Input/Output: [(-77 -62 63 -7) -77]
Test Case: 960 | Input/Output: [(39 -98 68 -2) -98]
Test Case: 961 | Input/Output: [(-37 -81 71 -23) -81]
Test Case: 962 | Input/Output: [(2 -29 -92 39) -92]
Test Case: 963 | Input/Output: [(-27 2 -20 4) -27]
Test Case: 964 | Input/Output: [(-45 -76 93 -90) -90]
Test Case: 965 | Input/Output: [(-14 -20 -66 -97) -97]
Test Case: 966 | Input/Output: [(-58 63 -82 87) -82]
Test Case: 967 | Input/Output: [(-34 62 49 18) -34]
Test Case: 968 | Input/Output: [(73 -99 43 -100) -100]
Test Case: 969 | Input/Output: [(59 -56 -96 -43) -96]
Test Case: 970 | Input/Output: [(-24 -80 -31 -46) -80]
Test Case: 971 | Input/Output: [(63 10 90 -97) -97]
Test Case: 972 | Input/Output: [(-2 13 -48 -24) -48]
Test Case: 973 | Input/Output: [(21 -100 65 -79) -100]
Test Case: 974 | Input/Output: [(13 -79 62 -37) -79]
Test Case: 975 | Input/Output: [(-74 16 77 15) -74]
Test Case: 976 | Input/Output: [(63 -28 -83 -90) -90]
Test Case: 977 | Input/Output: [(-76 -95 5 43) -95]
Test Case: 978 | Input/Output: [(-53 -60 38 -99) -99]
Test Case: 979 | Input/Output: [(-42 -61 76 78) -61]
Test Case: 980 | Input/Output: [(18 -7 -50 -53) -53]
Test Case: 981 | Input/Output: [(-9 87 -56 -89) -89]
Test Case: 982 | Input/Output: [(-98 91 64 44) -98]
Test Case: 983 | Input/Output: [(47 -41 -21 -85) -85]
Test Case: 984 | Input/Output: [(66 85 -16 -11) -16]
Test Case: 985 | Input/Output: [(-95 -58 42 -80) -95]
Test Case: 986 | Input/Output: [(-80 -36 -74 29) -80]
Test Case: 987 | Input/Output: [(-25 -67 29 -83) -83]
Test Case: 988 | Input/Output: [(-75 25 -67 11) -75]
Test Case: 989 | Input/Output: [(-52 32 87 80) -52]
Test Case: 990 | Input/Output: [(-13 58 -69 35) -69]
Test Case: 991 | Input/Output: [(-23 -22 -43 92) -43]
Test Case: 992 | Input/Output: [(-43 -70 -41 -12) -70]
Test Case: 993 | Input/Output: [(-47 -63 -6 83) -63]
Test Case: 994 | Input/Output: [(-30 36 80 30) -30]
Test Case: 995 | Input/Output: [(-77 -83 -64 -43) -83]
Test Case: 996 | Input/Output: [(-56 34 51 -32) -56]
Test Case: 997 | Input/Output: [(19 79 81 -92) -92]
Test Case: 998 | Input/Output: [(-92 80 -96 -38) -96]
Test Case: 999 | Input/Output: [(24 -26 -32 -61) -61]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x579dde54 clojush.problems.software.smallest$fn__7460@579dde54] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x6b899971 clojush.instructions.tag$tag_instruction_erc$fn__2160@6b899971] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x7cec3975 clojush.instructions.tag$tagged_instruction_erc$fn__2166@7cec3975] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x7e2a76be clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@7e2a76be]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x417bfebd clojush.problems.software.smallest$smallest_initial_report@417bfebd]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x2a4cb8ae clojush.problems.software.smallest$smallest_report@2a4cb8ae]
random-screen = false
random-seed = 79 -128 -87 -119 -86 28 22 -118 2 73 73 -106 51 -8 -80 49
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[48 48 48 98] 48] [[30 -33 30 30] -33] [[65 65 32 65] 32] [[89 24 89 89] 24] [[-20 -20 -79 -20] -79] [[36 -83 -83 -83] -83] [[-54 -54 -54 74] -54] [[-1 -20 -1 -1] -20] [[-79 99 99 99] -79] [[-85 -85 -85 -54] -85] [(-66 -66 -66 -66) -66] [(64 64 64 64) 64] [(-21 -21 -21 -21) -21] [(13 13 13 13) 13] [(35 35 35 35) 35] [(0 92 85 91) 0] [(89 29 27 3) 3] [(10 14 70 79) 10] [(21 82 41 72) 21] [(43 76 50 93) 43] [(66 20 98 40) 20] [(95 98 5 11) 5] [(50 62 85 6) 6] [(30 100 79 36) 30] [(85 89 41 13) 13] [(21 51 53 72) 21] [(99 79 19 39) 19] [(8 2 40 100) 2] [(29 2 20 75) 2] [(39 3 87 1) 1] [(84 84 96 1) 1] [(45 62 45 36) 36] [(8 84 10 73) 8] [(41 62 94 45) 41] [(48 18 35 83) 18] [(-25 45 65 1) -25] [(42 41 -25 0) -25] [(76 26 44 -31) -31] [(48 -35 30 73) -35] [(59 -49 35 5) -49] [(96 -24 -18 -85) -85] [(-7 -24 -12 39) -24] [(37 -93 -79 -28) -93] [(-81 44 24 74) -81] [(-11 100 -56 38) -56] [(-57 66 -55 64) -57] [(71 -83 -37 -97) -97] [(-58 92 27 -43) -58] [(64 3 -15 -66) -66] [(97 63 -13 -20) -20] [(39 44 -16 -91) -91] [(-6 -80 26 -58) -80] [(27 92 -60 -83) -83] [(67 57 4 -42) -42] [(60 33 38 93) 33] [(74 69 -56 -65) -65] [(64 81 -72 -79) -79] [(-86 -24 97 -30) -86] [(21 2 61 41) 2] [(32 18 33 -13) -13] [(-42 -73 -90 1) -90] [(55 -78 -87 -15) -87] [(-8 10 -51 95) -51] [(-40 67 -64 -55) -64] [(-90 -53 38 -75) -90] [(54 -34 59 34) -34] [(99 67 -57 9) -57] [(46 -76 50 75) -76] [(54 -86 74 -59) -86] [(1 25 80 54) 1] [(67 -98 -4 -86) -98] [(-14 -47 44 -39) -47] [(80 -34 85 -11) -34] [(28 27 -27 -80) -80] [(16 -34 -31 -10) -34] [(-15 36 87 77) -15] [(-46 95 86 -22) -46] [(56 17 88 63) 17] [(20 0 -78 98) -78] [(29 -92 -25 82) -92] [(-92 -29 -23 91) -92] [(2 -68 60 86) -68] [(35 -76 -32 -98) -98] [(3 64 -77 -24) -77] [(53 57 82 -21) -21] [(-76 -81 3 69) -81] [(-37 -35 11 -86) -86] [(84 85 -56 -53) -56] [(-12 19 81 2) -12] [(-75 60 -65 2) -75] [(46 -68 -62 88) -68] [(16 47 -97 99) -97] [(-71 -17 -44 -40) -71] [(-36 89 -10 -13) -36] [(53 97 55 -8) -8])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: -33                
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 92                 
Correct output: 3                   | Program output: 29                 
Correct output: 10                  | Program output: 14                 
Correct output: 21                  | Program output: 82                 
Correct output: 43                  | Program output: 76                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 98                 
Correct output: 6                   | Program output: 62                 
Correct output: 30                  | Program output: 100                
Correct output: 13                  | Program output: 89                 
Correct output: 21                  | Program output: 51                 
Correct output: 19                  | Program output: 79                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 3                  
Correct output: 1                   | Program output: 84                 
Correct output: 36                  | Program output: 62                 
Correct output: 8                   | Program output: 84                 
Correct output: 41                  | Program output: 62                 
Correct output: 18                  | Program output: 18                 
Correct output: -25                 | Program output: 45                 
Correct output: -25                 | Program output: 41                 
Correct output: -31                 | Program output: 26                 
Correct output: -35                 | Program output: -35                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -24                
Correct output: -24                 | Program output: -24                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: 44                 
Correct output: -56                 | Program output: 100                
Correct output: -57                 | Program output: 66                 
Correct output: -97                 | Program output: -83                
Correct output: -58                 | Program output: 92                 
Correct output: -66                 | Program output: 3                  
Correct output: -20                 | Program output: 63                 
Correct output: -91                 | Program output: 44                 
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: 92                 
Correct output: -42                 | Program output: 57                 
Correct output: 33                  | Program output: 33                 
Correct output: -65                 | Program output: 69                 
Correct output: -79                 | Program output: 81                 
Correct output: -86                 | Program output: -24                
Correct output: 2                   | Program output: 2                  
Correct output: -13                 | Program output: 18                 
Correct output: -90                 | Program output: -73                
Correct output: -87                 | Program output: -78                
Correct output: -51                 | Program output: 10                 
Correct output: -64                 | Program output: 67                 
Correct output: -90                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -57                 | Program output: 67                 
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: 1                   | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -47                 | Program output: -47                
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: 27                 
Correct output: -34                 | Program output: -34                
Correct output: -15                 | Program output: 36                 
Correct output: -46                 | Program output: 95                 
Correct output: 17                  | Program output: 17                 
Correct output: -78                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -29                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -76                
Correct output: -77                 | Program output: 64                 
Correct output: -21                 | Program output: 57                 
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -35                
Correct output: -56                 | Program output: 85                 
Correct output: -12                 | Program output: 19                 
Correct output: -75                 | Program output: 60                 
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: 47                 
Correct output: -71                 | Program output: -17                
Correct output: -36                 | Program output: 89                 
Correct output: -8                  | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_mod} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction tagged_433} {:close 2, :instruction integer_gte} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 1, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -46} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_noop})
Lexicase best program: (integer_sub exec_s (boolean_not integer_mod) (boolean_stackdepth) (integer_stackdepth integer_swap) in3 tagged_433 integer_gte integer_yankdup exec_yankdup boolean_frominteger in1 integer_dup_times exec_dup (boolean_flush boolean_invert_first_then_and print_boolean) integer_yank print_integer exec_do*times (exec_dup_items integer_dup_times integer_gt integer_pop) exec_do*count (exec_s (boolean_pop integer_flush exec_pop () exec_do*count (exec_s (integer_yank exec_y (integer_gte boolean_not boolean_rot) integer_swap boolean_flush in4) (integer_yank integer_lt integer_pop exec_pop (exec_do*count (exec_if (in3) (exec_stackdepth -46 integer_yankdup exec_do*times (boolean_yankdup) exec_noop)))) ())) () ()))
Lexicase best errors: [0 1 1 1 1 1 1 0 1 0]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 75
Percent parens: 0.280
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_sub} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_mod} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction tagged_433} {:close 2, :instruction integer_gte} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction print_boolean} {:close 0, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_s} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_not} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_flush} {:close 1, :instruction in4} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_if} {:close 1, :instruction in3} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction -46} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_noop})
Zero cases best program: (integer_sub exec_s (boolean_not integer_mod) (boolean_stackdepth) (integer_stackdepth integer_swap) in3 tagged_433 integer_gte integer_yankdup exec_yankdup boolean_frominteger in1 integer_dup_times exec_dup (boolean_flush boolean_invert_first_then_and print_boolean) integer_yank print_integer exec_do*times (exec_dup_items integer_dup_times integer_gt integer_pop) exec_do*count (exec_s (boolean_pop integer_flush exec_pop () exec_do*count (exec_s (integer_yank exec_y (integer_gte boolean_not boolean_rot) integer_swap boolean_flush in4) (integer_yank integer_lt integer_pop exec_pop (exec_do*count (exec_if (in3) (exec_stackdepth -46 integer_yankdup exec_do*times (boolean_yankdup) exec_noop)))) ())) () ()))
Zero cases best errors: [0 1 1 1 1 1 1 0 1 0]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 75
Percent parens: 0.280
--- Lexicase Population Statistics ---
Count of elite individuals by case: (3 4 3 2 3 7 3 10 7 7)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (3 4 3 2 3 7 3 10 7 7)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction tagged_501} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth})
Best program: (integer_lte integer_max in2 print_integer boolean_invert_second_then_and integer_dec boolean_flush integer_pop exec_do*times (integer_sub integer_dup integer_lt exec_yank) boolean_eq exec_dup (exec_when (integer_fromboolean)) exec_flush exec_stackdepth boolean_dup exec_s (integer_add boolean_empty exec_if (exec_k_when_autoconstructing (exec_yankdup) (boolean_yank boolean_dup_items exec_do*times (integer_yank tagged_501 boolean_yankdup boolean_stackdepth))) ()) () ())
Errors: [1 0 1 1 0 1 1 0 1 1]
Total: 7
Mean: 0.7
Genome size: 33
Size: 45
Percent parens: 0.267
--- Population Statistics ---
Average total errors in population: 9.951
Median total errors in population: 10
Error averages by case: (0.997 0.996 0.997 0.998 0.997 0.993 0.997 0.99 0.993 0.993)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.192
Average program size in population (points): 70.265
Average percent parens in population: 0.278
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 1
Genome diversity (% unique genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.004
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.275
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 464609
--- Timings ---
Current time: 1559314563271 milliseconds
Total Time:           2.6 seconds
Initialization:       0.1 seconds,  3.9%
Reproduction:         0.8 seconds, 29.8%
Fitness Testing:      1.7 seconds, 66.3%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 646
Test mean error for best: 0.64600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: -33                
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 92                 
Correct output: 3                   | Program output: 29                 
Correct output: 10                  | Program output: 14                 
Correct output: 21                  | Program output: 82                 
Correct output: 43                  | Program output: 76                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 98                 
Correct output: 6                   | Program output: 62                 
Correct output: 30                  | Program output: 100                
Correct output: 13                  | Program output: 89                 
Correct output: 21                  | Program output: 51                 
Correct output: 19                  | Program output: 79                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 3                  
Correct output: 1                   | Program output: 84                 
Correct output: 36                  | Program output: 62                 
Correct output: 8                   | Program output: 84                 
Correct output: 41                  | Program output: 62                 
Correct output: 18                  | Program output: 18                 
Correct output: -25                 | Program output: 45                 
Correct output: -25                 | Program output: 41                 
Correct output: -31                 | Program output: 26                 
Correct output: -35                 | Program output: -35                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -24                
Correct output: -24                 | Program output: -24                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: 44                 
Correct output: -56                 | Program output: 100                
Correct output: -57                 | Program output: 66                 
Correct output: -97                 | Program output: -83                
Correct output: -58                 | Program output: 92                 
Correct output: -66                 | Program output: 3                  
Correct output: -20                 | Program output: 63                 
Correct output: -91                 | Program output: 44                 
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: 92                 
Correct output: -42                 | Program output: 57                 
Correct output: 33                  | Program output: 33                 
Correct output: -65                 | Program output: 69                 
Correct output: -79                 | Program output: 81                 
Correct output: -86                 | Program output: -24                
Correct output: 2                   | Program output: 2                  
Correct output: -13                 | Program output: 18                 
Correct output: -90                 | Program output: -73                
Correct output: -87                 | Program output: -78                
Correct output: -51                 | Program output: 10                 
Correct output: -64                 | Program output: 67                 
Correct output: -90                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -57                 | Program output: 67                 
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: 1                   | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -47                 | Program output: -47                
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: 27                 
Correct output: -34                 | Program output: -34                
Correct output: -15                 | Program output: 36                 
Correct output: -46                 | Program output: 95                 
Correct output: 17                  | Program output: 17                 
Correct output: -78                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -29                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -76                
Correct output: -77                 | Program output: 64                 
Correct output: -21                 | Program output: 57                 
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -35                
Correct output: -56                 | Program output: 85                 
Correct output: -12                 | Program output: 19                 
Correct output: -75                 | Program output: 60                 
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: 47                 
Correct output: -71                 | Program output: -17                
Correct output: -36                 | Program output: 89                 
Correct output: -8                  | Program output: 97                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction tagged_501} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth})
Lexicase best program: (integer_lte integer_max in2 print_integer boolean_invert_second_then_and integer_dec boolean_flush integer_pop exec_do*times (integer_sub integer_dup integer_lt exec_yank) boolean_eq exec_dup (exec_when (integer_fromboolean)) exec_flush exec_stackdepth boolean_dup exec_s (integer_add boolean_empty exec_if (exec_k_when_autoconstructing (exec_yankdup) (boolean_yank boolean_dup_items exec_do*times (integer_yank tagged_501 boolean_yankdup boolean_stackdepth))) ()) () ())
Lexicase best errors: [1 1 0 1 0 1 0 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 45
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_lt} {:close 1, :instruction exec_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 2, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_s} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction tagged_501} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth})
Zero cases best program: (integer_lte integer_max in2 print_integer boolean_invert_second_then_and integer_dec boolean_flush integer_pop exec_do*times (integer_sub integer_dup integer_lt exec_yank) boolean_eq exec_dup (exec_when (integer_fromboolean)) exec_flush exec_stackdepth boolean_dup exec_s (integer_add boolean_empty exec_if (exec_k_when_autoconstructing (exec_yankdup) (boolean_yank boolean_dup_items exec_do*times (integer_yank tagged_501 boolean_yankdup boolean_stackdepth))) ()) () ())
Zero cases best errors: [1 1 0 1 0 1 0 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 45
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (222 253 206 178 674 204 204 204 207 252)
Population mean number of elite cases: 2.60
Count of perfect (error zero) individuals by case: (222 253 206 178 674 204 204 204 207 252)
Population mean number of perfect (error zero) cases: 2.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_lte} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction integer_swap} {:close 0, :instruction in3} {:close 0, :instruction tagged_433} {:close 2, :instruction integer_gte} {:close 1, :instruction integer_yankdup} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_if} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_yank} {:close 0, :instruction tagged_501} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_stackdepth})
Best program: (integer_lte integer_max in2 print_integer boolean_invert_second_then_and integer_dec boolean_flush integer_stackdepth integer_swap in3 tagged_433 integer_gte integer_yankdup exec_yankdup boolean_frominteger in1 integer_dup_times exec_dup (exec_if (exec_k_when_autoconstructing (exec_yankdup) (boolean_yank boolean_dup_items exec_do*times (integer_yank tagged_501 boolean_yankdup boolean_stackdepth))) ()))
Errors: [1 1 0 1 0 1 0 0 0 1]
Total: 5
Mean: 0.5
Genome size: 28
Size: 35
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 7.396
Median total errors in population: 8
Error averages by case: (0.778 0.747 0.794 0.822 0.326 0.796 0.796 0.796 0.793 0.748)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 46.524
Average program size in population (points): 62.847
Average percent parens in population: 0.238
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.5
Median age in population: 1.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 109
Genome diversity (% unique genomes):	 0.494
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 110
Syntactic diversity (% unique Push programs):	 0.485
Total error diversity:				 0.005
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 1241087
--- Timings ---
Current time: 1559314566552 milliseconds
Total Time:           5.9 seconds
Initialization:       0.1 seconds,  1.7%
Reproduction:         2.5 seconds, 43.3%
Fitness Testing:      2.9 seconds, 49.1%
Report:               0.3 seconds,  5.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 419
Test mean error for best: 0.41900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: -33                
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 29                 
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 43                  | Program output: 43                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 95                 
Correct output: 6                   | Program output: 50                 
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 85                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 79                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 3                  
Correct output: 1                   | Program output: 84                 
Correct output: 36                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 18                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: 41                 
Correct output: -31                 | Program output: 26                 
Correct output: -35                 | Program output: -35                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -24                
Correct output: -24                 | Program output: -24                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -81                
Correct output: -56                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -83                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: 3                  
Correct output: -20                 | Program output: 63                 
Correct output: -91                 | Program output: 39                 
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: 27                 
Correct output: -42                 | Program output: 57                 
Correct output: 33                  | Program output: 33                 
Correct output: -65                 | Program output: 69                 
Correct output: -79                 | Program output: 64                 
Correct output: -86                 | Program output: -86                
Correct output: 2                   | Program output: 2                  
Correct output: -13                 | Program output: 18                 
Correct output: -90                 | Program output: -73                
Correct output: -87                 | Program output: -78                
Correct output: -51                 | Program output: -8                 
Correct output: -64                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: -34                
Correct output: -57                 | Program output: 67                 
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: 1                   | Program output: 1                  
Correct output: -98                 | Program output: -98                
Correct output: -47                 | Program output: -47                
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: 27                 
Correct output: -34                 | Program output: -34                
Correct output: -15                 | Program output: -15                
Correct output: -46                 | Program output: -46                
Correct output: 17                  | Program output: 17                 
Correct output: -78                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -76                
Correct output: -77                 | Program output: 3                  
Correct output: -21                 | Program output: 53                 
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -37                
Correct output: -56                 | Program output: 84                 
Correct output: -12                 | Program output: -12                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: 16                 
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -8                  | Program output: 53                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 2, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 2, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_items})
Lexicase best program: (exec_yank integer_inc integer_sub in2 in1 integer_min integer_add print_integer exec_if (print_integer integer_gte integer_dup_times exec_if (integer_lt) (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_empty integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_fromboolean boolean_flush exec_shove (boolean_rot)) exec_yankdup exec_while (integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_y (boolean_eq integer_dup_items integer_max exec_y_when_autoconstructing (integer_div integer_sub integer_dup_times exec_if (boolean_swap print_boolean) (exec_empty boolean_xor integer_gt integer_dup_items))))) () ()) () ()))) ())
Lexicase best errors: [0 0 0 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 95
Percent parens: 0.274
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 2, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 2, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_items})
Zero cases best program: (exec_yank integer_inc integer_sub in2 in1 integer_min integer_add print_integer exec_if (print_integer integer_gte integer_dup_times exec_if (integer_lt) (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_empty integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_fromboolean boolean_flush exec_shove (boolean_rot)) exec_yankdup exec_while (integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_y (boolean_eq integer_dup_items integer_max exec_y_when_autoconstructing (integer_div integer_sub integer_dup_times exec_if (boolean_swap print_boolean) (exec_empty boolean_xor integer_gt integer_dup_items))))) () ()) () ()))) ())
Zero cases best errors: [0 0 0 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 95
Percent parens: 0.274
--- Lexicase Population Statistics ---
Count of elite individuals by case: (900 108 104 411 905 410 411 196 197 193)
Population mean number of elite cases: 3.84
Count of perfect (error zero) individuals by case: (900 108 104 411 905 410 411 196 197 193)
Population mean number of perfect (error zero) cases: 3.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 2, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 2, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_items})
Best program: (exec_yank integer_inc integer_sub in2 in1 integer_min integer_add print_integer exec_if (print_integer integer_gte integer_dup_times exec_if (integer_lt) (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_empty integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_fromboolean boolean_flush exec_shove (boolean_rot)) exec_yankdup exec_while (integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_y (boolean_eq integer_dup_items integer_max exec_y_when_autoconstructing (integer_div integer_sub integer_dup_times exec_if (boolean_swap print_boolean) (exec_empty boolean_xor integer_gt integer_dup_items))))) () ()) () ()))) ())
Errors: [0 0 0 0 0 0 0 1 1 1]
Total: 3
Mean: 0.3
Genome size: 69
Size: 95
Percent parens: 0.274
--- Population Statistics ---
Average total errors in population: 6.165
Median total errors in population: 6
Error averages by case: (0.1 0.892 0.896 0.589 0.095 0.59 0.589 0.804 0.803 0.807)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.264
Average program size in population (points): 59.106
Average percent parens in population: 0.234
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.009
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 79
Genome diversity (% unique genomes):	 0.632
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 83
Syntactic diversity (% unique Push programs):	 0.613
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1864082
--- Timings ---
Current time: 1559314569766 milliseconds
Total Time:           9.1 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         4.6 seconds, 50.3%
Fitness Testing:      3.7 seconds, 40.9%
Report:               0.7 seconds,  7.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 411
Test mean error for best: 0.41100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 32                 
Correct output: 24                  | Program output: 89                 
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -1                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 27                 
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 43                  | Program output: 43                 
Correct output: 20                  | Program output: 66                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 41                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 8                  
Correct output: 2                   | Program output: 20                 
Correct output: 1                   | Program output: 39                 
Correct output: 1                   | Program output: 84                 
Correct output: 36                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 35                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: -25                
Correct output: -31                 | Program output: 44                 
Correct output: -35                 | Program output: 30                 
Correct output: -49                 | Program output: 35                 
Correct output: -85                 | Program output: -18                
Correct output: -24                 | Program output: -12                
Correct output: -93                 | Program output: -79                
Correct output: -81                 | Program output: -81                
Correct output: -56                 | Program output: -56                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -37                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -15                
Correct output: -20                 | Program output: -13                
Correct output: -91                 | Program output: -16                
Correct output: -80                 | Program output: -6                 
Correct output: -83                 | Program output: -60                
Correct output: -42                 | Program output: 4                  
Correct output: 33                  | Program output: 38                 
Correct output: -65                 | Program output: -56                
Correct output: -79                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: 2                   | Program output: 21                 
Correct output: -13                 | Program output: 32                 
Correct output: -90                 | Program output: -90                
Correct output: -87                 | Program output: -87                
Correct output: -51                 | Program output: -51                
Correct output: -64                 | Program output: -64                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: 54                 
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: 46                 
Correct output: -86                 | Program output: 54                 
Correct output: 1                   | Program output: 1                  
Correct output: -98                 | Program output: -4                 
Correct output: -47                 | Program output: -14                
Correct output: -34                 | Program output: 80                 
Correct output: -80                 | Program output: -27                
Correct output: -34                 | Program output: -31                
Correct output: -15                 | Program output: -15                
Correct output: -46                 | Program output: -46                
Correct output: 17                  | Program output: 56                 
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -25                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 2                  
Correct output: -98                 | Program output: -32                
Correct output: -77                 | Program output: -77                
Correct output: -21                 | Program output: 53                 
Correct output: -81                 | Program output: -76                
Correct output: -86                 | Program output: -37                
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: -12                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: -62                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -8                  | Program output: 53                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 2, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 2, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_items})
Lexicase best program: (integer_swap integer_add in3 exec_s (exec_y_when_autoconstructing (boolean_swap boolean_eq) in1 integer_min integer_add print_integer exec_if (print_integer integer_gte integer_dup_times exec_if (integer_lt) (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_empty integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_fromboolean boolean_flush exec_shove (boolean_rot)) exec_yankdup exec_while (integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_y (boolean_eq integer_dup_items integer_max exec_y_when_autoconstructing (integer_div integer_sub integer_dup_times exec_if (boolean_swap print_boolean) (exec_empty boolean_xor integer_gt integer_dup_items))))) () ()) () ()))) ()) () ())
Lexicase best errors: [1 0 0 0 1 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 102
Percent parens: 0.294
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 2, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 2, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_items})
Zero cases best program: (integer_swap integer_add in3 exec_s (exec_y_when_autoconstructing (boolean_swap boolean_eq) in1 integer_min integer_add print_integer exec_if (print_integer integer_gte integer_dup_times exec_if (integer_lt) (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_empty integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_fromboolean boolean_flush exec_shove (boolean_rot)) exec_yankdup exec_while (integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_y (boolean_eq integer_dup_items integer_max exec_y_when_autoconstructing (integer_div integer_sub integer_dup_times exec_if (boolean_swap print_boolean) (exec_empty boolean_xor integer_gt integer_dup_items))))) () ()) () ()))) ()) () ())
Zero cases best errors: [1 0 0 0 1 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 102
Percent parens: 0.294
--- Lexicase Population Statistics ---
Count of elite individuals by case: (482 477 218 825 122 217 482 218 480 215)
Population mean number of elite cases: 3.74
Count of perfect (error zero) individuals by case: (482 477 218 825 122 217 482 218 480 215)
Population mean number of perfect (error zero) cases: 3.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_swap} {:close 0, :instruction integer_add} {:close 1, :instruction in3} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_eq} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 2, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 2, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_items})
Best program: (integer_swap integer_add in3 exec_s (exec_y_when_autoconstructing (boolean_swap boolean_eq) in1 integer_min integer_add print_integer exec_if (print_integer integer_gte integer_dup_times exec_if (integer_lt) (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_empty integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_fromboolean boolean_flush exec_shove (boolean_rot)) exec_yankdup exec_while (integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_y (boolean_eq integer_dup_items integer_max exec_y_when_autoconstructing (integer_div integer_sub integer_dup_times exec_if (boolean_swap print_boolean) (exec_empty boolean_xor integer_gt integer_dup_items))))) () ()) () ()))) ()) () ())
Errors: [1 0 0 0 1 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 72
Size: 102
Percent parens: 0.294
--- Population Statistics ---
Average total errors in population: 6.264
Median total errors in population: 5
Error averages by case: (0.518 0.523 0.782 0.175 0.878 0.783 0.518 0.782 0.52 0.785)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.158
Average program size in population (points): 72.639
Average percent parens in population: 0.248
Minimum age in population: 3.0
Maximum age in population: 5.75
Average age in population: 4.52
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 211
Genome diversity (% unique genomes):	 0.614
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 212
Syntactic diversity (% unique Push programs):	 0.598
Total error diversity:				 0.007
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2493699
--- Timings ---
Current time: 1559314573010 milliseconds
Total Time:          12.3 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         6.6 seconds, 53.9%
Fitness Testing:      4.5 seconds, 36.7%
Report:               1.1 seconds,  8.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 419
Test mean error for best: 0.41900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: -33                
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 29                 
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 43                  | Program output: 43                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 95                 
Correct output: 6                   | Program output: 50                 
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 85                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 79                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 3                  
Correct output: 1                   | Program output: 84                 
Correct output: 36                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 18                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: 41                 
Correct output: -31                 | Program output: 26                 
Correct output: -35                 | Program output: -35                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -24                
Correct output: -24                 | Program output: -24                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -81                
Correct output: -56                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -83                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: 3                  
Correct output: -20                 | Program output: 63                 
Correct output: -91                 | Program output: 39                 
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: 27                 
Correct output: -42                 | Program output: 57                 
Correct output: 33                  | Program output: 33                 
Correct output: -65                 | Program output: 69                 
Correct output: -79                 | Program output: 64                 
Correct output: -86                 | Program output: -86                
Correct output: 2                   | Program output: 2                  
Correct output: -13                 | Program output: 18                 
Correct output: -90                 | Program output: -73                
Correct output: -87                 | Program output: -78                
Correct output: -51                 | Program output: -8                 
Correct output: -64                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: -34                
Correct output: -57                 | Program output: 67                 
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: 1                   | Program output: 1                  
Correct output: -98                 | Program output: -98                
Correct output: -47                 | Program output: -47                
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: 27                 
Correct output: -34                 | Program output: -34                
Correct output: -15                 | Program output: -15                
Correct output: -46                 | Program output: -46                
Correct output: 17                  | Program output: 17                 
Correct output: -78                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -76                
Correct output: -77                 | Program output: 3                  
Correct output: -21                 | Program output: 53                 
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -37                
Correct output: -56                 | Program output: 84                 
Correct output: -12                 | Program output: -12                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: 16                 
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -8                  | Program output: 53                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 2, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 2, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_items})
Lexicase best program: (exec_yank integer_inc integer_sub in2 in1 integer_min integer_add print_integer exec_if (print_integer integer_gte integer_dup_times exec_if (integer_lt) (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in4 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_empty integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_fromboolean boolean_flush exec_shove (boolean_rot)) exec_yankdup exec_while (integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_y (boolean_eq exec_dup (integer_max exec_y_when_autoconstructing (integer_div integer_sub integer_dup_times exec_if (boolean_swap print_boolean) (exec_empty boolean_xor integer_gt integer_dup_items)))))) () ()) () ()))) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 96
Percent parens: 0.281
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in4} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 2, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 2, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_items})
Zero cases best program: (exec_yank integer_inc integer_sub in2 in1 integer_min integer_add print_integer exec_if (print_integer integer_gte integer_dup_times exec_if (integer_lt) (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in4 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_empty integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_fromboolean boolean_flush exec_shove (boolean_rot)) exec_yankdup exec_while (integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_y (boolean_eq exec_dup (integer_max exec_y_when_autoconstructing (integer_div integer_sub integer_dup_times exec_if (boolean_swap print_boolean) (exec_empty boolean_xor integer_gt integer_dup_items)))))) () ()) () ()))) ())
Zero cases best errors: [0 0 0 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 96
Percent parens: 0.281
--- Lexicase Population Statistics ---
Count of elite individuals by case: (278 281 274 278 783 278 783 278 104 785)
Population mean number of elite cases: 4.12
Count of perfect (error zero) individuals by case: (278 281 274 278 783 278 783 278 104 785)
Population mean number of perfect (error zero) cases: 4.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup})
Best program: (exec_yank integer_inc integer_sub in2 in1 integer_min integer_add print_integer exec_if (print_integer integer_gte integer_dup_times exec_if (integer_lt) (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty exec_rot (boolean_dup) () ()) ())
Errors: [0 0 0 0 0 0 0 0 1 0]
Total: 1
Mean: 0.1
Genome size: 22
Size: 31
Percent parens: 0.290
--- Population Statistics ---
Average total errors in population: 5.878
Median total errors in population: 7
Error averages by case: (0.722 0.719 0.726 0.722 0.217 0.722 0.217 0.722 0.896 0.215)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.215
Average program size in population (points): 96.801
Average percent parens in population: 0.284
Minimum age in population: 4.75
Maximum age in population: 7.375
Average age in population: 6.084375
Median age in population: 6.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 176
Genome diversity (% unique genomes):	 0.695
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 176
Syntactic diversity (% unique Push programs):	 0.694
Total error diversity:				 0.009
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 3137705
--- Timings ---
Current time: 1559314575965 milliseconds
Total Time:          15.4 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         8.6 seconds, 55.8%
Fitness Testing:      5.2 seconds, 34.2%
Report:               1.4 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 433
Test mean error for best: 0.43300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 89                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -1                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 43                  | Program output: 43                 
Correct output: 20                  | Program output: 40                 
Correct output: 5                   | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 13                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 39                 
Correct output: 2                   | Program output: 8                  
Correct output: 2                   | Program output: 29                 
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 36                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 48                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: 0                  
Correct output: -31                 | Program output: -31                
Correct output: -35                 | Program output: 48                 
Correct output: -49                 | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: -7                 
Correct output: -93                 | Program output: -28                
Correct output: -81                 | Program output: -81                
Correct output: -56                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -97                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -66                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -58                
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: 33                  | Program output: 60                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -86                
Correct output: 2                   | Program output: 21                 
Correct output: -13                 | Program output: -13                
Correct output: -90                 | Program output: -42                
Correct output: -87                 | Program output: -15                
Correct output: -51                 | Program output: -8                 
Correct output: -64                 | Program output: -55                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: 34                 
Correct output: -57                 | Program output: 9                  
Correct output: -76                 | Program output: 46                 
Correct output: -86                 | Program output: -59                
Correct output: 1                   | Program output: 1                  
Correct output: -98                 | Program output: -86                
Correct output: -47                 | Program output: -39                
Correct output: -34                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -10                
Correct output: -15                 | Program output: -15                
Correct output: -46                 | Program output: -46                
Correct output: 17                  | Program output: 56                 
Correct output: -78                 | Program output: 20                 
Correct output: -92                 | Program output: 29                 
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 2                  
Correct output: -98                 | Program output: -98                
Correct output: -77                 | Program output: -24                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: -56                 | Program output: -53                
Correct output: -12                 | Program output: -12                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: 46                 
Correct output: -97                 | Program output: 16                 
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -8                  | Program output: -8                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_777} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 2, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 2, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_dup_items})
Lexicase best program: (in4 integer_mult tagged_777 in1 integer_min integer_add print_integer exec_if (print_integer integer_gte integer_dup_times exec_if (integer_lt) (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_empty integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_fromboolean boolean_flush exec_shove (boolean_rot)) exec_yankdup exec_while (integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_y (boolean_eq exec_y_when_autoconstructing (integer_max exec_y_when_autoconstructing (integer_div integer_sub integer_dup_times exec_if (boolean_swap print_boolean) (exec_empty boolean_xor integer_gt integer_dup_items)))))) () ()) () ()))) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 95
Percent parens: 0.284
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_777} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 2, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 2, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_dup_items})
Zero cases best program: (in4 integer_mult tagged_777 in1 integer_min integer_add print_integer exec_if (print_integer integer_gte integer_dup_times exec_if (integer_lt) (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_empty integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_fromboolean boolean_flush exec_shove (boolean_rot)) exec_yankdup exec_while (integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_y (boolean_eq exec_y_when_autoconstructing (integer_max exec_y_when_autoconstructing (integer_div integer_sub integer_dup_times exec_if (boolean_swap print_boolean) (exec_empty boolean_xor integer_gt integer_dup_items)))))) () ()) () ()))) ())
Zero cases best errors: [0 0 0 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 95
Percent parens: 0.284
--- Lexicase Population Statistics ---
Count of elite individuals by case: (792 787 115 787 674 114 793 797 3 790)
Population mean number of elite cases: 5.65
Count of perfect (error zero) individuals by case: (792 787 115 787 674 114 793 797 3 790)
Population mean number of perfect (error zero) cases: 5.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_777} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 2, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 2, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_items})
Best program: (in4 integer_mult tagged_777 in1 integer_min integer_add print_integer exec_if (print_integer integer_gte integer_dup_times exec_if (integer_lt) (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_empty integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_fromboolean boolean_flush exec_shove (boolean_rot)) exec_yankdup exec_while (integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_y (boolean_eq integer_dup_items integer_max exec_y_when_autoconstructing (integer_div integer_sub integer_dup_times exec_if (boolean_swap print_boolean) (exec_empty boolean_xor integer_gt integer_dup_items))))) () ()) () ()))) ())
Errors: [0 0 0 0 1 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 67
Size: 93
Percent parens: 0.280
--- Population Statistics ---
Average total errors in population: 4.348
Median total errors in population: 3
Error averages by case: (0.208 0.213 0.885 0.213 0.326 0.886 0.207 0.203 0.997 0.21)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.072
Average program size in population (points): 90.897
Average percent parens in population: 0.272
Minimum age in population: 6.0
Maximum age in population: 9.1875
Average age in population: 7.532625
Median age in population: 7.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 76
Genome diversity (% unique genomes):	 0.788
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 77
Syntactic diversity (% unique Push programs):	 0.784
Total error diversity:				 0.008
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.091
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3786241
--- Timings ---
Current time: 1559314579172 milliseconds
Total Time:          18.5 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        10.6 seconds, 57.6%
Fitness Testing:      6.0 seconds, 32.5%
Report:               1.7 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 419
Test mean error for best: 0.41900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: -33                
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 29                 
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 43                  | Program output: 43                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 95                 
Correct output: 6                   | Program output: 50                 
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 85                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 79                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 3                  
Correct output: 1                   | Program output: 84                 
Correct output: 36                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 18                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: 41                 
Correct output: -31                 | Program output: 26                 
Correct output: -35                 | Program output: -35                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -24                
Correct output: -24                 | Program output: -24                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -81                
Correct output: -56                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -83                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: 3                  
Correct output: -20                 | Program output: 63                 
Correct output: -91                 | Program output: 39                 
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: 27                 
Correct output: -42                 | Program output: 57                 
Correct output: 33                  | Program output: 33                 
Correct output: -65                 | Program output: 69                 
Correct output: -79                 | Program output: 64                 
Correct output: -86                 | Program output: -86                
Correct output: 2                   | Program output: 2                  
Correct output: -13                 | Program output: 18                 
Correct output: -90                 | Program output: -73                
Correct output: -87                 | Program output: -78                
Correct output: -51                 | Program output: -8                 
Correct output: -64                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: -34                
Correct output: -57                 | Program output: 67                 
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: 1                   | Program output: 1                  
Correct output: -98                 | Program output: -98                
Correct output: -47                 | Program output: -47                
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: 27                 
Correct output: -34                 | Program output: -34                
Correct output: -15                 | Program output: -15                
Correct output: -46                 | Program output: -46                
Correct output: 17                  | Program output: 17                 
Correct output: -78                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -76                
Correct output: -77                 | Program output: 3                  
Correct output: -21                 | Program output: 53                 
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -37                
Correct output: -56                 | Program output: 84                 
Correct output: -12                 | Program output: -12                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: 16                 
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -8                  | Program output: 53                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 2, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 2, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_items})
Lexicase best program: (exec_yank integer_inc integer_sub in2 in1 integer_min integer_add print_integer exec_if (print_integer integer_gte integer_dup_times exec_if (integer_lt) (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_empty integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_fromboolean boolean_flush exec_shove (boolean_rot)) exec_yankdup exec_while (integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_y (boolean_eq integer_dup_items integer_max exec_y_when_autoconstructing (integer_div integer_sub integer_dup_times exec_if (boolean_swap print_boolean) (exec_empty boolean_xor integer_gt integer_dup_items))))) () ()) () ()))) ())
Lexicase best errors: [0 0 1 0 1 0 0 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 95
Percent parens: 0.274
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 2, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 2, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_items})
Zero cases best program: (exec_yank integer_inc integer_sub in2 in1 integer_min integer_add print_integer exec_if (print_integer integer_gte integer_dup_times exec_if (integer_lt) (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_empty integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_fromboolean boolean_flush exec_shove (boolean_rot)) exec_yankdup exec_while (integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_y (boolean_eq integer_dup_items integer_max exec_y_when_autoconstructing (integer_div integer_sub integer_dup_times exec_if (boolean_swap print_boolean) (exec_empty boolean_xor integer_gt integer_dup_items))))) () ()) () ()))) ())
Zero cases best errors: [0 0 1 0 1 0 0 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 95
Percent parens: 0.274
--- Lexicase Population Statistics ---
Count of elite individuals by case: (213 209 398 789 398 213 788 787 789 789)
Population mean number of elite cases: 5.37
Count of perfect (error zero) individuals by case: (213 209 398 789 398 213 788 787 789 789)
Population mean number of perfect (error zero) cases: 5.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 2, :instruction boolean_rot} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 2, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_items})
Best program: (exec_yank integer_inc integer_sub in2 in1 integer_min integer_add print_integer exec_if (integer_min integer_add print_integer exec_if (print_integer integer_gte integer_dup_times exec_if (integer_lt) (boolean_rot integer_gte integer_dup_times exec_if (integer_lt) (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_empty integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_fromboolean boolean_flush exec_shove (boolean_rot)) integer_yankdup exec_while (integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_y (boolean_eq integer_dup_items integer_max exec_y_when_autoconstructing (integer_div integer_sub integer_dup_times exec_if (boolean_swap print_boolean) (exec_empty boolean_xor integer_gt integer_dup_items))))) () ()) () ())))) ()) ())
Errors: [0 0 1 0 1 0 0 0 0 0]
Total: 2
Mean: 0.2
Genome size: 78
Size: 108
Percent parens: 0.278
--- Population Statistics ---
Average total errors in population: 4.627
Median total errors in population: 3
Error averages by case: (0.787 0.791 0.602 0.211 0.602 0.787 0.212 0.213 0.211 0.211)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 53.096
Average program size in population (points): 73.033
Average percent parens in population: 0.268
Minimum age in population: 7.0
Maximum age in population: 10.875
Average age in population: 9.2135625
Median age in population: 9.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 184
Genome diversity (% unique genomes):	 0.671
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 187
Syntactic diversity (% unique Push programs):	 0.664
Total error diversity:				 0.007
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4310102
--- Timings ---
Current time: 1559314582070 milliseconds
Total Time:          21.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        12.5 seconds, 58.6%
Fitness Testing:      6.6 seconds, 31.0%
Report:               2.1 seconds,  9.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 419
Test mean error for best: 0.41900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: -33                
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 24                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 29                 
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 43                  | Program output: 43                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 95                 
Correct output: 6                   | Program output: 50                 
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 85                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 79                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 3                  
Correct output: 1                   | Program output: 84                 
Correct output: 36                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 18                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: 41                 
Correct output: -31                 | Program output: 26                 
Correct output: -35                 | Program output: -35                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -24                
Correct output: -24                 | Program output: -24                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -81                
Correct output: -56                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -83                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: 3                  
Correct output: -20                 | Program output: 63                 
Correct output: -91                 | Program output: 39                 
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: 27                 
Correct output: -42                 | Program output: 57                 
Correct output: 33                  | Program output: 33                 
Correct output: -65                 | Program output: 69                 
Correct output: -79                 | Program output: 64                 
Correct output: -86                 | Program output: -86                
Correct output: 2                   | Program output: 2                  
Correct output: -13                 | Program output: 18                 
Correct output: -90                 | Program output: -73                
Correct output: -87                 | Program output: -78                
Correct output: -51                 | Program output: -8                 
Correct output: -64                 | Program output: -40                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: -34                
Correct output: -57                 | Program output: 67                 
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: 1                   | Program output: 1                  
Correct output: -98                 | Program output: -98                
Correct output: -47                 | Program output: -47                
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: 27                 
Correct output: -34                 | Program output: -34                
Correct output: -15                 | Program output: -15                
Correct output: -46                 | Program output: -46                
Correct output: 17                  | Program output: 17                 
Correct output: -78                 | Program output: 0                  
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -76                
Correct output: -77                 | Program output: 3                  
Correct output: -21                 | Program output: 53                 
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -37                
Correct output: -56                 | Program output: 84                 
Correct output: -12                 | Program output: -12                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: 16                 
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -8                  | Program output: 53                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 2, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 2, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 2, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_items})
Lexicase best program: (exec_yank integer_inc integer_sub in2 in1 integer_min integer_add print_integer exec_if (print_integer integer_gte integer_dup_times integer_dup integer_lt) (boolean_rot exec_dup_times (integer_empty)) integer_swap integer_rot integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_empty integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_fromboolean boolean_flush exec_shove (boolean_rot)) exec_yankdup exec_while (integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_y (exec_k (integer_dup_items integer_max exec_y_when_autoconstructing (integer_div integer_sub integer_dup_times exec_if (boolean_swap print_boolean exec_empty boolean_xor integer_gt integer_dup_items) ())) ()))) () ()) () ())))
Lexicase best errors: [1 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 95
Percent parens: 0.274
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_dup} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 2, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 2, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 2, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_items})
Zero cases best program: (exec_yank integer_inc integer_sub in2 in1 integer_min integer_add print_integer exec_if (print_integer integer_gte integer_dup_times integer_dup integer_lt) (boolean_rot exec_dup_times (integer_empty)) integer_swap integer_rot integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_empty integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_fromboolean boolean_flush exec_shove (boolean_rot)) exec_yankdup exec_while (integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_y (exec_k (integer_dup_items integer_max exec_y_when_autoconstructing (integer_div integer_sub integer_dup_times exec_if (boolean_swap print_boolean exec_empty boolean_xor integer_gt integer_dup_items) ())) ()))) () ()) () ())))
Zero cases best errors: [1 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 95
Percent parens: 0.274
--- Lexicase Population Statistics ---
Count of elite individuals by case: (336 474 814 474 809 474 818 338 809 811)
Population mean number of elite cases: 6.16
Count of perfect (error zero) individuals by case: (336 474 814 474 809 474 818 338 809 811)
Population mean number of perfect (error zero) cases: 6.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 2, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 2, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_items})
Best program: (exec_yank integer_inc integer_sub in2 in1 integer_min integer_dup print_integer exec_if (boolean_or integer_gte integer_dup_times exec_if (integer_lt) (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_rot integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_fromboolean boolean_flush exec_shove (boolean_rot)) exec_yankdup exec_while (integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_y (boolean_eq integer_dup_items integer_max exec_y_when_autoconstructing (integer_div integer_sub integer_dup_times exec_if (boolean_swap print_boolean) (exec_empty boolean_xor integer_gt integer_dup_items))))) () ()) () ()))) ())
Errors: [1 0 0 0 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 69
Size: 95
Percent parens: 0.274
--- Population Statistics ---
Average total errors in population: 3.843
Median total errors in population: 3
Error averages by case: (0.664 0.526 0.186 0.526 0.191 0.526 0.182 0.662 0.191 0.189)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 60.893
Average program size in population (points): 83.927
Average percent parens in population: 0.272
Minimum age in population: 8.0
Maximum age in population: 12.703125
Average age in population: 10.61553125
Median age in population: 10.71875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.836
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.833
Total error diversity:				 0.008
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.095
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 4923115
--- Timings ---
Current time: 1559314585351 milliseconds
Total Time:          24.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.7 seconds, 59.6%
Fitness Testing:      7.3 seconds, 29.8%
Report:               2.5 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 433
Test mean error for best: 0.43300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 89                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -1                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 43                  | Program output: 43                 
Correct output: 20                  | Program output: 40                 
Correct output: 5                   | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 13                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 39                 
Correct output: 2                   | Program output: 8                  
Correct output: 2                   | Program output: 29                 
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 36                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 48                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: 0                  
Correct output: -31                 | Program output: -31                
Correct output: -35                 | Program output: 48                 
Correct output: -49                 | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: -7                 
Correct output: -93                 | Program output: -28                
Correct output: -81                 | Program output: -81                
Correct output: -56                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -97                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -66                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -58                
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: 33                  | Program output: 60                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -86                
Correct output: 2                   | Program output: 21                 
Correct output: -13                 | Program output: -13                
Correct output: -90                 | Program output: -42                
Correct output: -87                 | Program output: -15                
Correct output: -51                 | Program output: -8                 
Correct output: -64                 | Program output: -55                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: 34                 
Correct output: -57                 | Program output: 9                  
Correct output: -76                 | Program output: 46                 
Correct output: -86                 | Program output: -59                
Correct output: 1                   | Program output: 1                  
Correct output: -98                 | Program output: -86                
Correct output: -47                 | Program output: -39                
Correct output: -34                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -10                
Correct output: -15                 | Program output: -15                
Correct output: -46                 | Program output: -46                
Correct output: 17                  | Program output: 56                 
Correct output: -78                 | Program output: 20                 
Correct output: -92                 | Program output: 29                 
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 2                  
Correct output: -98                 | Program output: -98                
Correct output: -77                 | Program output: -24                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: -56                 | Program output: -53                
Correct output: -12                 | Program output: -12                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: 46                 
Correct output: -97                 | Program output: 16                 
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -8                  | Program output: -8                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 2, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 2, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_items})
Lexicase best program: (in4 in1 integer_min integer_add print_integer exec_if (print_integer integer_gte integer_dup_times exec_if (integer_lt) (boolean_rot exec_dup_times (integer_gte integer_rot) integer_empty exec_rot (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) (integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_empty boolean_flush exec_pop (boolean_pop in2 boolean_empty) integer_fromboolean boolean_flush exec_shove (boolean_rot)) exec_yankdup exec_while (integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_y (boolean_eq integer_dup_items integer_dup_items integer_max exec_y_when_autoconstructing (integer_div integer_sub integer_dup_times exec_if (boolean_swap print_boolean) (exec_empty boolean_xor boolean_dup integer_dup_items))))) () ()) () ()))) ())) ())
Lexicase best errors: [1 0 0 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 103
Percent parens: 0.291
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 2, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 2, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_dup_items})
Zero cases best program: (in4 in1 integer_min integer_add print_integer exec_if (print_integer integer_gte integer_dup_times exec_if (integer_lt) (boolean_rot exec_dup_times (integer_gte integer_rot) integer_empty exec_rot (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) (integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_empty boolean_flush exec_pop (boolean_pop in2 boolean_empty) integer_fromboolean boolean_flush exec_shove (boolean_rot)) exec_yankdup exec_while (integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_y (boolean_eq integer_dup_items integer_dup_items integer_max exec_y_when_autoconstructing (integer_div integer_sub integer_dup_times exec_if (boolean_swap print_boolean) (exec_empty boolean_xor boolean_dup integer_dup_items))))) () ()) () ()))) ())) ())
Zero cases best errors: [1 0 0 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 103
Percent parens: 0.291
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 824 822 306 824 521 1000 832 821 305)
Population mean number of elite cases: 7.26
Count of perfect (error zero) individuals by case: (0 824 822 306 824 521 0 832 821 305)
Population mean number of perfect (error zero) cases: 5.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_777} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 2, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 2, :instruction integer_div} {:close 0, :instruction print_newline} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_max} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 1, :instruction integer_gt} {:close 0, :instruction integer_dup_items})
Best program: (in4 integer_mult tagged_777 in1 integer_min integer_add print_integer exec_if (print_integer integer_gte integer_dup_times exec_if (integer_lt) (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_empty integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_fromboolean boolean_flush exec_shove (boolean_rot)) exec_yankdup exec_while (integer_div)) (print_newline boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_y (boolean_eq integer_dup_items integer_max) print_boolean) exec_empty boolean_xor integer_gt) (integer_dup_items) ()))) ())
Errors: [1 0 0 0 0 1 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 62
Size: 82
Percent parens: 0.244
--- Population Statistics ---
Average total errors in population: 4.745
Median total errors in population: 4
Error averages by case: (1.0 0.176 0.178 0.694 0.176 0.479 1.0 0.168 0.179 0.695)
Error minima by case: (1 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 59.417
Average program size in population (points): 81.901
Average percent parens in population: 0.272
Minimum age in population: 9.25
Maximum age in population: 13.8828125
Average age in population: 12.0931796875
Median age in population: 12.171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.869
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.867
Total error diversity:				 0.008
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.087
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 5516122
--- Timings ---
Current time: 1559314588294 milliseconds
Total Time:          27.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.5 seconds, 59.9%
Fitness Testing:      8.0 seconds, 29.1%
Report:               2.9 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 433
Test mean error for best: 0.43300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 89                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -1                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 43                  | Program output: 43                 
Correct output: 20                  | Program output: 40                 
Correct output: 5                   | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 13                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 39                 
Correct output: 2                   | Program output: 8                  
Correct output: 2                   | Program output: 29                 
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 36                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 48                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: 0                  
Correct output: -31                 | Program output: -31                
Correct output: -35                 | Program output: 48                 
Correct output: -49                 | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: -7                 
Correct output: -93                 | Program output: -28                
Correct output: -81                 | Program output: -81                
Correct output: -56                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -97                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -66                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -58                
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: 33                  | Program output: 60                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -86                
Correct output: 2                   | Program output: 21                 
Correct output: -13                 | Program output: -13                
Correct output: -90                 | Program output: -42                
Correct output: -87                 | Program output: -15                
Correct output: -51                 | Program output: -8                 
Correct output: -64                 | Program output: -55                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: 34                 
Correct output: -57                 | Program output: 9                  
Correct output: -76                 | Program output: 46                 
Correct output: -86                 | Program output: -59                
Correct output: 1                   | Program output: 1                  
Correct output: -98                 | Program output: -86                
Correct output: -47                 | Program output: -39                
Correct output: -34                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -10                
Correct output: -15                 | Program output: -15                
Correct output: -46                 | Program output: -46                
Correct output: 17                  | Program output: 56                 
Correct output: -78                 | Program output: 20                 
Correct output: -92                 | Program output: 29                 
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 2                  
Correct output: -98                 | Program output: -98                
Correct output: -77                 | Program output: -24                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: -56                 | Program output: -53                
Correct output: -12                 | Program output: -12                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: 46                 
Correct output: -97                 | Program output: 16                 
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -8                  | Program output: -8                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_777} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 2, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 2, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor})
Lexicase best program: (in4 integer_mult tagged_777 in1 integer_min integer_add print_integer exec_if (print_integer integer_gte in1 exec_if (integer_lt) (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty integer_rot) (integer_empty exec_rot (integer_dup) (integer_min boolean_invert_second_then_and) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_empty integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_fromboolean boolean_flush exec_shove (boolean_rot)) exec_yankdup exec_while (integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_y (boolean_eq integer_dup_items integer_max exec_y_when_autoconstructing (integer_div integer_sub integer_dup_times exec_if (boolean_swap print_boolean) (exec_empty boolean_xor))))) () ()) () ()))))
Lexicase best errors: [1 1 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 94
Percent parens: 0.277
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_777} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction in1} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 2, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 2, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor})
Zero cases best program: (in4 integer_mult tagged_777 in1 integer_min integer_add print_integer exec_if (print_integer integer_gte in1 exec_if (integer_lt) (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty integer_rot) (integer_empty exec_rot (integer_dup) (integer_min boolean_invert_second_then_and) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_empty integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_fromboolean boolean_flush exec_shove (boolean_rot)) exec_yankdup exec_while (integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_y (boolean_eq integer_dup_items integer_max exec_y_when_autoconstructing (integer_div integer_sub integer_dup_times exec_if (boolean_swap print_boolean) (exec_empty boolean_xor))))) () ()) () ()))))
Zero cases best errors: [1 1 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 94
Percent parens: 0.277
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 262 1 602 873 880 872 602 603 872)
Population mean number of elite cases: 5.57
Count of perfect (error zero) individuals by case: (1 262 1 602 873 880 872 602 603 872)
Population mean number of perfect (error zero) cases: 5.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_777} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 2, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 2, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_items})
Best program: (in4 integer_mult tagged_777 in1 integer_min integer_add print_integer exec_if (print_integer integer_gte integer_dup_times exec_if (integer_lt) (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty exec_rot (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_rot integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_fromboolean boolean_flush exec_shove (boolean_rot)) exec_yankdup exec_while (integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_y (boolean_eq integer_dup_items integer_max exec_y_when_autoconstructing (integer_div integer_sub integer_dup_times exec_if (boolean_swap print_boolean) (exec_empty boolean_xor integer_gt integer_dup_items))))) () ()) () ())) ()) ())
Errors: [1 1 1 0 0 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 67
Size: 93
Percent parens: 0.280
--- Population Statistics ---
Average total errors in population: 4.432
Median total errors in population: 3
Error averages by case: (0.999 0.738 0.999 0.398 0.127 0.12 0.128 0.398 0.397 0.128)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 58.526
Average program size in population (points): 80.732
Average percent parens in population: 0.272
Minimum age in population: 10.25
Maximum age in population: 15.390625
Average age in population: 13.67498828125
Median age in population: 13.76953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.845
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.841
Total error diversity:				 0.007
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 6094441
--- Timings ---
Current time: 1559314591114 milliseconds
Total Time:          30.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.3 seconds, 60.3%
Fitness Testing:      8.7 seconds, 28.5%
Report:               3.3 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 441
Test mean error for best: 0.44100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 89                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -1                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 43                  | Program output: 43                 
Correct output: 20                  | Program output: 40                 
Correct output: 5                   | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 13false            
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 39                 
Correct output: 2                   | Program output: 8                  
Correct output: 2                   | Program output: 29                 
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 36                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 48                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: 0                  
Correct output: -31                 | Program output: -31                
Correct output: -35                 | Program output: 48                 
Correct output: -49                 | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: -7                 
Correct output: -93                 | Program output: -28                
Correct output: -81                 | Program output: -81                
Correct output: -56                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -97                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -66                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -58                
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: 33                  | Program output: 60                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -86                
Correct output: 2                   | Program output: 21                 
Correct output: -13                 | Program output: -13                
Correct output: -90                 | Program output: -42                
Correct output: -87                 | Program output: -15                
Correct output: -51                 | Program output: -8                 
Correct output: -64                 | Program output: -55                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: 34                 
Correct output: -57                 | Program output: 9                  
Correct output: -76                 | Program output: 46                 
Correct output: -86                 | Program output: -59                
Correct output: 1                   | Program output: 1                  
Correct output: -98                 | Program output: -86                
Correct output: -47                 | Program output: -39                
Correct output: -34                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -10                
Correct output: -15                 | Program output: -15                
Correct output: -46                 | Program output: -46                
Correct output: 17                  | Program output: 56false            
Correct output: -78                 | Program output: 20                 
Correct output: -92                 | Program output: 29                 
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 2                  
Correct output: -98                 | Program output: -98                
Correct output: -77                 | Program output: -24                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: -56                 | Program output: -53                
Correct output: -12                 | Program output: -12                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: 46                 
Correct output: -97                 | Program output: 16                 
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -8                  | Program output: -8                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_777} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_boolean_434} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 2, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 2, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_items})
Lexicase best program: (in4 integer_mult tagged_777 in1 integer_min integer_add print_integer exec_if (print_integer integer_gte integer_dup_times integer_lt) (boolean_rot exec_dup_times (integer_lt) boolean_rot tag_boolean_434 integer_empty) integer_swap integer_rot integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup exec_k (boolean_empty integer_sub exec_pop (boolean_pop boolean_and boolean_empty) integer_fromboolean boolean_flush exec_shove (boolean_rot)) (exec_yankdup exec_while (integer_div)) exec_rot (boolean_empty exec_y_when_autoconstructing (integer_div integer_sub boolean_xor integer_gt integer_dup_items)) () ())) ()))
Lexicase best errors: [0 0 1 1 0 0 0 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 76
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_777} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_boolean_434} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 2, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 2, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_items})
Zero cases best program: (in4 integer_mult tagged_777 in1 integer_min integer_add print_integer exec_if (print_integer integer_gte integer_dup_times integer_lt) (boolean_rot exec_dup_times (integer_lt) boolean_rot tag_boolean_434 integer_empty) integer_swap integer_rot integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup exec_k (boolean_empty integer_sub exec_pop (boolean_pop boolean_and boolean_empty) integer_fromboolean boolean_flush exec_shove (boolean_rot)) (exec_yankdup exec_while (integer_div)) exec_rot (boolean_empty exec_y_when_autoconstructing (integer_div integer_sub boolean_xor integer_gt integer_dup_items)) () ())) ()))
Zero cases best errors: [0 0 1 1 0 0 0 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 76
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (423 813 147 147 423 815 804 423 238 147)
Population mean number of elite cases: 4.38
Count of perfect (error zero) individuals by case: (423 813 147 147 423 815 804 423 238 147)
Population mean number of perfect (error zero) cases: 4.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_777} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 2, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 2, :instruction exec_k} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dup_items})
Best program: (in4 integer_mult tagged_777 in1 integer_min integer_add print_integer exec_if (boolean_swap integer_gte integer_dup_times exec_if (integer_lt) (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty exec_rot (integer_dup) (exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot exec_yankdup exec_empty integer_yankdup boolean_rot integer_div integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_fromboolean boolean_flush exec_shove (boolean_rot)) exec_yankdup exec_while (exec_k () () exec_rot (boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_if (boolean_swap print_boolean) (exec_empty boolean_xor exec_swap (integer_dup_items) ()))) () ()) () ())) ())) ()) ())
Errors: [0 0 1 1 0 0 0 0 1 1]
Total: 4
Mean: 0.4
Genome size: 66
Size: 97
Percent parens: 0.320
--- Population Statistics ---
Average total errors in population: 5.62
Median total errors in population: 4
Error averages by case: (0.577 0.187 0.853 0.853 0.577 0.185 0.196 0.577 0.762 0.853)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.817
Average program size in population (points): 82.254
Average percent parens in population: 0.271
Minimum age in population: 11.96875
Maximum age in population: 16.736328125
Average age in population: 15.319041015625
Median age in population: 15.2890625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 119
Genome diversity (% unique genomes):	 0.792
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 121
Syntactic diversity (% unique Push programs):	 0.789
Total error diversity:				 0.007
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.081
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 6703126
--- Timings ---
Current time: 1559314593994 milliseconds
Total Time:          33.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        20.2 seconds, 60.6%
Fitness Testing:      9.3 seconds, 28.0%
Report:               3.7 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 433
Test mean error for best: 0.43300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: 30                 
Correct output: 32                  | Program output: 65                 
Correct output: 24                  | Program output: 89                 
Correct output: -79                 | Program output: -20                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -1                 
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 43                  | Program output: 43                 
Correct output: 20                  | Program output: 40                 
Correct output: 5                   | Program output: 11                 
Correct output: 6                   | Program output: 6                  
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 13                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 39                 
Correct output: 2                   | Program output: 8                  
Correct output: 2                   | Program output: 29                 
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 36                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 48                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: 0                  
Correct output: -31                 | Program output: -31                
Correct output: -35                 | Program output: 48                 
Correct output: -49                 | Program output: 5                  
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: -7                 
Correct output: -93                 | Program output: -28                
Correct output: -81                 | Program output: -81                
Correct output: -56                 | Program output: -11                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -97                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -66                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -58                
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: 33                  | Program output: 60                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -86                
Correct output: 2                   | Program output: 21                 
Correct output: -13                 | Program output: -13                
Correct output: -90                 | Program output: -42                
Correct output: -87                 | Program output: -15                
Correct output: -51                 | Program output: -8                 
Correct output: -64                 | Program output: -55                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: 34                 
Correct output: -57                 | Program output: 9                  
Correct output: -76                 | Program output: 46                 
Correct output: -86                 | Program output: -59                
Correct output: 1                   | Program output: 1                  
Correct output: -98                 | Program output: -86                
Correct output: -47                 | Program output: -39                
Correct output: -34                 | Program output: -11                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -10                
Correct output: -15                 | Program output: -15                
Correct output: -46                 | Program output: -46                
Correct output: 17                  | Program output: 56                 
Correct output: -78                 | Program output: 20                 
Correct output: -92                 | Program output: 29                 
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: 2                  
Correct output: -98                 | Program output: -98                
Correct output: -77                 | Program output: -24                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: -56                 | Program output: -53                
Correct output: -12                 | Program output: -12                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: 46                 
Correct output: -97                 | Program output: 16                 
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -8                  | Program output: -8                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_777} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_boolean_434} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 2, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 2, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_items})
Lexicase best program: (in4 integer_mult tagged_777 in1 integer_min integer_add print_integer exec_if (print_integer integer_gte integer_dup_times integer_lt) (boolean_rot exec_dup_times (integer_lt) boolean_rot tag_boolean_434 integer_empty) integer_swap integer_rot integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2) exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup exec_k (boolean_empty integer_sub exec_pop (boolean_pop boolean_and boolean_empty) integer_fromboolean boolean_flush exec_shove (boolean_rot)) (exec_yankdup exec_while (integer_div)) exec_rot (boolean_empty exec_y_when_autoconstructing (integer_div integer_sub boolean_xor integer_gt integer_dup_items)) () ())) ())
Lexicase best errors: [0 0 1 1 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 76
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_777} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction tag_boolean_434} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 1, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 2, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 2, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_items})
Zero cases best program: (in4 integer_mult tagged_777 in1 integer_min integer_add print_integer exec_if (print_integer integer_gte integer_dup_times integer_lt) (boolean_rot exec_dup_times (integer_lt) boolean_rot tag_boolean_434 integer_empty) integer_swap integer_rot integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2) exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup exec_k (boolean_empty integer_sub exec_pop (boolean_pop boolean_and boolean_empty) integer_fromboolean boolean_flush exec_shove (boolean_rot)) (exec_yankdup exec_while (integer_div)) exec_rot (boolean_empty exec_y_when_autoconstructing (integer_div integer_sub boolean_xor integer_gt integer_dup_items)) () ())) ())
Zero cases best errors: [0 0 1 1 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 76
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (350 350 366 366 837 843 121 843 843 837)
Population mean number of elite cases: 5.76
Count of perfect (error zero) individuals by case: (350 350 366 366 837 843 121 843 843 837)
Population mean number of perfect (error zero) cases: 5.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in4} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_777} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction print_integer} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_shove} {:close 2, :instruction boolean_rot} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_while} {:close 2, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_swap} {:close 1, :instruction print_boolean} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dup_items})
Best program: (in4 integer_mult tagged_777 in1 integer_min integer_add print_integer exec_if (print_integer integer_gte integer_dup_times exec_if (integer_lt) (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_empty integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_fromboolean boolean_flush exec_shove (boolean_rot)) exec_yankdup exec_while (integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean exec_s (integer_fromboolean exec_do*count (boolean_eq integer_dup_items integer_max exec_y_when_autoconstructing (integer_div integer_sub integer_dup_times exec_if (boolean_swap print_boolean) (exec_empty boolean_xor integer_gt integer_dup_items)))) () ()) () ()))) ())
Errors: [0 0 1 1 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 68
Size: 93
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 4.244
Median total errors in population: 3
Error averages by case: (0.65 0.65 0.634 0.634 0.163 0.157 0.879 0.157 0.157 0.163)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.71
Average program size in population (points): 78.028
Average percent parens in population: 0.271
Minimum age in population: 13.53125
Maximum age in population: 18.5498046875
Average age in population: 16.734578125
Median age in population: 16.83447265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 35
Genome diversity (% unique genomes):	 0.826
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.82
Total error diversity:				 0.007
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.08
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 7269411
--- Timings ---
Current time: 1559314596791 milliseconds
Total Time:          36.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.0 seconds, 60.9%
Fitness Testing:      9.9 seconds, 27.5%
Report:               4.1 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 199
Test mean error for best: 0.19900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: -33                
Correct output: 32                  | Program output: 32                 
Correct output: 24                  | Program output: 24                 
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 27                 
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 43                  | Program output: 43                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 41                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 3                  
Correct output: 1                   | Program output: 84                 
Correct output: 36                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 18                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: -25                
Correct output: -31                 | Program output: 26                 
Correct output: -35                 | Program output: -35                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -24                
Correct output: -24                 | Program output: -24                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -81                
Correct output: -56                 | Program output: -56                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -83                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -15                
Correct output: -20                 | Program output: -13                
Correct output: -91                 | Program output: -16                
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: -60                
Correct output: -42                 | Program output: 4                  
Correct output: 33                  | Program output: 33                 
Correct output: -65                 | Program output: -56                
Correct output: -79                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: 2                   | Program output: 2                  
Correct output: -13                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -87                 | Program output: -87                
Correct output: -51                 | Program output: -51                
Correct output: -64                 | Program output: -64                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: -34                
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: 1                   | Program output: 1                  
Correct output: -98                 | Program output: -98                
Correct output: -47                 | Program output: -47                
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -27                
Correct output: -34                 | Program output: -34                
Correct output: -15                 | Program output: -15                
Correct output: -46                 | Program output: -46                
Correct output: 17                  | Program output: 17                 
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -76                
Correct output: -77                 | Program output: -77                
Correct output: -21                 | Program output: 53                 
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -37                
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: -12                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -8                  | Program output: 53                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_777} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction tagged_777} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 2, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items})
Lexicase best program: (in3 integer_mult tagged_777 in1 integer_min tagged_777 in2 integer_min integer_add exec_if (print_integer integer_gte integer_dup_times boolean_stackdepth integer_lt) (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_empty integer_yankdup boolean_rot boolean_empty integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_div integer_sub integer_dup_times exec_if (integer_dup_items) ()))) () ()) () ())))
Lexicase best errors: [1 0 1 0 0 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 79
Percent parens: 0.266
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_777} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction tagged_777} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 2, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items})
Zero cases best program: (in3 integer_mult tagged_777 in1 integer_min tagged_777 in2 integer_min integer_add exec_if (print_integer integer_gte integer_dup_times boolean_stackdepth integer_lt) (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_empty integer_yankdup boolean_rot boolean_empty integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_div integer_sub integer_dup_times exec_if (integer_dup_items) ()))) () ()) () ())))
Zero cases best errors: [1 0 1 0 0 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 79
Percent parens: 0.266
--- Lexicase Population Statistics ---
Count of elite individuals by case: (432 537 432 199 200 200 433 539 507 508)
Population mean number of elite cases: 3.99
Count of perfect (error zero) individuals by case: (432 537 432 199 200 200 433 539 507 508)
Population mean number of perfect (error zero) cases: 3.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_777} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction tagged_777} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 2, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items})
Best program: (in3 integer_mult tagged_777 in1 integer_min tagged_777 in2 integer_min integer_add exec_if (print_integer integer_gte integer_dup_times boolean_stackdepth integer_lt) (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_empty integer_yankdup boolean_rot boolean_empty integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_div integer_sub integer_dup_times exec_if (integer_dup_items) ()))) () ()) () ())))
Errors: [1 0 1 0 0 0 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 58
Size: 79
Percent parens: 0.266
--- Population Statistics ---
Average total errors in population: 6.013
Median total errors in population: 5
Error averages by case: (0.568 0.463 0.568 0.801 0.8 0.8 0.567 0.461 0.493 0.492)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.698
Average program size in population (points): 79.335
Average percent parens in population: 0.283
Minimum age in population: 14.53125
Maximum age in population: 20.111328125
Average age in population: 18.0323896484375
Median age in population: 18.003662109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 105
Genome diversity (% unique genomes):	 0.79
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 105
Syntactic diversity (% unique Push programs):	 0.785
Total error diversity:				 0.008
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.084
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 7868805
--- Timings ---
Current time: 1559314599655 milliseconds
Total Time:          39.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        23.8 seconds, 61.1%
Fitness Testing:     10.6 seconds, 27.2%
Report:               4.5 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 199
Test mean error for best: 0.19900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: -33                
Correct output: 32                  | Program output: 32                 
Correct output: 24                  | Program output: 24                 
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: -79                
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 0                  
Correct output: 3                   | Program output: 27                 
Correct output: 10                  | Program output: 10                 
Correct output: 21                  | Program output: 21                 
Correct output: 43                  | Program output: 43                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 50                 
Correct output: 30                  | Program output: 30                 
Correct output: 13                  | Program output: 41                 
Correct output: 21                  | Program output: 21                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 3                  
Correct output: 1                   | Program output: 84                 
Correct output: 36                  | Program output: 45                 
Correct output: 8                   | Program output: 8                  
Correct output: 41                  | Program output: 41                 
Correct output: 18                  | Program output: 18                 
Correct output: -25                 | Program output: -25                
Correct output: -25                 | Program output: -25                
Correct output: -31                 | Program output: 26                 
Correct output: -35                 | Program output: -35                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -24                
Correct output: -24                 | Program output: -24                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: -81                
Correct output: -56                 | Program output: -56                
Correct output: -57                 | Program output: -57                
Correct output: -97                 | Program output: -83                
Correct output: -58                 | Program output: -58                
Correct output: -66                 | Program output: -15                
Correct output: -20                 | Program output: -13                
Correct output: -91                 | Program output: -16                
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: -60                
Correct output: -42                 | Program output: 4                  
Correct output: 33                  | Program output: 33                 
Correct output: -65                 | Program output: -56                
Correct output: -79                 | Program output: -72                
Correct output: -86                 | Program output: -86                
Correct output: 2                   | Program output: 2                  
Correct output: -13                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -87                 | Program output: -87                
Correct output: -51                 | Program output: -51                
Correct output: -64                 | Program output: -64                
Correct output: -90                 | Program output: -90                
Correct output: -34                 | Program output: -34                
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: 1                   | Program output: 1                  
Correct output: -98                 | Program output: -98                
Correct output: -47                 | Program output: -47                
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -27                
Correct output: -34                 | Program output: -34                
Correct output: -15                 | Program output: -15                
Correct output: -46                 | Program output: -46                
Correct output: 17                  | Program output: 17                 
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -92                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -76                
Correct output: -77                 | Program output: -77                
Correct output: -21                 | Program output: 53                 
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -37                
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: -12                
Correct output: -75                 | Program output: -75                
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -71                
Correct output: -36                 | Program output: -36                
Correct output: -8                  | Program output: 53                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_777} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction tagged_777} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 2, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items})
Lexicase best program: (in3 integer_mult tagged_777 in1 integer_min tagged_777 in2 integer_min integer_add exec_if (print_integer integer_gte integer_dup_times boolean_stackdepth integer_lt) (integer_dup_times exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_empty integer_yankdup boolean_rot boolean_empty integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean integer_div integer_sub integer_dup_times exec_if (integer_dup_items) ()) () ())))
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 71
Percent parens: 0.225
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_777} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction tagged_777} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 2, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items})
Zero cases best program: (in3 integer_mult tagged_777 in1 integer_min tagged_777 in2 integer_min integer_add exec_if (print_integer integer_gte integer_dup_times boolean_stackdepth integer_lt) (integer_dup_times exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_empty integer_yankdup boolean_rot boolean_empty integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean integer_div integer_sub integer_dup_times exec_if (integer_dup_items) ()) () ())))
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 71
Percent parens: 0.225
--- Lexicase Population Statistics ---
Count of elite individuals by case: (453 456 483 817 454 811 454 468 812 811)
Population mean number of elite cases: 6.02
Count of perfect (error zero) individuals by case: (453 456 483 817 454 811 454 468 812 811)
Population mean number of perfect (error zero) cases: 6.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_777} {:close 0, :instruction in1} {:close 0, :instruction integer_min} {:close 0, :instruction tagged_777} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 2, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items})
Best program: (in3 integer_mult tagged_777 in1 integer_min tagged_777 in2 integer_min integer_add exec_if (print_integer integer_gte integer_dup_times boolean_stackdepth integer_lt) (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_empty integer_yankdup boolean_rot boolean_empty integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_div integer_sub integer_dup_times exec_if (integer_dup_items) ()))) () ()) () ())))
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 58
Size: 79
Percent parens: 0.266
--- Population Statistics ---
Average total errors in population: 3.981
Median total errors in population: 4
Error averages by case: (0.547 0.544 0.517 0.183 0.546 0.189 0.546 0.532 0.188 0.189)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.035
Average program size in population (points): 75.888
Average percent parens in population: 0.288
Minimum age in population: 16.8955078125
Maximum age in population: 21.177001953125
Average age in population: 19.44902978515625
Median age in population: 19.6533203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 175
Genome diversity (% unique genomes):	 0.647
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 175
Syntactic diversity (% unique Push programs):	 0.646
Total error diversity:				 0.009
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 8400925
--- Timings ---
Current time: 1559314602452 milliseconds
Total Time:          41.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.7 seconds, 61.5%
Fitness Testing:     11.2 seconds, 26.7%
Report:               4.8 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 204
Test mean error for best: 0.20400
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 1
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 1
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 1
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 1
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 1
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 1
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 1
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: -33                
Correct output: 32                  | Program output: 32                 
Correct output: 24                  | Program output: 24                 
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 85                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 14                 
Correct output: 21                  | Program output: 41                 
Correct output: 43                  | Program output: 50                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: 30                  | Program output: 36                 
Correct output: 13                  | Program output: 13                 
Correct output: 21                  | Program output: 51                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 36                 
Correct output: 8                   | Program output: 10                 
Correct output: 41                  | Program output: 45                 
Correct output: 18                  | Program output: 18                 
Correct output: -25                 | Program output: 1                  
Correct output: -25                 | Program output: -25                
Correct output: -31                 | Program output: -31                
Correct output: -35                 | Program output: -35                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: -24                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: 24                 
Correct output: -56                 | Program output: -56                
Correct output: -57                 | Program output: -55                
Correct output: -97                 | Program output: -97                
Correct output: -58                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: 33                  | Program output: 33                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -30                
Correct output: 2                   | Program output: 2                  
Correct output: -13                 | Program output: -13                
Correct output: -90                 | Program output: -90                
Correct output: -87                 | Program output: -87                
Correct output: -51                 | Program output: -51                
Correct output: -64                 | Program output: -64                
Correct output: -90                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: 1                   | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -47                 | Program output: -47                
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -34                
Correct output: -15                 | Program output: 36                 
Correct output: -46                 | Program output: -22                
Correct output: 17                  | Program output: 17                 
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -29                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -98                
Correct output: -77                 | Program output: -77                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -86                
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: 2                  
Correct output: -75                 | Program output: -65                
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -44                
Correct output: -36                 | Program output: -13                
Correct output: -8                  | Program output: -8                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_777} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction tagged_777} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 2, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items})
Lexicase best program: (in3 integer_mult tagged_777 in4 integer_min tagged_777 in2 integer_min integer_add exec_if (print_integer integer_gte integer_dup_times boolean_stackdepth integer_lt) (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_empty integer_yankdup boolean_rot boolean_empty integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_div integer_sub integer_dup_times exec_if (integer_dup_items) ()))) () ()) () ())))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 79
Percent parens: 0.266
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_777} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction tagged_777} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 2, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items})
Zero cases best program: (in3 integer_mult tagged_777 in4 integer_min tagged_777 in2 integer_min integer_add exec_if (print_integer integer_gte integer_dup_times boolean_stackdepth integer_lt) (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_empty integer_yankdup boolean_rot boolean_empty integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_div integer_sub integer_dup_times exec_if (integer_dup_items) ()))) () ()) () ())))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 79
Percent parens: 0.266
--- Lexicase Population Statistics ---
Count of elite individuals by case: (790 344 730 437 730 437 805 437 730 730)
Population mean number of elite cases: 6.17
Count of perfect (error zero) individuals by case: (790 344 730 437 730 437 805 437 730 730)
Population mean number of perfect (error zero) cases: 6.17
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_mult} {:close 0, :instruction tagged_777} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction tagged_777} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction exec_if} {:close 0, :instruction print_integer} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_lt} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup_times} {:close 1, :instruction integer_empty} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_rot} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_rot} {:close 1, :instruction integer_dup} {:close 0, :instruction integer_min} {:close 1, :instruction integer_fromboolean} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in4} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction in2} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction in2} {:close 1, :instruction boolean_empty} {:close 2, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_s} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction integer_div} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_if} {:close 0, :instruction integer_dup_items})
Best program: (in3 integer_mult tagged_777 in4 integer_min tagged_777 in2 integer_min integer_add exec_if (print_integer integer_gte integer_dup_times boolean_stackdepth integer_lt) (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_empty integer_yankdup boolean_rot boolean_empty integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_div integer_sub integer_dup_times exec_if (integer_dup_items) ()))) () ()) () ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 58
Size: 79
Percent parens: 0.266
--- Population Statistics ---
Average total errors in population: 3.83
Median total errors in population: 3
Error averages by case: (0.21 0.656 0.27 0.563 0.27 0.563 0.195 0.563 0.27 0.27)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.694
Average program size in population (points): 75.88
Average percent parens in population: 0.277
Minimum age in population: 18.77001953125
Maximum age in population: 22.5152587890625
Average age in population: 21.01899792480469
Median age in population: 21.0587158203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 125
Genome diversity (% unique genomes):	 0.71
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 126
Syntactic diversity (% unique Push programs):	 0.706
Total error diversity:				 0.01
Error (vector) diversity:			 0.015
Behavioral diversity:				 0.088
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 8845518
--- Timings ---
Current time: 1559314605259 milliseconds
Total Time:          44.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.6 seconds, 62.0%
Fitness Testing:     11.7 seconds, 26.2%
Report:               5.2 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 14
Successful program: (in3 integer_mult tagged_777 in4 integer_min tagged_777 in2 integer_min integer_add exec_if (print_integer integer_gte integer_dup_times boolean_stackdepth integer_lt) (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_empty integer_yankdup boolean_rot boolean_empty integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_div integer_sub integer_dup_times exec_if (integer_dup_items) ()))) () ()) () ())))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 79


Auto-simplifying with starting size: 79
step: 0
program: (in3 integer_mult tagged_777 in4 integer_min tagged_777 in2 integer_min integer_add exec_if (print_integer integer_gte integer_dup_times boolean_stackdepth integer_lt) (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_empty integer_yankdup boolean_rot boolean_empty integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_div integer_sub integer_dup_times exec_if (integer_dup_items) ()))) () ()) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

step: 500
program: (in3 integer_mult tagged_777 in4 integer_min tagged_777 in2 integer_min integer_add exec_if (print_integer integer_gte integer_dup_times boolean_stackdepth integer_lt) (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_empty integer_yankdup boolean_rot boolean_empty integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_div integer_sub integer_dup_times exec_if (integer_dup_items) ()))) () ()) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

step: 1000
program: (in3 integer_mult tagged_777 in4 integer_min tagged_777 in2 integer_min integer_add exec_if (print_integer integer_gte integer_dup_times boolean_stackdepth integer_lt) (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_empty integer_yankdup boolean_rot boolean_empty integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_div integer_sub integer_dup_times exec_if (integer_dup_items) ()))) () ()) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

step: 1500
program: (in3 integer_mult tagged_777 in4 integer_min tagged_777 in2 integer_min integer_add exec_if (print_integer integer_gte integer_dup_times boolean_stackdepth integer_lt) (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_empty integer_yankdup boolean_rot boolean_empty integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_div integer_sub integer_dup_times exec_if (integer_dup_items) ()))) () ()) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

step: 2000
program: (in3 integer_mult tagged_777 in4 integer_min tagged_777 in2 integer_min integer_add exec_if (print_integer integer_gte integer_dup_times boolean_stackdepth integer_lt) (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_empty integer_yankdup boolean_rot boolean_empty integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_div integer_sub integer_dup_times exec_if (integer_dup_items) ()))) () ()) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

step: 2500
program: (in3 integer_mult tagged_777 in4 integer_min tagged_777 in2 integer_min integer_add exec_if (print_integer integer_gte integer_dup_times boolean_stackdepth integer_lt) (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_empty integer_yankdup boolean_rot boolean_empty integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_div integer_sub integer_dup_times exec_if (integer_dup_items) ()))) () ()) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

step: 3000
program: (in3 integer_mult tagged_777 in4 integer_min tagged_777 in2 integer_min integer_add exec_if (print_integer integer_gte integer_dup_times boolean_stackdepth integer_lt) (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_empty integer_yankdup boolean_rot boolean_empty integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_div integer_sub integer_dup_times exec_if (integer_dup_items) ()))) () ()) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

step: 3500
program: (in3 integer_mult tagged_777 in4 integer_min tagged_777 in2 integer_min integer_add exec_if (print_integer integer_gte integer_dup_times boolean_stackdepth integer_lt) (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_empty integer_yankdup boolean_rot boolean_empty integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_div integer_sub integer_dup_times exec_if (integer_dup_items) ()))) () ()) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

step: 4000
program: (in3 integer_mult tagged_777 in4 integer_min tagged_777 in2 integer_min integer_add exec_if (print_integer integer_gte integer_dup_times boolean_stackdepth integer_lt) (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_empty integer_yankdup boolean_rot boolean_empty integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_div integer_sub integer_dup_times exec_if (integer_dup_items) ()))) () ()) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

step: 4500
program: (in3 integer_mult tagged_777 in4 integer_min tagged_777 in2 integer_min integer_add exec_if (print_integer integer_gte integer_dup_times boolean_stackdepth integer_lt) (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_empty integer_yankdup boolean_rot boolean_empty integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_div integer_sub integer_dup_times exec_if (integer_dup_items) ()))) () ()) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

step: 5000
program: (in3 integer_mult tagged_777 in4 integer_min tagged_777 in2 integer_min integer_add exec_if (print_integer integer_gte integer_dup_times boolean_stackdepth integer_lt) (boolean_rot exec_dup_times (integer_empty) integer_swap integer_rot) integer_empty exec_rot (integer_dup) (integer_min integer_fromboolean) (boolean_dup_items in4 in2 exec_if (in2 exec_y_when_autoconstructing (integer_dup_times exec_yankdup exec_empty integer_yankdup boolean_rot boolean_empty integer_yankdup boolean_rot boolean_empty integer_sub exec_pop (boolean_pop in2 boolean_empty) integer_div)) (exec_rot (boolean_empty boolean_dup print_boolean exec_s (exec_y_when_autoconstructing (exec_y_when_autoconstructing (integer_div integer_sub integer_dup_times exec_if (integer_dup_items) ()))) () ()) () ())))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 79

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 204
Test mean error for best: 0.20400
Test Case    0 | Error: 0
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 1
Test Case    9 | Error: 1
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 1
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 0
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 0
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 0
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 1
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 1
Test Case   47 | Error: 0
Test Case   48 | Error: 0
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 1
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 0
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 1
Test Case   63 | Error: 0
Test Case   64 | Error: 0
Test Case   65 | Error: 0
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 0
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 0
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 0
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 1
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 0
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 0
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 0
Test Case  201 | Error: 0
Test Case  202 | Error: 0
Test Case  203 | Error: 0
Test Case  204 | Error: 0
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 1
Test Case  209 | Error: 0
Test Case  210 | Error: 1
Test Case  211 | Error: 0
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 0
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 0
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 0
Test Case  231 | Error: 1
Test Case  232 | Error: 0
Test Case  233 | Error: 0
Test Case  234 | Error: 0
Test Case  235 | Error: 0
Test Case  236 | Error: 0
Test Case  237 | Error: 0
Test Case  238 | Error: 0
Test Case  239 | Error: 1
Test Case  240 | Error: 1
Test Case  241 | Error: 0
Test Case  242 | Error: 0
Test Case  243 | Error: 0
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 1
Test Case  250 | Error: 0
Test Case  251 | Error: 1
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 0
Test Case  256 | Error: 1
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 1
Test Case  270 | Error: 0
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 0
Test Case  275 | Error: 0
Test Case  276 | Error: 0
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 0
Test Case  280 | Error: 0
Test Case  281 | Error: 0
Test Case  282 | Error: 0
Test Case  283 | Error: 0
Test Case  284 | Error: 0
Test Case  285 | Error: 1
Test Case  286 | Error: 1
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 0
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 1
Test Case  298 | Error: 0
Test Case  299 | Error: 0
Test Case  300 | Error: 0
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 0
Test Case  308 | Error: 0
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 0
Test Case  314 | Error: 0
Test Case  315 | Error: 0
Test Case  316 | Error: 0
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 1
Test Case  320 | Error: 1
Test Case  321 | Error: 0
Test Case  322 | Error: 1
Test Case  323 | Error: 0
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 0
Test Case  329 | Error: 1
Test Case  330 | Error: 0
Test Case  331 | Error: 0
Test Case  332 | Error: 0
Test Case  333 | Error: 0
Test Case  334 | Error: 1
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 0
Test Case  339 | Error: 0
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 0
Test Case  345 | Error: 0
Test Case  346 | Error: 1
Test Case  347 | Error: 1
Test Case  348 | Error: 0
Test Case  349 | Error: 0
Test Case  350 | Error: 1
Test Case  351 | Error: 1
Test Case  352 | Error: 1
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 0
Test Case  356 | Error: 1
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 0
Test Case  361 | Error: 0
Test Case  362 | Error: 0
Test Case  363 | Error: 0
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 1
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 0
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 0
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 1
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 0
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 0
Test Case  386 | Error: 0
Test Case  387 | Error: 1
Test Case  388 | Error: 0
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 1
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 0
Test Case  395 | Error: 0
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 0
Test Case  399 | Error: 0
Test Case  400 | Error: 1
Test Case  401 | Error: 0
Test Case  402 | Error: 1
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 1
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 1
Test Case  409 | Error: 0
Test Case  410 | Error: 0
Test Case  411 | Error: 0
Test Case  412 | Error: 0
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 0
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 1
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 0
Test Case  426 | Error: 1
Test Case  427 | Error: 0
Test Case  428 | Error: 1
Test Case  429 | Error: 0
Test Case  430 | Error: 0
Test Case  431 | Error: 1
Test Case  432 | Error: 0
Test Case  433 | Error: 1
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 0
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 0
Test Case  441 | Error: 0
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 1
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 0
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 1
Test Case  455 | Error: 1
Test Case  456 | Error: 0
Test Case  457 | Error: 0
Test Case  458 | Error: 1
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 1
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 1
Test Case  474 | Error: 1
Test Case  475 | Error: 0
Test Case  476 | Error: 1
Test Case  477 | Error: 1
Test Case  478 | Error: 0
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 1
Test Case  482 | Error: 0
Test Case  483 | Error: 0
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 0
Test Case  487 | Error: 0
Test Case  488 | Error: 0
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 0
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 0
Test Case  495 | Error: 0
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 0
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 0
Test Case  509 | Error: 0
Test Case  510 | Error: 1
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 0
Test Case  516 | Error: 0
Test Case  517 | Error: 0
Test Case  518 | Error: 0
Test Case  519 | Error: 0
Test Case  520 | Error: 1
Test Case  521 | Error: 1
Test Case  522 | Error: 0
Test Case  523 | Error: 0
Test Case  524 | Error: 0
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 1
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 0
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 0
Test Case  537 | Error: 1
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 0
Test Case  541 | Error: 1
Test Case  542 | Error: 0
Test Case  543 | Error: 1
Test Case  544 | Error: 1
Test Case  545 | Error: 1
Test Case  546 | Error: 0
Test Case  547 | Error: 0
Test Case  548 | Error: 1
Test Case  549 | Error: 0
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 0
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 0
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 0
Test Case  564 | Error: 1
Test Case  565 | Error: 1
Test Case  566 | Error: 0
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 0
Test Case  571 | Error: 1
Test Case  572 | Error: 1
Test Case  573 | Error: 1
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 1
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 0
Test Case  586 | Error: 0
Test Case  587 | Error: 0
Test Case  588 | Error: 0
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 0
Test Case  592 | Error: 1
Test Case  593 | Error: 1
Test Case  594 | Error: 0
Test Case  595 | Error: 0
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 0
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 1
Test Case  605 | Error: 0
Test Case  606 | Error: 0
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 0
Test Case  610 | Error: 1
Test Case  611 | Error: 0
Test Case  612 | Error: 0
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 1
Test Case  616 | Error: 1
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 1
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 0
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 0
Test Case  629 | Error: 1
Test Case  630 | Error: 0
Test Case  631 | Error: 0
Test Case  632 | Error: 1
Test Case  633 | Error: 0
Test Case  634 | Error: 1
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 0
Test Case  638 | Error: 0
Test Case  639 | Error: 1
Test Case  640 | Error: 1
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 0
Test Case  645 | Error: 0
Test Case  646 | Error: 1
Test Case  647 | Error: 0
Test Case  648 | Error: 0
Test Case  649 | Error: 0
Test Case  650 | Error: 0
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 0
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 0
Test Case  658 | Error: 1
Test Case  659 | Error: 1
Test Case  660 | Error: 0
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 0
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 1
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 0
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 0
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 1
Test Case  687 | Error: 1
Test Case  688 | Error: 1
Test Case  689 | Error: 1
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 0
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 1
Test Case  698 | Error: 0
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 0
Test Case  703 | Error: 0
Test Case  704 | Error: 1
Test Case  705 | Error: 1
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 0
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 1
Test Case  713 | Error: 1
Test Case  714 | Error: 1
Test Case  715 | Error: 0
Test Case  716 | Error: 0
Test Case  717 | Error: 1
Test Case  718 | Error: 1
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 0
Test Case  723 | Error: 0
Test Case  724 | Error: 1
Test Case  725 | Error: 0
Test Case  726 | Error: 0
Test Case  727 | Error: 0
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 0
Test Case  732 | Error: 0
Test Case  733 | Error: 0
Test Case  734 | Error: 1
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 0
Test Case  739 | Error: 0
Test Case  740 | Error: 0
Test Case  741 | Error: 0
Test Case  742 | Error: 1
Test Case  743 | Error: 0
Test Case  744 | Error: 1
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 0
Test Case  750 | Error: 0
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 1
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 1
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 0
Test Case  760 | Error: 1
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 1
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 0
Test Case  769 | Error: 0
Test Case  770 | Error: 0
Test Case  771 | Error: 0
Test Case  772 | Error: 1
Test Case  773 | Error: 0
Test Case  774 | Error: 1
Test Case  775 | Error: 1
Test Case  776 | Error: 1
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 1
Test Case  780 | Error: 0
Test Case  781 | Error: 0
Test Case  782 | Error: 0
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 0
Test Case  786 | Error: 0
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 0
Test Case  790 | Error: 0
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 1
Test Case  796 | Error: 1
Test Case  797 | Error: 1
Test Case  798 | Error: 0
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 0
Test Case  804 | Error: 0
Test Case  805 | Error: 0
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 0
Test Case  809 | Error: 1
Test Case  810 | Error: 0
Test Case  811 | Error: 0
Test Case  812 | Error: 0
Test Case  813 | Error: 0
Test Case  814 | Error: 1
Test Case  815 | Error: 0
Test Case  816 | Error: 0
Test Case  817 | Error: 1
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 0
Test Case  822 | Error: 0
Test Case  823 | Error: 0
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 0
Test Case  827 | Error: 0
Test Case  828 | Error: 1
Test Case  829 | Error: 0
Test Case  830 | Error: 0
Test Case  831 | Error: 0
Test Case  832 | Error: 0
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 0
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 0
Test Case  847 | Error: 0
Test Case  848 | Error: 0
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 0
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 0
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 0
Test Case  864 | Error: 1
Test Case  865 | Error: 0
Test Case  866 | Error: 0
Test Case  867 | Error: 0
Test Case  868 | Error: 0
Test Case  869 | Error: 0
Test Case  870 | Error: 0
Test Case  871 | Error: 0
Test Case  872 | Error: 0
Test Case  873 | Error: 0
Test Case  874 | Error: 0
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 0
Test Case  880 | Error: 0
Test Case  881 | Error: 1
Test Case  882 | Error: 0
Test Case  883 | Error: 1
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 0
Test Case  887 | Error: 1
Test Case  888 | Error: 0
Test Case  889 | Error: 0
Test Case  890 | Error: 0
Test Case  891 | Error: 0
Test Case  892 | Error: 1
Test Case  893 | Error: 0
Test Case  894 | Error: 1
Test Case  895 | Error: 0
Test Case  896 | Error: 0
Test Case  897 | Error: 1
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 1
Test Case  902 | Error: 0
Test Case  903 | Error: 1
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 1
Test Case  909 | Error: 0
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 0
Test Case  913 | Error: 0
Test Case  914 | Error: 0
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 1
Test Case  918 | Error: 0
Test Case  919 | Error: 1
Test Case  920 | Error: 0
Test Case  921 | Error: 0
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 1
Test Case  925 | Error: 0
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 0
Test Case  930 | Error: 1
Test Case  931 | Error: 1
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 1
Test Case  935 | Error: 0
Test Case  936 | Error: 0
Test Case  937 | Error: 1
Test Case  938 | Error: 1
Test Case  939 | Error: 1
Test Case  940 | Error: 0
Test Case  941 | Error: 1
Test Case  942 | Error: 0
Test Case  943 | Error: 0
Test Case  944 | Error: 1
Test Case  945 | Error: 0
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 0
Test Case  951 | Error: 0
Test Case  952 | Error: 0
Test Case  953 | Error: 0
Test Case  954 | Error: 0
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 1
Test Case  960 | Error: 0
Test Case  961 | Error: 0
Test Case  962 | Error: 0
Test Case  963 | Error: 1
Test Case  964 | Error: 0
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 1
Test Case  968 | Error: 0
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 0
Test Case  974 | Error: 0
Test Case  975 | Error: 1
Test Case  976 | Error: 0
Test Case  977 | Error: 0
Test Case  978 | Error: 0
Test Case  979 | Error: 0
Test Case  980 | Error: 0
Test Case  981 | Error: 0
Test Case  982 | Error: 1
Test Case  983 | Error: 0
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 1
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 1
Test Case  995 | Error: 0
Test Case  996 | Error: 1
Test Case  997 | Error: 0
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: 48                  | Program output: 48                 
Correct output: -33                 | Program output: -33                
Correct output: 32                  | Program output: 32                 
Correct output: 24                  | Program output: 24                 
Correct output: -79                 | Program output: -79                
Correct output: -83                 | Program output: -83                
Correct output: -54                 | Program output: -54                
Correct output: -20                 | Program output: -20                
Correct output: -79                 | Program output: 99                 
Correct output: -85                 | Program output: -85                
Correct output: -66                 | Program output: -66                
Correct output: 64                  | Program output: 64                 
Correct output: -21                 | Program output: -21                
Correct output: 13                  | Program output: 13                 
Correct output: 35                  | Program output: 35                 
Correct output: 0                   | Program output: 85                 
Correct output: 3                   | Program output: 3                  
Correct output: 10                  | Program output: 14                 
Correct output: 21                  | Program output: 41                 
Correct output: 43                  | Program output: 50                 
Correct output: 20                  | Program output: 20                 
Correct output: 5                   | Program output: 5                  
Correct output: 6                   | Program output: 6                  
Correct output: 30                  | Program output: 36                 
Correct output: 13                  | Program output: 13                 
Correct output: 21                  | Program output: 51                 
Correct output: 19                  | Program output: 19                 
Correct output: 2                   | Program output: 2                  
Correct output: 2                   | Program output: 2                  
Correct output: 1                   | Program output: 1                  
Correct output: 1                   | Program output: 1                  
Correct output: 36                  | Program output: 36                 
Correct output: 8                   | Program output: 10                 
Correct output: 41                  | Program output: 45                 
Correct output: 18                  | Program output: 18                 
Correct output: -25                 | Program output: 1                  
Correct output: -25                 | Program output: -25                
Correct output: -31                 | Program output: -31                
Correct output: -35                 | Program output: -35                
Correct output: -49                 | Program output: -49                
Correct output: -85                 | Program output: -85                
Correct output: -24                 | Program output: -24                
Correct output: -93                 | Program output: -93                
Correct output: -81                 | Program output: 24                 
Correct output: -56                 | Program output: -56                
Correct output: -57                 | Program output: -55                
Correct output: -97                 | Program output: -97                
Correct output: -58                 | Program output: -43                
Correct output: -66                 | Program output: -66                
Correct output: -20                 | Program output: -20                
Correct output: -91                 | Program output: -91                
Correct output: -80                 | Program output: -80                
Correct output: -83                 | Program output: -83                
Correct output: -42                 | Program output: -42                
Correct output: 33                  | Program output: 33                 
Correct output: -65                 | Program output: -65                
Correct output: -79                 | Program output: -79                
Correct output: -86                 | Program output: -30                
Correct output: 2                   | Program output: 2                  
Correct output: -13                 | Program output: -13                
Correct output: -90                 | Program output: -90                
Correct output: -87                 | Program output: -87                
Correct output: -51                 | Program output: -51                
Correct output: -64                 | Program output: -64                
Correct output: -90                 | Program output: -75                
Correct output: -34                 | Program output: -34                
Correct output: -57                 | Program output: -57                
Correct output: -76                 | Program output: -76                
Correct output: -86                 | Program output: -86                
Correct output: 1                   | Program output: 25                 
Correct output: -98                 | Program output: -98                
Correct output: -47                 | Program output: -47                
Correct output: -34                 | Program output: -34                
Correct output: -80                 | Program output: -80                
Correct output: -34                 | Program output: -34                
Correct output: -15                 | Program output: 36                 
Correct output: -46                 | Program output: -22                
Correct output: 17                  | Program output: 17                 
Correct output: -78                 | Program output: -78                
Correct output: -92                 | Program output: -92                
Correct output: -92                 | Program output: -29                
Correct output: -68                 | Program output: -68                
Correct output: -98                 | Program output: -98                
Correct output: -77                 | Program output: -77                
Correct output: -21                 | Program output: -21                
Correct output: -81                 | Program output: -81                
Correct output: -86                 | Program output: -86                
Correct output: -56                 | Program output: -56                
Correct output: -12                 | Program output: 2                  
Correct output: -75                 | Program output: -65                
Correct output: -68                 | Program output: -68                
Correct output: -97                 | Program output: -97                
Correct output: -71                 | Program output: -44                
Correct output: -36                 | Program output: -13                
Correct output: -8                  | Program output: -8                 
;;******************************
