Command line args: clojush.problems.software.smallest :parent-selection :lexicase :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
epigenetic-markers = [:close]
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :lexicase
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
report-simplifications = 0
sub-training-cases = ()
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-90 91 91 91] -90] [[86 86 86 44] 44] [[34 -68 -68 -68] -68] [[-25 -46 -25 -25] -46] [[62 62 62 -54] -54] [[26 5 26 26] 5] [[-8 -13 -8 -8] -13] [[57 57 57 33] 33] [[31 -10 31 31] -10] [[74 -95 -95 -95] -95] [(47 47 47 47) 47] [(26 26 26 26) 26] [(50 50 50 50) 50] [(35 35 35 35) 35] [(-43 -43 -43 -43) -43] [(87 64 23 83) 23] [(29 0 6 83) 0] [(90 73 42 78) 42] [(23 88 50 60) 23] [(31 87 31 97) 31] [(20 48 30 47) 20] [(86 9 67 26) 9] [(33 59 16 78) 16] [(15 57 75 22) 15] [(43 3 2 73) 2] [(46 29 23 95) 23] [(10 16 37 16) 10] [(52 30 1 91) 1] [(34 78 97 97) 34] [(20 41 60 82) 20] [(70 15 9 100) 9] [(42 72 3 78) 3] [(39 28 76 81) 28] [(14 18 42 62) 14] [(46 51 50 47) 46] [(-96 82 50 36) -96] [(-61 -53 93 -25) -61] [(-19 86 -78 -71) -78] [(-19 0 55 -91) -91] [(55 -95 21 34) -95] [(28 -73 -84 -65) -84] [(-51 -71 -66 -50) -71] [(-74 98 40 12) -74] [(-60 10 18 42) -60] [(100 -12 20 -55) -55] [(-42 97 14 -41) -42] [(47 -75 -76 47) -76] [(27 -95 -86 -93) -95] [(87 0 85 -96) -96] [(-43 22 35 -38) -43] [(-45 97 20 98) -45] [(-56 10 16 81) -56] [(-75 -1 30 -46) -75] [(-87 -55 27 -23) -87] [(-81 44 55 41) -81] [(-82 -90 -20 79) -90] [(-64 -19 61 -33) -64] [(-41 -75 -43 -62) -75] [(35 -3 -97 -46) -97] [(59 -47 -41 -54) -54] [(56 3 -95 -10) -95] [(35 -21 -97 52) -97] [(-52 73 -85 -40) -85] [(-81 61 51 77) -81] [(10 -19 65 -19) -19] [(95 24 -58 82) -58] [(29 -46 67 -42) -46] [(-78 96 -15 -42) -78] [(-93 59 56 25) -93] [(18 -8 -35 -62) -62] [(-90 -1 -47 -82) -90] [(85 -70 74 100) -70] [(-9 61 -28 32) -28] [(-20 -82 15 -25) -82] [(74 -5 17 19) -5] [(-45 87 6 68) -45] [(83 -11 -23 -20) -23] [(92 92 -61 -30) -61] [(-26 23 -55 79) -55] [(-4 33 -95 63) -95] [(-82 88 94 -6) -82] [(-65 4 57 7) -65] [(-36 10 23 29) -36] [(60 -4 -53 41) -53] [(79 63 -34 72) -34] [(97 54 -17 86) -17] [(-82 -70 47 75) -82] [(-49 -16 90 -12) -49] [(8 -36 71 -54) -54] [(78 -71 76 -54) -71] [(18 -15 3 36) -15] [(44 55 28 -73) -73] [(-22 38 13 -83) -83] [(13 80 62 -63) -63] [(-53 -87 -9 -33) -87])
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [(0 0 0 0) 0]
Train Case:   1 | Input/Output: [(-44 -44 -7 -13) -44]
Train Case:   2 | Input/Output: [(0 4 -99 -33) -99]
Train Case:   3 | Input/Output: [(-22 -22 -22 -22) -22]
Train Case:   4 | Input/Output: [(99 100 99 100) 99]
Train Case:   5 | Input/Output: [[-90 91 91 91] -90]
Train Case:   6 | Input/Output: [[86 86 86 44] 44]
Train Case:   7 | Input/Output: [[34 -68 -68 -68] -68]
Train Case:   8 | Input/Output: [[-25 -46 -25 -25] -46]
Train Case:   9 | Input/Output: [[62 62 62 -54] -54]
Train Case:  10 | Input/Output: [[26 5 26 26] 5]
Train Case:  11 | Input/Output: [[-8 -13 -8 -8] -13]
Train Case:  12 | Input/Output: [[57 57 57 33] 33]
Train Case:  13 | Input/Output: [[31 -10 31 31] -10]
Train Case:  14 | Input/Output: [[74 -95 -95 -95] -95]
Train Case:  15 | Input/Output: [(47 47 47 47) 47]
Train Case:  16 | Input/Output: [(26 26 26 26) 26]
Train Case:  17 | Input/Output: [(50 50 50 50) 50]
Train Case:  18 | Input/Output: [(35 35 35 35) 35]
Train Case:  19 | Input/Output: [(-43 -43 -43 -43) -43]
Train Case:  20 | Input/Output: [(87 64 23 83) 23]
Train Case:  21 | Input/Output: [(29 0 6 83) 0]
Train Case:  22 | Input/Output: [(90 73 42 78) 42]
Train Case:  23 | Input/Output: [(23 88 50 60) 23]
Train Case:  24 | Input/Output: [(31 87 31 97) 31]
Train Case:  25 | Input/Output: [(20 48 30 47) 20]
Train Case:  26 | Input/Output: [(86 9 67 26) 9]
Train Case:  27 | Input/Output: [(33 59 16 78) 16]
Train Case:  28 | Input/Output: [(15 57 75 22) 15]
Train Case:  29 | Input/Output: [(43 3 2 73) 2]
Train Case:  30 | Input/Output: [(46 29 23 95) 23]
Train Case:  31 | Input/Output: [(10 16 37 16) 10]
Train Case:  32 | Input/Output: [(52 30 1 91) 1]
Train Case:  33 | Input/Output: [(34 78 97 97) 34]
Train Case:  34 | Input/Output: [(20 41 60 82) 20]
Train Case:  35 | Input/Output: [(70 15 9 100) 9]
Train Case:  36 | Input/Output: [(42 72 3 78) 3]
Train Case:  37 | Input/Output: [(39 28 76 81) 28]
Train Case:  38 | Input/Output: [(14 18 42 62) 14]
Train Case:  39 | Input/Output: [(46 51 50 47) 46]
Train Case:  40 | Input/Output: [(-96 82 50 36) -96]
Train Case:  41 | Input/Output: [(-61 -53 93 -25) -61]
Train Case:  42 | Input/Output: [(-19 86 -78 -71) -78]
Train Case:  43 | Input/Output: [(-19 0 55 -91) -91]
Train Case:  44 | Input/Output: [(55 -95 21 34) -95]
Train Case:  45 | Input/Output: [(28 -73 -84 -65) -84]
Train Case:  46 | Input/Output: [(-51 -71 -66 -50) -71]
Train Case:  47 | Input/Output: [(-74 98 40 12) -74]
Train Case:  48 | Input/Output: [(-60 10 18 42) -60]
Train Case:  49 | Input/Output: [(100 -12 20 -55) -55]
Train Case:  50 | Input/Output: [(-42 97 14 -41) -42]
Train Case:  51 | Input/Output: [(47 -75 -76 47) -76]
Train Case:  52 | Input/Output: [(27 -95 -86 -93) -95]
Train Case:  53 | Input/Output: [(87 0 85 -96) -96]
Train Case:  54 | Input/Output: [(-43 22 35 -38) -43]
Train Case:  55 | Input/Output: [(-45 97 20 98) -45]
Train Case:  56 | Input/Output: [(-56 10 16 81) -56]
Train Case:  57 | Input/Output: [(-75 -1 30 -46) -75]
Train Case:  58 | Input/Output: [(-87 -55 27 -23) -87]
Train Case:  59 | Input/Output: [(-81 44 55 41) -81]
Train Case:  60 | Input/Output: [(-82 -90 -20 79) -90]
Train Case:  61 | Input/Output: [(-64 -19 61 -33) -64]
Train Case:  62 | Input/Output: [(-41 -75 -43 -62) -75]
Train Case:  63 | Input/Output: [(35 -3 -97 -46) -97]
Train Case:  64 | Input/Output: [(59 -47 -41 -54) -54]
Train Case:  65 | Input/Output: [(56 3 -95 -10) -95]
Train Case:  66 | Input/Output: [(35 -21 -97 52) -97]
Train Case:  67 | Input/Output: [(-52 73 -85 -40) -85]
Train Case:  68 | Input/Output: [(-81 61 51 77) -81]
Train Case:  69 | Input/Output: [(10 -19 65 -19) -19]
Train Case:  70 | Input/Output: [(95 24 -58 82) -58]
Train Case:  71 | Input/Output: [(29 -46 67 -42) -46]
Train Case:  72 | Input/Output: [(-78 96 -15 -42) -78]
Train Case:  73 | Input/Output: [(-93 59 56 25) -93]
Train Case:  74 | Input/Output: [(18 -8 -35 -62) -62]
Train Case:  75 | Input/Output: [(-90 -1 -47 -82) -90]
Train Case:  76 | Input/Output: [(85 -70 74 100) -70]
Train Case:  77 | Input/Output: [(-9 61 -28 32) -28]
Train Case:  78 | Input/Output: [(-20 -82 15 -25) -82]
Train Case:  79 | Input/Output: [(74 -5 17 19) -5]
Train Case:  80 | Input/Output: [(-45 87 6 68) -45]
Train Case:  81 | Input/Output: [(83 -11 -23 -20) -23]
Train Case:  82 | Input/Output: [(92 92 -61 -30) -61]
Train Case:  83 | Input/Output: [(-26 23 -55 79) -55]
Train Case:  84 | Input/Output: [(-4 33 -95 63) -95]
Train Case:  85 | Input/Output: [(-82 88 94 -6) -82]
Train Case:  86 | Input/Output: [(-65 4 57 7) -65]
Train Case:  87 | Input/Output: [(-36 10 23 29) -36]
Train Case:  88 | Input/Output: [(60 -4 -53 41) -53]
Train Case:  89 | Input/Output: [(79 63 -34 72) -34]
Train Case:  90 | Input/Output: [(97 54 -17 86) -17]
Train Case:  91 | Input/Output: [(-82 -70 47 75) -82]
Train Case:  92 | Input/Output: [(-49 -16 90 -12) -49]
Train Case:  93 | Input/Output: [(8 -36 71 -54) -54]
Train Case:  94 | Input/Output: [(78 -71 76 -54) -71]
Train Case:  95 | Input/Output: [(18 -15 3 36) -15]
Train Case:  96 | Input/Output: [(44 55 28 -73) -73]
Train Case:  97 | Input/Output: [(-22 38 13 -83) -83]
Train Case:  98 | Input/Output: [(13 80 62 -63) -63]
Train Case:  99 | Input/Output: [(-53 -87 -9 -33) -87]
Test Case:   0 | Input/Output: [[44 44 44 -38] -38]
Test Case:   1 | Input/Output: [[-46 -46 -46 5] -46]
Test Case:   2 | Input/Output: [[28 -24 -24 -24] -24]
Test Case:   3 | Input/Output: [[-67 4 -67 -67] -67]
Test Case:   4 | Input/Output: [[-60 -60 -3 -60] -60]
Test Case:   5 | Input/Output: [[58 -61 58 58] -61]
Test Case:   6 | Input/Output: [[-75 -75 48 -75] -75]
Test Case:   7 | Input/Output: [[-60 -60 -25 -60] -60]
Test Case:   8 | Input/Output: [[17 -87 -87 -87] -87]
Test Case:   9 | Input/Output: [[-67 -67 -67 3] -67]
Test Case:  10 | Input/Output: [[74 34 34 34] 34]
Test Case:  11 | Input/Output: [[-10 -10 -10 4] -10]
Test Case:  12 | Input/Output: [[-22 -47 -22 -22] -47]
Test Case:  13 | Input/Output: [[74 74 74 82] 74]
Test Case:  14 | Input/Output: [[72 -7 72 72] -7]
Test Case:  15 | Input/Output: [[62 62 -94 62] -94]
Test Case:  16 | Input/Output: [[-2 64 64 64] -2]
Test Case:  17 | Input/Output: [[-5 -5 88 -5] -5]
Test Case:  18 | Input/Output: [[-19 -19 -19 -25] -25]
Test Case:  19 | Input/Output: [[41 41 41 70] 41]
Test Case:  20 | Input/Output: [[48 -78 48 48] -78]
Test Case:  21 | Input/Output: [[69 69 -80 69] -80]
Test Case:  22 | Input/Output: [[50 -42 50 50] -42]
Test Case:  23 | Input/Output: [[-100 -100 -59 -100] -100]
Test Case:  24 | Input/Output: [[76 76 -55 76] -55]
Test Case:  25 | Input/Output: [[-99 20 -99 -99] -99]
Test Case:  26 | Input/Output: [[-8 15 15 15] -8]
Test Case:  27 | Input/Output: [[-14 -14 -14 -13] -14]
Test Case:  28 | Input/Output: [[-80 -80 -80 -14] -80]
Test Case:  29 | Input/Output: [[-52 -52 -48 -52] -52]
Test Case:  30 | Input/Output: [[44 5 5 5] 5]
Test Case:  31 | Input/Output: [[-83 -83 -89 -83] -89]
Test Case:  32 | Input/Output: [[71 71 71 89] 71]
Test Case:  33 | Input/Output: [[2 -6 -6 -6] -6]
Test Case:  34 | Input/Output: [[13 13 13 -75] -75]
Test Case:  35 | Input/Output: [[-49 -49 35 -49] -49]
Test Case:  36 | Input/Output: [[-64 35 35 35] -64]
Test Case:  37 | Input/Output: [[46 92 46 46] 46]
Test Case:  38 | Input/Output: [[86 86 -97 86] -97]
Test Case:  39 | Input/Output: [[69 69 -19 69] -19]
Test Case:  40 | Input/Output: [[91 -11 91 91] -11]
Test Case:  41 | Input/Output: [[-48 -2 -2 -2] -48]
Test Case:  42 | Input/Output: [[6 6 9 6] 6]
Test Case:  43 | Input/Output: [[-82 70 70 70] -82]
Test Case:  44 | Input/Output: [[-54 36 -54 -54] -54]
Test Case:  45 | Input/Output: [[39 39 -9 39] -9]
Test Case:  46 | Input/Output: [[79 52 52 52] 52]
Test Case:  47 | Input/Output: [[56 56 56 -58] -58]
Test Case:  48 | Input/Output: [[64 64 64 17] 17]
Test Case:  49 | Input/Output: [[53 53 57 53] 53]
Test Case:  50 | Input/Output: [[92 92 8 92] 8]
Test Case:  51 | Input/Output: [[-77 -77 48 -77] -77]
Test Case:  52 | Input/Output: [[-84 -51 -84 -84] -84]
Test Case:  53 | Input/Output: [[86 86 -93 86] -93]
Test Case:  54 | Input/Output: [[-55 -98 -98 -98] -98]
Test Case:  55 | Input/Output: [[-14 -53 -53 -53] -53]
Test Case:  56 | Input/Output: [[49 49 -23 49] -23]
Test Case:  57 | Input/Output: [[7 -80 7 7] -80]
Test Case:  58 | Input/Output: [[79 79 79 -68] -68]
Test Case:  59 | Input/Output: [[46 46 46 91] 46]
Test Case:  60 | Input/Output: [[55 -82 -82 -82] -82]
Test Case:  61 | Input/Output: [[25 -63 25 25] -63]
Test Case:  62 | Input/Output: [[-7 -78 -7 -7] -78]
Test Case:  63 | Input/Output: [[64 -15 64 64] -15]
Test Case:  64 | Input/Output: [[16 16 -21 16] -21]
Test Case:  65 | Input/Output: [[29 29 29 14] 14]
Test Case:  66 | Input/Output: [[13 -79 13 13] -79]
Test Case:  67 | Input/Output: [[-70 -70 -70 33] -70]
Test Case:  68 | Input/Output: [[-11 89 -11 -11] -11]
Test Case:  69 | Input/Output: [[-71 -71 14 -71] -71]
Test Case:  70 | Input/Output: [[42 42 -74 42] -74]
Test Case:  71 | Input/Output: [[26 79 26 26] 26]
Test Case:  72 | Input/Output: [[19 19 -46 19] -46]
Test Case:  73 | Input/Output: [[76 62 62 62] 62]
Test Case:  74 | Input/Output: [[19 19 19 78] 19]
Test Case:  75 | Input/Output: [[-5 -5 -5 30] -5]
Test Case:  76 | Input/Output: [[-78 -22 -78 -78] -78]
Test Case:  77 | Input/Output: [[-78 -78 80 -78] -78]
Test Case:  78 | Input/Output: [[84 24 24 24] 24]
Test Case:  79 | Input/Output: [[16 16 23 16] 16]
Test Case:  80 | Input/Output: [[61 -21 -21 -21] -21]
Test Case:  81 | Input/Output: [[43 70 70 70] 43]
Test Case:  82 | Input/Output: [[64 60 64 64] 60]
Test Case:  83 | Input/Output: [[94 94 -97 94] -97]
Test Case:  84 | Input/Output: [[12 12 82 12] 12]
Test Case:  85 | Input/Output: [[65 -24 65 65] -24]
Test Case:  86 | Input/Output: [[93 30 93 93] 30]
Test Case:  87 | Input/Output: [[21 21 58 21] 21]
Test Case:  88 | Input/Output: [[89 89 -22 89] -22]
Test Case:  89 | Input/Output: [[-99 57 -99 -99] -99]
Test Case:  90 | Input/Output: [[-82 -82 68 -82] -82]
Test Case:  91 | Input/Output: [[-36 -36 -36 73] -36]
Test Case:  92 | Input/Output: [[23 65 23 23] 23]
Test Case:  93 | Input/Output: [[-4 -4 -4 -93] -93]
Test Case:  94 | Input/Output: [[10 20 20 20] 10]
Test Case:  95 | Input/Output: [[-4 55 -4 -4] -4]
Test Case:  96 | Input/Output: [[92 92 76 92] 76]
Test Case:  97 | Input/Output: [[-37 53 53 53] -37]
Test Case:  98 | Input/Output: [[-51 74 -51 -51] -51]
Test Case:  99 | Input/Output: [[41 -16 -16 -16] -16]
Test Case: 100 | Input/Output: [(47 47 47 47) 47]
Test Case: 101 | Input/Output: [(19 19 19 19) 19]
Test Case: 102 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 103 | Input/Output: [(-82 -82 -82 -82) -82]
Test Case: 104 | Input/Output: [(-64 -64 -64 -64) -64]
Test Case: 105 | Input/Output: [(83 83 83 83) 83]
Test Case: 106 | Input/Output: [(82 82 82 82) 82]
Test Case: 107 | Input/Output: [(52 52 52 52) 52]
Test Case: 108 | Input/Output: [(-78 -78 -78 -78) -78]
Test Case: 109 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 110 | Input/Output: [(38 38 38 38) 38]
Test Case: 111 | Input/Output: [(67 67 67 67) 67]
Test Case: 112 | Input/Output: [(6 6 6 6) 6]
Test Case: 113 | Input/Output: [(22 22 22 22) 22]
Test Case: 114 | Input/Output: [(99 99 99 99) 99]
Test Case: 115 | Input/Output: [(86 86 86 86) 86]
Test Case: 116 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 117 | Input/Output: [(13 13 13 13) 13]
Test Case: 118 | Input/Output: [(16 16 16 16) 16]
Test Case: 119 | Input/Output: [(79 79 79 79) 79]
Test Case: 120 | Input/Output: [(52 52 52 52) 52]
Test Case: 121 | Input/Output: [(34 34 34 34) 34]
Test Case: 122 | Input/Output: [(-13 -13 -13 -13) -13]
Test Case: 123 | Input/Output: [(41 41 41 41) 41]
Test Case: 124 | Input/Output: [(52 52 52 52) 52]
Test Case: 125 | Input/Output: [(99 99 99 99) 99]
Test Case: 126 | Input/Output: [(-47 -47 -47 -47) -47]
Test Case: 127 | Input/Output: [(-60 -60 -60 -60) -60]
Test Case: 128 | Input/Output: [(97 97 97 97) 97]
Test Case: 129 | Input/Output: [(-63 -63 -63 -63) -63]
Test Case: 130 | Input/Output: [(-62 -62 -62 -62) -62]
Test Case: 131 | Input/Output: [(-32 -32 -32 -32) -32]
Test Case: 132 | Input/Output: [(-2 -2 -2 -2) -2]
Test Case: 133 | Input/Output: [(-54 -54 -54 -54) -54]
Test Case: 134 | Input/Output: [(37 37 37 37) 37]
Test Case: 135 | Input/Output: [(74 74 74 74) 74]
Test Case: 136 | Input/Output: [(-72 -72 -72 -72) -72]
Test Case: 137 | Input/Output: [(-53 -53 -53 -53) -53]
Test Case: 138 | Input/Output: [(-100 -100 -100 -100) -100]
Test Case: 139 | Input/Output: [(-50 -50 -50 -50) -50]
Test Case: 140 | Input/Output: [(66 66 66 66) 66]
Test Case: 141 | Input/Output: [(-83 -83 -83 -83) -83]
Test Case: 142 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 143 | Input/Output: [(-29 -29 -29 -29) -29]
Test Case: 144 | Input/Output: [(74 74 74 74) 74]
Test Case: 145 | Input/Output: [(-15 -15 -15 -15) -15]
Test Case: 146 | Input/Output: [(-99 -99 -99 -99) -99]
Test Case: 147 | Input/Output: [(18 18 18 18) 18]
Test Case: 148 | Input/Output: [(-71 -71 -71 -71) -71]
Test Case: 149 | Input/Output: [(84 84 84 84) 84]
Test Case: 150 | Input/Output: [(49 49 49 49) 49]
Test Case: 151 | Input/Output: [(-96 -96 -96 -96) -96]
Test Case: 152 | Input/Output: [(-51 -51 -51 -51) -51]
Test Case: 153 | Input/Output: [(11 11 11 11) 11]
Test Case: 154 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 155 | Input/Output: [(24 24 24 24) 24]
Test Case: 156 | Input/Output: [(100 100 100 100) 100]
Test Case: 157 | Input/Output: [(52 52 52 52) 52]
Test Case: 158 | Input/Output: [(14 14 14 14) 14]
Test Case: 159 | Input/Output: [(73 73 73 73) 73]
Test Case: 160 | Input/Output: [(94 94 94 94) 94]
Test Case: 161 | Input/Output: [(-65 -65 -65 -65) -65]
Test Case: 162 | Input/Output: [(40 40 40 40) 40]
Test Case: 163 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 164 | Input/Output: [(15 15 15 15) 15]
Test Case: 165 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 166 | Input/Output: [(24 24 24 24) 24]
Test Case: 167 | Input/Output: [(32 32 32 32) 32]
Test Case: 168 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 169 | Input/Output: [(47 47 47 47) 47]
Test Case: 170 | Input/Output: [(28 28 28 28) 28]
Test Case: 171 | Input/Output: [(-66 -66 -66 -66) -66]
Test Case: 172 | Input/Output: [(53 53 53 53) 53]
Test Case: 173 | Input/Output: [(61 61 61 61) 61]
Test Case: 174 | Input/Output: [(-6 -6 -6 -6) -6]
Test Case: 175 | Input/Output: [(-95 -95 -95 -95) -95]
Test Case: 176 | Input/Output: [(-88 -88 -88 -88) -88]
Test Case: 177 | Input/Output: [(100 100 100 100) 100]
Test Case: 178 | Input/Output: [(12 12 12 12) 12]
Test Case: 179 | Input/Output: [(-86 -86 -86 -86) -86]
Test Case: 180 | Input/Output: [(26 26 26 26) 26]
Test Case: 181 | Input/Output: [(-5 -5 -5 -5) -5]
Test Case: 182 | Input/Output: [(-7 -7 -7 -7) -7]
Test Case: 183 | Input/Output: [(75 75 75 75) 75]
Test Case: 184 | Input/Output: [(50 50 50 50) 50]
Test Case: 185 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 186 | Input/Output: [(86 86 86 86) 86]
Test Case: 187 | Input/Output: [(84 84 84 84) 84]
Test Case: 188 | Input/Output: [(55 55 55 55) 55]
Test Case: 189 | Input/Output: [(98 98 98 98) 98]
Test Case: 190 | Input/Output: [(100 100 100 100) 100]
Test Case: 191 | Input/Output: [(47 47 47 47) 47]
Test Case: 192 | Input/Output: [(-49 -49 -49 -49) -49]
Test Case: 193 | Input/Output: [(-30 -30 -30 -30) -30]
Test Case: 194 | Input/Output: [(29 29 29 29) 29]
Test Case: 195 | Input/Output: [(-18 -18 -18 -18) -18]
Test Case: 196 | Input/Output: [(-98 -98 -98 -98) -98]
Test Case: 197 | Input/Output: [(83 83 83 83) 83]
Test Case: 198 | Input/Output: [(86 86 86 86) 86]
Test Case: 199 | Input/Output: [(2 2 2 2) 2]
Test Case: 200 | Input/Output: [(31 71 78 4) 4]
Test Case: 201 | Input/Output: [(44 88 38 98) 38]
Test Case: 202 | Input/Output: [(99 47 65 18) 18]
Test Case: 203 | Input/Output: [(85 37 88 22) 22]
Test Case: 204 | Input/Output: [(96 98 76 16) 16]
Test Case: 205 | Input/Output: [(90 92 92 32) 32]
Test Case: 206 | Input/Output: [(41 55 27 84) 27]
Test Case: 207 | Input/Output: [(18 88 82 78) 18]
Test Case: 208 | Input/Output: [(62 20 95 88) 20]
Test Case: 209 | Input/Output: [(7 88 26 50) 7]
Test Case: 210 | Input/Output: [(1 31 40 93) 1]
Test Case: 211 | Input/Output: [(92 79 90 48) 48]
Test Case: 212 | Input/Output: [(72 28 78 32) 28]
Test Case: 213 | Input/Output: [(19 27 65 91) 19]
Test Case: 214 | Input/Output: [(9 88 98 73) 9]
Test Case: 215 | Input/Output: [(70 44 81 41) 41]
Test Case: 216 | Input/Output: [(29 7 12 59) 7]
Test Case: 217 | Input/Output: [(22 75 29 28) 22]
Test Case: 218 | Input/Output: [(61 6 63 36) 6]
Test Case: 219 | Input/Output: [(65 57 24 15) 15]
Test Case: 220 | Input/Output: [(19 73 17 99) 17]
Test Case: 221 | Input/Output: [(6 35 85 85) 6]
Test Case: 222 | Input/Output: [(91 37 24 76) 24]
Test Case: 223 | Input/Output: [(64 65 57 36) 36]
Test Case: 224 | Input/Output: [(56 78 80 27) 27]
Test Case: 225 | Input/Output: [(95 4 8 15) 4]
Test Case: 226 | Input/Output: [(85 35 13 97) 13]
Test Case: 227 | Input/Output: [(79 89 5 59) 5]
Test Case: 228 | Input/Output: [(49 68 11 60) 11]
Test Case: 229 | Input/Output: [(48 95 59 94) 48]
Test Case: 230 | Input/Output: [(26 4 3 36) 3]
Test Case: 231 | Input/Output: [(35 3 51 97) 3]
Test Case: 232 | Input/Output: [(94 74 71 85) 71]
Test Case: 233 | Input/Output: [(76 97 77 69) 69]
Test Case: 234 | Input/Output: [(49 30 57 19) 19]
Test Case: 235 | Input/Output: [(2 63 28 52) 2]
Test Case: 236 | Input/Output: [(53 84 46 29) 29]
Test Case: 237 | Input/Output: [(58 44 83 21) 21]
Test Case: 238 | Input/Output: [(20 73 33 63) 20]
Test Case: 239 | Input/Output: [(12 21 86 89) 12]
Test Case: 240 | Input/Output: [(63 44 35 2) 2]
Test Case: 241 | Input/Output: [(48 61 46 14) 14]
Test Case: 242 | Input/Output: [(63 26 35 48) 26]
Test Case: 243 | Input/Output: [(91 68 54 18) 18]
Test Case: 244 | Input/Output: [(60 25 82 19) 19]
Test Case: 245 | Input/Output: [(25 3 52 71) 3]
Test Case: 246 | Input/Output: [(23 63 46 74) 23]
Test Case: 247 | Input/Output: [(67 59 42 100) 42]
Test Case: 248 | Input/Output: [(97 25 37 56) 25]
Test Case: 249 | Input/Output: [(24 76 40 28) 24]
Test Case: 250 | Input/Output: [(52 58 59 1) 1]
Test Case: 251 | Input/Output: [(74 16 32 31) 16]
Test Case: 252 | Input/Output: [(41 18 6 61) 6]
Test Case: 253 | Input/Output: [(69 98 60 59) 59]
Test Case: 254 | Input/Output: [(0 8 96 86) 0]
Test Case: 255 | Input/Output: [(70 60 85 58) 58]
Test Case: 256 | Input/Output: [(25 88 59 53) 25]
Test Case: 257 | Input/Output: [(96 88 26 44) 26]
Test Case: 258 | Input/Output: [(87 67 7 27) 7]
Test Case: 259 | Input/Output: [(8 24 43 54) 8]
Test Case: 260 | Input/Output: [(1 84 96 3) 1]
Test Case: 261 | Input/Output: [(71 31 33 96) 31]
Test Case: 262 | Input/Output: [(77 6 92 46) 6]
Test Case: 263 | Input/Output: [(34 95 41 71) 34]
Test Case: 264 | Input/Output: [(31 74 92 37) 31]
Test Case: 265 | Input/Output: [(5 57 12 46) 5]
Test Case: 266 | Input/Output: [(5 73 68 50) 5]
Test Case: 267 | Input/Output: [(86 99 13 62) 13]
Test Case: 268 | Input/Output: [(54 24 77 18) 18]
Test Case: 269 | Input/Output: [(0 37 76 81) 0]
Test Case: 270 | Input/Output: [(33 73 78 95) 33]
Test Case: 271 | Input/Output: [(18 10 8 98) 8]
Test Case: 272 | Input/Output: [(60 46 21 82) 21]
Test Case: 273 | Input/Output: [(77 22 92 83) 22]
Test Case: 274 | Input/Output: [(7 84 95 44) 7]
Test Case: 275 | Input/Output: [(37 26 89 1) 1]
Test Case: 276 | Input/Output: [(91 59 67 55) 55]
Test Case: 277 | Input/Output: [(51 45 8 18) 8]
Test Case: 278 | Input/Output: [(15 55 38 49) 15]
Test Case: 279 | Input/Output: [(43 63 47 48) 43]
Test Case: 280 | Input/Output: [(87 98 99 1) 1]
Test Case: 281 | Input/Output: [(69 44 63 19) 19]
Test Case: 282 | Input/Output: [(34 1 83 26) 1]
Test Case: 283 | Input/Output: [(41 81 91 94) 41]
Test Case: 284 | Input/Output: [(94 63 69 17) 17]
Test Case: 285 | Input/Output: [(13 62 16 15) 13]
Test Case: 286 | Input/Output: [(75 28 53 83) 28]
Test Case: 287 | Input/Output: [(20 59 60 65) 20]
Test Case: 288 | Input/Output: [(92 98 59 68) 59]
Test Case: 289 | Input/Output: [(69 38 4 86) 4]
Test Case: 290 | Input/Output: [(77 76 3 43) 3]
Test Case: 291 | Input/Output: [(21 32 63 1) 1]
Test Case: 292 | Input/Output: [(79 6 97 70) 6]
Test Case: 293 | Input/Output: [(93 64 71 75) 64]
Test Case: 294 | Input/Output: [(56 23 74 91) 23]
Test Case: 295 | Input/Output: [(19 83 40 38) 19]
Test Case: 296 | Input/Output: [(28 7 69 19) 7]
Test Case: 297 | Input/Output: [(54 37 23 34) 23]
Test Case: 298 | Input/Output: [(78 76 91 61) 61]
Test Case: 299 | Input/Output: [(56 45 2 49) 2]
Test Case: 300 | Input/Output: [(32 6 41 3) 3]
Test Case: 301 | Input/Output: [(49 14 70 0) 0]
Test Case: 302 | Input/Output: [(100 48 76 71) 48]
Test Case: 303 | Input/Output: [(52 1 73 55) 1]
Test Case: 304 | Input/Output: [(23 43 35 64) 23]
Test Case: 305 | Input/Output: [(65 54 17 64) 17]
Test Case: 306 | Input/Output: [(73 17 19 50) 17]
Test Case: 307 | Input/Output: [(36 92 59 16) 16]
Test Case: 308 | Input/Output: [(83 53 94 41) 41]
Test Case: 309 | Input/Output: [(88 89 41 57) 41]
Test Case: 310 | Input/Output: [(99 65 65 24) 24]
Test Case: 311 | Input/Output: [(78 46 89 93) 46]
Test Case: 312 | Input/Output: [(42 47 85 34) 34]
Test Case: 313 | Input/Output: [(65 47 41 24) 24]
Test Case: 314 | Input/Output: [(39 55 99 77) 39]
Test Case: 315 | Input/Output: [(25 80 3 21) 3]
Test Case: 316 | Input/Output: [(36 75 61 83) 36]
Test Case: 317 | Input/Output: [(93 45 72 82) 45]
Test Case: 318 | Input/Output: [(56 92 17 48) 17]
Test Case: 319 | Input/Output: [(45 43 46 81) 43]
Test Case: 320 | Input/Output: [(63 7 93 11) 7]
Test Case: 321 | Input/Output: [(69 91 31 59) 31]
Test Case: 322 | Input/Output: [(99 90 59 92) 59]
Test Case: 323 | Input/Output: [(84 48 87 0) 0]
Test Case: 324 | Input/Output: [(79 82 17 30) 17]
Test Case: 325 | Input/Output: [(23 61 81 49) 23]
Test Case: 326 | Input/Output: [(87 12 77 41) 12]
Test Case: 327 | Input/Output: [(41 27 87 74) 27]
Test Case: 328 | Input/Output: [(41 71 61 46) 41]
Test Case: 329 | Input/Output: [(16 95 28 28) 16]
Test Case: 330 | Input/Output: [(86 92 49 78) 49]
Test Case: 331 | Input/Output: [(4 36 7 31) 4]
Test Case: 332 | Input/Output: [(37 96 60 17) 17]
Test Case: 333 | Input/Output: [(25 42 99 95) 25]
Test Case: 334 | Input/Output: [(1 18 56 31) 1]
Test Case: 335 | Input/Output: [(25 46 49 76) 25]
Test Case: 336 | Input/Output: [(90 42 99 93) 42]
Test Case: 337 | Input/Output: [(64 25 13 52) 13]
Test Case: 338 | Input/Output: [(62 75 69 63) 62]
Test Case: 339 | Input/Output: [(63 23 65 0) 0]
Test Case: 340 | Input/Output: [(69 2 81 37) 2]
Test Case: 341 | Input/Output: [(37 61 44 0) 0]
Test Case: 342 | Input/Output: [(52 63 28 35) 28]
Test Case: 343 | Input/Output: [(14 36 53 37) 14]
Test Case: 344 | Input/Output: [(35 92 28 14) 14]
Test Case: 345 | Input/Output: [(16 41 34 84) 16]
Test Case: 346 | Input/Output: [(37 49 29 90) 29]
Test Case: 347 | Input/Output: [(91 47 17 66) 17]
Test Case: 348 | Input/Output: [(41 36 36 8) 8]
Test Case: 349 | Input/Output: [(14 69 8 39) 8]
Test Case: 350 | Input/Output: [(12 16 40 46) 12]
Test Case: 351 | Input/Output: [(42 78 52 95) 42]
Test Case: 352 | Input/Output: [(43 21 57 55) 21]
Test Case: 353 | Input/Output: [(76 17 65 36) 17]
Test Case: 354 | Input/Output: [(77 70 11 50) 11]
Test Case: 355 | Input/Output: [(37 37 58 22) 22]
Test Case: 356 | Input/Output: [(69 14 40 38) 14]
Test Case: 357 | Input/Output: [(89 37 87 64) 37]
Test Case: 358 | Input/Output: [(23 19 21 62) 19]
Test Case: 359 | Input/Output: [(29 33 17 93) 17]
Test Case: 360 | Input/Output: [(20 78 33 99) 20]
Test Case: 361 | Input/Output: [(37 51 7 4) 4]
Test Case: 362 | Input/Output: [(60 76 71 58) 58]
Test Case: 363 | Input/Output: [(66 46 74 38) 38]
Test Case: 364 | Input/Output: [(1 78 40 33) 1]
Test Case: 365 | Input/Output: [(43 3 35 67) 3]
Test Case: 366 | Input/Output: [(33 5 38 34) 5]
Test Case: 367 | Input/Output: [(10 62 85 89) 10]
Test Case: 368 | Input/Output: [(9 50 19 69) 9]
Test Case: 369 | Input/Output: [(61 94 6 58) 6]
Test Case: 370 | Input/Output: [(32 51 37 90) 32]
Test Case: 371 | Input/Output: [(48 11 2 72) 2]
Test Case: 372 | Input/Output: [(83 40 93 51) 40]
Test Case: 373 | Input/Output: [(31 38 46 88) 31]
Test Case: 374 | Input/Output: [(55 83 67 17) 17]
Test Case: 375 | Input/Output: [(72 81 92 59) 59]
Test Case: 376 | Input/Output: [(76 89 2 59) 2]
Test Case: 377 | Input/Output: [(42 4 93 100) 4]
Test Case: 378 | Input/Output: [(24 44 33 98) 24]
Test Case: 379 | Input/Output: [(40 25 8 62) 8]
Test Case: 380 | Input/Output: [(21 84 8 20) 8]
Test Case: 381 | Input/Output: [(20 69 42 8) 8]
Test Case: 382 | Input/Output: [(17 64 5 59) 5]
Test Case: 383 | Input/Output: [(20 68 50 50) 20]
Test Case: 384 | Input/Output: [(3 22 37 100) 3]
Test Case: 385 | Input/Output: [(53 74 78 85) 53]
Test Case: 386 | Input/Output: [(73 48 93 23) 23]
Test Case: 387 | Input/Output: [(83 43 91 17) 17]
Test Case: 388 | Input/Output: [(52 39 35 16) 16]
Test Case: 389 | Input/Output: [(76 87 58 73) 58]
Test Case: 390 | Input/Output: [(75 23 16 73) 16]
Test Case: 391 | Input/Output: [(34 89 15 66) 15]
Test Case: 392 | Input/Output: [(41 19 59 53) 19]
Test Case: 393 | Input/Output: [(7 53 53 4) 4]
Test Case: 394 | Input/Output: [(97 51 86 44) 44]
Test Case: 395 | Input/Output: [(6 53 34 64) 6]
Test Case: 396 | Input/Output: [(13 55 56 94) 13]
Test Case: 397 | Input/Output: [(47 3 80 9) 3]
Test Case: 398 | Input/Output: [(100 54 71 44) 44]
Test Case: 399 | Input/Output: [(61 78 15 16) 15]
Test Case: 400 | Input/Output: [(68 -24 69 50) -24]
Test Case: 401 | Input/Output: [(69 36 -65 -27) -65]
Test Case: 402 | Input/Output: [(47 24 -53 76) -53]
Test Case: 403 | Input/Output: [(-29 73 -86 33) -86]
Test Case: 404 | Input/Output: [(-32 -87 22 -33) -87]
Test Case: 405 | Input/Output: [(-92 -76 -20 71) -92]
Test Case: 406 | Input/Output: [(-62 14 68 98) -62]
Test Case: 407 | Input/Output: [(65 -95 0 -90) -95]
Test Case: 408 | Input/Output: [(55 -37 11 56) -37]
Test Case: 409 | Input/Output: [(42 -1 -19 -90) -90]
Test Case: 410 | Input/Output: [(83 0 62 -74) -74]
Test Case: 411 | Input/Output: [(-9 58 77 -95) -95]
Test Case: 412 | Input/Output: [(4 12 8 -39) -39]
Test Case: 413 | Input/Output: [(71 61 30 54) 30]
Test Case: 414 | Input/Output: [(93 -13 27 -12) -13]
Test Case: 415 | Input/Output: [(-42 -7 45 -38) -42]
Test Case: 416 | Input/Output: [(22 40 -12 -61) -61]
Test Case: 417 | Input/Output: [(-67 -17 -33 -33) -67]
Test Case: 418 | Input/Output: [(52 66 80 59) 52]
Test Case: 419 | Input/Output: [(72 -20 -25 21) -25]
Test Case: 420 | Input/Output: [(-57 -20 -40 16) -57]
Test Case: 421 | Input/Output: [(54 -35 -6 64) -35]
Test Case: 422 | Input/Output: [(-72 17 12 -31) -72]
Test Case: 423 | Input/Output: [(-40 37 52 93) -40]
Test Case: 424 | Input/Output: [(46 96 30 70) 30]
Test Case: 425 | Input/Output: [(80 93 20 -67) -67]
Test Case: 426 | Input/Output: [(64 45 -47 -38) -47]
Test Case: 427 | Input/Output: [(13 59 26 -11) -11]
Test Case: 428 | Input/Output: [(61 25 61 -37) -37]
Test Case: 429 | Input/Output: [(-26 77 75 -66) -66]
Test Case: 430 | Input/Output: [(-85 -42 -21 96) -85]
Test Case: 431 | Input/Output: [(98 -68 -83 -63) -83]
Test Case: 432 | Input/Output: [(15 -6 -48 90) -48]
Test Case: 433 | Input/Output: [(-100 -17 59 -49) -100]
Test Case: 434 | Input/Output: [(-1 -78 -24 71) -78]
Test Case: 435 | Input/Output: [(-97 41 -52 -41) -97]
Test Case: 436 | Input/Output: [(-25 -76 -50 68) -76]
Test Case: 437 | Input/Output: [(8 -30 -3 -60) -60]
Test Case: 438 | Input/Output: [(-95 -2 -90 31) -95]
Test Case: 439 | Input/Output: [(-30 -18 60 -74) -74]
Test Case: 440 | Input/Output: [(-50 76 87 -92) -92]
Test Case: 441 | Input/Output: [(19 0 -85 26) -85]
Test Case: 442 | Input/Output: [(-13 95 95 42) -13]
Test Case: 443 | Input/Output: [(24 -83 -68 -43) -83]
Test Case: 444 | Input/Output: [(10 -88 -18 36) -88]
Test Case: 445 | Input/Output: [(82 9 -83 -36) -83]
Test Case: 446 | Input/Output: [(1 77 -8 83) -8]
Test Case: 447 | Input/Output: [(-57 35 -45 19) -57]
Test Case: 448 | Input/Output: [(-49 -83 50 -66) -83]
Test Case: 449 | Input/Output: [(32 31 -6 -51) -51]
Test Case: 450 | Input/Output: [(62 -20 -33 -23) -33]
Test Case: 451 | Input/Output: [(-68 -11 34 49) -68]
Test Case: 452 | Input/Output: [(-37 34 -94 7) -94]
Test Case: 453 | Input/Output: [(40 -27 -35 -20) -35]
Test Case: 454 | Input/Output: [(45 -89 -53 75) -89]
Test Case: 455 | Input/Output: [(19 33 97 30) 19]
Test Case: 456 | Input/Output: [(63 26 -37 -80) -80]
Test Case: 457 | Input/Output: [(-28 71 -48 -9) -48]
Test Case: 458 | Input/Output: [(94 8 -71 -44) -71]
Test Case: 459 | Input/Output: [(-64 30 0 93) -64]
Test Case: 460 | Input/Output: [(39 -40 -70 -24) -70]
Test Case: 461 | Input/Output: [(7 -68 -59 9) -68]
Test Case: 462 | Input/Output: [(77 86 79 -74) -74]
Test Case: 463 | Input/Output: [(-65 -71 -56 17) -71]
Test Case: 464 | Input/Output: [(80 77 30 28) 28]
Test Case: 465 | Input/Output: [(-34 -14 91 45) -34]
Test Case: 466 | Input/Output: [(-90 -31 -60 -80) -90]
Test Case: 467 | Input/Output: [(-100 85 -60 62) -100]
Test Case: 468 | Input/Output: [(91 44 -58 -56) -58]
Test Case: 469 | Input/Output: [(-37 66 -87 78) -87]
Test Case: 470 | Input/Output: [(-37 -91 19 -89) -91]
Test Case: 471 | Input/Output: [(-38 -32 -62 77) -62]
Test Case: 472 | Input/Output: [(-81 -30 -5 -76) -81]
Test Case: 473 | Input/Output: [(53 84 -95 40) -95]
Test Case: 474 | Input/Output: [(-92 35 -24 -25) -92]
Test Case: 475 | Input/Output: [(59 -57 51 58) -57]
Test Case: 476 | Input/Output: [(-73 -66 45 47) -73]
Test Case: 477 | Input/Output: [(-80 72 52 76) -80]
Test Case: 478 | Input/Output: [(52 68 11 -29) -29]
Test Case: 479 | Input/Output: [(-8 -29 31 -19) -29]
Test Case: 480 | Input/Output: [(-65 -2 -87 -49) -87]
Test Case: 481 | Input/Output: [(73 -100 95 -20) -100]
Test Case: 482 | Input/Output: [(7 84 -15 -64) -64]
Test Case: 483 | Input/Output: [(-51 -84 -91 -28) -91]
Test Case: 484 | Input/Output: [(-8 -50 70 -71) -71]
Test Case: 485 | Input/Output: [(48 77 -84 -43) -84]
Test Case: 486 | Input/Output: [(2 -13 -86 -59) -86]
Test Case: 487 | Input/Output: [(-41 -17 0 -62) -62]
Test Case: 488 | Input/Output: [(-48 -66 69 -89) -89]
Test Case: 489 | Input/Output: [(-29 -95 -14 -21) -95]
Test Case: 490 | Input/Output: [(-12 -73 12 -1) -73]
Test Case: 491 | Input/Output: [(15 74 62 36) 15]
Test Case: 492 | Input/Output: [(98 -78 -11 92) -78]
Test Case: 493 | Input/Output: [(-35 35 58 10) -35]
Test Case: 494 | Input/Output: [(96 38 72 -72) -72]
Test Case: 495 | Input/Output: [(67 61 -20 -34) -34]
Test Case: 496 | Input/Output: [(-60 27 -90 -15) -90]
Test Case: 497 | Input/Output: [(38 -71 -87 -32) -87]
Test Case: 498 | Input/Output: [(67 -30 -79 -12) -79]
Test Case: 499 | Input/Output: [(49 -72 65 -46) -72]
Test Case: 500 | Input/Output: [(-11 -43 -66 -39) -66]
Test Case: 501 | Input/Output: [(-65 -12 -20 66) -65]
Test Case: 502 | Input/Output: [(-10 -82 -80 -28) -82]
Test Case: 503 | Input/Output: [(-5 -54 69 -54) -54]
Test Case: 504 | Input/Output: [(-93 -14 -17 -73) -93]
Test Case: 505 | Input/Output: [(-38 -26 28 83) -38]
Test Case: 506 | Input/Output: [(-15 -62 30 51) -62]
Test Case: 507 | Input/Output: [(67 -70 -93 -6) -93]
Test Case: 508 | Input/Output: [(58 21 -40 -62) -62]
Test Case: 509 | Input/Output: [(5 31 80 74) 5]
Test Case: 510 | Input/Output: [(79 63 -50 -6) -50]
Test Case: 511 | Input/Output: [(-85 -20 -62 80) -85]
Test Case: 512 | Input/Output: [(-88 -65 62 43) -88]
Test Case: 513 | Input/Output: [(-27 -89 7 27) -89]
Test Case: 514 | Input/Output: [(-29 -67 -65 -63) -67]
Test Case: 515 | Input/Output: [(-15 -85 -98 -39) -98]
Test Case: 516 | Input/Output: [(-59 -39 10 -11) -59]
Test Case: 517 | Input/Output: [(-27 66 53 -83) -83]
Test Case: 518 | Input/Output: [(16 -98 51 72) -98]
Test Case: 519 | Input/Output: [(88 6 -19 -94) -94]
Test Case: 520 | Input/Output: [(86 67 63 -77) -77]
Test Case: 521 | Input/Output: [(57 -71 24 -9) -71]
Test Case: 522 | Input/Output: [(37 5 40 -6) -6]
Test Case: 523 | Input/Output: [(27 13 73 8) 8]
Test Case: 524 | Input/Output: [(26 65 63 -26) -26]
Test Case: 525 | Input/Output: [(-54 -43 -88 11) -88]
Test Case: 526 | Input/Output: [(50 -37 -68 90) -68]
Test Case: 527 | Input/Output: [(62 17 -38 0) -38]
Test Case: 528 | Input/Output: [(53 -8 76 -58) -58]
Test Case: 529 | Input/Output: [(-63 -96 -28 -19) -96]
Test Case: 530 | Input/Output: [(15 50 -3 -55) -55]
Test Case: 531 | Input/Output: [(-43 -12 -94 -51) -94]
Test Case: 532 | Input/Output: [(-12 100 74 25) -12]
Test Case: 533 | Input/Output: [(-90 86 -8 -12) -90]
Test Case: 534 | Input/Output: [(3 -87 38 33) -87]
Test Case: 535 | Input/Output: [(18 90 59 39) 18]
Test Case: 536 | Input/Output: [(13 -34 -81 -23) -81]
Test Case: 537 | Input/Output: [(-60 51 64 -12) -60]
Test Case: 538 | Input/Output: [(-92 -61 81 -2) -92]
Test Case: 539 | Input/Output: [(-12 -76 -5 -2) -76]
Test Case: 540 | Input/Output: [(57 24 6 -19) -19]
Test Case: 541 | Input/Output: [(31 -88 71 -27) -88]
Test Case: 542 | Input/Output: [(-25 52 -25 74) -25]
Test Case: 543 | Input/Output: [(-98 81 -10 -25) -98]
Test Case: 544 | Input/Output: [(-11 -68 -15 86) -68]
Test Case: 545 | Input/Output: [(47 -53 82 7) -53]
Test Case: 546 | Input/Output: [(0 -11 -87 -24) -87]
Test Case: 547 | Input/Output: [(18 -99 34 89) -99]
Test Case: 548 | Input/Output: [(-91 -87 -2 21) -91]
Test Case: 549 | Input/Output: [(37 -95 32 -98) -98]
Test Case: 550 | Input/Output: [(-64 72 92 -58) -64]
Test Case: 551 | Input/Output: [(-13 63 -10 -81) -81]
Test Case: 552 | Input/Output: [(-16 51 44 5) -16]
Test Case: 553 | Input/Output: [(-30 -48 -81 -59) -81]
Test Case: 554 | Input/Output: [(-64 -60 -43 98) -64]
Test Case: 555 | Input/Output: [(-66 31 -19 69) -66]
Test Case: 556 | Input/Output: [(-72 -51 99 51) -72]
Test Case: 557 | Input/Output: [(7 16 99 -81) -81]
Test Case: 558 | Input/Output: [(-1 26 -17 36) -17]
Test Case: 559 | Input/Output: [(-100 -87 81 32) -100]
Test Case: 560 | Input/Output: [(59 -55 10 -51) -55]
Test Case: 561 | Input/Output: [(-95 -85 19 42) -95]
Test Case: 562 | Input/Output: [(71 -66 63 -23) -66]
Test Case: 563 | Input/Output: [(3 2 -68 13) -68]
Test Case: 564 | Input/Output: [(-28 -23 -82 -48) -82]
Test Case: 565 | Input/Output: [(-82 -27 -82 28) -82]
Test Case: 566 | Input/Output: [(-94 -74 4 -99) -99]
Test Case: 567 | Input/Output: [(54 94 99 -99) -99]
Test Case: 568 | Input/Output: [(56 -84 45 5) -84]
Test Case: 569 | Input/Output: [(61 81 26 30) 26]
Test Case: 570 | Input/Output: [(-68 94 63 -73) -73]
Test Case: 571 | Input/Output: [(49 18 -81 -75) -81]
Test Case: 572 | Input/Output: [(20 89 -61 16) -61]
Test Case: 573 | Input/Output: [(22 50 69 92) 22]
Test Case: 574 | Input/Output: [(46 77 -83 -15) -83]
Test Case: 575 | Input/Output: [(96 43 -46 4) -46]
Test Case: 576 | Input/Output: [(-43 -20 -6 70) -43]
Test Case: 577 | Input/Output: [(-59 51 -16 -92) -92]
Test Case: 578 | Input/Output: [(-91 61 96 -41) -91]
Test Case: 579 | Input/Output: [(-44 32 91 42) -44]
Test Case: 580 | Input/Output: [(50 -18 -48 18) -48]
Test Case: 581 | Input/Output: [(-72 -47 -6 -19) -72]
Test Case: 582 | Input/Output: [(93 45 -23 16) -23]
Test Case: 583 | Input/Output: [(-95 83 -15 51) -95]
Test Case: 584 | Input/Output: [(-28 -62 60 76) -62]
Test Case: 585 | Input/Output: [(96 -27 15 -88) -88]
Test Case: 586 | Input/Output: [(94 75 1 -28) -28]
Test Case: 587 | Input/Output: [(19 -99 83 -49) -99]
Test Case: 588 | Input/Output: [(-85 45 88 -89) -89]
Test Case: 589 | Input/Output: [(71 -97 2 80) -97]
Test Case: 590 | Input/Output: [(96 -62 78 81) -62]
Test Case: 591 | Input/Output: [(70 7 18 -8) -8]
Test Case: 592 | Input/Output: [(-57 71 90 50) -57]
Test Case: 593 | Input/Output: [(79 -37 45 50) -37]
Test Case: 594 | Input/Output: [(-67 -5 -57 -96) -96]
Test Case: 595 | Input/Output: [(-9 77 55 -37) -37]
Test Case: 596 | Input/Output: [(-9 26 42 18) -9]
Test Case: 597 | Input/Output: [(-34 37 -17 26) -34]
Test Case: 598 | Input/Output: [(94 45 41 -80) -80]
Test Case: 599 | Input/Output: [(71 86 75 -7) -7]
Test Case: 600 | Input/Output: [(-83 75 -34 30) -83]
Test Case: 601 | Input/Output: [(-68 13 98 72) -68]
Test Case: 602 | Input/Output: [(-92 -21 70 90) -92]
Test Case: 603 | Input/Output: [(-76 32 -48 23) -76]
Test Case: 604 | Input/Output: [(-44 24 67 9) -44]
Test Case: 605 | Input/Output: [(62 25 21 37) 21]
Test Case: 606 | Input/Output: [(-67 41 44 -80) -80]
Test Case: 607 | Input/Output: [(55 62 -98 33) -98]
Test Case: 608 | Input/Output: [(-86 -95 -99 36) -99]
Test Case: 609 | Input/Output: [(81 -43 93 -69) -69]
Test Case: 610 | Input/Output: [(-48 24 57 -11) -48]
Test Case: 611 | Input/Output: [(33 -57 62 -18) -57]
Test Case: 612 | Input/Output: [(92 83 -83 -92) -92]
Test Case: 613 | Input/Output: [(5 60 -72 87) -72]
Test Case: 614 | Input/Output: [(95 -46 53 -20) -46]
Test Case: 615 | Input/Output: [(98 -93 -4 22) -93]
Test Case: 616 | Input/Output: [(-43 -7 -87 33) -87]
Test Case: 617 | Input/Output: [(-100 -48 -35 -64) -100]
Test Case: 618 | Input/Output: [(96 98 -55 8) -55]
Test Case: 619 | Input/Output: [(33 -66 -35 92) -66]
Test Case: 620 | Input/Output: [(63 -87 -74 -11) -87]
Test Case: 621 | Input/Output: [(43 31 87 -97) -97]
Test Case: 622 | Input/Output: [(100 -30 0 -92) -92]
Test Case: 623 | Input/Output: [(-90 62 -43 -84) -90]
Test Case: 624 | Input/Output: [(-49 -82 -57 -50) -82]
Test Case: 625 | Input/Output: [(77 24 -19 -5) -19]
Test Case: 626 | Input/Output: [(31 -14 -7 39) -14]
Test Case: 627 | Input/Output: [(-46 -39 -41 60) -46]
Test Case: 628 | Input/Output: [(-80 77 -73 -89) -89]
Test Case: 629 | Input/Output: [(47 -21 -11 -96) -96]
Test Case: 630 | Input/Output: [(78 -6 42 -39) -39]
Test Case: 631 | Input/Output: [(-94 -15 28 82) -94]
Test Case: 632 | Input/Output: [(40 -37 -78 80) -78]
Test Case: 633 | Input/Output: [(-21 23 -74 87) -74]
Test Case: 634 | Input/Output: [(-92 -58 79 -32) -92]
Test Case: 635 | Input/Output: [(67 77 -35 95) -35]
Test Case: 636 | Input/Output: [(1 -39 26 12) -39]
Test Case: 637 | Input/Output: [(19 25 -56 13) -56]
Test Case: 638 | Input/Output: [(-19 -82 -70 96) -82]
Test Case: 639 | Input/Output: [(36 -38 -51 64) -51]
Test Case: 640 | Input/Output: [(82 -5 -81 -55) -81]
Test Case: 641 | Input/Output: [(91 36 -22 -32) -32]
Test Case: 642 | Input/Output: [(-4 -60 75 66) -60]
Test Case: 643 | Input/Output: [(19 98 -54 -37) -54]
Test Case: 644 | Input/Output: [(67 36 -68 -86) -86]
Test Case: 645 | Input/Output: [(-27 4 6 51) -27]
Test Case: 646 | Input/Output: [(68 -4 -90 -51) -90]
Test Case: 647 | Input/Output: [(-76 -45 39 -89) -89]
Test Case: 648 | Input/Output: [(-68 -48 -51 67) -68]
Test Case: 649 | Input/Output: [(64 -35 58 -68) -68]
Test Case: 650 | Input/Output: [(-12 -4 -79 1) -79]
Test Case: 651 | Input/Output: [(79 27 23 98) 23]
Test Case: 652 | Input/Output: [(68 -22 12 32) -22]
Test Case: 653 | Input/Output: [(35 32 20 -5) -5]
Test Case: 654 | Input/Output: [(73 -26 -23 -68) -68]
Test Case: 655 | Input/Output: [(-69 93 -38 53) -69]
Test Case: 656 | Input/Output: [(-69 92 -42 10) -69]
Test Case: 657 | Input/Output: [(15 -25 -51 -44) -51]
Test Case: 658 | Input/Output: [(58 -3 62 -42) -42]
Test Case: 659 | Input/Output: [(-31 -57 -4 8) -57]
Test Case: 660 | Input/Output: [(29 72 -75 -92) -92]
Test Case: 661 | Input/Output: [(-97 -32 8 -67) -97]
Test Case: 662 | Input/Output: [(-100 -11 -45 -8) -100]
Test Case: 663 | Input/Output: [(19 77 -58 -22) -58]
Test Case: 664 | Input/Output: [(51 48 -3 27) -3]
Test Case: 665 | Input/Output: [(22 -67 88 14) -67]
Test Case: 666 | Input/Output: [(76 -57 -21 -4) -57]
Test Case: 667 | Input/Output: [(-43 -62 27 34) -62]
Test Case: 668 | Input/Output: [(-11 -23 -94 50) -94]
Test Case: 669 | Input/Output: [(59 -24 -100 -86) -100]
Test Case: 670 | Input/Output: [(89 40 50 93) 40]
Test Case: 671 | Input/Output: [(44 58 -63 -72) -72]
Test Case: 672 | Input/Output: [(-43 -92 82 96) -92]
Test Case: 673 | Input/Output: [(-38 76 -68 36) -68]
Test Case: 674 | Input/Output: [(47 68 -82 28) -82]
Test Case: 675 | Input/Output: [(-67 65 -83 24) -83]
Test Case: 676 | Input/Output: [(-52 -46 -88 -59) -88]
Test Case: 677 | Input/Output: [(50 8 -44 74) -44]
Test Case: 678 | Input/Output: [(-91 83 -88 -2) -91]
Test Case: 679 | Input/Output: [(-24 50 92 -23) -24]
Test Case: 680 | Input/Output: [(-72 10 -75 97) -75]
Test Case: 681 | Input/Output: [(11 -62 -24 62) -62]
Test Case: 682 | Input/Output: [(-79 7 19 21) -79]
Test Case: 683 | Input/Output: [(-76 61 -26 -81) -81]
Test Case: 684 | Input/Output: [(-87 98 -77 53) -87]
Test Case: 685 | Input/Output: [(-2 60 -21 26) -21]
Test Case: 686 | Input/Output: [(77 -66 73 64) -66]
Test Case: 687 | Input/Output: [(32 -30 76 7) -30]
Test Case: 688 | Input/Output: [(15 25 -29 48) -29]
Test Case: 689 | Input/Output: [(59 -12 15 52) -12]
Test Case: 690 | Input/Output: [(63 -54 5 67) -54]
Test Case: 691 | Input/Output: [(3 -92 -81 80) -92]
Test Case: 692 | Input/Output: [(5 86 -39 -12) -39]
Test Case: 693 | Input/Output: [(50 -58 -59 42) -59]
Test Case: 694 | Input/Output: [(24 59 -17 -31) -31]
Test Case: 695 | Input/Output: [(89 18 -79 12) -79]
Test Case: 696 | Input/Output: [(-98 42 -26 -80) -98]
Test Case: 697 | Input/Output: [(70 -88 -88 -72) -88]
Test Case: 698 | Input/Output: [(34 51 -10 -50) -50]
Test Case: 699 | Input/Output: [(-6 33 -18 43) -18]
Test Case: 700 | Input/Output: [(83 81 79 -52) -52]
Test Case: 701 | Input/Output: [(-69 36 -8 -88) -88]
Test Case: 702 | Input/Output: [(-29 51 -80 -63) -80]
Test Case: 703 | Input/Output: [(-22 59 1 71) -22]
Test Case: 704 | Input/Output: [(25 -70 44 51) -70]
Test Case: 705 | Input/Output: [(30 19 -97 98) -97]
Test Case: 706 | Input/Output: [(95 -94 -90 -9) -94]
Test Case: 707 | Input/Output: [(-87 39 95 -25) -87]
Test Case: 708 | Input/Output: [(7 -34 -77 19) -77]
Test Case: 709 | Input/Output: [(27 79 -78 86) -78]
Test Case: 710 | Input/Output: [(95 3 -98 -25) -98]
Test Case: 711 | Input/Output: [(38 90 28 28) 28]
Test Case: 712 | Input/Output: [(95 -75 -46 -43) -75]
Test Case: 713 | Input/Output: [(-4 -84 -17 5) -84]
Test Case: 714 | Input/Output: [(-99 65 25 7) -99]
Test Case: 715 | Input/Output: [(24 70 4 3) 3]
Test Case: 716 | Input/Output: [(-93 -57 -1 -50) -93]
Test Case: 717 | Input/Output: [(-57 -36 -62 77) -62]
Test Case: 718 | Input/Output: [(70 -40 -40 26) -40]
Test Case: 719 | Input/Output: [(-92 96 -89 -85) -92]
Test Case: 720 | Input/Output: [(74 -49 39 -1) -49]
Test Case: 721 | Input/Output: [(41 68 19 83) 19]
Test Case: 722 | Input/Output: [(22 -38 -26 -45) -45]
Test Case: 723 | Input/Output: [(-27 -26 -84 -25) -84]
Test Case: 724 | Input/Output: [(60 76 26 -21) -21]
Test Case: 725 | Input/Output: [(65 -12 55 -53) -53]
Test Case: 726 | Input/Output: [(-47 8 -1 35) -47]
Test Case: 727 | Input/Output: [(76 7 60 -75) -75]
Test Case: 728 | Input/Output: [(35 -64 -67 98) -67]
Test Case: 729 | Input/Output: [(-15 29 12 27) -15]
Test Case: 730 | Input/Output: [(45 -55 91 -73) -73]
Test Case: 731 | Input/Output: [(23 -10 -69 -5) -69]
Test Case: 732 | Input/Output: [(46 -91 -62 27) -91]
Test Case: 733 | Input/Output: [(-67 -68 -65 -78) -78]
Test Case: 734 | Input/Output: [(-82 42 33 85) -82]
Test Case: 735 | Input/Output: [(-57 -98 94 -1) -98]
Test Case: 736 | Input/Output: [(-34 -45 -82 37) -82]
Test Case: 737 | Input/Output: [(-10 -59 61 -23) -59]
Test Case: 738 | Input/Output: [(64 100 -76 -89) -89]
Test Case: 739 | Input/Output: [(63 68 47 96) 47]
Test Case: 740 | Input/Output: [(2 51 -5 -8) -8]
Test Case: 741 | Input/Output: [(52 42 -74 9) -74]
Test Case: 742 | Input/Output: [(-31 -42 -36 53) -42]
Test Case: 743 | Input/Output: [(-57 3 95 56) -57]
Test Case: 744 | Input/Output: [(-55 49 73 -37) -55]
Test Case: 745 | Input/Output: [(76 -76 -5 -6) -76]
Test Case: 746 | Input/Output: [(48 -40 -41 72) -41]
Test Case: 747 | Input/Output: [(-1 -8 -49 11) -49]
Test Case: 748 | Input/Output: [(-87 70 56 -63) -87]
Test Case: 749 | Input/Output: [(-34 4 -53 -15) -53]
Test Case: 750 | Input/Output: [(23 -54 -61 6) -61]
Test Case: 751 | Input/Output: [(-46 56 -60 80) -60]
Test Case: 752 | Input/Output: [(-15 98 -72 -10) -72]
Test Case: 753 | Input/Output: [(89 -19 -54 99) -54]
Test Case: 754 | Input/Output: [(-14 46 19 18) -14]
Test Case: 755 | Input/Output: [(85 -1 53 54) -1]
Test Case: 756 | Input/Output: [(35 -80 -73 65) -80]
Test Case: 757 | Input/Output: [(84 3 -47 60) -47]
Test Case: 758 | Input/Output: [(56 16 -89 -26) -89]
Test Case: 759 | Input/Output: [(49 75 51 32) 32]
Test Case: 760 | Input/Output: [(72 -2 -81 29) -81]
Test Case: 761 | Input/Output: [(91 74 -67 -1) -67]
Test Case: 762 | Input/Output: [(76 -84 2 32) -84]
Test Case: 763 | Input/Output: [(32 -33 -95 -32) -95]
Test Case: 764 | Input/Output: [(84 8 80 20) 8]
Test Case: 765 | Input/Output: [(95 -75 -66 98) -75]
Test Case: 766 | Input/Output: [(-57 -12 49 -54) -57]
Test Case: 767 | Input/Output: [(-98 -71 5 -75) -98]
Test Case: 768 | Input/Output: [(-26 78 70 -55) -55]
Test Case: 769 | Input/Output: [(3 -18 86 -38) -38]
Test Case: 770 | Input/Output: [(65 97 -82 -19) -82]
Test Case: 771 | Input/Output: [(-19 46 -22 -12) -22]
Test Case: 772 | Input/Output: [(-66 -59 -68 76) -68]
Test Case: 773 | Input/Output: [(-3 28 11 25) -3]
Test Case: 774 | Input/Output: [(-53 44 -6 -23) -53]
Test Case: 775 | Input/Output: [(96 46 84 9) 9]
Test Case: 776 | Input/Output: [(1 -75 -17 49) -75]
Test Case: 777 | Input/Output: [(96 72 24 -61) -61]
Test Case: 778 | Input/Output: [(-42 -6 -67 32) -67]
Test Case: 779 | Input/Output: [(-20 60 38 52) -20]
Test Case: 780 | Input/Output: [(-26 -38 -25 14) -38]
Test Case: 781 | Input/Output: [(28 98 60 63) 28]
Test Case: 782 | Input/Output: [(34 -12 -56 -65) -65]
Test Case: 783 | Input/Output: [(71 36 -44 100) -44]
Test Case: 784 | Input/Output: [(-19 84 67 31) -19]
Test Case: 785 | Input/Output: [(73 -3 10 -91) -91]
Test Case: 786 | Input/Output: [(91 92 34 -54) -54]
Test Case: 787 | Input/Output: [(32 71 -52 55) -52]
Test Case: 788 | Input/Output: [(16 -38 66 70) -38]
Test Case: 789 | Input/Output: [(69 54 65 -63) -63]
Test Case: 790 | Input/Output: [(76 9 69 -37) -37]
Test Case: 791 | Input/Output: [(64 -57 11 92) -57]
Test Case: 792 | Input/Output: [(-44 -64 30 10) -64]
Test Case: 793 | Input/Output: [(-52 -60 -92 15) -92]
Test Case: 794 | Input/Output: [(-92 -86 3 -24) -92]
Test Case: 795 | Input/Output: [(-89 76 39 92) -89]
Test Case: 796 | Input/Output: [(-42 -2 42 -7) -42]
Test Case: 797 | Input/Output: [(51 -42 15 -16) -42]
Test Case: 798 | Input/Output: [(-8 -49 97 -99) -99]
Test Case: 799 | Input/Output: [(25 -78 60 -7) -78]
Test Case: 800 | Input/Output: [(-7 -96 45 -70) -96]
Test Case: 801 | Input/Output: [(-21 -43 -23 43) -43]
Test Case: 802 | Input/Output: [(-1 -86 -5 24) -86]
Test Case: 803 | Input/Output: [(-41 66 -98 -94) -98]
Test Case: 804 | Input/Output: [(-84 55 62 81) -84]
Test Case: 805 | Input/Output: [(-19 -73 -61 -100) -100]
Test Case: 806 | Input/Output: [(-46 -78 -52 20) -78]
Test Case: 807 | Input/Output: [(70 16 -25 -8) -25]
Test Case: 808 | Input/Output: [(48 85 86 37) 37]
Test Case: 809 | Input/Output: [(-85 25 -57 37) -85]
Test Case: 810 | Input/Output: [(92 -42 49 -71) -71]
Test Case: 811 | Input/Output: [(-98 -96 55 -74) -98]
Test Case: 812 | Input/Output: [(95 18 -6 -88) -88]
Test Case: 813 | Input/Output: [(88 -14 -28 -36) -36]
Test Case: 814 | Input/Output: [(-70 17 -2 65) -70]
Test Case: 815 | Input/Output: [(11 45 -7 -50) -50]
Test Case: 816 | Input/Output: [(-31 97 40 55) -31]
Test Case: 817 | Input/Output: [(91 0 -78 5) -78]
Test Case: 818 | Input/Output: [(38 -3 100 12) -3]
Test Case: 819 | Input/Output: [(30 -97 84 14) -97]
Test Case: 820 | Input/Output: [(-23 39 27 44) -23]
Test Case: 821 | Input/Output: [(100 83 96 -75) -75]
Test Case: 822 | Input/Output: [(6 70 31 -60) -60]
Test Case: 823 | Input/Output: [(73 65 43 25) 25]
Test Case: 824 | Input/Output: [(-78 -92 84 -59) -92]
Test Case: 825 | Input/Output: [(-64 0 -20 -44) -64]
Test Case: 826 | Input/Output: [(26 51 -61 71) -61]
Test Case: 827 | Input/Output: [(-23 93 99 65) -23]
Test Case: 828 | Input/Output: [(-23 98 -59 34) -59]
Test Case: 829 | Input/Output: [(15 -45 -53 45) -53]
Test Case: 830 | Input/Output: [(-44 44 -45 -13) -45]
Test Case: 831 | Input/Output: [(-22 -1 57 -74) -74]
Test Case: 832 | Input/Output: [(11 99 61 68) 11]
Test Case: 833 | Input/Output: [(-73 -52 3 -58) -73]
Test Case: 834 | Input/Output: [(-30 15 -32 37) -32]
Test Case: 835 | Input/Output: [(-40 -89 3 5) -89]
Test Case: 836 | Input/Output: [(95 59 -60 -43) -60]
Test Case: 837 | Input/Output: [(-14 -78 66 -23) -78]
Test Case: 838 | Input/Output: [(-25 1 73 55) -25]
Test Case: 839 | Input/Output: [(-54 1 27 -92) -92]
Test Case: 840 | Input/Output: [(38 74 19 10) 10]
Test Case: 841 | Input/Output: [(-15 59 -10 17) -15]
Test Case: 842 | Input/Output: [(18 77 62 66) 18]
Test Case: 843 | Input/Output: [(6 69 -8 -77) -77]
Test Case: 844 | Input/Output: [(-88 9 -57 -5) -88]
Test Case: 845 | Input/Output: [(-16 -93 31 -61) -93]
Test Case: 846 | Input/Output: [(-15 -8 69 -87) -87]
Test Case: 847 | Input/Output: [(-19 -77 -16 -77) -77]
Test Case: 848 | Input/Output: [(-15 -30 -75 -19) -75]
Test Case: 849 | Input/Output: [(-52 -43 85 68) -52]
Test Case: 850 | Input/Output: [(-29 1 -38 48) -38]
Test Case: 851 | Input/Output: [(69 -85 -31 35) -85]
Test Case: 852 | Input/Output: [(64 60 34 25) 25]
Test Case: 853 | Input/Output: [(-35 -75 -62 28) -75]
Test Case: 854 | Input/Output: [(97 95 21 -37) -37]
Test Case: 855 | Input/Output: [(93 38 70 -88) -88]
Test Case: 856 | Input/Output: [(67 39 44 84) 39]
Test Case: 857 | Input/Output: [(80 -25 14 -63) -63]
Test Case: 858 | Input/Output: [(-60 53 55 68) -60]
Test Case: 859 | Input/Output: [(-89 -27 -93 11) -93]
Test Case: 860 | Input/Output: [(-88 -26 3 48) -88]
Test Case: 861 | Input/Output: [(99 64 -98 -80) -98]
Test Case: 862 | Input/Output: [(51 61 10 72) 10]
Test Case: 863 | Input/Output: [(-12 -20 69 -38) -38]
Test Case: 864 | Input/Output: [(78 -59 20 5) -59]
Test Case: 865 | Input/Output: [(-17 -40 61 -79) -79]
Test Case: 866 | Input/Output: [(-38 9 76 53) -38]
Test Case: 867 | Input/Output: [(41 27 -40 -90) -90]
Test Case: 868 | Input/Output: [(77 45 -1 78) -1]
Test Case: 869 | Input/Output: [(69 36 -61 -66) -66]
Test Case: 870 | Input/Output: [(-93 -39 9 -93) -93]
Test Case: 871 | Input/Output: [(-50 -18 53 -74) -74]
Test Case: 872 | Input/Output: [(26 24 -52 -84) -84]
Test Case: 873 | Input/Output: [(91 19 80 -61) -61]
Test Case: 874 | Input/Output: [(-9 51 3 -83) -83]
Test Case: 875 | Input/Output: [(49 -70 -34 -6) -70]
Test Case: 876 | Input/Output: [(-48 8 51 40) -48]
Test Case: 877 | Input/Output: [(25 30 99 92) 25]
Test Case: 878 | Input/Output: [(82 5 3 55) 3]
Test Case: 879 | Input/Output: [(23 -4 -86 83) -86]
Test Case: 880 | Input/Output: [(-55 74 6 93) -55]
Test Case: 881 | Input/Output: [(-50 84 18 94) -50]
Test Case: 882 | Input/Output: [(-93 49 63 61) -93]
Test Case: 883 | Input/Output: [(-32 70 18 79) -32]
Test Case: 884 | Input/Output: [(-98 -63 25 -57) -98]
Test Case: 885 | Input/Output: [(14 0 58 90) 0]
Test Case: 886 | Input/Output: [(-66 -72 77 -78) -78]
Test Case: 887 | Input/Output: [(-71 -11 11 82) -71]
Test Case: 888 | Input/Output: [(-53 90 -23 22) -53]
Test Case: 889 | Input/Output: [(-4 0 77 -47) -47]
Test Case: 890 | Input/Output: [(22 79 -33 -78) -78]
Test Case: 891 | Input/Output: [(-91 -86 23 41) -91]
Test Case: 892 | Input/Output: [(-43 -88 -44 52) -88]
Test Case: 893 | Input/Output: [(16 78 7 -90) -90]
Test Case: 894 | Input/Output: [(-71 -41 64 -54) -71]
Test Case: 895 | Input/Output: [(-5 32 73 -10) -10]
Test Case: 896 | Input/Output: [(-68 43 47 -90) -90]
Test Case: 897 | Input/Output: [(-57 -14 -33 68) -57]
Test Case: 898 | Input/Output: [(-31 44 -77 6) -77]
Test Case: 899 | Input/Output: [(31 97 15 51) 15]
Test Case: 900 | Input/Output: [(15 -30 25 25) -30]
Test Case: 901 | Input/Output: [(-25 -44 -38 16) -44]
Test Case: 902 | Input/Output: [(-10 -70 81 94) -70]
Test Case: 903 | Input/Output: [(-63 -81 -34 90) -81]
Test Case: 904 | Input/Output: [(21 -57 94 -52) -57]
Test Case: 905 | Input/Output: [(100 29 -87 37) -87]
Test Case: 906 | Input/Output: [(29 62 -99 -67) -99]
Test Case: 907 | Input/Output: [(-45 6 7 22) -45]
Test Case: 908 | Input/Output: [(-22 37 -52 44) -52]
Test Case: 909 | Input/Output: [(-75 -48 100 -79) -79]
Test Case: 910 | Input/Output: [(16 -18 66 90) -18]
Test Case: 911 | Input/Output: [(15 -83 -52 22) -83]
Test Case: 912 | Input/Output: [(-17 53 -30 -23) -30]
Test Case: 913 | Input/Output: [(26 -89 -83 -51) -89]
Test Case: 914 | Input/Output: [(-3 3 56 -71) -71]
Test Case: 915 | Input/Output: [(-96 -91 -15 75) -96]
Test Case: 916 | Input/Output: [(-70 -47 -45 19) -70]
Test Case: 917 | Input/Output: [(-70 27 98 -40) -70]
Test Case: 918 | Input/Output: [(-49 43 59 84) -49]
Test Case: 919 | Input/Output: [(43 12 5 27) 5]
Test Case: 920 | Input/Output: [(-79 21 -7 36) -79]
Test Case: 921 | Input/Output: [(28 25 16 -38) -38]
Test Case: 922 | Input/Output: [(-41 -86 29 39) -86]
Test Case: 923 | Input/Output: [(-92 15 55 83) -92]
Test Case: 924 | Input/Output: [(63 -36 43 -9) -36]
Test Case: 925 | Input/Output: [(19 22 -57 -57) -57]
Test Case: 926 | Input/Output: [(-72 64 62 52) -72]
Test Case: 927 | Input/Output: [(60 -38 78 63) -38]
Test Case: 928 | Input/Output: [(-34 -78 -20 -7) -78]
Test Case: 929 | Input/Output: [(54 44 69 39) 39]
Test Case: 930 | Input/Output: [(76 -40 12 8) -40]
Test Case: 931 | Input/Output: [(-74 54 26 -34) -74]
Test Case: 932 | Input/Output: [(-63 -17 -40 96) -63]
Test Case: 933 | Input/Output: [(-100 59 -40 -67) -100]
Test Case: 934 | Input/Output: [(80 -80 -7 -8) -80]
Test Case: 935 | Input/Output: [(85 72 -16 -33) -33]
Test Case: 936 | Input/Output: [(12 19 82 -76) -76]
Test Case: 937 | Input/Output: [(-2 88 -30 86) -30]
Test Case: 938 | Input/Output: [(-38 57 -94 -25) -94]
Test Case: 939 | Input/Output: [(-64 41 -77 47) -77]
Test Case: 940 | Input/Output: [(-59 -94 -5 -100) -100]
Test Case: 941 | Input/Output: [(-48 70 53 97) -48]
Test Case: 942 | Input/Output: [(63 21 21 -67) -67]
Test Case: 943 | Input/Output: [(16 71 -2 -17) -17]
Test Case: 944 | Input/Output: [(94 -22 -97 -60) -97]
Test Case: 945 | Input/Output: [(55 84 72 63) 55]
Test Case: 946 | Input/Output: [(-98 58 51 69) -98]
Test Case: 947 | Input/Output: [(-11 -63 91 62) -63]
Test Case: 948 | Input/Output: [(37 -52 64 -28) -52]
Test Case: 949 | Input/Output: [(-93 94 -7 -12) -93]
Test Case: 950 | Input/Output: [(10 -8 -29 13) -29]
Test Case: 951 | Input/Output: [(-88 36 100 -63) -88]
Test Case: 952 | Input/Output: [(92 86 88 -63) -63]
Test Case: 953 | Input/Output: [(76 56 74 -75) -75]
Test Case: 954 | Input/Output: [(-2 19 29 -32) -32]
Test Case: 955 | Input/Output: [(-23 11 12 9) -23]
Test Case: 956 | Input/Output: [(-92 91 -78 91) -92]
Test Case: 957 | Input/Output: [(9 -41 83 35) -41]
Test Case: 958 | Input/Output: [(72 -59 -57 24) -59]
Test Case: 959 | Input/Output: [(-82 -46 81 36) -82]
Test Case: 960 | Input/Output: [(85 17 29 0) 0]
Test Case: 961 | Input/Output: [(-45 80 1 -84) -84]
Test Case: 962 | Input/Output: [(58 -46 -33 -75) -75]
Test Case: 963 | Input/Output: [(70 -98 -17 84) -98]
Test Case: 964 | Input/Output: [(-72 11 -28 -94) -94]
Test Case: 965 | Input/Output: [(-41 -1 -93 11) -93]
Test Case: 966 | Input/Output: [(-57 96 78 -44) -57]
Test Case: 967 | Input/Output: [(-95 45 87 97) -95]
Test Case: 968 | Input/Output: [(22 52 -2 62) -2]
Test Case: 969 | Input/Output: [(-78 -78 -92 28) -92]
Test Case: 970 | Input/Output: [(48 34 26 32) 26]
Test Case: 971 | Input/Output: [(-34 56 47 13) -34]
Test Case: 972 | Input/Output: [(-8 -89 -54 -72) -89]
Test Case: 973 | Input/Output: [(9 -16 42 -54) -54]
Test Case: 974 | Input/Output: [(9 -72 -19 -84) -84]
Test Case: 975 | Input/Output: [(-89 -76 6 -40) -89]
Test Case: 976 | Input/Output: [(21 -49 -2 -99) -99]
Test Case: 977 | Input/Output: [(-67 -63 10 47) -67]
Test Case: 978 | Input/Output: [(-8 31 84 -34) -34]
Test Case: 979 | Input/Output: [(-77 66 -54 -80) -80]
Test Case: 980 | Input/Output: [(50 93 -1 -71) -71]
Test Case: 981 | Input/Output: [(7 85 8 -99) -99]
Test Case: 982 | Input/Output: [(56 -12 34 41) -12]
Test Case: 983 | Input/Output: [(73 12 95 -18) -18]
Test Case: 984 | Input/Output: [(-9 -100 -73 -7) -100]
Test Case: 985 | Input/Output: [(38 82 -30 -58) -58]
Test Case: 986 | Input/Output: [(12 -72 91 -99) -99]
Test Case: 987 | Input/Output: [(45 23 -7 4) -7]
Test Case: 988 | Input/Output: [(4 45 -72 -100) -100]
Test Case: 989 | Input/Output: [(20 -93 -3 22) -93]
Test Case: 990 | Input/Output: [(53 78 -29 16) -29]
Test Case: 991 | Input/Output: [(-74 -8 10 24) -74]
Test Case: 992 | Input/Output: [(-30 3 39 82) -30]
Test Case: 993 | Input/Output: [(-64 -74 -90 36) -90]
Test Case: 994 | Input/Output: [(-68 -97 46 -87) -97]
Test Case: 995 | Input/Output: [(35 -43 -74 -77) -77]
Test Case: 996 | Input/Output: [(-19 62 -66 -76) -76]
Test Case: 997 | Input/Output: [(42 0 -4 -52) -52]
Test Case: 998 | Input/Output: [(-69 60 5 -7) -69]
Test Case: 999 | Input/Output: [(-94 -1 -74 -23) -94]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup gtm_bounce2 vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains genome_step2 string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap exec_s_when_autoconstructing return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list gtm_write_close code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove gtm_inc_delay vector_boolean_pushall genome_append_parent1 zip_insert_left_fromcode gtm_blank1 exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup gtm_read_instruction vector_integer_butlast genome_append1_parent1 vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse gtm_left exec_k gtm_dec_delay vector_integer_yank genome_dub2 float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction genome_parent2_length vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction gtm_read_all integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot exec_k_when_autoconstructing zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times gtm_blank2 gtm_right genome_dup gtm_erase return_code_pop char_swap integer_max gtm_write_all return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank genome_dub1 zip_shove vector_integer_flush vector_integer_subvec gtm_bounce1 vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec genome_step1 zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean code_rand_atom integer_min autoconstructive_code_rand_atom genome_append1_random exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty gtm_read_silent zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean gtm_write_silent char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup gtm_blank0 exec_y_when_autoconstructing float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_append_random genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add genome_append_parent2 code_stackdepth genome_back2 genome_length exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse gtm_read_close integer_swap gtm_dub1 string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair gtm_dub2 print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_back1 genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove genome_append1_parent2 environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth gtm_write_instruction genome_parent1_length vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.20.1-1-SNAPSHOTHash of last Git commit = 98f17fffbd710431b7ffe02918e462d48a2ebada
GitHub link = https://github.com/lspector/Clojush/commit/98f17fffbd710431b7ffe02918e462d48a2ebada
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.smallest$fn__7460 0x30b9728f clojush.problems.software.smallest$fn__7460@30b9728f] #object[clojush.instructions.tag$tag_instruction_erc$fn__2160 0x453a30f8 clojush.instructions.tag$tag_instruction_erc$fn__2160@453a30f8] #object[clojush.instructions.tag$tagged_instruction_erc$fn__2166 0x73a116d clojush.instructions.tag$tagged_instruction_erc$fn__2166@73a116d] in1 in2 in3 in4 print_newline integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup boolean_swap exec_shove exec_y boolean_yank integer_eq integer_mult boolean_or boolean_empty exec_s_when_autoconstructing exec_do*while exec_dup_items boolean_dup_items exec_empty exec_rot exec_dup boolean_flush exec_k boolean_xor integer_gte boolean_dup_times boolean_shove print_boolean boolean_rot integer_div integer_lte integer_mod exec_do*count integer_rot exec_k_when_autoconstructing integer_add integer_shove integer_max integer_stackdepth integer_dup_times boolean_dup exec_dup_times exec_eq integer_yank exec_while integer_min exec_swap integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger print_integer boolean_eq integer_flush exec_y_when_autoconstructing integer_gt boolean_not exec_do*times exec_pop exec_s integer_lt exec_noop integer_swap integer_dup exec_yank integer_pop integer_empty print_exec integer_dec exec_stackdepth boolean_and exec_flush exec_when boolean_invert_second_then_and boolean_yankdup)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-code-rand-atom-enrichment = 0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-enough-new-errors-fraction = 1/2
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
down-sample-factor = 0.1
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-change-recency-limit = 5
error-function = #object[clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478 0x24b8a393 clojush.problems.software.smallest$make_smallest_error_function_from_cases$the_actual_smallest_error_function__7478@24b8a393]
error-threshold = 0
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
gene-selection-rate = 1.0
genetic-operator-probabilities = {:alternation 0.2, :uniform-mutation 0.2, :uniform-close-mutation 0.1, [:alternation :uniform-mutation] 0.5}
genome-representation = :plush
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1
max-generations = 2000.0
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :lexicase
plushy-close-probability = :automatic
pop-when-tagging = true
population-size = 1000
preserve-frontier = false
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.smallest$smallest_initial_report 0x20be793a clojush.problems.software.smallest$smallest_initial_report@20be793a]
problem-specific-report = #object[clojush.problems.software.smallest$smallest_report 0x9763e61 clojush.problems.software.smallest$smallest_report@9763e61]
random-screen = false
random-seed = 50 37 41 -100 91 -11 99 -26 -62 -19 -71 21 122 -17 20 68
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
selection-delay = false
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
sub-training-cases = ()
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
training-cases = ([(0 0 0 0) 0] [(-44 -44 -7 -13) -44] [(0 4 -99 -33) -99] [(-22 -22 -22 -22) -22] [(99 100 99 100) 99] [[-90 91 91 91] -90] [[86 86 86 44] 44] [[34 -68 -68 -68] -68] [[-25 -46 -25 -25] -46] [[62 62 62 -54] -54] [[26 5 26 26] 5] [[-8 -13 -8 -8] -13] [[57 57 57 33] 33] [[31 -10 31 31] -10] [[74 -95 -95 -95] -95] [(47 47 47 47) 47] [(26 26 26 26) 26] [(50 50 50 50) 50] [(35 35 35 35) 35] [(-43 -43 -43 -43) -43] [(87 64 23 83) 23] [(29 0 6 83) 0] [(90 73 42 78) 42] [(23 88 50 60) 23] [(31 87 31 97) 31] [(20 48 30 47) 20] [(86 9 67 26) 9] [(33 59 16 78) 16] [(15 57 75 22) 15] [(43 3 2 73) 2] [(46 29 23 95) 23] [(10 16 37 16) 10] [(52 30 1 91) 1] [(34 78 97 97) 34] [(20 41 60 82) 20] [(70 15 9 100) 9] [(42 72 3 78) 3] [(39 28 76 81) 28] [(14 18 42 62) 14] [(46 51 50 47) 46] [(-96 82 50 36) -96] [(-61 -53 93 -25) -61] [(-19 86 -78 -71) -78] [(-19 0 55 -91) -91] [(55 -95 21 34) -95] [(28 -73 -84 -65) -84] [(-51 -71 -66 -50) -71] [(-74 98 40 12) -74] [(-60 10 18 42) -60] [(100 -12 20 -55) -55] [(-42 97 14 -41) -42] [(47 -75 -76 47) -76] [(27 -95 -86 -93) -95] [(87 0 85 -96) -96] [(-43 22 35 -38) -43] [(-45 97 20 98) -45] [(-56 10 16 81) -56] [(-75 -1 30 -46) -75] [(-87 -55 27 -23) -87] [(-81 44 55 41) -81] [(-82 -90 -20 79) -90] [(-64 -19 61 -33) -64] [(-41 -75 -43 -62) -75] [(35 -3 -97 -46) -97] [(59 -47 -41 -54) -54] [(56 3 -95 -10) -95] [(35 -21 -97 52) -97] [(-52 73 -85 -40) -85] [(-81 61 51 77) -81] [(10 -19 65 -19) -19] [(95 24 -58 82) -58] [(29 -46 67 -42) -46] [(-78 96 -15 -42) -78] [(-93 59 56 25) -93] [(18 -8 -35 -62) -62] [(-90 -1 -47 -82) -90] [(85 -70 74 100) -70] [(-9 61 -28 32) -28] [(-20 -82 15 -25) -82] [(74 -5 17 19) -5] [(-45 87 6 68) -45] [(83 -11 -23 -20) -23] [(92 92 -61 -30) -61] [(-26 23 -55 79) -55] [(-4 33 -95 63) -95] [(-82 88 94 -6) -82] [(-65 4 57 7) -65] [(-36 10 23 29) -36] [(60 -4 -53 41) -53] [(79 63 -34 72) -34] [(97 54 -17 86) -17] [(-82 -70 47 75) -82] [(-49 -16 90 -12) -49] [(8 -36 71 -54) -54] [(78 -71 76 -54) -71] [(18 -15 3 36) -15] [(44 55 28 -73) -73] [(-22 38 13 -83) -83] [(13 80 62 -63) -63] [(-53 -87 -9 -33) -87])
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false
visualize = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Smallest problem report - generation 0
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 44                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 83                 
Correct output: 0                   | Program output: 83                 
Correct output: 42                  | Program output: 78                 
Correct output: 23                  | Program output: 60                 
Correct output: 31                  | Program output: 97                 
Correct output: 20                  | Program output: 47                 
Correct output: 9                   | Program output: 26                 
Correct output: 16                  | Program output: 78                 
Correct output: 15                  | Program output: 22                 
Correct output: 2                   | Program output: 73                 
Correct output: 23                  | Program output: 95                 
Correct output: 10                  | Program output: 16                 
Correct output: 1                   | Program output: 91                 
Correct output: 34                  | Program output: 97                 
Correct output: 20                  | Program output: 82                 
Correct output: 9                   | Program output: 100                
Correct output: 3                   | Program output: 78                 
Correct output: 28                  | Program output: 81                 
Correct output: 14                  | Program output: 62                 
Correct output: 46                  | Program output: 47                 
Correct output: -96                 | Program output: 36                 
Correct output: -61                 | Program output: -25                
Correct output: -78                 | Program output: -71                
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: 34                 
Correct output: -84                 | Program output: -65                
Correct output: -71                 | Program output: -50                
Correct output: -74                 | Program output: 12                 
Correct output: -60                 | Program output: 42                 
Correct output: -55                 | Program output: -55                
Correct output: -42                 | Program output: -41                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: -93                
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: -38                
Correct output: -45                 | Program output: 98                 
Correct output: -56                 | Program output: 81                 
Correct output: -75                 | Program output: -46                
Correct output: -87                 | Program output: -23                
Correct output: -81                 | Program output: 41                 
Correct output: -90                 | Program output: 79                 
Correct output: -64                 | Program output: -33                
Correct output: -75                 | Program output: -62                
Correct output: -97                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: -10                
Correct output: -97                 | Program output: 52                 
Correct output: -85                 | Program output: -40                
Correct output: -81                 | Program output: 77                 
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: 82                 
Correct output: -46                 | Program output: -42                
Correct output: -78                 | Program output: -42                
Correct output: -93                 | Program output: 25                 
Correct output: -62                 | Program output: -62                
Correct output: -90                 | Program output: -82                
Correct output: -70                 | Program output: 100                
Correct output: -28                 | Program output: 32                 
Correct output: -82                 | Program output: -25                
Correct output: -5                  | Program output: 19                 
Correct output: -45                 | Program output: 68                 
Correct output: -23                 | Program output: -20                
Correct output: -61                 | Program output: -30                
Correct output: -55                 | Program output: 79                 
Correct output: -95                 | Program output: 63                 
Correct output: -82                 | Program output: -6                 
Correct output: -65                 | Program output: 7                  
Correct output: -36                 | Program output: 29                 
Correct output: -53                 | Program output: 41                 
Correct output: -34                 | Program output: 72                 
Correct output: -17                 | Program output: 86                 
Correct output: -82                 | Program output: 75                 
Correct output: -49                 | Program output: -12                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -54                
Correct output: -15                 | Program output: 36                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -63                 | Program output: -63                
Correct output: -87                 | Program output: -33                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_523} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_992} {:close 0, :instruction boolean_or} {:close 0, :instruction in3} {:close 0, :instruction print_exec})
Lexicase best program: (integer_max exec_y_when_autoconstructing (exec_stackdepth) integer_max tag_boolean_523 integer_min in4 exec_if (print_integer) (exec_do*while (exec_dup () integer_swap integer_fromboolean boolean_yank exec_while (print_boolean exec_dup_times (print_boolean boolean_and exec_if (integer_shove integer_sub exec_dup (boolean_rot) integer_stackdepth in2) (integer_inc tagged_992 boolean_or in3 print_exec ()))))))
Lexicase best errors: [1 0 1 0 0 0 1 1 1 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 43
Percent parens: 0.279
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_523} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_992} {:close 0, :instruction boolean_or} {:close 0, :instruction in3} {:close 0, :instruction print_exec})
Zero cases best program: (integer_max exec_y_when_autoconstructing (exec_stackdepth) integer_max tag_boolean_523 integer_min in4 exec_if (print_integer) (exec_do*while (exec_dup () integer_swap integer_fromboolean boolean_yank exec_while (print_boolean exec_dup_times (print_boolean boolean_and exec_if (integer_shove integer_sub exec_dup (boolean_rot) integer_stackdepth in2) (integer_inc tagged_992 boolean_or in3 print_exec ()))))))
Zero cases best errors: [1 0 1 0 0 0 1 1 1 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 43
Percent parens: 0.279
--- Lexicase Population Statistics ---
Count of elite individuals by case: (6 22 3 11 1 1 6 11 2 1)
Population mean number of elite cases: 0.06
Count of perfect (error zero) individuals by case: (6 22 3 11 1 1 6 11 2 1)
Population mean number of perfect (error zero) cases: 0.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_max} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_max} {:close 0, :instruction tag_boolean_523} {:close 0, :instruction integer_min} {:close 0, :instruction in4} {:close 0, :instruction exec_if} {:close 1, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_if} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_rot} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction in2} {:close 0, :instruction integer_inc} {:close 0, :instruction tagged_992} {:close 0, :instruction boolean_or} {:close 0, :instruction in3} {:close 0, :instruction print_exec})
Best program: (integer_max exec_y_when_autoconstructing (exec_stackdepth) integer_max tag_boolean_523 integer_min in4 exec_if (print_integer) (exec_do*while (exec_dup () integer_swap integer_fromboolean boolean_yank exec_while (print_boolean exec_dup_times (print_boolean boolean_and exec_if (integer_shove integer_sub exec_dup (boolean_rot) integer_stackdepth in2) (integer_inc tagged_992 boolean_or in3 print_exec ()))))))
Errors: [1 0 1 0 0 0 1 1 1 0]
Total: 5
Mean: 0.5
Genome size: 31
Size: 43
Percent parens: 0.279
--- Population Statistics ---
Average total errors in population: 9.936
Median total errors in population: 10
Error averages by case: (0.994 0.978 0.997 0.989 0.999 0.999 0.994 0.989 0.998 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 51.335
Average program size in population (points): 70.832
Average percent parens in population: 0.283
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 2
Genome diversity (% unique genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.293
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 463568
--- Timings ---
Current time: 1559314331551 milliseconds
Total Time:           2.4 seconds
Initialization:       0.1 seconds,  4.8%
Reproduction:         0.8 seconds, 33.2%
Fitness Testing:      1.5 seconds, 62.0%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Smallest problem report - generation 1
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 50                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 30                 
Correct output: 9                   | Program output: 67                 
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 97                 
Correct output: 20                  | Program output: 60                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 76                 
Correct output: 14                  | Program output: 42                 
Correct output: 46                  | Program output: 50                 
Correct output: -96                 | Program output: 50                 
Correct output: -61                 | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: 55                 
Correct output: -95                 | Program output: 21                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: 40                 
Correct output: -60                 | Program output: 18                 
Correct output: -55                 | Program output: 20                 
Correct output: -42                 | Program output: 14                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 85                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 20                 
Correct output: -56                 | Program output: 16                 
Correct output: -75                 | Program output: 30                 
Correct output: -87                 | Program output: 27                 
Correct output: -81                 | Program output: 55                 
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: 61                 
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: 51                 
Correct output: -19                 | Program output: 65                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 67                 
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: 56                 
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 74                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: 15                 
Correct output: -5                  | Program output: 17                 
Correct output: -45                 | Program output: 6                  
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: 94                 
Correct output: -65                 | Program output: 57                 
Correct output: -36                 | Program output: 23                 
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 47                 
Correct output: -49                 | Program output: 90                 
Correct output: -54                 | Program output: 71                 
Correct output: -71                 | Program output: 76                 
Correct output: -15                 | Program output: 3                  
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: 13                 
Correct output: -63                 | Program output: 62                 
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction tagged_695} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_pop} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction in3} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 1, :instruction 90} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop})
Lexicase best program: (in3 print_integer integer_lt tagged_695 exec_shove (exec_pop (exec_pop () boolean_invert_second_then_and)) integer_yankdup integer_div in3 boolean_yankdup boolean_or boolean_invert_second_then_and integer_min integer_add integer_pop exec_shove (boolean_or exec_s (in2 boolean_or integer_add 90) (boolean_not integer_pop integer_empty boolean_and) (exec_empty boolean_and exec_pop ())))
Lexicase best errors: [1 0 0 1 0 0 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 40
Percent parens: 0.225
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction in3} {:close 1, :instruction print_integer} {:close 0, :instruction integer_lt} {:close 1, :instruction tagged_695} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_pop} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_div} {:close 0, :instruction in3} {:close 1, :instruction boolean_yankdup} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_s} {:close 0, :instruction in2} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_add} {:close 1, :instruction 90} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_pop})
Zero cases best program: (in3 print_integer integer_lt tagged_695 exec_shove (exec_pop (exec_pop () boolean_invert_second_then_and)) integer_yankdup integer_div in3 boolean_yankdup boolean_or boolean_invert_second_then_and integer_min integer_add integer_pop exec_shove (boolean_or exec_s (in2 boolean_or integer_add 90) (boolean_not integer_pop integer_empty boolean_and) (exec_empty boolean_and exec_pop ())))
Zero cases best errors: [1 0 0 1 0 0 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 40
Percent parens: 0.225
--- Lexicase Population Statistics ---
Count of elite individuals by case: (212 209 871 212 209 210 212 362 209 87)
Population mean number of elite cases: 2.79
Count of perfect (error zero) individuals by case: (212 209 871 212 209 210 212 362 209 87)
Population mean number of perfect (error zero) cases: 2.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction -44} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 1, :instruction boolean_dup_times})
Best program: (in3 integer_shove print_integer integer_flush boolean_dup_items boolean_dup exec_rot (exec_flush in1 exec_yankdup in1 exec_s (integer_dup) (exec_noop) (-44 boolean_dup_items) integer_min integer_inc boolean_xor exec_dup (exec_do*count (integer_dup_times) integer_stackdepth print_exec (integer_dup_items integer_mult boolean_dup boolean_dup_times))) () ())
Errors: [1 0 0 1 0 0 1 1 0 1]
Total: 5
Mean: 0.5
Genome size: 28
Size: 38
Percent parens: 0.263
--- Population Statistics ---
Average total errors in population: 7.207
Median total errors in population: 8
Error averages by case: (0.788 0.791 0.129 0.788 0.791 0.79 0.788 0.638 0.791 0.913)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.38
Average program size in population (points): 55.663
Average percent parens in population: 0.266
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.484
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 243
Genome diversity (% unique genomes):	 0.457
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 247
Syntactic diversity (% unique Push programs):	 0.445
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 962812
--- Timings ---
Current time: 1559314333871 milliseconds
Total Time:           4.9 seconds
Initialization:       0.1 seconds,  2.3%
Reproduction:         2.3 seconds, 46.5%
Fitness Testing:      2.1 seconds, 42.6%
Report:               0.4 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Smallest problem report - generation 2
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: 34                 
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: 74                 
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: 28                 
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: 27                 
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: 35                 
Correct output: -54                 | Program output: 59                 
Correct output: -95                 | Program output: 56                 
Correct output: -97                 | Program output: 35                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: 95                 
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: 83                 
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 60                 
Correct output: -34                 | Program output: 79                 
Correct output: -17                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 92} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_sub} {:close 1, :instruction print_exec} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_eq})
Lexicase best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup (exec_rot (boolean_dup_times boolean_stackdepth in1 print_integer integer_dec exec_rot (integer_fromboolean exec_empty integer_dec boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod integer_eq print_integer)) exec_do*count () integer_pop) boolean_stackdepth 92 integer_dec boolean_yankdup exec_eq exec_dup_times (integer_shove boolean_flush exec_when (exec_swap () (exec_while (exec_dup_items boolean_swap in1 exec_dup_items boolean_invert_second_then_and boolean_yankdup integer_stackdepth exec_dup_items print_boolean boolean_flush in2 in3 exec_y_when_autoconstructing (boolean_pop) integer_pop integer_inc) integer_dec) boolean_stackdepth exec_empty exec_rot () (integer_swap boolean_or) (exec_do*while (integer_yankdup print_newline boolean_xor) integer_sub print_exec () integer_mod boolean_rot integer_div exec_y (boolean_pop boolean_rot boolean_pop exec_do*count () exec_s_when_autoconstructing (exec_dup_items integer_eq exec_yank integer_min boolean_invert_second_then_and boolean_dup_times exec_dup (integer_eq)) () ())))))) ()) () ()))
Lexicase best errors: [1 1 1 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 117
Percent parens: 0.265
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 92} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_sub} {:close 1, :instruction print_exec} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_eq})
Zero cases best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup (exec_rot (boolean_dup_times boolean_stackdepth in1 print_integer integer_dec exec_rot (integer_fromboolean exec_empty integer_dec boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod integer_eq print_integer)) exec_do*count () integer_pop) boolean_stackdepth 92 integer_dec boolean_yankdup exec_eq exec_dup_times (integer_shove boolean_flush exec_when (exec_swap () (exec_while (exec_dup_items boolean_swap in1 exec_dup_items boolean_invert_second_then_and boolean_yankdup integer_stackdepth exec_dup_items print_boolean boolean_flush in2 in3 exec_y_when_autoconstructing (boolean_pop) integer_pop integer_inc) integer_dec) boolean_stackdepth exec_empty exec_rot () (integer_swap boolean_or) (exec_do*while (integer_yankdup print_newline boolean_xor) integer_sub print_exec () integer_mod boolean_rot integer_div exec_y (boolean_pop boolean_rot boolean_pop exec_do*count () exec_s_when_autoconstructing (exec_dup_items integer_eq exec_yank integer_min boolean_invert_second_then_and boolean_dup_times exec_dup (integer_eq)) () ())))))) ()) () ()))
Zero cases best errors: [1 1 1 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 117
Percent parens: 0.265
--- Lexicase Population Statistics ---
Count of elite individuals by case: (395 395 296 70 70 70 70 394 67 394)
Population mean number of elite cases: 2.22
Count of perfect (error zero) individuals by case: (395 395 296 70 70 70 70 394 67 394)
Population mean number of perfect (error zero) cases: 2.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 92} {:close 0, :instruction integer_dec} {:close 0, :instruction tagged_378} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_exec_321} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_733} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline})
Best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup (exec_rot (boolean_dup_times boolean_stackdepth in1 print_integer boolean_pop exec_rot (integer_fromboolean exec_empty integer_dec boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod integer_eq print_integer)) exec_do*count () integer_pop) boolean_stackdepth 92 integer_dec tagged_378 integer_inc integer_lte exec_empty) integer_dup_times) (integer_lte tag_exec_321 (integer_dec) exec_stackdepth exec_dup () boolean_flush) integer_dup_items integer_rot boolean_yankdup exec_y (integer_eq exec_k_when_autoconstructing (in1 print_integer boolean_yank exec_do*range (boolean_shove tagged_733 integer_yank exec_pop (integer_lt boolean_yankdup exec_do*times (in2 boolean_pop exec_eq exec_shove (integer_shove print_integer in4) boolean_eq integer_min) boolean_shove print_boolean in3 boolean_frominteger boolean_dup_times) integer_shove integer_lte) integer_flush exec_flush exec_eq print_newline) ())) () ()))
Errors: [1 1 1 0 0 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 81
Size: 104
Percent parens: 0.221
--- Population Statistics ---
Average total errors in population: 7.779
Median total errors in population: 9
Error averages by case: (0.605 0.605 0.704 0.93 0.93 0.93 0.93 0.606 0.933 0.606)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.944
Average program size in population (points): 54.63
Average percent parens in population: 0.261
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.926
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 77
Genome diversity (% unique genomes):	 0.595
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.578
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 1528124
--- Timings ---
Current time: 1559314337539 milliseconds
Total Time:           7.9 seconds
Initialization:       0.1 seconds,  1.5%
Reproduction:         4.4 seconds, 56.6%
Fitness Testing:      2.7 seconds, 33.8%
Report:               0.6 seconds,  8.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Smallest problem report - generation 3
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: 34                 
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: 74                 
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: 28                 
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: 27                 
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: 35                 
Correct output: -54                 | Program output: 59                 
Correct output: -95                 | Program output: 56                 
Correct output: -97                 | Program output: 35                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: 95                 
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: 83                 
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 60                 
Correct output: -34                 | Program output: 79                 
Correct output: -17                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 92} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_sub} {:close 1, :instruction print_exec} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_eq})
Lexicase best program: (exec_dup_times () exec_dup_items boolean_flush integer_sub exec_rot (boolean_dup_times boolean_stackdepth in1 print_integer boolean_pop exec_rot (integer_fromboolean exec_empty integer_dec boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod integer_eq print_integer)) exec_do*count () integer_pop) boolean_stackdepth 92 integer_dec boolean_yankdup exec_eq exec_dup_times (integer_shove boolean_flush exec_when (exec_swap () (exec_while (exec_dup_items boolean_swap in1 exec_dup_items boolean_invert_second_then_and boolean_yankdup integer_stackdepth exec_dup_items print_boolean boolean_flush in2 in3 exec_y_when_autoconstructing (boolean_pop integer_pop integer_inc) integer_dec) boolean_stackdepth exec_empty exec_rot () (integer_swap boolean_or) (exec_do*while (integer_yankdup print_newline boolean_xor) integer_sub print_exec () integer_mod boolean_rot integer_div exec_y (boolean_pop boolean_rot boolean_pop exec_do*count () exec_s_when_autoconstructing (exec_dup_items integer_eq exec_yank integer_min boolean_invert_second_then_and boolean_dup_times exec_dup (integer_eq)) () ()))))))) ()) () ())
Lexicase best errors: [0 0 0 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 116
Percent parens: 0.259
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 92} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_sub} {:close 1, :instruction print_exec} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_eq})
Zero cases best program: (exec_dup_times () exec_dup_items boolean_flush integer_sub exec_rot (boolean_dup_times boolean_stackdepth in1 print_integer boolean_pop exec_rot (integer_fromboolean exec_empty integer_dec boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod integer_eq print_integer)) exec_do*count () integer_pop) boolean_stackdepth 92 integer_dec boolean_yankdup exec_eq exec_dup_times (integer_shove boolean_flush exec_when (exec_swap () (exec_while (exec_dup_items boolean_swap in1 exec_dup_items boolean_invert_second_then_and boolean_yankdup integer_stackdepth exec_dup_items print_boolean boolean_flush in2 in3 exec_y_when_autoconstructing (boolean_pop integer_pop integer_inc) integer_dec) boolean_stackdepth exec_empty exec_rot () (integer_swap boolean_or) (exec_do*while (integer_yankdup print_newline boolean_xor) integer_sub print_exec () integer_mod boolean_rot integer_div exec_y (boolean_pop boolean_rot boolean_pop exec_do*count () exec_s_when_autoconstructing (exec_dup_items integer_eq exec_yank integer_min boolean_invert_second_then_and boolean_dup_times exec_dup (integer_eq)) () ()))))))) ()) () ())
Zero cases best errors: [0 0 0 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 116
Percent parens: 0.259
--- Lexicase Population Statistics ---
Count of elite individuals by case: (710 348 791 361 349 348 360 349 1000 791)
Population mean number of elite cases: 5.41
Count of perfect (error zero) individuals by case: (710 348 791 361 349 348 360 349 0 791)
Population mean number of perfect (error zero) cases: 4.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 92} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 1, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_sub})
Best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup (exec_rot (boolean_dup_times boolean_stackdepth in1 print_integer boolean_pop exec_rot (integer_fromboolean exec_empty integer_dec boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod integer_eq print_integer)) exec_do*count () integer_pop) boolean_stackdepth 92 integer_dec boolean_yankdup exec_eq exec_dup_times (integer_shove boolean_flush exec_when (exec_swap () (exec_while (exec_dup_items boolean_swap in1 exec_dup_items boolean_invert_second_then_and boolean_yankdup integer_stackdepth exec_dup_items print_boolean boolean_flush) in2 in3 exec_y_when_autoconstructing (boolean_pop integer_pop integer_inc) integer_dec) boolean_stackdepth exec_empty exec_rot () (integer_swap boolean_or) (exec_do*while (integer_yankdup print_newline boolean_xor) integer_sub))))) ()) () ()))
Errors: [0 0 0 1 0 0 1 0 1 0]
Total: 3
Mean: 0.3
Genome size: 68
Size: 92
Percent parens: 0.261
--- Population Statistics ---
Average total errors in population: 5.593
Median total errors in population: 5
Error averages by case: (0.29 0.652 0.209 0.639 0.651 0.652 0.64 0.651 1.0 0.209)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 55.155
Average program size in population (points): 72.924
Average percent parens in population: 0.249
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.36325
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 37
Genome diversity (% unique genomes):	 0.726
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.712
Total error diversity:				 0.008
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 2208992
--- Timings ---
Current time: 1559314340753 milliseconds
Total Time:          11.1 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         6.2 seconds, 55.5%
Fitness Testing:      3.3 seconds, 29.3%
Report:               1.6 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Smallest problem report - generation 4
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: 34                 
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: 74                 
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: 28                 
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: 27                 
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: 35                 
Correct output: -54                 | Program output: 59                 
Correct output: -95                 | Program output: 56                 
Correct output: -97                 | Program output: 35                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: 95                 
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: 83                 
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 60                 
Correct output: -34                 | Program output: 79                 
Correct output: -17                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction print_integer} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction in3} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction exec_while} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_while} {:close 0, :instruction tagged_378} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_exec_321} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_733} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and})
Lexicase best program: (print_integer exec_k_when_autoconstructing () (boolean_swap integer_min print_boolean exec_dup_items integer_lte boolean_stackdepth boolean_xor integer_dec exec_if (exec_while (in3 boolean_yankdup boolean_invert_second_then_and integer_stackdepth) integer_dup in3) (exec_while (exec_k () (exec_while (integer_inc) integer_eq boolean_or integer_gt) exec_swap () (integer_gte boolean_shove integer_dup_times) integer_pop integer_yank exec_do*range () exec_while () tagged_378 integer_inc integer_lte exec_empty) integer_dup_times) integer_lte tag_exec_321 (integer_dec) exec_stackdepth exec_dup () boolean_flush) integer_dup_items integer_rot boolean_yankdup exec_y (integer_eq exec_k_when_autoconstructing (in1 print_integer boolean_yank exec_do*range (boolean_shove tagged_733 integer_yank exec_pop (integer_lt boolean_yankdup exec_do*times (in2 boolean_pop exec_eq exec_shove (integer_shove print_integer in4) boolean_eq integer_min) boolean_shove print_boolean in3 boolean_frominteger boolean_dup_times) integer_shove integer_lte) integer_flush exec_flush exec_eq print_newline boolean_or) (boolean_invert_first_then_and)))
Lexicase best errors: [0 0 1 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 106
Percent parens: 0.217
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction print_integer} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction in3} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction exec_while} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_while} {:close 0, :instruction tagged_378} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_exec_321} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_733} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and})
Zero cases best program: (print_integer exec_k_when_autoconstructing () (boolean_swap integer_min print_boolean exec_dup_items integer_lte boolean_stackdepth boolean_xor integer_dec exec_if (exec_while (in3 boolean_yankdup boolean_invert_second_then_and integer_stackdepth) integer_dup in3) (exec_while (exec_k () (exec_while (integer_inc) integer_eq boolean_or integer_gt) exec_swap () (integer_gte boolean_shove integer_dup_times) integer_pop integer_yank exec_do*range () exec_while () tagged_378 integer_inc integer_lte exec_empty) integer_dup_times) integer_lte tag_exec_321 (integer_dec) exec_stackdepth exec_dup () boolean_flush) integer_dup_items integer_rot boolean_yankdup exec_y (integer_eq exec_k_when_autoconstructing (in1 print_integer boolean_yank exec_do*range (boolean_shove tagged_733 integer_yank exec_pop (integer_lt boolean_yankdup exec_do*times (in2 boolean_pop exec_eq exec_shove (integer_shove print_integer in4) boolean_eq integer_min) boolean_shove print_boolean in3 boolean_frominteger boolean_dup_times) integer_shove integer_lte) integer_flush exec_flush exec_eq print_newline boolean_or) (boolean_invert_first_then_and)))
Zero cases best errors: [0 0 1 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 106
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (776 453 1 451 451 451 451 325 1000 1000)
Population mean number of elite cases: 5.36
Count of perfect (error zero) individuals by case: (776 453 1 451 451 451 451 325 0 0)
Population mean number of perfect (error zero) cases: 3.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 92} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yankdup} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_sub} {:close 1, :instruction print_exec} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 1, :instruction boolean_pop} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_eq})
Best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup (exec_rot (boolean_dup_times boolean_stackdepth in1 print_integer boolean_pop exec_rot (integer_fromboolean exec_empty integer_dec boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod integer_eq print_integer)) exec_do*count () integer_pop) boolean_stackdepth 92 integer_dec boolean_yankdup exec_eq exec_dup_times (integer_shove boolean_flush exec_when (exec_swap () (exec_while (exec_dup_items boolean_swap in1 exec_dup_items boolean_invert_second_then_and boolean_yankdup integer_stackdepth exec_dup_items print_boolean boolean_flush in2 in3 exec_y_when_autoconstructing (boolean_pop integer_pop integer_inc) integer_dec) integer_add exec_empty exec_rot () (integer_dup_items boolean_or) (exec_do*while (integer_yankdup print_newline boolean_xor) integer_sub print_exec () integer_mod boolean_rot integer_div exec_y (boolean_pop boolean_rot boolean_pop) exec_do*count () exec_s_when_autoconstructing (exec_dup_items integer_eq exec_yank integer_min boolean_invert_second_then_and boolean_dup_times exec_dup (integer_eq)) () ())))))) ()) () ()))
Errors: [0 0 1 0 0 0 0 1 1 1]
Total: 4
Mean: 0.4
Genome size: 86
Size: 117
Percent parens: 0.265
--- Population Statistics ---
Average total errors in population: 6.641
Median total errors in population: 8
Error averages by case: (0.224 0.547 0.999 0.549 0.549 0.549 0.549 0.675 1.0 1.0)
Error minima by case: (0 0 0 0 0 0 0 0 1 1)
Average genome size in population (length): 58.62
Average program size in population (points): 77.619
Average percent parens in population: 0.248
Minimum age in population: 4.0
Maximum age in population: 7.5
Average age in population: 5.808625
Median age in population: 5.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 24
Genome diversity (% unique genomes):	 0.812
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.799
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.09
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 2928882
--- Timings ---
Current time: 1559314344012 milliseconds
Total Time:          14.4 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         8.0 seconds, 55.3%
Fitness Testing:      3.9 seconds, 26.9%
Report:               2.4 seconds, 17.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Smallest problem report - generation 5
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 50                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 30                 
Correct output: 9                   | Program output: 67                 
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 97                 
Correct output: 20                  | Program output: 60                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 76                 
Correct output: 14                  | Program output: 42                 
Correct output: 46                  | Program output: 50                 
Correct output: -96                 | Program output: 50                 
Correct output: -61                 | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: 55                 
Correct output: -95                 | Program output: 21                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: 40                 
Correct output: -60                 | Program output: 18                 
Correct output: -55                 | Program output: 20                 
Correct output: -42                 | Program output: 14                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 85                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 20                 
Correct output: -56                 | Program output: 16                 
Correct output: -75                 | Program output: 30                 
Correct output: -87                 | Program output: 27                 
Correct output: -81                 | Program output: 55                 
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: 61                 
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: 51                 
Correct output: -19                 | Program output: 65                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 67                 
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: 56                 
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 74                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: 15                 
Correct output: -5                  | Program output: 17                 
Correct output: -45                 | Program output: 6                  
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: 94                 
Correct output: -65                 | Program output: 57                 
Correct output: -36                 | Program output: 23                 
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 47                 
Correct output: -49                 | Program output: 90                 
Correct output: -54                 | Program output: 71                 
Correct output: -71                 | Program output: 76                 
Correct output: -15                 | Program output: 3                  
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: 13                 
Correct output: -63                 | Program output: 62                 
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_do*range})
Lexicase best program: (boolean_swap in3 in2 integer_gte boolean_yank boolean_yank exec_do*count (in3) boolean_rot exec_k_when_autoconstructing () (exec_when (boolean_empty integer_add) boolean_invert_first_then_and) print_integer integer_empty integer_dup_times integer_gt exec_when () in2 integer_gte exec_do*range ())
Lexicase best errors: [0 1 1 1 0 1 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 29
Percent parens: 0.241
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_swap} {:close 1, :instruction in3} {:close 1, :instruction in2} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*count} {:close 1, :instruction in3} {:close 1, :instruction boolean_rot} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_when} {:close 0, :instruction boolean_empty} {:close 1, :instruction integer_add} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_dup_times} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_when} {:close 0, :instruction in2} {:close 2, :instruction integer_gte} {:close 0, :instruction exec_do*range})
Zero cases best program: (boolean_swap in3 in2 integer_gte boolean_yank boolean_yank exec_do*count (in3) boolean_rot exec_k_when_autoconstructing () (exec_when (boolean_empty integer_add) boolean_invert_first_then_and) print_integer integer_empty integer_dup_times integer_gt exec_when () in2 integer_gte exec_do*range ())
Zero cases best errors: [0 1 1 1 0 1 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 29
Percent parens: 0.241
--- Lexicase Population Statistics ---
Count of elite individuals by case: (127 101 1000 1000 127 540 539 127 127 538)
Population mean number of elite cases: 4.23
Count of perfect (error zero) individuals by case: (127 101 0 0 127 540 539 127 127 538)
Population mean number of perfect (error zero) cases: 2.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 0, :instruction exec_s} {:close 1, :instruction integer_dup} {:close 1, :instruction exec_noop} {:close 0, :instruction -44} {:close 1, :instruction boolean_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_exec} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 92})
Best program: (in3 integer_shove print_integer integer_flush boolean_dup_items boolean_dup exec_rot (exec_flush in1 exec_yankdup in1 exec_s (integer_dup) (exec_noop) (-44 boolean_dup_items) integer_min integer_inc boolean_xor exec_dup (integer_fromboolean integer_dup_times) integer_stackdepth print_exec (integer_dup_items integer_mult boolean_dup integer_yank exec_shove (boolean_eq integer_dup_items exec_flush integer_eq print_integer)) exec_do*count () integer_pop) (boolean_stackdepth 92) ())
Errors: [0 1 1 1 0 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 38
Size: 49
Percent parens: 0.224
--- Population Statistics ---
Average total errors in population: 7.774
Median total errors in population: 7
Error averages by case: (0.873 0.899 1.0 1.0 0.873 0.46 0.461 0.873 0.873 0.462)
Error minima by case: (0 0 1 1 0 0 0 0 0 0)
Average genome size in population (length): 67.325
Average program size in population (points): 88.715
Average percent parens in population: 0.245
Minimum age in population: 5.0
Maximum age in population: 9.125
Average age in population: 7.1474375
Median age in population: 7.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 37
Genome diversity (% unique genomes):	 0.861
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.859
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.108
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 3728980
--- Timings ---
Current time: 1559314346702 milliseconds
Total Time:          17.7 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         9.8 seconds, 55.1%
Fitness Testing:      4.5 seconds, 25.6%
Report:               3.3 seconds, 18.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Smallest problem report - generation 6
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: 34                 
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: 74                 
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: 28                 
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: 27                 
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: 35                 
Correct output: -54                 | Program output: 59                 
Correct output: -95                 | Program output: 56                 
Correct output: -97                 | Program output: 35                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: 95                 
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: 83                 
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 60                 
Correct output: -34                 | Program output: 79                 
Correct output: -17                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 92} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when})
Lexicase best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup (exec_rot (boolean_dup_times boolean_stackdepth in1 print_integer boolean_pop exec_rot (integer_fromboolean exec_empty integer_dec boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod integer_eq print_integer)) exec_do*count () integer_pop) boolean_stackdepth 92 integer_dec boolean_yankdup exec_eq exec_dup_times (integer_shove boolean_flush exec_when ()))) ()) () ()))
Lexicase best errors: [0 1 1 0 0 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 55
Percent parens: 0.291
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 92} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when})
Zero cases best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup (exec_rot (boolean_dup_times boolean_stackdepth in1 print_integer boolean_pop exec_rot (integer_fromboolean exec_empty integer_dec boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod integer_eq print_integer)) exec_do*count () integer_pop) boolean_stackdepth 92 integer_dec boolean_yankdup exec_eq exec_dup_times (integer_shove boolean_flush exec_when ()))) ()) () ()))
Zero cases best errors: [0 1 1 0 0 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 55
Percent parens: 0.291
--- Lexicase Population Statistics ---
Count of elite individuals by case: (279 451 450 278 279 814 279 279 1000 279)
Population mean number of elite cases: 4.39
Count of perfect (error zero) individuals by case: (279 451 450 278 279 814 279 279 0 279)
Population mean number of perfect (error zero) cases: 3.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 92} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_gt} {:close 0, :instruction print_boolean})
Best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup (exec_rot (boolean_dup_times boolean_stackdepth in1 print_integer boolean_pop exec_rot (integer_fromboolean exec_empty integer_dec boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod integer_eq print_integer)) exec_do*count () integer_pop) boolean_stackdepth 92 integer_dec boolean_yankdup boolean_yank exec_dup_times (integer_shove boolean_flush exec_when (exec_swap () (exec_while (exec_dup_items boolean_swap in1 exec_dup_items boolean_invert_second_then_and boolean_yankdup integer_stackdepth integer_gt print_boolean)))))) ()) () ()))
Errors: [0 1 1 0 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 50
Size: 69
Percent parens: 0.275
--- Population Statistics ---
Average total errors in population: 6.612
Median total errors in population: 7
Error averages by case: (0.721 0.549 0.55 0.722 0.721 0.186 0.721 0.721 1.0 0.721)
Error minima by case: (0 0 0 0 0 0 0 0 1 0)
Average genome size in population (length): 52.84
Average program size in population (points): 69.501
Average percent parens in population: 0.243
Minimum age in population: 6.0
Maximum age in population: 10.65625
Average age in population: 8.68965625
Median age in population: 8.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 19
Genome diversity (% unique genomes):	 0.754
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.744
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 4311972
--- Timings ---
Current time: 1559314349752 milliseconds
Total Time:          20.3 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:        11.6 seconds, 57.1%
Fitness Testing:      5.0 seconds, 24.8%
Report:               3.6 seconds, 17.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Smallest problem report - generation 7
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: 34                 
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: 74                 
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: 28                 
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: 27                 
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: 35                 
Correct output: -54                 | Program output: 59                 
Correct output: -95                 | Program output: 56                 
Correct output: -97                 | Program output: 35                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: 95                 
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: 83                 
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 60                 
Correct output: -34                 | Program output: 79                 
Correct output: -17                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction print_integer} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction in3} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction exec_while} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_while} {:close 0, :instruction tagged_378} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_exec_321} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_733} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and})
Lexicase best program: (print_integer exec_k_when_autoconstructing () (boolean_swap integer_min print_boolean exec_dup_items integer_lte boolean_stackdepth boolean_xor integer_dec exec_if (exec_while (in3 boolean_yankdup integer_dup_items integer_stackdepth) integer_dup in3) (exec_while (exec_k () (exec_while (integer_inc) integer_eq boolean_or integer_gt) exec_swap () (integer_gte boolean_shove integer_dup_times) integer_pop integer_yank exec_do*range () exec_while () tagged_378 integer_inc integer_lte exec_empty) exec_stackdepth) integer_lte tag_exec_321 (integer_dec) exec_stackdepth exec_dup () boolean_flush) exec_do*while (integer_rot boolean_yankdup exec_y (integer_eq exec_k_when_autoconstructing (in1 print_integer boolean_yank exec_do*range (boolean_shove tagged_733 integer_yank exec_pop (integer_lt boolean_yankdup exec_do*times (in2 boolean_pop exec_eq exec_shove (integer_shove print_integer in4) boolean_eq integer_min) boolean_shove print_boolean in3 boolean_frominteger boolean_dup_times) integer_shove integer_lte) integer_flush exec_flush exec_eq print_newline boolean_or) (boolean_invert_first_then_and))))
Lexicase best errors: [1 1 0 1 1 1 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 107
Percent parens: 0.224
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction print_integer} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_if} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_dup} {:close 1, :instruction in3} {:close 0, :instruction exec_while} {:close 1, :instruction exec_k} {:close 0, :instruction exec_while} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_while} {:close 0, :instruction tagged_378} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_exec_321} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_733} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and})
Zero cases best program: (print_integer exec_k_when_autoconstructing () (boolean_swap integer_min print_boolean exec_dup_items integer_lte boolean_stackdepth boolean_xor integer_dec exec_if (exec_while (in3 boolean_yankdup integer_dup_items integer_stackdepth) integer_dup in3) (exec_while (exec_k () (exec_while (integer_inc) integer_eq boolean_or integer_gt) exec_swap () (integer_gte boolean_shove integer_dup_times) integer_pop integer_yank exec_do*range () exec_while () tagged_378 integer_inc integer_lte exec_empty) exec_stackdepth) integer_lte tag_exec_321 (integer_dec) exec_stackdepth exec_dup () boolean_flush) exec_do*while (integer_rot boolean_yankdup exec_y (integer_eq exec_k_when_autoconstructing (in1 print_integer boolean_yank exec_do*range (boolean_shove tagged_733 integer_yank exec_pop (integer_lt boolean_yankdup exec_do*times (in2 boolean_pop exec_eq exec_shove (integer_shove print_integer in4) boolean_eq integer_min) boolean_shove print_boolean in3 boolean_frominteger boolean_dup_times) integer_shove integer_lte) integer_flush exec_flush exec_eq print_newline boolean_or) (boolean_invert_first_then_and))))
Zero cases best errors: [1 1 0 1 1 1 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 107
Percent parens: 0.224
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 798 223 222 1000 573 1000 1000 575)
Population mean number of elite cases: 7.39
Count of perfect (error zero) individuals by case: (0 0 798 223 222 0 573 0 0 575)
Population mean number of perfect (error zero) cases: 2.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction in3} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction integer_lt} {:close 1, :instruction tagged_695} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_pop} {:close 1, :instruction exec_pop} {:close 2, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_or} {:close 1, :instruction exec_k} {:close 0, :instruction exec_while} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_do*range} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_378} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_exec_321} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_733} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and})
Best program: (in3 integer_stackdepth integer_lt tagged_695 exec_shove (exec_pop (exec_pop () boolean_invert_second_then_and)) boolean_dup_times integer_lte integer_pop exec_shove (boolean_or exec_k () (exec_while (integer_inc) integer_eq boolean_or integer_gt) exec_swap () (integer_gte boolean_shove integer_dup_times) integer_pop integer_yank exec_do*range (integer_swap) tagged_378 integer_inc integer_lte exec_empty) integer_dup_times integer_lte tag_exec_321 (integer_dec) exec_stackdepth exec_dup () boolean_flush integer_dup_items integer_rot boolean_yankdup exec_y (exec_k_when_autoconstructing (in1) (print_integer boolean_yank boolean_yankdup boolean_shove tagged_733 integer_yank exec_pop (integer_lt boolean_yankdup exec_do*times (in2 boolean_pop exec_eq exec_shove (integer_shove print_integer in4) boolean_eq integer_min) boolean_shove print_boolean in3 boolean_frominteger boolean_dup_times) integer_shove integer_lte) integer_flush exec_flush exec_eq print_newline boolean_or) boolean_invert_first_then_and)
Errors: [1 1 0 1 1 1 0 1 1 0]
Total: 7
Mean: 0.7
Genome size: 76
Size: 95
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 7.609
Median total errors in population: 7
Error averages by case: (1.0 1.0 0.202 0.777 0.778 1.0 0.427 1.0 1.0 0.425)
Error minima by case: (1 1 0 0 0 1 0 1 1 0)
Average genome size in population (length): 58.763
Average program size in population (points): 78.113
Average percent parens in population: 0.251
Minimum age in population: 7.0
Maximum age in population: 11.953125
Average age in population: 10.210953125
Median age in population: 10.296875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.829
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.822
Total error diversity:				 0.004
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 5114206
--- Timings ---
Current time: 1559314352592 milliseconds
Total Time:          23.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        13.3 seconds, 56.9%
Fitness Testing:      5.7 seconds, 24.2%
Report:               4.3 seconds, 18.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Smallest problem report - generation 8
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: 34                 
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: 74                 
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: 28                 
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: 27                 
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: 35                 
Correct output: -54                 | Program output: 59                 
Correct output: -95                 | Program output: 56                 
Correct output: -97                 | Program output: 35                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: 95                 
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: 83                 
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 60                 
Correct output: -34                 | Program output: 79                 
Correct output: -17                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 92} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dec} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 1, :instruction print_exec} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_eq})
Lexicase best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup (exec_rot (boolean_dup_times boolean_stackdepth in1 print_integer boolean_pop exec_rot (integer_fromboolean exec_empty integer_dec boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod integer_eq print_integer)) exec_do*count () integer_pop) boolean_stackdepth 92 integer_dec boolean_yankdup exec_eq exec_dup_times (integer_shove boolean_flush exec_when (exec_swap () (exec_while (exec_dup_items boolean_swap boolean_and exec_dup_items boolean_invert_second_then_and boolean_yankdup integer_stackdepth exec_dup_items exec_y_when_autoconstructing (boolean_pop integer_shove integer_inc) integer_dec) boolean_dup_items exec_empty exec_rot () (integer_swap boolean_or) (exec_do*while (integer_dec print_newline boolean_xor) integer_sub exec_if () (integer_sub print_exec () integer_mod boolean_rot integer_div exec_y (boolean_pop boolean_rot boolean_pop exec_do*count () exec_s_when_autoconstructing (exec_dup_items integer_eq exec_yank integer_min boolean_invert_second_then_and boolean_dup_times exec_dup (integer_eq)) () ())))))))) ()) () ()))
Lexicase best errors: [1 0 0 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 117
Percent parens: 0.282
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 92} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_shove} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_or} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_dec} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_xor} {:close 0, :instruction integer_sub} {:close 1, :instruction exec_if} {:close 0, :instruction integer_sub} {:close 1, :instruction print_exec} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_div} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_eq})
Zero cases best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup (exec_rot (boolean_dup_times boolean_stackdepth in1 print_integer boolean_pop exec_rot (integer_fromboolean exec_empty integer_dec boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod integer_eq print_integer)) exec_do*count () integer_pop) boolean_stackdepth 92 integer_dec boolean_yankdup exec_eq exec_dup_times (integer_shove boolean_flush exec_when (exec_swap () (exec_while (exec_dup_items boolean_swap boolean_and exec_dup_items boolean_invert_second_then_and boolean_yankdup integer_stackdepth exec_dup_items exec_y_when_autoconstructing (boolean_pop integer_shove integer_inc) integer_dec) boolean_dup_items exec_empty exec_rot () (integer_swap boolean_or) (exec_do*while (integer_dec print_newline boolean_xor) integer_sub exec_if () (integer_sub print_exec () integer_mod boolean_rot integer_div exec_y (boolean_pop boolean_rot boolean_pop exec_do*count () exec_s_when_autoconstructing (exec_dup_items integer_eq exec_yank integer_min boolean_invert_second_then_and boolean_dup_times exec_dup (integer_eq)) () ())))))))) ()) () ()))
Zero cases best errors: [1 0 0 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 117
Percent parens: 0.282
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 388 388 1000 1000 1000 389 1000 387 818)
Population mean number of elite cases: 7.37
Count of perfect (error zero) individuals by case: (0 388 388 0 0 0 389 0 387 818)
Population mean number of perfect (error zero) cases: 2.37
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 92})
Best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup (exec_rot (boolean_dup_times boolean_stackdepth in1 print_integer boolean_dup exec_rot (integer_fromboolean exec_pop (integer_dec boolean_swap) exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_eq integer_dup_items exec_flush integer_eq print_integer)) exec_do*count () integer_pop) boolean_stackdepth 92)) () ()) () ()))
Errors: [1 0 0 1 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 32
Size: 47
Percent parens: 0.319
--- Population Statistics ---
Average total errors in population: 7.63
Median total errors in population: 9
Error averages by case: (1.0 0.612 0.612 1.0 1.0 1.0 0.611 1.0 0.613 0.182)
Error minima by case: (1 0 0 1 1 1 0 1 0 0)
Average genome size in population (length): 52.273
Average program size in population (points): 69.428
Average percent parens in population: 0.250
Minimum age in population: 8.25
Maximum age in population: 13.6953125
Average age in population: 11.7078046875
Median age in population: 11.78125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.8
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.791
Total error diversity:				 0.005
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 5766965
--- Timings ---
Current time: 1559314354998 milliseconds
Total Time:          26.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        14.9 seconds, 57.4%
Fitness Testing:      6.2 seconds, 23.9%
Report:               4.7 seconds, 18.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Smallest problem report - generation 9
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -13                
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 64                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 73                 
Correct output: 23                  | Program output: 88                 
Correct output: 31                  | Program output: 87                 
Correct output: 20                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 59                 
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 29                 
Correct output: 10                  | Program output: 16                 
Correct output: 1                   | Program output: 30                 
Correct output: 34                  | Program output: 78                 
Correct output: 20                  | Program output: 41                 
Correct output: 9                   | Program output: 15                 
Correct output: 3                   | Program output: 72                 
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 18                 
Correct output: 46                  | Program output: 51                 
Correct output: -96                 | Program output: 82                 
Correct output: -61                 | Program output: -53                
Correct output: -78                 | Program output: 86                 
Correct output: -91                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: 98                 
Correct output: -60                 | Program output: 10                 
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: 97                 
Correct output: -76                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: 22                 
Correct output: -45                 | Program output: 97                 
Correct output: -56                 | Program output: 10                 
Correct output: -75                 | Program output: -1                 
Correct output: -87                 | Program output: -55                
Correct output: -81                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -3                 
Correct output: -54                 | Program output: -47                
Correct output: -95                 | Program output: 3                  
Correct output: -97                 | Program output: -21                
Correct output: -85                 | Program output: 73                 
Correct output: -81                 | Program output: 61                 
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: 24                 
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: 96                 
Correct output: -93                 | Program output: 59                 
Correct output: -62                 | Program output: -8                 
Correct output: -90                 | Program output: -1                 
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: 61                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: 87                 
Correct output: -23                 | Program output: -11                
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: 23                 
Correct output: -95                 | Program output: 33                 
Correct output: -82                 | Program output: 88                 
Correct output: -65                 | Program output: 4                  
Correct output: -36                 | Program output: 10                 
Correct output: -53                 | Program output: -4                 
Correct output: -34                 | Program output: 63                 
Correct output: -17                 | Program output: 54                 
Correct output: -82                 | Program output: -70                
Correct output: -49                 | Program output: -16                
Correct output: -54                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: 55                 
Correct output: -83                 | Program output: 38                 
Correct output: -63                 | Program output: 80                 
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_while} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_while} {:close 0, :instruction tagged_378} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_exec_321} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_733} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_lt})
Lexicase best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup () exec_rot (boolean_dup_times boolean_stackdepth in2 print_integer boolean_pop exec_rot (integer_fromboolean exec_empty integer_dec boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod integer_max exec_while (integer_inc) integer_eq boolean_or integer_gt) boolean_stackdepth) integer_gte boolean_shove integer_dup_times) integer_pop integer_yank exec_do*range () exec_while () tagged_378 integer_inc integer_lte exec_empty) integer_dup_times) (integer_lte tag_exec_321 (integer_dec) exec_stackdepth exec_dup () boolean_flush) integer_dup_items integer_rot boolean_yankdup exec_y (integer_eq exec_k_when_autoconstructing (in1 print_integer boolean_yank exec_do*range (boolean_shove tagged_733 integer_yank exec_pop (integer_lt))) ())) () ())
Lexicase best errors: [0 0 0 1 1 1 1 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 89
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_while} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_while} {:close 0, :instruction tagged_378} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_exec_321} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_733} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_lt})
Zero cases best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup () exec_rot (boolean_dup_times boolean_stackdepth in2 print_integer boolean_pop exec_rot (integer_fromboolean exec_empty integer_dec boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod integer_max exec_while (integer_inc) integer_eq boolean_or integer_gt) boolean_stackdepth) integer_gte boolean_shove integer_dup_times) integer_pop integer_yank exec_do*range () exec_while () tagged_378 integer_inc integer_lte exec_empty) integer_dup_times) (integer_lte tag_exec_321 (integer_dec) exec_stackdepth exec_dup () boolean_flush) integer_dup_items integer_rot boolean_yankdup exec_y (integer_eq exec_k_when_autoconstructing (in1 print_integer boolean_yank exec_do*range (boolean_shove tagged_733 integer_yank exec_pop (integer_lt))) ())) () ())
Zero cases best errors: [0 0 0 1 1 1 1 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 89
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 1 1000 1000 1000 759 759 1000 1000)
Population mean number of elite cases: 6.52
Count of perfect (error zero) individuals by case: (1 1 1 0 0 0 759 759 0 0)
Population mean number of perfect (error zero) cases: 1.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_while} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_while} {:close 0, :instruction tagged_378} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_exec_321} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_733} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_lt})
Best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup () exec_rot (boolean_dup_times boolean_stackdepth in2 print_integer boolean_pop exec_rot (integer_fromboolean exec_empty integer_dec boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod integer_max exec_while (integer_inc) integer_eq boolean_or integer_gt) boolean_stackdepth) integer_gte boolean_shove integer_dup_times) integer_pop integer_yank exec_do*range () exec_while () tagged_378 integer_inc integer_lte exec_empty) integer_dup_times) (integer_lte tag_exec_321 (integer_dec) exec_stackdepth exec_dup () boolean_flush) integer_dup_items integer_rot boolean_yankdup exec_y (integer_eq exec_k_when_autoconstructing (in1 print_integer boolean_yank exec_do*range (boolean_shove tagged_733 integer_yank exec_pop (integer_lt))) ())) () ())
Errors: [0 0 0 1 1 1 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 66
Size: 89
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 8.479
Median total errors in population: 8
Error averages by case: (0.999 0.999 0.999 1.0 1.0 1.0 0.241 0.241 1.0 1.0)
Error minima by case: (0 0 0 1 1 1 0 0 1 1)
Average genome size in population (length): 63.617
Average program size in population (points): 85.575
Average percent parens in population: 0.263
Minimum age in population: 10.0
Maximum age in population: 15.2421875
Average age in population: 13.20541796875
Median age in population: 13.27734375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.852
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.084
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 6700684
--- Timings ---
Current time: 1559314358456 milliseconds
Total Time:          28.7 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        16.6 seconds, 57.9%
Fitness Testing:      6.9 seconds, 24.1%
Report:               5.0 seconds, 17.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Smallest problem report - generation 10
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -13                
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 64                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 73                 
Correct output: 23                  | Program output: 88                 
Correct output: 31                  | Program output: 87                 
Correct output: 20                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 59                 
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 29                 
Correct output: 10                  | Program output: 16                 
Correct output: 1                   | Program output: 30                 
Correct output: 34                  | Program output: 78                 
Correct output: 20                  | Program output: 41                 
Correct output: 9                   | Program output: 15                 
Correct output: 3                   | Program output: 72                 
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 18                 
Correct output: 46                  | Program output: 51                 
Correct output: -96                 | Program output: 82                 
Correct output: -61                 | Program output: -53                
Correct output: -78                 | Program output: 86                 
Correct output: -91                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: 98                 
Correct output: -60                 | Program output: 10                 
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: 97                 
Correct output: -76                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: 22                 
Correct output: -45                 | Program output: 97                 
Correct output: -56                 | Program output: 10                 
Correct output: -75                 | Program output: -1                 
Correct output: -87                 | Program output: -55                
Correct output: -81                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -3                 
Correct output: -54                 | Program output: -47                
Correct output: -95                 | Program output: 3                  
Correct output: -97                 | Program output: -21                
Correct output: -85                 | Program output: 73                 
Correct output: -81                 | Program output: 61                 
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: 24                 
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: 96                 
Correct output: -93                 | Program output: 59                 
Correct output: -62                 | Program output: -8                 
Correct output: -90                 | Program output: -1                 
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: 61                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: 87                 
Correct output: -23                 | Program output: -11                
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: 23                 
Correct output: -95                 | Program output: 33                 
Correct output: -82                 | Program output: 88                 
Correct output: -65                 | Program output: 4                  
Correct output: -36                 | Program output: 10                 
Correct output: -53                 | Program output: -4                 
Correct output: -34                 | Program output: 63                 
Correct output: -17                 | Program output: 54                 
Correct output: -82                 | Program output: -70                
Correct output: -49                 | Program output: -16                
Correct output: -54                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: 55                 
Correct output: -83                 | Program output: 38                 
Correct output: -63                 | Program output: 80                 
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_while} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_while} {:close 0, :instruction tagged_378} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_exec_321} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_733} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_lt})
Lexicase best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup () exec_rot (boolean_dup_times boolean_stackdepth in2 print_integer boolean_pop exec_rot (boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod integer_max exec_while (integer_inc) integer_eq boolean_or integer_gt) boolean_stackdepth) integer_gte boolean_shove integer_dup_times) integer_pop integer_yank exec_do*range () exec_while () tagged_378 integer_inc integer_lte exec_empty) integer_dup_times) (integer_lte tag_exec_321 (integer_dec) exec_stackdepth exec_dup () boolean_flush) integer_dup_items integer_rot boolean_yankdup exec_y (integer_eq exec_k_when_autoconstructing (in1 print_integer boolean_yank exec_do*range (boolean_shove tagged_733 integer_yank exec_pop (integer_lt))) ())) () ())
Lexicase best errors: [1 1 1 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 86
Percent parens: 0.267
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_while} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_while} {:close 0, :instruction tagged_378} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_exec_321} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_733} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_lt})
Zero cases best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup () exec_rot (boolean_dup_times boolean_stackdepth in2 print_integer boolean_pop exec_rot (boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod integer_max exec_while (integer_inc) integer_eq boolean_or integer_gt) boolean_stackdepth) integer_gte boolean_shove integer_dup_times) integer_pop integer_yank exec_do*range () exec_while () tagged_378 integer_inc integer_lte exec_empty) integer_dup_times) (integer_lte tag_exec_321 (integer_dec) exec_stackdepth exec_dup () boolean_flush) integer_dup_items integer_rot boolean_yankdup exec_y (integer_eq exec_k_when_autoconstructing (in1 print_integer boolean_yank exec_do*range (boolean_shove tagged_733 integer_yank exec_pop (integer_lt))) ())) () ())
Zero cases best errors: [1 1 1 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 86
Percent parens: 0.267
--- Lexicase Population Statistics ---
Count of elite individuals by case: (323 1000 323 416 325 415 415 415 323 426)
Population mean number of elite cases: 4.38
Count of perfect (error zero) individuals by case: (323 0 323 416 325 415 415 415 323 426)
Population mean number of perfect (error zero) cases: 3.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_while} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_while} {:close 0, :instruction tagged_378} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_exec_321} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_733} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_lt})
Best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup () exec_rot (boolean_dup_times boolean_stackdepth in2 print_integer boolean_pop exec_rot (integer_fromboolean exec_empty integer_dec boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod integer_max exec_while (integer_inc) integer_eq boolean_or integer_gt) boolean_stackdepth) integer_gte boolean_shove integer_dup_times) integer_pop integer_yank exec_do*range () exec_while () tagged_378 integer_inc integer_lte exec_empty) integer_dup_times) (integer_lte tag_exec_321 (integer_dec) exec_stackdepth exec_dup () boolean_flush) integer_dup_items integer_rot boolean_yankdup exec_y (integer_eq exec_k_when_autoconstructing (in1 print_integer boolean_yank exec_do*range (boolean_shove tagged_733 integer_yank exec_pop (integer_lt))) ())) () ())
Errors: [1 1 1 0 1 0 0 0 1 0]
Total: 5
Mean: 0.5
Genome size: 66
Size: 89
Percent parens: 0.258
--- Population Statistics ---
Average total errors in population: 6.619
Median total errors in population: 6
Error averages by case: (0.677 1.0 0.677 0.584 0.675 0.585 0.585 0.585 0.677 0.574)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.335
Average program size in population (points): 86.933
Average percent parens in population: 0.263
Minimum age in population: 12.1953125
Maximum age in population: 16.234375
Average age in population: 14.47744921875
Median age in population: 14.525390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 215
Genome diversity (% unique genomes):	 0.756
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 216
Syntactic diversity (% unique Push programs):	 0.755
Total error diversity:				 0.006
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.097
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 7970704
--- Timings ---
Current time: 1559314361719 milliseconds
Total Time:          32.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        18.0 seconds, 56.1%
Fitness Testing:      7.9 seconds, 24.7%
Report:               6.0 seconds, 18.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Smallest problem report - generation 11
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: 34                 
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: 74                 
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: 28                 
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: 27                 
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: 35                 
Correct output: -54                 | Program output: 59                 
Correct output: -95                 | Program output: 56                 
Correct output: -97                 | Program output: 35                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: 95                 
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: 83                 
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 60                 
Correct output: -34                 | Program output: 79                 
Correct output: -17                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 93} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_eq})
Lexicase best program: (exec_dup_times () integer_dup boolean_flush exec_dup (exec_rot (boolean_dup_times boolean_stackdepth in1 print_integer boolean_pop integer_fromboolean exec_empty integer_dec boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod integer_eq print_integer)) exec_do*count () integer_pop) boolean_stackdepth 93 integer_dec boolean_yankdup exec_eq exec_dup_times (integer_shove boolean_flush exec_dup_times (integer_add boolean_flush exec_when (exec_swap () (exec_while (exec_dup_items boolean_swap exec_while (exec_dup_items boolean_swap in1 exec_dup_items boolean_invert_second_then_and boolean_yankdup integer_stackdepth exec_dup_items print_boolean boolean_flush in2 in3 exec_y_when_autoconstructing (boolean_pop integer_pop integer_inc) integer_dec) integer_add exec_empty exec_rot () (integer_dup_items integer_yankdup exec_eq boolean_xor) (boolean_pop boolean_rot boolean_pop exec_do*count () exec_s_when_autoconstructing (exec_dup_items integer_eq exec_shove (integer_min boolean_invert_second_then_and boolean_dup_times exec_dup (integer_eq))) () ())))))))) ()))
Lexicase best errors: [0 0 1 1 1 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 111
Percent parens: 0.252
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction integer_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 93} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_pop} {:close 1, :instruction integer_inc} {:close 1, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_eq} {:close 1, :instruction boolean_xor} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_eq})
Zero cases best program: (exec_dup_times () integer_dup boolean_flush exec_dup (exec_rot (boolean_dup_times boolean_stackdepth in1 print_integer boolean_pop integer_fromboolean exec_empty integer_dec boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod integer_eq print_integer)) exec_do*count () integer_pop) boolean_stackdepth 93 integer_dec boolean_yankdup exec_eq exec_dup_times (integer_shove boolean_flush exec_dup_times (integer_add boolean_flush exec_when (exec_swap () (exec_while (exec_dup_items boolean_swap exec_while (exec_dup_items boolean_swap in1 exec_dup_items boolean_invert_second_then_and boolean_yankdup integer_stackdepth exec_dup_items print_boolean boolean_flush in2 in3 exec_y_when_autoconstructing (boolean_pop integer_pop integer_inc) integer_dec) integer_add exec_empty exec_rot () (integer_dup_items integer_yankdup exec_eq boolean_xor) (boolean_pop boolean_rot boolean_pop exec_do*count () exec_s_when_autoconstructing (exec_dup_items integer_eq exec_shove (integer_min boolean_invert_second_then_and boolean_dup_times exec_dup (integer_eq))) () ())))))))) ()))
Zero cases best errors: [0 0 1 1 1 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 111
Percent parens: 0.252
--- Lexicase Population Statistics ---
Count of elite individuals by case: (363 368 1000 1000 1000 368 370 369 417 785)
Population mean number of elite cases: 6.04
Count of perfect (error zero) individuals by case: (363 368 0 0 0 368 370 369 417 785)
Population mean number of perfect (error zero) cases: 3.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_dup_times} {:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_div})
Best program: (exec_dup_times () exec_dup_times () exec_dup_items boolean_flush exec_dup (exec_rot (boolean_dup_times boolean_stackdepth in1 print_integer boolean_pop exec_rot (integer_fromboolean exec_empty integer_dec boolean_swap) (exec_yank boolean_invert_first_then_and) (boolean_not exec_do*count (integer_mult) exec_do*while (integer_yank exec_shove (boolean_eq integer_dup_items exec_flush integer_eq print_integer)) exec_do*count () integer_pop) boolean_xor exec_flush integer_dup_items exec_do*count () integer_empty boolean_flush) (integer_add exec_k_when_autoconstructing (exec_s_when_autoconstructing (integer_lte exec_dup_times () exec_s (integer_div) () ()) () ()) ()) ()))
Errors: [0 0 1 1 1 0 0 0 1 0]
Total: 4
Mean: 0.4
Genome size: 44
Size: 68
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 6.96
Median total errors in population: 8
Error averages by case: (0.637 0.632 1.0 1.0 1.0 0.632 0.63 0.631 0.583 0.215)
Error minima by case: (0 0 1 1 1 0 0 0 0 0)
Average genome size in population (length): 62.701
Average program size in population (points): 84.948
Average percent parens in population: 0.265
Minimum age in population: 13.7109375
Maximum age in population: 17.98046875
Average age in population: 16.019318359375
Median age in population: 16.0947265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 111
Genome diversity (% unique genomes):	 0.806
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 113
Syntactic diversity (% unique Push programs):	 0.802
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.094
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 9184560
--- Timings ---
Current time: 1559314364652 milliseconds
Total Time:          35.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.7 seconds, 55.2%
Fitness Testing:      8.8 seconds, 24.9%
Report:               7.0 seconds, 19.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Smallest problem report - generation 12
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: 34                 
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: 74                 
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: 28                 
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: 27                 
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: 35                 
Correct output: -54                 | Program output: 59                 
Correct output: -95                 | Program output: 56                 
Correct output: -97                 | Program output: 35                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: 95                 
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: 83                 
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 60                 
Correct output: -34                 | Program output: 79                 
Correct output: -17                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction print_integer} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 92} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_while} {:close 0, :instruction tagged_378} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_exec_321} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_733} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_eq})
Lexicase best program: (print_integer exec_k_when_autoconstructing () (in3 integer_shove exec_dup (exec_rot (boolean_dup_times boolean_stackdepth in1 print_integer boolean_pop exec_rot (integer_fromboolean exec_empty integer_dec boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_div exec_shove (boolean_xor integer_dup_items integer_mod integer_eq print_integer)) exec_do*count () integer_pop) boolean_stackdepth 92 exec_do*range () exec_while () tagged_378 integer_inc integer_lte exec_empty) integer_pop) (integer_lte tag_exec_321 (integer_dec) exec_stackdepth exec_dup () boolean_flush) exec_do*while (integer_rot boolean_yankdup exec_y (integer_eq exec_k_when_autoconstructing (in1 print_integer boolean_yank exec_do*range (boolean_shove tagged_733 integer_yank exec_pop (boolean_empty boolean_yankdup exec_do*times (in2 boolean_pop exec_eq)))) ()))) () ())))
Lexicase best errors: [0 1 1 1 1 0 1 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 8
Lexicase best mean error: 0.8
Lexicase best size: 92
Percent parens: 0.283
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction print_integer} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in3} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_div} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 92} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_while} {:close 0, :instruction tagged_378} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_exec_321} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_733} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_eq})
Zero cases best program: (print_integer exec_k_when_autoconstructing () (in3 integer_shove exec_dup (exec_rot (boolean_dup_times boolean_stackdepth in1 print_integer boolean_pop exec_rot (integer_fromboolean exec_empty integer_dec boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_div exec_shove (boolean_xor integer_dup_items integer_mod integer_eq print_integer)) exec_do*count () integer_pop) boolean_stackdepth 92 exec_do*range () exec_while () tagged_378 integer_inc integer_lte exec_empty) integer_pop) (integer_lte tag_exec_321 (integer_dec) exec_stackdepth exec_dup () boolean_flush) exec_do*while (integer_rot boolean_yankdup exec_y (integer_eq exec_k_when_autoconstructing (in1 print_integer boolean_yank exec_do*range (boolean_shove tagged_733 integer_yank exec_pop (boolean_empty boolean_yankdup exec_do*times (in2 boolean_pop exec_eq)))) ()))) () ())))
Zero cases best errors: [0 1 1 1 1 0 1 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 2
Zero cases best total error: 8
Zero cases best mean error: 0.8
Zero cases best size: 92
Percent parens: 0.283
--- Lexicase Population Statistics ---
Count of elite individuals by case: (681 1000 1000 1000 119 682 121 1000 1000 1000)
Population mean number of elite cases: 7.60
Count of perfect (error zero) individuals by case: (681 0 0 0 119 682 121 0 0 0)
Population mean number of perfect (error zero) cases: 1.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop})
Best program: (exec_dup_times () in1 print_integer boolean_pop exec_rot (integer_fromboolean exec_empty exec_flush boolean_swap) (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_eq integer_dup_items exec_flush integer_eq print_integer)) exec_do*count () integer_pop)) ())
Errors: [0 1 1 1 1 0 1 1 1 1]
Total: 8
Mean: 0.8
Genome size: 23
Size: 32
Percent parens: 0.281
--- Population Statistics ---
Average total errors in population: 8.397
Median total errors in population: 8
Error averages by case: (0.319 1.0 1.0 1.0 0.881 0.318 0.879 1.0 1.0 1.0)
Error minima by case: (0 1 1 1 0 0 0 1 1 1)
Average genome size in population (length): 58.791
Average program size in population (points): 79.867
Average percent parens in population: 0.270
Minimum age in population: 15.109375
Maximum age in population: 19.52685546875
Average age in population: 17.5599677734375
Median age in population: 17.61767578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 9
Genome diversity (% unique genomes):	 0.842
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.839
Total error diversity:				 0.003
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.089
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 10176091
--- Timings ---
Current time: 1559314367373 milliseconds
Total Time:          38.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        21.4 seconds, 55.7%
Fitness Testing:      9.6 seconds, 25.0%
Report:               7.3 seconds, 19.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Smallest problem report - generation 13
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -13                
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 64                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 73                 
Correct output: 23                  | Program output: 88                 
Correct output: 31                  | Program output: 87                 
Correct output: 20                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 59                 
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 29                 
Correct output: 10                  | Program output: 16                 
Correct output: 1                   | Program output: 30                 
Correct output: 34                  | Program output: 78                 
Correct output: 20                  | Program output: 41                 
Correct output: 9                   | Program output: 15                 
Correct output: 3                   | Program output: 72                 
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 18                 
Correct output: 46                  | Program output: 51                 
Correct output: -96                 | Program output: 82                 
Correct output: -61                 | Program output: -53                
Correct output: -78                 | Program output: 86                 
Correct output: -91                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: 98                 
Correct output: -60                 | Program output: 10                 
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: 97                 
Correct output: -76                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: 22                 
Correct output: -45                 | Program output: 97                 
Correct output: -56                 | Program output: 10                 
Correct output: -75                 | Program output: -1                 
Correct output: -87                 | Program output: -55                
Correct output: -81                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -3                 
Correct output: -54                 | Program output: -47                
Correct output: -95                 | Program output: 3                  
Correct output: -97                 | Program output: -21                
Correct output: -85                 | Program output: 73                 
Correct output: -81                 | Program output: 61                 
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: 24                 
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: 96                 
Correct output: -93                 | Program output: 59                 
Correct output: -62                 | Program output: -8                 
Correct output: -90                 | Program output: -1                 
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: 61                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: 87                 
Correct output: -23                 | Program output: -11                
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: 23                 
Correct output: -95                 | Program output: 33                 
Correct output: -82                 | Program output: 88                 
Correct output: -65                 | Program output: 4                  
Correct output: -36                 | Program output: 10                 
Correct output: -53                 | Program output: -4                 
Correct output: -34                 | Program output: 63                 
Correct output: -17                 | Program output: 54                 
Correct output: -82                 | Program output: -70                
Correct output: -49                 | Program output: -16                
Correct output: -54                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: 55                 
Correct output: -83                 | Program output: 38                 
Correct output: -63                 | Program output: 80                 
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_while} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 92})
Lexicase best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup () exec_rot (boolean_dup_times boolean_stackdepth in2 print_integer boolean_pop exec_rot (integer_fromboolean exec_empty integer_dec boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod integer_max exec_while (integer_inc) integer_eq boolean_or integer_dup_items exec_flush integer_eq print_integer)) exec_do*count () integer_pop) boolean_stackdepth 92)) ()) () ())
Lexicase best errors: [1 1 1 1 0 1 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 54
Percent parens: 0.278
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_while} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 92})
Zero cases best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup () exec_rot (boolean_dup_times boolean_stackdepth in2 print_integer boolean_pop exec_rot (integer_fromboolean exec_empty integer_dec boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod integer_max exec_while (integer_inc) integer_eq boolean_or integer_dup_items exec_flush integer_eq print_integer)) exec_do*count () integer_pop) boolean_stackdepth 92)) ()) () ())
Zero cases best errors: [1 1 1 1 0 1 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 54
Percent parens: 0.278
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 1000 1000 402 1000 400 400 401 412)
Population mean number of elite cases: 7.01
Count of perfect (error zero) individuals by case: (0 0 0 0 402 0 400 400 401 412)
Population mean number of perfect (error zero) cases: 2.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_while} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_while} {:close 0, :instruction tagged_378} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_exec_321} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_733} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_lt})
Best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup () exec_rot (boolean_dup_times boolean_stackdepth in2 print_integer boolean_pop exec_rot (integer_fromboolean exec_empty integer_dec exec_empty integer_dec boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (boolean_eq exec_shove (boolean_xor integer_dup_items integer_mod integer_max exec_while (integer_inc) integer_eq boolean_or integer_gt) boolean_stackdepth) integer_gte boolean_shove integer_dup_times) integer_pop integer_yank exec_do*range () exec_while () tagged_378 integer_inc integer_lte exec_empty) integer_dup_times) (integer_lte tag_exec_321 (integer_dec) exec_stackdepth exec_dup () boolean_flush) integer_dup_items integer_rot boolean_yankdup exec_y (integer_eq exec_k_when_autoconstructing (in1 print_integer boolean_yank exec_do*range (boolean_shove tagged_733 integer_yank exec_pop (integer_lt))) ())) () ())
Errors: [1 1 1 1 0 1 1 0 1 0]
Total: 7
Mean: 0.7
Genome size: 68
Size: 91
Percent parens: 0.253
--- Population Statistics ---
Average total errors in population: 7.985
Median total errors in population: 8
Error averages by case: (1.0 1.0 1.0 1.0 0.598 1.0 0.6 0.6 0.599 0.588)
Error minima by case: (1 1 1 1 0 1 0 0 0 0)
Average genome size in population (length): 58.875
Average program size in population (points): 80.119
Average percent parens in population: 0.270
Minimum age in population: 16.7265625
Maximum age in population: 20.8447265625
Average age in population: 19.08616357421875
Median age in population: 19.1671142578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 18
Genome diversity (% unique genomes):	 0.823
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.82
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.099
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 11267901
--- Timings ---
Current time: 1559314370645 milliseconds
Total Time:          40.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        22.8 seconds, 55.8%
Fitness Testing:     10.5 seconds, 25.6%
Report:               7.5 seconds, 18.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Smallest problem report - generation 14
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -13                
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 64                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 73                 
Correct output: 23                  | Program output: 88                 
Correct output: 31                  | Program output: 87                 
Correct output: 20                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 59                 
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 29                 
Correct output: 10                  | Program output: 16                 
Correct output: 1                   | Program output: 30                 
Correct output: 34                  | Program output: 78                 
Correct output: 20                  | Program output: 41                 
Correct output: 9                   | Program output: 15                 
Correct output: 3                   | Program output: 72                 
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 18                 
Correct output: 46                  | Program output: 51                 
Correct output: -96                 | Program output: 82                 
Correct output: -61                 | Program output: -53                
Correct output: -78                 | Program output: 86                 
Correct output: -91                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: 98                 
Correct output: -60                 | Program output: 10                 
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: 97                 
Correct output: -76                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: 22                 
Correct output: -45                 | Program output: 97                 
Correct output: -56                 | Program output: 10                 
Correct output: -75                 | Program output: -1                 
Correct output: -87                 | Program output: -55                
Correct output: -81                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -3                 
Correct output: -54                 | Program output: -47                
Correct output: -95                 | Program output: 3                  
Correct output: -97                 | Program output: -21                
Correct output: -85                 | Program output: 73                 
Correct output: -81                 | Program output: 61                 
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: 24                 
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: 96                 
Correct output: -93                 | Program output: 59                 
Correct output: -62                 | Program output: -8                 
Correct output: -90                 | Program output: -1                 
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: 61                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: 87                 
Correct output: -23                 | Program output: -11                
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: 23                 
Correct output: -95                 | Program output: 33                 
Correct output: -82                 | Program output: 88                 
Correct output: -65                 | Program output: 4                  
Correct output: -36                 | Program output: 10                 
Correct output: -53                 | Program output: -4                 
Correct output: -34                 | Program output: 63                 
Correct output: -17                 | Program output: 54                 
Correct output: -82                 | Program output: -70                
Correct output: -49                 | Program output: -16                
Correct output: -54                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: 55                 
Correct output: -83                 | Program output: 38                 
Correct output: -63                 | Program output: 80                 
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_while} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_while} {:close 0, :instruction tagged_378} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_exec_321} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_733} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_lt})
Lexicase best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup () exec_rot (boolean_dup_times boolean_stackdepth in2 print_integer boolean_pop exec_rot (integer_fromboolean exec_empty integer_dec boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod integer_max exec_while (integer_inc) integer_eq boolean_or integer_gt) boolean_stackdepth) integer_gte boolean_shove integer_dup_times) integer_pop integer_yank exec_do*range () exec_while () tagged_378 integer_inc integer_lte exec_empty) integer_dup_times) (integer_lte tag_exec_321 (integer_dec) exec_stackdepth exec_dup () boolean_flush) integer_dup_items integer_rot boolean_yankdup exec_y (integer_eq exec_k_when_autoconstructing (in1 print_integer boolean_yank exec_do*range (boolean_shove tagged_733 integer_yank exec_pop (integer_lt))) ())) () ())
Lexicase best errors: [1 1 0 1 1 1 0 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 89
Percent parens: 0.258
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_while} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_while} {:close 0, :instruction tagged_378} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_exec_321} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_733} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 1, :instruction integer_lt})
Zero cases best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup () exec_rot (boolean_dup_times boolean_stackdepth in2 print_integer boolean_pop exec_rot (integer_fromboolean exec_empty integer_dec boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod integer_max exec_while (integer_inc) integer_eq boolean_or integer_gt) boolean_stackdepth) integer_gte boolean_shove integer_dup_times) integer_pop integer_yank exec_do*range () exec_while () tagged_378 integer_inc integer_lte exec_empty) integer_dup_times) (integer_lte tag_exec_321 (integer_dec) exec_stackdepth exec_dup () boolean_flush) integer_dup_items integer_rot boolean_yankdup exec_y (integer_eq exec_k_when_autoconstructing (in1 print_integer boolean_yank exec_do*range (boolean_shove tagged_733 integer_yank exec_pop (integer_lt))) ())) () ())
Zero cases best errors: [1 1 0 1 1 1 0 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 89
Percent parens: 0.258
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 341 824 343 1000 343 479 825 487 488)
Population mean number of elite cases: 6.13
Count of perfect (error zero) individuals by case: (0 341 824 343 0 343 479 825 487 488)
Population mean number of perfect (error zero) cases: 4.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 1, :instruction exec_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_733} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_exec_321} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank})
Best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup () exec_rot (boolean_dup_times boolean_stackdepth in2 print_integer boolean_pop exec_rot (integer_fromboolean exec_empty integer_dec boolean_swap) (boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod integer_eq print_integer)) exec_do*count () integer_pop) exec_stackdepth) exec_eq integer_dec boolean_yankdup exec_eq exec_dup_times (integer_shove boolean_flush exec_when (exec_swap () (exec_while (exec_dup_items exec_do*range (boolean_shove tagged_733 integer_lte tag_exec_321 (integer_dec) exec_stackdepth exec_dup () boolean_flush) integer_dup_items integer_rot boolean_yankdup exec_y (integer_eq exec_k_when_autoconstructing (in1 print_integer boolean_yank) ()))))))) () ())
Errors: [1 1 0 1 1 1 0 0 0 0]
Total: 5
Mean: 0.5
Genome size: 61
Size: 86
Percent parens: 0.291
--- Population Statistics ---
Average total errors in population: 5.87
Median total errors in population: 5
Error averages by case: (1.0 0.659 0.176 0.657 1.0 0.657 0.521 0.175 0.513 0.512)
Error minima by case: (1 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 57.62
Average program size in population (points): 78.572
Average percent parens in population: 0.272
Minimum age in population: 17.7265625
Maximum age in population: 22.456787109375
Average age in population: 20.55399133300781
Median age in population: 20.63165283203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.874
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.871
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.096
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 12338220
--- Timings ---
Current time: 1559314373984 milliseconds
Total Time:          44.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        24.5 seconds, 55.1%
Fitness Testing:     11.3 seconds, 25.4%
Report:               8.5 seconds, 19.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Smallest problem report - generation 15
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: 34                 
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: 74                 
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: 28                 
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: 27                 
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: 35                 
Correct output: -54                 | Program output: 59                 
Correct output: -95                 | Program output: 56                 
Correct output: -97                 | Program output: 35                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: 95                 
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: 83                 
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 60                 
Correct output: -34                 | Program output: 79                 
Correct output: -17                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_flush} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 91} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_exec_164} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_733} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction print_boolean})
Lexicase best program: (exec_do*while (exec_dup_times ()) exec_dup_items boolean_flush boolean_swap exec_rot (boolean_dup_times boolean_stackdepth in1 print_integer boolean_pop boolean_yankdup integer_fromboolean exec_empty in3 exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod integer_eq exec_flush)) exec_do*count () integer_pop) (boolean_stackdepth 91 integer_dec boolean_yankdup exec_eq exec_dup_times (integer_shove boolean_flush exec_when (exec_swap () (exec_while (exec_dup_items boolean_swap integer_div boolean_xor exec_empty) integer_dup_times) integer_lte tag_exec_164 (integer_dec) exec_stackdepth exec_dup () boolean_flush) integer_dup_items integer_rot boolean_yankdup exec_y (integer_eq exec_k_when_autoconstructing (in1 print_integer boolean_yank exec_do*range (boolean_shove tagged_733 integer_yank integer_shove print_integer in4) boolean_eq integer_min) (boolean_shove print_boolean in3 print_boolean)))) ())
Lexicase best errors: [0 0 1 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 90
Percent parens: 0.222
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_flush} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 91} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_exec_164} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_733} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction print_boolean})
Zero cases best program: (exec_do*while (exec_dup_times ()) exec_dup_items boolean_flush boolean_swap exec_rot (boolean_dup_times boolean_stackdepth in1 print_integer boolean_pop boolean_yankdup integer_fromboolean exec_empty in3 exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod integer_eq exec_flush)) exec_do*count () integer_pop) (boolean_stackdepth 91 integer_dec boolean_yankdup exec_eq exec_dup_times (integer_shove boolean_flush exec_when (exec_swap () (exec_while (exec_dup_items boolean_swap integer_div boolean_xor exec_empty) integer_dup_times) integer_lte tag_exec_164 (integer_dec) exec_stackdepth exec_dup () boolean_flush) integer_dup_items integer_rot boolean_yankdup exec_y (integer_eq exec_k_when_autoconstructing (in1 print_integer boolean_yank exec_do*range (boolean_shove tagged_733 integer_yank integer_shove print_integer in4) boolean_eq integer_min) (boolean_shove print_boolean in3 print_boolean)))) ())
Zero cases best errors: [0 0 1 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 90
Percent parens: 0.222
--- Lexicase Population Statistics ---
Count of elite individuals by case: (831 452 1000 1000 823 453 1000 454 453 1000)
Population mean number of elite cases: 7.47
Count of perfect (error zero) individuals by case: (831 452 0 0 823 453 0 454 453 0)
Population mean number of perfect (error zero) cases: 3.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank})
Best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup (boolean_dup_times boolean_stackdepth in1 print_integer boolean_pop exec_rot (integer_fromboolean exec_empty integer_dec boolean_swap) (boolean_pop) (boolean_invert_first_then_and boolean_not exec_when (in3) in4 exec_y (exec_k_when_autoconstructing (integer_swap boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank))))))))
Errors: [0 0 1 1 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 31
Size: 44
Percent parens: 0.295
--- Population Statistics ---
Average total errors in population: 6.534
Median total errors in population: 8
Error averages by case: (0.169 0.548 1.0 1.0 0.177 0.547 1.0 0.546 0.547 1.0)
Error minima by case: (0 0 1 1 0 0 1 0 0 1)
Average genome size in population (length): 55.128
Average program size in population (points): 75.555
Average percent parens in population: 0.277
Minimum age in population: 19.111328125
Maximum age in population: 23.96917724609375
Average age in population: 22.03581036376953
Median age in population: 22.08624267578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 6
Genome diversity (% unique genomes):	 0.874
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.868
Total error diversity:				 0.007
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.084
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 13299856
--- Timings ---
Current time: 1559314377201 milliseconds
Total Time:          47.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.1 seconds, 54.8%
Fitness Testing:     12.0 seconds, 25.3%
Report:               9.4 seconds, 19.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Smallest problem report - generation 16
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -13                
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 64                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 73                 
Correct output: 23                  | Program output: 88                 
Correct output: 31                  | Program output: 87                 
Correct output: 20                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 59                 
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 29                 
Correct output: 10                  | Program output: 16                 
Correct output: 1                   | Program output: 30                 
Correct output: 34                  | Program output: 78                 
Correct output: 20                  | Program output: 41                 
Correct output: 9                   | Program output: 15                 
Correct output: 3                   | Program output: 72                 
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 18                 
Correct output: 46                  | Program output: 51                 
Correct output: -96                 | Program output: 82                 
Correct output: -61                 | Program output: -53                
Correct output: -78                 | Program output: 86                 
Correct output: -91                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: 98                 
Correct output: -60                 | Program output: 10                 
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: 97                 
Correct output: -76                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: 22                 
Correct output: -45                 | Program output: 97                 
Correct output: -56                 | Program output: 10                 
Correct output: -75                 | Program output: -1                 
Correct output: -87                 | Program output: -55                
Correct output: -81                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -3                 
Correct output: -54                 | Program output: -47                
Correct output: -95                 | Program output: 3                  
Correct output: -97                 | Program output: -21                
Correct output: -85                 | Program output: 73                 
Correct output: -81                 | Program output: 61                 
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: 24                 
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: 96                 
Correct output: -93                 | Program output: 59                 
Correct output: -62                 | Program output: -8                 
Correct output: -90                 | Program output: -1                 
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: 61                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: 87                 
Correct output: -23                 | Program output: -11                
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: 23                 
Correct output: -95                 | Program output: 33                 
Correct output: -82                 | Program output: 88                 
Correct output: -65                 | Program output: 4                  
Correct output: -36                 | Program output: 10                 
Correct output: -53                 | Program output: -4                 
Correct output: -34                 | Program output: 63                 
Correct output: -17                 | Program output: 54                 
Correct output: -82                 | Program output: -70                
Correct output: -49                 | Program output: -16                
Correct output: -54                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: 55                 
Correct output: -83                 | Program output: 38                 
Correct output: -63                 | Program output: 80                 
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction tagged_368} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_while} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_while} {:close 0, :instruction tagged_378} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_exec_321} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_733} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_invert_first_then_and})
Lexicase best program: (exec_dup_times () integer_dup_times boolean_flush exec_dup () exec_rot (boolean_dup_times boolean_stackdepth in2 print_integer boolean_pop exec_rot (integer_fromboolean exec_empty integer_dec tagged_368) (exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod integer_max exec_while (integer_inc) integer_eq boolean_or integer_gt) boolean_stackdepth) integer_gte boolean_shove integer_dup_times) integer_pop integer_yank exec_do*range () exec_while () tagged_378 integer_inc integer_lte exec_empty) integer_dup_times) (integer_lte tag_exec_321 (integer_dec) exec_stackdepth exec_dup () boolean_flush) integer_dup_items integer_rot boolean_yankdup) (exec_flush integer_eq exec_k_when_autoconstructing (in1 print_integer boolean_yank exec_do*range (boolean_shove tagged_733 integer_yank exec_pop (integer_lt boolean_yankdup exec_do*times (in2 boolean_pop exec_eq exec_shove (integer_shove print_integer in4) boolean_eq integer_min) boolean_shove print_boolean in3 boolean_frominteger boolean_dup_times integer_yankdup integer_lte) integer_flush exec_flush exec_eq print_newline boolean_or) boolean_invert_first_then_and) ()) ())
Lexicase best errors: [1 1 0 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 114
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction tagged_368} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_while} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_while} {:close 0, :instruction tagged_378} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_exec_321} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_733} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline} {:close 1, :instruction boolean_or} {:close 1, :instruction boolean_invert_first_then_and})
Zero cases best program: (exec_dup_times () integer_dup_times boolean_flush exec_dup () exec_rot (boolean_dup_times boolean_stackdepth in2 print_integer boolean_pop exec_rot (integer_fromboolean exec_empty integer_dec tagged_368) (exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod integer_max exec_while (integer_inc) integer_eq boolean_or integer_gt) boolean_stackdepth) integer_gte boolean_shove integer_dup_times) integer_pop integer_yank exec_do*range () exec_while () tagged_378 integer_inc integer_lte exec_empty) integer_dup_times) (integer_lte tag_exec_321 (integer_dec) exec_stackdepth exec_dup () boolean_flush) integer_dup_items integer_rot boolean_yankdup) (exec_flush integer_eq exec_k_when_autoconstructing (in1 print_integer boolean_yank exec_do*range (boolean_shove tagged_733 integer_yank exec_pop (integer_lt boolean_yankdup exec_do*times (in2 boolean_pop exec_eq exec_shove (integer_shove print_integer in4) boolean_eq integer_min) boolean_shove print_boolean in3 boolean_frominteger boolean_dup_times integer_yankdup integer_lte) integer_flush exec_flush exec_eq print_newline boolean_or) boolean_invert_first_then_and) ()) ())
Zero cases best errors: [1 1 0 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 114
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 857 1000 3 864 1000 1000 3 3)
Population mean number of elite cases: 6.73
Count of perfect (error zero) individuals by case: (0 0 857 0 3 864 0 0 3 3)
Population mean number of perfect (error zero) cases: 1.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction integer_yank} {:close 1, :instruction integer_swap} {:close 0, :instruction tagged_378} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_exec_321} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_733} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_lt})
Best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup () exec_rot (boolean_dup_times boolean_stackdepth in2 print_integer boolean_pop exec_rot (integer_fromboolean exec_empty integer_dec boolean_swap) (exec_dup (exec_swap () (integer_gte exec_yankdup integer_dup_times) integer_pop integer_yank integer_yank) integer_swap) (tagged_378 integer_inc exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod integer_eq print_integer) exec_do*count () integer_pop) boolean_stackdepth) exec_eq integer_dec boolean_yankdup exec_empty) (integer_dup_times) (integer_lte tag_exec_321 (integer_dec) exec_stackdepth exec_dup () boolean_flush) integer_dup_items exec_when (exec_swap () (exec_while (exec_dup_items exec_do*range (boolean_shove tagged_733 integer_yank exec_pop (integer_lt))))))
Errors: [1 1 0 1 0 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 59
Size: 82
Percent parens: 0.280
--- Population Statistics ---
Average total errors in population: 8.27
Median total errors in population: 8
Error averages by case: (1.0 1.0 0.143 1.0 0.997 0.136 1.0 1.0 0.997 0.997)
Error minima by case: (1 1 0 1 0 0 1 1 0 0)
Average genome size in population (length): 49.47
Average program size in population (points): 68.4
Average percent parens in population: 0.284
Minimum age in population: 20.111328125
Maximum age in population: 25.56613159179688
Average age in population: 23.51972912597656
Median age in population: 23.60906982421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.767
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.758
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 14083631
--- Timings ---
Current time: 1559314379893 milliseconds
Total Time:          50.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.7 seconds, 54.6%
Fitness Testing:     12.7 seconds, 25.0%
Report:              10.2 seconds, 20.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Smallest problem report - generation 17
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: 34                 
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: 74                 
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: 28                 
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: 27                 
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: 35                 
Correct output: -54                 | Program output: 59                 
Correct output: -95                 | Program output: 56                 
Correct output: -97                 | Program output: 35                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: 95                 
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: 83                 
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 60                 
Correct output: -34                 | Program output: 79                 
Correct output: -17                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod})
Lexicase best program: (exec_dup_times () exec_dup_items boolean_flush in4 exec_rot (boolean_dup_times exec_rot (boolean_dup_times boolean_stackdepth in1 print_integer boolean_pop exec_rot (integer_fromboolean exec_empty exec_flush boolean_swap) (exec_dup (boolean_invert_first_then_and exec_rot (integer_fromboolean exec_empty integer_dec boolean_swap) (exec_dup (boolean_invert_first_then_and exec_while (integer_inc) integer_eq boolean_or integer_gt) boolean_yank) (integer_gte boolean_shove integer_dup_times) integer_pop integer_yank boolean_invert_first_then_and boolean_not exec_pop (in3 exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod))))) ()) () ()) () ())
Lexicase best errors: [0 1 1 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 67
Percent parens: 0.299
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction in4} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_while} {:close 1, :instruction integer_inc} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod})
Zero cases best program: (exec_dup_times () exec_dup_items boolean_flush in4 exec_rot (boolean_dup_times exec_rot (boolean_dup_times boolean_stackdepth in1 print_integer boolean_pop exec_rot (integer_fromboolean exec_empty exec_flush boolean_swap) (exec_dup (boolean_invert_first_then_and exec_rot (integer_fromboolean exec_empty integer_dec boolean_swap) (exec_dup (boolean_invert_first_then_and exec_while (integer_inc) integer_eq boolean_or integer_gt) boolean_yank) (integer_gte boolean_shove integer_dup_times) integer_pop integer_yank boolean_invert_first_then_and boolean_not exec_pop (in3 exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod))))) ()) () ()) () ())
Zero cases best errors: [0 1 1 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 67
Percent parens: 0.299
--- Lexicase Population Statistics ---
Count of elite individuals by case: (222 1000 1000 1000 1000 676 899 1000 221 222)
Population mean number of elite cases: 7.24
Count of perfect (error zero) individuals by case: (222 0 0 0 0 676 899 0 221 222)
Population mean number of perfect (error zero) cases: 2.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_pop} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 2, :instruction print_integer} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_rot} {:close 1, :instruction exec_swap} {:close 1, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when})
Best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup (boolean_empty boolean_dup_times boolean_stackdepth in1) print_integer boolean_pop exec_rot () (integer_fromboolean exec_pop (integer_dec boolean_swap) exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_eq integer_dup_items exec_flush) integer_eq print_integer)) exec_flush) exec_shove (boolean_shove integer_dup_times) integer_rot) (exec_swap () (integer_gte) boolean_shove integer_dup_times) integer_pop integer_shove boolean_flush exec_when ())
Errors: [0 1 1 1 1 1 0 1 0 0]
Total: 6
Mean: 0.6
Genome size: 41
Size: 56
Percent parens: 0.268
--- Population Statistics ---
Average total errors in population: 7.76
Median total errors in population: 8
Error averages by case: (0.778 1.0 1.0 1.0 1.0 0.324 0.101 1.0 0.779 0.778)
Error minima by case: (0 1 1 1 1 0 0 1 0 0)
Average genome size in population (length): 55.432
Average program size in population (points): 75.783
Average percent parens in population: 0.283
Minimum age in population: 22.3193359375
Maximum age in population: 26.82148742675781
Average age in population: 24.82509652709961
Median age in population: 24.74010467529297
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 131
Genome diversity (% unique genomes):	 0.679
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 133
Syntactic diversity (% unique Push programs):	 0.675
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 14810580
--- Timings ---
Current time: 1559314382102 milliseconds
Total Time:          53.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.0 seconds, 54.7%
Fitness Testing:     13.2 seconds, 25.0%
Report:              10.7 seconds, 20.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Smallest problem report - generation 18
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: 34                 
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: 74                 
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: 28                 
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: 27                 
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: 35                 
Correct output: -54                 | Program output: 59                 
Correct output: -95                 | Program output: 56                 
Correct output: -97                 | Program output: 35                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: 95                 
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: 83                 
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 60                 
Correct output: -34                 | Program output: 79                 
Correct output: -17                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_exec_321} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing})
Lexicase best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup (exec_rot (boolean_dup_times boolean_stackdepth in1 print_integer boolean_pop exec_rot (integer_fromboolean exec_flush integer_eq print_integer) () (exec_do*count () integer_pop) integer_eq exec_dup_times (integer_shove integer_inc integer_lte exec_empty) integer_dup_times) (integer_lte tag_exec_321 (integer_dec) exec_stackdepth exec_dup () boolean_flush) (integer_dup_items integer_rot boolean_yankdup integer_max integer_eq exec_k_when_autoconstructing () ())))
Lexicase best errors: [0 0 1 1 0 0 0 1 1 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 51
Percent parens: 0.294
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_exec_321} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_max} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing})
Zero cases best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup (exec_rot (boolean_dup_times boolean_stackdepth in1 print_integer boolean_pop exec_rot (integer_fromboolean exec_flush integer_eq print_integer) () (exec_do*count () integer_pop) integer_eq exec_dup_times (integer_shove integer_inc integer_lte exec_empty) integer_dup_times) (integer_lte tag_exec_321 (integer_dec) exec_stackdepth exec_dup () boolean_flush) (integer_dup_items integer_rot boolean_yankdup integer_max integer_eq exec_k_when_autoconstructing () ())))
Zero cases best errors: [0 0 1 1 0 0 0 1 1 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 51
Percent parens: 0.294
--- Lexicase Population Statistics ---
Count of elite individuals by case: (651 658 1000 1000 901 657 657 1000 1000 1000)
Population mean number of elite cases: 8.52
Count of perfect (error zero) individuals by case: (651 658 0 0 901 657 657 0 0 0)
Population mean number of perfect (error zero) cases: 3.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_dup} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_flush} {:close 1, :instruction exec_do*range} {:close 2, :instruction exec_while} {:close 0, :instruction tagged_378} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_dup_times} {:close 1, :instruction integer_lte} {:close 0, :instruction integer_yankdup} {:close 1, :instruction -75} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 1, :instruction tagged_733} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_pop} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_eq} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction exec_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_shove} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_eq} {:close 0, :instruction print_newline})
Best program: (exec_dup_times () exec_dup_items integer_dup integer_sub exec_rot (exec_s (boolean_stackdepth in1 print_integer boolean_pop exec_rot (integer_fromboolean exec_empty exec_flush boolean_swap) (print_boolean boolean_invert_first_then_and boolean_not) (exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod integer_eq print_integer)) exec_do*count () integer_pop exec_swap () (integer_gte exec_dup (integer_dup_times) integer_pop integer_flush exec_do*range () exec_while ()) tagged_378 integer_inc integer_lte exec_empty integer_dup_times) integer_lte) integer_yankdup -75) (exec_stackdepth) (exec_dup () boolean_flush integer_dup_items integer_rot boolean_yankdup exec_y (integer_eq exec_k_when_autoconstructing (in1 print_integer boolean_yank exec_do*range (boolean_shove tagged_733) integer_yank exec_pop () integer_lt boolean_yankdup exec_do*times (in2 boolean_pop exec_eq) exec_shove (integer_shove print_integer exec_eq) boolean_eq integer_min boolean_shove) (print_boolean in3 boolean_frominteger boolean_dup_times integer_shove integer_lte integer_flush exec_flush exec_eq print_newline)))) () ())
Errors: [0 0 1 1 0 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 86
Size: 114
Percent parens: 0.246
--- Population Statistics ---
Average total errors in population: 6.476
Median total errors in population: 5
Error averages by case: (0.349 0.342 1.0 1.0 0.099 0.343 0.343 1.0 1.0 1.0)
Error minima by case: (0 0 1 1 0 0 0 1 1 1)
Average genome size in population (length): 48.319
Average program size in population (points): 67.364
Average percent parens in population: 0.290
Minimum age in population: 23.3193359375
Maximum age in population: 28.48201751708984
Average age in population: 26.51206616210938
Median age in population: 26.58052825927734
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 39
Genome diversity (% unique genomes):	 0.744
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.738
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 15515318
--- Timings ---
Current time: 1559314384732 milliseconds
Total Time:          55.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.6 seconds, 55.1%
Fitness Testing:     13.8 seconds, 24.8%
Report:              11.0 seconds, 19.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Smallest problem report - generation 19
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: 34                 
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: 74                 
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: 28                 
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: 27                 
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: 35                 
Correct output: -54                 | Program output: 59                 
Correct output: -95                 | Program output: 56                 
Correct output: -97                 | Program output: 35                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: 95                 
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: 83                 
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 60                 
Correct output: -34                 | Program output: 79                 
Correct output: -17                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_do*while} {:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 92} {:close 2, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_727} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_swap})
Lexicase best program: (exec_do*while (exec_dup_times ()) exec_dup_items boolean_flush boolean_swap exec_rot () (boolean_dup_times boolean_stackdepth in1 print_integer boolean_pop exec_rot () (integer_fromboolean exec_empty integer_dec boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not integer_min exec_yankdup) exec_do*while (exec_stackdepth exec_shove (boolean_xor integer_dup_items integer_mod integer_eq print_integer) boolean_and integer_pop) boolean_stackdepth 92 integer_dec)) (integer_dup exec_when (exec_swap () (exec_while (exec_dup_items boolean_swap in1 boolean_or boolean_invert_second_then_and boolean_yankdup integer_stackdepth boolean_swap) print_boolean boolean_flush in2 in3 exec_y_when_autoconstructing (boolean_pop tagged_727) integer_inc integer_dec) boolean_stackdepth exec_empty) exec_rot () (integer_swap exec_rot () (integer_swap) ()) ()))
Lexicase best errors: [1 1 0 0 1 1 1 0 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 84
Percent parens: 0.274
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_do*while} {:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 1, :instruction exec_yankdup} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_and} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 92} {:close 2, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction in2} {:close 0, :instruction in3} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction boolean_pop} {:close 1, :instruction tagged_727} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_empty} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_swap})
Zero cases best program: (exec_do*while (exec_dup_times ()) exec_dup_items boolean_flush boolean_swap exec_rot () (boolean_dup_times boolean_stackdepth in1 print_integer boolean_pop exec_rot () (integer_fromboolean exec_empty integer_dec boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not integer_min exec_yankdup) exec_do*while (exec_stackdepth exec_shove (boolean_xor integer_dup_items integer_mod integer_eq print_integer) boolean_and integer_pop) boolean_stackdepth 92 integer_dec)) (integer_dup exec_when (exec_swap () (exec_while (exec_dup_items boolean_swap in1 boolean_or boolean_invert_second_then_and boolean_yankdup integer_stackdepth boolean_swap) print_boolean boolean_flush in2 in3 exec_y_when_autoconstructing (boolean_pop tagged_727) integer_inc integer_dec) boolean_stackdepth exec_empty) exec_rot () (integer_swap exec_rot () (integer_swap) ()) ()))
Zero cases best errors: [1 1 0 0 1 1 1 0 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 84
Percent parens: 0.274
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1000 890 898 1000 1000 1000 890 1000 1000)
Population mean number of elite cases: 8.68
Count of perfect (error zero) individuals by case: (1 0 890 898 0 0 0 890 0 0)
Population mean number of perfect (error zero) cases: 2.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_dup_times} {:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 1, :instruction print_integer} {:close 1, :instruction integer_lt} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 92} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction boolean_yankdup})
Best program: (exec_dup_times () exec_dup_times () exec_dup_items boolean_flush exec_dup (exec_rot (boolean_dup_times boolean_stackdepth in1 print_integer exec_yank exec_rot (integer_fromboolean exec_flush integer_eq boolean_xor exec_rot (boolean_dup_times boolean_stackdepth in1 print_integer boolean_pop exec_rot (integer_fromboolean exec_empty integer_dec boolean_swap) (exec_dup (integer_mod boolean_not print_integer) integer_lt) (integer_pop) boolean_stackdepth 92 integer_dec boolean_shove exec_eq exec_dup_times (integer_shove boolean_flush exec_when (exec_swap () (exec_while (exec_dup_items boolean_swap integer_yankdup boolean_swap boolean_invert_second_then_and boolean_yankdup))))) () ()) () ()) () ()))
Errors: [1 1 0 0 1 1 1 0 1 1]
Total: 7
Mean: 0.7
Genome size: 50
Size: 72
Percent parens: 0.306
--- Population Statistics ---
Average total errors in population: 7.321
Median total errors in population: 7
Error averages by case: (0.999 1.0 0.11 0.102 1.0 1.0 1.0 0.11 1.0 1.0)
Error minima by case: (0 1 0 0 1 1 1 0 1 1)
Average genome size in population (length): 45.611
Average program size in population (points): 64.239
Average percent parens in population: 0.295
Minimum age in population: 24.3193359375
Maximum age in population: 29.87383270263672
Average age in population: 28.07667042541504
Median age in population: 28.15111541748047
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.776
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.766
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 16194047
--- Timings ---
Current time: 1559314386921 milliseconds
Total Time:          58.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.0 seconds, 55.3%
Fitness Testing:     14.4 seconds, 24.8%
Report:              11.4 seconds, 19.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Smallest problem report - generation 20
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: 34                 
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: 74                 
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: 28                 
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: 27                 
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: 35                 
Correct output: -54                 | Program output: 59                 
Correct output: -95                 | Program output: 56                 
Correct output: -97                 | Program output: 35                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: 95                 
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: 83                 
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 60                 
Correct output: -34                 | Program output: 79                 
Correct output: -17                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 3, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_pop})
Lexicase best program: (exec_dup_times () exec_dup_items exec_dup_items exec_yankdup boolean_swap exec_rot (boolean_dup_times boolean_stackdepth in1) (print_integer boolean_pop exec_rot (integer_fromboolean exec_empty integer_dec boolean_swap exec_dup (boolean_invert_first_then_and boolean_not exec_pop ())) () ()) ())
Lexicase best errors: [0 1 1 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 30
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 3, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_pop})
Zero cases best program: (exec_dup_times () exec_dup_items exec_dup_items exec_yankdup boolean_swap exec_rot (boolean_dup_times boolean_stackdepth in1) (print_integer boolean_pop exec_rot (integer_fromboolean exec_empty integer_dec boolean_swap exec_dup (boolean_invert_first_then_and boolean_not exec_pop ())) () ()) ())
Zero cases best errors: [0 1 1 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 30
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (630 261 1000 261 631 630 261 1000 631 627)
Population mean number of elite cases: 5.93
Count of perfect (error zero) individuals by case: (630 261 0 261 631 630 261 0 631 627)
Population mean number of perfect (error zero) cases: 3.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_lte} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_swap} {:close 1, :instruction integer_dup_items} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction in4} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_empty} {:close 0, :instruction in2} {:close 0, :instruction exec_if} {:close 0, :instruction boolean_or})
Best program: (exec_rot (boolean_dup_times boolean_stackdepth exec_dup_items boolean_flush exec_dup (exec_rot (boolean_dup_times boolean_stackdepth in1 print_integer boolean_pop exec_rot (integer_fromboolean exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank integer_fromboolean exec_s_when_autoconstructing (integer_dup_items boolean_swap exec_flush) (integer_empty boolean_flush) (integer_mod boolean_stackdepth exec_s_when_autoconstructing (integer_lte exec_dup_times () exec_s (integer_div exec_yank integer_lte exec_dup_times () exec_s (integer_div exec_yank integer_swap integer_dup_items) (print_boolean integer_swap boolean_flush) (boolean_or boolean_stackdepth integer_add in4 integer_min boolean_empty boolean_frominteger exec_dup (boolean_stackdepth boolean_dup_times exec_yank boolean_pop) integer_pop integer_inc integer_dec integer_gte exec_empty in2 exec_if (boolean_or) ())) () ()) () ()))))) () ()) () ())) () ())
Errors: [0 1 1 1 0 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 66
Size: 97
Percent parens: 0.320
--- Population Statistics ---
Average total errors in population: 6.068
Median total errors in population: 5
Error averages by case: (0.37 0.739 1.0 0.739 0.369 0.37 0.739 1.0 0.369 0.373)
Error minima by case: (0 0 1 0 0 0 0 1 0 0)
Average genome size in population (length): 51.43
Average program size in population (points): 73.006
Average percent parens in population: 0.298
Minimum age in population: 26.78904724121094
Maximum age in population: 31.32148742675781
Average age in population: 29.8110329914093
Median age in population: 29.82148742675781
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 103
Genome diversity (% unique genomes):	 0.786
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 104
Syntactic diversity (% unique Push programs):	 0.775
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 17120879
--- Timings ---
Current time: 1559314389217 milliseconds
Total Time:          60.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.3 seconds, 55.4%
Fitness Testing:     15.1 seconds, 25.1%
Report:              11.6 seconds, 19.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Smallest problem report - generation 21
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -13                
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 64                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 73                 
Correct output: 23                  | Program output: 88                 
Correct output: 31                  | Program output: 87                 
Correct output: 20                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 59                 
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 29                 
Correct output: 10                  | Program output: 16                 
Correct output: 1                   | Program output: 30                 
Correct output: 34                  | Program output: 78                 
Correct output: 20                  | Program output: 41                 
Correct output: 9                   | Program output: 15                 
Correct output: 3                   | Program output: 72                 
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 18                 
Correct output: 46                  | Program output: 51                 
Correct output: -96                 | Program output: 82                 
Correct output: -61                 | Program output: -53                
Correct output: -78                 | Program output: 86                 
Correct output: -91                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: 98                 
Correct output: -60                 | Program output: 10                 
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: 97                 
Correct output: -76                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: 22                 
Correct output: -45                 | Program output: 97                 
Correct output: -56                 | Program output: 10                 
Correct output: -75                 | Program output: -1                 
Correct output: -87                 | Program output: -55                
Correct output: -81                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -3                 
Correct output: -54                 | Program output: -47                
Correct output: -95                 | Program output: 3                  
Correct output: -97                 | Program output: -21                
Correct output: -85                 | Program output: 73                 
Correct output: -81                 | Program output: 61                 
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: 24                 
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: 96                 
Correct output: -93                 | Program output: 59                 
Correct output: -62                 | Program output: -8                 
Correct output: -90                 | Program output: -1                 
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: 61                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: 87                 
Correct output: -23                 | Program output: -11                
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: 23                 
Correct output: -95                 | Program output: 33                 
Correct output: -82                 | Program output: 88                 
Correct output: -65                 | Program output: 4                  
Correct output: -36                 | Program output: 10                 
Correct output: -53                 | Program output: -4                 
Correct output: -34                 | Program output: 63                 
Correct output: -17                 | Program output: 54                 
Correct output: -82                 | Program output: -70                
Correct output: -49                 | Program output: -16                
Correct output: -54                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: 55                 
Correct output: -83                 | Program output: 38                 
Correct output: -63                 | Program output: 80                 
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_exec_164} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_733} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction print_boolean})
Lexicase best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup () exec_rot (boolean_dup_times boolean_stackdepth in2 boolean_stackdepth integer_sub print_integer boolean_pop exec_rot (integer_rot exec_empty integer_dec boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank boolean_empty boolean_xor integer_dup_items boolean_swap) exec_dup (boolean_invert_first_then_and exec_k (exec_do*count (boolean_pop exec_rot (exec_when (exec_swap () (exec_while (exec_dup_items boolean_invert_second_then_and integer_div boolean_xor exec_empty) integer_dup_times) integer_lte tag_exec_164 (integer_dec) exec_stackdepth exec_dup () boolean_flush) integer_dup_items integer_rot boolean_yankdup exec_y (print_integer exec_k_when_autoconstructing (in1 print_integer boolean_yank exec_do*range (boolean_shove tagged_733 integer_yank integer_shove print_integer in4) boolean_eq integer_min) (exec_swap (print_boolean in3 print_boolean) ()))) () ())) ())))) ()) () ())
Lexicase best errors: [0 0 0 1 0 0 1 1 1 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 102
Percent parens: 0.304
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_exec_164} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_733} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction print_boolean})
Zero cases best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup () exec_rot (boolean_dup_times boolean_stackdepth in2 boolean_stackdepth integer_sub print_integer boolean_pop exec_rot (integer_rot exec_empty integer_dec boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank boolean_empty boolean_xor integer_dup_items boolean_swap) exec_dup (boolean_invert_first_then_and exec_k (exec_do*count (boolean_pop exec_rot (exec_when (exec_swap () (exec_while (exec_dup_items boolean_invert_second_then_and integer_div boolean_xor exec_empty) integer_dup_times) integer_lte tag_exec_164 (integer_dec) exec_stackdepth exec_dup () boolean_flush) integer_dup_items integer_rot boolean_yankdup exec_y (print_integer exec_k_when_autoconstructing (in1 print_integer boolean_yank exec_do*range (boolean_shove tagged_733 integer_yank integer_shove print_integer in4) boolean_eq integer_min) (exec_swap (print_boolean in3 print_boolean) ()))) () ())) ())))) ()) () ())
Zero cases best errors: [0 0 0 1 0 0 1 1 1 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 102
Percent parens: 0.304
--- Lexicase Population Statistics ---
Count of elite individuals by case: (308 307 308 1000 308 307 1000 1000 1000 584)
Population mean number of elite cases: 6.12
Count of perfect (error zero) individuals by case: (308 307 308 0 308 307 0 0 0 584)
Population mean number of perfect (error zero) cases: 2.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_shove} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_exec_164} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_733} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction print_boolean})
Best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup () exec_rot (boolean_dup_times boolean_stackdepth in2 boolean_stackdepth integer_sub print_integer boolean_pop exec_rot (integer_rot exec_empty integer_dec boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not boolean_shove in3 exec_do*while (integer_yank boolean_empty boolean_xor integer_dup_items boolean_swap) exec_dup (boolean_invert_first_then_and exec_k (exec_do*count (boolean_pop exec_rot (exec_when (exec_swap () (exec_while (exec_dup_items boolean_invert_second_then_and integer_div boolean_xor exec_empty) integer_dup_times) integer_lte tag_exec_164 (integer_dec) exec_stackdepth exec_dup () boolean_flush) integer_dup_items integer_rot boolean_yankdup exec_y (print_integer exec_k_when_autoconstructing (in1 print_integer boolean_yank exec_do*range (boolean_shove tagged_733 integer_yank integer_shove print_integer in4) boolean_eq integer_min) (exec_swap (print_boolean in3 print_boolean) ()))) () ())) ()))) ()) () ())
Errors: [0 0 0 1 0 0 1 1 1 1]
Total: 5
Mean: 0.5
Genome size: 71
Size: 101
Percent parens: 0.297
--- Population Statistics ---
Average total errors in population: 7.878
Median total errors in population: 9
Error averages by case: (0.692 0.693 0.692 1.0 0.692 0.693 1.0 1.0 1.0 0.416)
Error minima by case: (0 0 0 1 0 0 1 1 1 0)
Average genome size in population (length): 50.475
Average program size in population (points): 71.957
Average percent parens in population: 0.300
Minimum age in population: 27.78904724121094
Maximum age in population: 33.04150867462158
Average age in population: 31.34058992195129
Median age in population: 31.40422296524048
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 48
Genome diversity (% unique genomes):	 0.826
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 49
Syntactic diversity (% unique Push programs):	 0.815
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 18070212
--- Timings ---
Current time: 1559314392399 milliseconds
Total Time:          62.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        34.9 seconds, 55.6%
Fitness Testing:     15.8 seconds, 25.2%
Report:              11.9 seconds, 19.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Smallest problem report - generation 22
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: 34                 
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: 74                 
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: 28                 
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: 27                 
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: 35                 
Correct output: -54                 | Program output: 59                 
Correct output: -95                 | Program output: 56                 
Correct output: -97                 | Program output: 35                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: 95                 
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: 83                 
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 60                 
Correct output: -34                 | Program output: 79                 
Correct output: -17                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_733} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction print_boolean})
Lexicase best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup (exec_dup_times ()) exec_dup_items boolean_flush exec_dup (exec_rot (boolean_dup_times boolean_stackdepth in1 print_integer) (boolean_pop exec_y (integer_fromboolean exec_empty) integer_dec boolean_swap exec_dup (boolean_xor integer_dup_items integer_mod exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod integer_eq print_integer)) exec_do*count (integer_pop) boolean_stackdepth) exec_eq integer_dec boolean_yankdup exec_empty) (integer_dup_times integer_lte boolean_frominteger integer_dec) exec_stackdepth boolean_stackdepth) boolean_flush integer_dup_items integer_dup_items integer_rot print_integer boolean_yank exec_do*range (boolean_shove tagged_733 integer_yank integer_shove print_integer in4) boolean_eq integer_min exec_swap (print_boolean in3 print_boolean) ())
Lexicase best errors: [0 1 1 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 79
Percent parens: 0.203
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction exec_empty} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_frominteger} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_733} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction print_boolean})
Zero cases best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup (exec_dup_times ()) exec_dup_items boolean_flush exec_dup (exec_rot (boolean_dup_times boolean_stackdepth in1 print_integer) (boolean_pop exec_y (integer_fromboolean exec_empty) integer_dec boolean_swap exec_dup (boolean_xor integer_dup_items integer_mod exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod integer_eq print_integer)) exec_do*count (integer_pop) boolean_stackdepth) exec_eq integer_dec boolean_yankdup exec_empty) (integer_dup_times integer_lte boolean_frominteger integer_dec) exec_stackdepth boolean_stackdepth) boolean_flush integer_dup_items integer_dup_items integer_rot print_integer boolean_yank exec_do*range (boolean_shove tagged_733 integer_yank integer_shove print_integer in4) boolean_eq integer_min exec_swap (print_boolean in3 print_boolean) ())
Zero cases best errors: [0 1 1 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 79
Percent parens: 0.203
--- Lexicase Population Statistics ---
Count of elite individuals by case: (140 1000 1000 142 878 140 140 738 739 1000)
Population mean number of elite cases: 5.92
Count of perfect (error zero) individuals by case: (140 0 0 142 878 140 140 738 739 0)
Population mean number of perfect (error zero) cases: 2.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_do*count} {:close 2, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 92} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in4} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_pop} {:close 1, :instruction print_newline} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_swap})
Best program: (exec_dup_times () integer_min boolean_flush exec_dup (exec_rot (boolean_dup_times boolean_stackdepth in1 print_integer boolean_pop exec_rot () (integer_fromboolean exec_empty integer_dec boolean_swap exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_xor exec_do*count () integer_pop)) boolean_stackdepth 92 integer_dec boolean_shove exec_eq exec_dup_times (integer_shove boolean_flush exec_when (exec_swap () (exec_dup () boolean_flush) integer_dup_items integer_rot boolean_yankdup exec_y (boolean_flush) integer_dup_items integer_rot boolean_yankdup exec_y (integer_eq exec_k_when_autoconstructing (in4 print_integer) (boolean_yank exec_do*range (boolean_shove exec_stackdepth exec_pop () print_newline) integer_dup_items integer_rot boolean_yankdup integer_swap))))))) ()) () ()))
Errors: [0 1 1 0 0 0 0 1 1 1]
Total: 5
Mean: 0.5
Genome size: 61
Size: 86
Percent parens: 0.291
--- Population Statistics ---
Average total errors in population: 7.083
Median total errors in population: 7
Error averages by case: (0.86 1.0 1.0 0.858 0.122 0.86 0.86 0.262 0.261 1.0)
Error minima by case: (0 1 1 0 0 0 0 0 0 1)
Average genome size in population (length): 60.754
Average program size in population (points): 87.384
Average percent parens in population: 0.306
Minimum age in population: 29.60453796386719
Maximum age in population: 34.90829944610596
Average age in population: 33.01911856603622
Median age in population: 33.07512974739075
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 47
Genome diversity (% unique genomes):	 0.812
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.808
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 19418973
--- Timings ---
Current time: 1559314395685 milliseconds
Total Time:          66.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        36.4 seconds, 55.1%
Fitness Testing:     16.8 seconds, 25.4%
Report:              12.8 seconds, 19.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Smallest problem report - generation 23
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -13                
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 64                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 73                 
Correct output: 23                  | Program output: 88                 
Correct output: 31                  | Program output: 87                 
Correct output: 20                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 59                 
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 29                 
Correct output: 10                  | Program output: 16                 
Correct output: 1                   | Program output: 30                 
Correct output: 34                  | Program output: 78                 
Correct output: 20                  | Program output: 41                 
Correct output: 9                   | Program output: 15                 
Correct output: 3                   | Program output: 72                 
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 18                 
Correct output: 46                  | Program output: 51                 
Correct output: -96                 | Program output: 82                 
Correct output: -61                 | Program output: -53                
Correct output: -78                 | Program output: 86                 
Correct output: -91                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: 98                 
Correct output: -60                 | Program output: 10                 
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: 97                 
Correct output: -76                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: 22                 
Correct output: -45                 | Program output: 97                 
Correct output: -56                 | Program output: 10                 
Correct output: -75                 | Program output: -1                 
Correct output: -87                 | Program output: -55                
Correct output: -81                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -3                 
Correct output: -54                 | Program output: -47                
Correct output: -95                 | Program output: 3                  
Correct output: -97                 | Program output: -21                
Correct output: -85                 | Program output: 73                 
Correct output: -81                 | Program output: 61                 
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: 24                 
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: 96                 
Correct output: -93                 | Program output: 59                 
Correct output: -62                 | Program output: -8                 
Correct output: -90                 | Program output: -1                 
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: 61                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: 87                 
Correct output: -23                 | Program output: -11                
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: 23                 
Correct output: -95                 | Program output: 33                 
Correct output: -82                 | Program output: 88                 
Correct output: -65                 | Program output: 4                  
Correct output: -36                 | Program output: 10                 
Correct output: -53                 | Program output: -4                 
Correct output: -34                 | Program output: 63                 
Correct output: -17                 | Program output: 54                 
Correct output: -82                 | Program output: -70                
Correct output: -49                 | Program output: -16                
Correct output: -54                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: 55                 
Correct output: -83                 | Program output: 38                 
Correct output: -63                 | Program output: 80                 
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_empty})
Lexicase best program: (exec_dup_times () exec_dup_items boolean_flush boolean_dup_times boolean_stackdepth in1 print_integer boolean_pop exec_rot (exec_when (exec_empty integer_dec boolean_swap) exec_empty integer_dec boolean_swap) (exec_dup (exec_yankdup boolean_not exec_do*count (in3 exec_dup (boolean_invert_first_then_and boolean_not integer_dec boolean_swap) exec_yank boolean_invert_first_then_and boolean_not exec_do*count (integer_mult) exec_do*while (exec_flush) boolean_stackdepth integer_empty boolean_stackdepth) exec_flush integer_dup_items exec_empty)) ())
Lexicase best errors: [1 0 1 1 0 0 1 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 50
Percent parens: 0.220
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 1, :instruction integer_mult} {:close 0, :instruction exec_do*while} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_empty})
Zero cases best program: (exec_dup_times () exec_dup_items boolean_flush boolean_dup_times boolean_stackdepth in1 print_integer boolean_pop exec_rot (exec_when (exec_empty integer_dec boolean_swap) exec_empty integer_dec boolean_swap) (exec_dup (exec_yankdup boolean_not exec_do*count (in3 exec_dup (boolean_invert_first_then_and boolean_not integer_dec boolean_swap) exec_yank boolean_invert_first_then_and boolean_not exec_do*count (integer_mult) exec_do*while (exec_flush) boolean_stackdepth integer_empty boolean_stackdepth) exec_flush integer_dup_items exec_empty)) ())
Zero cases best errors: [1 0 1 1 0 0 1 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 50
Percent parens: 0.220
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 583 300 300 583 582 1000 300 1000 1000)
Population mean number of elite cases: 6.65
Count of perfect (error zero) individuals by case: (0 583 300 300 583 582 0 300 0 0)
Population mean number of perfect (error zero) cases: 2.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_exec_164} {:close 1, :instruction integer_dec} {:close 1, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_733} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction print_boolean})
Best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup () exec_rot (boolean_dup_times boolean_stackdepth in2 boolean_stackdepth integer_sub print_integer integer_shove exec_rot (integer_rot exec_empty integer_dec boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank boolean_empty boolean_xor integer_dup_items boolean_swap) exec_dup (integer_rot exec_k (exec_do*count (exec_dup (boolean_invert_first_then_and exec_k (exec_do*count (boolean_pop exec_rot (exec_when (exec_swap () (exec_while (exec_dup_items boolean_invert_second_then_and integer_div boolean_xor exec_empty) integer_dup_times) integer_lte tag_exec_164 (integer_dec) exec_stackdepth) exec_dup () boolean_flush) (integer_dup_items integer_rot boolean_yankdup exec_y (print_integer exec_k_when_autoconstructing (in1 print_integer boolean_yank exec_do*range (boolean_shove tagged_733 integer_yank integer_shove print_integer in4) boolean_eq integer_min) (exec_swap (print_boolean in3 print_boolean) ()))) ())) ()))) ())))) ()) () ())
Errors: [1 1 0 0 1 1 1 0 1 1]
Total: 7
Mean: 0.7
Genome size: 75
Size: 110
Percent parens: 0.318
--- Population Statistics ---
Average total errors in population: 7.352
Median total errors in population: 7
Error averages by case: (1.0 0.417 0.7 0.7 0.417 0.418 1.0 0.7 1.0 1.0)
Error minima by case: (1 0 0 0 0 0 1 0 1 1)
Average genome size in population (length): 49.259
Average program size in population (points): 70.385
Average percent parens in population: 0.302
Minimum age in population: 30.68155670166016
Maximum age in population: 36.36766457557678
Average age in population: 34.30835585260391
Median age in population: 34.3809027671814
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 13
Genome diversity (% unique genomes):	 0.722
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.716
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 20295055
--- Timings ---
Current time: 1559314398599 milliseconds
Total Time:          69.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        37.8 seconds, 54.8%
Fitness Testing:     17.5 seconds, 25.3%
Report:              13.6 seconds, 19.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Smallest problem report - generation 24
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: 34                 
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: 74                 
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: 28                 
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: 27                 
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: 35                 
Correct output: -54                 | Program output: 59                 
Correct output: -95                 | Program output: 56                 
Correct output: -97                 | Program output: 35                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: 95                 
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: 83                 
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 60                 
Correct output: -34                 | Program output: 79                 
Correct output: -17                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_exec_164} {:close 1, :instruction print_exec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_733} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction print_boolean})
Lexicase best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup () exec_rot (boolean_dup_times boolean_stackdepth in2 boolean_stackdepth integer_sub print_integer boolean_pop exec_rot (integer_rot exec_empty integer_dec boolean_swap) (boolean_eq boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank boolean_empty boolean_xor integer_dup_items boolean_swap) exec_dup (print_exec (exec_k (exec_do*count (boolean_pop exec_rot (exec_when (exec_swap () (exec_while (exec_dup_items exec_pop (print_boolean boolean_xor exec_empty) integer_dup_times) integer_lte tag_exec_164 (print_exec () exec_stackdepth exec_dup () boolean_flush) integer_dup_items integer_rot boolean_yankdup exec_y (print_integer exec_k_when_autoconstructing (in1 print_integer boolean_yank exec_do*range (boolean_shove tagged_733 integer_yank integer_shove print_integer in4) boolean_eq integer_min) (exec_swap (print_boolean in3 print_boolean) ()))))) () ())) ())))) ()) () ())
Lexicase best errors: [1 1 1 1 0 1 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 104
Percent parens: 0.317
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction print_exec} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_pop} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_exec_164} {:close 1, :instruction print_exec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_733} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction print_boolean})
Zero cases best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup () exec_rot (boolean_dup_times boolean_stackdepth in2 boolean_stackdepth integer_sub print_integer boolean_pop exec_rot (integer_rot exec_empty integer_dec boolean_swap) (boolean_eq boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank boolean_empty boolean_xor integer_dup_items boolean_swap) exec_dup (print_exec (exec_k (exec_do*count (boolean_pop exec_rot (exec_when (exec_swap () (exec_while (exec_dup_items exec_pop (print_boolean boolean_xor exec_empty) integer_dup_times) integer_lte tag_exec_164 (print_exec () exec_stackdepth exec_dup () boolean_flush) integer_dup_items integer_rot boolean_yankdup exec_y (print_integer exec_k_when_autoconstructing (in1 print_integer boolean_yank exec_do*range (boolean_shove tagged_733 integer_yank integer_shove print_integer in4) boolean_eq integer_min) (exec_swap (print_boolean in3 print_boolean) ()))))) () ())) ())))) ()) () ())
Zero cases best errors: [1 1 1 1 0 1 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 104
Percent parens: 0.317
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 1000 465 434 1000 434 466 1000 898)
Population mean number of elite cases: 7.70
Count of perfect (error zero) individuals by case: (0 0 0 465 434 0 434 466 0 898)
Population mean number of perfect (error zero) cases: 2.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap})
Best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup_items exec_rot (boolean_dup_times integer_rot exec_k (boolean_dup_times boolean_stackdepth in1 print_integer boolean_pop exec_rot (exec_when (exec_empty integer_dec exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank boolean_empty boolean_xor integer_dup_items boolean_swap) exec_dup (boolean_invert_first_then_and exec_k (exec_do*count (boolean_pop exec_rot (exec_when (exec_swap () ())) () ())) ()))))) () ()) ()) () ())
Errors: [1 1 1 0 1 1 1 0 1 0]
Total: 7
Mean: 0.7
Genome size: 36
Size: 60
Percent parens: 0.400
--- Population Statistics ---
Average total errors in population: 7.303
Median total errors in population: 7
Error averages by case: (1.0 1.0 1.0 0.535 0.566 1.0 0.566 0.534 1.0 0.102)
Error minima by case: (1 1 1 0 0 1 0 0 1 0)
Average genome size in population (length): 49.768
Average program size in population (points): 71.39
Average percent parens in population: 0.304
Minimum age in population: 31.68155670166016
Maximum age in population: 37.90690767765045
Average age in population: 35.78815140199661
Median age in population: 35.82666993141174
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.829
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.823
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 21233561
--- Timings ---
Current time: 1559314402032 milliseconds
Total Time:          72.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        39.7 seconds, 54.8%
Fitness Testing:     18.2 seconds, 25.1%
Report:              14.4 seconds, 19.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Smallest problem report - generation 25
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: 34                 
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: 74                 
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: 28                 
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: 27                 
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: 35                 
Correct output: -54                 | Program output: 59                 
Correct output: -95                 | Program output: 56                 
Correct output: -97                 | Program output: 35                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: 95                 
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: 83                 
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 60                 
Correct output: -34                 | Program output: 79                 
Correct output: -17                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_exec_164} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_733} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction print_boolean})
Lexicase best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup () exec_rot (boolean_flush exec_dup (exec_noop boolean_dup_times exec_rot (boolean_dup_times boolean_stackdepth in1 print_integer boolean_pop exec_rot (integer_fromboolean exec_empty exec_flush boolean_swap) (exec_dup (boolean_invert_first_then_and exec_rot (integer_fromboolean exec_empty integer_dec boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not boolean_pop in3) exec_rot (exec_when (exec_swap () (exec_while (exec_dup_items boolean_invert_second_then_and integer_div boolean_xor exec_empty) integer_dup_times) integer_lte tag_exec_164 (integer_dec) exec_stackdepth exec_dup () boolean_flush) integer_dup_items integer_rot) (boolean_yankdup exec_y (print_integer exec_k_when_autoconstructing (in1 boolean_swap boolean_yank exec_do*range (boolean_shove tagged_733 integer_yank integer_shove print_integer in4) boolean_eq integer_min) (exec_swap (print_boolean in3 print_boolean) ()))) ()) ())) ()) () ())) () ())
Lexicase best errors: [1 0 1 1 0 1 1 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 103
Percent parens: 0.320
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 1, :instruction in3} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_exec_164} {:close 1, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 1, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_733} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction in3} {:close 0, :instruction print_boolean})
Zero cases best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup () exec_rot (boolean_flush exec_dup (exec_noop boolean_dup_times exec_rot (boolean_dup_times boolean_stackdepth in1 print_integer boolean_pop exec_rot (integer_fromboolean exec_empty exec_flush boolean_swap) (exec_dup (boolean_invert_first_then_and exec_rot (integer_fromboolean exec_empty integer_dec boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not boolean_pop in3) exec_rot (exec_when (exec_swap () (exec_while (exec_dup_items boolean_invert_second_then_and integer_div boolean_xor exec_empty) integer_dup_times) integer_lte tag_exec_164 (integer_dec) exec_stackdepth exec_dup () boolean_flush) integer_dup_items integer_rot) (boolean_yankdup exec_y (print_integer exec_k_when_autoconstructing (in1 boolean_swap boolean_yank exec_do*range (boolean_shove tagged_733 integer_yank integer_shove print_integer in4) boolean_eq integer_min) (exec_swap (print_boolean in3 print_boolean) ()))) ()) ())) ()) () ())) () ())
Zero cases best errors: [1 0 1 1 0 1 1 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 103
Percent parens: 0.320
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 481 424 1000 482 1000 1000 482 425 480)
Population mean number of elite cases: 6.77
Count of perfect (error zero) individuals by case: (0 481 424 0 482 0 0 482 425 480)
Population mean number of perfect (error zero) cases: 2.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_gte} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction 93})
Best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup_items exec_rot (boolean_dup_times boolean_stackdepth in2 in1 print_integer boolean_pop exec_rot (integer_fromboolean exec_empty integer_dec boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not exec_dup (exec_swap () (integer_gte exec_yankdup exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_eq integer_dup_items exec_flush integer_eq print_integer)) exec_do*count () integer_pop) boolean_stackdepth 93)))) ()) () ())
Errors: [1 0 1 1 0 1 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 37
Size: 53
Percent parens: 0.302
--- Population Statistics ---
Average total errors in population: 7.226
Median total errors in population: 8
Error averages by case: (1.0 0.519 0.576 1.0 0.518 1.0 1.0 0.518 0.575 0.52)
Error minima by case: (1 0 0 1 0 1 1 0 0 0)
Average genome size in population (length): 48.81
Average program size in population (points): 69.901
Average percent parens in population: 0.303
Minimum age in population: 34.40542936325073
Maximum age in population: 39.27995842695236
Average age in population: 37.27249963772297
Median age in population: 37.34459319710732
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 10
Genome diversity (% unique genomes):	 0.846
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.841
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 22114731
--- Timings ---
Current time: 1559314404644 milliseconds
Total Time:          75.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        41.2 seconds, 54.6%
Fitness Testing:     18.9 seconds, 25.0%
Report:              15.3 seconds, 20.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Smallest problem report - generation 26
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: 34                 
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: 74                 
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: 28                 
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: 27                 
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: 35                 
Correct output: -54                 | Program output: 59                 
Correct output: -95                 | Program output: 56                 
Correct output: -97                 | Program output: 35                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: 95                 
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: 83                 
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 60                 
Correct output: -34                 | Program output: 79                 
Correct output: -17                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 2, :instruction print_integer})
Lexicase best program: (exec_dup_times () exec_dup_items boolean_flush boolean_swap exec_rot (boolean_dup_times print_integer in1 print_integer boolean_pop boolean_and integer_fromboolean integer_inc boolean_xor integer_dup_items integer_mod integer_max print_integer) () ())
Lexicase best errors: [1 1 1 1 1 1 1 1 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 9
Lexicase best mean error: 0.9
Lexicase best size: 23
Percent parens: 0.217
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 2, :instruction print_integer})
Zero cases best program: (exec_dup_times () exec_dup_items boolean_flush boolean_swap exec_rot (boolean_dup_times print_integer in1 print_integer boolean_pop boolean_and integer_fromboolean integer_inc boolean_xor integer_dup_items integer_mod integer_max print_integer) () ())
Zero cases best errors: [1 1 1 1 1 1 1 1 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 1
Zero cases best total error: 9
Zero cases best mean error: 0.9
Zero cases best size: 23
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 1000 1000 1000 1000 287 1000 1000 621)
Population mean number of elite cases: 8.91
Count of perfect (error zero) individuals by case: (0 0 0 0 0 0 287 0 0 621)
Population mean number of perfect (error zero) cases: 0.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 1, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 1, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_y} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction integer_swap} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 2, :instruction exec_do*range})
Best program: (exec_dup_times () exec_dup (boolean_flush boolean_invert_first_then_and boolean_dup_times boolean_stackdepth) in1 print_integer boolean_pop exec_rot (integer_fromboolean exec_empty integer_dec boolean_swap) (boolean_pop) (boolean_invert_first_then_and boolean_not exec_when (in3) in4 exec_y (exec_k_when_autoconstructing (integer_swap boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (exec_do*range ())))))))
Errors: [1 1 1 1 1 1 1 1 1 0]
Total: 9
Mean: 0.9
Genome size: 31
Size: 45
Percent parens: 0.311
--- Population Statistics ---
Average total errors in population: 9.092
Median total errors in population: 9
Error averages by case: (1.0 1.0 1.0 1.0 1.0 1.0 0.713 1.0 1.0 0.379)
Error minima by case: (1 1 1 1 1 1 0 1 1 0)
Average genome size in population (length): 44.222
Average program size in population (points): 63.45
Average percent parens in population: 0.304
Minimum age in population: 35.40542936325073
Maximum age in population: 40.90626761317253
Average age in population: 38.77934317567945
Median age in population: 38.87509815394878
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.816
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.811
Total error diversity:				 0.002
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 22877309
--- Timings ---
Current time: 1559314407391 milliseconds
Total Time:          78.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        42.7 seconds, 54.7%
Fitness Testing:     19.5 seconds, 25.0%
Report:              15.7 seconds, 20.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Smallest problem report - generation 27
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: 34                 
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: 74                 
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: 28                 
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: 27                 
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: 35                 
Correct output: -54                 | Program output: 59                 
Correct output: -95                 | Program output: 56                 
Correct output: -97                 | Program output: 35                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: 95                 
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: 83                 
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 60                 
Correct output: -34                 | Program output: 79                 
Correct output: -17                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_dup_times} {:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction print_boolean} {:close 1, :instruction tagged_368} {:close 0, :instruction exec_dup})
Lexicase best program: (exec_dup_times () exec_dup_times () exec_dup_items boolean_flush exec_dup (exec_rot () (boolean_dup_times boolean_stackdepth in1 print_integer exec_yank exec_rot (integer_fromboolean exec_flush integer_eq print_boolean tagged_368) (exec_dup ()) ()) ()))
Lexicase best errors: [1 0 1 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 29
Percent parens: 0.379
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_dup_times} {:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction print_boolean} {:close 1, :instruction tagged_368} {:close 0, :instruction exec_dup})
Zero cases best program: (exec_dup_times () exec_dup_times () exec_dup_items boolean_flush exec_dup (exec_rot () (boolean_dup_times boolean_stackdepth in1 print_integer exec_yank exec_rot (integer_fromboolean exec_flush integer_eq print_boolean tagged_368) (exec_dup ()) ()) ()))
Zero cases best errors: [1 0 1 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 29
Percent parens: 0.379
--- Lexicase Population Statistics ---
Count of elite individuals by case: (458 443 1000 1000 442 1000 1000 458 448 443)
Population mean number of elite cases: 6.69
Count of perfect (error zero) individuals by case: (458 443 0 0 442 0 0 458 448 443)
Population mean number of perfect (error zero) cases: 2.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 1, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_y} {:close 0, :instruction print_integer} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_do*range} {:close 0, :instruction boolean_shove} {:close 0, :instruction tagged_733} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 1, :instruction in4} {:close 0, :instruction boolean_eq} {:close 1, :instruction integer_min} {:close 0, :instruction exec_swap} {:close 0, :instruction print_boolean} {:close 0, :instruction exec_do*count})
Best program: (exec_dup_times () exec_dup_items exec_dup_items boolean_flush exec_dup (exec_rot (exec_dup_items boolean_stackdepth in1 print_integer boolean_pop exec_rot () (boolean_empty exec_empty integer_dec boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (boolean_rot boolean_or integer_mod in2 exec_while () exec_empty boolean_dup) exec_flush) boolean_stackdepth boolean_swap exec_k (exec_do*count (boolean_pop exec_rot (exec_when (exec_swap () (boolean_pop exec_rot (exec_when (exec_swap () (exec_while (boolean_flush) integer_dup_items integer_rot boolean_yankdup exec_y (print_integer exec_k_when_autoconstructing (in1 print_integer integer_empty exec_do*range (boolean_shove tagged_733 integer_yank integer_shove print_integer in4) boolean_eq integer_min) (exec_swap (print_boolean exec_do*count ()) ()))))) () ()))) () ())) ())) () ()))
Errors: [1 0 1 1 0 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 63
Size: 98
Percent parens: 0.357
--- Population Statistics ---
Average total errors in population: 7.308
Median total errors in population: 8
Error averages by case: (0.542 0.557 1.0 1.0 0.558 1.0 1.0 0.542 0.552 0.557)
Error minima by case: (0 0 1 1 0 1 1 0 0 0)
Average genome size in population (length): 45.877
Average program size in population (points): 66.128
Average percent parens in population: 0.307
Minimum age in population: 36.47945022583008
Maximum age in population: 42.51384848356247
Average age in population: 40.32435800991952
Median age in population: 40.41044117510319
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.834
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.83
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 23723923
--- Timings ---
Current time: 1559314409838 milliseconds
Total Time:          80.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.2 seconds, 54.7%
Fitness Testing:     20.1 seconds, 24.9%
Report:              16.4 seconds, 20.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Smallest problem report - generation 28
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -13                
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 64                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 73                 
Correct output: 23                  | Program output: 88                 
Correct output: 31                  | Program output: 87                 
Correct output: 20                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 59                 
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 29                 
Correct output: 10                  | Program output: 16                 
Correct output: 1                   | Program output: 30                 
Correct output: 34                  | Program output: 78                 
Correct output: 20                  | Program output: 41                 
Correct output: 9                   | Program output: 15                 
Correct output: 3                   | Program output: 72                 
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 18                 
Correct output: 46                  | Program output: 51                 
Correct output: -96                 | Program output: 82                 
Correct output: -61                 | Program output: -53                
Correct output: -78                 | Program output: 86                 
Correct output: -91                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: 98                 
Correct output: -60                 | Program output: 10                 
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: 97                 
Correct output: -76                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: 22                 
Correct output: -45                 | Program output: 97                 
Correct output: -56                 | Program output: 10                 
Correct output: -75                 | Program output: -1                 
Correct output: -87                 | Program output: -55                
Correct output: -81                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -3                 
Correct output: -54                 | Program output: -47                
Correct output: -95                 | Program output: 3                  
Correct output: -97                 | Program output: -21                
Correct output: -85                 | Program output: 73                 
Correct output: -81                 | Program output: 61                 
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: 24                 
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: 96                 
Correct output: -93                 | Program output: 59                 
Correct output: -62                 | Program output: -8                 
Correct output: -90                 | Program output: -1                 
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: 61                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: 87                 
Correct output: -23                 | Program output: -11                
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: 23                 
Correct output: -95                 | Program output: 33                 
Correct output: -82                 | Program output: 88                 
Correct output: -65                 | Program output: 4                  
Correct output: -36                 | Program output: 10                 
Correct output: -53                 | Program output: -4                 
Correct output: -34                 | Program output: 63                 
Correct output: -17                 | Program output: 54                 
Correct output: -82                 | Program output: -70                
Correct output: -49                 | Program output: -16                
Correct output: -54                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: 55                 
Correct output: -83                 | Program output: 38                 
Correct output: -63                 | Program output: 80                 
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_exec_164} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod})
Lexicase best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup () exec_rot (integer_swap boolean_stackdepth in2 boolean_stackdepth integer_sub print_integer boolean_shove exec_rot (integer_rot exec_empty integer_dec boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank boolean_empty boolean_xor integer_dup_items boolean_swap) exec_dup (boolean_invert_first_then_and exec_k (exec_do*count (boolean_pop exec_rot (exec_when (exec_swap () (exec_while (exec_dup_items boolean_invert_second_then_and integer_div boolean_xor exec_empty) integer_dup_times) integer_lte tag_exec_164 (integer_dec exec_stackdepth exec_dup () boolean_flush) integer_dup_items boolean_not integer_lte in3 exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod)))) () ())) ())))) ()) () ())
Lexicase best errors: [1 1 0 1 0 0 0 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 86
Percent parens: 0.314
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 1, :instruction exec_empty} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_exec_164} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction exec_dup} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lte} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod})
Zero cases best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup () exec_rot (integer_swap boolean_stackdepth in2 boolean_stackdepth integer_sub print_integer boolean_shove exec_rot (integer_rot exec_empty integer_dec boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank boolean_empty boolean_xor integer_dup_items boolean_swap) exec_dup (boolean_invert_first_then_and exec_k (exec_do*count (boolean_pop exec_rot (exec_when (exec_swap () (exec_while (exec_dup_items boolean_invert_second_then_and integer_div boolean_xor exec_empty) integer_dup_times) integer_lte tag_exec_164 (integer_dec exec_stackdepth exec_dup () boolean_flush) integer_dup_items boolean_not integer_lte in3 exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod)))) () ())) ())))) ()) () ())
Zero cases best errors: [1 1 0 1 0 0 0 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 86
Percent parens: 0.314
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 1000 297 3 899 297 297 297 1000 601)
Population mean number of elite cases: 5.69
Count of perfect (error zero) individuals by case: (0 0 297 3 899 297 297 297 0 601)
Population mean number of perfect (error zero) cases: 2.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_dup_times} {:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_sub} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_mod})
Best program: (exec_dup_times () exec_dup_times () exec_dup_items boolean_flush exec_dup () exec_rot (boolean_dup_times boolean_stackdepth in2 boolean_stackdepth integer_sub print_integer boolean_pop exec_rot (integer_rot exec_empty integer_dec) (boolean_swap) (boolean_or boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_flush integer_eq print_integer) exec_do*count () integer_pop) boolean_stackdepth integer_mod) () ())
Errors: [1 1 0 1 0 0 0 0 1 1]
Total: 5
Mean: 0.5
Genome size: 30
Size: 42
Percent parens: 0.286
--- Population Statistics ---
Average total errors in population: 7.309
Median total errors in population: 8
Error averages by case: (1.0 1.0 0.703 0.997 0.101 0.703 0.703 0.703 1.0 0.399)
Error minima by case: (1 1 0 0 0 0 0 0 1 0)
Average genome size in population (length): 44.376
Average program size in population (points): 64.025
Average percent parens in population: 0.307
Minimum age in population: 37.47945022583008
Maximum age in population: 43.82501152157784
Average age in population: 41.79745688648522
Median age in population: 41.89235045015812
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 12
Genome diversity (% unique genomes):	 0.823
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.815
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 24459675
--- Timings ---
Current time: 1559314412252 milliseconds
Total Time:          83.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.8 seconds, 55.0%
Fitness Testing:     20.7 seconds, 24.9%
Report:              16.6 seconds, 20.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Smallest problem report - generation 29
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: 34                 
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: 74                 
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: 28                 
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: 27                 
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: 35                 
Correct output: -54                 | Program output: 59                 
Correct output: -95                 | Program output: 56                 
Correct output: -97                 | Program output: 35                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: 95                 
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: 83                 
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 60                 
Correct output: -34                 | Program output: 79                 
Correct output: -17                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 92} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items})
Lexicase best program: (exec_dup_times () boolean_stackdepth in1 print_integer boolean_pop exec_rot (integer_fromboolean boolean_pop exec_noop boolean_swap) (exec_dup (integer_mod boolean_not exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod integer_eq integer_dup_items)) exec_do*count () integer_pop) boolean_stackdepth 92 integer_dec boolean_yankdup exec_eq exec_dup_times (integer_shove boolean_flush exec_when (exec_swap () (exec_while (exec_dup_items boolean_swap in1 integer_eq boolean_invert_second_then_and exec_dup_items)))))) ())
Lexicase best errors: [0 1 1 1 1 1 1 0 0 1]
Lexicase best number of elite cases: 10
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 57
Percent parens: 0.263
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_noop} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_eq} {:close 2, :instruction integer_dup_items} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction 92} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup_items})
Zero cases best program: (exec_dup_times () boolean_stackdepth in1 print_integer boolean_pop exec_rot (integer_fromboolean boolean_pop exec_noop boolean_swap) (exec_dup (integer_mod boolean_not exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod integer_eq integer_dup_items)) exec_do*count () integer_pop) boolean_stackdepth 92 integer_dec boolean_yankdup exec_eq exec_dup_times (integer_shove boolean_flush exec_when (exec_swap () (exec_while (exec_dup_items boolean_swap in1 integer_eq boolean_invert_second_then_and exec_dup_items)))))) ())
Zero cases best errors: [0 1 1 1 1 1 1 0 0 1]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 57
Percent parens: 0.263
--- Lexicase Population Statistics ---
Count of elite individuals by case: (177 1000 1000 1000 1000 1000 1000 785 176 1000)
Population mean number of elite cases: 8.14
Count of perfect (error zero) individuals by case: (177 0 0 0 0 0 0 785 176 0)
Population mean number of perfect (error zero) cases: 1.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dup_items})
Best program: (integer_gt exec_dup_items boolean_flush exec_dup (exec_rot (boolean_dup_times boolean_stackdepth in1 print_integer) (boolean_pop exec_rot (exec_dup (integer_dup_items boolean_not exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_xor) exec_flush integer_dup_items)))) () ()) ()))
Errors: [0 1 1 1 1 1 1 0 0 1]
Total: 7
Mean: 0.7
Genome size: 22
Size: 34
Percent parens: 0.353
--- Population Statistics ---
Average total errors in population: 8.862
Median total errors in population: 9
Error averages by case: (0.823 1.0 1.0 1.0 1.0 1.0 1.0 0.215 0.824 1.0)
Error minima by case: (0 1 1 1 1 1 1 0 0 1)
Average genome size in population (length): 43.76
Average program size in population (points): 63.032
Average percent parens in population: 0.305
Minimum age in population: 40.07515445351601
Maximum age in population: 45.1451892144978
Average age in population: 43.22250975829735
Median age in population: 43.3342765904963
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 32
Genome diversity (% unique genomes):	 0.764
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.756
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 25420419
--- Timings ---
Current time: 1559314414655 milliseconds
Total Time:          85.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.2 seconds, 55.1%
Fitness Testing:     21.4 seconds, 25.0%
Report:              16.9 seconds, 19.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Smallest problem report - generation 30
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: 34                 
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: 74                 
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: 28                 
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: 27                 
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: 35                 
Correct output: -54                 | Program output: 59                 
Correct output: -95                 | Program output: 56                 
Correct output: -97                 | Program output: 35                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: 95                 
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: 83                 
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 60                 
Correct output: -34                 | Program output: 79                 
Correct output: -17                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_max} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_exec_164})
Lexicase best program: (exec_rot (boolean_dup_times boolean_stackdepth exec_dup_items exec_dup_items boolean_flush boolean_swap exec_rot (boolean_dup_times boolean_stackdepth in1) (exec_rot (boolean_dup_times exec_swap (exec_rot () (integer_fromboolean exec_empty integer_dec boolean_dup_times boolean_stackdepth in1 print_integer boolean_pop boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_xor exec_flush integer_empty exec_while () exec_dup (boolean_invert_first_then_and exec_k (exec_do*count (boolean_pop exec_rot (exec_when (exec_swap () (exec_while (exec_dup_items exec_yank integer_div boolean_xor integer_max)) integer_dup_times) integer_lte tag_exec_164 ()) () ())) ()))))) ()) ()) () ()) ()) () ())
Lexicase best errors: [0 1 1 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 82
Percent parens: 0.378
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction exec_while} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_k} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_xor} {:close 2, :instruction integer_max} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction tag_exec_164})
Zero cases best program: (exec_rot (boolean_dup_times boolean_stackdepth exec_dup_items exec_dup_items boolean_flush boolean_swap exec_rot (boolean_dup_times boolean_stackdepth in1) (exec_rot (boolean_dup_times exec_swap (exec_rot () (integer_fromboolean exec_empty integer_dec boolean_dup_times boolean_stackdepth in1 print_integer boolean_pop boolean_invert_first_then_and boolean_not exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_xor exec_flush integer_empty exec_while () exec_dup (boolean_invert_first_then_and exec_k (exec_do*count (boolean_pop exec_rot (exec_when (exec_swap () (exec_while (exec_dup_items exec_yank integer_div boolean_xor integer_max)) integer_dup_times) integer_lte tag_exec_164 ()) () ())) ()))))) ()) ()) () ()) ()) () ())
Zero cases best errors: [0 1 1 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 82
Percent parens: 0.378
--- Lexicase Population Statistics ---
Count of elite individuals by case: (910 1000 1 914 1000 914 914 1 1000 2)
Population mean number of elite cases: 6.66
Count of perfect (error zero) individuals by case: (910 0 1 914 0 914 914 1 0 2)
Population mean number of perfect (error zero) cases: 3.66
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction in1} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction tag_integer_75} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_swap} {:close 0, :instruction in1} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (integer_gt exec_dup_items boolean_flush exec_dup (exec_dup_times ()) exec_dup_items boolean_flush exec_dup (exec_rot (boolean_dup_times integer_shove in1 print_integer) (boolean_pop exec_rot (tag_integer_75 exec_empty integer_dec boolean_swap) (exec_dup (integer_stackdepth boolean_not boolean_dup_items in3 exec_flush integer_eq exec_s_when_autoconstructing () (exec_do*count () integer_pop) (integer_eq exec_dup_times (integer_shove boolean_flush exec_when (exec_swap () (exec_while (exec_dup_items boolean_swap in1 exec_dup_items boolean_invert_second_then_and))))))) ()) ()))
Errors: [0 1 1 0 1 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 41
Size: 61
Percent parens: 0.328
--- Population Statistics ---
Average total errors in population: 6.344
Median total errors in population: 6
Error averages by case: (0.09 1.0 0.999 0.086 1.0 0.086 0.086 0.999 1.0 0.998)
Error minima by case: (0 1 0 0 1 0 0 0 1 0)
Average genome size in population (length): 38.98
Average program size in population (points): 55.783
Average percent parens in population: 0.299
Minimum age in population: 41.91579645872116
Maximum age in population: 46.67111497744918
Average age in population: 44.8708524029199
Median age in population: 44.99453085754067
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 22
Genome diversity (% unique genomes):	 0.608
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.593
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 25962574
--- Timings ---
Current time: 1559314417100 milliseconds
Total Time:          88.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.9 seconds, 55.5%
Fitness Testing:     21.9 seconds, 24.9%
Report:              17.1 seconds, 19.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Smallest problem report - generation 31
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: 34                 
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: 74                 
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: 28                 
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: 27                 
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: 35                 
Correct output: -54                 | Program output: 59                 
Correct output: -95                 | Program output: 56                 
Correct output: -97                 | Program output: 35                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: 95                 
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: 83                 
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 60                 
Correct output: -34                 | Program output: 79                 
Correct output: -17                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_flush})
Lexicase best program: (exec_dup_times () exec_dup_items exec_yankdup exec_rot (boolean_dup_times boolean_stackdepth in1 print_integer boolean_pop exec_y (integer_fromboolean exec_empty integer_dec boolean_invert_second_then_and) exec_dup (boolean_invert_first_then_and) boolean_not exec_do*count (boolean_or integer_flush)) () ())
Lexicase best errors: [0 1 1 1 1 0 0 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 28
Percent parens: 0.286
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_flush})
Zero cases best program: (exec_dup_times () exec_dup_items exec_yankdup exec_rot (boolean_dup_times boolean_stackdepth in1 print_integer boolean_pop exec_y (integer_fromboolean exec_empty integer_dec boolean_invert_second_then_and) exec_dup (boolean_invert_first_then_and) boolean_not exec_do*count (boolean_or integer_flush)) () ())
Zero cases best errors: [0 1 1 1 1 0 0 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 28
Percent parens: 0.286
--- Lexicase Population Statistics ---
Count of elite individuals by case: (473 1000 1000 1000 213 471 473 1000 1000 213)
Population mean number of elite cases: 6.84
Count of perfect (error zero) individuals by case: (473 0 0 0 213 471 473 0 0 213)
Population mean number of perfect (error zero) cases: 1.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_mod} {:close 0, :instruction in2} {:close 1, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_dup} {:close 1, :instruction exec_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction 48} {:close 0, :instruction integer_dup_items} {:close 2, :instruction exec_flush} {:close 0, :instruction integer_empty} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_add} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_s} {:close 0, :instruction integer_div})
Best program: (exec_dup_times () exec_dup_items boolean_invert_first_then_and exec_dup () exec_rot (boolean_dup_times exec_rot (boolean_dup_times boolean_stackdepth in1 print_integer boolean_pop exec_rot (integer_fromboolean exec_empty exec_flush integer_dec boolean_swap) (exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (boolean_rot boolean_or integer_mod in2 exec_while () exec_empty boolean_dup) exec_flush) boolean_stackdepth boolean_swap boolean_stackdepth) (48 integer_dup_items exec_flush)) (integer_empty boolean_flush) (integer_add exec_k_when_autoconstructing (exec_s_when_autoconstructing (integer_lte integer_dup_times exec_s (integer_div) () ()) () ()) ())) () ())
Errors: [0 1 1 1 1 0 0 1 1 1]
Total: 7
Mean: 0.7
Genome size: 45
Size: 68
Percent parens: 0.338
--- Population Statistics ---
Average total errors in population: 8.157
Median total errors in population: 8
Error averages by case: (0.527 1.0 1.0 1.0 0.787 0.529 0.527 1.0 1.0 0.787)
Error minima by case: (0 1 1 1 0 0 0 1 1 0)
Average genome size in population (length): 31.391
Average program size in population (points): 43.75
Average percent parens in population: 0.272
Minimum age in population: 43.3169339299202
Maximum age in population: 48.08492555934936
Average age in population: 46.3290628532758
Median age in population: 46.51151328161359
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 188
Genome diversity (% unique genomes):	 0.56
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 196
Syntactic diversity (% unique Push programs):	 0.544
Total error diversity:				 0.003
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 26342757
--- Timings ---
Current time: 1559314419350 milliseconds
Total Time:          90.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.6 seconds, 56.0%
Fitness Testing:     22.2 seconds, 24.6%
Report:              17.4 seconds, 19.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Smallest problem report - generation 32
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: 34                 
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: 74                 
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: 28                 
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: 27                 
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: 35                 
Correct output: -54                 | Program output: 59                 
Correct output: -95                 | Program output: 56                 
Correct output: -97                 | Program output: 35                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: 95                 
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: 83                 
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 60                 
Correct output: -34                 | Program output: 79                 
Correct output: -17                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_flush} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*times})
Lexicase best program: (exec_dup_times () integer_gte boolean_flush boolean_shove exec_dup_items boolean_flush exec_yankdup exec_rot (boolean_dup_times boolean_stackdepth in1 print_integer boolean_pop) (exec_y (integer_fromboolean exec_empty integer_dec boolean_invert_second_then_and) exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (boolean_or exec_do*times ()))) ())
Lexicase best errors: [0 1 0 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 33
Percent parens: 0.273
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_flush} {:close 2, :instruction boolean_shove} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_y} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*times})
Zero cases best program: (exec_dup_times () integer_gte boolean_flush boolean_shove exec_dup_items boolean_flush exec_yankdup exec_rot (boolean_dup_times boolean_stackdepth in1 print_integer boolean_pop) (exec_y (integer_fromboolean exec_empty integer_dec boolean_invert_second_then_and) exec_dup (boolean_invert_first_then_and boolean_not exec_do*count (boolean_or exec_do*times ()))) ())
Zero cases best errors: [0 1 0 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 33
Percent parens: 0.273
--- Lexicase Population Statistics ---
Count of elite individuals by case: (584 1000 584 1 583 1 352 1 937 584)
Population mean number of elite cases: 4.63
Count of perfect (error zero) individuals by case: (584 0 584 1 583 1 352 1 937 584)
Population mean number of perfect (error zero) cases: 3.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*count})
Best program: (exec_dup_times () exec_dup_items boolean_flush boolean_swap exec_rot (boolean_dup_times print_integer in1 print_integer boolean_pop integer_mod integer_fromboolean integer_inc boolean_xor boolean_swap) (exec_dup (boolean_shove boolean_not exec_do*count ())) ())
Errors: [0 1 0 1 0 1 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 19
Size: 26
Percent parens: 0.269
--- Population Statistics ---
Average total errors in population: 6.373
Median total errors in population: 5
Error averages by case: (0.416 1.0 0.416 0.999 0.417 0.999 0.648 0.999 0.063 0.416)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.508
Average program size in population (points): 49.96
Average percent parens in population: 0.287
Minimum age in population: 44.49533471465111
Maximum age in population: 49.59908776637167
Average age in population: 47.63248045328353
Median age in population: 47.72692357422784
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 152
Genome diversity (% unique genomes):	 0.666
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 156
Syntactic diversity (% unique Push programs):	 0.657
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 26779802
--- Timings ---
Current time: 1559314421510 milliseconds
Total Time:          92.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.2 seconds, 56.4%
Fitness Testing:     22.6 seconds, 24.4%
Report:              17.6 seconds, 19.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Smallest problem report - generation 33
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 50                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 30                 
Correct output: 9                   | Program output: 67                 
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 97                 
Correct output: 20                  | Program output: 60                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 76                 
Correct output: 14                  | Program output: 42                 
Correct output: 46                  | Program output: 50                 
Correct output: -96                 | Program output: 50                 
Correct output: -61                 | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: 55                 
Correct output: -95                 | Program output: 21                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: 40                 
Correct output: -60                 | Program output: 18                 
Correct output: -55                 | Program output: 20                 
Correct output: -42                 | Program output: 14                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 85                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 20                 
Correct output: -56                 | Program output: 16                 
Correct output: -75                 | Program output: 30                 
Correct output: -87                 | Program output: 27                 
Correct output: -81                 | Program output: 55                 
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: 61                 
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: 51                 
Correct output: -19                 | Program output: 65                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 67                 
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: 56                 
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 74                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: 15                 
Correct output: -5                  | Program output: 17                 
Correct output: -45                 | Program output: 6                  
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: 94                 
Correct output: -65                 | Program output: 57                 
Correct output: -36                 | Program output: 23                 
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 47                 
Correct output: -49                 | Program output: 90                 
Correct output: -54                 | Program output: 71                 
Correct output: -71                 | Program output: 76                 
Correct output: -15                 | Program output: 3                  
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: 13                 
Correct output: -63                 | Program output: 62                 
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction boolean_empty} {:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_813} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_while} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_stackdepth})
Lexicase best program: (boolean_empty exec_dup_times () exec_dup_items boolean_flush exec_dup (tagged_813 exec_s (boolean_stackdepth in3 print_integer exec_yank exec_rot (integer_fromboolean exec_flush integer_eq exec_s_when_autoconstructing () (exec_do*count () integer_pop) (integer_eq boolean_or integer_shove boolean_flush exec_when (exec_swap () (exec_while (in3 exec_do*while (integer_yank exec_shove (integer_dec boolean_swap exec_dup (exec_rot (integer_fromboolean exec_empty integer_dec boolean_swap exec_dup (boolean_invert_first_then_and integer_eq exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod integer_max exec_while (exec_swap () (integer_eq boolean_or integer_gt) boolean_stackdepth) integer_gte boolean_shove integer_dup_times) integer_pop integer_yank exec_do*range () exec_stackdepth)))) () ())))))))) () ()) () ()))
Lexicase best errors: [1 0 1 0 1 0 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 93
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction boolean_empty} {:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_813} {:close 0, :instruction exec_s} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_while} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_stackdepth})
Zero cases best program: (boolean_empty exec_dup_times () exec_dup_items boolean_flush exec_dup (tagged_813 exec_s (boolean_stackdepth in3 print_integer exec_yank exec_rot (integer_fromboolean exec_flush integer_eq exec_s_when_autoconstructing () (exec_do*count () integer_pop) (integer_eq boolean_or integer_shove boolean_flush exec_when (exec_swap () (exec_while (in3 exec_do*while (integer_yank exec_shove (integer_dec boolean_swap exec_dup (exec_rot (integer_fromboolean exec_empty integer_dec boolean_swap exec_dup (boolean_invert_first_then_and integer_eq exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod integer_max exec_while (exec_swap () (integer_eq boolean_or integer_gt) boolean_stackdepth) integer_gte boolean_shove integer_dup_times) integer_pop integer_yank exec_do*range () exec_stackdepth)))) () ())))))))) () ()) () ()))
Zero cases best errors: [1 0 1 0 1 0 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 93
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 945 1000 355 471 352 352 122 471 123)
Population mean number of elite cases: 5.19
Count of perfect (error zero) individuals by case: (0 945 0 355 471 352 352 122 471 123)
Population mean number of perfect (error zero) cases: 3.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction boolean_empty} {:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_813} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_while} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_while})
Best program: (boolean_empty exec_dup_times () exec_dup_items boolean_flush exec_dup (tagged_813 boolean_dup_times boolean_stackdepth in3 print_integer exec_yank exec_rot (integer_fromboolean exec_flush integer_eq exec_s_when_autoconstructing () (exec_do*count () integer_pop) (integer_eq boolean_or integer_shove boolean_flush exec_when (exec_swap () (exec_while (in3 exec_do*while (integer_yank exec_shove (integer_dec boolean_swap exec_dup (exec_rot (integer_fromboolean exec_empty integer_dec boolean_swap exec_dup (boolean_invert_first_then_and integer_eq exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod integer_max exec_while (exec_swap () (integer_eq boolean_or integer_gt) boolean_stackdepth) integer_gte boolean_shove integer_dup_times) integer_lte integer_yank exec_do*range () exec_while ())))) () ())))))))) () ()))
Errors: [1 0 1 0 1 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 62
Size: 91
Percent parens: 0.319
--- Population Statistics ---
Average total errors in population: 6.809
Median total errors in population: 7
Error averages by case: (1.0 0.055 1.0 0.645 0.529 0.648 0.648 0.878 0.529 0.877)
Error minima by case: (1 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 44.29
Average program size in population (points): 64.115
Average percent parens in population: 0.304
Minimum age in population: 45.82951625436544
Maximum age in population: 51.126867613988
Average age in population: 49.63981579497736
Median age in population: 49.88377121975645
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 137
Genome diversity (% unique genomes):	 0.69
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 139
Syntactic diversity (% unique Push programs):	 0.684
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 27117218
--- Timings ---
Current time: 1559314423470 milliseconds
Total Time:          94.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.6 seconds, 56.7%
Fitness Testing:     22.9 seconds, 24.3%
Report:              17.9 seconds, 18.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Smallest problem report - generation 34
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 50                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 30                 
Correct output: 9                   | Program output: 67                 
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 97                 
Correct output: 20                  | Program output: 60                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 76                 
Correct output: 14                  | Program output: 42                 
Correct output: 46                  | Program output: 50                 
Correct output: -96                 | Program output: 50                 
Correct output: -61                 | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: 55                 
Correct output: -95                 | Program output: 21                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: 40                 
Correct output: -60                 | Program output: 18                 
Correct output: -55                 | Program output: 20                 
Correct output: -42                 | Program output: 14                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 85                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 20                 
Correct output: -56                 | Program output: 16                 
Correct output: -75                 | Program output: 30                 
Correct output: -87                 | Program output: 27                 
Correct output: -81                 | Program output: 55                 
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: 61                 
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: 51                 
Correct output: -19                 | Program output: 65                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 67                 
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: 56                 
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 74                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: 15                 
Correct output: -5                  | Program output: 17                 
Correct output: -45                 | Program output: 6                  
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: 94                 
Correct output: -65                 | Program output: 57                 
Correct output: -36                 | Program output: 23                 
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 47                 
Correct output: -49                 | Program output: 90                 
Correct output: -54                 | Program output: 71                 
Correct output: -71                 | Program output: 76                 
Correct output: -15                 | Program output: 3                  
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: 13                 
Correct output: -63                 | Program output: 62                 
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction boolean_empty} {:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_813} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_while} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_while})
Lexicase best program: (boolean_empty exec_dup_times () exec_dup_items boolean_flush exec_dup (tagged_813 boolean_dup_times boolean_stackdepth in3 print_integer exec_yank exec_rot (integer_fromboolean exec_flush integer_eq exec_s_when_autoconstructing () (exec_do*count () integer_pop) (integer_eq boolean_or integer_shove boolean_flush exec_when (exec_swap () (exec_while (in3 exec_do*while (integer_yank exec_shove (integer_dec boolean_swap exec_dup (exec_rot (integer_fromboolean exec_empty integer_dec boolean_yank exec_dup (boolean_invert_first_then_and integer_eq exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod integer_max exec_while (exec_swap () (integer_eq boolean_or integer_gt) boolean_stackdepth) integer_gte boolean_shove integer_dup_times) integer_pop integer_yank exec_do*range () exec_while ())))) () ())))))))) () ()))
Lexicase best errors: [0 1 0 1 1 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 91
Percent parens: 0.319
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction boolean_empty} {:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_813} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_while} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_while})
Zero cases best program: (boolean_empty exec_dup_times () exec_dup_items boolean_flush exec_dup (tagged_813 boolean_dup_times boolean_stackdepth in3 print_integer exec_yank exec_rot (integer_fromboolean exec_flush integer_eq exec_s_when_autoconstructing () (exec_do*count () integer_pop) (integer_eq boolean_or integer_shove boolean_flush exec_when (exec_swap () (exec_while (in3 exec_do*while (integer_yank exec_shove (integer_dec boolean_swap exec_dup (exec_rot (integer_fromboolean exec_empty integer_dec boolean_yank exec_dup (boolean_invert_first_then_and integer_eq exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod integer_max exec_while (exec_swap () (integer_eq boolean_or integer_gt) boolean_stackdepth) integer_gte boolean_shove integer_dup_times) integer_pop integer_yank exec_do*range () exec_while ())))) () ())))))))) () ()))
Zero cases best errors: [0 1 0 1 1 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 91
Percent parens: 0.319
--- Lexicase Population Statistics ---
Count of elite individuals by case: (399 1000 657 276 276 399 276 275 932 399)
Population mean number of elite cases: 4.89
Count of perfect (error zero) individuals by case: (399 0 657 276 276 399 276 275 932 399)
Population mean number of perfect (error zero) cases: 3.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction boolean_empty} {:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction tagged_813} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction print_integer} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_while} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_stackdepth})
Best program: (boolean_empty exec_dup_times () exec_dup_items boolean_flush exec_dup (tagged_813 boolean_dup_times boolean_stackdepth in3 print_integer exec_yank exec_rot (integer_fromboolean exec_flush integer_eq exec_s_when_autoconstructing () (exec_do*count () integer_pop) (integer_eq boolean_or integer_shove boolean_flush exec_when (exec_swap () (exec_while (in3 exec_do*while (integer_yank exec_shove (integer_dec boolean_swap exec_dup (exec_rot (integer_fromboolean exec_empty integer_dec boolean_swap exec_dup (boolean_invert_first_then_and integer_eq exec_do*count (in3 exec_do*while (integer_yank exec_shove (boolean_xor integer_dup_items integer_mod integer_max exec_while (exec_swap () (integer_eq boolean_or integer_gt) boolean_stackdepth)))))) () ())))))))) () ()))
Errors: [0 1 0 1 1 0 1 1 0 0]
Total: 5
Mean: 0.5
Genome size: 55
Size: 82
Percent parens: 0.329
--- Population Statistics ---
Average total errors in population: 6.111
Median total errors in population: 5
Error averages by case: (0.601 1.0 0.343 0.724 0.724 0.601 0.724 0.725 0.068 0.601)
Error minima by case: (0 1 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.108
Average program size in population (points): 63.613
Average percent parens in population: 0.301
Minimum age in population: 46.82951625436544
Maximum age in population: 52.88377121975645
Average age in population: 51.09904667548521
Median age in population: 51.17653458076529
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 67
Genome diversity (% unique genomes):	 0.734
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.725
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 27414702
--- Timings ---
Current time: 1559314425851 milliseconds
Total Time:          96.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.5 seconds, 57.2%
Fitness Testing:     23.2 seconds, 24.0%
Report:              18.1 seconds, 18.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Smallest problem report - generation 35
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -13                
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 64                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 73                 
Correct output: 23                  | Program output: 88                 
Correct output: 31                  | Program output: 87                 
Correct output: 20                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 59                 
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 29                 
Correct output: 10                  | Program output: 16                 
Correct output: 1                   | Program output: 30                 
Correct output: 34                  | Program output: 78                 
Correct output: 20                  | Program output: 41                 
Correct output: 9                   | Program output: 15                 
Correct output: 3                   | Program output: 72                 
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 18                 
Correct output: 46                  | Program output: 51                 
Correct output: -96                 | Program output: 82                 
Correct output: -61                 | Program output: -53                
Correct output: -78                 | Program output: 86                 
Correct output: -91                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: 98                 
Correct output: -60                 | Program output: 10                 
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: 97                 
Correct output: -76                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: 22                 
Correct output: -45                 | Program output: 97                 
Correct output: -56                 | Program output: 10                 
Correct output: -75                 | Program output: -1                 
Correct output: -87                 | Program output: -55                
Correct output: -81                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -3                 
Correct output: -54                 | Program output: -47                
Correct output: -95                 | Program output: 3                  
Correct output: -97                 | Program output: -21                
Correct output: -85                 | Program output: 73                 
Correct output: -81                 | Program output: 61                 
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: 24                 
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: 96                 
Correct output: -93                 | Program output: 59                 
Correct output: -62                 | Program output: -8                 
Correct output: -90                 | Program output: -1                 
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: 61                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: 87                 
Correct output: -23                 | Program output: -11                
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: 23                 
Correct output: -95                 | Program output: 33                 
Correct output: -82                 | Program output: 88                 
Correct output: -65                 | Program output: 4                  
Correct output: -36                 | Program output: 10                 
Correct output: -53                 | Program output: -4                 
Correct output: -34                 | Program output: 63                 
Correct output: -17                 | Program output: 54                 
Correct output: -82                 | Program output: -70                
Correct output: -49                 | Program output: -16                
Correct output: -54                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: 55                 
Correct output: -83                 | Program output: 38                 
Correct output: -63                 | Program output: 80                 
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 3, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction boolean_invert_first_then_and})
Lexicase best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup_items exec_rot (boolean_dup_times boolean_stackdepth in2 boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap) exec_dup (integer_stackdepth boolean_not boolean_dup_items in3 integer_dup_items integer_yankdup boolean_empty exec_shove (integer_inc integer_dup_items exec_flush) integer_eq print_integer)) () (exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and)) () ())
Lexicase best errors: [1 0 0 1 1 0 1 1 1 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 47
Percent parens: 0.255
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 3, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction boolean_invert_first_then_and})
Zero cases best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup_items exec_rot (boolean_dup_times boolean_stackdepth in2 boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap) exec_dup (integer_stackdepth boolean_not boolean_dup_items in3 integer_dup_items integer_yankdup boolean_empty exec_shove (integer_inc integer_dup_items exec_flush) integer_eq print_integer)) () (exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and)) () ())
Zero cases best errors: [1 0 0 1 1 0 1 1 1 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 47
Percent parens: 0.255
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 470 470 1000 459 469 458 1 1000 1000)
Population mean number of elite cases: 6.33
Count of perfect (error zero) individuals by case: (0 470 470 0 459 469 458 1 0 0)
Population mean number of perfect (error zero) cases: 2.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction tag_boolean_722} {:close 0, :instruction integer_eq} {:close 3, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup_items exec_rot (boolean_dup_times boolean_stackdepth in2 boolean_dup_times boolean_stackdepth integer_shove print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap) exec_dup (integer_stackdepth boolean_not boolean_dup_items boolean_shove integer_dup_items integer_yankdup boolean_empty exec_shove (boolean_xor integer_dup_items tag_boolean_722 integer_eq print_integer))) (exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and) ()) () ())
Errors: [1 0 0 1 1 0 1 1 1 1]
Total: 7
Mean: 0.7
Genome size: 35
Size: 47
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 7.673
Median total errors in population: 8
Error averages by case: (1.0 0.53 0.53 1.0 0.541 0.531 0.542 0.999 1.0 1.0)
Error minima by case: (1 0 0 1 0 0 0 0 1 1)
Average genome size in population (length): 45.159
Average program size in population (points): 64.628
Average percent parens in population: 0.294
Minimum age in population: 48.36754388548434
Maximum age in population: 54.76359831349691
Average age in population: 52.62448048271937
Median age in population: 52.73987664320157
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 86
Genome diversity (% unique genomes):	 0.742
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 89
Syntactic diversity (% unique Push programs):	 0.727
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 27664899
--- Timings ---
Current time: 1559314428597 milliseconds
Total Time:          99.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.6 seconds, 57.9%
Fitness Testing:     23.5 seconds, 23.6%
Report:              18.3 seconds, 18.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Smallest problem report - generation 36
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -13                
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 64                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 73                 
Correct output: 23                  | Program output: 88                 
Correct output: 31                  | Program output: 87                 
Correct output: 20                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 59                 
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 29                 
Correct output: 10                  | Program output: 16                 
Correct output: 1                   | Program output: 30                 
Correct output: 34                  | Program output: 78                 
Correct output: 20                  | Program output: 41                 
Correct output: 9                   | Program output: 15                 
Correct output: 3                   | Program output: 72                 
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 18                 
Correct output: 46                  | Program output: 51                 
Correct output: -96                 | Program output: 82                 
Correct output: -61                 | Program output: -53                
Correct output: -78                 | Program output: 86                 
Correct output: -91                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: 98                 
Correct output: -60                 | Program output: 10                 
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: 97                 
Correct output: -76                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: 22                 
Correct output: -45                 | Program output: 97                 
Correct output: -56                 | Program output: 10                 
Correct output: -75                 | Program output: -1                 
Correct output: -87                 | Program output: -55                
Correct output: -81                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -3                 
Correct output: -54                 | Program output: -47                
Correct output: -95                 | Program output: 3                  
Correct output: -97                 | Program output: -21                
Correct output: -85                 | Program output: 73                 
Correct output: -81                 | Program output: 61                 
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: 24                 
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: 96                 
Correct output: -93                 | Program output: 59                 
Correct output: -62                 | Program output: -8                 
Correct output: -90                 | Program output: -1                 
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: 61                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: 87                 
Correct output: -23                 | Program output: -11                
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: 23                 
Correct output: -95                 | Program output: 33                 
Correct output: -82                 | Program output: 88                 
Correct output: -65                 | Program output: 4                  
Correct output: -36                 | Program output: 10                 
Correct output: -53                 | Program output: -4                 
Correct output: -34                 | Program output: 63                 
Correct output: -17                 | Program output: 54                 
Correct output: -82                 | Program output: -70                
Correct output: -49                 | Program output: -16                
Correct output: -54                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: 55                 
Correct output: -83                 | Program output: 38                 
Correct output: -63                 | Program output: 80                 
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 3, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Lexicase best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup_items exec_rot (boolean_dup_times boolean_stackdepth in2 boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (integer_stackdepth boolean_not boolean_dup_items in3 integer_dup_items integer_yankdup boolean_empty exec_shove (integer_inc integer_dup_items exec_flush integer_eq print_integer))) exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and) () ()))) () ()) () ())
Lexicase best errors: [1 1 1 1 0 0 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 62
Percent parens: 0.274
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 3, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Zero cases best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup_items exec_rot (boolean_dup_times boolean_stackdepth in2 boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (integer_stackdepth boolean_not boolean_dup_items in3 integer_dup_items integer_yankdup boolean_empty exec_shove (integer_inc integer_dup_items exec_flush integer_eq print_integer))) exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and) () ()))) () ()) () ())
Zero cases best errors: [1 1 1 1 0 0 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 62
Percent parens: 0.274
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 326 1000 326 447 939 448 1000 165 161)
Population mean number of elite cases: 5.81
Count of perfect (error zero) individuals by case: (0 326 0 326 447 939 448 0 165 161)
Population mean number of perfect (error zero) cases: 2.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 3, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Best program: (exec_dup_times () exec_dup_items boolean_stackdepth in2 boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_y_when_autoconstructing (exec_empty boolean_swap exec_dup (integer_stackdepth boolean_not boolean_dup_items in3 integer_dup_items integer_yankdup boolean_empty boolean_invert_first_then_and integer_inc integer_dup_items exec_flush integer_eq print_integer))) (exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and) ())
Errors: [1 1 1 1 0 0 0 1 1 1]
Total: 7
Mean: 0.7
Genome size: 31
Size: 39
Percent parens: 0.205
--- Population Statistics ---
Average total errors in population: 7.188
Median total errors in population: 7
Error averages by case: (1.0 0.674 1.0 0.674 0.553 0.061 0.552 1.0 0.835 0.839)
Error minima by case: (1 0 1 0 0 0 0 1 0 0)
Average genome size in population (length): 42.064
Average program size in population (points): 59.299
Average percent parens in population: 0.283
Minimum age in population: 49.36754388548434
Maximum age in population: 56.16510891431244
Average age in population: 54.15437274437511
Median age in population: 54.28741829365026
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 99
Genome diversity (% unique genomes):	 0.726
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 102
Syntactic diversity (% unique Push programs):	 0.718
Total error diversity:				 0.003
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 27988783
--- Timings ---
Current time: 1559314430634 milliseconds
Total Time:         101.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.0 seconds, 58.1%
Fitness Testing:     23.8 seconds, 23.4%
Report:              18.7 seconds, 18.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Smallest problem report - generation 37
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -13                
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 64                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 73                 
Correct output: 23                  | Program output: 88                 
Correct output: 31                  | Program output: 87                 
Correct output: 20                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 59                 
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 29                 
Correct output: 10                  | Program output: 16                 
Correct output: 1                   | Program output: 30                 
Correct output: 34                  | Program output: 78                 
Correct output: 20                  | Program output: 41                 
Correct output: 9                   | Program output: 15                 
Correct output: 3                   | Program output: 72                 
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 18                 
Correct output: 46                  | Program output: 51                 
Correct output: -96                 | Program output: 82                 
Correct output: -61                 | Program output: -53                
Correct output: -78                 | Program output: 86                 
Correct output: -91                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: 98                 
Correct output: -60                 | Program output: 10                 
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: 97                 
Correct output: -76                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: 22                 
Correct output: -45                 | Program output: 97                 
Correct output: -56                 | Program output: 10                 
Correct output: -75                 | Program output: -1                 
Correct output: -87                 | Program output: -55                
Correct output: -81                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -3                 
Correct output: -54                 | Program output: -47                
Correct output: -95                 | Program output: 3                  
Correct output: -97                 | Program output: -21                
Correct output: -85                 | Program output: 73                 
Correct output: -81                 | Program output: 61                 
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: 24                 
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: 96                 
Correct output: -93                 | Program output: 59                 
Correct output: -62                 | Program output: -8                 
Correct output: -90                 | Program output: -1                 
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: 61                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: 87                 
Correct output: -23                 | Program output: -11                
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: 23                 
Correct output: -95                 | Program output: 33                 
Correct output: -82                 | Program output: 88                 
Correct output: -65                 | Program output: 4                  
Correct output: -36                 | Program output: 10                 
Correct output: -53                 | Program output: -4                 
Correct output: -34                 | Program output: 63                 
Correct output: -17                 | Program output: 54                 
Correct output: -82                 | Program output: -70                
Correct output: -49                 | Program output: -16                
Correct output: -54                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: 55                 
Correct output: -83                 | Program output: 38                 
Correct output: -63                 | Program output: 80                 
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 3, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Lexicase best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup (exec_dup_times ()) exec_dup_items boolean_flush exec_dup (exec_rot (boolean_dup_times) (exec_rot (boolean_dup_times boolean_stackdepth in2 boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (integer_stackdepth boolean_not boolean_dup_items in3 integer_dup_items integer_yankdup boolean_empty exec_shove (integer_inc integer_dup_items exec_flush integer_eq print_integer))) exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and) () ()) () ()) ()))
Lexicase best errors: [1 1 0 1 0 0 0 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 59
Percent parens: 0.305
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 3, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Zero cases best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup (exec_dup_times ()) exec_dup_items boolean_flush exec_dup (exec_rot (boolean_dup_times) (exec_rot (boolean_dup_times boolean_stackdepth in2 boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (integer_stackdepth boolean_not boolean_dup_items in3 integer_dup_items integer_yankdup boolean_empty exec_shove (integer_inc integer_dup_items exec_flush integer_eq print_integer))) exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and) () ()) () ()) ()))
Zero cases best errors: [1 1 0 1 0 0 0 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 59
Percent parens: 0.305
--- Lexicase Population Statistics ---
Count of elite individuals by case: (329 291 919 331 295 302 583 331 295 1)
Population mean number of elite cases: 3.68
Count of perfect (error zero) individuals by case: (329 291 919 331 295 302 583 331 295 1)
Population mean number of perfect (error zero) cases: 3.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank})
Best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup_items exec_rot (integer_sub boolean_stackdepth in2 boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_flush integer_eq exec_s_when_autoconstructing () (exec_do*count () integer_pop) (integer_eq boolean_or integer_shove boolean_flush exec_when (exec_swap () (exec_while (in3 exec_do*while (integer_yank exec_shove (integer_dec boolean_swap exec_dup (exec_rot (integer_fromboolean exec_empty integer_dec boolean_swap exec_dup (boolean_invert_first_then_and integer_eq exec_do*count (in3 exec_do*while (integer_yank)))) () ())))))))) () ()) () ())
Errors: [1 1 0 1 0 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 45
Size: 70
Percent parens: 0.357
--- Population Statistics ---
Average total errors in population: 6.323
Median total errors in population: 6
Error averages by case: (0.671 0.709 0.081 0.669 0.705 0.698 0.417 0.669 0.705 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.432
Average program size in population (points): 58.374
Average percent parens in population: 0.283
Minimum age in population: 50.97041869536042
Maximum age in population: 57.89847074508725
Average age in population: 55.71220187945879
Median age in population: 55.78768689052231
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 107
Genome diversity (% unique genomes):	 0.762
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 114
Syntactic diversity (% unique Push programs):	 0.754
Total error diversity:				 0.006
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 28303524
--- Timings ---
Current time: 1559314432827 milliseconds
Total Time:         103.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.7 seconds, 58.4%
Fitness Testing:     24.1 seconds, 23.2%
Report:              19.0 seconds, 18.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Smallest problem report - generation 38
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: 34                 
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: 74                 
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: 28                 
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: 27                 
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: 35                 
Correct output: -54                 | Program output: 59                 
Correct output: -95                 | Program output: 56                 
Correct output: -97                 | Program output: 35                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: 95                 
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: 83                 
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 60                 
Correct output: -34                 | Program output: 79                 
Correct output: -17                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 3, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Lexicase best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup_items exec_rot (boolean_dup_times boolean_stackdepth in1 boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (integer_stackdepth boolean_not boolean_dup_items in3 integer_dup_items integer_yankdup boolean_empty exec_shove (integer_inc integer_dup_items exec_flush integer_eq print_integer))) exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and) () ()))) () ()) () ())
Lexicase best errors: [1 1 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 62
Percent parens: 0.274
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 3, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Zero cases best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup_items exec_rot (boolean_dup_times boolean_stackdepth in1 boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (integer_stackdepth boolean_not boolean_dup_items in3 integer_dup_items integer_yankdup boolean_empty exec_shove (integer_inc integer_dup_items exec_flush integer_eq print_integer))) exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and) () ()))) () ()) () ())
Zero cases best errors: [1 1 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 62
Percent parens: 0.274
--- Lexicase Population Statistics ---
Count of elite individuals by case: (286 137 98 98 98 98 98 98 98 374)
Population mean number of elite cases: 1.48
Count of perfect (error zero) individuals by case: (286 137 98 98 98 98 98 98 98 374)
Population mean number of perfect (error zero) cases: 1.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 3, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup_items exec_rot (boolean_dup_times boolean_stackdepth in1 boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (integer_stackdepth boolean_not boolean_dup_items in3 integer_dup_items integer_yankdup boolean_empty exec_shove (integer_inc integer_dup_items exec_flush integer_eq print_integer))) exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and) () ()))) () ()) () ())
Errors: [1 1 0 0 0 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 45
Size: 62
Percent parens: 0.274
--- Population Statistics ---
Average total errors in population: 8.517
Median total errors in population: 9
Error averages by case: (0.714 0.863 0.902 0.902 0.902 0.902 0.902 0.902 0.902 0.626)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.64
Average program size in population (points): 58.602
Average percent parens in population: 0.284
Minimum age in population: 53.71295982017182
Maximum age in population: 59.09294451936876
Average age in population: 57.22941534894449
Median age in population: 57.2885677114391
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 55
Genome diversity (% unique genomes):	 0.787
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 56
Syntactic diversity (% unique Push programs):	 0.779
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 28680586
--- Timings ---
Current time: 1559314435326 milliseconds
Total Time:         106.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.6 seconds, 58.9%
Fitness Testing:     24.4 seconds, 23.0%
Report:              19.2 seconds, 18.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Smallest problem report - generation 39
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: 34                 
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: 74                 
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: 28                 
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: 27                 
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: 35                 
Correct output: -54                 | Program output: 59                 
Correct output: -95                 | Program output: 56                 
Correct output: -97                 | Program output: 35                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: 95                 
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: 83                 
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 60                 
Correct output: -34                 | Program output: 79                 
Correct output: -17                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 3, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Lexicase best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup_items exec_rot (boolean_dup_times boolean_stackdepth in1 boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (integer_stackdepth boolean_not boolean_dup_items in3 integer_dup_items integer_yankdup boolean_empty exec_shove (integer_inc integer_dup_items exec_flush integer_eq print_integer))) exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and) () ()))) () ()) () ())
Lexicase best errors: [0 1 0 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 62
Percent parens: 0.274
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 3, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Zero cases best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup_items exec_rot (boolean_dup_times boolean_stackdepth in1 boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (integer_stackdepth boolean_not boolean_dup_items in3 integer_dup_items integer_yankdup boolean_empty exec_shove (integer_inc integer_dup_items exec_flush integer_eq print_integer))) exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and) () ()))) () ()) () ())
Zero cases best errors: [0 1 0 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 62
Percent parens: 0.274
--- Lexicase Population Statistics ---
Count of elite individuals by case: (606 90 888 606 83 606 607 92 102 709)
Population mean number of elite cases: 4.39
Count of perfect (error zero) individuals by case: (606 90 888 606 83 606 607 92 102 709)
Population mean number of perfect (error zero) cases: 4.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items})
Best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup_items exec_rot (boolean_dup_times boolean_stackdepth in1 boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (integer_stackdepth boolean_not boolean_dup_items in3 integer_dup_items))) () ()))) () ()) () ())
Errors: [0 1 0 0 1 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 33
Size: 48
Percent parens: 0.313
--- Population Statistics ---
Average total errors in population: 5.611
Median total errors in population: 4
Error averages by case: (0.394 0.91 0.112 0.394 0.917 0.394 0.393 0.908 0.898 0.291)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.444
Average program size in population (points): 60.566
Average percent parens in population: 0.281
Minimum age in population: 55.40276447520591
Maximum age in population: 60.74936978916958
Average age in population: 59.03254734813345
Median age in population: 59.12649027778025
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 180
Genome diversity (% unique genomes):	 0.68
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 186
Syntactic diversity (% unique Push programs):	 0.673
Total error diversity:				 0.006
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 29106229
--- Timings ---
Current time: 1559314437981 milliseconds
Total Time:         108.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.4 seconds, 59.2%
Fitness Testing:     24.8 seconds, 22.8%
Report:              19.5 seconds, 17.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Smallest problem report - generation 40
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: 34                 
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: 74                 
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: 28                 
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: 27                 
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: 35                 
Correct output: -54                 | Program output: 59                 
Correct output: -95                 | Program output: 56                 
Correct output: -97                 | Program output: 35                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: 95                 
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: 83                 
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 60                 
Correct output: -34                 | Program output: 79                 
Correct output: -17                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 3, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Lexicase best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup_items exec_rot (boolean_dup_times boolean_stackdepth in1 boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (integer_stackdepth boolean_not boolean_dup_items in3 integer_dup_items integer_yankdup boolean_empty exec_shove (integer_inc integer_dup_items exec_flush integer_eq print_integer))) exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and) () ()))) () ()) () ())
Lexicase best errors: [0 1 0 0 0 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 62
Percent parens: 0.274
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 3, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Zero cases best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup_items exec_rot (boolean_dup_times boolean_stackdepth in1 boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (integer_stackdepth boolean_not boolean_dup_items in3 integer_dup_items integer_yankdup boolean_empty exec_shove (integer_inc integer_dup_items exec_flush integer_eq print_integer))) exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and) () ()))) () ()) () ())
Zero cases best errors: [0 1 0 0 0 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 62
Percent parens: 0.274
--- Lexicase Population Statistics ---
Count of elite individuals by case: (475 203 475 475 475 475 107 109 475 475)
Population mean number of elite cases: 3.74
Count of perfect (error zero) individuals by case: (475 203 475 475 475 475 107 109 475 475)
Population mean number of perfect (error zero) cases: 3.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 1, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 3, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup_items exec_rot (boolean_dup_times boolean_stackdepth in1 boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (integer_stackdepth boolean_not) boolean_dup_items in3 integer_dup_items integer_yankdup boolean_empty exec_shove (integer_inc integer_dup_items exec_flush integer_eq print_integer))) (exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and) ()))) () ()) () ())
Errors: [0 1 0 0 0 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 45
Size: 62
Percent parens: 0.274
--- Population Statistics ---
Average total errors in population: 6.256
Median total errors in population: 8
Error averages by case: (0.525 0.797 0.525 0.525 0.525 0.525 0.893 0.891 0.525 0.525)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.242
Average program size in population (points): 58.819
Average percent parens in population: 0.279
Minimum age in population: 56.40276447520591
Maximum age in population: 62.30581997418631
Average age in population: 60.38807037678461
Median age in population: 60.43280469067849
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 83
Genome diversity (% unique genomes):	 0.745
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.735
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 29532397
--- Timings ---
Current time: 1559314440361 milliseconds
Total Time:         111.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.1 seconds, 59.4%
Fitness Testing:     25.2 seconds, 22.6%
Report:              19.9 seconds, 17.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Smallest problem report - generation 41
Test total error for best: 649
Test mean error for best: 0.64900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 44                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 83                 
Correct output: 0                   | Program output: 83                 
Correct output: 42                  | Program output: 78                 
Correct output: 23                  | Program output: 60                 
Correct output: 31                  | Program output: 97                 
Correct output: 20                  | Program output: 47                 
Correct output: 9                   | Program output: 26                 
Correct output: 16                  | Program output: 78                 
Correct output: 15                  | Program output: 22                 
Correct output: 2                   | Program output: 73                 
Correct output: 23                  | Program output: 95                 
Correct output: 10                  | Program output: 16                 
Correct output: 1                   | Program output: 91                 
Correct output: 34                  | Program output: 97                 
Correct output: 20                  | Program output: 82                 
Correct output: 9                   | Program output: 100                
Correct output: 3                   | Program output: 78                 
Correct output: 28                  | Program output: 81                 
Correct output: 14                  | Program output: 62                 
Correct output: 46                  | Program output: 47                 
Correct output: -96                 | Program output: 36                 
Correct output: -61                 | Program output: -25                
Correct output: -78                 | Program output: -71                
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: 34                 
Correct output: -84                 | Program output: -65                
Correct output: -71                 | Program output: -50                
Correct output: -74                 | Program output: 12                 
Correct output: -60                 | Program output: 42                 
Correct output: -55                 | Program output: -55                
Correct output: -42                 | Program output: -41                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: -93                
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: -38                
Correct output: -45                 | Program output: 98                 
Correct output: -56                 | Program output: 81                 
Correct output: -75                 | Program output: -46                
Correct output: -87                 | Program output: -23                
Correct output: -81                 | Program output: 41                 
Correct output: -90                 | Program output: 79                 
Correct output: -64                 | Program output: -33                
Correct output: -75                 | Program output: -62                
Correct output: -97                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: -10                
Correct output: -97                 | Program output: 52                 
Correct output: -85                 | Program output: -40                
Correct output: -81                 | Program output: 77                 
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: 8219               
Correct output: -46                 | Program output: -42                
Correct output: -78                 | Program output: -42                
Correct output: -93                 | Program output: 25                 
Correct output: -62                 | Program output: -62                
Correct output: -90                 | Program output: -82                
Correct output: -70                 | Program output: 100                
Correct output: -28                 | Program output: 32                 
Correct output: -82                 | Program output: -25                
Correct output: -5                  | Program output: 19                 
Correct output: -45                 | Program output: 68                 
Correct output: -23                 | Program output: -20                
Correct output: -61                 | Program output: -30                
Correct output: -55                 | Program output: 7918               
Correct output: -95                 | Program output: 63                 
Correct output: -82                 | Program output: -6                 
Correct output: -65                 | Program output: 7                  
Correct output: -36                 | Program output: 29                 
Correct output: -53                 | Program output: 41                 
Correct output: -34                 | Program output: 72                 
Correct output: -17                 | Program output: 86                 
Correct output: -82                 | Program output: 75                 
Correct output: -49                 | Program output: -12                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -54                
Correct output: -15                 | Program output: 36                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -63                 | Program output: -63                
Correct output: -87                 | Program output: -33                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 3, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_while} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_while})
Lexicase best program: (exec_dup_times () exec_dup_items exec_empty exec_dup_items exec_rot (boolean_dup_times boolean_stackdepth in2 in4 boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap) exec_dup (integer_stackdepth boolean_not boolean_dup_items boolean_not integer_dup_times integer_yankdup boolean_empty) exec_shove (integer_inc integer_dup_items exec_flush integer_eq print_integer)) () (exec_do*count () integer_fromboolean exec_s (integer_dec boolean_swap boolean_dup_items boolean_invert_first_then_and integer_eq exec_do*count (in3 exec_do*while (integer_add exec_shove (boolean_xor integer_dup_items integer_mod integer_max exec_while (exec_swap () (integer_eq boolean_or integer_gt) boolean_stackdepth) exec_empty boolean_shove integer_dup_times) integer_pop integer_yank exec_do*range () exec_while ()))) () ())) () ())
Lexicase best errors: [0 1 1 1 1 1 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 84
Percent parens: 0.274
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 1, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 3, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_do*count} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_add} {:close 0, :instruction exec_shove} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_max} {:close 0, :instruction exec_while} {:close 1, :instruction exec_swap} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_gt} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_shove} {:close 1, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_yank} {:close 1, :instruction exec_do*range} {:close 1, :instruction exec_while})
Zero cases best program: (exec_dup_times () exec_dup_items exec_empty exec_dup_items exec_rot (boolean_dup_times boolean_stackdepth in2 in4 boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap) exec_dup (integer_stackdepth boolean_not boolean_dup_items boolean_not integer_dup_times integer_yankdup boolean_empty) exec_shove (integer_inc integer_dup_items exec_flush integer_eq print_integer)) () (exec_do*count () integer_fromboolean exec_s (integer_dec boolean_swap boolean_dup_items boolean_invert_first_then_and integer_eq exec_do*count (in3 exec_do*while (integer_add exec_shove (boolean_xor integer_dup_items integer_mod integer_max exec_while (exec_swap () (integer_eq boolean_or integer_gt) boolean_stackdepth) exec_empty boolean_shove integer_dup_times) integer_pop integer_yank exec_do*range () exec_while ()))) () ())) () ())
Zero cases best errors: [0 1 1 1 1 1 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 84
Percent parens: 0.274
--- Lexicase Population Statistics ---
Count of elite individuals by case: (172 1000 1000 641 634 99 1000 171 89 168)
Population mean number of elite cases: 4.97
Count of perfect (error zero) individuals by case: (172 0 0 641 634 99 0 171 89 168)
Population mean number of perfect (error zero) cases: 1.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 3, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Best program: (exec_dup_items boolean_flush exec_dup_items exec_rot (boolean_dup_times boolean_stackdepth in2 in4 boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap) exec_dup (integer_stackdepth boolean_not boolean_dup_items in3 integer_dup_times integer_yankdup boolean_empty exec_shove (integer_inc integer_dup_items exec_flush) integer_eq print_integer)) () (exec_do*count () integer_sub boolean_stackdepth boolean_invert_first_then_and)) () ())
Errors: [0 1 1 1 1 1 1 0 1 0]
Total: 7
Mean: 0.7
Genome size: 34
Size: 45
Percent parens: 0.244
--- Population Statistics ---
Average total errors in population: 8.026
Median total errors in population: 8
Error averages by case: (0.828 1.0 1.0 0.359 0.366 0.901 1.0 0.829 0.911 0.832)
Error minima by case: (0 1 1 0 0 0 1 0 0 0)
Average genome size in population (length): 42.116
Average program size in population (points): 58.53
Average percent parens in population: 0.278
Minimum age in population: 59.02846493665129
Maximum age in population: 63.62819955541909
Average age in population: 61.93284344947075
Median age in population: 62.05866078913004
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 59
Genome diversity (% unique genomes):	 0.746
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.737
Total error diversity:				 0.004
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 29993573
--- Timings ---
Current time: 1559314442954 milliseconds
Total Time:         113.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.8 seconds, 59.6%
Fitness Testing:     25.6 seconds, 22.5%
Report:              20.3 seconds, 17.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Smallest problem report - generation 42
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: 34                 
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: 74                 
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: 28                 
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: 27                 
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: 35                 
Correct output: -54                 | Program output: 59                 
Correct output: -95                 | Program output: 56                 
Correct output: -97                 | Program output: 35                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: 95                 
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: 83                 
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 60                 
Correct output: -34                 | Program output: 79                 
Correct output: -17                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction print_integer} {:close 2, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Lexicase best program: (integer_pop exec_dup_times () boolean_dup_items boolean_flush boolean_swap boolean_shove in2 boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (integer_stackdepth integer_dup_times boolean_dup_items in3 integer_dup_items integer_yankdup boolean_empty exec_shove (integer_inc integer_dup_items exec_flush integer_stackdepth print_integer))) exec_do*count ()) (integer_pop boolean_stackdepth boolean_invert_first_then_and) ())
Lexicase best errors: [0 1 1 0 1 1 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 43
Percent parens: 0.209
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction boolean_swap} {:close 0, :instruction boolean_shove} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_stackdepth} {:close 3, :instruction print_integer} {:close 2, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Zero cases best program: (integer_pop exec_dup_times () boolean_dup_items boolean_flush boolean_swap boolean_shove in2 boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (integer_stackdepth integer_dup_times boolean_dup_items in3 integer_dup_items integer_yankdup boolean_empty exec_shove (integer_inc integer_dup_items exec_flush integer_stackdepth print_integer))) exec_do*count ()) (integer_pop boolean_stackdepth boolean_invert_first_then_and) ())
Zero cases best errors: [0 1 1 0 1 1 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 43
Percent parens: 0.209
--- Lexicase Population Statistics ---
Count of elite individuals by case: (278 382 1000 268 258 1000 258 268 258 926)
Population mean number of elite cases: 4.90
Count of perfect (error zero) individuals by case: (278 382 0 268 258 0 258 268 258 926)
Population mean number of perfect (error zero) cases: 2.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_invert_first_then_and})
Best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup_items exec_rot (boolean_dup_times boolean_stackdepth in1 boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (exec_dup_items boolean_invert_first_then_and))) () ()) () ())
Errors: [1 1 1 1 0 1 0 1 0 0]
Total: 6
Mean: 0.6
Genome size: 20
Size: 30
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 7.104
Median total errors in population: 6
Error averages by case: (0.722 0.618 1.0 0.732 0.742 1.0 0.742 0.732 0.742 0.074)
Error minima by case: (0 0 1 0 0 1 0 0 0 0)
Average genome size in population (length): 39.173
Average program size in population (points): 53.928
Average percent parens in population: 0.270
Minimum age in population: 60.49982183019529
Maximum age in population: 65.36367585394919
Average age in population: 63.34716214365929
Median age in population: 63.39480106237465
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 19
Genome diversity (% unique genomes):	 0.717
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.711
Total error diversity:				 0.005
Error (vector) diversity:			 0.009
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 30449847
--- Timings ---
Current time: 1559314445154 milliseconds
Total Time:         116.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.4 seconds, 59.7%
Fitness Testing:     26.0 seconds, 22.3%
Report:              20.7 seconds, 17.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Smallest problem report - generation 43
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -13                
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 64                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 73                 
Correct output: 23                  | Program output: 88                 
Correct output: 31                  | Program output: 87                 
Correct output: 20                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 59                 
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 29                 
Correct output: 10                  | Program output: 16                 
Correct output: 1                   | Program output: 30                 
Correct output: 34                  | Program output: 78                 
Correct output: 20                  | Program output: 41                 
Correct output: 9                   | Program output: 15                 
Correct output: 3                   | Program output: 72                 
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 18                 
Correct output: 46                  | Program output: 51                 
Correct output: -96                 | Program output: 82                 
Correct output: -61                 | Program output: -53                
Correct output: -78                 | Program output: 86                 
Correct output: -91                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: 98                 
Correct output: -60                 | Program output: 10                 
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: 97                 
Correct output: -76                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: 22                 
Correct output: -45                 | Program output: 97                 
Correct output: -56                 | Program output: 10                 
Correct output: -75                 | Program output: -1                 
Correct output: -87                 | Program output: -55                
Correct output: -81                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -3                 
Correct output: -54                 | Program output: -47                
Correct output: -95                 | Program output: 3                  
Correct output: -97                 | Program output: -21                
Correct output: -85                 | Program output: 73                 
Correct output: -81                 | Program output: 61                 
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: 24                 
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: 96                 
Correct output: -93                 | Program output: 59                 
Correct output: -62                 | Program output: -8                 
Correct output: -90                 | Program output: -1                 
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: 61                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: 87                 
Correct output: -23                 | Program output: -11                
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: 23                 
Correct output: -95                 | Program output: 33                 
Correct output: -82                 | Program output: 88                 
Correct output: -65                 | Program output: 4                  
Correct output: -36                 | Program output: 10                 
Correct output: -53                 | Program output: -4                 
Correct output: -34                 | Program output: 63                 
Correct output: -17                 | Program output: 54                 
Correct output: -82                 | Program output: -70                
Correct output: -49                 | Program output: -16                
Correct output: -54                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: 55                 
Correct output: -83                 | Program output: 38                 
Correct output: -63                 | Program output: 80                 
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup})
Lexicase best program: (exec_dup_times () integer_dec boolean_flush exec_dup_items exec_rot (boolean_dup_times) (boolean_stackdepth in2 boolean_dup_times boolean_stackdepth integer_pop print_integer in2 exec_rot (boolean_flush exec_when (exec_swap () (exec_while (in3 exec_do*while (integer_yank exec_shove (integer_dec boolean_swap exec_dup ())))))) () ()) ())
Lexicase best errors: [1 1 0 1 0 1 1 1 0 0]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 40
Percent parens: 0.375
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction in2} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup})
Zero cases best program: (exec_dup_times () integer_dec boolean_flush exec_dup_items exec_rot (boolean_dup_times) (boolean_stackdepth in2 boolean_dup_times boolean_stackdepth integer_pop print_integer in2 exec_rot (boolean_flush exec_when (exec_swap () (exec_while (in3 exec_do*while (integer_yank exec_shove (integer_dec boolean_swap exec_dup ())))))) () ()) ())
Zero cases best errors: [1 1 0 1 0 1 1 1 0 0]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 40
Percent parens: 0.375
--- Lexicase Population Statistics ---
Count of elite individuals by case: (129 385 502 1000 374 129 385 385 376 377)
Population mean number of elite cases: 4.04
Count of perfect (error zero) individuals by case: (129 385 502 0 374 129 385 385 376 377)
Population mean number of perfect (error zero) cases: 3.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_empty} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_dup_times} {:close 0, :instruction integer_eq} {:close 3, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and})
Best program: (integer_empty exec_dup_items boolean_flush exec_dup_items exec_rot (boolean_dup_times boolean_stackdepth in2 boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop) (exec_rot (exec_when (exec_empty boolean_swap exec_dup (integer_stackdepth boolean_not boolean_dup_items in3 integer_dup_items integer_yankdup boolean_empty exec_shove (integer_inc integer_dup_items exec_dup_times (integer_eq print_integer))) exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and)) () ()) ())
Errors: [1 1 0 1 0 1 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 35
Size: 47
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 6.958
Median total errors in population: 7
Error averages by case: (0.871 0.615 0.498 1.0 0.626 0.871 0.615 0.615 0.624 0.623)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 38.73
Average program size in population (points): 53.47
Average percent parens in population: 0.273
Minimum age in population: 61.50485391538314
Maximum age in population: 66.93217205223482
Average age in population: 64.87306316507534
Median age in population: 64.95375268950329
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.771
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.764
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 30874012
--- Timings ---
Current time: 1559314447715 milliseconds
Total Time:         118.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.2 seconds, 60.0%
Fitness Testing:     26.3 seconds, 22.2%
Report:              21.0 seconds, 17.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Smallest problem report - generation 44
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 44                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 83                 
Correct output: 0                   | Program output: 83                 
Correct output: 42                  | Program output: 78                 
Correct output: 23                  | Program output: 60                 
Correct output: 31                  | Program output: 97                 
Correct output: 20                  | Program output: 47                 
Correct output: 9                   | Program output: 26                 
Correct output: 16                  | Program output: 78                 
Correct output: 15                  | Program output: 22                 
Correct output: 2                   | Program output: 73                 
Correct output: 23                  | Program output: 95                 
Correct output: 10                  | Program output: 16                 
Correct output: 1                   | Program output: 91                 
Correct output: 34                  | Program output: 97                 
Correct output: 20                  | Program output: 82                 
Correct output: 9                   | Program output: 100                
Correct output: 3                   | Program output: 78                 
Correct output: 28                  | Program output: 81                 
Correct output: 14                  | Program output: 62                 
Correct output: 46                  | Program output: 47                 
Correct output: -96                 | Program output: 36                 
Correct output: -61                 | Program output: -25                
Correct output: -78                 | Program output: -71                
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: 34                 
Correct output: -84                 | Program output: -65                
Correct output: -71                 | Program output: -50                
Correct output: -74                 | Program output: 12                 
Correct output: -60                 | Program output: 42                 
Correct output: -55                 | Program output: -55                
Correct output: -42                 | Program output: -41                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: -93                
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: -38                
Correct output: -45                 | Program output: 98                 
Correct output: -56                 | Program output: 81                 
Correct output: -75                 | Program output: -46                
Correct output: -87                 | Program output: -23                
Correct output: -81                 | Program output: 41                 
Correct output: -90                 | Program output: 79                 
Correct output: -64                 | Program output: -33                
Correct output: -75                 | Program output: -62                
Correct output: -97                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: -10                
Correct output: -97                 | Program output: 52                 
Correct output: -85                 | Program output: -40                
Correct output: -81                 | Program output: 77                 
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: 82                 
Correct output: -46                 | Program output: -42                
Correct output: -78                 | Program output: -42                
Correct output: -93                 | Program output: 25                 
Correct output: -62                 | Program output: -62                
Correct output: -90                 | Program output: -82                
Correct output: -70                 | Program output: 100                
Correct output: -28                 | Program output: 32                 
Correct output: -82                 | Program output: -25                
Correct output: -5                  | Program output: 19                 
Correct output: -45                 | Program output: 68                 
Correct output: -23                 | Program output: -20                
Correct output: -61                 | Program output: -30                
Correct output: -55                 | Program output: 79                 
Correct output: -95                 | Program output: 63                 
Correct output: -82                 | Program output: -6                 
Correct output: -65                 | Program output: 7                  
Correct output: -36                 | Program output: 29                 
Correct output: -53                 | Program output: 41                 
Correct output: -34                 | Program output: 72                 
Correct output: -17                 | Program output: 86                 
Correct output: -82                 | Program output: 75                 
Correct output: -49                 | Program output: -12                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -54                
Correct output: -15                 | Program output: 36                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -63                 | Program output: -63                
Correct output: -87                 | Program output: -33                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_dup_times} {:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 3, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Lexicase best program: (exec_dup_times () exec_dup_times () exec_dup_items exec_dup_times () integer_rot boolean_dup_times exec_dup_items in2 in4 boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap) exec_dup (integer_div exec_rot (exec_when (exec_empty boolean_swap exec_dup (integer_stackdepth boolean_not boolean_dup_items in3 integer_dup_items integer_yankdup boolean_empty exec_shove (integer_inc integer_dup_items exec_flush integer_eq print_integer))) exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and) () ())) () ())
Lexicase best errors: [1 0 0 1 1 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 57
Percent parens: 0.281
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_dup_times} {:close 2, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_div} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 3, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Zero cases best program: (exec_dup_times () exec_dup_times () exec_dup_items exec_dup_times () integer_rot boolean_dup_times exec_dup_items in2 in4 boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap) exec_dup (integer_div exec_rot (exec_when (exec_empty boolean_swap exec_dup (integer_stackdepth boolean_not boolean_dup_items in3 integer_dup_items integer_yankdup boolean_empty exec_shove (integer_inc integer_dup_items exec_flush integer_eq print_integer))) exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and) () ())) () ())
Zero cases best errors: [1 0 0 1 1 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 57
Percent parens: 0.281
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 622 232 1000 272 893 233 388 272 630)
Population mean number of elite cases: 5.54
Count of perfect (error zero) individuals by case: (0 622 232 0 272 893 233 388 272 630)
Population mean number of perfect (error zero) cases: 3.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_while} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k} {:close 3, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and})
Best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup_items exec_rot (boolean_dup_times boolean_stackdepth in2 in4 boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap) exec_dup (integer_stackdepth boolean_not boolean_dup_items in3 integer_dup_times integer_yankdup exec_while (in3 boolean_dup_items in3 integer_dup_times integer_yankdup boolean_empty exec_while (integer_inc integer_dup_items exec_flush exec_k (print_integer) ()) exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and))) () ()) () ())
Errors: [1 0 0 1 1 0 0 1 1 0]
Total: 5
Mean: 0.5
Genome size: 41
Size: 56
Percent parens: 0.268
--- Population Statistics ---
Average total errors in population: 6.458
Median total errors in population: 6
Error averages by case: (1.0 0.378 0.768 1.0 0.728 0.107 0.767 0.612 0.728 0.37)
Error minima by case: (1 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 37.796
Average program size in population (points): 52.006
Average percent parens in population: 0.270
Minimum age in population: 63.43203001984512
Maximum age in population: 68.59986138218392
Average age in population: 66.39316100788255
Median age in population: 66.44478963587466
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.774
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.769
Total error diversity:				 0.006
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 31298727
--- Timings ---
Current time: 1559314450524 milliseconds
Total Time:         121.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.2 seconds, 60.3%
Fitness Testing:     26.7 seconds, 22.0%
Report:              21.3 seconds, 17.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Smallest problem report - generation 45
Test total error for best: 639
Test mean error for best: 0.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -13                
Correct output: -99                 | Program output: -33                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 44                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 83                 
Correct output: 0                   | Program output: 83                 
Correct output: 42                  | Program output: 78                 
Correct output: 23                  | Program output: 60                 
Correct output: 31                  | Program output: 97                 
Correct output: 20                  | Program output: 47                 
Correct output: 9                   | Program output: 26                 
Correct output: 16                  | Program output: 78                 
Correct output: 15                  | Program output: 22                 
Correct output: 2                   | Program output: 73                 
Correct output: 23                  | Program output: 95                 
Correct output: 10                  | Program output: 16                 
Correct output: 1                   | Program output: 91                 
Correct output: 34                  | Program output: 97                 
Correct output: 20                  | Program output: 82                 
Correct output: 9                   | Program output: 100                
Correct output: 3                   | Program output: 78                 
Correct output: 28                  | Program output: 81                 
Correct output: 14                  | Program output: 62                 
Correct output: 46                  | Program output: 47                 
Correct output: -96                 | Program output: 36                 
Correct output: -61                 | Program output: -25                
Correct output: -78                 | Program output: -71                
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: 34                 
Correct output: -84                 | Program output: -65                
Correct output: -71                 | Program output: -50                
Correct output: -74                 | Program output: 12                 
Correct output: -60                 | Program output: 42                 
Correct output: -55                 | Program output: -55                
Correct output: -42                 | Program output: -41                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: -93                
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: -38                
Correct output: -45                 | Program output: 98                 
Correct output: -56                 | Program output: 81                 
Correct output: -75                 | Program output: -46                
Correct output: -87                 | Program output: -23                
Correct output: -81                 | Program output: 41                 
Correct output: -90                 | Program output: 79                 
Correct output: -64                 | Program output: -33                
Correct output: -75                 | Program output: -62                
Correct output: -97                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: -10                
Correct output: -97                 | Program output: 52                 
Correct output: -85                 | Program output: -40                
Correct output: -81                 | Program output: 77                 
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: 82                 
Correct output: -46                 | Program output: -42                
Correct output: -78                 | Program output: -42                
Correct output: -93                 | Program output: 25                 
Correct output: -62                 | Program output: -62                
Correct output: -90                 | Program output: -82                
Correct output: -70                 | Program output: 100                
Correct output: -28                 | Program output: 32                 
Correct output: -82                 | Program output: -25                
Correct output: -5                  | Program output: 19                 
Correct output: -45                 | Program output: 68                 
Correct output: -23                 | Program output: -20                
Correct output: -61                 | Program output: -30                
Correct output: -55                 | Program output: 79                 
Correct output: -95                 | Program output: 63                 
Correct output: -82                 | Program output: -6                 
Correct output: -65                 | Program output: 7                  
Correct output: -36                 | Program output: 29                 
Correct output: -53                 | Program output: 41                 
Correct output: -34                 | Program output: 72                 
Correct output: -17                 | Program output: 86                 
Correct output: -82                 | Program output: 75                 
Correct output: -49                 | Program output: -12                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -54                
Correct output: -15                 | Program output: 36                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -63                 | Program output: -63                
Correct output: -87                 | Program output: -33                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 3, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Lexicase best program: (boolean_dup_times boolean_flush exec_dup_items exec_rot (boolean_dup_times boolean_stackdepth in2 in4 boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap) exec_dup (integer_stackdepth boolean_not boolean_dup_items in3 integer_dup_times integer_yankdup boolean_empty exec_shove (integer_inc integer_dup_items exec_flush) integer_eq print_integer)) () (exec_do*count () integer_sub boolean_stackdepth boolean_invert_first_then_and)) () ())
Lexicase best errors: [1 0 1 0 1 1 1 0 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 45
Percent parens: 0.244
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 3, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Zero cases best program: (boolean_dup_times boolean_flush exec_dup_items exec_rot (boolean_dup_times boolean_stackdepth in2 in4 boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap) exec_dup (integer_stackdepth boolean_not boolean_dup_items in3 integer_dup_times integer_yankdup boolean_empty exec_shove (integer_inc integer_dup_items exec_flush) integer_eq print_integer)) () (exec_do*count () integer_sub boolean_stackdepth boolean_invert_first_then_and)) () ())
Zero cases best errors: [1 0 1 0 1 1 1 0 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 45
Percent parens: 0.244
--- Lexicase Population Statistics ---
Count of elite individuals by case: (271 447 272 444 196 195 1000 454 450 272)
Population mean number of elite cases: 4.00
Count of perfect (error zero) individuals by case: (271 447 272 444 196 195 0 454 450 272)
Population mean number of perfect (error zero) cases: 3.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in2} {:close 0, :instruction in4} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 1, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_sub} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 3, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Best program: (exec_dup_times () exec_dup_items boolean_flush boolean_eq exec_rot (boolean_dup_times boolean_stackdepth in2 in4 boolean_stackdepth integer_pop print_integer exec_do*while (exec_rot (exec_when (exec_empty integer_dup) exec_dup (integer_stackdepth boolean_not boolean_dup_items in3 integer_dup_times integer_yankdup boolean_empty exec_shove (integer_inc integer_dup_items exec_flush) integer_inc integer_sub exec_flush integer_eq print_integer)) () (exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and))) () ())
Errors: [1 0 1 0 1 1 1 0 0 1]
Total: 6
Mean: 0.6
Genome size: 38
Size: 51
Percent parens: 0.255
--- Population Statistics ---
Average total errors in population: 6.999
Median total errors in population: 7
Error averages by case: (0.729 0.553 0.728 0.556 0.804 0.805 1.0 0.546 0.55 0.728)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 38.007
Average program size in population (points): 52.605
Average percent parens in population: 0.275
Minimum age in population: 64.50734571778412
Maximum age in population: 70.13158961043752
Average age in population: 67.87167591222098
Median age in population: 67.91413035996507
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.773
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.766
Total error diversity:				 0.005
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 31746582
--- Timings ---
Current time: 1559314453178 milliseconds
Total Time:         124.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.0 seconds, 60.5%
Fitness Testing:     27.1 seconds, 21.9%
Report:              21.8 seconds, 17.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Smallest problem report - generation 46
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 50                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 30                 
Correct output: 9                   | Program output: 67                 
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 97                 
Correct output: 20                  | Program output: 60                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 76                 
Correct output: 14                  | Program output: 42                 
Correct output: 46                  | Program output: 50                 
Correct output: -96                 | Program output: 50                 
Correct output: -61                 | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: 55                 
Correct output: -95                 | Program output: 21                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: 40                 
Correct output: -60                 | Program output: 18                 
Correct output: -55                 | Program output: 20                 
Correct output: -42                 | Program output: 14                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 85                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 20                 
Correct output: -56                 | Program output: 16                 
Correct output: -75                 | Program output: 30                 
Correct output: -87                 | Program output: 27                 
Correct output: -81                 | Program output: 55                 
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: 61                 
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: 51                 
Correct output: -19                 | Program output: 65                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 67                 
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: 56                 
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 74                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: 15                 
Correct output: -5                  | Program output: 17                 
Correct output: -45                 | Program output: 6                  
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: 94                 
Correct output: -65                 | Program output: 57                 
Correct output: -36                 | Program output: 23                 
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 47                 
Correct output: -49                 | Program output: 90                 
Correct output: -54                 | Program output: 71                 
Correct output: -71                 | Program output: 76                 
Correct output: -15                 | Program output: 3                  
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: 13                 
Correct output: -63                 | Program output: 62                 
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Lexicase best program: (exec_dup_times () in3 boolean_flush boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (boolean_dup_times boolean_stackdepth exec_flush integer_eq exec_s_when_autoconstructing () (exec_do*count () integer_pop integer_eq boolean_or integer_shove boolean_flush exec_when (exec_swap () (exec_while (in3 print_integer)) exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and)) ()))) () ())
Lexicase best errors: [1 0 1 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 48
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Zero cases best program: (exec_dup_times () in3 boolean_flush boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (boolean_dup_times boolean_stackdepth exec_flush integer_eq exec_s_when_autoconstructing () (exec_do*count () integer_pop integer_eq boolean_or integer_shove boolean_flush exec_when (exec_swap () (exec_while (in3 print_integer)) exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and)) ()))) () ())
Zero cases best errors: [1 0 1 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 48
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (261 1 222 1 221 1 897 212 1 1)
Population mean number of elite cases: 1.82
Count of perfect (error zero) individuals by case: (261 1 222 1 221 1 897 212 1 1)
Population mean number of perfect (error zero) cases: 1.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Best program: (exec_dup_times () in3 boolean_flush boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (boolean_dup_times boolean_stackdepth exec_flush integer_eq exec_s_when_autoconstructing () (exec_do*count () integer_pop integer_eq boolean_or integer_shove boolean_flush exec_when (exec_swap () (exec_while (in3 print_integer)) exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and)) ()))) () ())
Errors: [1 0 1 0 1 0 0 1 0 0]
Total: 4
Mean: 0.4
Genome size: 32
Size: 48
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 8.182
Median total errors in population: 9
Error averages by case: (0.739 0.999 0.778 0.999 0.779 0.999 0.103 0.788 0.999 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.83
Average program size in population (points): 52.293
Average percent parens in population: 0.274
Minimum age in population: 66.09178495227684
Maximum age in population: 71.44890833538165
Average age in population: 69.32513020917852
Median age in population: 69.4318357267309
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 7
Genome diversity (% unique genomes):	 0.811
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.803
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 32156311
--- Timings ---
Current time: 1559314455427 milliseconds
Total Time:         126.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.7 seconds, 60.7%
Fitness Testing:     27.5 seconds, 21.7%
Report:              22.2 seconds, 17.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Smallest problem report - generation 47
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: 34                 
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: 74                 
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: 28                 
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: 27                 
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: 35                 
Correct output: -54                 | Program output: 59                 
Correct output: -95                 | Program output: 56                 
Correct output: -97                 | Program output: 35                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: 95                 
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: 83                 
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 60                 
Correct output: -34                 | Program output: 79                 
Correct output: -17                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_first_then_and})
Lexicase best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup_items exec_rot (boolean_dup_times boolean_stackdepth in1 boolean_shove boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_empty exec_rot (exec_when (exec_empty boolean_swap exec_dup (integer_stackdepth boolean_not boolean_dup_items print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (integer_stackdepth boolean_not boolean_dup_items in3 integer_dup_items integer_yankdup boolean_empty exec_shove (boolean_invert_first_then_and)))) () ()))) () ()))) () ()) () ())
Lexicase best errors: [0 1 0 1 1 0 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 68
Percent parens: 0.309
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 1, :instruction boolean_invert_first_then_and})
Zero cases best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup_items exec_rot (boolean_dup_times boolean_stackdepth in1 boolean_shove boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_empty exec_rot (exec_when (exec_empty boolean_swap exec_dup (integer_stackdepth boolean_not boolean_dup_items print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (integer_stackdepth boolean_not boolean_dup_items in3 integer_dup_items integer_yankdup boolean_empty exec_shove (boolean_invert_first_then_and)))) () ()))) () ()))) () ()) () ())
Zero cases best errors: [0 1 0 1 1 0 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 68
Percent parens: 0.309
--- Lexicase Population Statistics ---
Count of elite individuals by case: (931 306 623 1000 305 86 537 86 927 86)
Population mean number of elite cases: 4.89
Count of perfect (error zero) individuals by case: (931 306 623 0 305 86 537 86 927 86)
Population mean number of perfect (error zero) cases: 3.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not})
Best program: (exec_dup_times () exec_dup_items boolean_flush exec_yank exec_rot (boolean_dup_times boolean_stackdepth in1 boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_yank exec_rot (exec_dup_times (exec_empty boolean_swap exec_dup (boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (integer_stackdepth boolean_not))) () ()))) () ()) () ())
Errors: [0 1 0 1 1 0 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 30
Size: 45
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 6.113
Median total errors in population: 6
Error averages by case: (0.069 0.694 0.377 1.0 0.695 0.914 0.463 0.914 0.073 0.914)
Error minima by case: (0 0 0 1 0 0 0 0 0 0)
Average genome size in population (length): 34.23
Average program size in population (points): 49.29
Average percent parens in population: 0.306
Minimum age in population: 68.02593760163018
Maximum age in population: 72.54202565824647
Average age in population: 71.00562979268007
Median age in population: 70.8999934987568
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 342
Genome diversity (% unique genomes):	 0.557
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 349
Syntactic diversity (% unique Push programs):	 0.546
Total error diversity:				 0.006
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 32400240
--- Timings ---
Current time: 1559314457815 milliseconds
Total Time:         128.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        78.7 seconds, 61.0%
Fitness Testing:     27.7 seconds, 21.5%
Report:              22.4 seconds, 17.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Smallest problem report - generation 48
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 50                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 30                 
Correct output: 9                   | Program output: 67                 
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 97                 
Correct output: 20                  | Program output: 60                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 76                 
Correct output: 14                  | Program output: 42                 
Correct output: 46                  | Program output: 50                 
Correct output: -96                 | Program output: 50                 
Correct output: -61                 | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: 55                 
Correct output: -95                 | Program output: 21                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: 40                 
Correct output: -60                 | Program output: 18                 
Correct output: -55                 | Program output: 20                 
Correct output: -42                 | Program output: 14                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 85                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 20                 
Correct output: -56                 | Program output: 16                 
Correct output: -75                 | Program output: 30                 
Correct output: -87                 | Program output: 27                 
Correct output: -81                 | Program output: 55                 
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: 61                 
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: 51                 
Correct output: -19                 | Program output: 65                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 67                 
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: 56                 
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 74                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: 15                 
Correct output: -5                  | Program output: 17                 
Correct output: -45                 | Program output: 6                  
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: 94                 
Correct output: -65                 | Program output: 57                 
Correct output: -36                 | Program output: 23                 
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 47                 
Correct output: -49                 | Program output: 90                 
Correct output: -54                 | Program output: 71                 
Correct output: -71                 | Program output: 76                 
Correct output: -15                 | Program output: 3                  
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: 13                 
Correct output: -63                 | Program output: 62                 
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Lexicase best program: (exec_dup_times () in3 boolean_flush boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (boolean_dup_times boolean_stackdepth exec_flush integer_eq exec_s_when_autoconstructing () (exec_do*count () integer_pop integer_eq boolean_or integer_shove boolean_flush exec_when (exec_swap () (exec_while (in3 print_integer)) exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and)) ()))) () ())
Lexicase best errors: [0 1 0 0 0 1 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 48
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Zero cases best program: (exec_dup_times () in3 boolean_flush boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (boolean_dup_times boolean_stackdepth exec_flush integer_eq exec_s_when_autoconstructing () (exec_do*count () integer_pop integer_eq boolean_or integer_shove boolean_flush exec_when (exec_swap () (exec_while (in3 print_integer)) exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and)) ()))) () ())
Zero cases best errors: [0 1 0 0 0 1 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 48
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (172 481 171 171 172 1 1 926 172 652)
Population mean number of elite cases: 2.92
Count of perfect (error zero) individuals by case: (172 481 171 171 172 1 1 926 172 652)
Population mean number of perfect (error zero) cases: 2.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Best program: (exec_dup_times () in3 boolean_flush boolean_stackdepth integer_pop print_integer boolean_pop in1 exec_when (exec_empty boolean_swap exec_dup (boolean_dup_times boolean_stackdepth exec_flush integer_eq exec_s_when_autoconstructing () (exec_do*count () integer_pop integer_eq boolean_or integer_shove boolean_flush exec_when (exec_swap () (exec_while (in3 print_integer)) exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and)) ())))
Errors: [0 1 0 0 0 1 1 0 0 0]
Total: 3
Mean: 0.3
Genome size: 32
Size: 45
Percent parens: 0.289
--- Population Statistics ---
Average total errors in population: 7.081
Median total errors in population: 7
Error averages by case: (0.828 0.519 0.829 0.829 0.828 0.999 0.999 0.074 0.828 0.348)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.052
Average program size in population (points): 52.036
Average percent parens in population: 0.288
Minimum age in population: 69.04028537767954
Maximum age in population: 74.21802367262616
Average age in population: 72.37305481565252
Median age in population: 72.47595878091161
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 67
Genome diversity (% unique genomes):	 0.659
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 67
Syntactic diversity (% unique Push programs):	 0.653
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 32726064
--- Timings ---
Current time: 1559314460378 milliseconds
Total Time:         131.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        80.7 seconds, 61.4%
Fitness Testing:     28.0 seconds, 21.3%
Report:              22.6 seconds, 17.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Smallest problem report - generation 49
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: 34                 
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: 74                 
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: 28                 
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: 27                 
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: 35                 
Correct output: -54                 | Program output: 59                 
Correct output: -95                 | Program output: 56                 
Correct output: -97                 | Program output: 35                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: 95                 
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: 83                 
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 60                 
Correct output: -34                 | Program output: 79                 
Correct output: -17                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 3, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Lexicase best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup_items exec_rot (boolean_dup_times boolean_stackdepth in1 boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty integer_lt exec_dup (integer_swap boolean_stackdepth integer_pop integer_div boolean_pop exec_if (exec_when (exec_empty boolean_swap exec_dup (integer_stackdepth boolean_not boolean_dup_items in3 integer_dup_items integer_yankdup boolean_empty exec_shove (exec_s (integer_dup_items exec_flush integer_eq print_integer) () () exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and)))) ()))) () ()) () ())
Lexicase best errors: [0 1 1 1 0 0 1 0 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 64
Percent parens: 0.297
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction exec_s} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 3, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Zero cases best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup_items exec_rot (boolean_dup_times boolean_stackdepth in1 boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty integer_lt exec_dup (integer_swap boolean_stackdepth integer_pop integer_div boolean_pop exec_if (exec_when (exec_empty boolean_swap exec_dup (integer_stackdepth boolean_not boolean_dup_items in3 integer_dup_items integer_yankdup boolean_empty exec_shove (exec_s (integer_dup_items exec_flush integer_eq print_integer) () () exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and)))) ()))) () ()) () ())
Zero cases best errors: [0 1 1 1 0 0 1 0 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 64
Percent parens: 0.297
--- Lexicase Population Statistics ---
Count of elite individuals by case: (124 1000 1000 618 124 124 618 124 204 618)
Population mean number of elite cases: 4.55
Count of perfect (error zero) individuals by case: (124 0 0 618 124 124 618 124 204 618)
Population mean number of perfect (error zero) cases: 2.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction 42} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup})
Best program: (exec_dup_times () exec_dup_times () exec_dup_items boolean_flush exec_dup_items exec_rot (42 boolean_stackdepth in1 boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (integer_fromboolean exec_empty boolean_swap exec_dup ()) () ()) () ())
Errors: [0 1 1 1 0 0 1 0 1 1]
Total: 6
Mean: 0.6
Genome size: 19
Size: 29
Percent parens: 0.345
--- Population Statistics ---
Average total errors in population: 7.446
Median total errors in population: 7
Error averages by case: (0.876 1.0 1.0 0.382 0.876 0.876 0.382 0.876 0.796 0.382)
Error minima by case: (0 1 1 0 0 0 0 0 0 0)
Average genome size in population (length): 33.163
Average program size in population (points): 48.649
Average percent parens in population: 0.319
Minimum age in population: 71.20066502410305
Maximum age in population: 75.56409076762436
Average age in population: 73.79443989360207
Median age in population: 73.85157578871593
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 126
Genome diversity (% unique genomes):	 0.578
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 127
Syntactic diversity (% unique Push programs):	 0.567
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 32925314
--- Timings ---
Current time: 1559314462504 milliseconds
Total Time:         133.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        82.4 seconds, 61.7%
Fitness Testing:     28.2 seconds, 21.1%
Report:              22.8 seconds, 17.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Smallest problem report - generation 50
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 50                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 30                 
Correct output: 9                   | Program output: 67                 
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 97                 
Correct output: 20                  | Program output: 60                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 76                 
Correct output: 14                  | Program output: 42                 
Correct output: 46                  | Program output: 50                 
Correct output: -96                 | Program output: 50                 
Correct output: -61                 | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: 55                 
Correct output: -95                 | Program output: 21                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: 40                 
Correct output: -60                 | Program output: 18                 
Correct output: -55                 | Program output: 20                 
Correct output: -42                 | Program output: 14                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 85                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 20                 
Correct output: -56                 | Program output: 16                 
Correct output: -75                 | Program output: 30                 
Correct output: -87                 | Program output: 27                 
Correct output: -81                 | Program output: 55                 
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: 61                 
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: 51                 
Correct output: -19                 | Program output: 65                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 67                 
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: 56                 
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 74                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: 15                 
Correct output: -5                  | Program output: 17                 
Correct output: -45                 | Program output: 6                  
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: 94                 
Correct output: -65                 | Program output: 57                 
Correct output: -36                 | Program output: 23                 
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 47                 
Correct output: -49                 | Program output: 90                 
Correct output: -54                 | Program output: 71                 
Correct output: -71                 | Program output: 76                 
Correct output: -15                 | Program output: 3                  
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: 13                 
Correct output: -63                 | Program output: 62                 
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 3, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Lexicase best program: (exec_dup_times () exec_dup_items boolean_flush exec_yank exec_rot (boolean_dup_times boolean_stackdepth in1 boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_yank exec_rot (exec_dup_times (exec_empty boolean_swap exec_dup (boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (integer_stackdepth boolean_not boolean_dup_items in3 integer_dup_items integer_yankdup boolean_empty exec_shove (integer_inc integer_dup_items exec_flush) integer_eq print_integer))) (exec_do*count (integer_pop boolean_stackdepth boolean_invert_first_then_and)) ()))) () ()) () ())
Lexicase best errors: [0 0 1 0 1 1 1 1 0 1]
Lexicase best number of elite cases: 5
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 62
Percent parens: 0.274
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 3, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Zero cases best program: (exec_dup_times () exec_dup_items boolean_flush exec_yank exec_rot (boolean_dup_times boolean_stackdepth in1 boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_yank exec_rot (exec_dup_times (exec_empty boolean_swap exec_dup (boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (integer_stackdepth boolean_not boolean_dup_items in3 integer_dup_items integer_yankdup boolean_empty exec_shove (integer_inc integer_dup_items exec_flush) integer_eq print_integer))) (exec_do*count (integer_pop boolean_stackdepth boolean_invert_first_then_and)) ()))) () ()) () ())
Zero cases best errors: [0 0 1 0 1 1 1 1 0 1]
Zero cases best number of elite cases: 5
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 62
Percent parens: 0.274
--- Lexicase Population Statistics ---
Count of elite individuals by case: (446 446 1000 907 115 13 346 345 446 346)
Population mean number of elite cases: 4.41
Count of perfect (error zero) individuals by case: (446 446 0 907 115 13 346 345 446 346)
Population mean number of perfect (error zero) cases: 3.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 1, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Best program: (exec_dup_times (in3 boolean_flush integer_dup integer_pop print_integer) boolean_pop exec_rot (exec_when (integer_eq exec_s_when_autoconstructing () (exec_do*count () integer_pop integer_eq boolean_or integer_shove boolean_flush exec_when (exec_swap () (exec_while (in3 print_integer)) exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and)) ())) () ())
Errors: [1 1 1 0 1 1 0 0 1 0]
Total: 6
Mean: 0.6
Genome size: 26
Size: 41
Percent parens: 0.366
--- Population Statistics ---
Average total errors in population: 6.59
Median total errors in population: 6
Error averages by case: (0.554 0.554 1.0 0.093 0.885 0.987 0.654 0.655 0.554 0.654)
Error minima by case: (0 0 1 0 0 0 0 0 0 0)
Average genome size in population (length): 35.506
Average program size in population (points): 50.916
Average percent parens in population: 0.305
Minimum age in population: 72.21078514914393
Maximum age in population: 77.16033550367574
Average age in population: 75.30839618206397
Median age in population: 75.35472315361432
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 47
Genome diversity (% unique genomes):	 0.669
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 49
Syntactic diversity (% unique Push programs):	 0.662
Total error diversity:				 0.005
Error (vector) diversity:			 0.008
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 33181603
--- Timings ---
Current time: 1559314464901 milliseconds
Total Time:         135.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        84.3 seconds, 62.0%
Fitness Testing:     28.4 seconds, 20.9%
Report:              23.0 seconds, 16.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Smallest problem report - generation 51
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 50                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 30                 
Correct output: 9                   | Program output: 67                 
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 97                 
Correct output: 20                  | Program output: 60                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 76                 
Correct output: 14                  | Program output: 42                 
Correct output: 46                  | Program output: 50                 
Correct output: -96                 | Program output: 50                 
Correct output: -61                 | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: 55                 
Correct output: -95                 | Program output: 21                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: 40                 
Correct output: -60                 | Program output: 18                 
Correct output: -55                 | Program output: 20                 
Correct output: -42                 | Program output: 14                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 85                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 20                 
Correct output: -56                 | Program output: 16                 
Correct output: -75                 | Program output: 30                 
Correct output: -87                 | Program output: 27                 
Correct output: -81                 | Program output: 55                 
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: 61                 
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: 51                 
Correct output: -19                 | Program output: 65                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 67                 
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: 56                 
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 74                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: 15                 
Correct output: -5                  | Program output: 17                 
Correct output: -45                 | Program output: 6                  
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: 94                 
Correct output: -65                 | Program output: 57                 
Correct output: -36                 | Program output: 23                 
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 47                 
Correct output: -49                 | Program output: 90                 
Correct output: -54                 | Program output: 71                 
Correct output: -71                 | Program output: 76                 
Correct output: -15                 | Program output: 3                  
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: 13                 
Correct output: -63                 | Program output: 62                 
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction tagged_236} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 3, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 3, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop})
Lexicase best program: (tagged_236 in3 boolean_flush boolean_stackdepth integer_pop print_integer exec_s (exec_rot (exec_when (exec_empty boolean_swap integer_swap boolean_dup_times boolean_stackdepth exec_flush integer_eq exec_s_when_autoconstructing () (print_integer boolean_pop exec_rot (integer_dup_times integer_yankdup integer_mod integer_inc integer_dup_items exec_flush) (integer_eq print_integer) ()) (exec_do*count (integer_sub integer_inc integer_dup_items exec_flush) integer_eq print_integer))) (exec_do*count () integer_pop) ()) () ())
Lexicase best errors: [0 0 1 1 0 0 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 53
Percent parens: 0.302
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction tagged_236} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_s} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 3, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_sub} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 3, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop})
Zero cases best program: (tagged_236 in3 boolean_flush boolean_stackdepth integer_pop print_integer exec_s (exec_rot (exec_when (exec_empty boolean_swap integer_swap boolean_dup_times boolean_stackdepth exec_flush integer_eq exec_s_when_autoconstructing () (print_integer boolean_pop exec_rot (integer_dup_times integer_yankdup integer_mod integer_inc integer_dup_items exec_flush) (integer_eq print_integer) ()) (exec_do*count (integer_sub integer_inc integer_dup_items exec_flush) integer_eq print_integer))) (exec_do*count () integer_pop) ()) () ())
Zero cases best errors: [0 0 1 1 0 0 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 53
Percent parens: 0.302
--- Lexicase Population Statistics ---
Count of elite individuals by case: (803 802 333 333 367 367 367 102 102 701)
Population mean number of elite cases: 4.28
Count of perfect (error zero) individuals by case: (803 802 333 333 367 367 367 102 102 701)
Population mean number of perfect (error zero) cases: 4.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_noop} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Best program: (exec_dup_times () in3 boolean_flush boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (boolean_dup_times boolean_stackdepth exec_flush integer_eq exec_s_when_autoconstructing () (exec_do*count () integer_pop integer_eq boolean_or integer_shove boolean_flush exec_when (exec_swap () (exec_while (exec_noop print_integer)) exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and)) ()))) () ())
Errors: [0 0 1 1 0 0 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 32
Size: 48
Percent parens: 0.333
--- Population Statistics ---
Average total errors in population: 5.723
Median total errors in population: 5
Error averages by case: (0.197 0.198 0.667 0.667 0.633 0.633 0.633 0.898 0.898 0.299)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.697
Average program size in population (points): 49.869
Average percent parens in population: 0.306
Minimum age in population: 73.66372078765176
Maximum age in population: 78.86856347764541
Average age in population: 76.80183719510524
Median age in population: 76.89970454778198
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 28
Genome diversity (% unique genomes):	 0.746
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.742
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 33460729
--- Timings ---
Current time: 1559314467230 milliseconds
Total Time:         138.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        86.2 seconds, 62.3%
Fitness Testing:     28.7 seconds, 20.8%
Report:              23.3 seconds, 16.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Smallest problem report - generation 52
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 50                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 30                 
Correct output: 9                   | Program output: 67                 
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 97                 
Correct output: 20                  | Program output: 60                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 76                 
Correct output: 14                  | Program output: 42                 
Correct output: 46                  | Program output: 50                 
Correct output: -96                 | Program output: 50                 
Correct output: -61                 | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: 55                 
Correct output: -95                 | Program output: 21                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: 40                 
Correct output: -60                 | Program output: 18                 
Correct output: -55                 | Program output: 20                 
Correct output: -42                 | Program output: 14                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 85                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 20                 
Correct output: -56                 | Program output: 16                 
Correct output: -75                 | Program output: 30                 
Correct output: -87                 | Program output: 27                 
Correct output: -81                 | Program output: 55                 
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: 61                 
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: 51                 
Correct output: -19                 | Program output: 65                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 67                 
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: 56                 
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 74                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: 15                 
Correct output: -5                  | Program output: 17                 
Correct output: -45                 | Program output: 6                  
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: 94                 
Correct output: -65                 | Program output: 57                 
Correct output: -36                 | Program output: 23                 
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 47                 
Correct output: -49                 | Program output: 90                 
Correct output: -54                 | Program output: 71                 
Correct output: -71                 | Program output: 76                 
Correct output: -15                 | Program output: 3                  
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: 13                 
Correct output: -63                 | Program output: 62                 
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Lexicase best program: (exec_dup_times () in3 boolean_flush boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (boolean_dup_times boolean_stackdepth exec_flush boolean_shove exec_flush) exec_do*count () exec_s_when_autoconstructing () (exec_do*count () integer_pop integer_eq boolean_or integer_dec boolean_flush exec_when (exec_swap () (exec_while (in3 print_integer)) exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and)) ())) () ())
Lexicase best errors: [1 0 1 0 0 0 0 1 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 51
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Zero cases best program: (exec_dup_times () in3 boolean_flush boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (boolean_dup_times boolean_stackdepth exec_flush boolean_shove exec_flush) exec_do*count () exec_s_when_autoconstructing () (exec_do*count () integer_pop integer_eq boolean_or integer_dec boolean_flush exec_when (exec_swap () (exec_while (in3 print_integer)) exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and)) ())) () ())
Zero cases best errors: [1 0 1 0 0 0 0 1 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 51
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 417 235 417 417 417 417 256 417 254)
Population mean number of elite cases: 4.25
Count of perfect (error zero) individuals by case: (0 417 235 417 417 417 417 256 417 254)
Population mean number of perfect (error zero) cases: 3.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_s} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 3, :instruction print_integer} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Best program: (exec_dup_times () in3 boolean_flush boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (boolean_dup_times boolean_stackdepth exec_flush boolean_shove exec_flush) exec_do*count () integer_pop integer_eq boolean_or integer_shove boolean_flush exec_when (exec_swap () () exec_while (boolean_pop boolean_pop exec_when (exec_empty exec_s (exec_dup (integer_stackdepth boolean_not boolean_dup_items in3 integer_dup_times integer_yankdup boolean_empty exec_when (integer_inc integer_dup_items exec_flush) integer_eq print_integer)) () (boolean_stackdepth boolean_invert_first_then_and)))))) () ())
Errors: [1 0 1 0 0 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 47
Size: 65
Percent parens: 0.277
--- Population Statistics ---
Average total errors in population: 6.753
Median total errors in population: 8
Error averages by case: (1.0 0.583 0.765 0.583 0.583 0.583 0.583 0.744 0.583 0.746)
Error minima by case: (1 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.086
Average program size in population (points): 49.457
Average percent parens in population: 0.312
Minimum age in population: 75.15093297240414
Maximum age in population: 80.10255801774544
Average age in population: 78.23258885128551
Median age in population: 78.32990865567707
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 28
Genome diversity (% unique genomes):	 0.756
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.751
Total error diversity:				 0.004
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 33710984
--- Timings ---
Current time: 1559314469393 milliseconds
Total Time:         140.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        87.9 seconds, 62.6%
Fitness Testing:     29.0 seconds, 20.6%
Report:              23.5 seconds, 16.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Smallest problem report - generation 53
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 50                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 30                 
Correct output: 9                   | Program output: 67                 
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 97                 
Correct output: 20                  | Program output: 60                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 76                 
Correct output: 14                  | Program output: 42                 
Correct output: 46                  | Program output: 50                 
Correct output: -96                 | Program output: 50                 
Correct output: -61                 | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: 55                 
Correct output: -95                 | Program output: 21                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: 40                 
Correct output: -60                 | Program output: 18                 
Correct output: -55                 | Program output: 20                 
Correct output: -42                 | Program output: 14                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 85                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 20                 
Correct output: -56                 | Program output: 16                 
Correct output: -75                 | Program output: 30                 
Correct output: -87                 | Program output: 27                 
Correct output: -81                 | Program output: 55                 
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: 61                 
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: 51                 
Correct output: -19                 | Program output: 65                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 67                 
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: 56                 
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 74                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: 15                 
Correct output: -5                  | Program output: 17                 
Correct output: -45                 | Program output: 6                  
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: 94                 
Correct output: -65                 | Program output: 57                 
Correct output: -36                 | Program output: 23                 
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 47                 
Correct output: -49                 | Program output: 90                 
Correct output: -54                 | Program output: 71                 
Correct output: -71                 | Program output: 76                 
Correct output: -15                 | Program output: 3                  
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: 13                 
Correct output: -63                 | Program output: 62                 
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq})
Lexicase best program: (exec_dup_times () in3 boolean_flush boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (boolean_dup_times boolean_stackdepth exec_flush boolean_shove integer_dup_items integer_yankdup boolean_empty exec_shove (integer_inc integer_dup_items exec_flush integer_eq)))) () ())
Lexicase best errors: [0 0 1 1 1 1 1 0 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 32
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq})
Zero cases best program: (exec_dup_times () in3 boolean_flush boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (boolean_dup_times boolean_stackdepth exec_flush boolean_shove integer_dup_items integer_yankdup boolean_empty exec_shove (integer_inc integer_dup_items exec_flush integer_eq)))) () ())
Zero cases best errors: [0 0 1 1 1 1 1 0 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 32
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (621 621 1000 100 1000 199 198 621 1000 933)
Population mean number of elite cases: 6.29
Count of perfect (error zero) individuals by case: (621 621 0 100 0 199 198 621 0 933)
Population mean number of perfect (error zero) cases: 3.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction in1} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_invert_first_then_and})
Best program: (exec_dup_times () in3 boolean_flush boolean_stackdepth integer_pop print_integer boolean_pop in1 exec_when (exec_empty boolean_swap exec_dup (boolean_dup_times boolean_stackdepth exec_flush integer_eq exec_s_when_autoconstructing () (exec_rot () (integer_pop integer_eq boolean_or integer_shove boolean_flush exec_when () exec_swap () (exec_while (in3 print_integer)) exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and) ()) ())))
Errors: [0 0 1 1 1 1 1 0 1 0]
Total: 6
Mean: 0.6
Genome size: 32
Size: 47
Percent parens: 0.319
--- Population Statistics ---
Average total errors in population: 6.707
Median total errors in population: 6
Error averages by case: (0.379 0.379 1.0 0.9 1.0 0.801 0.802 0.379 1.0 0.067)
Error minima by case: (0 0 1 0 1 0 0 0 1 0)
Average genome size in population (length): 33.665
Average program size in population (points): 49.033
Average percent parens in population: 0.315
Minimum age in population: 76.15093297240414
Maximum age in population: 81.70821460409083
Average age in population: 79.73927993681355
Median age in population: 79.80237306841883
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 14
Genome diversity (% unique genomes):	 0.74
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.734
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 33954235
--- Timings ---
Current time: 1559314471567 milliseconds
Total Time:         142.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        89.7 seconds, 62.9%
Fitness Testing:     29.2 seconds, 20.5%
Report:              23.7 seconds, 16.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Smallest problem report - generation 54
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 50                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 30                 
Correct output: 9                   | Program output: 67                 
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 97                 
Correct output: 20                  | Program output: 60                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 76                 
Correct output: 14                  | Program output: 42                 
Correct output: 46                  | Program output: 50                 
Correct output: -96                 | Program output: 50                 
Correct output: -61                 | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: 55                 
Correct output: -95                 | Program output: 21                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: 40                 
Correct output: -60                 | Program output: 18                 
Correct output: -55                 | Program output: 20                 
Correct output: -42                 | Program output: 14                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 85                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 20                 
Correct output: -56                 | Program output: 16                 
Correct output: -75                 | Program output: 30                 
Correct output: -87                 | Program output: 27                 
Correct output: -81                 | Program output: 55                 
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: 61                 
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: 51                 
Correct output: -19                 | Program output: 65                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 67                 
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: 56                 
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 74                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: 15                 
Correct output: -5                  | Program output: 17                 
Correct output: -45                 | Program output: 6                  
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: 94                 
Correct output: -65                 | Program output: 57                 
Correct output: -36                 | Program output: 23                 
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 47                 
Correct output: -49                 | Program output: 90                 
Correct output: -54                 | Program output: 71                 
Correct output: -71                 | Program output: 76                 
Correct output: -15                 | Program output: 3                  
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: 13                 
Correct output: -63                 | Program output: 62                 
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction -74} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Lexicase best program: (exec_dup_times () in3 boolean_flush boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty exec_empty print_integer boolean_pop exec_rot (-74 exec_empty exec_when (integer_gt boolean_swap exec_dup (boolean_dup_times boolean_stackdepth exec_flush integer_eq exec_s_when_autoconstructing () (exec_do*count () integer_pop integer_eq boolean_or integer_shove boolean_flush exec_when (exec_swap () (exec_while (in3 print_integer)) exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and)) ()))) () ())) () ())) () ())
Lexicase best errors: [1 1 1 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 71
Percent parens: 0.338
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_empty} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction -74} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_when} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Zero cases best program: (exec_dup_times () in3 boolean_flush boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty exec_empty print_integer boolean_pop exec_rot (-74 exec_empty exec_when (integer_gt boolean_swap exec_dup (boolean_dup_times boolean_stackdepth exec_flush integer_eq exec_s_when_autoconstructing () (exec_do*count () integer_pop integer_eq boolean_or integer_shove boolean_flush exec_when (exec_swap () (exec_while (in3 print_integer)) exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and)) ()))) () ())) () ())) () ())
Zero cases best errors: [1 1 1 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 71
Percent parens: 0.338
--- Lexicase Population Statistics ---
Count of elite individuals by case: (274 274 274 478 1000 478 274 1000 478 478)
Population mean number of elite cases: 5.01
Count of perfect (error zero) individuals by case: (274 274 274 478 0 478 274 0 478 478)
Population mean number of perfect (error zero) cases: 3.01
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 1, :instruction boolean_shove} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_s} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 3, :instruction integer_pop} {:close 2, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Best program: (exec_dup_times () in3 in4 in3 boolean_flush boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (boolean_dup_times boolean_stackdepth exec_flush boolean_shove) exec_s_when_autoconstructing () (exec_do*count () exec_when (exec_swap () (exec_while (in3 integer_pop print_integer boolean_pop) exec_s (exec_when (exec_empty boolean_swap exec_dup (integer_stackdepth boolean_not boolean_dup_items in3 boolean_shove integer_yankdup boolean_empty exec_shove (integer_inc integer_dup_items exec_flush integer_eq integer_pop))) exec_do*count ()) (integer_pop boolean_stackdepth boolean_invert_first_then_and) ()))) ())) () ())
Errors: [1 1 1 0 1 0 1 1 0 0]
Total: 6
Mean: 0.6
Genome size: 49
Size: 71
Percent parens: 0.310
--- Population Statistics ---
Average total errors in population: 6.992
Median total errors in population: 6
Error averages by case: (0.726 0.726 0.726 0.522 1.0 0.522 0.726 1.0 0.522 0.522)
Error minima by case: (0 0 0 0 1 0 0 1 0 0)
Average genome size in population (length): 33.671
Average program size in population (points): 48.824
Average percent parens in population: 0.312
Minimum age in population: 78.23528599196538
Maximum age in population: 83.00521615566136
Average age in population: 81.23434343508237
Median age in population: 81.31538893987843
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 19
Genome diversity (% unique genomes):	 0.802
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.789
Total error diversity:				 0.002
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 34212217
--- Timings ---
Current time: 1559314473783 milliseconds
Total Time:         144.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        91.4 seconds, 63.1%
Fitness Testing:     29.4 seconds, 20.3%
Report:              23.9 seconds, 16.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Smallest problem report - generation 55
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 50                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 30                 
Correct output: 9                   | Program output: 67                 
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 97                 
Correct output: 20                  | Program output: 60                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 76                 
Correct output: 14                  | Program output: 42                 
Correct output: 46                  | Program output: 50                 
Correct output: -96                 | Program output: 50                 
Correct output: -61                 | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: 55                 
Correct output: -95                 | Program output: 21                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: 40                 
Correct output: -60                 | Program output: 18                 
Correct output: -55                 | Program output: 20                 
Correct output: -42                 | Program output: 14                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 85                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 20                 
Correct output: -56                 | Program output: 16                 
Correct output: -75                 | Program output: 30                 
Correct output: -87                 | Program output: 27                 
Correct output: -81                 | Program output: 55                 
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: 61                 
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: 51                 
Correct output: -19                 | Program output: 65                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 67                 
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: 56                 
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 74                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: 15                 
Correct output: -5                  | Program output: 17                 
Correct output: -45                 | Program output: 6                  
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: 94                 
Correct output: -65                 | Program output: 57                 
Correct output: -36                 | Program output: 23                 
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 47                 
Correct output: -49                 | Program output: 90                 
Correct output: -54                 | Program output: 71                 
Correct output: -71                 | Program output: 76                 
Correct output: -15                 | Program output: 3                  
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: 13                 
Correct output: -63                 | Program output: 62                 
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Lexicase best program: (exec_dup_times (in3 boolean_flush boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (boolean_dup_times) boolean_stackdepth exec_flush integer_eq exec_s_when_autoconstructing (exec_do*count () integer_pop integer_eq boolean_or integer_shove boolean_flush exec_when (exec_swap () (exec_when (exec_swap () (exec_while (print_boolean print_integer)) exec_do*count () print_integer)) exec_do*count (integer_pop boolean_stackdepth boolean_invert_first_then_and))) () ())) () ()))
Lexicase best errors: [0 1 1 1 0 0 0 1 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 56
Percent parens: 0.357
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction print_boolean} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Zero cases best program: (exec_dup_times (in3 boolean_flush boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (boolean_dup_times) boolean_stackdepth exec_flush integer_eq exec_s_when_autoconstructing (exec_do*count () integer_pop integer_eq boolean_or integer_shove boolean_flush exec_when (exec_swap () (exec_when (exec_swap () (exec_while (print_boolean print_integer)) exec_do*count () print_integer)) exec_do*count (integer_pop boolean_stackdepth boolean_invert_first_then_and))) () ())) () ()))
Zero cases best errors: [0 1 1 1 0 0 0 1 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 56
Percent parens: 0.357
--- Lexicase Population Statistics ---
Count of elite individuals by case: (468 1000 1000 1000 923 468 468 455 468 1000)
Population mean number of elite cases: 7.25
Count of perfect (error zero) individuals by case: (468 0 0 0 923 468 468 455 468 0)
Population mean number of perfect (error zero) cases: 3.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 2, :instruction print_integer})
Best program: (exec_dup_times () in3 boolean_flush boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (boolean_dup_times integer_eq exec_s_when_autoconstructing () (exec_yankdup) (integer_pop integer_eq boolean_or integer_shove print_integer)))) () ())
Errors: [0 1 1 1 0 0 0 1 0 1]
Total: 5
Mean: 0.5
Genome size: 21
Size: 31
Percent parens: 0.323
--- Population Statistics ---
Average total errors in population: 6.75
Median total errors in population: 8
Error averages by case: (0.532 1.0 1.0 1.0 0.077 0.532 0.532 0.545 0.532 1.0)
Error minima by case: (0 1 1 1 0 0 0 0 0 1)
Average genome size in population (length): 34.156
Average program size in population (points): 49.256
Average percent parens in population: 0.309
Minimum age in population: 79.52200273957688
Maximum age in population: 84.77932128434502
Average age in population: 82.72501309062383
Median age in population: 82.81859851697386
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.757
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.744
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 34496744
--- Timings ---
Current time: 1559314475892 milliseconds
Total Time:         146.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        93.0 seconds, 63.3%
Fitness Testing:     29.7 seconds, 20.2%
Report:              24.1 seconds, 16.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Smallest problem report - generation 56
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: 34                 
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: 74                 
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: 28                 
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: 27                 
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: 35                 
Correct output: -54                 | Program output: 59                 
Correct output: -95                 | Program output: 56                 
Correct output: -97                 | Program output: 35                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: 95                 
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: 83                 
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 60                 
Correct output: -34                 | Program output: 79                 
Correct output: -17                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_invert_first_then_and})
Lexicase best program: (exec_dup_times () exec_noop boolean_flush boolean_dup_times boolean_stackdepth in1 boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (boolean_dup_times boolean_stackdepth integer_inc integer_dup_items) exec_flush) integer_eq print_integer) (exec_do*count () exec_dup_items boolean_invert_first_then_and) ())
Lexicase best errors: [0 1 0 0 0 0 1 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 34
Percent parens: 0.235
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_inc} {:close 1, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction exec_dup_items} {:close 1, :instruction boolean_invert_first_then_and})
Zero cases best program: (exec_dup_times () exec_noop boolean_flush boolean_dup_times boolean_stackdepth in1 boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (boolean_dup_times boolean_stackdepth integer_inc integer_dup_items) exec_flush) integer_eq print_integer) (exec_do*count () exec_dup_items boolean_invert_first_then_and) ())
Zero cases best errors: [0 1 0 0 0 0 1 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 34
Percent parens: 0.235
--- Lexicase Population Statistics ---
Count of elite individuals by case: (210 1000 210 209 211 209 726 210 935 1000)
Population mean number of elite cases: 4.92
Count of perfect (error zero) individuals by case: (210 0 210 209 211 209 726 210 935 0)
Population mean number of perfect (error zero) cases: 2.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_div} {:close 0, :instruction exec_when} {:close 2, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction integer_max} {:close 0, :instruction in1} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction in3} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 3, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop})
Best program: (exec_rot (boolean_dup_times boolean_stackdepth in1 boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop integer_div exec_when (exec_empty)) (boolean_swap exec_dup () integer_max in1 integer_dup_times integer_yankdup integer_stackdepth boolean_not boolean_dup_items in3 integer_dup_items integer_yankdup integer_dup_times integer_yankdup boolean_empty exec_shove (integer_inc integer_dup_items exec_flush integer_eq print_integer)) () exec_do*count () integer_pop)
Errors: [0 1 0 0 0 0 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 35
Size: 43
Percent parens: 0.186
--- Population Statistics ---
Average total errors in population: 7.08
Median total errors in population: 8
Error averages by case: (0.79 1.0 0.79 0.791 0.789 0.791 0.274 0.79 0.065 1.0)
Error minima by case: (0 1 0 0 0 0 0 0 0 1)
Average genome size in population (length): 33.242
Average program size in population (points): 48.393
Average percent parens in population: 0.314
Minimum age in population: 80.81905920407436
Maximum age in population: 85.9542193023671
Average age in population: 84.22915452839926
Median age in population: 84.27932935418566
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.762
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.749
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 34754288
--- Timings ---
Current time: 1559314477932 milliseconds
Total Time:         148.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        94.5 seconds, 63.5%
Fitness Testing:     30.0 seconds, 20.1%
Report:              24.3 seconds, 16.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Smallest problem report - generation 57
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 50                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 30                 
Correct output: 9                   | Program output: 67                 
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 97                 
Correct output: 20                  | Program output: 60                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 76                 
Correct output: 14                  | Program output: 42                 
Correct output: 46                  | Program output: 50                 
Correct output: -96                 | Program output: 50                 
Correct output: -61                 | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: 55                 
Correct output: -95                 | Program output: 21                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: 40                 
Correct output: -60                 | Program output: 18                 
Correct output: -55                 | Program output: 20                 
Correct output: -42                 | Program output: 14                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 85                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 20                 
Correct output: -56                 | Program output: 16                 
Correct output: -75                 | Program output: 30                 
Correct output: -87                 | Program output: 27                 
Correct output: -81                 | Program output: 55                 
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: 61                 
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: 51                 
Correct output: -19                 | Program output: 65                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 67                 
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: 56                 
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 74                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: 15                 
Correct output: -5                  | Program output: 17                 
Correct output: -45                 | Program output: 6                  
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: 94                 
Correct output: -65                 | Program output: 57                 
Correct output: -36                 | Program output: 23                 
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 47                 
Correct output: -49                 | Program output: 90                 
Correct output: -54                 | Program output: 71                 
Correct output: -71                 | Program output: 76                 
Correct output: -15                 | Program output: 3                  
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: 13                 
Correct output: -63                 | Program output: 62                 
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction -74} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when})
Lexicase best program: (exec_dup_times () in3 boolean_flush boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (-74 exec_empty boolean_swap exec_dup (boolean_dup_times integer_shove boolean_rot boolean_yank integer_shove boolean_flush exec_when ())) () ())
Lexicase best errors: [0 1 0 1 1 0 0 1 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 26
Percent parens: 0.269
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction -74} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when})
Zero cases best program: (exec_dup_times () in3 boolean_flush boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (-74 exec_empty boolean_swap exec_dup (boolean_dup_times integer_shove boolean_rot boolean_yank integer_shove boolean_flush exec_when ())) () ())
Zero cases best errors: [0 1 0 1 1 0 0 1 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 26
Percent parens: 0.269
--- Lexicase Population Statistics ---
Count of elite individuals by case: (917 1000 917 751 751 165 165 1000 1000 1000)
Population mean number of elite cases: 7.67
Count of perfect (error zero) individuals by case: (917 0 917 751 751 165 165 0 0 0)
Population mean number of perfect (error zero) cases: 3.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction in3} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 1, :instruction exec_do*count} {:close 1, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Best program: (boolean_invert_second_then_and in3 exec_dup_times () in3 boolean_flush boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (boolean_dup_times exec_y (boolean_pop exec_rot (integer_eq exec_s_when_autoconstructing () (exec_do*count () exec_do*count () integer_pop) (integer_eq boolean_or integer_shove boolean_flush exec_when (exec_swap () (exec_while (in3 print_integer)) exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and))) () ())))) () ())
Errors: [0 1 0 1 1 0 0 1 1 1]
Total: 6
Mean: 0.6
Genome size: 36
Size: 57
Percent parens: 0.368
--- Population Statistics ---
Average total errors in population: 6.334
Median total errors in population: 6
Error averages by case: (0.083 1.0 0.083 0.249 0.249 0.835 0.835 1.0 1.0 1.0)
Error minima by case: (0 1 0 0 0 0 0 1 1 1)
Average genome size in population (length): 34.722
Average program size in population (points): 49.319
Average percent parens in population: 0.298
Minimum age in population: 82.28344628986783
Maximum age in population: 87.59194211827355
Average age in population: 85.68536142780201
Median age in population: 85.74669033180918
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 11
Genome diversity (% unique genomes):	 0.662
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.657
Total error diversity:				 0.003
Error (vector) diversity:			 0.005
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 35080620
--- Timings ---
Current time: 1559314480278 milliseconds
Total Time:         150.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        95.8 seconds, 63.5%
Fitness Testing:     30.2 seconds, 20.1%
Report:              24.6 seconds, 16.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Smallest problem report - generation 58
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: 34                 
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: 74                 
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: 28                 
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: 27                 
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: 35                 
Correct output: -54                 | Program output: 59                 
Correct output: -95                 | Program output: 56                 
Correct output: -97                 | Program output: 35                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: 95                 
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: 83                 
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 60                 
Correct output: -34                 | Program output: 79                 
Correct output: -17                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction tagged_236} {:close 1, :instruction in3} {:close 2, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop})
Lexicase best program: (tagged_236 in3 exec_dup_times () in3 boolean_flush boolean_stackdepth exec_dup_times () exec_dup_times () exec_dup_items boolean_flush boolean_flush boolean_stackdepth in1 boolean_dup_times integer_swap integer_pop print_integer boolean_pop exec_rot (exec_s_when_autoconstructing () (exec_do*count () integer_pop integer_eq boolean_or) (integer_shove boolean_flush exec_when (exec_swap () (exec_while (in3 print_integer)) exec_do*count () integer_pop))) () ())
Lexicase best errors: [1 0 0 1 1 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 49
Percent parens: 0.327
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction tagged_236} {:close 1, :instruction in3} {:close 2, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop})
Zero cases best program: (tagged_236 in3 exec_dup_times () in3 boolean_flush boolean_stackdepth exec_dup_times () exec_dup_times () exec_dup_items boolean_flush boolean_flush boolean_stackdepth in1 boolean_dup_times integer_swap integer_pop print_integer boolean_pop exec_rot (exec_s_when_autoconstructing () (exec_do*count () integer_pop integer_eq boolean_or) (integer_shove boolean_flush exec_when (exec_swap () (exec_while (in3 print_integer)) exec_do*count () integer_pop))) () ())
Zero cases best errors: [1 0 0 1 1 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 49
Percent parens: 0.327
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 456 456 453 1000 455 454 454 454 454)
Population mean number of elite cases: 5.64
Count of perfect (error zero) individuals by case: (0 456 456 453 0 455 454 454 454 454)
Population mean number of perfect (error zero) cases: 3.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_k_when_autoconstructing})
Best program: (boolean_stackdepth in1 boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_rot exec_dup (boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (boolean_swap exec_empty boolean_swap exec_dup (integer_dup_items integer_yankdup boolean_empty exec_shove (integer_inc integer_dup_items exec_flush exec_k_when_autoconstructing () ()))) () ()))) () ())
Errors: [1 0 0 1 1 0 0 0 0 0]
Total: 3
Mean: 0.3
Genome size: 30
Size: 43
Percent parens: 0.302
--- Population Statistics ---
Average total errors in population: 6.364
Median total errors in population: 9
Error averages by case: (1.0 0.544 0.544 0.547 1.0 0.545 0.546 0.546 0.546 0.546)
Error minima by case: (1 0 0 0 1 0 0 0 0 0)
Average genome size in population (length): 33.4
Average program size in population (points): 47.978
Average percent parens in population: 0.304
Minimum age in population: 84.15264723058252
Maximum age in population: 89.0508831482478
Average age in population: 87.14765958207487
Median age in population: 87.22069800163402
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.723
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.715
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 35361795
--- Timings ---
Current time: 1559314482462 milliseconds
Total Time:         153.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        97.5 seconds, 63.5%
Fitness Testing:     30.5 seconds, 19.9%
Report:              25.4 seconds, 16.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Smallest problem report - generation 59
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: 34                 
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: 74                 
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: 28                 
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: 27                 
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: 35                 
Correct output: -54                 | Program output: 59                 
Correct output: -95                 | Program output: 56                 
Correct output: -97                 | Program output: 35                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: 95                 
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: 83                 
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 60                 
Correct output: -34                 | Program output: 79                 
Correct output: -17                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Lexicase best program: (exec_dup_times () exec_dup_items exec_rot (boolean_dup_times boolean_stackdepth in1 boolean_dup_times boolean_stackdepth integer_pop print_integer exec_stackdepth exec_k_when_autoconstructing (boolean_stackdepth exec_flush integer_eq exec_s_when_autoconstructing () (integer_eq boolean_or integer_shove boolean_flush exec_when (exec_swap () (exec_while (in3 print_integer)) exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and)) ()) ()) () ())
Lexicase best errors: [0 0 0 1 1 0 0 0 0 1]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 44
Percent parens: 0.341
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Zero cases best program: (exec_dup_times () exec_dup_items exec_rot (boolean_dup_times boolean_stackdepth in1 boolean_dup_times boolean_stackdepth integer_pop print_integer exec_stackdepth exec_k_when_autoconstructing (boolean_stackdepth exec_flush integer_eq exec_s_when_autoconstructing () (integer_eq boolean_or integer_shove boolean_flush exec_when (exec_swap () (exec_while (in3 print_integer)) exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and)) ()) ()) () ())
Zero cases best errors: [0 0 0 1 1 0 0 0 0 1]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 44
Percent parens: 0.341
--- Lexicase Population Statistics ---
Count of elite individuals by case: (775 781 781 137 1000 917 777 775 780 1000)
Population mean number of elite cases: 7.72
Count of perfect (error zero) individuals by case: (775 781 781 137 0 917 777 775 780 0)
Population mean number of perfect (error zero) cases: 5.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction 63} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_swap})
Best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup_times () 63 boolean_flush exec_dup_items integer_mult integer_dup_times boolean_stackdepth in1 boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (boolean_empty boolean_stackdepth exec_flush integer_eq exec_s_when_autoconstructing () (exec_do*count () integer_pop integer_eq exec_swap () ()) ()))) () ())
Errors: [0 0 0 1 1 0 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 30
Size: 44
Percent parens: 0.318
--- Population Statistics ---
Average total errors in population: 4.277
Median total errors in population: 3
Error averages by case: (0.225 0.219 0.219 0.863 1.0 0.083 0.223 0.225 0.22 1.0)
Error minima by case: (0 0 0 0 1 0 0 0 0 1)
Average genome size in population (length): 33.733
Average program size in population (points): 47.858
Average percent parens in population: 0.296
Minimum age in population: 85.15264723058252
Maximum age in population: 90.55570512267306
Average age in population: 88.56866168071524
Median age in population: 88.62201854466397
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.712
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.71
Total error diversity:				 0.006
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 35674077
--- Timings ---
Current time: 1559314484491 milliseconds
Total Time:         155.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        99.0 seconds, 63.7%
Fitness Testing:     30.8 seconds, 19.8%
Report:              25.6 seconds, 16.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Smallest problem report - generation 60
Test total error for best: 641
Test mean error for best: 0.64100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 50                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 30                 
Correct output: 9                   | Program output: 67                 
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 75                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 97                 
Correct output: 20                  | Program output: 60                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 76                 
Correct output: 14                  | Program output: 42                 
Correct output: 46                  | Program output: 50                 
Correct output: -96                 | Program output: 50                 
Correct output: -61                 | Program output: 93                 
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: 55                 
Correct output: -95                 | Program output: 21                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: 40                 
Correct output: -60                 | Program output: 18                 
Correct output: -55                 | Program output: 20                 
Correct output: -42                 | Program output: 14                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 85                 
Correct output: -43                 | Program output: 35                 
Correct output: -45                 | Program output: 20                 
Correct output: -56                 | Program output: 16                 
Correct output: -75                 | Program output: 30                 
Correct output: -87                 | Program output: 27                 
Correct output: -81                 | Program output: 55                 
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: 61                 
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: 51                 
Correct output: -19                 | Program output: 65                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 67                 
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: 56                 
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: 74                 
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: 15                 
Correct output: -5                  | Program output: 17                 
Correct output: -45                 | Program output: 6                  
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: 94                 
Correct output: -65                 | Program output: 57                 
Correct output: -36                 | Program output: 23                 
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: 47                 
Correct output: -49                 | Program output: 90                 
Correct output: -54                 | Program output: 71                 
Correct output: -71                 | Program output: 76                 
Correct output: -15                 | Program output: 3                  
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: 13                 
Correct output: -63                 | Program output: 62                 
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Lexicase best program: (exec_dup_times () in3 boolean_flush boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (exec_noop boolean_stackdepth exec_flush integer_eq exec_s_when_autoconstructing () () (exec_do*count () integer_pop integer_eq boolean_or integer_shove boolean_flush exec_when (exec_swap () (exec_while (exec_do*while (print_integer)) exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and)))))) () ())
Lexicase best errors: [1 0 1 0 0 0 1 0 1 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 49
Percent parens: 0.347
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_do*while} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Zero cases best program: (exec_dup_times () in3 boolean_flush boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (exec_noop boolean_stackdepth exec_flush integer_eq exec_s_when_autoconstructing () () (exec_do*count () integer_pop integer_eq boolean_or integer_shove boolean_flush exec_when (exec_swap () (exec_while (exec_do*while (print_integer)) exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and)))))) () ())
Zero cases best errors: [1 0 1 0 0 0 1 0 1 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 49
Percent parens: 0.347
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 142 763 142 142 142 1000 142 1000 764)
Population mean number of elite cases: 5.24
Count of perfect (error zero) individuals by case: (0 142 763 142 142 142 0 142 0 764)
Population mean number of perfect (error zero) cases: 2.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction exec_k_when_autoconstructing} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in3} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup})
Best program: (exec_dup_times () exec_dup_items exec_rot (boolean_dup_times boolean_stackdepth exec_k_when_autoconstructing () (exec_dup_items boolean_flush exec_dup_items) boolean_eq boolean_dup_times integer_inc boolean_dup_times exec_rot (boolean_dup_times boolean_stackdepth in3 boolean_dup_times boolean_stackdepth integer_pop print_integer integer_fromboolean exec_rot (exec_when (exec_empty boolean_swap exec_dup (boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_swap () (exec_while (exec_empty boolean_swap exec_dup ()))) () ()))) () ()) () ()) () ())
Errors: [1 0 1 0 0 0 1 0 1 1]
Total: 5
Mean: 0.5
Genome size: 38
Size: 60
Percent parens: 0.367
--- Population Statistics ---
Average total errors in population: 7.763
Median total errors in population: 8
Error averages by case: (1.0 0.858 0.237 0.858 0.858 0.858 1.0 0.858 1.0 0.236)
Error minima by case: (1 0 0 0 0 0 1 0 1 0)
Average genome size in population (length): 33.493
Average program size in population (points): 47.871
Average percent parens in population: 0.301
Minimum age in population: 86.6704404424545
Maximum age in population: 92.05141722658219
Average age in population: 90.05197058279829
Median age in population: 90.12977702790153
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 8
Genome diversity (% unique genomes):	 0.757
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.749
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 35972783
--- Timings ---
Current time: 1559314486425 milliseconds
Total Time:         157.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       100.3 seconds, 63.8%
Fitness Testing:     31.1 seconds, 19.7%
Report:              25.9 seconds, 16.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Smallest problem report - generation 61
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: 34                 
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: 74                 
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: 28                 
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: 27                 
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: 35                 
Correct output: -54                 | Program output: 59                 
Correct output: -95                 | Program output: 56                 
Correct output: -97                 | Program output: 35                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: 95                 
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: 83                 
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 60                 
Correct output: -34                 | Program output: 79                 
Correct output: -17                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction 41} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup})
Lexicase best program: (exec_dup_times () in3 boolean_flush boolean_stackdepth integer_gt exec_dup_times () exec_dup_times () exec_dup_items boolean_flush exec_dup_items exec_rot (41 boolean_stackdepth in1 boolean_dup_times boolean_stackdepth integer_pop print_integer in1 exec_rot (exec_when (exec_empty boolean_swap exec_dup ())) () ()) () ())
Lexicase best errors: [0 0 1 1 1 1 1 1 0 1]
Lexicase best number of elite cases: 3
Lexicase best total error: 7
Lexicase best mean error: 0.7
Lexicase best size: 36
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction 41} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup})
Zero cases best program: (exec_dup_times () in3 boolean_flush boolean_stackdepth integer_gt exec_dup_times () exec_dup_times () exec_dup_items boolean_flush exec_dup_items exec_rot (41 boolean_stackdepth in1 boolean_dup_times boolean_stackdepth integer_pop print_integer in1 exec_rot (exec_when (exec_empty boolean_swap exec_dup ())) () ()) () ())
Zero cases best errors: [0 0 1 1 1 1 1 1 0 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 3
Zero cases best total error: 7
Zero cases best mean error: 0.7
Zero cases best size: 36
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (251 253 676 2 3 1 676 2 252 1)
Population mean number of elite cases: 2.12
Count of perfect (error zero) individuals by case: (251 253 676 2 3 1 676 2 252 1)
Population mean number of perfect (error zero) cases: 2.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 2, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_invert_second_then_and})
Best program: (exec_dup_times () integer_inc boolean_flush exec_dup_items exec_rot (boolean_dup_times boolean_stackdepth in1 boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop boolean_dup_times boolean_stackdepth exec_flush integer_eq exec_s_when_autoconstructing () (exec_dup (boolean_dup_times boolean_stackdepth exec_flush integer_eq exec_s_when_autoconstructing () (exec_do*count ()) (integer_pop integer_eq boolean_or integer_shove) exec_flush exec_dup_items boolean_invert_second_then_and)) ()) () ())
Errors: [0 0 1 1 1 1 1 1 0 1]
Total: 7
Mean: 0.7
Genome size: 32
Size: 45
Percent parens: 0.289
--- Population Statistics ---
Average total errors in population: 7.883
Median total errors in population: 8
Error averages by case: (0.749 0.747 0.324 0.998 0.997 0.999 0.324 0.998 0.748 0.999)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.734
Average program size in population (points): 47.728
Average percent parens in population: 0.314
Minimum age in population: 88.51853123735864
Maximum age in population: 93.38789279712782
Average age in population: 91.54074494114096
Median age in population: 91.60945243340188
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 15
Genome diversity (% unique genomes):	 0.654
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.648
Total error diversity:				 0.004
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 36234797
--- Timings ---
Current time: 1559314488876 milliseconds
Total Time:         159.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       102.3 seconds, 64.0%
Fitness Testing:     31.3 seconds, 19.6%
Report:              26.2 seconds, 16.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Smallest problem report - generation 62
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -13                
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 64                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 73                 
Correct output: 23                  | Program output: 88                 
Correct output: 31                  | Program output: 87                 
Correct output: 20                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 59                 
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 29                 
Correct output: 10                  | Program output: 16                 
Correct output: 1                   | Program output: 30                 
Correct output: 34                  | Program output: 78                 
Correct output: 20                  | Program output: 41                 
Correct output: 9                   | Program output: 15                 
Correct output: 3                   | Program output: 72                 
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 18                 
Correct output: 46                  | Program output: 51                 
Correct output: -96                 | Program output: 82                 
Correct output: -61                 | Program output: -53                
Correct output: -78                 | Program output: 86                 
Correct output: -91                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: 98                 
Correct output: -60                 | Program output: 10                 
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: 97                 
Correct output: -76                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: 22                 
Correct output: -45                 | Program output: 97                 
Correct output: -56                 | Program output: 10                 
Correct output: -75                 | Program output: -1                 
Correct output: -87                 | Program output: -55                
Correct output: -81                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -3                 
Correct output: -54                 | Program output: -47                
Correct output: -95                 | Program output: 3                  
Correct output: -97                 | Program output: -21                
Correct output: -85                 | Program output: 73                 
Correct output: -81                 | Program output: 61                 
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: 24                 
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: 96                 
Correct output: -93                 | Program output: 59                 
Correct output: -62                 | Program output: -8                 
Correct output: -90                 | Program output: -1                 
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: 61                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: 87                 
Correct output: -23                 | Program output: -11                
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: 23                 
Correct output: -95                 | Program output: 33                 
Correct output: -82                 | Program output: 88                 
Correct output: -65                 | Program output: 4                  
Correct output: -36                 | Program output: 10                 
Correct output: -53                 | Program output: -4                 
Correct output: -34                 | Program output: 63                 
Correct output: -17                 | Program output: 54                 
Correct output: -82                 | Program output: -70                
Correct output: -49                 | Program output: -16                
Correct output: -54                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: 55                 
Correct output: -83                 | Program output: 38                 
Correct output: -63                 | Program output: 80                 
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Lexicase best program: (exec_dup_times () in2 boolean_flush boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (boolean_or exec_empty boolean_swap integer_mod boolean_dup_times integer_mult exec_flush integer_eq exec_rot () (exec_eq) (integer_pop integer_eq boolean_or integer_shove) print_integer) () (exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and))
Lexicase best errors: [0 0 0 0 0 1 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 36
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Zero cases best program: (exec_dup_times () in2 boolean_flush boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (boolean_or exec_empty boolean_swap integer_mod boolean_dup_times integer_mult exec_flush integer_eq exec_rot () (exec_eq) (integer_pop integer_eq boolean_or integer_shove) print_integer) () (exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and))
Zero cases best errors: [0 0 0 0 0 1 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 36
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (230 230 930 230 931 208 230 253 254 208)
Population mean number of elite cases: 3.70
Count of perfect (error zero) individuals by case: (230 230 930 230 931 208 230 253 254 208)
Population mean number of perfect (error zero) cases: 3.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 2, :instruction print_integer} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Best program: (exec_dup_times () in2 boolean_flush boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (boolean_or exec_empty boolean_swap integer_mod boolean_dup_times integer_mult exec_flush integer_eq exec_rot () (exec_eq) (integer_pop integer_eq boolean_or integer_shove) print_integer) () (exec_do*count (integer_pop boolean_stackdepth boolean_invert_first_then_and)))
Errors: [0 0 0 0 0 1 0 1 1 1]
Total: 4
Mean: 0.4
Genome size: 27
Size: 36
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.296
Median total errors in population: 6
Error averages by case: (0.77 0.77 0.07 0.77 0.069 0.792 0.77 0.747 0.746 0.792)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 32.009
Average program size in population (points): 45.782
Average percent parens in population: 0.298
Minimum age in population: 90.2919396487446
Maximum age in population: 95.285208298612
Average age in population: 93.08631059637078
Median age in population: 93.26100792889925
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 160
Genome diversity (% unique genomes):	 0.604
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 167
Syntactic diversity (% unique Push programs):	 0.59
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 36466538
--- Timings ---
Current time: 1559314490790 milliseconds
Total Time:         161.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       103.8 seconds, 64.1%
Fitness Testing:     31.5 seconds, 19.5%
Report:              26.4 seconds, 16.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Smallest problem report - generation 63
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: 34                 
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: 74                 
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: 28                 
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: 27                 
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: 35                 
Correct output: -54                 | Program output: 59                 
Correct output: -95                 | Program output: 56                 
Correct output: -97                 | Program output: 35                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: 95                 
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: 83                 
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 60                 
Correct output: -34                 | Program output: 79                 
Correct output: -17                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_swap})
Lexicase best program: (exec_dup_times () exec_dup_items boolean_flush exec_yank exec_rot (boolean_dup_times boolean_stackdepth in1 boolean_dup_times boolean_stackdepth integer_pop print_integer integer_inc exec_rot (exec_dup_times (exec_eq boolean_swap exec_dup (exec_s_when_autoconstructing () (exec_do*count () integer_pop integer_eq exec_swap () ()) ()))) () ()) () ())
Lexicase best errors: [0 1 1 0 1 1 1 0 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 39
Percent parens: 0.410
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 1, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_swap})
Zero cases best program: (exec_dup_times () exec_dup_items boolean_flush exec_yank exec_rot (boolean_dup_times boolean_stackdepth in1 boolean_dup_times boolean_stackdepth integer_pop print_integer integer_inc exec_rot (exec_dup_times (exec_eq boolean_swap exec_dup (exec_s_when_autoconstructing () (exec_do*count () integer_pop integer_eq exec_swap () ()) ()))) () ()) () ())
Zero cases best errors: [0 1 1 0 1 1 1 0 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 39
Percent parens: 0.410
--- Lexicase Population Statistics ---
Count of elite individuals by case: (219 458 458 219 458 1000 1000 219 219 219)
Population mean number of elite cases: 4.47
Count of perfect (error zero) individuals by case: (219 458 458 219 458 0 0 219 219 219)
Population mean number of perfect (error zero) cases: 2.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 1, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 1, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_eq} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction tagged_31} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction in3} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count})
Best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup_items exec_rot (boolean_dup_times boolean_stackdepth in1 boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop) (exec_rot (exec_when (exec_empty boolean_swap) exec_dup (boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot () (boolean_dup_times boolean_or integer_pop print_integer boolean_yank exec_rot (exec_dup_times (exec_eq boolean_swap exec_dup (boolean_pop exec_rot (exec_when (exec_empty boolean_swap tagged_31 boolean_dup_times integer_dup_items integer_pop boolean_or boolean_pop exec_rot (exec_when (exec_empty boolean_swap integer_min integer_stackdepth) boolean_not boolean_dup_items in3) (boolean_yankdup integer_yankdup boolean_empty exec_shove (integer_inc integer_dup_items exec_flush integer_eq print_integer)) (exec_do*count ()))) () ()))) () ()) ())) () ()) ())
Errors: [0 1 1 0 1 1 1 0 0 0]
Total: 5
Mean: 0.5
Genome size: 64
Size: 92
Percent parens: 0.304
--- Population Statistics ---
Average total errors in population: 7.531
Median total errors in population: 7
Error averages by case: (0.781 0.542 0.542 0.781 0.542 1.0 1.0 0.781 0.781 0.781)
Error minima by case: (0 0 0 0 0 1 1 0 0 0)
Average genome size in population (length): 29.532
Average program size in population (points): 41.684
Average percent parens in population: 0.288
Minimum age in population: 91.4565048647839
Maximum age in population: 96.22307121851316
Average age in population: 94.47798597974698
Median age in population: 94.5371220630736
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 218
Genome diversity (% unique genomes):	 0.607
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 232
Syntactic diversity (% unique Push programs):	 0.596
Total error diversity:				 0.003
Error (vector) diversity:			 0.003
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 36697963
--- Timings ---
Current time: 1559314493444 milliseconds
Total Time:         164.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       105.8 seconds, 64.4%
Fitness Testing:     31.8 seconds, 19.3%
Report:              26.6 seconds, 16.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Smallest problem report - generation 64
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -13                
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 64                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 73                 
Correct output: 23                  | Program output: 88                 
Correct output: 31                  | Program output: 87                 
Correct output: 20                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 59                 
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 29                 
Correct output: 10                  | Program output: 16                 
Correct output: 1                   | Program output: 30                 
Correct output: 34                  | Program output: 78                 
Correct output: 20                  | Program output: 41                 
Correct output: 9                   | Program output: 15                 
Correct output: 3                   | Program output: 72                 
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 18                 
Correct output: 46                  | Program output: 51                 
Correct output: -96                 | Program output: 82                 
Correct output: -61                 | Program output: -53                
Correct output: -78                 | Program output: 86                 
Correct output: -91                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: 98                 
Correct output: -60                 | Program output: 10                 
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: 97                 
Correct output: -76                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: 22                 
Correct output: -45                 | Program output: 97                 
Correct output: -56                 | Program output: 10                 
Correct output: -75                 | Program output: -1                 
Correct output: -87                 | Program output: -55                
Correct output: -81                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -3                 
Correct output: -54                 | Program output: -47                
Correct output: -95                 | Program output: 3                  
Correct output: -97                 | Program output: -21                
Correct output: -85                 | Program output: 73                 
Correct output: -81                 | Program output: 61                 
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: 24                 
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: 96                 
Correct output: -93                 | Program output: 59                 
Correct output: -62                 | Program output: -8                 
Correct output: -90                 | Program output: -1                 
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: 61                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: 87                 
Correct output: -23                 | Program output: -11                
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: 23                 
Correct output: -95                 | Program output: 33                 
Correct output: -82                 | Program output: 88                 
Correct output: -65                 | Program output: 4                  
Correct output: -36                 | Program output: 10                 
Correct output: -53                 | Program output: -4                 
Correct output: -34                 | Program output: 63                 
Correct output: -17                 | Program output: 54                 
Correct output: -82                 | Program output: -70                
Correct output: -49                 | Program output: -16                
Correct output: -54                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: 55                 
Correct output: -83                 | Program output: 38                 
Correct output: -63                 | Program output: 80                 
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_dup_times () in2 boolean_flush boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (boolean_or exec_empty boolean_swap integer_mod boolean_dup_times integer_mult exec_flush integer_eq exec_rot () (exec_flush) (exec_do*count () integer_pop exec_k (boolean_or integer_shove boolean_flush exec_when (exec_swap () (exec_while (boolean_pop boolean_pop exec_when (exec_empty boolean_swap) exec_dup (exec_y (boolean_not boolean_dup_items)))))) ())) () ())
Lexicase best errors: [1 1 1 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 54
Percent parens: 0.333
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 1, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_y} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_dup_times () in2 boolean_flush boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (boolean_or exec_empty boolean_swap integer_mod boolean_dup_times integer_mult exec_flush integer_eq exec_rot () (exec_flush) (exec_do*count () integer_pop exec_k (boolean_or integer_shove boolean_flush exec_when (exec_swap () (exec_while (boolean_pop boolean_pop exec_when (exec_empty boolean_swap) exec_dup (exec_y (boolean_not boolean_dup_items)))))) ())) () ())
Zero cases best errors: [1 1 1 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 54
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (525 525 1000 401 1000 401 401 520 401 401)
Population mean number of elite cases: 5.57
Count of perfect (error zero) individuals by case: (525 525 0 401 0 401 401 520 401 401)
Population mean number of perfect (error zero) cases: 3.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Best program: (exec_dup_times () in2 boolean_flush boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (boolean_or exec_empty boolean_swap integer_mod boolean_dup_times integer_mult exec_flush integer_eq exec_rot () (exec_eq) (integer_pop integer_eq boolean_or integer_shove) print_integer) () (exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and))
Errors: [1 1 1 0 1 0 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 27
Size: 36
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 6.425
Median total errors in population: 7
Error averages by case: (0.475 0.475 1.0 0.599 1.0 0.599 0.599 0.48 0.599 0.599)
Error minima by case: (0 0 1 0 1 0 0 0 0 0)
Average genome size in population (length): 29.433
Average program size in population (points): 41.396
Average percent parens in population: 0.286
Minimum age in population: 93.42619128534979
Maximum age in population: 97.77236454643865
Average age in population: 95.91994620303554
Median age in population: 95.98788855967844
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 134
Genome diversity (% unique genomes):	 0.591
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 149
Syntactic diversity (% unique Push programs):	 0.576
Total error diversity:				 0.004
Error (vector) diversity:			 0.004
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 36962054
--- Timings ---
Current time: 1559314495438 milliseconds
Total Time:         166.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       107.4 seconds, 64.5%
Fitness Testing:     32.0 seconds, 19.2%
Report:              27.0 seconds, 16.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Smallest problem report - generation 65
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: 34                 
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: 74                 
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: 28                 
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: 27                 
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: 35                 
Correct output: -54                 | Program output: 59                 
Correct output: -95                 | Program output: 56                 
Correct output: -97                 | Program output: 35                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: 95                 
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: 83                 
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 60                 
Correct output: -34                 | Program output: 79                 
Correct output: -17                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction 41} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup})
Lexicase best program: (exec_dup_times (exec_dup_times () exec_dup_items boolean_flush exec_dup_items exec_rot (41 boolean_stackdepth in1 boolean_dup_times boolean_stackdepth integer_pop print_integer in1 exec_rot (exec_when (exec_empty boolean_swap exec_dup ())) () ()) () ()))
Lexicase best errors: [0 1 0 1 1 1 0 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 30
Percent parens: 0.367
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_dup_times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction 41} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction in1} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup})
Zero cases best program: (exec_dup_times (exec_dup_times () exec_dup_items boolean_flush exec_dup_items exec_rot (41 boolean_stackdepth in1 boolean_dup_times boolean_stackdepth integer_pop print_integer in1 exec_rot (exec_when (exec_empty boolean_swap exec_dup ())) () ()) () ()))
Zero cases best errors: [0 1 0 1 1 1 0 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 30
Percent parens: 0.367
--- Lexicase Population Statistics ---
Count of elite individuals by case: (326 1 329 1000 594 1 922 1000 329 329)
Population mean number of elite cases: 4.83
Count of perfect (error zero) individuals by case: (326 1 329 0 594 1 922 0 329 329)
Population mean number of perfect (error zero) cases: 2.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 1, :instruction boolean_flush} {:close 1, :instruction exec_dup_times} {:close 0, :instruction tagged_751} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_k_when_autoconstructing} {:close 0, :instruction boolean_invert_first_then_and})
Best program: (exec_dup_times () in2 boolean_flush exec_dup_times () tagged_751 boolean_flush exec_dup_items exec_yankdup boolean_dup_times boolean_stackdepth in1 boolean_dup_times boolean_stackdepth integer_shove print_integer exec_y_when_autoconstructing (exec_rot (exec_when (exec_empty) boolean_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup boolean_empty exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_k_when_autoconstructing (boolean_invert_first_then_and) ())) () ()))
Errors: [0 1 0 1 1 1 0 1 0 0]
Total: 5
Mean: 0.5
Genome size: 37
Size: 50
Percent parens: 0.260
--- Population Statistics ---
Average total errors in population: 7.169
Median total errors in population: 8
Error averages by case: (0.674 0.999 0.671 1.0 0.406 0.999 0.078 1.0 0.671 0.671)
Error minima by case: (0 0 0 1 0 0 0 1 0 0)
Average genome size in population (length): 29.01
Average program size in population (points): 40.217
Average percent parens in population: 0.275
Minimum age in population: 95.21158567356318
Maximum age in population: 99.37335732514941
Average age in population: 97.37834479581345
Median age in population: 97.42179948790798
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 127
Genome diversity (% unique genomes):	 0.643
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 151
Syntactic diversity (% unique Push programs):	 0.621
Total error diversity:				 0.005
Error (vector) diversity:			 0.007
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 37199085
--- Timings ---
Current time: 1559314497462 milliseconds
Total Time:         168.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       108.9 seconds, 64.7%
Fitness Testing:     32.2 seconds, 19.1%
Report:              27.2 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Smallest problem report - generation 66
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -13                
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 64                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 73                 
Correct output: 23                  | Program output: 88                 
Correct output: 31                  | Program output: 87                 
Correct output: 20                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 59                 
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 29                 
Correct output: 10                  | Program output: 16                 
Correct output: 1                   | Program output: 30                 
Correct output: 34                  | Program output: 78                 
Correct output: 20                  | Program output: 41                 
Correct output: 9                   | Program output: 15                 
Correct output: 3                   | Program output: 72                 
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 18                 
Correct output: 46                  | Program output: 51                 
Correct output: -96                 | Program output: 82                 
Correct output: -61                 | Program output: -53                
Correct output: -78                 | Program output: 86                 
Correct output: -91                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: 98                 
Correct output: -60                 | Program output: 10                 
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: 97                 
Correct output: -76                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: 22                 
Correct output: -45                 | Program output: 97                 
Correct output: -56                 | Program output: 10                 
Correct output: -75                 | Program output: -1                 
Correct output: -87                 | Program output: -55                
Correct output: -81                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -3                 
Correct output: -54                 | Program output: -47                
Correct output: -95                 | Program output: 3                  
Correct output: -97                 | Program output: -21                
Correct output: -85                 | Program output: 73                 
Correct output: -81                 | Program output: 61                 
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: 24                 
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: 96                 
Correct output: -93                 | Program output: 59                 
Correct output: -62                 | Program output: -8                 
Correct output: -90                 | Program output: -1                 
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: 61                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: 87                 
Correct output: -23                 | Program output: -11                
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: 23                 
Correct output: -95                 | Program output: 33                 
Correct output: -82                 | Program output: 88                 
Correct output: -65                 | Program output: 4                  
Correct output: -36                 | Program output: 10                 
Correct output: -53                 | Program output: -4                 
Correct output: -34                 | Program output: 63                 
Correct output: -17                 | Program output: 54                 
Correct output: -82                 | Program output: -70                
Correct output: -49                 | Program output: -16                
Correct output: -54                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: 55                 
Correct output: -83                 | Program output: 38                 
Correct output: -63                 | Program output: 80                 
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Lexicase best program: (exec_dup_times () in2 boolean_flush boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (boolean_or exec_empty boolean_swap integer_mod boolean_dup_times integer_mult exec_flush integer_eq exec_rot () (exec_eq) (integer_pop integer_eq boolean_or integer_shove) print_integer) () (exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and))
Lexicase best errors: [1 1 0 0 1 0 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 5
Lexicase best mean error: 0.5
Lexicase best size: 36
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_mod} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 1, :instruction integer_shove} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Zero cases best program: (exec_dup_times () in2 boolean_flush boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (boolean_or exec_empty boolean_swap integer_mod boolean_dup_times integer_mult exec_flush integer_eq exec_rot () (exec_eq) (integer_pop integer_eq boolean_or integer_shove) print_integer) () (exec_do*count () integer_pop boolean_stackdepth boolean_invert_first_then_and))
Zero cases best errors: [1 1 0 0 1 0 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 5
Zero cases best total error: 5
Zero cases best mean error: 0.5
Zero cases best size: 36
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (239 529 373 134 526 134 1000 134 134 530)
Population mean number of elite cases: 3.73
Count of perfect (error zero) individuals by case: (239 529 373 134 526 134 0 134 134 530)
Population mean number of perfect (error zero) cases: 2.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 2, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Best program: (exec_dup_times () in2 boolean_flush boolean_stackdepth integer_pop print_integer boolean_pop boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (integer_stackdepth boolean_stackdepth exec_flush integer_eq exec_s_when_autoconstructing () () (exec_do*count () integer_pop integer_pop print_integer integer_pop exec_empty exec_yankdup exec_dup (integer_stackdepth boolean_not boolean_dup_items boolean_stackdepth boolean_invert_first_then_and))))) () ())
Errors: [1 1 0 0 1 0 1 0 0 1]
Total: 5
Mean: 0.5
Genome size: 34
Size: 46
Percent parens: 0.261
--- Population Statistics ---
Average total errors in population: 7.267
Median total errors in population: 7
Error averages by case: (0.761 0.471 0.627 0.866 0.474 0.866 1.0 0.866 0.866 0.47)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 32.575
Average program size in population (points): 46.569
Average percent parens in population: 0.299
Minimum age in population: 96.21158567356318
Maximum age in population: 100.6552975519135
Average age in population: 99.00515358670053
Median age in population: 99.02531017404041
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 141
Genome diversity (% unique genomes):	 0.635
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 143
Syntactic diversity (% unique Push programs):	 0.628
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 37616460
--- Timings ---
Current time: 1559314499419 milliseconds
Total Time:         170.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       110.3 seconds, 64.7%
Fitness Testing:     32.6 seconds, 19.1%
Report:              27.5 seconds, 16.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Smallest problem report - generation 67
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: 34                 
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: 74                 
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: 28                 
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: 27                 
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: 35                 
Correct output: -54                 | Program output: 59                 
Correct output: -95                 | Program output: 56                 
Correct output: -97                 | Program output: 35                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: 95                 
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: 83                 
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 60                 
Correct output: -34                 | Program output: 79                 
Correct output: -17                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Lexicase best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup_items exec_rot (boolean_dup_times boolean_stackdepth in1 boolean_dup_times boolean_stackdepth integer_pop print_integer exec_dup (exec_rot (exec_when (exec_empty integer_lt exec_dup (integer_swap boolean_stackdepth integer_pop integer_div boolean_pop exec_if (exec_when (exec_empty exec_yankdup exec_dup (integer_stackdepth boolean_not boolean_dup_items boolean_stackdepth boolean_invert_first_then_and))) ()))) () ())) () ())
Lexicase best errors: [0 0 0 0 1 1 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 48
Percent parens: 0.313
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_div} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_if} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction boolean_invert_first_then_and})
Zero cases best program: (exec_dup_times () exec_dup_items boolean_flush exec_dup_items exec_rot (boolean_dup_times boolean_stackdepth in1 boolean_dup_times boolean_stackdepth integer_pop print_integer exec_dup (exec_rot (exec_when (exec_empty integer_lt exec_dup (integer_swap boolean_stackdepth integer_pop integer_div boolean_pop exec_if (exec_when (exec_empty exec_yankdup exec_dup (integer_stackdepth boolean_not boolean_dup_items boolean_stackdepth boolean_invert_first_then_and))) ()))) () ())) () ())
Zero cases best errors: [0 0 0 0 1 1 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 48
Percent parens: 0.313
--- Lexicase Population Statistics ---
Count of elite individuals by case: (296 296 919 296 1000 1000 297 511 511 298)
Population mean number of elite cases: 5.42
Count of perfect (error zero) individuals by case: (296 296 919 296 0 0 297 511 511 298)
Population mean number of perfect (error zero) cases: 3.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_do*count} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove})
Best program: (exec_dup_times () exec_do*count (boolean_flush exec_dup_items exec_rot (boolean_dup_times boolean_stackdepth in1 boolean_dup_times boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup boolean_empty exec_shove ()))) () ()) () ()))
Errors: [0 0 0 0 1 1 0 1 1 0]
Total: 4
Mean: 0.4
Genome size: 26
Size: 38
Percent parens: 0.316
--- Population Statistics ---
Average total errors in population: 6.576
Median total errors in population: 7
Error averages by case: (0.704 0.704 0.081 0.704 1.0 1.0 0.703 0.489 0.489 0.702)
Error minima by case: (0 0 0 0 1 1 0 0 0 0)
Average genome size in population (length): 30.379
Average program size in population (points): 42.535
Average percent parens in population: 0.283
Minimum age in population: 97.21158567356318
Maximum age in population: 102.3355904867884
Average age in population: 100.4301072804848
Median age in population: 100.5326974100297
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 45
Genome diversity (% unique genomes):	 0.65
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.639
Total error diversity:				 0.005
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 37934025
--- Timings ---
Current time: 1559314501688 milliseconds
Total Time:         172.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       112.0 seconds, 64.9%
Fitness Testing:     32.9 seconds, 19.0%
Report:              27.7 seconds, 16.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Smallest problem report - generation 68
Test total error for best: 633
Test mean error for best: 0.63300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: 34                 
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: 74                 
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 87                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: 28                 
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 100                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: 27                 
Correct output: -96                 | Program output: 87                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: 35                 
Correct output: -54                 | Program output: 59                 
Correct output: -95                 | Program output: 56                 
Correct output: -97                 | Program output: 35                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: 95                 
Correct output: -46                 | Program output: 29                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: 18                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 74                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: 83                 
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 60                 
Correct output: -34                 | Program output: 79                 
Correct output: -17                 | Program output: 97                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: 78                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 44                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_invert_first_then_and})
Lexicase best program: (exec_dup_times () integer_empty boolean_flush boolean_stackdepth exec_dup_items exec_rot (exec_dup_times () exec_dup_items exec_rot (integer_rot integer_gt in1 boolean_dup_times boolean_stackdepth integer_pop print_integer exec_flush integer_eq boolean_invert_second_then_and) (exec_do*count (integer_pop exec_pop (boolean_or integer_shove boolean_or exec_when (exec_swap () () exec_while (in3) print_integer)) exec_do*count () integer_fromboolean exec_yankdup boolean_invert_first_then_and)) ()) () ())
Lexicase best errors: [0 1 0 1 0 1 1 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 50
Percent parens: 0.320
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_gt} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_when} {:close 2, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 1, :instruction in3} {:close 2, :instruction print_integer} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_yankdup} {:close 1, :instruction boolean_invert_first_then_and})
Zero cases best program: (exec_dup_times () integer_empty boolean_flush boolean_stackdepth exec_dup_items exec_rot (exec_dup_times () exec_dup_items exec_rot (integer_rot integer_gt in1 boolean_dup_times boolean_stackdepth integer_pop print_integer exec_flush integer_eq boolean_invert_second_then_and) (exec_do*count (integer_pop exec_pop (boolean_or integer_shove boolean_or exec_when (exec_swap () () exec_while (in3) print_integer)) exec_do*count () integer_fromboolean exec_yankdup boolean_invert_first_then_and)) ()) () ())
Zero cases best errors: [0 1 0 1 0 1 1 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 50
Percent parens: 0.320
--- Lexicase Population Statistics ---
Count of elite individuals by case: (660 264 660 265 939 1000 1000 2 2 660)
Population mean number of elite cases: 5.45
Count of perfect (error zero) individuals by case: (660 264 660 265 939 0 0 2 2 660)
Population mean number of perfect (error zero) cases: 3.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_add} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_yank} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_swap})
Best program: (integer_add exec_dup_items boolean_flush exec_yank exec_rot (boolean_dup_times boolean_stackdepth in1 boolean_dup_times boolean_stackdepth integer_pop) (print_integer boolean_yank exec_rot () (exec_do*count () integer_pop integer_eq exec_swap () ()) ()) ())
Errors: [0 1 0 1 0 1 1 1 1 0]
Total: 6
Mean: 0.6
Genome size: 18
Size: 28
Percent parens: 0.357
--- Population Statistics ---
Average total errors in population: 6.548
Median total errors in population: 6
Error averages by case: (0.34 0.736 0.34 0.735 0.061 1.0 1.0 0.998 0.998 0.34)
Error minima by case: (0 0 0 0 0 1 1 0 0 0)
Average genome size in population (length): 29.463
Average program size in population (points): 41.751
Average percent parens in population: 0.293
Minimum age in population: 98.31410286770549
Maximum age in population: 103.6927658962552
Average age in population: 101.7921784864912
Median age in population: 101.8794286859733
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 23
Genome diversity (% unique genomes):	 0.675
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.662
Total error diversity:				 0.004
Error (vector) diversity:			 0.006
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 38215925
--- Timings ---
Current time: 1559314503963 milliseconds
Total Time:         175.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       113.9 seconds, 65.1%
Fitness Testing:     33.1 seconds, 18.9%
Report:              27.9 seconds, 16.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
;;******************************
;; -*- Smallest problem report - generation 69
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -13                
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 64                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 73                 
Correct output: 23                  | Program output: 88                 
Correct output: 31                  | Program output: 87                 
Correct output: 20                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 59                 
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 29                 
Correct output: 10                  | Program output: 16                 
Correct output: 1                   | Program output: 30                 
Correct output: 34                  | Program output: 78                 
Correct output: 20                  | Program output: 41                 
Correct output: 9                   | Program output: 15                 
Correct output: 3                   | Program output: 72                 
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 18                 
Correct output: 46                  | Program output: 51                 
Correct output: -96                 | Program output: 82                 
Correct output: -61                 | Program output: -53                
Correct output: -78                 | Program output: 86                 
Correct output: -91                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: 98                 
Correct output: -60                 | Program output: 10                 
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: 97                 
Correct output: -76                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: 22                 
Correct output: -45                 | Program output: 97                 
Correct output: -56                 | Program output: 10                 
Correct output: -75                 | Program output: -1                 
Correct output: -87                 | Program output: -55                
Correct output: -81                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -3                 
Correct output: -54                 | Program output: -47                
Correct output: -95                 | Program output: 3                  
Correct output: -97                 | Program output: -21                
Correct output: -85                 | Program output: 73                 
Correct output: -81                 | Program output: 61                 
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: 24                 
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: 96                 
Correct output: -93                 | Program output: 59                 
Correct output: -62                 | Program output: -8                 
Correct output: -90                 | Program output: -1                 
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: 61                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: 87                 
Correct output: -23                 | Program output: -11                
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: 23                 
Correct output: -95                 | Program output: 33                 
Correct output: -82                 | Program output: 88                 
Correct output: -65                 | Program output: 4                  
Correct output: -36                 | Program output: 10                 
Correct output: -53                 | Program output: -4                 
Correct output: -34                 | Program output: 63                 
Correct output: -17                 | Program output: 54                 
Correct output: -82                 | Program output: -70                
Correct output: -49                 | Program output: -16                
Correct output: -54                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: 55                 
Correct output: -83                 | Program output: 38                 
Correct output: -63                 | Program output: 80                 
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction 2} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or})
Lexicase best program: (exec_dup_times () exec_dup_times () in2 boolean_flush boolean_stackdepth integer_pop exec_dup_times () in2 boolean_flush integer_dup integer_pop print_integer boolean_pop exec_rot (boolean_or exec_empty 2 integer_add boolean_dup_times integer_mult exec_flush integer_eq exec_rot () (exec_eq) (integer_pop integer_eq boolean_or)) () ())
Lexicase best errors: [1 1 1 0 0 1 0 1 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 37
Percent parens: 0.270
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 1, :instruction boolean_flush} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction 2} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_rot} {:close 1, :instruction exec_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or})
Zero cases best program: (exec_dup_times () exec_dup_times () in2 boolean_flush boolean_stackdepth integer_pop exec_dup_times () in2 boolean_flush integer_dup integer_pop print_integer boolean_pop exec_rot (boolean_or exec_empty 2 integer_add boolean_dup_times integer_mult exec_flush integer_eq exec_rot () (exec_eq) (integer_pop integer_eq boolean_or)) () ())
Zero cases best errors: [1 1 1 0 0 1 0 1 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 37
Percent parens: 0.270
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1000 2 399 192 192 1000 192 152 399 877)
Population mean number of elite cases: 4.41
Count of perfect (error zero) individuals by case: (0 2 399 192 192 0 192 152 399 877)
Population mean number of perfect (error zero) cases: 2.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_dup_times} {:close 0, :instruction in2} {:close 1, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction print_integer} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_empty} {:close 0, :instruction exec_flush} {:close 0, :instruction integer_eq} {:close 1, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_do*count} {:close 0, :instruction exec_k} {:close 0, :instruction integer_eq} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_shove} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_while} {:close 0, :instruction in3} {:close 2, :instruction boolean_dup_times} {:close 1, :instruction exec_do*count} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_stackdepth})
Best program: (exec_dup_times (in2 boolean_flush) boolean_stackdepth integer_pop print_integer boolean_pop exec_rot (boolean_or exec_empty boolean_swap print_integer boolean_pop exec_rot (exec_when (exec_empty boolean_swap exec_dup (boolean_dup_times integer_empty exec_flush integer_eq exec_s_when_autoconstructing () (exec_do*count (exec_k (integer_eq boolean_or integer_shove boolean_flush exec_when (exec_swap (exec_while (in3 boolean_dup_times)) (exec_do*count () integer_pop boolean_stackdepth))) ())) ()))) () ()) () ())
Errors: [1 1 1 0 0 1 0 1 1 0]
Total: 6
Mean: 0.6
Genome size: 37
Size: 58
Percent parens: 0.362
--- Population Statistics ---
Average total errors in population: 7.595
Median total errors in population: 7
Error averages by case: (1.0 0.998 0.601 0.808 0.808 1.0 0.808 0.848 0.601 0.123)
Error minima by case: (1 0 0 0 0 1 0 0 0 0)
Average genome size in population (length): 32.65
Average program size in population (points): 46.083
Average percent parens in population: 0.292
Minimum age in population: 99.31410286770549
Maximum age in population: 105.4792916991163
Average age in population: 103.3571341954711
Median age in population: 103.4129693384737
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 109
Genome diversity (% unique genomes):	 0.647
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 110
Syntactic diversity (% unique Push programs):	 0.641
Total error diversity:				 0.005
Error (vector) diversity:			 0.01
Behavioral diversity:				 0.076
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 38512634
--- Timings ---
Current time: 1559314506500 milliseconds
Total Time:         177.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       115.9 seconds, 65.3%
Fitness Testing:     33.4 seconds, 18.8%
Report:              28.1 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
;;******************************
;; -*- Smallest problem report - generation 70
Test total error for best: 521
Test mean error for best: 0.52100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 50                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 67                 
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 97                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 76                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 50                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 21                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 20                 
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 85                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 65                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 74                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 17                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 71                 
Correct output: -71                 | Program output: 76                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 62                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items boolean_pop boolean_dup_times boolean_stackdepth in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times boolean_stackdepth integer_shove print_integer exec_y_when_autoconstructing (exec_rot (exec_when (exec_empty boolean_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup boolean_empty exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items)))) () ()))
Lexicase best errors: [0 0 0 0 1 0 1 1 0 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 53
Percent parens: 0.208
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items boolean_pop boolean_dup_times boolean_stackdepth in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times boolean_stackdepth integer_shove print_integer exec_y_when_autoconstructing (exec_rot (exec_when (exec_empty boolean_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup boolean_empty exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items)))) () ()))
Zero cases best errors: [0 0 0 0 1 0 1 1 0 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 53
Percent parens: 0.208
--- Lexicase Population Statistics ---
Count of elite individuals by case: (24 367 390 383 10 367 401 12 383 351)
Population mean number of elite cases: 2.69
Count of perfect (error zero) individuals by case: (24 367 390 383 10 367 401 12 383 351)
Population mean number of perfect (error zero) cases: 2.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items boolean_pop boolean_dup_times boolean_stackdepth in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times boolean_stackdepth integer_shove print_integer exec_y_when_autoconstructing (exec_rot (exec_when (exec_empty boolean_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup boolean_empty exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items)))) () ()))
Errors: [0 0 0 0 1 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 42
Size: 53
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 7.312
Median total errors in population: 9
Error averages by case: (0.976 0.633 0.61 0.617 0.99 0.633 0.599 0.988 0.617 0.649)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.823
Average program size in population (points): 48.397
Average percent parens in population: 0.259
Minimum age in population: 101.6198741865911
Maximum age in population: 106.7924126973663
Average age in population: 104.9343913905205
Median age in population: 105.0930142849353
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 113
Genome diversity (% unique genomes):	 0.553
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 114
Syntactic diversity (% unique Push programs):	 0.547
Total error diversity:				 0.008
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 38851067
--- Timings ---
Current time: 1559314508927 milliseconds
Total Time:         179.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       117.7 seconds, 65.4%
Fitness Testing:     33.7 seconds, 18.7%
Report:              28.4 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
;;******************************
;; -*- Smallest problem report - generation 71
Test total error for best: 521
Test mean error for best: 0.52100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 50                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 67                 
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 97                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 76                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 50                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 21                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 20                 
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 85                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 65                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 74                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 17                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 71                 
Correct output: -71                 | Program output: 76                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 62                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items boolean_pop boolean_dup_times boolean_stackdepth in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times boolean_stackdepth integer_shove print_integer exec_y_when_autoconstructing (exec_rot (exec_when (exec_empty boolean_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup boolean_empty exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items)))) () ()))
Lexicase best errors: [0 0 0 1 1 0 0 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 53
Percent parens: 0.208
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items boolean_pop boolean_dup_times boolean_stackdepth in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times boolean_stackdepth integer_shove print_integer exec_y_when_autoconstructing (exec_rot (exec_when (exec_empty boolean_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup boolean_empty exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items)))) () ()))
Zero cases best errors: [0 0 0 1 1 0 0 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 53
Percent parens: 0.208
--- Lexicase Population Statistics ---
Count of elite individuals by case: (454 701 728 92 312 713 424 92 850 93)
Population mean number of elite cases: 4.46
Count of perfect (error zero) individuals by case: (454 701 728 92 312 713 424 92 850 93)
Population mean number of perfect (error zero) cases: 4.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items boolean_pop boolean_dup_times boolean_stackdepth in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times boolean_stackdepth integer_shove print_integer exec_y_when_autoconstructing (exec_rot (exec_when (exec_empty boolean_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup boolean_empty exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items)))) () ()))
Errors: [0 0 0 1 1 0 0 1 0 1]
Total: 4
Mean: 0.4
Genome size: 42
Size: 53
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 5.541
Median total errors in population: 5
Error averages by case: (0.546 0.299 0.272 0.908 0.688 0.287 0.576 0.908 0.15 0.907)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.602
Average program size in population (points): 51.532
Average percent parens in population: 0.233
Minimum age in population: 103.9831587393939
Maximum age in population: 108.366143774115
Average age in population: 106.8350429390863
Median age in population: 106.8971831218672
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 261
Genome diversity (% unique genomes):	 0.524
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 270
Syntactic diversity (% unique Push programs):	 0.508
Total error diversity:				 0.007
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.085
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 39224110
--- Timings ---
Current time: 1559314511166 milliseconds
Total Time:         182.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       119.4 seconds, 65.5%
Fitness Testing:     34.0 seconds, 18.7%
Report:              28.6 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
;;******************************
;; -*- Smallest problem report - generation 72
Test total error for best: 522
Test mean error for best: 0.52200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 44                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 83                 
Correct output: 0                   | Program output: 83                 
Correct output: 42                  | Program output: 78                 
Correct output: 23                  | Program output: 60                 
Correct output: 31                  | Program output: 97                 
Correct output: 20                  | Program output: 47                 
Correct output: 9                   | Program output: 26                 
Correct output: 16                  | Program output: 78                 
Correct output: 15                  | Program output: 22                 
Correct output: 2                   | Program output: 73                 
Correct output: 23                  | Program output: 95                 
Correct output: 10                  | Program output: 16                 
Correct output: 1                   | Program output: 91                 
Correct output: 34                  | Program output: 97                 
Correct output: 20                  | Program output: 82                 
Correct output: 9                   | Program output: 100                
Correct output: 3                   | Program output: 78                 
Correct output: 28                  | Program output: 81                 
Correct output: 14                  | Program output: 62                 
Correct output: 46                  | Program output: 47                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 34                 
Correct output: -84                 | Program output: -65                
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: -55                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: -93                
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: -10                
Correct output: -97                 | Program output: 52                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: 82                 
Correct output: -46                 | Program output: -42                
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -62                
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 100                
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 19                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -20                
Correct output: -61                 | Program output: -30                
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 41                 
Correct output: -34                 | Program output: 72                 
Correct output: -17                 | Program output: 86                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -54                
Correct output: -15                 | Program output: 36                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: -63                
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_dup_times () integer_dup_items in4 print_boolean integer_mult exec_rot (boolean_dup_times boolean_stackdepth in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times) () (boolean_stackdepth integer_shove) print_integer exec_y_when_autoconstructing (exec_rot (exec_when (exec_empty boolean_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup boolean_empty exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items)))) () ()))
Lexicase best errors: [0 0 0 0 0 0 0 1 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 56
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_dup_times () integer_dup_items in4 print_boolean integer_mult exec_rot (boolean_dup_times boolean_stackdepth in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times) () (boolean_stackdepth integer_shove) print_integer exec_y_when_autoconstructing (exec_rot (exec_when (exec_empty boolean_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup boolean_empty exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items)))) () ()))
Zero cases best errors: [0 0 0 0 0 0 0 1 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 56
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (846 938 921 860 589 562 169 344 1 172)
Population mean number of elite cases: 5.40
Count of perfect (error zero) individuals by case: (846 938 921 860 589 562 169 344 1 172)
Population mean number of perfect (error zero) cases: 5.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Best program: (exec_dup_times () integer_dup_items in4 boolean_flush integer_mult exec_rot (boolean_dup_times boolean_stackdepth in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times) () (boolean_stackdepth integer_shove) print_integer exec_y_when_autoconstructing (exec_rot (exec_when (exec_empty boolean_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup boolean_empty exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items)))) () ()))
Errors: [0 0 0 0 0 0 0 1 1 0]
Total: 2
Mean: 0.2
Genome size: 42
Size: 56
Percent parens: 0.250
--- Population Statistics ---
Average total errors in population: 4.598
Median total errors in population: 5
Error averages by case: (0.154 0.062 0.079 0.14 0.411 0.438 0.831 0.656 0.999 0.828)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.468
Average program size in population (points): 48.781
Average percent parens in population: 0.233
Minimum age in population: 104.9831587393939
Maximum age in population: 109.9749730673756
Average age in population: 108.1596979652292
Median age in population: 108.2012644448924
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 163
Genome diversity (% unique genomes):	 0.587
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 169
Syntactic diversity (% unique Push programs):	 0.572
Total error diversity:				 0.009
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 39520085
--- Timings ---
Current time: 1559314513316 milliseconds
Total Time:         184.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       121.0 seconds, 65.6%
Fitness Testing:     34.3 seconds, 18.6%
Report:              28.9 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
;;******************************
;; -*- Smallest problem report - generation 73
Test total error for best: 566
Test mean error for best: 0.56600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 67                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output:                    
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 042                
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output:                    
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 20                 
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 85                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: 35                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 65                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 74                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 17                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output:                    
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 60                 
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 71                 
Correct output: -71                 | Program output: 76                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 62                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_flush exec_dup_items boolean_pop boolean_dup_times boolean_stackdepth in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times boolean_stackdepth integer_shove print_integer exec_y_when_autoconstructing (exec_rot (exec_when (exec_empty boolean_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items))))) () ()))
Lexicase best errors: [0 0 1 1 0 0 0 0 1 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 60
Percent parens: 0.217
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_flush exec_dup_items boolean_pop boolean_dup_times boolean_stackdepth in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times boolean_stackdepth integer_shove print_integer exec_y_when_autoconstructing (exec_rot (exec_when (exec_empty boolean_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items))))) () ()))
Zero cases best errors: [0 0 1 1 0 0 0 0 1 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 60
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (269 775 80 1000 267 268 316 809 1000 56)
Population mean number of elite cases: 4.84
Count of perfect (error zero) individuals by case: (269 775 80 0 267 268 316 809 0 56)
Population mean number of perfect (error zero) cases: 2.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_flush exec_dup_items boolean_pop boolean_dup_times boolean_stackdepth in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times boolean_stackdepth integer_shove print_integer exec_y_when_autoconstructing (exec_rot (exec_when (exec_empty boolean_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items))))) () ()))
Errors: [0 0 1 1 0 0 0 0 1 0]
Total: 3
Mean: 0.3
Genome size: 47
Size: 60
Percent parens: 0.217
--- Population Statistics ---
Average total errors in population: 7.16
Median total errors in population: 8
Error averages by case: (0.731 0.225 0.92 1.0 0.733 0.732 0.684 0.191 1.0 0.944)
Error minima by case: (0 0 0 1 0 0 0 0 1 0)
Average genome size in population (length): 42.128
Average program size in population (points): 54.936
Average percent parens in population: 0.232
Minimum age in population: 107.4401709306305
Maximum age in population: 111.5288657521314
Average age in population: 109.9126815479683
Median age in population: 110.0209103869014
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 131
Genome diversity (% unique genomes):	 0.624
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 132
Syntactic diversity (% unique Push programs):	 0.606
Total error diversity:				 0.008
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.102
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 39849648
--- Timings ---
Current time: 1559314515643 milliseconds
Total Time:         186.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       122.6 seconds, 65.7%
Fitness Testing:     34.6 seconds, 18.5%
Report:              29.2 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 74
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 74
;;******************************
;; -*- Smallest problem report - generation 74
Test total error for best: 566
Test mean error for best: 0.56600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 67                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output:                    
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 042                
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output:                    
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 20                 
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 85                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: 35                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 65                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 74                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 17                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output:                    
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 60                 
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 71                 
Correct output: -71                 | Program output: 76                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 62                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_flush exec_dup_items boolean_pop boolean_dup_times boolean_stackdepth in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times boolean_stackdepth integer_shove print_integer exec_y_when_autoconstructing (exec_rot (exec_when (exec_empty boolean_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items))))) () ()))
Lexicase best errors: [0 1 0 1 0 1 1 0 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 60
Percent parens: 0.217
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_flush exec_dup_items boolean_pop boolean_dup_times boolean_stackdepth in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times boolean_stackdepth integer_shove print_integer exec_y_when_autoconstructing (exec_rot (exec_when (exec_empty boolean_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items))))) () ()))
Zero cases best errors: [0 1 0 1 0 1 1 0 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 60
Percent parens: 0.217
--- Lexicase Population Statistics ---
Count of elite individuals by case: (752 1000 636 1000 749 10 9 916 656 669)
Population mean number of elite cases: 6.40
Count of perfect (error zero) individuals by case: (752 0 636 0 749 10 9 916 656 669)
Population mean number of perfect (error zero) cases: 4.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction integer_rot} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Best program: (integer_rot in3 in4 boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_flush exec_dup_items boolean_pop boolean_dup_times boolean_stackdepth in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times boolean_stackdepth integer_shove print_integer exec_y_when_autoconstructing (exec_rot (exec_when (exec_empty boolean_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items))))) () ()))
Errors: [0 1 0 1 0 1 1 0 0 0]
Total: 4
Mean: 0.4
Genome size: 47
Size: 59
Percent parens: 0.203
--- Population Statistics ---
Average total errors in population: 5.603
Median total errors in population: 4
Error averages by case: (0.248 1.0 0.364 1.0 0.251 0.99 0.991 0.084 0.344 0.331)
Error minima by case: (0 1 0 1 0 0 0 0 0 0)
Average genome size in population (length): 45.343
Average program size in population (points): 58.103
Average percent parens in population: 0.220
Minimum age in population: 110.0947070672635
Maximum age in population: 112.7977985632159
Average age in population: 111.7554003014596
Median age in population: 111.6867864096975
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 358
Genome diversity (% unique genomes):	 0.511
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 369
Syntactic diversity (% unique Push programs):	 0.487
Total error diversity:				 0.007
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.124
--- Run Statistics ---
Number of program evaluations used so far: 75000
Number of point (instruction) evaluations so far: 40243880
--- Timings ---
Current time: 1559314518013 milliseconds
Total Time:         188.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       124.2 seconds, 65.8%
Fitness Testing:     35.0 seconds, 18.5%
Report:              29.6 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 74
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 75
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 75
;;******************************
;; -*- Smallest problem report - generation 75
Test total error for best: 518
Test mean error for best: 0.51800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 67                 
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 97                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 76                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 50                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 21                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 20                 
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 85                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 65                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 74                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 17                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 71                 
Correct output: -71                 | Program output: 76                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 62                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_dup_times () in3 boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_flush exec_dup_items boolean_pop boolean_dup_times boolean_stackdepth in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times boolean_stackdepth integer_shove print_integer exec_y_when_autoconstructing (exec_rot (exec_when (exec_empty boolean_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items))))) () ()))
Lexicase best errors: [1 0 0 0 1 0 0 1 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 59
Percent parens: 0.220
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_dup_times () in3 boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_flush exec_dup_items boolean_pop boolean_dup_times boolean_stackdepth in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times boolean_stackdepth integer_shove print_integer exec_y_when_autoconstructing (exec_rot (exec_when (exec_empty boolean_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items))))) () ()))
Zero cases best errors: [1 0 0 0 1 0 0 1 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 59
Percent parens: 0.220
--- Lexicase Population Statistics ---
Count of elite individuals by case: (2 898 411 878 1000 863 911 1000 38 879)
Population mean number of elite cases: 6.88
Count of perfect (error zero) individuals by case: (2 898 411 878 0 863 911 0 38 879)
Population mean number of perfect (error zero) cases: 4.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_s} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_pop boolean_dup_times boolean_stackdepth in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times boolean_stackdepth integer_shove print_integer exec_y_when_autoconstructing (exec_rot (exec_when (exec_empty boolean_swap exec_s () (boolean_dup_times exec_empty boolean_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items)))) ())) () ()))
Errors: [1 0 0 0 1 0 0 1 0 0]
Total: 3
Mean: 0.3
Genome size: 49
Size: 65
Percent parens: 0.246
--- Population Statistics ---
Average total errors in population: 5.12
Median total errors in population: 5
Error averages by case: (0.998 0.102 0.589 0.122 1.0 0.137 0.089 1.0 0.962 0.121)
Error minima by case: (0 0 0 0 1 0 0 1 0 0)
Average genome size in population (length): 46.145
Average program size in population (points): 59.258
Average percent parens in population: 0.221
Minimum age in population: 112.0480039778189
Maximum age in population: 114.4888003961026
Average age in population: 112.9729945705909
Median age in population: 113.2788657521314
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 238
Genome diversity (% unique genomes):	 0.563
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 252
Syntactic diversity (% unique Push programs):	 0.531
Total error diversity:				 0.008
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 76000
Number of point (instruction) evaluations so far: 40649951
--- Timings ---
Current time: 1559314520396 milliseconds
Total Time:         191.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       125.8 seconds, 65.8%
Fitness Testing:     35.4 seconds, 18.5%
Report:              30.0 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 75
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 76
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 76
;;******************************
;; -*- Smallest problem report - generation 76
Test total error for best: 534
Test mean error for best: 0.53400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 60                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output:                    
Correct output: 9                   | Program output: 67                 
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 1610               
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 97                 
Correct output: 20                  | Program output:                    
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 76                 
Correct output: 14                  | Program output:                    
Correct output: 46                  | Program output: 50                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 21                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74-74             
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 20                 
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 85                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 74                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 17                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output:                    
Correct output: -71                 | Program output: 76                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 62                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_pop boolean_dup_times exec_rot (in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times) () (boolean_stackdepth integer_shove) print_integer exec_y_when_autoconstructing (exec_rot (exec_when (exec_empty boolean_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items))))) () ()))
Lexicase best errors: [0 0 0 0 0 0 0 1 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 66
Percent parens: 0.242
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_pop boolean_dup_times exec_rot (in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times) () (boolean_stackdepth integer_shove) print_integer exec_y_when_autoconstructing (exec_rot (exec_when (exec_empty boolean_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items))))) () ()))
Zero cases best errors: [0 0 0 0 0 0 0 1 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 66
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (705 833 858 586 18 808 706 1000 840 808)
Population mean number of elite cases: 7.16
Count of perfect (error zero) individuals by case: (705 833 858 586 18 808 706 0 840 808)
Population mean number of perfect (error zero) cases: 6.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_pop boolean_dup_times exec_rot (in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times) () (boolean_stackdepth integer_shove) print_integer exec_y_when_autoconstructing (exec_rot (exec_when (exec_empty boolean_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items))))) () ()))
Errors: [0 0 0 0 0 0 0 1 0 0]
Total: 1
Mean: 0.1
Genome size: 50
Size: 66
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 3.838
Median total errors in population: 3
Error averages by case: (0.295 0.167 0.142 0.414 0.982 0.192 0.294 1.0 0.16 0.192)
Error minima by case: (0 0 0 0 0 0 0 1 0 0)
Average genome size in population (length): 45.173
Average program size in population (points): 58.841
Average percent parens in population: 0.232
Minimum age in population: 113.2788657521314
Maximum age in population: 115.7788657521314
Average age in population: 114.3341679978344
Median age in population: 114.2788657521314
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 95
Genome diversity (% unique genomes):	 0.533
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 101
Syntactic diversity (% unique Push programs):	 0.511
Total error diversity:				 0.01
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.137
--- Run Statistics ---
Number of program evaluations used so far: 77000
Number of point (instruction) evaluations so far: 41003487
--- Timings ---
Current time: 1559314522698 milliseconds
Total Time:         193.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       127.4 seconds, 65.8%
Fitness Testing:     35.7 seconds, 18.5%
Report:              30.3 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 76
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 77
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 77
;;******************************
;; -*- Smallest problem report - generation 77
Test total error for best: 534
Test mean error for best: 0.53400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 60                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output:                    
Correct output: 9                   | Program output: 67                 
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 1610               
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 97                 
Correct output: 20                  | Program output:                    
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 76                 
Correct output: 14                  | Program output:                    
Correct output: 46                  | Program output: 50                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 21                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74-74             
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 20                 
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 85                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 74                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 17                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output:                    
Correct output: -71                 | Program output: 76                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 62                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_pop boolean_dup_times exec_rot (in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times) () (boolean_stackdepth integer_shove) print_integer exec_y_when_autoconstructing (exec_rot (exec_when (exec_empty boolean_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items))))) () ()))
Lexicase best errors: [0 0 0 1 0 0 1 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 66
Percent parens: 0.242
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_pop boolean_dup_times exec_rot (in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times) () (boolean_stackdepth integer_shove) print_integer exec_y_when_autoconstructing (exec_rot (exec_when (exec_empty boolean_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items))))) () ()))
Zero cases best errors: [0 0 0 1 0 0 1 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 66
Percent parens: 0.242
--- Lexicase Population Statistics ---
Count of elite individuals by case: (864 872 868 24 749 745 1000 67 741 807)
Population mean number of elite cases: 6.74
Count of perfect (error zero) individuals by case: (864 872 868 24 749 745 0 67 741 807)
Population mean number of perfect (error zero) cases: 5.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_pop boolean_dup_times exec_rot (in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times) () (boolean_stackdepth integer_shove) print_integer exec_y_when_autoconstructing (exec_rot (exec_when (exec_empty boolean_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items))))) () ()))
Errors: [0 0 0 1 0 0 1 1 0 0]
Total: 3
Mean: 0.3
Genome size: 50
Size: 66
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 4.263
Median total errors in population: 3
Error averages by case: (0.136 0.128 0.132 0.976 0.251 0.255 1.0 0.933 0.259 0.193)
Error minima by case: (0 0 0 0 0 0 1 0 0 0)
Average genome size in population (length): 49.974
Average program size in population (points): 66.004
Average percent parens in population: 0.243
Minimum age in population: 115.7788657521314
Maximum age in population: 116.7788657521314
Average age in population: 116.2928657521314
Median age in population: 116.7788657521314
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 448
Genome diversity (% unique genomes):	 0.519
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 457
Syntactic diversity (% unique Push programs):	 0.508
Total error diversity:				 0.008
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.079
--- Run Statistics ---
Number of program evaluations used so far: 78000
Number of point (instruction) evaluations so far: 41390405
--- Timings ---
Current time: 1559314525083 milliseconds
Total Time:         196.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       129.0 seconds, 65.8%
Fitness Testing:     36.1 seconds, 18.4%
Report:              30.7 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 77
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 78
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 78
;;******************************
;; -*- Smallest problem report - generation 78
Test total error for best: 530
Test mean error for best: 0.53000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output:                    
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 67                 
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 97                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 76                 
Correct output: 14                  | Program output: 0                  
Correct output: 46                  | Program output: 50                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 21                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 20                 
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 85                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output:                    
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 74                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 17                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output:                    
Correct output: -71                 | Program output: 76                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 62                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_pop boolean_dup_times exec_rot (in1 boolean_dup_times exec_yankdup integer_flush boolean_yank integer_rot boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times) () (boolean_stackdepth integer_shove) print_integer exec_y_when_autoconstructing (exec_rot (exec_when (exec_empty boolean_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items))))))) () ()))
Lexicase best errors: [0 0 0 0 1 0 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 71
Percent parens: 0.254
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_pop boolean_dup_times exec_rot (in1 boolean_dup_times exec_yankdup integer_flush boolean_yank integer_rot boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times) () (boolean_stackdepth integer_shove) print_integer exec_y_when_autoconstructing (exec_rot (exec_when (exec_empty boolean_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items))))))) () ()))
Zero cases best errors: [0 0 0 0 1 0 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 71
Percent parens: 0.254
--- Lexicase Population Statistics ---
Count of elite individuals by case: (850 509 704 728 177 136 566 507 1 820)
Population mean number of elite cases: 5.00
Count of perfect (error zero) individuals by case: (850 509 704 728 177 136 566 507 1 820)
Population mean number of perfect (error zero) cases: 5.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_pop boolean_dup_times exec_rot (in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times exec_yankdup integer_flush) (boolean_yank in1 boolean_dup_times) () boolean_stackdepth integer_shove print_integer exec_y_when_autoconstructing (exec_rot (exec_when (exec_empty boolean_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items))))) () ()))
Errors: [0 0 0 0 1 0 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 50
Size: 66
Percent parens: 0.242
--- Population Statistics ---
Average total errors in population: 5.002
Median total errors in population: 4
Error averages by case: (0.15 0.491 0.296 0.272 0.823 0.864 0.434 0.493 0.999 0.18)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 50.208
Average program size in population (points): 66.407
Average percent parens in population: 0.244
Minimum age in population: 116.7788657521314
Maximum age in population: 118.7788657521314
Average age in population: 117.7133657521314
Median age in population: 117.7788657521314
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 190
Genome diversity (% unique genomes):	 0.647
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 194
Syntactic diversity (% unique Push programs):	 0.64
Total error diversity:				 0.009
Error (vector) diversity:			 0.049
Behavioral diversity:				 0.139
--- Run Statistics ---
Number of program evaluations used so far: 79000
Number of point (instruction) evaluations so far: 41804671
--- Timings ---
Current time: 1559314527462 milliseconds
Total Time:         198.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       130.6 seconds, 65.8%
Fitness Testing:     36.6 seconds, 18.4%
Report:              31.1 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 78
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 79
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 79
;;******************************
;; -*- Smallest problem report - generation 79
Test total error for best: 619
Test mean error for best: 0.61900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output:                    
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output:                    
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output:                    
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 90                 
Correct output: 23                  | Program output: 2323               
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 86                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 43                 
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output:                    
Correct output: 1                   | Program output: 52                 
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 70                 
Correct output: 3                   | Program output: 42                 
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -25                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: 55                 
Correct output: -84                 | Program output:                    
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output:                    
Correct output: -60                 | Program output: -60-60             
Correct output: -55                 | Program output:                    
Correct output: -42                 | Program output: -41                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output:                    
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: -38                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -33                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output:                    
Correct output: -54                 | Program output:                    
Correct output: -95                 | Program output:                    
Correct output: -97                 | Program output:                    
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output:                    
Correct output: -46                 | Program output: -42                
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93-93             
Correct output: -62                 | Program output:                    
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 85                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -25                
Correct output: -5                  | Program output:                    
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output:                    
Correct output: -61                 | Program output:                    
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -6                 
Correct output: -65                 | Program output:                    
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 60                 
Correct output: -34                 | Program output:                    
Correct output: -17                 | Program output:                    
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -12                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -54                
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output:                    
Correct output: -83                 | Program output: -83                
Correct output: -63                 | Program output: -63                
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_pop boolean_dup_times exec_rot (in1 in3 exec_yankdup integer_flush boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times) () (boolean_stackdepth integer_shove) print_integer exec_y_when_autoconstructing (exec_rot (exec_when (exec_empty boolean_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items))))) () ()))
Lexicase best errors: [0 0 1 0 1 1 1 1 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 6
Lexicase best mean error: 0.6
Lexicase best size: 74
Percent parens: 0.230
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_pop boolean_dup_times exec_rot (in1 in3 exec_yankdup integer_flush boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times) () (boolean_stackdepth integer_shove) print_integer exec_y_when_autoconstructing (exec_rot (exec_when (exec_empty boolean_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items))))) () ()))
Zero cases best errors: [0 0 1 0 1 1 1 1 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 4
Zero cases best total error: 6
Zero cases best mean error: 0.6
Zero cases best size: 74
Percent parens: 0.230
--- Lexicase Population Statistics ---
Count of elite individuals by case: (221 839 72 46 76 1000 80 6 624 1000)
Population mean number of elite cases: 3.96
Count of perfect (error zero) individuals by case: (221 839 72 46 76 0 80 6 624 0)
Population mean number of perfect (error zero) cases: 1.96
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_pop boolean_dup_times exec_rot (in1 in3 exec_yankdup integer_flush boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times) () (boolean_stackdepth integer_shove) print_integer exec_y_when_autoconstructing (exec_rot (exec_when (exec_empty boolean_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items))))) () ()))
Errors: [0 0 1 0 1 1 1 1 0 1]
Total: 6
Mean: 0.6
Genome size: 57
Size: 74
Percent parens: 0.230
--- Population Statistics ---
Average total errors in population: 8.036
Median total errors in population: 8
Error averages by case: (0.779 0.161 0.928 0.954 0.924 1.0 0.92 0.994 0.376 1.0)
Error minima by case: (0 0 0 0 0 1 0 0 0 1)
Average genome size in population (length): 49.02
Average program size in population (points): 65.017
Average percent parens in population: 0.247
Minimum age in population: 117.7788657521314
Maximum age in population: 120.7788657521314
Average age in population: 119.4468657521314
Median age in population: 119.2788657521314
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 95
Genome diversity (% unique genomes):	 0.558
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.554
Total error diversity:				 0.005
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.142
--- Run Statistics ---
Number of program evaluations used so far: 80000
Number of point (instruction) evaluations so far: 42217956
--- Timings ---
Current time: 1559314529980 milliseconds
Total Time:         200.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       132.2 seconds, 65.9%
Fitness Testing:     37.0 seconds, 18.4%
Report:              31.4 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 79
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 80
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 80
;;******************************
;; -*- Smallest problem report - generation 80
Test total error for best: 670
Test mean error for best: 0.67000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -13                
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 64                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 73                 
Correct output: 23                  | Program output: 88                 
Correct output: 31                  | Program output: 87                 
Correct output: 20                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 59                 
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 29                 
Correct output: 10                  | Program output: 16                 
Correct output: 1                   | Program output: 30                 
Correct output: 34                  | Program output: 78                 
Correct output: 20                  | Program output: 41                 
Correct output: 9                   | Program output: 15                 
Correct output: 3                   | Program output: 72                 
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 18                 
Correct output: 46                  | Program output: 51                 
Correct output: -96                 | Program output: 82                 
Correct output: -61                 | Program output: -53                
Correct output: -78                 | Program output: 86                 
Correct output: -91                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: 98                 
Correct output: -60                 | Program output: 10                 
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: 97                 
Correct output: -76                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: 22                 
Correct output: -45                 | Program output: 97                 
Correct output: -56                 | Program output: 10                 
Correct output: -75                 | Program output: -1                 
Correct output: -87                 | Program output: -55                
Correct output: -81                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -3                 
Correct output: -54                 | Program output: -47                
Correct output: -95                 | Program output: 3                  
Correct output: -97                 | Program output: -21                
Correct output: -85                 | Program output: 73                 
Correct output: -81                 | Program output: 61                 
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: 24                 
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: 96                 
Correct output: -93                 | Program output: 59                 
Correct output: -62                 | Program output: -8                 
Correct output: -90                 | Program output: -1                 
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: 61                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: 87                 
Correct output: -23                 | Program output: -11                
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: 23                 
Correct output: -95                 | Program output: 33                 
Correct output: -82                 | Program output: 88                 
Correct output: -65                 | Program output: 4                  
Correct output: -36                 | Program output: 10                 
Correct output: -53                 | Program output: -4                 
Correct output: -34                 | Program output: 63                 
Correct output: -17                 | Program output: 54                 
Correct output: -82                 | Program output: -70                
Correct output: -49                 | Program output: -16                
Correct output: -54                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: 55                 
Correct output: -83                 | Program output: 38                 
Correct output: -63                 | Program output: 80                 
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_pop boolean_dup_times exec_rot (in1 in3 exec_yankdup integer_flush boolean_yank in1 boolean_dup_times exec_yankdup print_integer exec_y_when_autoconstructing (exec_rot (exec_when (in2 boolean_invert_second_then_and exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times boolean_dup_items exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items))))) () ())) () ())
Lexicase best errors: [1 0 0 1 0 0 1 0 1 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 68
Percent parens: 0.250
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction in3} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_pop boolean_dup_times exec_rot (in1 in3 exec_yankdup integer_flush boolean_yank in1 boolean_dup_times exec_yankdup print_integer exec_y_when_autoconstructing (exec_rot (exec_when (in2 boolean_invert_second_then_and exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times boolean_dup_items exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items))))) () ())) () ())
Zero cases best errors: [1 0 0 1 0 0 1 0 1 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 68
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (143 11 11 20 298 485 62 319 65 11)
Population mean number of elite cases: 1.42
Count of perfect (error zero) individuals by case: (143 11 11 20 298 485 62 319 65 11)
Population mean number of perfect (error zero) cases: 1.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_s} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Best program: (exec_s () (in3 in4 boolean_flush exec_dup_items exec_dup_times () exec_y_when_autoconstructing (in4 boolean_pop boolean_dup_times exec_rot (in1 boolean_dup_times exec_yankdup integer_flush in1 boolean_dup_times exec_yankdup integer_flush) (boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times) () boolean_stackdepth integer_shove) boolean_stackdepth integer_shove) (print_integer exec_y_when_autoconstructing (exec_rot (exec_when (in2 boolean_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times boolean_dup_items exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items))))) () ())))
Errors: [1 0 0 1 0 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 56
Size: 75
Percent parens: 0.253
--- Population Statistics ---
Average total errors in population: 8.575
Median total errors in population: 8
Error averages by case: (0.857 0.989 0.989 0.98 0.702 0.515 0.938 0.681 0.935 0.989)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 54.196
Average program size in population (points): 70.951
Average percent parens in population: 0.237
Minimum age in population: 119.5288657521314
Maximum age in population: 122.4038657521314
Average age in population: 121.0044907521314
Median age in population: 121.2788657521314
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 194
Genome diversity (% unique genomes):	 0.562
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 197
Syntactic diversity (% unique Push programs):	 0.556
Total error diversity:				 0.007
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.163
--- Run Statistics ---
Number of program evaluations used so far: 81000
Number of point (instruction) evaluations so far: 42682649
--- Timings ---
Current time: 1559314532266 milliseconds
Total Time:         203.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       133.8 seconds, 65.8%
Fitness Testing:     37.4 seconds, 18.4%
Report:              32.0 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 80
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 81
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 81
;;******************************
;; -*- Smallest problem report - generation 81
Test total error for best: 556
Test mean error for best: 0.55600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 5050               
Correct output: 35                  | Program output: 0                  
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 67                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 1010               
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 9734               
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output:                    
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 21                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 20                 
Correct output: -42                 | Program output: -42-42             
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 85                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output:                    
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 10                 
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output:                    
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 74                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20-20             
Correct output: -5                  | Program output: 17                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output:                    
Correct output: -71                 | Program output: 76                 
Correct output: -15                 | Program output: 3                  
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_pop boolean_dup_times exec_s_when_autoconstructing (in1 boolean_dup_times exec_yankdup boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank integer_min in1 boolean_dup_times) () (boolean_stackdepth integer_yank) print_integer exec_y_when_autoconstructing (exec_rot (exec_when (exec_empty boolean_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items))))) () ()))
Lexicase best errors: [0 0 0 1 0 0 0 1 0 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 69
Percent parens: 0.232
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_pop boolean_dup_times exec_s_when_autoconstructing (in1 boolean_dup_times exec_yankdup boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank integer_min in1 boolean_dup_times) () (boolean_stackdepth integer_yank) print_integer exec_y_when_autoconstructing (exec_rot (exec_when (exec_empty boolean_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items))))) () ()))
Zero cases best errors: [0 0 0 1 0 0 0 1 0 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 69
Percent parens: 0.232
--- Lexicase Population Statistics ---
Count of elite individuals by case: (839 380 157 108 368 159 158 445 910 386)
Population mean number of elite cases: 3.91
Count of perfect (error zero) individuals by case: (839 380 157 108 368 159 158 445 910 386)
Population mean number of perfect (error zero) cases: 3.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction print_boolean} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items boolean_flush exec_dup_items exec_dup_times () in3 print_boolean boolean_flush boolean_pop boolean_dup_times exec_rot (in1 boolean_dup_times exec_yankdup integer_flush in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times) () (boolean_stackdepth integer_shove) boolean_stackdepth integer_shove print_integer exec_y_when_autoconstructing (exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items)))))
Errors: [0 0 0 1 0 0 0 1 0 0]
Total: 2
Mean: 0.2
Genome size: 55
Size: 67
Percent parens: 0.179
--- Population Statistics ---
Average total errors in population: 6.09
Median total errors in population: 7
Error averages by case: (0.161 0.62 0.843 0.892 0.632 0.841 0.842 0.555 0.09 0.614)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.329
Average program size in population (points): 73.771
Average percent parens in population: 0.236
Minimum age in population: 121.4038657521314
Maximum age in population: 124.2788657521314
Average age in population: 122.8323032521314
Median age in population: 122.8413657521314
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 88
Genome diversity (% unique genomes):	 0.582
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 92
Syntactic diversity (% unique Push programs):	 0.575
Total error diversity:				 0.009
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.151
--- Run Statistics ---
Number of program evaluations used so far: 82000
Number of point (instruction) evaluations so far: 43198296
--- Timings ---
Current time: 1559314534775 milliseconds
Total Time:         205.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       135.4 seconds, 65.8%
Fitness Testing:     37.9 seconds, 18.4%
Report:              32.2 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 81
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 82
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 82
;;******************************
;; -*- Smallest problem report - generation 82
Test total error for best: 545
Test mean error for best: 0.54500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 64                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 73                 
Correct output: 23                  | Program output: 88                 
Correct output: 31                  | Program output: 87                 
Correct output: 20                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 59                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 29                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 30                 
Correct output: 34                  | Program output: 78                 
Correct output: 20                  | Program output: 41                 
Correct output: 9                   | Program output: 15                 
Correct output: 3                   | Program output: 72                 
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 51                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -73                
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: -3                 
Correct output: -54                 | Program output: -47                
Correct output: -95                 | Program output: 3                  
Correct output: -97                 | Program output: -21                
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: 24                 
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -8                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -11                
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -4                 
Correct output: -34                 | Program output: 63                 
Correct output: -17                 | Program output: 54                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: 55                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 80                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items exec_dup_times () exec_y_when_autoconstructing (in4 boolean_pop boolean_dup_times exec_rot (boolean_or integer_pop exec_yankdup integer_flush boolean_dup_times boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times) () (boolean_stackdepth integer_shove) boolean_stackdepth integer_shove) integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items))))) () ()))
Lexicase best errors: [0 0 0 0 1 1 0 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 76
Percent parens: 0.224
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items exec_dup_times () exec_y_when_autoconstructing (in4 boolean_pop boolean_dup_times exec_rot (boolean_or integer_pop exec_yankdup integer_flush boolean_dup_times boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times) () (boolean_stackdepth integer_shove) boolean_stackdepth integer_shove) integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items))))) () ()))
Zero cases best errors: [0 0 0 0 1 1 0 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 76
Percent parens: 0.224
--- Lexicase Population Statistics ---
Count of elite individuals by case: (57 887 909 676 455 190 263 32 31 37)
Population mean number of elite cases: 3.54
Count of perfect (error zero) individuals by case: (57 887 909 676 455 190 263 32 31 37)
Population mean number of perfect (error zero) cases: 3.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items exec_dup_times () exec_y_when_autoconstructing (in4 boolean_pop boolean_dup_times exec_rot (boolean_or integer_pop exec_yankdup integer_flush boolean_dup_times boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times) () (boolean_stackdepth integer_shove) boolean_stackdepth integer_shove) integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items))))) () ()))
Errors: [0 0 0 0 1 1 0 0 0 1]
Total: 3
Mean: 0.3
Genome size: 59
Size: 76
Percent parens: 0.224
--- Population Statistics ---
Average total errors in population: 6.463
Median total errors in population: 6
Error averages by case: (0.943 0.113 0.091 0.324 0.545 0.81 0.737 0.968 0.969 0.963)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 55.913
Average program size in population (points): 72.982
Average percent parens in population: 0.233
Minimum age in population: 122.7788657521314
Maximum age in population: 125.5288657521314
Average age in population: 124.2388657521314
Median age in population: 124.2788657521314
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 142
Genome diversity (% unique genomes):	 0.672
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 149
Syntactic diversity (% unique Push programs):	 0.666
Total error diversity:				 0.008
Error (vector) diversity:			 0.054
Behavioral diversity:				 0.254
--- Run Statistics ---
Number of program evaluations used so far: 83000
Number of point (instruction) evaluations so far: 43660754
--- Timings ---
Current time: 1559314537212 milliseconds
Total Time:         208.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       136.9 seconds, 65.8%
Fitness Testing:     38.4 seconds, 18.5%
Report:              32.6 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 82
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 83
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 83
;;******************************
;; -*- Smallest problem report - generation 83
Test total error for best: 530
Test mean error for best: 0.53000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 64                 
Correct output: 0                   | Program output: 29                 
Correct output: 42                  | Program output: 73                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 59                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 29                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 30                 
Correct output: 34                  | Program output: 78                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 15                 
Correct output: 3                   | Program output: 72                 
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 51                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -73                
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: -3                 
Correct output: -54                 | Program output: -47                
Correct output: -95                 | Program output: 3                  
Correct output: -97                 | Program output: -21                
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: 24                 
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -8                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -11                
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -4                 
Correct output: -34                 | Program output: 63                 
Correct output: -17                 | Program output: 54                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 55                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 80                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 1, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items exec_dup_times () in1 integer_flush boolean_dup_times boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times boolean_stackdepth integer_shove boolean_stackdepth integer_shove integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items))))) () ()))
Lexicase best errors: [0 0 0 1 0 0 1 0 0 1]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 65
Percent parens: 0.200
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 1, :instruction in1} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items exec_dup_times () in1 integer_flush boolean_dup_times boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times boolean_stackdepth integer_shove boolean_stackdepth integer_shove integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items))))) () ()))
Zero cases best errors: [0 0 0 1 0 0 1 0 0 1]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 65
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (266 626 636 189 248 288 13 592 901 15)
Population mean number of elite cases: 3.77
Count of perfect (error zero) individuals by case: (266 626 636 189 248 288 13 592 901 15)
Population mean number of perfect (error zero) cases: 3.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_rot} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items exec_dup_times () exec_y_when_autoconstructing (in4 boolean_pop exec_dup_items exec_rot (boolean_or integer_pop exec_yankdup integer_flush boolean_dup_times boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times) () (boolean_stackdepth integer_shove) boolean_stackdepth integer_shove) integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items))))) () ()))
Errors: [0 0 0 1 0 0 1 0 0 1]
Total: 3
Mean: 0.3
Genome size: 59
Size: 76
Percent parens: 0.224
--- Population Statistics ---
Average total errors in population: 6.226
Median total errors in population: 6
Error averages by case: (0.734 0.374 0.364 0.811 0.752 0.712 0.987 0.408 0.099 0.985)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 57.073
Average program size in population (points): 74.119
Average percent parens in population: 0.229
Minimum age in population: 123.7788657521314
Maximum age in population: 127.5288657521314
Average age in population: 125.7613032521314
Median age in population: 125.7788657521314
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 135
Genome diversity (% unique genomes):	 0.614
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 136
Syntactic diversity (% unique Push programs):	 0.609
Total error diversity:				 0.008
Error (vector) diversity:			 0.065
Behavioral diversity:				 0.205
--- Run Statistics ---
Number of program evaluations used so far: 84000
Number of point (instruction) evaluations so far: 44111262
--- Timings ---
Current time: 1559314539660 milliseconds
Total Time:         210.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       138.6 seconds, 65.8%
Fitness Testing:     38.8 seconds, 18.4%
Report:              33.0 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 83
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 84
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 84
;;******************************
;; -*- Smallest problem report - generation 84
Test total error for best: 647
Test mean error for best: 0.64700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output:                    
Correct output: -13                 | Program output: -13                
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output:                    
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 83                 
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 88                 
Correct output: 31                  | Program output: 97                 
Correct output: 20                  | Program output:                    
Correct output: 9                   | Program output: 67                 
Correct output: 16                  | Program output: 78                 
Correct output: 15                  | Program output:                    
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output:                    
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 78                 
Correct output: 20                  | Program output: 41                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 76                 
Correct output: 14                  | Program output:                    
Correct output: 46                  | Program output: 50                 
Correct output: -96                 | Program output: 82                 
Correct output: -61                 | Program output: -53                
Correct output: -78                 | Program output: 86                 
Correct output: -91                 | Program output: 0                  
Correct output: -95                 | Program output: 21                 
Correct output: -84                 | Program output: -65                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: 98                 
Correct output: -60                 | Program output:                    
Correct output: -55                 | Program output: -55                
Correct output: -42                 | Program output: 97                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -93                
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: 22                 
Correct output: -45                 | Program output:                    
Correct output: -56                 | Program output:                    
Correct output: -75                 | Program output: -1                 
Correct output: -87                 | Program output: -55                
Correct output: -81                 | Program output: 44                 
Correct output: -90                 | Program output:                    
Correct output: -64                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: -95                 | Program output: -10                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: 73                 
Correct output: -81                 | Program output: 61                 
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: -42                
Correct output: -78                 | Program output: 96                 
Correct output: -93                 | Program output: 59                 
Correct output: -62                 | Program output: -62                
Correct output: -90                 | Program output: -1                 
Correct output: -70                 | Program output: 74                 
Correct output: -28                 | Program output:                    
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: 17                 
Correct output: -45                 | Program output:                    
Correct output: -23                 | Program output: -20                
Correct output: -61                 | Program output: -30                
Correct output: -55                 | Program output:                    
Correct output: -95                 | Program output:                    
Correct output: -82                 | Program output: 88                 
Correct output: -65                 | Program output: 4                  
Correct output: -36                 | Program output:                    
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -70                
Correct output: -49                 | Program output: -16                
Correct output: -54                 | Program output: -36                
Correct output: -71                 | Program output: -54                
Correct output: -15                 | Program output:                    
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: 38                 
Correct output: -63                 | Program output: -63                
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_pop exec_do*times (exec_s_when_autoconstructing (in1 boolean_dup_times exec_yankdup boolean_dup_times exec_yankdup in4 boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank integer_min in1 boolean_dup_times) () (boolean_stackdepth boolean_dup_times)) boolean_stackdepth integer_shove boolean_stackdepth integer_shove integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items))))) () ()))
Lexicase best errors: [1 1 0 0 1 1 0 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 77
Percent parens: 0.221
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_pop exec_do*times (exec_s_when_autoconstructing (in1 boolean_dup_times exec_yankdup boolean_dup_times exec_yankdup in4 boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank integer_min in1 boolean_dup_times) () (boolean_stackdepth boolean_dup_times)) boolean_stackdepth integer_shove boolean_stackdepth integer_shove integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items))))) () ()))
Zero cases best errors: [1 1 0 0 1 1 0 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 77
Percent parens: 0.221
--- Lexicase Population Statistics ---
Count of elite individuals by case: (24 254 149 157 614 403 887 269 31 33)
Population mean number of elite cases: 2.82
Count of perfect (error zero) individuals by case: (24 254 149 157 614 403 887 269 31 33)
Population mean number of perfect (error zero) cases: 2.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_pop exec_do*times (exec_s_when_autoconstructing (in1 boolean_dup_times exec_yankdup boolean_dup_times exec_yankdup in4 boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank integer_min in1 boolean_dup_times) () (boolean_stackdepth boolean_dup_times)) boolean_stackdepth integer_shove boolean_stackdepth integer_shove integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items))))) () ()))
Errors: [1 1 0 0 1 1 0 0 0 0]
Total: 4
Mean: 0.4
Genome size: 60
Size: 77
Percent parens: 0.221
--- Population Statistics ---
Average total errors in population: 7.179
Median total errors in population: 7
Error averages by case: (0.976 0.746 0.851 0.843 0.386 0.597 0.113 0.731 0.969 0.967)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 56.054
Average program size in population (points): 71.958
Average percent parens in population: 0.221
Minimum age in population: 125.0288657521314
Maximum age in population: 128.9038657521314
Average age in population: 127.4267720021314
Median age in population: 127.5288657521314
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 57
Genome diversity (% unique genomes):	 0.633
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.621
Total error diversity:				 0.007
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.145
--- Run Statistics ---
Number of program evaluations used so far: 85000
Number of point (instruction) evaluations so far: 44604916
--- Timings ---
Current time: 1559314542200 milliseconds
Total Time:         213.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       140.2 seconds, 65.8%
Fitness Testing:     39.3 seconds, 18.4%
Report:              33.4 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 84
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 85
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 85
;;******************************
;; -*- Smallest problem report - generation 85
Test total error for best: 565
Test mean error for best: 0.56500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -7                 
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 64                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 73                 
Correct output: 23                  | Program output: 88                 
Correct output: 31                  | Program output: 87                 
Correct output: 20                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 59                 
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 29                 
Correct output: 10                  | Program output: 16                 
Correct output: 1                   | Program output: 30                 
Correct output: 34                  | Program output: 78                 
Correct output: 20                  | Program output: 41                 
Correct output: 9                   | Program output: 15                 
Correct output: 3                   | Program output: 72                 
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 18                 
Correct output: 46                  | Program output: 51                 
Correct output: -96                 | Program output: 82                 
Correct output: -61                 | Program output: -53                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -66                
Correct output: -74                 | Program output: 98                 
Correct output: -60                 | Program output: 10                 
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: 97                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: 22                 
Correct output: -45                 | Program output: 97                 
Correct output: -56                 | Program output: 10                 
Correct output: -75                 | Program output: -1                 
Correct output: -87                 | Program output: -55                
Correct output: -81                 | Program output: 44                 
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: -19                
Correct output: -75                 | Program output: -43                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: 61                 
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: 59                 
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: 87                 
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: 88                 
Correct output: -65                 | Program output: 4                  
Correct output: -36                 | Program output: 10                 
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -70                
Correct output: -49                 | Program output: -16                
Correct output: -54                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: 55                 
Correct output: -83                 | Program output: 38                 
Correct output: -63                 | Program output: 80                 
Correct output: -87                 | Program output: -9                 
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items boolean_or exec_stackdepth exec_yankdup integer_flush boolean_dup_times boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times boolean_stackdepth integer_shove boolean_stackdepth integer_shove integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_do*times (in2 integer_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (integer_inc integer_dup_items exec_flush) exec_when () integer_inc integer_dup_items exec_flush exec_when (exec_empty) boolean_swap exec_dup (boolean_flush boolean_not exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items))))) () ()))
Lexicase best errors: [0 0 0 0 1 0 0 1 1 0]
Lexicase best number of elite cases: 7
Lexicase best total error: 3
Lexicase best mean error: 0.3
Lexicase best size: 79
Percent parens: 0.190
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 1, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items boolean_or exec_stackdepth exec_yankdup integer_flush boolean_dup_times boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times boolean_stackdepth integer_shove boolean_stackdepth integer_shove integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_do*times (in2 integer_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (integer_inc integer_dup_items exec_flush) exec_when () integer_inc integer_dup_items exec_flush exec_when (exec_empty) boolean_swap exec_dup (boolean_flush boolean_not exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items))))) () ()))
Zero cases best errors: [0 0 0 0 1 0 0 1 1 0]
Zero cases best number of elite cases: 7
Zero cases best number of zero cases: 7
Zero cases best total error: 3
Zero cases best mean error: 0.3
Zero cases best size: 79
Percent parens: 0.190
--- Lexicase Population Statistics ---
Count of elite individuals by case: (211 469 462 214 351 670 90 157 350 242)
Population mean number of elite cases: 3.22
Count of perfect (error zero) individuals by case: (211 469 462 214 351 670 90 157 350 242)
Population mean number of perfect (error zero) cases: 3.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_do*times} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items boolean_or exec_stackdepth exec_yankdup integer_flush boolean_dup_times boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times boolean_stackdepth integer_shove boolean_stackdepth integer_shove integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_do*times (in2 integer_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (integer_inc integer_dup_items exec_flush) exec_when (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items)))))) () ()))
Errors: [0 0 0 0 1 0 0 1 1 0]
Total: 3
Mean: 0.3
Genome size: 64
Size: 79
Percent parens: 0.190
--- Population Statistics ---
Average total errors in population: 6.784
Median total errors in population: 7
Error averages by case: (0.789 0.531 0.538 0.786 0.649 0.33 0.91 0.843 0.65 0.758)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 59.699
Average program size in population (points): 76.147
Average percent parens in population: 0.216
Minimum age in population: 126.2788657521314
Maximum age in population: 130.8569907521314
Average age in population: 129.4619048146314
Median age in population: 129.5913657521314
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 98
Genome diversity (% unique genomes):	 0.657
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 99
Syntactic diversity (% unique Push programs):	 0.65
Total error diversity:				 0.008
Error (vector) diversity:			 0.057
Behavioral diversity:				 0.196
--- Run Statistics ---
Number of program evaluations used so far: 86000
Number of point (instruction) evaluations so far: 44995870
--- Timings ---
Current time: 1559314544584 milliseconds
Total Time:         215.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       141.9 seconds, 65.8%
Fitness Testing:     39.7 seconds, 18.4%
Report:              33.9 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 85
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 86
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 86
;;******************************
;; -*- Smallest problem report - generation 86
Test total error for best: 553
Test mean error for best: 0.55300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 50                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 16                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 97                 
Correct output: 20                  | Program output: 60                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 76                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -73                
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: 98                 
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: 20                 
Correct output: -56                 | Program output: 16                 
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -20                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: -3                 
Correct output: -54                 | Program output: -47                
Correct output: -95                 | Program output: 3                  
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: 51                 
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -8                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 74                 
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: 6                  
Correct output: -23                 | Program output: -11                
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -4                 
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: 8                  
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 55                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max})
Lexicase best program: (exec_dup_times () exec_dup_times () in3 in4 boolean_flush exec_dup_items boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_pop boolean_dup_times exec_s_when_autoconstructing (boolean_dup boolean_dup_times boolean_or) (boolean_dup_times exec_yankdup integer_flush exec_yankdup integer_flush boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times) () boolean_stackdepth integer_shove boolean_stackdepth integer_shove integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not integer_max)))))) () ()))
Lexicase best errors: [0 0 0 0 0 1 0 0 1 0]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 90
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max})
Zero cases best program: (exec_dup_times () exec_dup_times () in3 in4 boolean_flush exec_dup_items boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_pop boolean_dup_times exec_s_when_autoconstructing (boolean_dup boolean_dup_times boolean_or) (boolean_dup_times exec_yankdup integer_flush exec_yankdup integer_flush boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times) () boolean_stackdepth integer_shove boolean_stackdepth integer_shove integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not integer_max)))))) () ()))
Zero cases best errors: [0 0 0 0 0 1 0 0 1 0]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 90
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (273 313 255 160 52 371 763 357 239 577)
Population mean number of elite cases: 3.36
Count of perfect (error zero) individuals by case: (273 313 255 160 52 371 763 357 239 577)
Population mean number of perfect (error zero) cases: 3.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max})
Best program: (exec_dup_times () exec_dup_times () in3 in4 boolean_flush exec_dup_items boolean_flush exec_dup_items exec_dup_times () in3 in4 exec_stackdepth boolean_dup_times exec_s_when_autoconstructing (boolean_dup boolean_dup_times boolean_or boolean_dup_times exec_yankdup integer_flush exec_yankdup integer_flush boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times) () (boolean_stackdepth integer_shove) boolean_stackdepth integer_shove integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not integer_max)))))) () ()))
Errors: [0 0 0 0 0 1 0 0 1 0]
Total: 2
Mean: 0.2
Genome size: 71
Size: 90
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 6.64
Median total errors in population: 8
Error averages by case: (0.727 0.687 0.745 0.84 0.948 0.629 0.237 0.643 0.761 0.423)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.962
Average program size in population (points): 81.243
Average percent parens in population: 0.212
Minimum age in population: 129.0288657521314
Maximum age in population: 132.3179282521314
Average age in population: 131.1426098927564
Median age in population: 131.2691001271314
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 73
Genome diversity (% unique genomes):	 0.701
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 75
Syntactic diversity (% unique Push programs):	 0.685
Total error diversity:				 0.009
Error (vector) diversity:			 0.066
Behavioral diversity:				 0.186
--- Run Statistics ---
Number of program evaluations used so far: 87000
Number of point (instruction) evaluations so far: 45426075
--- Timings ---
Current time: 1559314547091 milliseconds
Total Time:         217.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       143.6 seconds, 65.9%
Fitness Testing:     40.1 seconds, 18.4%
Report:              34.2 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 86
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 87
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 87
;;******************************
;; -*- Smallest problem report - generation 87
Test total error for best: 479
Test mean error for best: 0.47900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 44                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 26                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 22                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 97                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 81                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -25                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: 21                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 20                 
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: -38                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -33                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: -42                
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 100                
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 19                 
Correct output: -45                 | Program output: 6                  
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -6                 
Correct output: -65                 | Program output: 7                  
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -12                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -54                
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: -63                
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max})
Lexicase best program: (exec_dup_times () exec_dup_times () in3 in4 boolean_flush exec_dup_items boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_pop in3 exec_s_when_autoconstructing (boolean_dup boolean_dup_times boolean_or boolean_dup_times exec_yankdup integer_flush exec_yankdup in3 boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times) () (boolean_stackdepth integer_shove) boolean_stackdepth integer_shove integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not integer_max)))))) () ()))
Lexicase best errors: [0 0 0 1 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 90
Percent parens: 0.211
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max})
Zero cases best program: (exec_dup_times () exec_dup_times () in3 in4 boolean_flush exec_dup_items boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_pop in3 exec_s_when_autoconstructing (boolean_dup boolean_dup_times boolean_or boolean_dup_times exec_yankdup integer_flush exec_yankdup in3 boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times) () (boolean_stackdepth integer_shove) boolean_stackdepth integer_shove integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not integer_max)))))) () ()))
Zero cases best errors: [0 0 0 1 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 90
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (789 12 921 40 492 582 688 775 466 778)
Population mean number of elite cases: 5.54
Count of perfect (error zero) individuals by case: (789 12 921 40 492 582 688 775 466 778)
Population mean number of perfect (error zero) cases: 5.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max})
Best program: (exec_dup_times () exec_dup_times () in3 in4 boolean_flush exec_dup_items boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_pop in3 exec_s_when_autoconstructing (boolean_dup boolean_dup_times boolean_or boolean_dup_times exec_yankdup integer_flush exec_yankdup in3 boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times) () (boolean_stackdepth integer_shove) boolean_stackdepth integer_shove integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not integer_max)))))) () ()))
Errors: [0 0 0 1 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 71
Size: 90
Percent parens: 0.211
--- Population Statistics ---
Average total errors in population: 4.457
Median total errors in population: 3
Error averages by case: (0.211 0.988 0.079 0.96 0.508 0.418 0.312 0.225 0.534 0.222)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 63.135
Average program size in population (points): 80.475
Average percent parens in population: 0.216
Minimum age in population: 131.3179282521314
Maximum age in population: 133.9429282521314
Average age in population: 132.6319477833814
Median age in population: 132.7632407521314
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 50
Genome diversity (% unique genomes):	 0.626
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.619
Total error diversity:				 0.01
Error (vector) diversity:			 0.069
Behavioral diversity:				 0.263
--- Run Statistics ---
Number of program evaluations used so far: 88000
Number of point (instruction) evaluations so far: 45944912
--- Timings ---
Current time: 1559314549625 milliseconds
Total Time:         220.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       145.2 seconds, 65.9%
Fitness Testing:     40.5 seconds, 18.4%
Report:              34.6 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 87
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 88
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 88
;;******************************
;; -*- Smallest problem report - generation 88
Test total error for best: 564
Test mean error for best: 0.56400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 4                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 44                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -13                
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 6                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 67                 
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 97                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 46                 
Correct output: -96                 | Program output: 82                 
Correct output: -61                 | Program output: -25                
Correct output: -78                 | Program output: 86                 
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: 21                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: 98                 
Correct output: -60                 | Program output: 10                 
Correct output: -55                 | Program output: -55                
Correct output: -42                 | Program output: 97                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: 22                 
Correct output: -45                 | Program output: 98                 
Correct output: -56                 | Program output: 10                 
Correct output: -75                 | Program output: -1                 
Correct output: -87                 | Program output: -55                
Correct output: -81                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -33                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: 73                 
Correct output: -81                 | Program output: 61                 
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: -42                
Correct output: -78                 | Program output: 96                 
Correct output: -93                 | Program output: 59                 
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -1                 
Correct output: -70                 | Program output: 74                 
Correct output: -28                 | Program output: 61                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: 17                 
Correct output: -45                 | Program output: 6                  
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: 23                 
Correct output: -95                 | Program output: 33                 
Correct output: -82                 | Program output: -6                 
Correct output: -65                 | Program output: 7                  
Correct output: -36                 | Program output: 10                 
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -70                
Correct output: -49                 | Program output: -12                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -54                
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: 38                 
Correct output: -63                 | Program output: -63                
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max})
Lexicase best program: (exec_dup_times () exec_dup_times () in3 in4 boolean_flush exec_dup_items boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_pop in3 exec_s_when_autoconstructing (boolean_dup boolean_dup_times boolean_or boolean_dup_times exec_yankdup integer_flush exec_yankdup in3 boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times) () (boolean_stackdepth integer_shove) boolean_stackdepth integer_shove integer_dup_times exec_y_when_autoconstructing (exec_rot (in1 boolean_dup_times) () (boolean_stackdepth integer_shove) boolean_stackdepth integer_shove) integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not integer_max)))))) () ()))
Lexicase best errors: [0 0 1 0 0 0 0 1 1 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 103
Percent parens: 0.223
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max})
Zero cases best program: (exec_dup_times () exec_dup_times () in3 in4 boolean_flush exec_dup_items boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_pop in3 exec_s_when_autoconstructing (boolean_dup boolean_dup_times boolean_or boolean_dup_times exec_yankdup integer_flush exec_yankdup in3 boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times) () (boolean_stackdepth integer_shove) boolean_stackdepth integer_shove integer_dup_times exec_y_when_autoconstructing (exec_rot (in1 boolean_dup_times) () (boolean_stackdepth integer_shove) boolean_stackdepth integer_shove) integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not integer_max)))))) () ()))
Zero cases best errors: [0 0 1 0 0 0 0 1 1 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 103
Percent parens: 0.223
--- Lexicase Population Statistics ---
Count of elite individuals by case: (36 457 774 36 702 747 744 11 24 217)
Population mean number of elite cases: 3.75
Count of perfect (error zero) individuals by case: (36 457 774 36 702 747 744 11 24 217)
Population mean number of perfect (error zero) cases: 3.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max})
Best program: (exec_dup_times () exec_dup_times () in3 in4 boolean_flush exec_dup_items boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_pop in3 exec_s_when_autoconstructing (boolean_dup boolean_dup_times boolean_or boolean_dup_times exec_yankdup integer_flush exec_yankdup in3 boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times) () (boolean_stackdepth integer_shove) boolean_stackdepth integer_shove integer_dup_times exec_y_when_autoconstructing (exec_rot (in1 boolean_dup_times) () (boolean_stackdepth integer_shove) boolean_stackdepth integer_shove) integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not integer_max)))))) () ()))
Errors: [0 0 1 0 0 0 0 1 1 1]
Total: 4
Mean: 0.4
Genome size: 80
Size: 103
Percent parens: 0.223
--- Population Statistics ---
Average total errors in population: 6.252
Median total errors in population: 6
Error averages by case: (0.964 0.543 0.226 0.964 0.298 0.253 0.256 0.989 0.976 0.783)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.322
Average program size in population (points): 82.019
Average percent parens in population: 0.216
Minimum age in population: 133.4351157521314
Maximum age in population: 134.9644126271314
Average age in population: 134.2983442677564
Median age in population: 133.9429282521314
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 175
Genome diversity (% unique genomes):	 0.607
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 178
Syntactic diversity (% unique Push programs):	 0.596
Total error diversity:				 0.007
Error (vector) diversity:			 0.061
Behavioral diversity:				 0.18
--- Run Statistics ---
Number of program evaluations used so far: 89000
Number of point (instruction) evaluations so far: 46437756
--- Timings ---
Current time: 1559314552172 milliseconds
Total Time:         223.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       146.8 seconds, 65.9%
Fitness Testing:     41.0 seconds, 18.4%
Report:              35.0 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 88
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 89
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 89
;;******************************
;; -*- Smallest problem report - generation 89
Test total error for best: 554
Test mean error for best: 0.55400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 100                
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 64                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 73                 
Correct output: 23                  | Program output: 6023               
Correct output: 31                  | Program output:                    
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 59                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 3                  
Correct output: 23                  | Program output: 29                 
Correct output: 10                  | Program output: 16                 
Correct output: 1                   | Program output: 30                 
Correct output: 34                  | Program output: 78                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 15                 
Correct output: 3                   | Program output: 72                 
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 51                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -73                
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: -3                 
Correct output: -54                 | Program output: -47                
Correct output: -95                 | Program output: 3                  
Correct output: -97                 | Program output: -21                
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: 24                 
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -8                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -11                
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -4                 
Correct output: -34                 | Program output: 63                 
Correct output: -17                 | Program output: 54                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: -548               
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: 55                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 80                 
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max})
Lexicase best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_pop boolean_dup_times exec_s_when_autoconstructing (in1 boolean_dup_times print_boolean integer_div exec_yankdup in4 boolean_yank in1) (boolean_dup_times exec_yankdup integer_flush boolean_yank integer_min in1 boolean_dup_times) () boolean_stackdepth integer_yank print_integer exec_y_when_autoconstructing (exec_rot (exec_when (exec_empty boolean_swap exec_dup () in2 integer_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not integer_max)))))) () ()))
Lexicase best errors: [1 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 87
Percent parens: 0.218
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max})
Zero cases best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_pop boolean_dup_times exec_s_when_autoconstructing (in1 boolean_dup_times print_boolean integer_div exec_yankdup in4 boolean_yank in1) (boolean_dup_times exec_yankdup integer_flush boolean_yank integer_min in1 boolean_dup_times) () boolean_stackdepth integer_yank print_integer exec_y_when_autoconstructing (exec_rot (exec_when (exec_empty boolean_swap exec_dup () in2 integer_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not integer_max)))))) () ()))
Zero cases best errors: [1 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 87
Percent parens: 0.218
--- Lexicase Population Statistics ---
Count of elite individuals by case: (614 277 91 207 207 308 79 289 499 287)
Population mean number of elite cases: 2.86
Count of perfect (error zero) individuals by case: (614 277 91 207 207 308 79 289 499 287)
Population mean number of perfect (error zero) cases: 2.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max})
Best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_pop boolean_dup_times exec_s_when_autoconstructing (in1 boolean_dup_times print_boolean integer_div exec_yankdup in4 boolean_yank in1) (boolean_dup_times exec_yankdup integer_flush boolean_yank integer_min in1 boolean_dup_times) () boolean_stackdepth integer_yank print_integer exec_y_when_autoconstructing (exec_rot (exec_when (exec_empty boolean_swap exec_dup () in2 integer_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not integer_max)))))) () ()))
Errors: [1 0 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 68
Size: 87
Percent parens: 0.218
--- Population Statistics ---
Average total errors in population: 7.142
Median total errors in population: 8
Error averages by case: (0.386 0.723 0.909 0.793 0.793 0.692 0.921 0.711 0.501 0.713)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 69.587
Average program size in population (points): 89.504
Average percent parens in population: 0.223
Minimum age in population: 134.5991782521314
Maximum age in population: 136.9351157521314
Average age in population: 135.7950757130689
Median age in population: 135.8921470021314
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 63
Genome diversity (% unique genomes):	 0.713
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.706
Total error diversity:				 0.01
Error (vector) diversity:			 0.045
Behavioral diversity:				 0.241
--- Run Statistics ---
Number of program evaluations used so far: 90000
Number of point (instruction) evaluations so far: 46925230
--- Timings ---
Current time: 1559314554725 milliseconds
Total Time:         225.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       148.5 seconds, 65.8%
Fitness Testing:     41.5 seconds, 18.4%
Report:              35.5 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 89
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 90
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 90
;;******************************
;; -*- Smallest problem report - generation 90
Test total error for best: 695
Test mean error for best: 0.69500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 39                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 44                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -13                
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 39                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 39                 
Correct output: 35                  | Program output: 39                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 83                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 78                 
Correct output: 23                  | Program output: 88                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 48                 
Correct output: 9                   | Program output: 67                 
Correct output: 16                  | Program output: 59                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 39                 
Correct output: 23                  | Program output: 29                 
Correct output: 10                  | Program output: 37                 
Correct output: 1                   | Program output: 39                 
Correct output: 34                  | Program output: 78                 
Correct output: 20                  | Program output: 39                 
Correct output: 9                   | Program output: 39                 
Correct output: 3                   | Program output: 39                 
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 39                 
Correct output: 46                  | Program output: 39                 
Correct output: -96                 | Program output: 36                 
Correct output: -61                 | Program output: -53                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: 0                  
Correct output: -95                 | Program output: 39                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: 42                 
Correct output: -55                 | Program output: 20                 
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -75                
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 85                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: 98                 
Correct output: -56                 | Program output: 81                 
Correct output: -75                 | Program output: -1                 
Correct output: -87                 | Program output: -55                
Correct output: -81                 | Program output: 41                 
Correct output: -90                 | Program output: 39                 
Correct output: -64                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -21                
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: 77                 
Correct output: -19                 | Program output: 65                 
Correct output: -58                 | Program output: 82                 
Correct output: -46                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -1                 
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: 32                 
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: 19                 
Correct output: -45                 | Program output: 68                 
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: 79                 
Correct output: -95                 | Program output: 63                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: 39                 
Correct output: -34                 | Program output: 72                 
Correct output: -17                 | Program output: 86                 
Correct output: -82                 | Program output: 39                 
Correct output: -49                 | Program output: -16                
Correct output: -54                 | Program output: -36                
Correct output: -71                 | Program output: 76                 
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 62                 
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_dup_times () exec_dup_times () in3 in4 boolean_flush exec_dup_items boolean_flush exec_dup_items exec_dup_times () in3 integer_lt boolean_pop in3 integer_rot boolean_dup boolean_dup_times boolean_or boolean_dup_times exec_yankdup integer_flush exec_yankdup in3 boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times boolean_stackdepth integer_shove boolean_stackdepth integer_shove integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items))))) () ()))) () ()))
Lexicase best errors: [1 1 0 0 1 0 1 0 0 0]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 85
Percent parens: 0.224
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction integer_rot} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_dup_times () exec_dup_times () in3 in4 boolean_flush exec_dup_items boolean_flush exec_dup_items exec_dup_times () in3 integer_lt boolean_pop in3 integer_rot boolean_dup boolean_dup_times boolean_or boolean_dup_times exec_yankdup integer_flush exec_yankdup in3 boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times boolean_stackdepth integer_shove boolean_stackdepth integer_shove integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items))))) () ()))) () ()))
Zero cases best errors: [1 1 0 0 1 0 1 0 0 0]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 85
Percent parens: 0.224
--- Lexicase Population Statistics ---
Count of elite individuals by case: (202 449 132 190 171 826 4 742 578 803)
Population mean number of elite cases: 4.10
Count of perfect (error zero) individuals by case: (202 449 132 190 171 826 4 742 578 803)
Population mean number of perfect (error zero) cases: 4.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction 39} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction integer_lte} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items exec_dup_times () 39 in4 boolean_pop boolean_dup_times exec_s_when_autoconstructing (in1 boolean_dup_times print_boolean integer_div exec_yankdup in4 boolean_yank exec_yankdup in3 boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times) () (boolean_stackdepth integer_shove) boolean_stackdepth integer_shove integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) integer_lte exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items)))) () ()))) () ()))
Errors: [1 1 0 0 0 0 1 0 1 0]
Total: 4
Mean: 0.4
Genome size: 64
Size: 84
Percent parens: 0.238
--- Population Statistics ---
Average total errors in population: 5.903
Median total errors in population: 5
Error averages by case: (0.798 0.551 0.868 0.81 0.829 0.174 0.996 0.258 0.422 0.197)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.786
Average program size in population (points): 83.551
Average percent parens in population: 0.224
Minimum age in population: 135.7632407521314
Maximum age in population: 138.6016196583814
Average age in population: 137.6497768849439
Median age in population: 137.5347251271314
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 222
Genome diversity (% unique genomes):	 0.653
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 223
Syntactic diversity (% unique Push programs):	 0.645
Total error diversity:				 0.007
Error (vector) diversity:			 0.063
Behavioral diversity:				 0.207
--- Run Statistics ---
Number of program evaluations used so far: 91000
Number of point (instruction) evaluations so far: 47434551
--- Timings ---
Current time: 1559314557541 milliseconds
Total Time:         228.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:       150.1 seconds, 65.8%
Fitness Testing:     42.0 seconds, 18.4%
Report:              35.9 seconds, 15.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 90
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 91
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 91
;;******************************
;; -*- Smallest problem report - generation 91
Test total error for best: 472
Test mean error for best: 0.47200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 44                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -25                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 26                 
Correct output: -13                 | Program output: -8                 
Correct output: 33                  | Program output: 33                 
Correct output: -10                 | Program output: 31                 
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 83                 
Correct output: 0                   | Program output: 6                  
Correct output: 42                  | Program output: 78                 
Correct output: 23                  | Program output: 6023               
Correct output: 31                  | Program output:                    
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 26                 
Correct output: 16                  | Program output: 33                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 46                 
Correct output: 10                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 34                 
Correct output: 20                  | Program output: 20                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 39                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 50                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: 21                 
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -51                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: 20                 
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: 47                 
Correct output: -95                 | Program output: -86                
Correct output: -96                 | Program output: 85                 
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -82                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -41                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -41                
Correct output: -95                 | Program output: -10                
Correct output: -97                 | Program output: 52                 
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: 65                 
Correct output: -58                 | Program output: 82                 
Correct output: -46                 | Program output: 67                 
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: 100                
Correct output: -28                 | Program output: -9                 
Correct output: -82                 | Program output: -20                
Correct output: -5                  | Program output: 17                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -30                
Correct output: -55                 | Program output: -26                
Correct output: -95                 | Program output: -4                 
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: 72                 
Correct output: -17                 | Program output: 86                 
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: -548               
Correct output: -71                 | Program output: 76                 
Correct output: -15                 | Program output: 18                 
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: -63                
Correct output: -87                 | Program output: -53                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max})
Lexicase best program: (exec_dup_times () exec_dup_times () in3 in4 boolean_flush exec_dup_items boolean_flush exec_dup_items boolean_or boolean_dup_times exec_yankdup integer_flush exec_yankdup in3 boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times boolean_stackdepth integer_shove boolean_stackdepth integer_shove integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not integer_max)))))) () ()))
Lexicase best errors: [1 0 0 0 0 1 1 0 0 1]
Lexicase best number of elite cases: 6
Lexicase best total error: 4
Lexicase best mean error: 0.4
Lexicase best size: 78
Percent parens: 0.192
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max})
Zero cases best program: (exec_dup_times () exec_dup_times () in3 in4 boolean_flush exec_dup_items boolean_flush exec_dup_items boolean_or boolean_dup_times exec_yankdup integer_flush exec_yankdup in3 boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times boolean_stackdepth integer_shove boolean_stackdepth integer_shove integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not integer_max)))))) () ()))
Zero cases best errors: [1 0 0 0 0 1 1 0 0 1]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 6
Zero cases best total error: 4
Zero cases best mean error: 0.4
Zero cases best size: 78
Percent parens: 0.192
--- Lexicase Population Statistics ---
Count of elite individuals by case: (344 242 90 357 206 344 248 218 443 108)
Population mean number of elite cases: 2.60
Count of perfect (error zero) individuals by case: (344 242 90 357 206 344 248 218 443 108)
Population mean number of perfect (error zero) cases: 2.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 1, :instruction boolean_stackdepth} {:close 1, :instruction integer_yank} {:close 0, :instruction print_integer} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap})
Best program: (exec_dup_times () in3 in4 boolean_flush in3 in4 boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_pop boolean_dup_times exec_s_when_autoconstructing (in1 boolean_dup_times print_boolean integer_div exec_yankdup in4 boolean_yank in1) (boolean_dup_times exec_yankdup integer_flush boolean_yank integer_min in1 boolean_dup_times) () boolean_stackdepth integer_yank print_integer exec_y_when_autoconstructing (exec_rot (exec_when (exec_empty boolean_swap exec_dup () in2 integer_swap exec_dup () boolean_dup_times integer_yank integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap))))) () ()))
Errors: [0 1 1 0 0 0 1 0 0 1]
Total: 4
Mean: 0.4
Genome size: 67
Size: 85
Percent parens: 0.212
--- Population Statistics ---
Average total errors in population: 7.4
Median total errors in population: 7
Error averages by case: (0.656 0.758 0.91 0.643 0.794 0.656 0.752 0.782 0.557 0.892)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 65.892
Average program size in population (points): 85.261
Average percent parens in population: 0.227
Minimum age in population: 136.9351157521314
Maximum age in population: 140.4456137990064
Average age in population: 139.5380334767408
Median age in population: 139.4216880177564
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 68
Genome diversity (% unique genomes):	 0.678
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 70
Syntactic diversity (% unique Push programs):	 0.671
Total error diversity:				 0.007
Error (vector) diversity:			 0.072
Behavioral diversity:				 0.27
--- Run Statistics ---
Number of program evaluations used so far: 92000
Number of point (instruction) evaluations so far: 48165131
--- Timings ---
Current time: 1559314560354 milliseconds
Total Time:         231.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       151.7 seconds, 65.6%
Fitness Testing:     42.7 seconds, 18.5%
Report:              36.6 seconds, 15.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 91
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 92
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 92
;;******************************
;; -*- Smallest problem report - generation 92
Test total error for best: 551
Test mean error for best: 0.55100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -13                
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 50                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 30                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 15                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 37                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 97                 
Correct output: 20                  | Program output: 60                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 76                 
Correct output: 14                  | Program output: 42                 
Correct output: 46                  | Program output: 50                 
Correct output: -96                 | Program output: 50                 
Correct output: -61                 | Program output: -53                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -73                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: 18                 
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -75                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: 20                 
Correct output: -56                 | Program output: 16                 
Correct output: -75                 | Program output: -1                 
Correct output: -87                 | Program output: -55                
Correct output: -81                 | Program output: 55                 
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -3                 
Correct output: -54                 | Program output: -47                
Correct output: -95                 | Program output: 3                  
Correct output: -97                 | Program output: -21                
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: 51                 
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -8                 
Correct output: -90                 | Program output: -1                 
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: 6                  
Correct output: -23                 | Program output: -11                
Correct output: -61                 | Program output: 92                 
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -4                 
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -70                
Correct output: -49                 | Program output: -16                
Correct output: -54                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: 55                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 80                 
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Lexicase best program: (exec_dup_times () exec_dup_times () in3 in4 boolean_flush exec_dup_items boolean_flush exec_dup_items exec_dup_times () in3 integer_lt boolean_pop in3 exec_s_when_autoconstructing (boolean_dup boolean_dup_times boolean_or boolean_dup_times exec_yankdup integer_flush exec_yankdup in3 boolean_yank integer_lte boolean_dup_times exec_yankdup integer_flush in3 boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times) () (boolean_stackdepth integer_shove) boolean_stackdepth integer_shove integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items))))) () ()))) () ()))
Lexicase best errors: [0 1 0 0 0 0 0 0 0 1]
Lexicase best number of elite cases: 8
Lexicase best total error: 2
Lexicase best mean error: 0.2
Lexicase best size: 94
Percent parens: 0.234
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Zero cases best program: (exec_dup_times () exec_dup_times () in3 in4 boolean_flush exec_dup_items boolean_flush exec_dup_items exec_dup_times () in3 integer_lt boolean_pop in3 exec_s_when_autoconstructing (boolean_dup boolean_dup_times boolean_or boolean_dup_times exec_yankdup integer_flush exec_yankdup in3 boolean_yank integer_lte boolean_dup_times exec_yankdup integer_flush in3 boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times) () (boolean_stackdepth integer_shove) boolean_stackdepth integer_shove integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items))))) () ()))) () ()))
Zero cases best errors: [0 1 0 0 0 0 0 0 0 1]
Zero cases best number of elite cases: 8
Zero cases best number of zero cases: 8
Zero cases best total error: 2
Zero cases best mean error: 0.2
Zero cases best size: 94
Percent parens: 0.234
--- Lexicase Population Statistics ---
Count of elite individuals by case: (203 338 350 234 555 146 485 779 784 228)
Population mean number of elite cases: 4.10
Count of perfect (error zero) individuals by case: (203 338 350 234 555 146 485 779 784 228)
Population mean number of perfect (error zero) cases: 4.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 2, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction print_boolean} {:close 0, :instruction integer_div} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in4} {:close 0, :instruction boolean_yank} {:close 1, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_swap} {:close 1, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items})
Best program: (exec_dup_times () in3 in4 boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_pop boolean_dup_times exec_s_when_autoconstructing (exec_pop (boolean_dup_times print_boolean integer_div exec_yankdup in4 boolean_yank in1) boolean_dup_times exec_yankdup integer_flush boolean_yank integer_min in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times) () (boolean_stackdepth integer_shove) boolean_stackdepth integer_shove integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_swap exec_dup () boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not boolean_dup_items))))) () ()))) () ()))
Errors: [0 1 0 0 0 0 0 0 0 1]
Total: 2
Mean: 0.2
Genome size: 67
Size: 89
Percent parens: 0.247
--- Population Statistics ---
Average total errors in population: 5.898
Median total errors in population: 6
Error averages by case: (0.797 0.662 0.65 0.766 0.445 0.854 0.515 0.221 0.216 0.772)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.05
Average program size in population (points): 84.125
Average percent parens in population: 0.214
Minimum age in population: 137.9351157521314
Maximum age in population: 142.3098716115064
Average age in population: 140.901051543147
Median age in population: 141.0776938771314
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 46
Genome diversity (% unique genomes):	 0.711
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.705
Total error diversity:				 0.009
Error (vector) diversity:			 0.102
Behavioral diversity:				 0.316
--- Run Statistics ---
Number of program evaluations used so far: 93000
Number of point (instruction) evaluations so far: 48722768
--- Timings ---
Current time: 1559314563077 milliseconds
Total Time:         233.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       153.3 seconds, 65.6%
Fitness Testing:     43.3 seconds, 18.5%
Report:              37.1 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 92
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 93
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 93
;;******************************
;; -*- Smallest problem report - generation 93
Test total error for best: 439
Test mean error for best: 0.43900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -13                
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 50                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 30                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 16                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 78                 
Correct output: 20                  | Program output: 41                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 18                 
Correct output: 46                  | Program output: 50                 
Correct output: -96                 | Program output: 50                 
Correct output: -61                 | Program output: -53                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: 0                  
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: 40                 
Correct output: -60                 | Program output: 10                 
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: 14                 
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: 22                 
Correct output: -45                 | Program output: 20                 
Correct output: -56                 | Program output: 10                 
Correct output: -75                 | Program output: -1                 
Correct output: -87                 | Program output: -55                
Correct output: -81                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -19                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: 51                 
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: 56                 
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: 6                  
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: 88                 
Correct output: -65                 | Program output: 4                  
Correct output: -36                 | Program output: 10                 
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -70                
Correct output: -49                 | Program output: -16                
Correct output: -54                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: 13                 
Correct output: -63                 | Program output: 62                 
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup})
Lexicase best program: (exec_dup_times () exec_dup_times () in3 in4 boolean_flush exec_dup_items boolean_flush exec_dup_items exec_dup_times () in3 integer_lt boolean_pop in3 exec_s_when_autoconstructing (boolean_dup boolean_dup_times boolean_or boolean_dup_times exec_yankdup integer_flush exec_yankdup in3 boolean_yank integer_lte boolean_dup_times boolean_dup_times) () (boolean_stackdepth integer_shove) boolean_stackdepth integer_shove integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_min exec_dup (boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (integer_inc integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup ())))))))) () ()))
Lexicase best errors: [0 0 1 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 95
Percent parens: 0.232
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup})
Zero cases best program: (exec_dup_times () exec_dup_times () in3 in4 boolean_flush exec_dup_items boolean_flush exec_dup_items exec_dup_times () in3 integer_lt boolean_pop in3 exec_s_when_autoconstructing (boolean_dup boolean_dup_times boolean_or boolean_dup_times exec_yankdup integer_flush exec_yankdup in3 boolean_yank integer_lte boolean_dup_times boolean_dup_times) () (boolean_stackdepth integer_shove) boolean_stackdepth integer_shove integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_min exec_dup (boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (integer_inc integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup ())))))))) () ()))
Zero cases best errors: [0 0 1 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 95
Percent parens: 0.232
--- Lexicase Population Statistics ---
Count of elite individuals by case: (624 162 393 874 778 521 497 642 632 896)
Population mean number of elite cases: 6.02
Count of perfect (error zero) individuals by case: (624 162 393 874 778 521 497 642 632 896)
Population mean number of perfect (error zero) cases: 6.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_times} {:close 1, :instruction exec_dup} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_pop} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_s_when_autoconstructing} {:close 0, :instruction exec_pop} {:close 0, :instruction boolean_dup_times} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max})
Best program: (exec_dup_times () exec_dup () in3 in4 boolean_flush exec_dup_items boolean_pop boolean_dup_times exec_s_when_autoconstructing (exec_pop (boolean_dup_times boolean_dup_times)) (boolean_stackdepth integer_shove) (boolean_stackdepth integer_shove) integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_min exec_dup (boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_not integer_max))))))) () ()))
Errors: [0 0 1 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 53
Size: 72
Percent parens: 0.264
--- Population Statistics ---
Average total errors in population: 3.981
Median total errors in population: 3
Error averages by case: (0.376 0.838 0.607 0.126 0.222 0.479 0.503 0.358 0.368 0.104)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 66.12
Average program size in population (points): 85.205
Average percent parens in population: 0.221
Minimum age in population: 139.9351157521314
Maximum age in population: 143.9915732716627
Average age in population: 142.1758844288892
Median age in population: 142.2228965138502
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 87
Genome diversity (% unique genomes):	 0.684
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 97
Syntactic diversity (% unique Push programs):	 0.665
Total error diversity:				 0.01
Error (vector) diversity:			 0.087
Behavioral diversity:				 0.2
--- Run Statistics ---
Number of program evaluations used so far: 94000
Number of point (instruction) evaluations so far: 49268224
--- Timings ---
Current time: 1559314565515 milliseconds
Total Time:         236.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       155.0 seconds, 65.6%
Fitness Testing:     43.7 seconds, 18.5%
Report:              37.6 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 93
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 94
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 94
;;******************************
;; -*- Smallest problem report - generation 94
Test total error for best: 348
Test mean error for best: 0.34800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: -99                
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: 91                 
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: -54                
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -13                
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 50                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 30                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 57                 
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 16                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 78                 
Correct output: 20                  | Program output: 41                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 18                 
Correct output: 46                  | Program output: 50                 
Correct output: -96                 | Program output: 50                 
Correct output: -61                 | Program output: -53                
Correct output: -78                 | Program output: -78                
Correct output: -91                 | Program output: -91                
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: 40                 
Correct output: -60                 | Program output: 10                 
Correct output: -55                 | Program output: -55                
Correct output: -42                 | Program output: -41                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: -96                
Correct output: -43                 | Program output: -38                
Correct output: -45                 | Program output: 20                 
Correct output: -56                 | Program output: 10                 
Correct output: -75                 | Program output: -46                
Correct output: -87                 | Program output: -55                
Correct output: -81                 | Program output: 44                 
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -33                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -85                
Correct output: -81                 | Program output: 51                 
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: -15                
Correct output: -93                 | Program output: 56                 
Correct output: -62                 | Program output: -35                
Correct output: -90                 | Program output: -47                
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: 6                  
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -6                 
Correct output: -65                 | Program output: 4                  
Correct output: -36                 | Program output: 10                 
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -70                
Correct output: -49                 | Program output: -16                
Correct output: -54                 | Program output: -54                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: -73                
Correct output: -83                 | Program output: -83                
Correct output: -63                 | Program output: -63                
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max})
Lexicase best program: (exec_yankdup in3 boolean_yank in1 boolean_flush exec_dup_items boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_pop in3 exec_s_when_autoconstructing (exec_dup_times () in3 in4 integer_shove) (integer_dup_times integer_min exec_rot (boolean_dup_times) () (boolean_stackdepth integer_shove) boolean_stackdepth integer_shove) (integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_min exec_dup (boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_flush boolean_not integer_max)))))) () ())))
Lexicase best errors: [0 1 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 9
Lexicase best total error: 1
Lexicase best mean error: 0.1
Lexicase best size: 81
Percent parens: 0.247
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max})
Zero cases best program: (exec_yankdup in3 boolean_yank in1 boolean_flush exec_dup_items boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_pop in3 exec_s_when_autoconstructing (exec_dup_times () in3 in4 integer_shove) (integer_dup_times integer_min exec_rot (boolean_dup_times) () (boolean_stackdepth integer_shove) boolean_stackdepth integer_shove) (integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_min exec_dup (boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_flush boolean_not integer_max)))))) () ())))
Zero cases best errors: [0 1 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 1
Zero cases best mean error: 0.1
Zero cases best size: 81
Percent parens: 0.247
--- Lexicase Population Statistics ---
Count of elite individuals by case: (847 291 766 822 682 9 796 673 6 826)
Population mean number of elite cases: 5.72
Count of perfect (error zero) individuals by case: (847 291 766 822 682 9 796 673 6 826)
Population mean number of perfect (error zero) cases: 5.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 0, :instruction boolean_flush} {:close 0, :instruction exec_dup_items} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 0, :instruction boolean_pop} {:close 0, :instruction in3} {:close 0, :instruction exec_s_when_autoconstructing} {:close 1, :instruction exec_dup_times} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max})
Best program: (exec_yankdup in3 boolean_yank in1 boolean_flush exec_dup_items boolean_flush exec_dup_items exec_dup_times () in3 in4 boolean_pop in3 exec_s_when_autoconstructing (exec_dup_times () in3 in4 integer_shove) (integer_dup_times integer_min exec_rot (boolean_dup_times) () (boolean_stackdepth integer_shove) boolean_stackdepth integer_shove) (integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_min exec_dup (boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_flush boolean_not integer_max)))))) () ())))
Errors: [0 1 0 0 0 0 0 0 0 0]
Total: 1
Mean: 0.1
Genome size: 61
Size: 81
Percent parens: 0.247
--- Population Statistics ---
Average total errors in population: 4.282
Median total errors in population: 3
Error averages by case: (0.153 0.709 0.234 0.178 0.318 0.991 0.204 0.327 0.994 0.174)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 64.43
Average program size in population (points): 82.396
Average percent parens in population: 0.218
Minimum age in population: 141.9295005177564
Maximum age in population: 145.5196189259595
Average age in population: 143.5982470692701
Median age in population: 143.6650962208814
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 124
Genome diversity (% unique genomes):	 0.644
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 135
Syntactic diversity (% unique Push programs):	 0.63
Total error diversity:				 0.01
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.155
--- Run Statistics ---
Number of program evaluations used so far: 95000
Number of point (instruction) evaluations so far: 49660775
--- Timings ---
Current time: 1559314568014 milliseconds
Total Time:         238.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       156.7 seconds, 65.6%
Fitness Testing:     44.1 seconds, 18.5%
Report:              37.9 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 94
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 95
Computing errors... 
Done computing errors.
Preserving frontier... 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 95
;;******************************
;; -*- Smallest problem report - generation 95
Test total error for best: 302
Test mean error for best: 0.30200
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 1
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 1
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 1
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 1
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 1
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 1
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 1
Test Case  724 | Error: 1
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 1
Test Case  831 | Error: 1
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 1
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 1
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -13                
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 78                 
Correct output: 20                  | Program output: 41                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 50                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -8                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
;;******************************
--- Lexicase Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max})
Lexicase best program: (exec_yankdup in3 boolean_yank in1 boolean_dup_times exec_yankdup integer_lte boolean_yank in1 boolean_dup_times boolean_yank integer_min in1 boolean_dup_times exec_yankdup in1 boolean_dup_times boolean_stackdepth integer_shove boolean_stackdepth integer_shove integer_dup_times integer_min exec_rot (boolean_dup_times) () (boolean_stackdepth integer_shove) boolean_stackdepth integer_shove integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_min exec_dup (boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_stackdepth integer_stackdepth print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_flush boolean_not integer_max)))))) () ()))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 10
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 79
Percent parens: 0.190
--- Lexicase Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_lte} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max})
Zero cases best program: (exec_yankdup in3 boolean_yank in1 boolean_dup_times exec_yankdup integer_lte boolean_yank in1 boolean_dup_times boolean_yank integer_min in1 boolean_dup_times exec_yankdup in1 boolean_dup_times boolean_stackdepth integer_shove boolean_stackdepth integer_shove integer_dup_times integer_min exec_rot (boolean_dup_times) () (boolean_stackdepth integer_shove) boolean_stackdepth integer_shove integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_min exec_dup (boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_stackdepth integer_stackdepth print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_flush boolean_not integer_max)))))) () ()))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 10
Zero cases best number of zero cases: 10
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 79
Percent parens: 0.190
--- Lexicase Population Statistics ---
Count of elite individuals by case: (853 607 246 239 888 924 911 873 864 242)
Population mean number of elite cases: 6.65
Count of perfect (error zero) individuals by case: (853 607 246 239 888 924 911 873 864 242)
Population mean number of perfect (error zero) cases: 6.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_yankdup} {:close 0, :instruction in3} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_min} {:close 0, :instruction in1} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in1} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction in3} {:close 0, :instruction in4} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction exec_rot} {:close 2, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_stackdepth} {:close 1, :instruction integer_shove} {:close 0, :instruction integer_dup_times} {:close 0, :instruction exec_y_when_autoconstructing} {:close 0, :instruction exec_rot} {:close 0, :instruction exec_when} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction print_integer} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dup_items} {:close 1, :instruction exec_flush} {:close 0, :instruction exec_when} {:close 0, :instruction exec_empty} {:close 0, :instruction boolean_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_max})
Best program: (exec_yankdup in3 boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times boolean_yank integer_min in1 boolean_dup_times exec_yankdup in1 boolean_dup_times boolean_stackdepth integer_shove boolean_stackdepth integer_shove in3 in4 integer_shove integer_dup_times integer_min exec_rot (boolean_dup_times) () (boolean_stackdepth integer_shove) boolean_stackdepth integer_shove integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_min exec_dup (boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_flush boolean_not integer_max)))))) () ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 67
Size: 82
Percent parens: 0.183
--- Population Statistics ---
Average total errors in population: 3.353
Median total errors in population: 3
Error averages by case: (0.147 0.393 0.754 0.761 0.112 0.076 0.089 0.127 0.136 0.758)
Error minima by case: (0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 61.944
Average program size in population (points): 80.428
Average percent parens in population: 0.229
Minimum age in population: 143.3434104298658
Maximum age in population: 146.395214018733
Average age in population: 145.3192829732008
Median age in population: 145.0896872853345
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one genome: 1
Median copy number of one genome: 1
Max copy number of one genome: 263
Genome diversity (% unique genomes):	 0.662
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 264
Syntactic diversity (% unique Push programs):	 0.649
Total error diversity:				 0.011
Error (vector) diversity:			 0.045
Behavioral diversity:				 0.102
--- Run Statistics ---
Number of program evaluations used so far: 96000
Number of point (instruction) evaluations so far: 50079855
--- Timings ---
Current time: 1559314570426 milliseconds
Total Time:         241.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       158.3 seconds, 65.6%
Fitness Testing:     44.6 seconds, 18.5%
Report:              38.4 seconds, 15.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 95
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 95
Successful program: (exec_yankdup in3 boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times boolean_yank integer_min in1 boolean_dup_times exec_yankdup in1 boolean_dup_times boolean_stackdepth integer_shove boolean_stackdepth integer_shove in3 in4 integer_shove integer_dup_times integer_min exec_rot (boolean_dup_times) () (boolean_stackdepth integer_shove) boolean_stackdepth integer_shove integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_min exec_dup (boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_flush boolean_not integer_max)))))) () ()))
Errors: [0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 82


Auto-simplifying with starting size: 82
step: 0
program: (exec_yankdup in3 boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times boolean_yank integer_min in1 boolean_dup_times exec_yankdup in1 boolean_dup_times boolean_stackdepth integer_shove boolean_stackdepth integer_shove in3 in4 integer_shove integer_dup_times integer_min exec_rot (boolean_dup_times) () (boolean_stackdepth integer_shove) boolean_stackdepth integer_shove integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_min exec_dup (boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_flush boolean_not integer_max)))))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 82

step: 500
program: (exec_yankdup in3 boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times boolean_yank integer_min in1 boolean_dup_times exec_yankdup in1 boolean_dup_times boolean_stackdepth integer_shove boolean_stackdepth integer_shove in3 in4 integer_shove integer_dup_times integer_min exec_rot (boolean_dup_times) () (boolean_stackdepth integer_shove) boolean_stackdepth integer_shove integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_min exec_dup (boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_flush boolean_not integer_max)))))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 82

step: 1000
program: (exec_yankdup in3 boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times boolean_yank integer_min in1 boolean_dup_times exec_yankdup in1 boolean_dup_times boolean_stackdepth integer_shove boolean_stackdepth integer_shove in3 in4 integer_shove integer_dup_times integer_min exec_rot (boolean_dup_times) () (boolean_stackdepth integer_shove) boolean_stackdepth integer_shove integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_min exec_dup (boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_flush boolean_not integer_max)))))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 82

step: 1500
program: (exec_yankdup in3 boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times boolean_yank integer_min in1 boolean_dup_times exec_yankdup in1 boolean_dup_times boolean_stackdepth integer_shove boolean_stackdepth integer_shove in3 in4 integer_shove integer_dup_times integer_min exec_rot (boolean_dup_times) () (boolean_stackdepth integer_shove) boolean_stackdepth integer_shove integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_min exec_dup (boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_flush boolean_not integer_max)))))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 82

step: 2000
program: (exec_yankdup in3 boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times boolean_yank integer_min in1 boolean_dup_times exec_yankdup in1 boolean_dup_times boolean_stackdepth integer_shove boolean_stackdepth integer_shove in3 in4 integer_shove integer_dup_times integer_min exec_rot (boolean_dup_times) () (boolean_stackdepth integer_shove) boolean_stackdepth integer_shove integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_min exec_dup (boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_flush boolean_not integer_max)))))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 82

step: 2500
program: (exec_yankdup in3 boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times boolean_yank integer_min in1 boolean_dup_times exec_yankdup in1 boolean_dup_times boolean_stackdepth integer_shove boolean_stackdepth integer_shove in3 in4 integer_shove integer_dup_times integer_min exec_rot (boolean_dup_times) () (boolean_stackdepth integer_shove) boolean_stackdepth integer_shove integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_min exec_dup (boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_flush boolean_not integer_max)))))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 82

step: 3000
program: (exec_yankdup in3 boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times boolean_yank integer_min in1 boolean_dup_times exec_yankdup in1 boolean_dup_times boolean_stackdepth integer_shove boolean_stackdepth integer_shove in3 in4 integer_shove integer_dup_times integer_min exec_rot (boolean_dup_times) () (boolean_stackdepth integer_shove) boolean_stackdepth integer_shove integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_min exec_dup (boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_flush boolean_not integer_max)))))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 82

step: 3500
program: (exec_yankdup in3 boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times boolean_yank integer_min in1 boolean_dup_times exec_yankdup in1 boolean_dup_times boolean_stackdepth integer_shove boolean_stackdepth integer_shove in3 in4 integer_shove integer_dup_times integer_min exec_rot (boolean_dup_times) () (boolean_stackdepth integer_shove) boolean_stackdepth integer_shove integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_min exec_dup (boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_flush boolean_not integer_max)))))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 82

step: 4000
program: (exec_yankdup in3 boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times boolean_yank integer_min in1 boolean_dup_times exec_yankdup in1 boolean_dup_times boolean_stackdepth integer_shove boolean_stackdepth integer_shove in3 in4 integer_shove integer_dup_times integer_min exec_rot (boolean_dup_times) () (boolean_stackdepth integer_shove) boolean_stackdepth integer_shove integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_min exec_dup (boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_flush boolean_not integer_max)))))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 82

step: 4500
program: (exec_yankdup in3 boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times boolean_yank integer_min in1 boolean_dup_times exec_yankdup in1 boolean_dup_times boolean_stackdepth integer_shove boolean_stackdepth integer_shove in3 in4 integer_shove integer_dup_times integer_min exec_rot (boolean_dup_times) () (boolean_stackdepth integer_shove) boolean_stackdepth integer_shove integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_min exec_dup (boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_flush boolean_not integer_max)))))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 82

step: 5000
program: (exec_yankdup in3 boolean_yank in1 boolean_dup_times exec_yankdup integer_flush boolean_yank in1 boolean_dup_times boolean_yank integer_min in1 boolean_dup_times exec_yankdup in1 boolean_dup_times boolean_stackdepth integer_shove boolean_stackdepth integer_shove in3 in4 integer_shove integer_dup_times integer_min exec_rot (boolean_dup_times) () (boolean_stackdepth integer_shove) boolean_stackdepth integer_shove integer_dup_times exec_y_when_autoconstructing (exec_rot (exec_when (in2 integer_min exec_dup (boolean_dup_times boolean_stackdepth integer_pop print_integer integer_dup_times integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_swap exec_dup (boolean_flush boolean_stackdepth integer_pop print_integer integer_dup_times integer_yankdup exec_do*times (exec_shove (integer_inc integer_dup_items exec_flush) exec_when (exec_empty boolean_flush boolean_not integer_max)))))) () ()))
errors: [0 0 0 0 0 0 0 0 0 0]
total: 0
size: 82

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Smallest problem report - generation 95
Test total error for best: 302
Test mean error for best: 0.30200
Test Case    0 | Error: 1
Test Case    1 | Error: 0
Test Case    2 | Error: 0
Test Case    3 | Error: 0
Test Case    4 | Error: 0
Test Case    5 | Error: 0
Test Case    6 | Error: 0
Test Case    7 | Error: 0
Test Case    8 | Error: 0
Test Case    9 | Error: 0
Test Case   10 | Error: 0
Test Case   11 | Error: 0
Test Case   12 | Error: 0
Test Case   13 | Error: 0
Test Case   14 | Error: 0
Test Case   15 | Error: 0
Test Case   16 | Error: 0
Test Case   17 | Error: 0
Test Case   18 | Error: 1
Test Case   19 | Error: 0
Test Case   20 | Error: 0
Test Case   21 | Error: 0
Test Case   22 | Error: 0
Test Case   23 | Error: 0
Test Case   24 | Error: 0
Test Case   25 | Error: 0
Test Case   26 | Error: 0
Test Case   27 | Error: 0
Test Case   28 | Error: 0
Test Case   29 | Error: 0
Test Case   30 | Error: 0
Test Case   31 | Error: 1
Test Case   32 | Error: 0
Test Case   33 | Error: 0
Test Case   34 | Error: 1
Test Case   35 | Error: 0
Test Case   36 | Error: 0
Test Case   37 | Error: 0
Test Case   38 | Error: 0
Test Case   39 | Error: 0
Test Case   40 | Error: 0
Test Case   41 | Error: 0
Test Case   42 | Error: 0
Test Case   43 | Error: 0
Test Case   44 | Error: 0
Test Case   45 | Error: 0
Test Case   46 | Error: 0
Test Case   47 | Error: 1
Test Case   48 | Error: 1
Test Case   49 | Error: 0
Test Case   50 | Error: 0
Test Case   51 | Error: 0
Test Case   52 | Error: 0
Test Case   53 | Error: 0
Test Case   54 | Error: 0
Test Case   55 | Error: 0
Test Case   56 | Error: 0
Test Case   57 | Error: 0
Test Case   58 | Error: 1
Test Case   59 | Error: 0
Test Case   60 | Error: 0
Test Case   61 | Error: 0
Test Case   62 | Error: 0
Test Case   63 | Error: 0
Test Case   64 | Error: 1
Test Case   65 | Error: 1
Test Case   66 | Error: 0
Test Case   67 | Error: 0
Test Case   68 | Error: 0
Test Case   69 | Error: 0
Test Case   70 | Error: 0
Test Case   71 | Error: 0
Test Case   72 | Error: 1
Test Case   73 | Error: 0
Test Case   74 | Error: 0
Test Case   75 | Error: 0
Test Case   76 | Error: 0
Test Case   77 | Error: 0
Test Case   78 | Error: 0
Test Case   79 | Error: 0
Test Case   80 | Error: 0
Test Case   81 | Error: 1
Test Case   82 | Error: 0
Test Case   83 | Error: 0
Test Case   84 | Error: 0
Test Case   85 | Error: 0
Test Case   86 | Error: 0
Test Case   87 | Error: 0
Test Case   88 | Error: 0
Test Case   89 | Error: 0
Test Case   90 | Error: 0
Test Case   91 | Error: 0
Test Case   92 | Error: 0
Test Case   93 | Error: 1
Test Case   94 | Error: 0
Test Case   95 | Error: 0
Test Case   96 | Error: 0
Test Case   97 | Error: 0
Test Case   98 | Error: 0
Test Case   99 | Error: 0
Test Case  100 | Error: 0
Test Case  101 | Error: 0
Test Case  102 | Error: 0
Test Case  103 | Error: 0
Test Case  104 | Error: 0
Test Case  105 | Error: 0
Test Case  106 | Error: 0
Test Case  107 | Error: 0
Test Case  108 | Error: 0
Test Case  109 | Error: 0
Test Case  110 | Error: 0
Test Case  111 | Error: 0
Test Case  112 | Error: 0
Test Case  113 | Error: 0
Test Case  114 | Error: 0
Test Case  115 | Error: 0
Test Case  116 | Error: 0
Test Case  117 | Error: 0
Test Case  118 | Error: 0
Test Case  119 | Error: 0
Test Case  120 | Error: 0
Test Case  121 | Error: 0
Test Case  122 | Error: 0
Test Case  123 | Error: 0
Test Case  124 | Error: 0
Test Case  125 | Error: 0
Test Case  126 | Error: 0
Test Case  127 | Error: 0
Test Case  128 | Error: 0
Test Case  129 | Error: 0
Test Case  130 | Error: 0
Test Case  131 | Error: 0
Test Case  132 | Error: 0
Test Case  133 | Error: 0
Test Case  134 | Error: 0
Test Case  135 | Error: 0
Test Case  136 | Error: 0
Test Case  137 | Error: 0
Test Case  138 | Error: 0
Test Case  139 | Error: 0
Test Case  140 | Error: 0
Test Case  141 | Error: 0
Test Case  142 | Error: 0
Test Case  143 | Error: 0
Test Case  144 | Error: 0
Test Case  145 | Error: 0
Test Case  146 | Error: 0
Test Case  147 | Error: 0
Test Case  148 | Error: 0
Test Case  149 | Error: 0
Test Case  150 | Error: 0
Test Case  151 | Error: 0
Test Case  152 | Error: 0
Test Case  153 | Error: 1
Test Case  154 | Error: 0
Test Case  155 | Error: 0
Test Case  156 | Error: 0
Test Case  157 | Error: 0
Test Case  158 | Error: 0
Test Case  159 | Error: 0
Test Case  160 | Error: 0
Test Case  161 | Error: 0
Test Case  162 | Error: 0
Test Case  163 | Error: 0
Test Case  164 | Error: 1
Test Case  165 | Error: 0
Test Case  166 | Error: 0
Test Case  167 | Error: 0
Test Case  168 | Error: 0
Test Case  169 | Error: 0
Test Case  170 | Error: 0
Test Case  171 | Error: 0
Test Case  172 | Error: 0
Test Case  173 | Error: 0
Test Case  174 | Error: 0
Test Case  175 | Error: 0
Test Case  176 | Error: 0
Test Case  177 | Error: 0
Test Case  178 | Error: 0
Test Case  179 | Error: 0
Test Case  180 | Error: 0
Test Case  181 | Error: 0
Test Case  182 | Error: 0
Test Case  183 | Error: 0
Test Case  184 | Error: 0
Test Case  185 | Error: 0
Test Case  186 | Error: 0
Test Case  187 | Error: 0
Test Case  188 | Error: 0
Test Case  189 | Error: 0
Test Case  190 | Error: 0
Test Case  191 | Error: 0
Test Case  192 | Error: 0
Test Case  193 | Error: 0
Test Case  194 | Error: 0
Test Case  195 | Error: 0
Test Case  196 | Error: 0
Test Case  197 | Error: 0
Test Case  198 | Error: 0
Test Case  199 | Error: 0
Test Case  200 | Error: 1
Test Case  201 | Error: 0
Test Case  202 | Error: 1
Test Case  203 | Error: 1
Test Case  204 | Error: 1
Test Case  205 | Error: 1
Test Case  206 | Error: 0
Test Case  207 | Error: 0
Test Case  208 | Error: 0
Test Case  209 | Error: 1
Test Case  210 | Error: 0
Test Case  211 | Error: 1
Test Case  212 | Error: 0
Test Case  213 | Error: 0
Test Case  214 | Error: 0
Test Case  215 | Error: 1
Test Case  216 | Error: 0
Test Case  217 | Error: 0
Test Case  218 | Error: 0
Test Case  219 | Error: 1
Test Case  220 | Error: 1
Test Case  221 | Error: 1
Test Case  222 | Error: 0
Test Case  223 | Error: 1
Test Case  224 | Error: 1
Test Case  225 | Error: 0
Test Case  226 | Error: 0
Test Case  227 | Error: 0
Test Case  228 | Error: 0
Test Case  229 | Error: 1
Test Case  230 | Error: 1
Test Case  231 | Error: 0
Test Case  232 | Error: 0
Test Case  233 | Error: 1
Test Case  234 | Error: 1
Test Case  235 | Error: 1
Test Case  236 | Error: 1
Test Case  237 | Error: 1
Test Case  238 | Error: 1
Test Case  239 | Error: 0
Test Case  240 | Error: 1
Test Case  241 | Error: 1
Test Case  242 | Error: 0
Test Case  243 | Error: 1
Test Case  244 | Error: 1
Test Case  245 | Error: 0
Test Case  246 | Error: 0
Test Case  247 | Error: 0
Test Case  248 | Error: 0
Test Case  249 | Error: 0
Test Case  250 | Error: 1
Test Case  251 | Error: 0
Test Case  252 | Error: 0
Test Case  253 | Error: 1
Test Case  254 | Error: 0
Test Case  255 | Error: 1
Test Case  256 | Error: 0
Test Case  257 | Error: 0
Test Case  258 | Error: 0
Test Case  259 | Error: 1
Test Case  260 | Error: 0
Test Case  261 | Error: 0
Test Case  262 | Error: 0
Test Case  263 | Error: 1
Test Case  264 | Error: 1
Test Case  265 | Error: 0
Test Case  266 | Error: 0
Test Case  267 | Error: 0
Test Case  268 | Error: 1
Test Case  269 | Error: 0
Test Case  270 | Error: 1
Test Case  271 | Error: 1
Test Case  272 | Error: 0
Test Case  273 | Error: 0
Test Case  274 | Error: 1
Test Case  275 | Error: 1
Test Case  276 | Error: 1
Test Case  277 | Error: 0
Test Case  278 | Error: 1
Test Case  279 | Error: 1
Test Case  280 | Error: 1
Test Case  281 | Error: 1
Test Case  282 | Error: 0
Test Case  283 | Error: 1
Test Case  284 | Error: 1
Test Case  285 | Error: 0
Test Case  286 | Error: 0
Test Case  287 | Error: 1
Test Case  288 | Error: 0
Test Case  289 | Error: 0
Test Case  290 | Error: 0
Test Case  291 | Error: 1
Test Case  292 | Error: 0
Test Case  293 | Error: 0
Test Case  294 | Error: 0
Test Case  295 | Error: 0
Test Case  296 | Error: 0
Test Case  297 | Error: 0
Test Case  298 | Error: 1
Test Case  299 | Error: 0
Test Case  300 | Error: 1
Test Case  301 | Error: 1
Test Case  302 | Error: 0
Test Case  303 | Error: 0
Test Case  304 | Error: 0
Test Case  305 | Error: 0
Test Case  306 | Error: 0
Test Case  307 | Error: 1
Test Case  308 | Error: 1
Test Case  309 | Error: 0
Test Case  310 | Error: 1
Test Case  311 | Error: 0
Test Case  312 | Error: 1
Test Case  313 | Error: 1
Test Case  314 | Error: 1
Test Case  315 | Error: 1
Test Case  316 | Error: 1
Test Case  317 | Error: 0
Test Case  318 | Error: 0
Test Case  319 | Error: 0
Test Case  320 | Error: 0
Test Case  321 | Error: 0
Test Case  322 | Error: 0
Test Case  323 | Error: 1
Test Case  324 | Error: 0
Test Case  325 | Error: 0
Test Case  326 | Error: 0
Test Case  327 | Error: 0
Test Case  328 | Error: 1
Test Case  329 | Error: 0
Test Case  330 | Error: 0
Test Case  331 | Error: 1
Test Case  332 | Error: 1
Test Case  333 | Error: 0
Test Case  334 | Error: 0
Test Case  335 | Error: 0
Test Case  336 | Error: 0
Test Case  337 | Error: 0
Test Case  338 | Error: 1
Test Case  339 | Error: 1
Test Case  340 | Error: 0
Test Case  341 | Error: 1
Test Case  342 | Error: 0
Test Case  343 | Error: 0
Test Case  344 | Error: 1
Test Case  345 | Error: 0
Test Case  346 | Error: 0
Test Case  347 | Error: 0
Test Case  348 | Error: 1
Test Case  349 | Error: 1
Test Case  350 | Error: 0
Test Case  351 | Error: 1
Test Case  352 | Error: 0
Test Case  353 | Error: 0
Test Case  354 | Error: 0
Test Case  355 | Error: 1
Test Case  356 | Error: 0
Test Case  357 | Error: 0
Test Case  358 | Error: 0
Test Case  359 | Error: 0
Test Case  360 | Error: 1
Test Case  361 | Error: 1
Test Case  362 | Error: 1
Test Case  363 | Error: 1
Test Case  364 | Error: 0
Test Case  365 | Error: 0
Test Case  366 | Error: 0
Test Case  367 | Error: 0
Test Case  368 | Error: 0
Test Case  369 | Error: 0
Test Case  370 | Error: 1
Test Case  371 | Error: 0
Test Case  372 | Error: 0
Test Case  373 | Error: 1
Test Case  374 | Error: 1
Test Case  375 | Error: 1
Test Case  376 | Error: 0
Test Case  377 | Error: 0
Test Case  378 | Error: 0
Test Case  379 | Error: 0
Test Case  380 | Error: 1
Test Case  381 | Error: 1
Test Case  382 | Error: 1
Test Case  383 | Error: 1
Test Case  384 | Error: 0
Test Case  385 | Error: 1
Test Case  386 | Error: 1
Test Case  387 | Error: 1
Test Case  388 | Error: 1
Test Case  389 | Error: 0
Test Case  390 | Error: 0
Test Case  391 | Error: 0
Test Case  392 | Error: 0
Test Case  393 | Error: 0
Test Case  394 | Error: 1
Test Case  395 | Error: 1
Test Case  396 | Error: 0
Test Case  397 | Error: 0
Test Case  398 | Error: 1
Test Case  399 | Error: 0
Test Case  400 | Error: 0
Test Case  401 | Error: 0
Test Case  402 | Error: 0
Test Case  403 | Error: 0
Test Case  404 | Error: 0
Test Case  405 | Error: 0
Test Case  406 | Error: 0
Test Case  407 | Error: 0
Test Case  408 | Error: 0
Test Case  409 | Error: 1
Test Case  410 | Error: 1
Test Case  411 | Error: 1
Test Case  412 | Error: 1
Test Case  413 | Error: 0
Test Case  414 | Error: 0
Test Case  415 | Error: 0
Test Case  416 | Error: 1
Test Case  417 | Error: 0
Test Case  418 | Error: 1
Test Case  419 | Error: 0
Test Case  420 | Error: 0
Test Case  421 | Error: 0
Test Case  422 | Error: 0
Test Case  423 | Error: 0
Test Case  424 | Error: 0
Test Case  425 | Error: 1
Test Case  426 | Error: 0
Test Case  427 | Error: 1
Test Case  428 | Error: 1
Test Case  429 | Error: 1
Test Case  430 | Error: 0
Test Case  431 | Error: 0
Test Case  432 | Error: 1
Test Case  433 | Error: 0
Test Case  434 | Error: 0
Test Case  435 | Error: 0
Test Case  436 | Error: 0
Test Case  437 | Error: 1
Test Case  438 | Error: 0
Test Case  439 | Error: 1
Test Case  440 | Error: 1
Test Case  441 | Error: 1
Test Case  442 | Error: 0
Test Case  443 | Error: 0
Test Case  444 | Error: 0
Test Case  445 | Error: 0
Test Case  446 | Error: 0
Test Case  447 | Error: 0
Test Case  448 | Error: 0
Test Case  449 | Error: 1
Test Case  450 | Error: 0
Test Case  451 | Error: 0
Test Case  452 | Error: 0
Test Case  453 | Error: 0
Test Case  454 | Error: 0
Test Case  455 | Error: 0
Test Case  456 | Error: 1
Test Case  457 | Error: 1
Test Case  458 | Error: 0
Test Case  459 | Error: 0
Test Case  460 | Error: 0
Test Case  461 | Error: 0
Test Case  462 | Error: 1
Test Case  463 | Error: 0
Test Case  464 | Error: 1
Test Case  465 | Error: 0
Test Case  466 | Error: 0
Test Case  467 | Error: 0
Test Case  468 | Error: 0
Test Case  469 | Error: 0
Test Case  470 | Error: 0
Test Case  471 | Error: 0
Test Case  472 | Error: 0
Test Case  473 | Error: 0
Test Case  474 | Error: 0
Test Case  475 | Error: 0
Test Case  476 | Error: 0
Test Case  477 | Error: 0
Test Case  478 | Error: 1
Test Case  479 | Error: 0
Test Case  480 | Error: 1
Test Case  481 | Error: 0
Test Case  482 | Error: 0
Test Case  483 | Error: 1
Test Case  484 | Error: 1
Test Case  485 | Error: 0
Test Case  486 | Error: 1
Test Case  487 | Error: 1
Test Case  488 | Error: 1
Test Case  489 | Error: 0
Test Case  490 | Error: 0
Test Case  491 | Error: 1
Test Case  492 | Error: 0
Test Case  493 | Error: 0
Test Case  494 | Error: 1
Test Case  495 | Error: 1
Test Case  496 | Error: 1
Test Case  497 | Error: 0
Test Case  498 | Error: 0
Test Case  499 | Error: 0
Test Case  500 | Error: 1
Test Case  501 | Error: 0
Test Case  502 | Error: 0
Test Case  503 | Error: 0
Test Case  504 | Error: 0
Test Case  505 | Error: 0
Test Case  506 | Error: 0
Test Case  507 | Error: 0
Test Case  508 | Error: 1
Test Case  509 | Error: 0
Test Case  510 | Error: 0
Test Case  511 | Error: 0
Test Case  512 | Error: 0
Test Case  513 | Error: 0
Test Case  514 | Error: 0
Test Case  515 | Error: 1
Test Case  516 | Error: 0
Test Case  517 | Error: 1
Test Case  518 | Error: 0
Test Case  519 | Error: 1
Test Case  520 | Error: 1
Test Case  521 | Error: 0
Test Case  522 | Error: 1
Test Case  523 | Error: 1
Test Case  524 | Error: 1
Test Case  525 | Error: 0
Test Case  526 | Error: 0
Test Case  527 | Error: 0
Test Case  528 | Error: 1
Test Case  529 | Error: 0
Test Case  530 | Error: 1
Test Case  531 | Error: 1
Test Case  532 | Error: 0
Test Case  533 | Error: 0
Test Case  534 | Error: 0
Test Case  535 | Error: 0
Test Case  536 | Error: 1
Test Case  537 | Error: 0
Test Case  538 | Error: 0
Test Case  539 | Error: 0
Test Case  540 | Error: 1
Test Case  541 | Error: 0
Test Case  542 | Error: 0
Test Case  543 | Error: 0
Test Case  544 | Error: 0
Test Case  545 | Error: 0
Test Case  546 | Error: 1
Test Case  547 | Error: 0
Test Case  548 | Error: 0
Test Case  549 | Error: 1
Test Case  550 | Error: 0
Test Case  551 | Error: 1
Test Case  552 | Error: 0
Test Case  553 | Error: 1
Test Case  554 | Error: 0
Test Case  555 | Error: 0
Test Case  556 | Error: 0
Test Case  557 | Error: 1
Test Case  558 | Error: 0
Test Case  559 | Error: 0
Test Case  560 | Error: 0
Test Case  561 | Error: 0
Test Case  562 | Error: 0
Test Case  563 | Error: 1
Test Case  564 | Error: 1
Test Case  565 | Error: 0
Test Case  566 | Error: 1
Test Case  567 | Error: 1
Test Case  568 | Error: 0
Test Case  569 | Error: 0
Test Case  570 | Error: 1
Test Case  571 | Error: 0
Test Case  572 | Error: 1
Test Case  573 | Error: 0
Test Case  574 | Error: 0
Test Case  575 | Error: 0
Test Case  576 | Error: 0
Test Case  577 | Error: 1
Test Case  578 | Error: 0
Test Case  579 | Error: 0
Test Case  580 | Error: 0
Test Case  581 | Error: 0
Test Case  582 | Error: 0
Test Case  583 | Error: 0
Test Case  584 | Error: 0
Test Case  585 | Error: 1
Test Case  586 | Error: 1
Test Case  587 | Error: 0
Test Case  588 | Error: 1
Test Case  589 | Error: 0
Test Case  590 | Error: 0
Test Case  591 | Error: 1
Test Case  592 | Error: 0
Test Case  593 | Error: 0
Test Case  594 | Error: 1
Test Case  595 | Error: 1
Test Case  596 | Error: 0
Test Case  597 | Error: 0
Test Case  598 | Error: 1
Test Case  599 | Error: 1
Test Case  600 | Error: 0
Test Case  601 | Error: 0
Test Case  602 | Error: 0
Test Case  603 | Error: 0
Test Case  604 | Error: 0
Test Case  605 | Error: 0
Test Case  606 | Error: 1
Test Case  607 | Error: 0
Test Case  608 | Error: 0
Test Case  609 | Error: 1
Test Case  610 | Error: 0
Test Case  611 | Error: 0
Test Case  612 | Error: 1
Test Case  613 | Error: 1
Test Case  614 | Error: 0
Test Case  615 | Error: 0
Test Case  616 | Error: 0
Test Case  617 | Error: 0
Test Case  618 | Error: 0
Test Case  619 | Error: 0
Test Case  620 | Error: 0
Test Case  621 | Error: 1
Test Case  622 | Error: 1
Test Case  623 | Error: 0
Test Case  624 | Error: 0
Test Case  625 | Error: 0
Test Case  626 | Error: 0
Test Case  627 | Error: 0
Test Case  628 | Error: 1
Test Case  629 | Error: 1
Test Case  630 | Error: 1
Test Case  631 | Error: 0
Test Case  632 | Error: 0
Test Case  633 | Error: 0
Test Case  634 | Error: 0
Test Case  635 | Error: 0
Test Case  636 | Error: 0
Test Case  637 | Error: 1
Test Case  638 | Error: 0
Test Case  639 | Error: 0
Test Case  640 | Error: 0
Test Case  641 | Error: 1
Test Case  642 | Error: 0
Test Case  643 | Error: 1
Test Case  644 | Error: 1
Test Case  645 | Error: 0
Test Case  646 | Error: 0
Test Case  647 | Error: 1
Test Case  648 | Error: 0
Test Case  649 | Error: 1
Test Case  650 | Error: 1
Test Case  651 | Error: 0
Test Case  652 | Error: 0
Test Case  653 | Error: 1
Test Case  654 | Error: 1
Test Case  655 | Error: 0
Test Case  656 | Error: 0
Test Case  657 | Error: 1
Test Case  658 | Error: 1
Test Case  659 | Error: 0
Test Case  660 | Error: 1
Test Case  661 | Error: 0
Test Case  662 | Error: 0
Test Case  663 | Error: 1
Test Case  664 | Error: 0
Test Case  665 | Error: 0
Test Case  666 | Error: 0
Test Case  667 | Error: 0
Test Case  668 | Error: 0
Test Case  669 | Error: 0
Test Case  670 | Error: 0
Test Case  671 | Error: 1
Test Case  672 | Error: 0
Test Case  673 | Error: 0
Test Case  674 | Error: 0
Test Case  675 | Error: 0
Test Case  676 | Error: 1
Test Case  677 | Error: 0
Test Case  678 | Error: 0
Test Case  679 | Error: 0
Test Case  680 | Error: 0
Test Case  681 | Error: 0
Test Case  682 | Error: 0
Test Case  683 | Error: 1
Test Case  684 | Error: 0
Test Case  685 | Error: 0
Test Case  686 | Error: 0
Test Case  687 | Error: 0
Test Case  688 | Error: 1
Test Case  689 | Error: 0
Test Case  690 | Error: 0
Test Case  691 | Error: 0
Test Case  692 | Error: 1
Test Case  693 | Error: 0
Test Case  694 | Error: 1
Test Case  695 | Error: 0
Test Case  696 | Error: 0
Test Case  697 | Error: 0
Test Case  698 | Error: 1
Test Case  699 | Error: 0
Test Case  700 | Error: 1
Test Case  701 | Error: 1
Test Case  702 | Error: 1
Test Case  703 | Error: 0
Test Case  704 | Error: 0
Test Case  705 | Error: 0
Test Case  706 | Error: 0
Test Case  707 | Error: 0
Test Case  708 | Error: 1
Test Case  709 | Error: 1
Test Case  710 | Error: 0
Test Case  711 | Error: 0
Test Case  712 | Error: 0
Test Case  713 | Error: 0
Test Case  714 | Error: 0
Test Case  715 | Error: 1
Test Case  716 | Error: 0
Test Case  717 | Error: 0
Test Case  718 | Error: 0
Test Case  719 | Error: 0
Test Case  720 | Error: 0
Test Case  721 | Error: 0
Test Case  722 | Error: 1
Test Case  723 | Error: 1
Test Case  724 | Error: 1
Test Case  725 | Error: 1
Test Case  726 | Error: 0
Test Case  727 | Error: 1
Test Case  728 | Error: 0
Test Case  729 | Error: 0
Test Case  730 | Error: 1
Test Case  731 | Error: 1
Test Case  732 | Error: 0
Test Case  733 | Error: 1
Test Case  734 | Error: 0
Test Case  735 | Error: 0
Test Case  736 | Error: 0
Test Case  737 | Error: 0
Test Case  738 | Error: 1
Test Case  739 | Error: 0
Test Case  740 | Error: 1
Test Case  741 | Error: 0
Test Case  742 | Error: 0
Test Case  743 | Error: 0
Test Case  744 | Error: 0
Test Case  745 | Error: 0
Test Case  746 | Error: 0
Test Case  747 | Error: 0
Test Case  748 | Error: 0
Test Case  749 | Error: 1
Test Case  750 | Error: 1
Test Case  751 | Error: 0
Test Case  752 | Error: 1
Test Case  753 | Error: 0
Test Case  754 | Error: 0
Test Case  755 | Error: 0
Test Case  756 | Error: 0
Test Case  757 | Error: 0
Test Case  758 | Error: 0
Test Case  759 | Error: 1
Test Case  760 | Error: 0
Test Case  761 | Error: 0
Test Case  762 | Error: 0
Test Case  763 | Error: 0
Test Case  764 | Error: 0
Test Case  765 | Error: 0
Test Case  766 | Error: 0
Test Case  767 | Error: 0
Test Case  768 | Error: 1
Test Case  769 | Error: 1
Test Case  770 | Error: 0
Test Case  771 | Error: 1
Test Case  772 | Error: 0
Test Case  773 | Error: 0
Test Case  774 | Error: 0
Test Case  775 | Error: 1
Test Case  776 | Error: 0
Test Case  777 | Error: 1
Test Case  778 | Error: 0
Test Case  779 | Error: 0
Test Case  780 | Error: 0
Test Case  781 | Error: 1
Test Case  782 | Error: 1
Test Case  783 | Error: 0
Test Case  784 | Error: 0
Test Case  785 | Error: 1
Test Case  786 | Error: 1
Test Case  787 | Error: 0
Test Case  788 | Error: 0
Test Case  789 | Error: 1
Test Case  790 | Error: 1
Test Case  791 | Error: 0
Test Case  792 | Error: 0
Test Case  793 | Error: 0
Test Case  794 | Error: 0
Test Case  795 | Error: 0
Test Case  796 | Error: 0
Test Case  797 | Error: 0
Test Case  798 | Error: 1
Test Case  799 | Error: 0
Test Case  800 | Error: 0
Test Case  801 | Error: 0
Test Case  802 | Error: 0
Test Case  803 | Error: 1
Test Case  804 | Error: 0
Test Case  805 | Error: 1
Test Case  806 | Error: 0
Test Case  807 | Error: 0
Test Case  808 | Error: 1
Test Case  809 | Error: 0
Test Case  810 | Error: 1
Test Case  811 | Error: 0
Test Case  812 | Error: 1
Test Case  813 | Error: 1
Test Case  814 | Error: 0
Test Case  815 | Error: 1
Test Case  816 | Error: 0
Test Case  817 | Error: 0
Test Case  818 | Error: 0
Test Case  819 | Error: 0
Test Case  820 | Error: 0
Test Case  821 | Error: 1
Test Case  822 | Error: 1
Test Case  823 | Error: 1
Test Case  824 | Error: 0
Test Case  825 | Error: 0
Test Case  826 | Error: 1
Test Case  827 | Error: 0
Test Case  828 | Error: 0
Test Case  829 | Error: 1
Test Case  830 | Error: 1
Test Case  831 | Error: 1
Test Case  832 | Error: 1
Test Case  833 | Error: 0
Test Case  834 | Error: 0
Test Case  835 | Error: 0
Test Case  836 | Error: 0
Test Case  837 | Error: 0
Test Case  838 | Error: 0
Test Case  839 | Error: 1
Test Case  840 | Error: 1
Test Case  841 | Error: 0
Test Case  842 | Error: 0
Test Case  843 | Error: 1
Test Case  844 | Error: 0
Test Case  845 | Error: 0
Test Case  846 | Error: 1
Test Case  847 | Error: 0
Test Case  848 | Error: 1
Test Case  849 | Error: 0
Test Case  850 | Error: 0
Test Case  851 | Error: 0
Test Case  852 | Error: 1
Test Case  853 | Error: 0
Test Case  854 | Error: 1
Test Case  855 | Error: 1
Test Case  856 | Error: 0
Test Case  857 | Error: 1
Test Case  858 | Error: 0
Test Case  859 | Error: 0
Test Case  860 | Error: 0
Test Case  861 | Error: 0
Test Case  862 | Error: 0
Test Case  863 | Error: 1
Test Case  864 | Error: 0
Test Case  865 | Error: 1
Test Case  866 | Error: 0
Test Case  867 | Error: 1
Test Case  868 | Error: 0
Test Case  869 | Error: 1
Test Case  870 | Error: 0
Test Case  871 | Error: 1
Test Case  872 | Error: 1
Test Case  873 | Error: 1
Test Case  874 | Error: 1
Test Case  875 | Error: 0
Test Case  876 | Error: 0
Test Case  877 | Error: 0
Test Case  878 | Error: 0
Test Case  879 | Error: 1
Test Case  880 | Error: 0
Test Case  881 | Error: 0
Test Case  882 | Error: 0
Test Case  883 | Error: 0
Test Case  884 | Error: 0
Test Case  885 | Error: 0
Test Case  886 | Error: 1
Test Case  887 | Error: 0
Test Case  888 | Error: 0
Test Case  889 | Error: 1
Test Case  890 | Error: 1
Test Case  891 | Error: 0
Test Case  892 | Error: 0
Test Case  893 | Error: 1
Test Case  894 | Error: 0
Test Case  895 | Error: 1
Test Case  896 | Error: 1
Test Case  897 | Error: 0
Test Case  898 | Error: 0
Test Case  899 | Error: 0
Test Case  900 | Error: 0
Test Case  901 | Error: 0
Test Case  902 | Error: 0
Test Case  903 | Error: 0
Test Case  904 | Error: 0
Test Case  905 | Error: 0
Test Case  906 | Error: 0
Test Case  907 | Error: 0
Test Case  908 | Error: 0
Test Case  909 | Error: 1
Test Case  910 | Error: 0
Test Case  911 | Error: 0
Test Case  912 | Error: 1
Test Case  913 | Error: 0
Test Case  914 | Error: 1
Test Case  915 | Error: 0
Test Case  916 | Error: 0
Test Case  917 | Error: 0
Test Case  918 | Error: 0
Test Case  919 | Error: 0
Test Case  920 | Error: 0
Test Case  921 | Error: 1
Test Case  922 | Error: 0
Test Case  923 | Error: 0
Test Case  924 | Error: 0
Test Case  925 | Error: 1
Test Case  926 | Error: 0
Test Case  927 | Error: 0
Test Case  928 | Error: 0
Test Case  929 | Error: 1
Test Case  930 | Error: 0
Test Case  931 | Error: 0
Test Case  932 | Error: 0
Test Case  933 | Error: 0
Test Case  934 | Error: 0
Test Case  935 | Error: 1
Test Case  936 | Error: 1
Test Case  937 | Error: 0
Test Case  938 | Error: 1
Test Case  939 | Error: 0
Test Case  940 | Error: 1
Test Case  941 | Error: 0
Test Case  942 | Error: 1
Test Case  943 | Error: 1
Test Case  944 | Error: 0
Test Case  945 | Error: 1
Test Case  946 | Error: 0
Test Case  947 | Error: 0
Test Case  948 | Error: 0
Test Case  949 | Error: 0
Test Case  950 | Error: 1
Test Case  951 | Error: 0
Test Case  952 | Error: 1
Test Case  953 | Error: 1
Test Case  954 | Error: 1
Test Case  955 | Error: 0
Test Case  956 | Error: 0
Test Case  957 | Error: 0
Test Case  958 | Error: 0
Test Case  959 | Error: 0
Test Case  960 | Error: 1
Test Case  961 | Error: 1
Test Case  962 | Error: 1
Test Case  963 | Error: 0
Test Case  964 | Error: 1
Test Case  965 | Error: 0
Test Case  966 | Error: 0
Test Case  967 | Error: 0
Test Case  968 | Error: 1
Test Case  969 | Error: 0
Test Case  970 | Error: 0
Test Case  971 | Error: 0
Test Case  972 | Error: 0
Test Case  973 | Error: 1
Test Case  974 | Error: 1
Test Case  975 | Error: 0
Test Case  976 | Error: 1
Test Case  977 | Error: 0
Test Case  978 | Error: 1
Test Case  979 | Error: 1
Test Case  980 | Error: 1
Test Case  981 | Error: 1
Test Case  982 | Error: 0
Test Case  983 | Error: 1
Test Case  984 | Error: 0
Test Case  985 | Error: 1
Test Case  986 | Error: 1
Test Case  987 | Error: 0
Test Case  988 | Error: 1
Test Case  989 | Error: 0
Test Case  990 | Error: 0
Test Case  991 | Error: 0
Test Case  992 | Error: 0
Test Case  993 | Error: 0
Test Case  994 | Error: 0
Test Case  995 | Error: 1
Test Case  996 | Error: 1
Test Case  997 | Error: 1
Test Case  998 | Error: 0
Test Case  999 | Error: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 0                   | Program output: 0                  
Correct output: -44                 | Program output: -44                
Correct output: -99                 | Program output: 0                  
Correct output: -22                 | Program output: -22                
Correct output: 99                  | Program output: 99                 
Correct output: -90                 | Program output: -90                
Correct output: 44                  | Program output: 86                 
Correct output: -68                 | Program output: -68                
Correct output: -46                 | Program output: -46                
Correct output: -54                 | Program output: 62                 
Correct output: 5                   | Program output: 5                  
Correct output: -13                 | Program output: -13                
Correct output: 33                  | Program output: 57                 
Correct output: -10                 | Program output: -10                
Correct output: -95                 | Program output: -95                
Correct output: 47                  | Program output: 47                 
Correct output: 26                  | Program output: 26                 
Correct output: 50                  | Program output: 50                 
Correct output: 35                  | Program output: 35                 
Correct output: -43                 | Program output: -43                
Correct output: 23                  | Program output: 23                 
Correct output: 0                   | Program output: 0                  
Correct output: 42                  | Program output: 42                 
Correct output: 23                  | Program output: 23                 
Correct output: 31                  | Program output: 31                 
Correct output: 20                  | Program output: 48                 
Correct output: 9                   | Program output: 9                  
Correct output: 16                  | Program output: 16                 
Correct output: 15                  | Program output: 0                  
Correct output: 2                   | Program output: 2                  
Correct output: 23                  | Program output: 23                 
Correct output: 10                  | Program output: 10                 
Correct output: 1                   | Program output: 1                  
Correct output: 34                  | Program output: 78                 
Correct output: 20                  | Program output: 41                 
Correct output: 9                   | Program output: 9                  
Correct output: 3                   | Program output: 3                  
Correct output: 28                  | Program output: 28                 
Correct output: 14                  | Program output: 14                 
Correct output: 46                  | Program output: 50                 
Correct output: -96                 | Program output: -96                
Correct output: -61                 | Program output: -61                
Correct output: -78                 | Program output: -19                
Correct output: -91                 | Program output: -19                
Correct output: -95                 | Program output: -95                
Correct output: -84                 | Program output: -84                
Correct output: -71                 | Program output: -71                
Correct output: -74                 | Program output: -74                
Correct output: -60                 | Program output: -60                
Correct output: -55                 | Program output: -12                
Correct output: -42                 | Program output: -42                
Correct output: -76                 | Program output: -76                
Correct output: -95                 | Program output: -95                
Correct output: -96                 | Program output: 0                  
Correct output: -43                 | Program output: -43                
Correct output: -45                 | Program output: -45                
Correct output: -56                 | Program output: -56                
Correct output: -75                 | Program output: -75                
Correct output: -87                 | Program output: -87                
Correct output: -81                 | Program output: -81                
Correct output: -90                 | Program output: -90                
Correct output: -64                 | Program output: -64                
Correct output: -75                 | Program output: -75                
Correct output: -97                 | Program output: -97                
Correct output: -54                 | Program output: -47                
Correct output: -95                 | Program output: -95                
Correct output: -97                 | Program output: -97                
Correct output: -85                 | Program output: -52                
Correct output: -81                 | Program output: -81                
Correct output: -19                 | Program output: -19                
Correct output: -58                 | Program output: -58                
Correct output: -46                 | Program output: -46                
Correct output: -78                 | Program output: -78                
Correct output: -93                 | Program output: -93                
Correct output: -62                 | Program output: -8                 
Correct output: -90                 | Program output: -90                
Correct output: -70                 | Program output: -70                
Correct output: -28                 | Program output: -28                
Correct output: -82                 | Program output: -82                
Correct output: -5                  | Program output: -5                 
Correct output: -45                 | Program output: -45                
Correct output: -23                 | Program output: -23                
Correct output: -61                 | Program output: -61                
Correct output: -55                 | Program output: -55                
Correct output: -95                 | Program output: -95                
Correct output: -82                 | Program output: -82                
Correct output: -65                 | Program output: -65                
Correct output: -36                 | Program output: -36                
Correct output: -53                 | Program output: -53                
Correct output: -34                 | Program output: -34                
Correct output: -17                 | Program output: -17                
Correct output: -82                 | Program output: -82                
Correct output: -49                 | Program output: -49                
Correct output: -54                 | Program output: -36                
Correct output: -71                 | Program output: -71                
Correct output: -15                 | Program output: -15                
Correct output: -73                 | Program output: 28                 
Correct output: -83                 | Program output: -22                
Correct output: -63                 | Program output: 13                 
Correct output: -87                 | Program output: -87                
;;******************************
